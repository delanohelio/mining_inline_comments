{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjIwNzY1", "number": 1440, "title": "Disable the agent when -XX:+UseG1GC is used on Java 7", "bodyText": "What does this PR do?\nCloses #1435\nNo need to take special measures with the JMX operation - we already have it in\n\n  \n    \n      apm-agent-java/apm-agent-core/src/main/java/co/elastic/apm/agent/impl/payload/ProcessFactory.java\n    \n    \n         Line 91\n      in\n      8421856\n    \n    \n    \n    \n\n        \n          \n           private final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean(); \n        \n    \n  \n\n\nwhich is executed during initialization.\nTherefore, I modified the print of JVM arguments to be done at INFO level.\nI also restored the ability to test servlet containers with -javaagent even if they are tested through runtime attachment by default (only applied to Tomcat for now) in order to test manually.\n\nChecklist\n\n\n Updated CHANGELOG.asciidoc - under breaking changes\n Add a unit test for the discovery of the JVM argument\n Test manually that agent is not started when this configuration is detected, both as runtime attach and as javaagent\n Test manually that other JVM info dependent issues are not affected\n Test manually that using this JMX operations works on J9 (and capture related errors anyway)\n Document in the troubleshooting area\n Document as a caveat related to Java 7 support (in supported technologies)", "createdAt": "2020-10-14T08:59:19Z", "url": "https://github.com/elastic/apm-agent-java/pull/1440", "merged": true, "mergeCommit": {"oid": "d10db0ca04d31e1cd9891eb694b0c49c5b535028"}, "closed": true, "closedAt": "2020-10-19T09:26:18Z", "author": {"login": "eyalkoren"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSLKKuAH2gAyNTAzMjIwNzY1OmMzODJhY2RlNGQ5YmIwMDM1OTcyOGU4MDU1OWUwNjUzZmE5MjA3ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUApXPAFqTUxMTU2ODEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c382acde4d9bb00359728e80559e0653fa920782", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c382acde4d9bb00359728e80559e0653fa920782", "committedDate": "2020-10-13T16:27:56Z", "message": "Disable the agent when -XX:+UseG1GC is used on Java 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa049207bff95b36856c7940795654a36563734", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/baa049207bff95b36856c7940795654a36563734", "committedDate": "2020-10-14T11:04:05Z", "message": "Uninstrumenting classes when aborting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mjg4OTgy", "url": "https://github.com/elastic/apm-agent-java/pull/1440#pullrequestreview-508288982", "createdAt": "2020-10-14T12:25:32Z", "commit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyNTozMlrOHhQZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyNTozMlrOHhQZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzYyNw==", "bodyText": "Could we check for tracer state and throw an exception if triggered before tracer has been started ?", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r504633627", "createdAt": "2020-10-14T12:25:32Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+public class JvmRuntimeInfo {\n+\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVersion;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVmName;\n+    @Nullable private static String javaVmVersion;\n+    private static int majorVersion;\n+    private static int updateVersion;\n+    private static boolean isHotSpot;\n+    private static boolean isIbmJ9;\n+\n+    static {\n+        parseVmInfo(System.getProperty(\"java.version\"), System.getProperty(\"java.vm.name\"), System.getProperty(\"java.vm.version\"));\n+    }\n+\n+    /**\n+     * Parses Java major version, update version and JVM vendor\n+     *\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n+     */\n+    // package-protected for testing\n+    static void parseVmInfo(String version, String vmName, @Nullable String vmVersion) {\n+        javaVersion = version;\n+        javaVmName = vmName;\n+        javaVmVersion = vmVersion;\n+\n+        // new scheme introduced in java 9, thus we can use it as a shortcut\n+        if (version.startsWith(\"1.\")) {\n+            majorVersion = Character.digit(version.charAt(2), 10);\n+        } else {\n+            String majorAsString = version.split(\"\\\\.\")[0];\n+            int indexOfDash = majorAsString.indexOf('-');\n+            if (indexOfDash > 0) {\n+                majorAsString = majorAsString.substring(0, indexOfDash);\n+            }\n+            majorVersion = Integer.parseInt(majorAsString);\n+        }\n+\n+        int updateIndex = version.lastIndexOf(\"_\");\n+        if (updateIndex <= 0) {\n+            // GA release like '1.8.0'\n+            updateVersion = 0;\n+        } else {\n+            String updateVersionString;\n+            int versionSuffixIndex = version.indexOf('-', updateIndex + 1);\n+            if (versionSuffixIndex <= 0) {\n+                updateVersionString = version.substring(updateIndex + 1);\n+            } else {\n+                updateVersionString = version.substring(updateIndex + 1, versionSuffixIndex);\n+            }\n+            try {\n+                updateVersion = Integer.parseInt(updateVersionString);\n+            } catch (NumberFormatException e) {\n+                // in case of unknown format, we just support by default\n+                System.err.println(\"Unsupported format of the java.version system property - \" + version);\n+                updateVersion = -1;\n+            }\n+        }\n+\n+        isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        isIbmJ9 = vmName.contains(\"IBM J9\");\n+    }\n+\n+    public static String getJavaVersion() {\n+        return javaVersion;\n+    }\n+\n+    public static String getJavaVmName() {\n+        return javaVmName;\n+    }\n+\n+    @Nullable\n+    public static String getJavaVmVersion() {\n+        return javaVmVersion;\n+    }\n+\n+    public static int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    /**\n+     * Checks if a given version of the JVM is likely supported by this agent.\n+     * <br>\n+     * Supports values provided before and after https://openjdk.java.net/jeps/223, in case parsing fails due to an\n+     * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n+     * negatives.\n+     *\n+     * @return true if the version is supported, false otherwise\n+     */\n+    public static boolean isJavaVersionSupported() {\n+        if (majorVersion < 7) {\n+            // given code is compiled with java 7, this one is unlikely in practice\n+            return false;\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported();\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported();\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported() {\n+        if (updateVersion < 0) {\n+            return true;\n+        }\n+\n+        switch (majorVersion) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return updateVersion >= 60;\n+            case 8:\n+                return updateVersion >= 40;\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported() {\n+        switch (majorVersion) {\n+            case 7:\n+                return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(javaVmVersion);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    /**\n+     * NOTE: THIS METHOD REQUIRES JMX OPERATION, THEREFORE IS SHOULD ONLY BE USED WITHIN OR AFTER THE TRACER HAVE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjkwNzI2", "url": "https://github.com/elastic/apm-agent-java/pull/1440#pullrequestreview-508290726", "createdAt": "2020-10-14T12:27:50Z", "commit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6941377225a1a37c20bafe7e35049f77cc8f44", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3d6941377225a1a37c20bafe7e35049f77cc8f44", "committedDate": "2020-10-14T12:29:02Z", "message": "Adding documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mjg2MTA3", "url": "https://github.com/elastic/apm-agent-java/pull/1440#pullrequestreview-508286107", "createdAt": "2020-10-14T12:21:45Z", "commit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoyMTo0NVrOHhQQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoxMTowNFrOHh1qVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMTM2NQ==", "bodyText": "The damage might already be done at this point. Not even starting the tracer and instrumentation seems to be safer.\nTo deal with the situation where calling ManagementFactory.getRuntimeMXBean() might cause a deadlock if a JUL logger gets initialized, we could add a flag to disable the bootstrap checks.\nBut I don't see an indication that any loggers are used when ManagementFactory.getRuntimeMXBean() is called. I would be very surprised if it was the case.\nPersonally, I would trade this unlikely potential issue that can be mitigated with a flag with the risk that's imposed by first instrumenting and then un-instrumenting JVMs with unsupported flags.", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r504631365", "createdAt": "2020-10-14T12:21:45Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -539,6 +546,11 @@ private synchronized void startSync() {\n             logger.warn(\"Trying to start an already initialized agent\");\n             return;\n         }\n+        if (!JvmRuntimeInfo.isJvmConfigurationSupported()) {\n+            logger.error(\"JVM configuration is not supported. The agent will not be started and classes are un-instrumented.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MjYyMg==", "bodyText": "Forgot to submit this yesterday^ \ud83d\ude44", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505242622", "createdAt": "2020-10-15T07:09:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -539,6 +546,11 @@ private synchronized void startSync() {\n             logger.warn(\"Trying to start an already initialized agent\");\n             return;\n         }\n+        if (!JvmRuntimeInfo.isJvmConfigurationSupported()) {\n+            logger.error(\"JVM configuration is not supported. The agent will not be started and classes are un-instrumented.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMTM2NQ=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0NDI0NA==", "bodyText": "I'd also recommend adding a way to disable the bootstrap checks, for example with a system property, in case it does cause problems. It can't be a config option as these get initialized later.", "url": "https://github.com/elastic/apm-agent-java/pull/1440#discussion_r505244244", "createdAt": "2020-10-15T07:11:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JvmRuntimeInfo.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+public class JvmRuntimeInfo {\n+\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVersion;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private static String javaVmName;\n+    @Nullable private static String javaVmVersion;\n+    private static int majorVersion;\n+    private static int updateVersion;\n+    private static boolean isHotSpot;\n+    private static boolean isIbmJ9;\n+\n+    static {\n+        parseVmInfo(System.getProperty(\"java.version\"), System.getProperty(\"java.vm.name\"), System.getProperty(\"java.vm.version\"));\n+    }\n+\n+    /**\n+     * Parses Java major version, update version and JVM vendor\n+     *\n+     * @param version   jvm version, from {@code System.getProperty(\"java.version\")}\n+     * @param vmName    jvm name, from {@code System.getProperty(\"java.vm.name\")}\n+     * @param vmVersion jvm version, from {@code System.getProperty(\"java.vm.version\")}\n+     */\n+    // package-protected for testing\n+    static void parseVmInfo(String version, String vmName, @Nullable String vmVersion) {\n+        javaVersion = version;\n+        javaVmName = vmName;\n+        javaVmVersion = vmVersion;\n+\n+        // new scheme introduced in java 9, thus we can use it as a shortcut\n+        if (version.startsWith(\"1.\")) {\n+            majorVersion = Character.digit(version.charAt(2), 10);\n+        } else {\n+            String majorAsString = version.split(\"\\\\.\")[0];\n+            int indexOfDash = majorAsString.indexOf('-');\n+            if (indexOfDash > 0) {\n+                majorAsString = majorAsString.substring(0, indexOfDash);\n+            }\n+            majorVersion = Integer.parseInt(majorAsString);\n+        }\n+\n+        int updateIndex = version.lastIndexOf(\"_\");\n+        if (updateIndex <= 0) {\n+            // GA release like '1.8.0'\n+            updateVersion = 0;\n+        } else {\n+            String updateVersionString;\n+            int versionSuffixIndex = version.indexOf('-', updateIndex + 1);\n+            if (versionSuffixIndex <= 0) {\n+                updateVersionString = version.substring(updateIndex + 1);\n+            } else {\n+                updateVersionString = version.substring(updateIndex + 1, versionSuffixIndex);\n+            }\n+            try {\n+                updateVersion = Integer.parseInt(updateVersionString);\n+            } catch (NumberFormatException e) {\n+                // in case of unknown format, we just support by default\n+                System.err.println(\"Unsupported format of the java.version system property - \" + version);\n+                updateVersion = -1;\n+            }\n+        }\n+\n+        isHotSpot = vmName.contains(\"HotSpot(TM)\") || vmName.contains(\"OpenJDK\");\n+        isIbmJ9 = vmName.contains(\"IBM J9\");\n+    }\n+\n+    public static String getJavaVersion() {\n+        return javaVersion;\n+    }\n+\n+    public static String getJavaVmName() {\n+        return javaVmName;\n+    }\n+\n+    @Nullable\n+    public static String getJavaVmVersion() {\n+        return javaVmVersion;\n+    }\n+\n+    public static int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    /**\n+     * Checks if a given version of the JVM is likely supported by this agent.\n+     * <br>\n+     * Supports values provided before and after https://openjdk.java.net/jeps/223, in case parsing fails due to an\n+     * unknown version format, we assume it's supported, thus this method might return false positives, but never false\n+     * negatives.\n+     *\n+     * @return true if the version is supported, false otherwise\n+     */\n+    public static boolean isJavaVersionSupported() {\n+        if (majorVersion < 7) {\n+            // given code is compiled with java 7, this one is unlikely in practice\n+            return false;\n+        }\n+        if (isHotSpot) {\n+            return isHotSpotVersionSupported();\n+        } else if (isIbmJ9) {\n+            return isIbmJ9VersionSupported();\n+        }\n+        // innocent until proven guilty\n+        return true;\n+    }\n+\n+    private static boolean isHotSpotVersionSupported() {\n+        if (updateVersion < 0) {\n+            return true;\n+        }\n+\n+        switch (majorVersion) {\n+            case 7:\n+                // versions prior to that have unreliable invoke dynamic support according to https://groovy-lang.org/indy.html\n+                return updateVersion >= 60;\n+            case 8:\n+                return updateVersion >= 40;\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private static boolean isIbmJ9VersionSupported() {\n+        switch (majorVersion) {\n+            case 7:\n+                return false;\n+            case 8:\n+                // early versions crash during invokedynamic bootstrap\n+                // the exact version that fixes that error is currently not known\n+                // presumably, service refresh 5 (build 2.8) fixes the issue\n+                return !\"2.8\".equals(javaVmVersion);\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    /**\n+     * NOTE: THIS METHOD REQUIRES JMX OPERATION, THEREFORE IS SHOULD ONLY BE USED WITHIN OR AFTER THE TRACER HAVE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzYyNw=="}, "originalCommit": {"oid": "baa049207bff95b36856c7940795654a36563734"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e2ef34d003ac5670f00b317bcbe20152a70fee", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e9e2ef34d003ac5670f00b317bcbe20152a70fee", "committedDate": "2020-10-18T09:03:53Z", "message": "Merge remote-tracking branch 'upstream/master' into disallow-G1GC-in-Java7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8245d253cffaecc2b34e7b753b19548ecc4ad512", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8245d253cffaecc2b34e7b753b19548ecc4ad512", "committedDate": "2020-10-19T07:49:42Z", "message": "Applying check in initializatin rather than start"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTY4MTI2", "url": "https://github.com/elastic/apm-agent-java/pull/1440#pullrequestreview-511568126", "createdAt": "2020-10-19T09:20:54Z", "commit": {"oid": "8245d253cffaecc2b34e7b753b19548ecc4ad512"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3679, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}