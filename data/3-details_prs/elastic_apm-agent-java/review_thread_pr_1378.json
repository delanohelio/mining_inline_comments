{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NjYxMDY5", "number": 1378, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMjozOFrOEfZ9-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozMzoxNFrOEfaZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY2Nzc3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMjozOFrOHLqRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxMjozOFrOHLqRQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4ODkzMQ==", "bodyText": "[very minor] maybe split error message in two parts, with \"set logging level to info\" only if it's not already enabled. Otherwise that error message is confusing.", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481988931", "createdAt": "2020-09-02T11:12:38Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java", "diffHunk": "@@ -103,18 +106,44 @@ protected boolean shouldEndRequest() {\n     protected HttpURLConnection startRequest(String endpoint) throws IOException {\n         final HttpURLConnection connection = apmServerClient.startRequest(endpoint);\n         if (connection != null) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Starting new request to {}\", connection.getURL());\n+            try {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Starting new request to {}\", connection.getURL());\n+                }\n+                connection.setRequestMethod(\"POST\");\n+                connection.setDoOutput(true);\n+                connection.setChunkedStreamingMode(DslJsonSerializer.BUFFER_SIZE);\n+                connection.setRequestProperty(\"Content-Encoding\", \"deflate\");\n+                connection.setRequestProperty(\"Content-Type\", \"application/x-ndjson\");\n+                connection.setUseCaches(false);\n+                connection.connect();\n+                os = new DeflaterOutputStream(connection.getOutputStream(), deflater);\n+                os.write(metaData);\n+            } catch (IOException e) {\n+                logger.error(\"Error trying to connect to APM Server. If SSL is enabled, set logging level to info \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY4MDk5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNjoyOFrOHLqY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoxODo0NVrOHLuseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDg5NQ==", "bodyText": "why not log e1 (or at least it's error message), something like log.error(\"unable to get cipher suite {}\", e) ?", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481990895", "createdAt": "2020-09-02T11:16:28Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java", "diffHunk": "@@ -103,18 +106,44 @@ protected boolean shouldEndRequest() {\n     protected HttpURLConnection startRequest(String endpoint) throws IOException {\n         final HttpURLConnection connection = apmServerClient.startRequest(endpoint);\n         if (connection != null) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Starting new request to {}\", connection.getURL());\n+            try {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Starting new request to {}\", connection.getURL());\n+                }\n+                connection.setRequestMethod(\"POST\");\n+                connection.setDoOutput(true);\n+                connection.setChunkedStreamingMode(DslJsonSerializer.BUFFER_SIZE);\n+                connection.setRequestProperty(\"Content-Encoding\", \"deflate\");\n+                connection.setRequestProperty(\"Content-Type\", \"application/x-ndjson\");\n+                connection.setUseCaches(false);\n+                connection.connect();\n+                os = new DeflaterOutputStream(connection.getOutputStream(), deflater);\n+                os.write(metaData);\n+            } catch (IOException e) {\n+                logger.error(\"Error trying to connect to APM Server. If SSL is enabled, set logging level to info \" +\n+                    \"for detailed SSL configurations available for the current connection.\");\n+                if (logger.isInfoEnabled() && connection instanceof HttpsURLConnection) {\n+                    HttpsURLConnection httpsURLConnection = (HttpsURLConnection) connection;\n+                    try {\n+                        logger.info(\"Cipher suite used for this connection: {}\", httpsURLConnection.getCipherSuite());\n+                    } catch (Exception e1) {\n+                        SSLSocketFactory sslSocketFactory = httpsURLConnection.getSSLSocketFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2MTQzMw==", "bodyText": "Because it is not interesting for our purpose, it's just a premature check on a non-initialized connection done for info logging. I am falling back to doing what I need to do on non-initialized connections.", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r482061433", "createdAt": "2020-09-02T13:18:45Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java", "diffHunk": "@@ -103,18 +106,44 @@ protected boolean shouldEndRequest() {\n     protected HttpURLConnection startRequest(String endpoint) throws IOException {\n         final HttpURLConnection connection = apmServerClient.startRequest(endpoint);\n         if (connection != null) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Starting new request to {}\", connection.getURL());\n+            try {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Starting new request to {}\", connection.getURL());\n+                }\n+                connection.setRequestMethod(\"POST\");\n+                connection.setDoOutput(true);\n+                connection.setChunkedStreamingMode(DslJsonSerializer.BUFFER_SIZE);\n+                connection.setRequestProperty(\"Content-Encoding\", \"deflate\");\n+                connection.setRequestProperty(\"Content-Type\", \"application/x-ndjson\");\n+                connection.setUseCaches(false);\n+                connection.connect();\n+                os = new DeflaterOutputStream(connection.getOutputStream(), deflater);\n+                os.write(metaData);\n+            } catch (IOException e) {\n+                logger.error(\"Error trying to connect to APM Server. If SSL is enabled, set logging level to info \" +\n+                    \"for detailed SSL configurations available for the current connection.\");\n+                if (logger.isInfoEnabled() && connection instanceof HttpsURLConnection) {\n+                    HttpsURLConnection httpsURLConnection = (HttpsURLConnection) connection;\n+                    try {\n+                        logger.info(\"Cipher suite used for this connection: {}\", httpsURLConnection.getCipherSuite());\n+                    } catch (Exception e1) {\n+                        SSLSocketFactory sslSocketFactory = httpsURLConnection.getSSLSocketFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDg5NQ=="}, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY5MTA5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxOToyOVrOHLqfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyMToyMVrOHLuzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MjQ3MA==", "bodyText": "[question] could this allows to easily spot a missing certificate (or CA) in trust store ?", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481992470", "createdAt": "2020-09-02T11:19:29Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -209,17 +211,44 @@ public void setSSLParameters(SSLParameters params) {\n \n     @Override\n     public void connect(SocketAddress endpoint) throws IOException {\n-        socket.connect(endpoint);\n+        try {\n+            socket.connect(endpoint);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n     }\n \n     @Override\n     public void connect(SocketAddress endpoint, int timeout) throws IOException {\n-        socket.connect(endpoint, timeout);\n+        try {\n+            socket.connect(endpoint, timeout);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n     }\n \n     @Override\n     public void bind(SocketAddress bindpoint) throws IOException {\n-        socket.bind(bindpoint);\n+        try {\n+            socket.bind(bindpoint);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n+    }\n+\n+    private void logSslInfo() {\n+        SSLSession session = socket.getSession();\n+        if (session != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2MzE3NA==", "bodyText": "Good question! I spent quite some time looking for a way to get the effective truststore and keystore used to create the connection, but it's only available on the internal implementations, not exposed for external query (at least I couldn't find a way). We can instrument to find that, but.... Maybe in the next enhancement \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r482063174", "createdAt": "2020-09-02T13:21:21Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -209,17 +211,44 @@ public void setSSLParameters(SSLParameters params) {\n \n     @Override\n     public void connect(SocketAddress endpoint) throws IOException {\n-        socket.connect(endpoint);\n+        try {\n+            socket.connect(endpoint);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n     }\n \n     @Override\n     public void connect(SocketAddress endpoint, int timeout) throws IOException {\n-        socket.connect(endpoint, timeout);\n+        try {\n+            socket.connect(endpoint, timeout);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n     }\n \n     @Override\n     public void bind(SocketAddress bindpoint) throws IOException {\n-        socket.bind(bindpoint);\n+        try {\n+            socket.bind(bindpoint);\n+        } catch (IOException e) {\n+            logSslInfo();\n+            throw e;\n+        }\n+    }\n+\n+    private void logSslInfo() {\n+        SSLSession session = socket.getSession();\n+        if (session != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MjQ3MA=="}, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzcwOTM5OnYy", "diffSide": "RIGHT", "path": "docs/setup-ssl.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNDozNlrOHLqqAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNDozNlrOHLqqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTI2NA==", "bodyText": "[wording] While it is recommended to keep this default behavior, you can change it through the <<config-verify-server-cert>> configuration.", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481995264", "createdAt": "2020-09-02T11:24:36Z", "author": {"login": "SylvainJuge"}, "path": "docs/setup-ssl.asciidoc", "diffHunk": "@@ -1,35 +1,31 @@\n [[ssl-configuration]]\n === SSL/TLS communication with APM Server\n \n-If {apm-server-ref-v}/secure-communication-agents.html[SSL/TLS communication] is enabled on\n-the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n+If {apm-server-ref-v}/ssl-setup.html[SSL/TLS communication] is enabled on the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n \n [float]\n [[ssl-server-authentication]]\n ==== APM Server certificate authentication\n \n-By default, when using HTTPS to communicate with APM Server, the agents will verify the identity\n-of the APM Server by authenticating its certificate. It is not recommended to change this default,\n-however it is possible through the <<config-verify-server-cert>> configuration.\n+By default, when using HTTPS to communicate with APM Server, the agents will verify the identity of the APM Server by authenticating its certificate.\n+It is not recommended to change this default, however it is possible through the <<config-verify-server-cert>> configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzczMTcxOnYy", "diffSide": "RIGHT", "path": "docs/setup-ssl.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozMDo1MlrOHLq3Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyNDozN1rOHLu8PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5ODY0Ng==", "bodyText": "[wording] split in two distinct cases for clarity (I know users tend to get this wrong)\n\nIf APM Server uses a self-signed certificate, you have to add the self-signed certificate to JVM truststore\nIf APM Server uses a certificate signed by a custom (or unknown) Certificate Authority (CA), you have to add the CA certificate to JVM truststore.", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481998646", "createdAt": "2020-09-02T11:30:52Z", "author": {"login": "SylvainJuge"}, "path": "docs/setup-ssl.asciidoc", "diffHunk": "@@ -1,35 +1,31 @@\n [[ssl-configuration]]\n === SSL/TLS communication with APM Server\n \n-If {apm-server-ref-v}/secure-communication-agents.html[SSL/TLS communication] is enabled on\n-the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n+If {apm-server-ref-v}/ssl-setup.html[SSL/TLS communication] is enabled on the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n \n [float]\n [[ssl-server-authentication]]\n ==== APM Server certificate authentication\n \n-By default, when using HTTPS to communicate with APM Server, the agents will verify the identity\n-of the APM Server by authenticating its certificate. It is not recommended to change this default,\n-however it is possible through the <<config-verify-server-cert>> configuration.\n+By default, when using HTTPS to communicate with APM Server, the agents will verify the identity of the APM Server by authenticating its certificate.\n+It is not recommended to change this default, however it is possible through the <<config-verify-server-cert>> configuration.\n \n-If the certificate used by the APM Server is self-signed, you would need to add the same certificate\n-(or the root certificate of the custom CA that signed it)\n-to the JVM's truststore. You can find which truststore is used by setting `-Djavax.net.debug=all`\n-in the command line. Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.\n+If the certificate used by the APM Server is self-signed, you would need to add the same certificate (or the root certificate of the custom CA that signed it) to the JVM's truststore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2NTQ2OA==", "bodyText": "It's one case actually - a self-signed is still signed by a private (could be ad-hoc) CA. So you can either add the leaf certificate or the CA root certificate", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r482065468", "createdAt": "2020-09-02T13:24:37Z", "author": {"login": "eyalkoren"}, "path": "docs/setup-ssl.asciidoc", "diffHunk": "@@ -1,35 +1,31 @@\n [[ssl-configuration]]\n === SSL/TLS communication with APM Server\n \n-If {apm-server-ref-v}/secure-communication-agents.html[SSL/TLS communication] is enabled on\n-the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n+If {apm-server-ref-v}/ssl-setup.html[SSL/TLS communication] is enabled on the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n \n [float]\n [[ssl-server-authentication]]\n ==== APM Server certificate authentication\n \n-By default, when using HTTPS to communicate with APM Server, the agents will verify the identity\n-of the APM Server by authenticating its certificate. It is not recommended to change this default,\n-however it is possible through the <<config-verify-server-cert>> configuration.\n+By default, when using HTTPS to communicate with APM Server, the agents will verify the identity of the APM Server by authenticating its certificate.\n+It is not recommended to change this default, however it is possible through the <<config-verify-server-cert>> configuration.\n \n-If the certificate used by the APM Server is self-signed, you would need to add the same certificate\n-(or the root certificate of the custom CA that signed it)\n-to the JVM's truststore. You can find which truststore is used by setting `-Djavax.net.debug=all`\n-in the command line. Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.\n+If the certificate used by the APM Server is self-signed, you would need to add the same certificate (or the root certificate of the custom CA that signed it) to the JVM's truststore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5ODY0Ng=="}, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzczODkwOnYy", "diffSide": "RIGHT", "path": "docs/setup-ssl.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozMzoxNFrOHLq7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyNjoyNVrOHLvBWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5OTc1MQ==", "bodyText": "[wording] JVM truststore is usually stored in $JAVA_HOME/jre/lib/security/cacerts file.", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r481999751", "createdAt": "2020-09-02T11:33:14Z", "author": {"login": "SylvainJuge"}, "path": "docs/setup-ssl.asciidoc", "diffHunk": "@@ -1,35 +1,31 @@\n [[ssl-configuration]]\n === SSL/TLS communication with APM Server\n \n-If {apm-server-ref-v}/secure-communication-agents.html[SSL/TLS communication] is enabled on\n-the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n+If {apm-server-ref-v}/ssl-setup.html[SSL/TLS communication] is enabled on the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n \n [float]\n [[ssl-server-authentication]]\n ==== APM Server certificate authentication\n \n-By default, when using HTTPS to communicate with APM Server, the agents will verify the identity\n-of the APM Server by authenticating its certificate. It is not recommended to change this default,\n-however it is possible through the <<config-verify-server-cert>> configuration.\n+By default, when using HTTPS to communicate with APM Server, the agents will verify the identity of the APM Server by authenticating its certificate.\n+It is not recommended to change this default, however it is possible through the <<config-verify-server-cert>> configuration.\n \n-If the certificate used by the APM Server is self-signed, you would need to add the same certificate\n-(or the root certificate of the custom CA that signed it)\n-to the JVM's truststore. You can find which truststore is used by setting `-Djavax.net.debug=all`\n-in the command line. Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.\n+If the certificate used by the APM Server is self-signed, you would need to add the same certificate (or the root certificate of the custom CA that signed it) to the JVM's truststore.\n+You can find which truststore is used by setting `-Djavax.net.debug=all`\n+in the command line.\n+Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2Njc3Ng==", "bodyText": "I think the original wording is better - $JAVA_HOME/jre/lib/security/cacerts IS the truststore", "url": "https://github.com/elastic/apm-agent-java/pull/1378#discussion_r482066776", "createdAt": "2020-09-02T13:26:25Z", "author": {"login": "eyalkoren"}, "path": "docs/setup-ssl.asciidoc", "diffHunk": "@@ -1,35 +1,31 @@\n [[ssl-configuration]]\n === SSL/TLS communication with APM Server\n \n-If {apm-server-ref-v}/secure-communication-agents.html[SSL/TLS communication] is enabled on\n-the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n+If {apm-server-ref-v}/ssl-setup.html[SSL/TLS communication] is enabled on the APM Server, use the `https` protocol when configuring <<config-server-urls,`server_urls`>>.\n \n [float]\n [[ssl-server-authentication]]\n ==== APM Server certificate authentication\n \n-By default, when using HTTPS to communicate with APM Server, the agents will verify the identity\n-of the APM Server by authenticating its certificate. It is not recommended to change this default,\n-however it is possible through the <<config-verify-server-cert>> configuration.\n+By default, when using HTTPS to communicate with APM Server, the agents will verify the identity of the APM Server by authenticating its certificate.\n+It is not recommended to change this default, however it is possible through the <<config-verify-server-cert>> configuration.\n \n-If the certificate used by the APM Server is self-signed, you would need to add the same certificate\n-(or the root certificate of the custom CA that signed it)\n-to the JVM's truststore. You can find which truststore is used by setting `-Djavax.net.debug=all`\n-in the command line. Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.\n+If the certificate used by the APM Server is self-signed, you would need to add the same certificate (or the root certificate of the custom CA that signed it) to the JVM's truststore.\n+You can find which truststore is used by setting `-Djavax.net.debug=all`\n+in the command line.\n+Typically, it would be `$JAVA_HOME/jre/lib/security/cacerts`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5OTc1MQ=="}, "originalCommit": {"oid": "5905aa633521bbe3b06fa88e0f65a2b3f17dae1e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}