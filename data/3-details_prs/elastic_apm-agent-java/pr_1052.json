{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTU5NTI3", "number": 1052, "title": "add support for the Apache Dubbo", "bodyText": "#689  What does this PR do?\nadd instrumentation for the apache dubbo\nChecklist\n\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\n\n\n\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n\n\n\n I have updated CHANGELOG.asciidoc\n I have updated supported-technologies.asciidoc\n Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? How did you make sure that old, non-supported versions are not instrumented by accident?\n\nRelated issues\n\nRelates #989", "createdAt": "2020-02-26T02:00:18Z", "url": "https://github.com/elastic/apm-agent-java/pull/1052", "merged": true, "mergeCommit": {"oid": "9dc86f0e17c224d72d25388de4480d60105f4bb9"}, "closed": true, "closedAt": "2020-06-09T15:04:21Z", "author": {"login": "CoderLan0668"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKnbUsAH2gAyMzc5OTU5NTI3OjdmNGI5ZGU5MWMwOGVmMjgxMjVhYWFjZTdlNGI0NTQ0YmE4ZTA4YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcplzwoAH2gAyMzc5OTU5NTI3OjVmYjYwYTJlOWI5MTQ3OTI4MzdhZjQxMmNhZjZkYTdkNjExNmVkZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f4b9de91c08ef28125aaace7e4b4544ba8e08b4", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7f4b9de91c08ef28125aaace7e4b4544ba8e08b4", "committedDate": "2020-03-05T08:41:28Z", "message": "add dubbo plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a43558fc72d9f6bc6a213785064f13a8d7721be8", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a43558fc72d9f6bc6a213785064f13a8d7721be8", "committedDate": "2020-03-05T08:57:02Z", "message": "add dubbo plugin(configuration and version merge)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7daf1e6c0ae1960c045c9648790debc8f631a56", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/f7daf1e6c0ae1960c045c9648790debc8f631a56", "committedDate": "2020-02-26T01:50:56Z", "message": "update changelog and supported-technologies for dubbo plugin"}, "afterCommit": {"oid": "a43558fc72d9f6bc6a213785064f13a8d7721be8", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a43558fc72d9f6bc6a213785064f13a8d7721be8", "committedDate": "2020-03-05T08:57:02Z", "message": "add dubbo plugin(configuration and version merge)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a7a4a3f7f3d42696919112fec7ead91f893024", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f8a7a4a3f7f3d42696919112fec7ead91f893024", "committedDate": "2020-03-07T03:58:23Z", "message": "use HelperClassManager to solve the ClassNotFoundException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f80d8151b3a4550e592ec14f20d00c898a5ad5", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/74f80d8151b3a4550e592ec14f20d00c898a5ad5", "committedDate": "2020-03-09T03:29:52Z", "message": "deal with dubbo exception, for example timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758eb4ff88105b4e15d6e79c9a90d0610895abaf", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/758eb4ff88105b4e15d6e79c9a90d0610895abaf", "committedDate": "2020-03-09T04:04:41Z", "message": "ignore span end while not in a trace transaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a5a384a1459c137d9da4b2ac0e1acddae450e384", "committedDate": "2020-03-12T11:39:57Z", "message": "using transaction with scope to solve the concurrency problem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDk3OTEw", "url": "https://github.com/elastic/apm-agent-java/pull/1052#pullrequestreview-373497910", "createdAt": "2020-03-12T12:07:02Z", "commit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowODo0MFrOF1b9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMjo0OFrOF1cYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA==", "bodyText": "It's fine if the protocol doesn't support multiple headers. The agent will only write a single value per header but supports reading multiple values if the protocol supports it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String headerValueStr = doGetHeader(headerName, invocation);\n          \n          \n            \n                    if (headerValueStr == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    String[] headerValues = headerValueStr.split(SEPARATOR);\n          \n          \n            \n                    for (String headerValue : headerValues) {\n          \n          \n            \n                        consumer.accept(headerValue, state);\n          \n          \n            \n                    }\n          \n          \n            \n                    consumer.accept(invocation.getAttachment(headerName), state);", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391576920", "createdAt": "2020-03-12T12:08:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzM1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String oldHeader = getFirstHeader(headerName, invocation);\n          \n          \n            \n                    String newHeader = headerValue;\n          \n          \n            \n                    if (oldHeader != null) {\n          \n          \n            \n                        newHeader = oldHeader + SEPARATOR + headerValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    doSetHeader(headerName, newHeader, invocation);\n          \n          \n            \n                    invocation.setAttachment(headerName, headerValue)", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577356", "createdAt": "2020-03-12T12:09:34Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }\n+    }\n+\n+    @Override\n+    public void setHeader(String headerName, String headerValue, Invocation invocation) {\n+        String oldHeader = getFirstHeader(headerName, invocation);\n+        String newHeader = headerValue;\n+        if (oldHeader != null) {\n+            newHeader = oldHeader + SEPARATOR + headerValue;\n+        }\n+        doSetHeader(headerName, newHeader, invocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzkwOA==", "bodyText": "Rather than allocating an object, just pass all the information as method parameters to the helper", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577908", "createdAt": "2020-03-12T12:10:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.advice;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelper;\n+import co.elastic.apm.agent.dubbo.helper.DubboApiInfo;\n+import co.elastic.apm.agent.dubbo.helper.DubboTraceHelper;\n+import co.elastic.apm.agent.dubbo.helper.IgnoreExceptionHelper;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.Result;\n+import org.apache.dubbo.rpc.RpcContext;\n+\n+@VisibleForAdvice\n+public class ApacheDubboFilterAdvice {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    @VisibleForAdvice\n+    public static HelperClassManager<ApacheDubboAttachmentHelper> helperClassManager;\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        ApacheDubboFilterAdvice.tracer = tracer;\n+        DubboTraceHelper.init(tracer);\n+        IgnoreExceptionHelper.init(tracer);\n+        helperClassManager = HelperClassManager.ForAnyClassLoader.of(tracer,\n+            \"co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelperImpl\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnterFilterInvoke(@Advice.Argument(1) Invocation invocation,\n+                                           @Advice.Local(\"span\") Span span,\n+                                           @Advice.Local(\"apiClazz\") Class<?> apiClazz,\n+                                           @Advice.Local(\"transaction\") Transaction transaction,\n+                                           @Advice.Local(\"scope\") Scope scope) {\n+        RpcContext context = RpcContext.getContext();\n+        String version = context.getUrl().getParameter(\"version\");\n+        Invoker<?> invoker = invocation.getInvoker();\n+        apiClazz = invoker.getInterface();\n+        DubboApiInfo dubboApiInfo = new DubboApiInfo(\n+            apiClazz, invocation.getMethodName(),\n+            invocation.getParameterTypes(), version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MTQ0MA==", "bodyText": "This allocates lots of objects on each invocation. In order to reduce allocations, could we go for a more simple span name to make it completely allocation free like this:\nspan.appendToName(apiInfo.getApiClass().getName())\n    .appendToName(\"#\")\n    .appendToName(apiInfo.getMethodName());", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391581440", "createdAt": "2020-03-12T12:18:06Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ==", "bodyText": "Could you explain what this exactly does? I fear that this is going to have too much runtime overhead.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582361", "createdAt": "2020-03-12T12:19:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mjk4Mg==", "bodyText": "Would transaction.captureEception(t); work?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582982", "createdAt": "2020-03-12T12:21:02Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA==", "bodyText": "Custom context is reserved for user-defined properties. Core agent plugins should not use them.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583374", "createdAt": "2020-03-12T12:21:44Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mzg0MA==", "bodyText": "can this class extend AbstractInstrumentationTest?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583840", "createdAt": "2020-03-12T12:22:48Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.dubbo.api.DubboTestApi;\n+import co.elastic.apm.agent.dubbo.api.exception.BizException;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.TransactionContext;\n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class AbstractDubboInstrumentationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26af1e7b89d2fb4fb8f73a78f5d5c3988bb97d6d", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/26af1e7b89d2fb4fb8f73a78f5d5c3988bb97d6d", "committedDate": "2020-03-20T03:50:21Z", "message": "modify AbstractDubboInstrumentationTest to extends AbstractInstrumentationTest, reuse some test initial codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cbc6aa79b49f6d9583ebca0a826ab64cb77c09af", "committedDate": "2020-03-28T04:40:12Z", "message": "add support for alibaba async consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4d2d129676b1f16d5fbc6fe81da714c9fd2845", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5e4d2d129676b1f16d5fbc6fe81da714c9fd2845", "committedDate": "2020-04-01T01:22:14Z", "message": "add support for apache dubbo async"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5b8b03d76576368d4cab903d3eac4b1fff6667", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9a5b8b03d76576368d4cab903d3eac4b1fff6667", "committedDate": "2020-04-01T02:52:31Z", "message": "don't support multi-valued headers via string concatenation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d1c0a459abead7eb32c6242a3ed675cf6dcba4c5", "committedDate": "2020-04-01T03:35:40Z", "message": "reduce object allocation for performance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTU0MDc2", "url": "https://github.com/elastic/apm-agent-java/pull/1052#pullrequestreview-385554076", "createdAt": "2020-04-01T12:53:53Z", "commit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo1Mzo1M1rOF-_MIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo1NToyMlrOF-_QQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ==", "bodyText": "Can we make the name just \"${simpleClassName}#${methodName}\".\nThis would make it more consistent how we name transactions for other technologies like Spring MVC and JAS-RS", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401591331", "createdAt": "2020-04-01T12:53:53Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjEzNA==", "bodyText": "Use java.lang.StringBuilder#append(java.lang.CharSequence, int, int) instead of Class#getSimpleClassName for that.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592134", "createdAt": "2020-04-01T12:54:58Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ=="}, "originalCommit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjM4Ng==", "bodyText": "Are you planning to remove the biz exception concept?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592386", "createdAt": "2020-04-01T12:55:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197dc2a923e8659c1b76612deee28b7c353441df", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/197dc2a923e8659c1b76612deee28b7c353441df", "committedDate": "2020-04-03T04:07:50Z", "message": "capture all exception thrown by dubbo invoke"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a6adb4e258c8ea7fb28e3c2f6879a69acf2509", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/57a6adb4e258c8ea7fb28e3c2f6879a69acf2509", "committedDate": "2020-04-03T06:33:04Z", "message": "skip animal.sniffer because dubbo plugin needs java 8 api."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb09c787d9091629597ce6b2d396220c80a2335e", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cb09c787d9091629597ce6b2d396220c80a2335e", "committedDate": "2020-04-06T06:31:28Z", "message": "reduce apache dubbo version to 2.7.3 which is suggested to be used in production environment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08bd8b6c2c8f17e70555abf44e376077017ab53a", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/08bd8b6c2c8f17e70555abf44e376077017ab53a", "committedDate": "2020-04-07T02:49:24Z", "message": "fix NoClassDefFoundError, as helper class missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68e079f299df65da28d993eec8d2f9c3ad1618b", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c68e079f299df65da28d993eec8d2f9c3ad1618b", "committedDate": "2020-04-07T03:13:08Z", "message": "change apache dubbo version describe, just 2.7.3 and upper version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11013515bfef0df5eb788e79569dd867b6dd2c05", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/11013515bfef0df5eb788e79569dd867b6dd2c05", "committedDate": "2020-04-07T04:50:45Z", "message": "use '#' to concat the class name and method name, as SpringMVC do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b676435328b2c9a4ec971e91d24e7298e48aa3f9", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b676435328b2c9a4ec971e91d24e7298e48aa3f9", "committedDate": "2020-04-14T01:44:46Z", "message": "use '#' to concat the class name and method name, as SpringMVC do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "097737247cab07f2816bf772132d8046290540ad", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/097737247cab07f2816bf772132d8046290540ad", "committedDate": "2020-04-17T06:21:49Z", "message": "adjust the span name as \"${simpleClassName}#${methodName}\" like others do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716c5f49a0ec2825fc4a8e899af8e36351ccc4a1", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/716c5f49a0ec2825fc4a8e899af8e36351ccc4a1", "committedDate": "2020-04-17T06:25:34Z", "message": "adjust the span name as \"${simpleClassName}#${methodName}\" like others do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1bc60429b7bd043859e432a93e5344d56d52a3", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fe1bc60429b7bd043859e432a93e5344d56d52a3", "committedDate": "2020-05-13T07:22:22Z", "message": "remove: capture parameters\u3001return and exception and store into the custom context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182b5e29b0b1badf31b6129759c00678facd17ef", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/182b5e29b0b1badf31b6129759c00678facd17ef", "committedDate": "2020-05-15T15:45:13Z", "message": "Cleanup PR\n\n- Reduce allocations by not wrapping callbacks\n- Make plugin experimental (opt-in)\n- Add @NonnullApi package-level annotations\n- Use transaction.type=request, which is consistent with gRPC\n- Use activate() instead of activateInScope() to reduce allocations\n- Use StringBuilder.append(java.lang.CharSequence, int, int) instead of String.substring(int) to reduce allocations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c35be2cc5017efbc77d9fab30bfd2028cd599a81", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c35be2cc5017efbc77d9fab30bfd2028cd599a81", "committedDate": "2020-05-16T11:29:40Z", "message": "Fix Javadoc link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66815f6295fbf45f02b0d10f699f42fc20645309", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/66815f6295fbf45f02b0d10f699f42fc20645309", "committedDate": "2020-05-18T02:10:36Z", "message": "Merge pull request #1 from felixbarny/dubbo\n\nCleanup PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1c8d4d74c0e043d4a6fb6612dff018861049526", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e1c8d4d74c0e043d4a6fb6612dff018861049526", "committedDate": "2020-05-18T07:32:07Z", "message": "Merge remote-tracking branch 'origin/master' into dubbo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e", "committedDate": "2020-05-18T20:28:13Z", "message": "Another cleanup\n\n- Use host:port for destination.service.resource\n- Instrument both FutureFilter and MonitorFilter for alibaba dubbo\n- Map context ResponseCallback to context because RpcContext is reset already\n- Make tests more resilient by waiting for transaction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTIyMDQ5", "url": "https://github.com/elastic/apm-agent-java/pull/1052#pullrequestreview-413922049", "createdAt": "2020-05-18T20:37:49Z", "commit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozNzo0OVrOGXGsxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozNzo0OVrOGXGsxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MDE5Nw==", "bodyText": "Why exactly 2.7.3? Does it not work with 2.7.{0,1,2}? What happens when the agent is used with versions lower than 2.6.0? Does it break, does it work? Should we try to avoid instrumenting those versions?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r426880197", "createdAt": "2020-05-18T20:37:49Z", "author": {"login": "felixbarny"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -262,6 +262,11 @@ The spans are named after the schema `<method> <host>`, for example `GET elastic\n |\n | 1.7.0\n \n+|Apache Dubbo\n+| 2.7.3 and upper,  2.6.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dfe5521a014c701bf54fcf3e462bb2a1a027c0", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/72dfe5521a014c701bf54fcf3e462bb2a1a027c0", "committedDate": "2020-05-19T06:11:29Z", "message": "Update configuration.asciidoc\n\n- Make Apache tests more resilient\n- remove sleeps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb74f68f9c8e29a3338051aff699accdbc324fc", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bdb74f68f9c8e29a3338051aff699accdbc324fc", "committedDate": "2020-05-19T06:55:56Z", "message": "wait for transaction in async test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e377d073df041d0a4c33fa1d14e1689e761f476a", "author": {"user": {"login": "CoderLan0668", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e377d073df041d0a4c33fa1d14e1689e761f476a", "committedDate": "2020-05-19T06:57:44Z", "message": "Merge remote-tracking branch 'origin/dubbo' into dubbo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c84d381ed5b9c189798f09b991b8bbb7ffdf747", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/7c84d381ed5b9c189798f09b991b8bbb7ffdf747", "committedDate": "2020-05-19T07:37:00Z", "message": "Ensure unsupported versions are not instrumented"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjMxNTcw", "url": "https://github.com/elastic/apm-agent-java/pull/1052#pullrequestreview-414231570", "createdAt": "2020-05-19T08:46:52Z", "commit": {"oid": "7c84d381ed5b9c189798f09b991b8bbb7ffdf747"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5934df8b3dae2542911a58d8c6e82b00891dba96", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/5934df8b3dae2542911a58d8c6e82b00891dba96", "committedDate": "2020-06-09T14:13:44Z", "message": "Merge remote-tracking branch 'origin/master' into dubbo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb60a2e9b914792837af412caf6da7d6116edec", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/5fb60a2e9b914792837af412caf6da7d6116edec", "committedDate": "2020-06-09T14:20:00Z", "message": "Remove legacy logging\n\nwas previously used to track classes loaded by the canLoadClass matcher.\nBut nowadays, it doesn't load classes but only attempts to load the class' resource"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}