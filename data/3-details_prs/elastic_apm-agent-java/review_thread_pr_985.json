{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzc5MTUz", "number": 985, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1Njo1OFrODW160A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDozMzoxMVrODa5cSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjc4NjcyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1Njo1OFrOFb09rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1Njo1OFrOFb09rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMzYzMA==", "bodyText": "Another non-supported case- an instrumentation that matches multiple methods (or multiple method overloads), that are not implemented at the same class in the hierarchy. Consider the StatementInstrumentation for example, where the method matching can apply to a class AND its superclass.\nNot a deal breaker, but can be overcome if instead of returning here, you would chain all matchers this method returns throughout the class inheritance (ie until classToInstrument.getSuperclass() == null)", "url": "https://github.com/elastic/apm-agent-java/pull/985#discussion_r364723630", "createdAt": "2020-01-09T12:56:58Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -394,4 +407,79 @@ public boolean matches(TypeDescription target) {\n     public static String getAgentHome() {\n         return agentJarFile == null ? null : agentJarFile.getParent();\n     }\n+\n+    public static void ensureInstrumented(Class<?> classToInstrument, Collection<Class<? extends ElasticApmInstrumentation>> instrumentationClasses) {\n+        Set<Collection<Class<? extends ElasticApmInstrumentation>>> appliedInstrumentations = getOrCreate(classToInstrument);\n+\n+        if (!appliedInstrumentations.contains(instrumentationClasses)) {\n+            synchronized (ElasticApmAgent.class) {\n+                ElasticApmTracer tracer = ElasticApmInstrumentation.tracer;\n+                if (tracer == null || instrumentation == null) {\n+                    throw new IllegalStateException(\"Agent is not initialized\");\n+                }\n+\n+                if (!appliedInstrumentations.contains(instrumentationClasses)) {\n+                    appliedInstrumentations = new HashSet<>(appliedInstrumentations);\n+                    appliedInstrumentations.add(instrumentationClasses);\n+                    // immutability guards against race conditions (for example concurrent rehash due to add and lookup)\n+                    appliedInstrumentations = Collections.unmodifiableSet(appliedInstrumentations);\n+                    dynamicallyInstrumentedClasses.put(classToInstrument, appliedInstrumentations);\n+\n+                    CoreConfiguration config = tracer.getConfig(CoreConfiguration.class);\n+                    final Logger logger = LoggerFactory.getLogger(ElasticApmAgent.class);\n+                    final ByteBuddy byteBuddy = new ByteBuddy()\n+                        .with(TypeValidation.of(logger.isDebugEnabled()))\n+                        .with(FailSafeDeclaredMethodsCompiler.INSTANCE);\n+                    AgentBuilder agentBuilder = getAgentBuilder(byteBuddy, config, logger, AgentBuilder.DescriptionStrategy.Default.HYBRID);\n+                    for (Class<? extends ElasticApmInstrumentation> instrumentationClass : instrumentationClasses) {\n+                        ElasticApmInstrumentation apmInstrumentation = instantiate(instrumentationClass);\n+                        ElementMatcher.Junction<TypeDescription> typeMatcher = getTypeMatcher(classToInstrument, apmInstrumentation.getMethodMatcher());\n+                        if (typeMatcher != null && isIncluded(apmInstrumentation, config)) {\n+                            agentBuilder = applyAdvice(tracer, agentBuilder, apmInstrumentation, typeMatcher.and(apmInstrumentation.getTypeMatcher()));\n+                        }\n+                    }\n+                    dynamicClassFileTransformers.add(agentBuilder.installOn(instrumentation));\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Set<Collection<Class<? extends ElasticApmInstrumentation>>> getOrCreate(Class<?> classToInstrument) {\n+        Set<Collection<Class<? extends ElasticApmInstrumentation>>> instrumentedClasses = dynamicallyInstrumentedClasses.get(classToInstrument);\n+        if (instrumentedClasses == null) {\n+            instrumentedClasses = new HashSet<Collection<Class<? extends ElasticApmInstrumentation>>>();\n+            Set<Collection<Class<? extends ElasticApmInstrumentation>>> racy = dynamicallyInstrumentedClasses.put(classToInstrument, instrumentedClasses);\n+            if (racy != null) {\n+                instrumentedClasses = racy;\n+            }\n+        }\n+        return instrumentedClasses;\n+    }\n+\n+    @Nullable\n+    private static ElementMatcher.Junction<TypeDescription> getTypeMatcher(Class<?> classToInstrument, ElementMatcher<? super MethodDescription> methodMatcher) {\n+\n+        MethodList<MethodDescription.InDefinedShape> matchingMethods = TypeDescription.ForLoadedType.of(classToInstrument).getDeclaredMethods().filter(methodMatcher);\n+        if (!matchingMethods.isEmpty()) {\n+            return is(classToInstrument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ecafa89caaa6180b1c02bbb1e07a718f9d4b94"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTMwNjk3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-asynchttpclient-plugin/src/main/java/co/elastic/apm/agent/asynchttpclient/AbstractAsyncHttpClientInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDozMzoxMVrOFiEtXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDozMzoxMVrOFiEtXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI3MzA1NQ==", "bodyText": "maybe add a comment why it's safe to do with any() here", "url": "https://github.com/elastic/apm-agent-java/pull/985#discussion_r371273055", "createdAt": "2020-01-27T14:33:11Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-asynchttpclient-plugin/src/main/java/co/elastic/apm/agent/asynchttpclient/AbstractAsyncHttpClientInstrumentation.java", "diffHunk": "@@ -123,7 +132,7 @@ protected AbstractAsyncHandlerInstrumentation(ElementMatcher<? super MethodDescr\n \n         @Override\n         public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n-            return hasSuperType(named(\"org.asynchttpclient.AsyncHandler\"));\n+            return any()/*.and(ElasticApmAgent.getTypeMatcher(asyncHandler.getClass()))*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ecafa89caaa6180b1c02bbb1e07a718f9d4b94"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 376, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}