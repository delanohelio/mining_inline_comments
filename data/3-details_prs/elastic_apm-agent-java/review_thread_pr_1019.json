{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNzI0NzM2", "number": 1019, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozNDoyMlrODhgeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNjo1NjoyNVrODmEy0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYxNjcxOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozNDoyMlrOFsRq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozNDoyMlrOFsRq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MTE5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if( address != null) {\n          \n          \n            \n                    if (address != null) {", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r381971195", "createdAt": "2020-02-20T12:34:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java", "diffHunk": "@@ -44,17 +44,8 @@\n     private int port;\n \n     public Destination withAddress(@Nullable CharSequence address) {\n-        if (address != null && address.length() > 0) {\n-            // remove square brackets for IPv6 addresses\n-            int startIndex = 0;\n-            if (address.charAt(0) == '[') {\n-                startIndex = 1;\n-            }\n-            int endIndex = address.length();\n-            if (address.charAt(endIndex - 1) == ']') {\n-                endIndex--;\n-            }\n-            this.address.append(address, startIndex, endIndex);\n+        if( address != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYzMjEwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0MDoxOVrOFsR1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjozNToxNFrOF2yGTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mzc3Mg==", "bodyText": "how does that affect breakdown metrics? Seems related to #884", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r381973772", "createdAt": "2020-02-20T12:40:19Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -355,10 +357,22 @@ public Runnable withActive(Runnable runnable) {\n         return tracer.wrapCallable(callable, this);\n     }\n \n+    /**\n+     * Set start timestamp\n+     *\n+     * @param epochMicros start timestamp in micro-seconds since epoch\n+     */\n     public void setStartTimestamp(long epochMicros) {\n         timestamp = epochMicros;\n     }\n \n+    /**\n+     * Set start timestamp from context current clock\n+     */\n+    public void setStartTimestampNow() {\n+        timestamp = getTraceContext().getClock().getEpochMicros();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1ODMxNA==", "bodyText": "I don't really know how does it might impact breakdown metrics, maybe we could sync IRL on that ?", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r388358314", "createdAt": "2020-03-05T15:14:12Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -355,10 +357,22 @@ public Runnable withActive(Runnable runnable) {\n         return tracer.wrapCallable(callable, this);\n     }\n \n+    /**\n+     * Set start timestamp\n+     *\n+     * @param epochMicros start timestamp in micro-seconds since epoch\n+     */\n     public void setStartTimestamp(long epochMicros) {\n         timestamp = epochMicros;\n     }\n \n+    /**\n+     * Set start timestamp from context current clock\n+     */\n+    public void setStartTimestampNow() {\n+        timestamp = getTraceContext().getClock().getEpochMicros();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mzc3Mg=="}, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4ODIzOQ==", "bodyText": "@felixbarny maybe we should probably add a comment that this method may have an impact on breakdown metrics ?\nI've added this method just to factor-in some similar method calls (see next file in the review).", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r392988239", "createdAt": "2020-03-16T12:35:14Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -355,10 +357,22 @@ public Runnable withActive(Runnable runnable) {\n         return tracer.wrapCallable(callable, this);\n     }\n \n+    /**\n+     * Set start timestamp\n+     *\n+     * @param epochMicros start timestamp in micro-seconds since epoch\n+     */\n     public void setStartTimestamp(long epochMicros) {\n         timestamp = epochMicros;\n     }\n \n+    /**\n+     * Set start timestamp from context current clock\n+     */\n+    public void setStartTimestampNow() {\n+        timestamp = getTraceContext().getClock().getEpochMicros();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mzc3Mg=="}, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYzODU3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0Mjo0MFrOFsR5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0Mjo0MFrOFsR5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NDgwOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r381974809", "createdAt": "2020-02-20T12:42:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -108,17 +109,39 @@ private void instantiate(Set<String> implementations) {\n     private T instantiate(String implementation) {\n         try {\n             final Class<?> implementationClass = Class.forName(implementation, true, classLoader);\n+            checkClassModifiers(implementationClass);\n             Constructor<?> constructor = getMatchingConstructor(implementationClass);\n             if (constructor != null) {\n+                checkConstructorModifiers(constructor);\n                 return clazz.cast(constructor.newInstance(constructorArguments));\n             } else {\n-                return clazz.cast(implementationClass.getConstructor().newInstance());\n+                constructor = implementationClass.getConstructor();\n+                checkConstructorModifiers(constructor);\n+                return clazz.cast(constructor.newInstance());\n             }\n+        } catch (InstantiationException e) {\n+            String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n+            throw new ServiceConfigurationError(msg, e);\n         } catch (Exception e) {\n             throw new ServiceConfigurationError(e.getMessage(), e);\n         }\n     }\n \n+    private static void checkConstructorModifiers(Constructor<?> constructor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDY0MjkzOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0NDoxNVrOFsR71Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0NDoxNVrOFsR71Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NTUwOQ==", "bodyText": "\ud83e\udd29", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r381975509", "createdAt": "2020-02-20T12:44:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockReporter.java", "diffHunk": "@@ -180,7 +181,10 @@ private JsonNode asJson(String jsonContent) {\n     }\n \n     public synchronized Transaction getFirstTransaction() {\n-        return transactions.iterator().next();\n+        assertThat(transactions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDY1Mzg0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0Nzo1N1rOFsSCsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0Nzo1N1rOFsSCsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NzI2NA==", "bodyText": "We don't want to ship gRPC with our agent, just compile against it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>${grpc.version}</version>\n          \n          \n            \n                        <version>${grpc.version}</version>\n          \n          \n            \n                        <scope>provided</scope>", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r381977264", "createdAt": "2020-02-20T12:47:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>co.elastic.apm</groupId>\n+        <artifactId>apm-agent-plugins</artifactId>\n+        <version>1.13.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-grpc-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../..</apm-agent-parent.base.dir>\n+        <protobuf.version>3.8.0</protobuf.version>\n+        <grpc.version>1.26.0</grpc.version>\n+    </properties>\n+\n+    <dependencies>\n+        <!-- our instrumentation depends on this -->\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-api</artifactId>\n+            <version>${grpc.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTEyMzc4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHeaderGetter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NDozN1rOFsWeoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NDozN1rOFsWeoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0OTk1Mg==", "bodyText": "Cache Metadata.Key instances to avoid allocations.", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r382049952", "createdAt": "2020-02-20T14:54:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHeaderGetter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.grpc.helper;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractHeaderGetter;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderGetter;\n+import io.grpc.Metadata;\n+\n+import javax.annotation.Nullable;\n+\n+class GrpcHeaderGetter extends AbstractHeaderGetter<String, Metadata> implements TextHeaderGetter<Metadata> {\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Metadata carrier) {\n+        return carrier.get(Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTEyNDE5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHeaderSetter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NDo0NlrOFsWe7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NDo0NlrOFsWe7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDAzMA==", "bodyText": "Cache Metadata.Key instances to avoid allocations.", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r382050030", "createdAt": "2020-02-20T14:54:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHeaderSetter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.grpc.helper;\n+\n+import co.elastic.apm.agent.impl.transaction.TextHeaderSetter;\n+import io.grpc.Metadata;\n+\n+class GrpcHeaderSetter implements TextHeaderSetter<Metadata> {\n+\n+    @Override\n+    public void setHeader(String headerName, String headerValue, Metadata carrier) {\n+        carrier.put(Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER), headerValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTEzMDEyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NjoxNFrOFsWitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NjoxNFrOFsWitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDk5OA==", "bodyText": "Outdated?", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r382050998", "createdAt": "2020-02-20T14:56:14Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.grpc.helper;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderGetter;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderSetter;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import io.grpc.ClientCall;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.ServerCall;\n+import io.grpc.Status;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Helper class for gRPC client and server calls.\n+ *\n+ * <br>\n+ * Since instances of this class are loaded through {@see co.elastic.apm.agent.bci.HelperClassManager}, we can use all\n+ * classes that are part of the gRPC API.\n+ */\n+@SuppressWarnings(\"unused\")\n+public class GrpcHelperImpl implements GrpcHelper {\n+\n+    /**\n+     * Map of all in-flight spans, is only used by client part.\n+     * Key is {@link ClientCall}, but referred as {@link Object} to avoid loading any gRPC reference in the bootstrap classloader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23645081388b228a454b188777c5341ba707670c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUxMDAzOnYy", "diffSide": "RIGHT", "path": "CHANGELOG.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNjo1NTo0OVrOFzTg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNjo1NTo0OVrOFzTg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MTM5Mg==", "bodyText": "I restored the former section ID as it failed the docs build", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r389341392", "createdAt": "2020-03-08T06:55:49Z", "author": {"login": "eyalkoren"}, "path": "CHANGELOG.asciidoc", "diffHunk": "@@ -19,7 +19,7 @@ endif::[]\n ////\n \n === Unreleased\n-[[release-notes-1.14.0]]\n+[[release-notes-1.15.0]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65ed58364ca517648af95b362681ab7c10a6cd11"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUxMDI1OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNjo1NjoyNVrOFzTg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNjo1NjoyNVrOFzTg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MTQyMQ==", "bodyText": "I restored protected access, as it failed compilation", "url": "https://github.com/elastic/apm-agent-java/pull/1019#discussion_r389341421", "createdAt": "2020-03-08T06:56:25Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractInstrumentationTest.java", "diffHunk": "@@ -47,8 +47,7 @@\n     protected static ElasticApmTracer tracer;\n     protected static MockReporter reporter;\n     protected static ConfigurationRegistry config;\n-\n-    private static TestObjectPoolFactory objectPoolFactory;\n+    protected static TestObjectPoolFactory objectPoolFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34c197b5c55c2eeb9778928073cac39027aa014"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 414, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}