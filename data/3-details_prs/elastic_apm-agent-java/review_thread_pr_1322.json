{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODM2Nzk0", "number": 1322, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMDozOVrOEUf1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMDozOVrOEUf1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTI4NTYwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozMDozOVrOG6u-FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzozODoyN1rOG653ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MDE0OA==", "bodyText": "Reset the system properties to their previous state so that we don't affect the application loggers", "url": "https://github.com/elastic/apm-agent-java/pull/1322#discussion_r464240148", "createdAt": "2020-08-03T07:30:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -195,7 +197,23 @@ public void assertValid(Boolean value) {\n         .buildWithDefault(LogFormat.PLAIN_TEXT);\n \n     public static void init(List<ConfigurationSource> sources, String ephemeralId) {\n-        Configurator.initialize(new Log4j2ConfigurationFactory(sources, ephemeralId).getConfiguration());\n+        // The initialization of log4j may produce errors if the traced application uses log4j settings (for\n+        // example - through file in the classpath or System properties) that configures specific properties for\n+        // loading classes by name. Since we shade our usage of log4j, such non-shaded classes may not (and should not)\n+        // be found on the classpath.\n+        // All handled Exceptions should not prevent us from using log4j further, as the system falls back to a default\n+        // which we expect anyway. We take a calculated risk of ignoring such errors only through initialization time,\n+        // assuming that errors that will make the logging system non-usable won't be handled.\n+        System.setProperty(\"log4j2.StatusLogger.level\", \"OFF\");\n+        System.setProperty(\"org.apache.logging.log4j.simplelog.StatusLogger.level\", \"OFF\");\n+        System.setProperty(\"Log4jDefaultStatusLevel\", \"OFF\");\n+        try {\n+            Configurator.initialize(new Log4j2ConfigurationFactory(sources, ephemeralId).getConfiguration());\n+        } catch (Throwable throwable) {\n+            System.err.println(\"Failure during initialization of agent's log4j system: \" + throwable.getMessage());\n+        } finally {\n+            StatusLogger.getLogger().setLevel(Level.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b21b7dd5c23e7e685a59c7d608e465e41a9d1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxODY2MQ==", "bodyText": "\ud83d\udc4d Good point, I only thought about ours \ud83d\ude44", "url": "https://github.com/elastic/apm-agent-java/pull/1322#discussion_r464418661", "createdAt": "2020-08-03T13:38:27Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -195,7 +197,23 @@ public void assertValid(Boolean value) {\n         .buildWithDefault(LogFormat.PLAIN_TEXT);\n \n     public static void init(List<ConfigurationSource> sources, String ephemeralId) {\n-        Configurator.initialize(new Log4j2ConfigurationFactory(sources, ephemeralId).getConfiguration());\n+        // The initialization of log4j may produce errors if the traced application uses log4j settings (for\n+        // example - through file in the classpath or System properties) that configures specific properties for\n+        // loading classes by name. Since we shade our usage of log4j, such non-shaded classes may not (and should not)\n+        // be found on the classpath.\n+        // All handled Exceptions should not prevent us from using log4j further, as the system falls back to a default\n+        // which we expect anyway. We take a calculated risk of ignoring such errors only through initialization time,\n+        // assuming that errors that will make the logging system non-usable won't be handled.\n+        System.setProperty(\"log4j2.StatusLogger.level\", \"OFF\");\n+        System.setProperty(\"org.apache.logging.log4j.simplelog.StatusLogger.level\", \"OFF\");\n+        System.setProperty(\"Log4jDefaultStatusLevel\", \"OFF\");\n+        try {\n+            Configurator.initialize(new Log4j2ConfigurationFactory(sources, ephemeralId).getConfiguration());\n+        } catch (Throwable throwable) {\n+            System.err.println(\"Failure during initialization of agent's log4j system: \" + throwable.getMessage());\n+        } finally {\n+            StatusLogger.getLogger().setLevel(Level.ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MDE0OA=="}, "originalCommit": {"oid": "33b21b7dd5c23e7e685a59c7d608e465e41a9d1f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 193, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}