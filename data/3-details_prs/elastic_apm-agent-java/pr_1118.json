{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NDc2NzI4", "number": 1118, "title": "improve circuit breaker test reliability", "bodyText": "What does this PR do?\nFix flaky circuit breaker tests: mostly using awaitibility lib for async assertions & thread-safe configuration because mockito stub/mocks do not like being used across threads.\nChecklist\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\nI have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\nI have updated CHANGELOG.asciidoc\nI have updated supported-technologies.asciidoc\nAdded an API method or config option? Document in which version this will be introduced\nAdded an instrumentation plugin? How did you make sure that old, non-supported versions are not instrumented by accident?\n\nRelated issues\n\nCloses #1109", "createdAt": "2020-04-02T10:02:12Z", "url": "https://github.com/elastic/apm-agent-java/pull/1118", "merged": true, "mergeCommit": {"oid": "ef369a16d12f570616f69c4f843054abde55c39b"}, "closed": true, "closedAt": "2020-04-02T15:33:36Z", "author": {"login": "SylvainJuge"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTo-PpAH2gAyMzk3NDc2NzI4OmY5MGQzMzY5YTM1OGUyZDZiNzFmMTkyYTUyMjVmN2RkZmUxODI0YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTtOSxgFqTM4NjQ4NjA3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "committedDate": "2020-04-02T09:34:50Z", "message": "improve test reliability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjgyOTcx", "url": "https://github.com/elastic/apm-agent-java/pull/1118#pullrequestreview-386282971", "createdAt": "2020-04-02T10:07:29Z", "commit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDowNzoyOVrOF_kTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozMDoxOVrOF_lD9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTM2NA==", "bodyText": "\ud83d\ude3b", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402199364", "createdAt": "2020-04-02T10:07:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertRunning);\n+\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertRunning();\n     }\n \n     @Test\n-    void testResumeWhenDisabledUnderStress() throws InterruptedException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+    void testResumeWhenDisabledUnderStress() {\n+\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(false);\n+        awaitRunning();\n+    }\n+\n+    private void awaitPaused() {\n+        awaitAssert(this::assertPaused);\n+    }\n+\n+    private void assertRunning() {\n         assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n+    }\n+\n+    private void awaitRunning() {\n+        awaitAssert(this::assertRunning);\n+    }\n+\n+    private void assertPaused() {\n         assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        doReturn(false).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    }\n+\n+    private void assertState(Runnable assertion) throws InterruptedException {\n+        for (long i = 0; i < 10; i++) {\n+            assertion.run();\n+            Thread.sleep(1);\n+        }\n+        assertion.run();\n+    }\n+\n+    private static void awaitAssert(ThrowingRunnable assertion) {\n+        doAwait().untilAsserted(assertion);\n+    }\n+\n+    private static ConditionFactory doAwait() {\n+        return await()\n+            .pollInterval(1, TimeUnit.MILLISECONDS)\n+            .timeout(50, TimeUnit.MILLISECONDS);\n+\n+    }\n+\n+\n+    /**\n+     * We have to use a thread-safe wrapper because sharing mocked/stubbed classes\n+     */\n+    private static class ConfigThreadSafeWrapper extends CircuitBreakerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMDQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    monitor.simulateStress();\n          \n          \n            \n                    monitor. simulateStressAndWaitPoll();", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402210433", "createdAt": "2020-04-02T10:27:44Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTI3Nw==", "bodyText": "You need to awaitPoll somehow. It doesn't make sense to assert that the state remained the same without that.", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211277", "createdAt": "2020-04-02T10:29:20Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertState(this::assertRunning);\n          \n          \n            \n                    assertRunning();", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211655", "createdAt": "2020-04-02T10:30:01Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertRunning);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTgyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    monitor.simulateStress();\n          \n          \n            \n                    monitor.simulateStressAndWaitPoll();", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211829", "createdAt": "2020-04-02T10:30:19Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5"}, "originalPosition": 235}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1574e1513e271cb1e3581f8e55642e43ffddd80d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1574e1513e271cb1e3581f8e55642e43ffddd80d", "committedDate": "2020-04-02T14:23:33Z", "message": "post-review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDg2MDcz", "url": "https://github.com/elastic/apm-agent-java/pull/1118#pullrequestreview-386486073", "createdAt": "2020-04-02T14:31:59Z", "commit": {"oid": "1574e1513e271cb1e3581f8e55642e43ffddd80d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3912, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}