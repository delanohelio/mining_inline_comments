{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTYyNDMz", "number": 1077, "title": "Simple bypass for servlet spec < 3.x", "bodyText": "What does this PR do?\nThis pull-request modifies Servlet plugin instrumentation to make it gracefully ignore Servlet implementations before Servlet API 3.0.\nWithout this change, users get spammed in application server logs with similar exception (Here on Tomcat 6.x):\njava.lang.NoSuchMethodError: javax.servlet.ServletRequest.getDispatcherType()Ljavax/servlet/DispatcherType;\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:181)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:610)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:503)\n        at java.lang.Thread.run(Thread.java:748)\n\nWhile this change avoids spamming the server logs, there is no explicit warning message from this agent when an unsupported version is being used. Thus from user's perspective it will just make the agent not monitor any HTTP transaction (but JMX metrics will still be properly working as expected).\nChecklist\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\nI have made corresponding changes to the documentation\nI have added tests that prove my fix is effective or that my feature works (tested manually)\n New and existing unit tests pass locally with my changes\n I have updated CHANGELOG.asciidoc\nI have updated supported-technologies.asciidoc (no change required, previous versions were not supported).\n\nAuthor's Checklist\n\n Manual testing with Servlet 2.5 container (Tomcat 6.x).\n Manual testing with Servlet 3.0 container (Tomcat 7.x or later).\n Decide if we want to have a proper warning when such an incompatible Servlet version is used (currently we silently ignore all transactions).\n\nRelated issues\n\nCloses #894", "createdAt": "2020-03-06T18:32:09Z", "url": "https://github.com/elastic/apm-agent-java/pull/1077", "merged": true, "mergeCommit": {"oid": "a882c458550598a619b8092525a1b17cc94f42f7"}, "closed": true, "closedAt": "2020-03-10T14:43:27Z", "author": {"login": "SylvainJuge"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLEUF-gH2gAyMzg0OTYyNDMzOmQ3YWEzMDk5NTM4OTZmYTViZDJhYTgwODZkMzUxNGNiZDEwNDQ0NGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMSyVzgFqTM3MTk2NDA4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d7aa309953896fa5bd2aa8086d3514cbd104444c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d7aa309953896fa5bd2aa8086d3514cbd104444c", "committedDate": "2020-03-06T18:20:49Z", "message": "Simple bypass for servlet spec < 3.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/82143cfdf359846b8658ff34b90d57dc44bb61de", "committedDate": "2020-03-06T18:46:05Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODA5NjIz", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-370809623", "createdAt": "2020-03-08T07:22:10Z", "commit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjoxMFrOFzTmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyNToxNlrOFzTm7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n          \n            \n                protected AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n      \n    \n    \n  \n\nProvides a more accurate access and works also if the actual instrumentation is loaded by a different class loader than the one loading this abstract parent", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342794", "createdAt": "2020-03-08T07:22:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjk1OA==", "bodyText": "This shouldn't be done here, as it is not required for all subclasses. Adds a non-required dependency between AsyncInstrumentation and ServletApiAdvice.", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342958", "createdAt": "2020-03-08T07:25:16Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){\n+        ServletApiAdvice.init(tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70e9f8ba3acdee51cf815277bf5443055b52695e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/70e9f8ba3acdee51cf815277bf5443055b52695e", "committedDate": "2020-03-09T09:29:04Z", "message": "Update apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java\n\nCo-Authored-By: eyalkoren <41850454+eyalkoren@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24045fd87b2ee65445d5a93977e4ed44178c5f89", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/24045fd87b2ee65445d5a93977e4ed44178c5f89", "committedDate": "2020-03-09T15:47:42Z", "message": "post-review changes + attempt to fix on payara"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzA5MTgx", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-371309181", "createdAt": "2020-03-09T15:56:51Z", "commit": {"oid": "24045fd87b2ee65445d5a93977e4ed44178c5f89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzQyMjY4", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-371342268", "createdAt": "2020-03-09T16:36:26Z", "commit": {"oid": "24045fd87b2ee65445d5a93977e4ed44178c5f89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4205376b0b03a52b95b6aa89f06cd8f8cd3daeb7", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4205376b0b03a52b95b6aa89f06cd8f8cd3daeb7", "committedDate": "2020-03-10T08:35:08Z", "message": "warn only once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "committedDate": "2020-03-10T08:41:18Z", "message": "Merge branch 'master' into do-not-instrument-old-servlet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzYzMDM5", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-371763039", "createdAt": "2020-03-10T08:45:50Z", "commit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0NTo1MFrOF0Fqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NjowNFrOF0F_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA3OQ==", "bodyText": "Also instrument Servlet#doService, as all servlets might already be initialized once the agent attaches.", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163079", "createdAt": "2020-03-10T08:45:50Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzU4Nw==", "bodyText": "As we're ok with logging twice, it's fine to make this non-volatile\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static volatile boolean doCheckAndWarn = true;\n          \n          \n            \n                public static boolean doCheckAndWarn = true;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163587", "createdAt": "2020-03-10T08:46:55Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2Njk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            doCheckAndWarn = false;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390166944", "createdAt": "2020-03-10T08:53:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NzEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doCheckAndWarn = false;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390167138", "createdAt": "2020-03-10T08:53:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+\n+        if (majorVersion < 3) {\n+            logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+        }\n+\n+        doCheckAndWarn = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODM0Mg==", "bodyText": "Kill two birds with one stone and also log the servlet info. That will be really useful to avoid back-and-forth in support requests.\nlogger.info(servletConfig.getServletContext().getServerInfo());", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390168342", "createdAt": "2020-03-10T08:56:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/90b42c6ea1186647de946b2b101e6e875ad7af28", "committedDate": "2020-03-10T10:13:27Z", "message": "use atomic boolean + instrument service method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODYxNzM0", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-371861734", "createdAt": "2020-03-10T11:12:21Z", "commit": {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMjoyMVrOF0Kheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMjoyMVrOF0Kheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY4Mg==", "bodyText": "To avoid a CAS on every invocation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!doLogAndWarn.getAndSet(false)) {\n          \n          \n            \n                        if (!doLogAndWarn.get() || !doLogAndWarn.getAndSet(false)) {\n          \n      \n    \n    \n  \n\nmaybe rename doLogAndWarn to alreadyLogged to get rid of the negations which are a bit harder to parse?", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390242682", "createdAt": "2020-03-10T11:12:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletVersionInstrumentation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet} to log Servlet container details and warns about unsupported version.\n+ * <p>\n+ * Does not inherit from {@link AbstractServletInstrumentation} in order to still instrument when servlet version is not\n+ * supported.\n+ */\n+public abstract class ServletVersionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletVersionInstrumentation.class);\n+\n+    @VisibleForAdvice\n+    public static AtomicBoolean doLogAndWarn = new AtomicBoolean(true);\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#init(ServletConfig)}\n+     */\n+    public static class Init extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"init\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+            if (!doLogAndWarn.getAndSet(false)) {\n+                return;\n+            }\n+\n+            int majorVersion = -1;\n+            int minorVersion = -1;\n+            String serverInfo = null;\n+            if (servletConfig != null) {\n+                ServletContext servletContext = servletConfig.getServletContext();\n+                if (null != servletContext) {\n+                    majorVersion = servletContext.getMajorVersion();\n+                    minorVersion = servletContext.getMinorVersion();\n+                    serverInfo = servletContext.getServerInfo();\n+                }\n+            }\n+\n+            logger.info(\"Servlet container info = {}\", serverInfo);\n+            if (majorVersion < 3) {\n+                logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#service(ServletRequest, ServletResponse)}\n+     */\n+    public static class Service extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"service\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+                .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.This Servlet servlet) {\n+            if (!doLogAndWarn.getAndSet(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "016e0d9279f7b85830c28fa87129a279aa1afd4a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/016e0d9279f7b85830c28fa87129a279aa1afd4a", "committedDate": "2020-03-10T13:45:08Z", "message": "avoid double negations and use a simple volatile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTY0MDgw", "url": "https://github.com/elastic/apm-agent-java/pull/1077#pullrequestreview-371964080", "createdAt": "2020-03-10T13:46:27Z", "commit": {"oid": "016e0d9279f7b85830c28fa87129a279aa1afd4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3878, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}