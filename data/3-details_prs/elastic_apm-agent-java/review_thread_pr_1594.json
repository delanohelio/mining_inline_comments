{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTU5MTk4", "number": 1594, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODozMzozNFrOFS-mAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODo0OTozMlrOFS--2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NDQ0MjI1OnYy", "diffSide": "LEFT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODozMzozNFrOIaL9PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzoyNTowMFrOIaWvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMyOTc4OA==", "bodyText": "Is that on purpose that we have two distinct properties ? I'm not sure to get why we would need to split delay for tracer init and the premain execution.\n\ndelay_tracer_start with alias delay_tracer_start_ms which is internal but documented in CoreConfiguration\ndelay_agent_premain_ms property which does not rely on configuration to avoid any dependency.", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564329788", "createdAt": "2021-01-26T08:33:34Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -129,12 +129,13 @@\n         .tags(\"added[1.11.0]\")\n         .build();\n \n-    private final ConfigurationOption<TimeDuration> delayInit = TimeDurationValueConverter.durationOption(\"ms\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUwNjQwMw==", "bodyText": "Yes, it is intentional, not saying it is the right thing \ud83d\ude42\nIdeally, we wouldn't recommend anyone using the premain delay, unless we really have to. This is the absolute delay in all agent stuff, including all class loading and linkage. The disadvantages of using it are the need to reinstrument loaded classes (instead of applying instrumentation during class loading), which may have more side effects, as well as the more restricted configuration option (only as System property). We just had a customer lately getting strange JMX behaviour with specific WebLogic MBeans that was overcome through the delay in tracer start. For a large deployment, it might be less user-friendly to enforce changes in the startup scripts all across instead of applying the change through the agent config file.\nI see your concern with having multiple properties dealing with delays, but since they are both hidden, it will mainly be our burden and not our users', so not as bad.\nHowever, it got me thinking I will now break it for this user. Do you think we should:\n\njust keep the old name?\nuse the new name and aliases for the old ones?\nkeep this change and notify this user, as it is internal and not likely widely used?", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564506403", "createdAt": "2021-01-26T13:25:00Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -129,12 +129,13 @@\n         .tags(\"added[1.11.0]\")\n         .build();\n \n-    private final ConfigurationOption<TimeDuration> delayInit = TimeDurationValueConverter.durationOption(\"ms\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMyOTc4OA=="}, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NDQ2NzMzOnYy", "diffSide": "RIGHT", "path": "apm-agent-premain/src/main/java/co/elastic/apm/agent/premain/AgentMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODozOTo0MVrOIaMMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzoyOTozN1rOIaW7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMzU3Nw==", "bodyText": "Removing that constraint on early Java 8 early versions would be really nice !! Do we need to make load-testing able to run tests with forks to validate this ? We could use a temporary branch on the project itself as a work-around.", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564333577", "createdAt": "2021-01-26T08:39:41Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-premain/src/main/java/co/elastic/apm/agent/premain/AgentMain.java", "diffHunk": "@@ -101,13 +99,72 @@ public synchronized static void init(String agentArguments, Instrumentation inst\n             if (doDisable) {\n                 return;\n             }\n+        }\n \n+        // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n+        FileSystems.getDefault();\n+\n+        long delayAgentInitMs = -1L;\n+        String delayAgentInitMsProperty = System.getProperty(\"elastic.apm.delay_agent_premain_ms\");\n+        if (delayAgentInitMsProperty != null) {\n+            try {\n+                delayAgentInitMs = Long.parseLong(delayAgentInitMsProperty.trim());\n+            } catch (NumberFormatException numberFormatException) {\n+                System.err.println(\"The value of the \\\"elastic.apm.delay_agent_premain_ms\\\" System property must be a number\");\n+            }\n         }\n+        if (premain && shouldDelayOnPremain()) {\n+            delayAgentInitMs = Math.max(delayAgentInitMs, 3000L);\n+        }\n+        if (delayAgentInitMs > 0) {\n+            delayAndInitAgentAsync(agentArguments, instrumentation, premain, delayAgentInitMs);\n+        } else {\n+            loadAndInitializeAgent(agentArguments, instrumentation, premain);\n+        }\n+    }\n \n-        try {\n-            // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n-            FileSystems.getDefault();\n+    /**\n+     * Returns whether agent initialization should be delayed when occurring through the {@code premain} route.\n+     * This works around a JVM bug (https://bugs.openjdk.java.net/browse/JDK-8041920) causing JIT fatal error if\n+     * agent code causes the loading of MethodHandles prior to JIT compiler initialization.\n+     * @return {@code true} for any Java 7 and early Java 8 HotSpot JVMs, {@code false} for all others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUwOTQ3Ng==", "bodyText": "Indeed, I thought so too, but @felixbarny pointed out to me that we already had this restriction before moving to invokedynamic (although we used MethodHandles before). I think that using so old Java 8 updates is less common than using Java 7, so let's keep this restriction and this handles cases where someone IS trying to use our agent on these old JVMs and disables the bootstrap checks", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564509476", "createdAt": "2021-01-26T13:29:37Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-premain/src/main/java/co/elastic/apm/agent/premain/AgentMain.java", "diffHunk": "@@ -101,13 +99,72 @@ public synchronized static void init(String agentArguments, Instrumentation inst\n             if (doDisable) {\n                 return;\n             }\n+        }\n \n+        // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n+        FileSystems.getDefault();\n+\n+        long delayAgentInitMs = -1L;\n+        String delayAgentInitMsProperty = System.getProperty(\"elastic.apm.delay_agent_premain_ms\");\n+        if (delayAgentInitMsProperty != null) {\n+            try {\n+                delayAgentInitMs = Long.parseLong(delayAgentInitMsProperty.trim());\n+            } catch (NumberFormatException numberFormatException) {\n+                System.err.println(\"The value of the \\\"elastic.apm.delay_agent_premain_ms\\\" System property must be a number\");\n+            }\n         }\n+        if (premain && shouldDelayOnPremain()) {\n+            delayAgentInitMs = Math.max(delayAgentInitMs, 3000L);\n+        }\n+        if (delayAgentInitMs > 0) {\n+            delayAndInitAgentAsync(agentArguments, instrumentation, premain, delayAgentInitMs);\n+        } else {\n+            loadAndInitializeAgent(agentArguments, instrumentation, premain);\n+        }\n+    }\n \n-        try {\n-            // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n-            FileSystems.getDefault();\n+    /**\n+     * Returns whether agent initialization should be delayed when occurring through the {@code premain} route.\n+     * This works around a JVM bug (https://bugs.openjdk.java.net/browse/JDK-8041920) causing JIT fatal error if\n+     * agent code causes the loading of MethodHandles prior to JIT compiler initialization.\n+     * @return {@code true} for any Java 7 and early Java 8 HotSpot JVMs, {@code false} for all others", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMzU3Nw=="}, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NDUwNTg3OnYy", "diffSide": "RIGHT", "path": "docs/troubleshooting.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODo0OTozMlrOIaMj1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzozNjowMFrOIaXKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzOTY2OQ==", "bodyText": "\ud83d\ude0d I love being able to link to this paragraph whenever there are multiple agents. Should we do the same for -Xverify:none too ?", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564339669", "createdAt": "2021-01-26T08:49:32Z", "author": {"login": "SylvainJuge"}, "path": "docs/troubleshooting.asciidoc", "diffHunk": "@@ -18,6 +18,17 @@ IMPORTANT: If you do so, *please attach your debug logs* so that we can analyze\n Upload the *complete* logs to a service like https://gist.github.com.\n The logs should include everything from the application startup up until the first request has been executed.\n \n+[float]\n+[[trouble-shooting-additional-agent]]\n+=== Running alongside other agents\n+Like many other Java agents, our agent instruments classes by injecting bytecode into them on runtime. Our bytecode\n+instrumentation guarantees to produce only valid bytecode and to never change the class's \"schema\". If you are using\n+other Java agents in addition to ours that have the same guarantees, they should not interfere with each other.\n+However, some Java agents do not conform to these guarantees, in which case there may be issues with using them in\n+parallel to ours. If you encounter errors, one of the first things to do is to remove any additional agent in order to\n+check whether this is indeed a case of agent mismatch. We may still find a way to make them work together, but this\n+information would be cruicial for our ability to assist, so make sure to include it when reporting such issues.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUxMzQ3Nw==", "bodyText": "We decided to be more blunt and restrictive with disabled BC verification - it will be handled through #1593. The current plan is to issue a warning when we encounter that and a few versions later to disable ourselves when it is used, enforcing the user to disable the bootstrap checks.", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564513477", "createdAt": "2021-01-26T13:36:00Z", "author": {"login": "eyalkoren"}, "path": "docs/troubleshooting.asciidoc", "diffHunk": "@@ -18,6 +18,17 @@ IMPORTANT: If you do so, *please attach your debug logs* so that we can analyze\n Upload the *complete* logs to a service like https://gist.github.com.\n The logs should include everything from the application startup up until the first request has been executed.\n \n+[float]\n+[[trouble-shooting-additional-agent]]\n+=== Running alongside other agents\n+Like many other Java agents, our agent instruments classes by injecting bytecode into them on runtime. Our bytecode\n+instrumentation guarantees to produce only valid bytecode and to never change the class's \"schema\". If you are using\n+other Java agents in addition to ours that have the same guarantees, they should not interfere with each other.\n+However, some Java agents do not conform to these guarantees, in which case there may be issues with using them in\n+parallel to ours. If you encounter errors, one of the first things to do is to remove any additional agent in order to\n+check whether this is indeed a case of agent mismatch. We may still find a way to make them work together, but this\n+information would be cruicial for our ability to assist, so make sure to include it when reporting such issues.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzOTY2OQ=="}, "originalCommit": {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 16, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}