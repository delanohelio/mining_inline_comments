{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDA3MTQ2", "number": 1350, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0NDozMFrOEaaU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MTowNVrOEaajSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTI5NzU5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0NDozMFrOHD01lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0MDowNlrOHD-6NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MzQ2Mg==", "bodyText": "[minor] I'd prefer a package-private reset method but this certainly works too", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473773462", "createdAt": "2020-08-20T08:44:30Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzODQ4NA==", "bodyText": "Sounds good - done", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473938484", "createdAt": "2020-08-20T12:40:06Z", "author": {"login": "marcjay"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MzQ2Mg=="}, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMxMjAxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0Njo0NVrOHD0_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0MTowM1rOHD-8Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NTkyMQ==", "bodyText": "[tip] JUnit has a handy org.junit.jupiter.api.io.TempDir annotation to inject a temp dir into a test method via method parameter. This dir is deleted when the test method exits (regularly or exceptionally).", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473775921", "createdAt": "2020-08-20T08:46:45Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n+        instance.setAccessible(true);\n+        instance.set(null, null);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToTempDirectory() {\n+        AsyncProfiler.getInstance(profilerConfig);\n+\n+        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToSpecifiedDirectory() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzOTAxOQ==", "bodyText": "Nice! \ud83d\ude04 - That's a new one on me - very handy, cheers for the tip!", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473939019", "createdAt": "2020-08-20T12:41:03Z", "author": {"login": "marcjay"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n+        instance.setAccessible(true);\n+        instance.set(null, null);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToTempDirectory() {\n+        AsyncProfiler.getInstance(profilerConfig);\n+\n+        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToSpecifiedDirectory() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NTkyMQ=="}, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMyNDcxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OToxNVrOHD1HhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0Njo0MFrOHD_IWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODA1Mg==", "bodyText": "[very minor] just a personal preference so that the AsyncProfiler class doesn't depend on the configuration class. Feel free to leave as-is\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AsyncProfiler getInstance(ProfilingConfiguration config) {\n          \n          \n            \n                public static AsyncProfiler getInstance(String profilerLibDirectory) {", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778052", "createdAt": "2020-08-20T08:49:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java", "diffHunk": "@@ -64,24 +65,31 @@\n     private AsyncProfiler() {\n     }\n \n-    public static AsyncProfiler getInstance() {\n+    public static AsyncProfiler getInstance(ProfilingConfiguration config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MjEwNA==", "bodyText": "I'd um'd and ah'd between the two - this does make things a lot cleaner \ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473942104", "createdAt": "2020-08-20T12:46:40Z", "author": {"login": "marcjay"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java", "diffHunk": "@@ -64,24 +65,31 @@\n     private AsyncProfiler() {\n     }\n \n-    public static AsyncProfiler getInstance() {\n+    public static AsyncProfiler getInstance(ProfilingConfiguration config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODA1Mg=="}, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMyODM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OTo1OVrOHD1J4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OTo1OVrOHD1J4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n          \n          \n            \n                        \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778658", "createdAt": "2020-08-20T08:49:59Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMzMTg3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MDozM1rOHD1MBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MDozM1rOHD1MBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n          \n          \n            \n                        \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779207", "createdAt": "2020-08-20T08:50:33Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMzNDQ4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MTowNVrOHD1N2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MTowNVrOHD1N2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTY3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n          \n          \n            \n                        \"If unset, the value of the `java.io.tmpdir` system property will be used.\")", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779674", "createdAt": "2020-08-20T08:51:05Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n+            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 215, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}