{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzU5MjI1", "number": 1173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0MTo1NlrOD5TrEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0MzozNFrOD5TtZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE3NzQ2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0MTo1NlrOGQfzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozOTozN1rOGQhxpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MTM4MQ==", "bodyText": "This disables all stack trace recoveries by default. Is that intentional?", "url": "https://github.com/elastic/apm-agent-java/pull/1173#discussion_r419951381", "createdAt": "2020-05-05T08:41:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -60,6 +60,13 @@\n         .tags(\"added[1.15.0]\", \"experimental\")\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Integer> recoverMode = ConfigurationOption.<Integer>integerOption()\n+        .key(\"recover_mode\")\n+        .configurationCategory(PROFILING_CATEGORY)\n+        .dynamic(false)\n+        .tags(\"internal\")\n+        .buildWithDefault(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0e314ea4588525bf3442e582e5fce492844478"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4Mzc4Mw==", "bodyText": "This is not what I plan to push to master, this is only an analysis agent, where we want to start by testing that the recovery code is not the cause. Only if required, we will ask the user to set this to other values.\nI did it as a PR just so I have the artefacts publicly available.", "url": "https://github.com/elastic/apm-agent-java/pull/1173#discussion_r419983783", "createdAt": "2020-05-05T09:39:37Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -60,6 +60,13 @@\n         .tags(\"added[1.15.0]\", \"experimental\")\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Integer> recoverMode = ConfigurationOption.<Integer>integerOption()\n+        .key(\"recover_mode\")\n+        .configurationCategory(PROFILING_CATEGORY)\n+        .dynamic(false)\n+        .tags(\"internal\")\n+        .buildWithDefault(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MTM4MQ=="}, "originalCommit": {"oid": "cc0e314ea4588525bf3442e582e5fce492844478"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE4MzQwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/RecoverSamplingProfilerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0MzozNFrOGQf2kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0MToyN1rOGQh1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MjI3NA==", "bodyText": "What's the value of testing the different options?", "url": "https://github.com/elastic/apm-agent-java/pull/1173#discussion_r419952274", "createdAt": "2020-05-05T08:43:34Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/RecoverSamplingProfilerTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.mockito.Mockito.when;\n+\n+// async-profiler doesn't work on Windows\n+@DisabledOnOs(OS.WINDOWS)\n+class RecoverSamplingProfilerTest {\n+\n+    private MockReporter reporter;\n+    private ElasticApmTracer tracer;\n+    private SamplingProfiler profiler;\n+    private ProfilingConfiguration profilingConfig;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilingConfig = config.getConfig(ProfilingConfiguration.class);\n+        when(profilingConfig.getIncludedClasses()).thenReturn(List.of(WildcardMatcher.valueOf(getClass().getName())));\n+        when(profilingConfig.isProfilingEnabled()).thenReturn(true);\n+        when(profilingConfig.getProfilingDuration()).thenReturn(TimeDuration.of(\"500ms\"));\n+        when(profilingConfig.getProfilingInterval()).thenReturn(TimeDuration.of(\"500ms\"));\n+        when(profilingConfig.getSamplingInterval()).thenReturn(TimeDuration.of(\"5ms\"));\n+        tracer = MockTracer.createRealTracer(reporter, config);\n+        profiler = tracer.getLifecycleListener(ProfilingFactory.class).getProfiler();\n+        // ensure profiler is initialized\n+        await()\n+            .pollDelay(10, TimeUnit.MILLISECONDS)\n+            .timeout(6000, TimeUnit.MILLISECONDS)\n+            .until(() -> profiler.getProfilingSessions() > 1);\n+    }\n+\n+    @AfterEach\n+    void tearDown() throws Exception {\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testAll() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0e314ea4588525bf3442e582e5fce492844478"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NDc4NA==", "bodyText": "Only sanity check that enabling discrete parts of the recovery logic doesn't break anything. Again - not to be eventually merged.", "url": "https://github.com/elastic/apm-agent-java/pull/1173#discussion_r419984784", "createdAt": "2020-05-05T09:41:27Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/RecoverSamplingProfilerTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.mockito.Mockito.when;\n+\n+// async-profiler doesn't work on Windows\n+@DisabledOnOs(OS.WINDOWS)\n+class RecoverSamplingProfilerTest {\n+\n+    private MockReporter reporter;\n+    private ElasticApmTracer tracer;\n+    private SamplingProfiler profiler;\n+    private ProfilingConfiguration profilingConfig;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilingConfig = config.getConfig(ProfilingConfiguration.class);\n+        when(profilingConfig.getIncludedClasses()).thenReturn(List.of(WildcardMatcher.valueOf(getClass().getName())));\n+        when(profilingConfig.isProfilingEnabled()).thenReturn(true);\n+        when(profilingConfig.getProfilingDuration()).thenReturn(TimeDuration.of(\"500ms\"));\n+        when(profilingConfig.getProfilingInterval()).thenReturn(TimeDuration.of(\"500ms\"));\n+        when(profilingConfig.getSamplingInterval()).thenReturn(TimeDuration.of(\"5ms\"));\n+        tracer = MockTracer.createRealTracer(reporter, config);\n+        profiler = tracer.getLifecycleListener(ProfilingFactory.class).getProfiler();\n+        // ensure profiler is initialized\n+        await()\n+            .pollDelay(10, TimeUnit.MILLISECONDS)\n+            .timeout(6000, TimeUnit.MILLISECONDS)\n+            .until(() -> profiler.getProfilingSessions() > 1);\n+    }\n+\n+    @AfterEach\n+    void tearDown() throws Exception {\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testAll() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MjI3NA=="}, "originalCommit": {"oid": "cc0e314ea4588525bf3442e582e5fce492844478"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 318, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}