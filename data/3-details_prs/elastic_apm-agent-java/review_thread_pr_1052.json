{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTU5NTI3", "number": 1052, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowODo0MFrODncI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozNzo0OVrOD9i4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjgyMDc2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowODo0MFrOF1b9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyOToxNVrOF1mBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA==", "bodyText": "It's fine if the protocol doesn't support multiple headers. The agent will only write a single value per header but supports reading multiple values if the protocol supports it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String headerValueStr = doGetHeader(headerName, invocation);\n          \n          \n            \n                    if (headerValueStr == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    String[] headerValues = headerValueStr.split(SEPARATOR);\n          \n          \n            \n                    for (String headerValue : headerValues) {\n          \n          \n            \n                        consumer.accept(headerValue, state);\n          \n          \n            \n                    }\n          \n          \n            \n                    consumer.accept(invocation.getAttachment(headerName), state);", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391576920", "createdAt": "2020-03-12T12:08:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwNzQ3OA==", "bodyText": "it doesn't support multiple headers, just simple KV pair.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391607478", "createdAt": "2020-03-12T13:07:46Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTcwOQ==", "bodyText": "And that's fine. There's no need to emulate multi-valued headers via string concatenation.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391741709", "createdAt": "2020-03-12T16:29:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjkyMA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjgyMzczOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowOTozNFrOF1b_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowOTozNFrOF1b_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzM1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String oldHeader = getFirstHeader(headerName, invocation);\n          \n          \n            \n                    String newHeader = headerValue;\n          \n          \n            \n                    if (oldHeader != null) {\n          \n          \n            \n                        newHeader = oldHeader + SEPARATOR + headerValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    doSetHeader(headerName, newHeader, invocation);\n          \n          \n            \n                    invocation.setAttachment(headerName, headerValue)", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577356", "createdAt": "2020-03-12T12:09:34Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/ApacheDubboAttachmentHelperImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import org.apache.dubbo.rpc.Invocation;\n+\n+import javax.annotation.Nullable;\n+\n+public class ApacheDubboAttachmentHelperImpl implements ApacheDubboAttachmentHelper {\n+\n+    private static final String SEPARATOR = \",\";\n+\n+    void doSetHeader(String headerName, String headerValue, Invocation invocation) {\n+        invocation.setAttachment(headerName, headerValue);\n+    }\n+\n+    String doGetHeader(String headerName, Invocation invocation) {\n+        return invocation.getAttachment(headerName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getFirstHeader(String headerName, Invocation invocation) {\n+        return doGetHeader(headerName, invocation);\n+    }\n+\n+    @Override\n+    public <S> void forEach(String headerName, Invocation invocation, S state, HeaderConsumer<String, S> consumer) {\n+        String headerValueStr = doGetHeader(headerName, invocation);\n+        if (headerValueStr == null) {\n+            return;\n+        }\n+        String[] headerValues = headerValueStr.split(SEPARATOR);\n+        for (String headerValue : headerValues) {\n+            consumer.accept(headerValue, state);\n+        }\n+    }\n+\n+    @Override\n+    public void setHeader(String headerName, String headerValue, Invocation invocation) {\n+        String oldHeader = getFirstHeader(headerName, invocation);\n+        String newHeader = headerValue;\n+        if (oldHeader != null) {\n+            newHeader = oldHeader + SEPARATOR + headerValue;\n+        }\n+        doSetHeader(headerName, newHeader, invocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjgyNzI3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxMDo0N1rOF1cBNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzowODozN1rOF1d2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzkwOA==", "bodyText": "Rather than allocating an object, just pass all the information as method parameters to the helper", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391577908", "createdAt": "2020-03-12T12:10:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.advice;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelper;\n+import co.elastic.apm.agent.dubbo.helper.DubboApiInfo;\n+import co.elastic.apm.agent.dubbo.helper.DubboTraceHelper;\n+import co.elastic.apm.agent.dubbo.helper.IgnoreExceptionHelper;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.Result;\n+import org.apache.dubbo.rpc.RpcContext;\n+\n+@VisibleForAdvice\n+public class ApacheDubboFilterAdvice {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    @VisibleForAdvice\n+    public static HelperClassManager<ApacheDubboAttachmentHelper> helperClassManager;\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        ApacheDubboFilterAdvice.tracer = tracer;\n+        DubboTraceHelper.init(tracer);\n+        IgnoreExceptionHelper.init(tracer);\n+        helperClassManager = HelperClassManager.ForAnyClassLoader.of(tracer,\n+            \"co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelperImpl\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnterFilterInvoke(@Advice.Argument(1) Invocation invocation,\n+                                           @Advice.Local(\"span\") Span span,\n+                                           @Advice.Local(\"apiClazz\") Class<?> apiClazz,\n+                                           @Advice.Local(\"transaction\") Transaction transaction,\n+                                           @Advice.Local(\"scope\") Scope scope) {\n+        RpcContext context = RpcContext.getContext();\n+        String version = context.getUrl().getParameter(\"version\");\n+        Invoker<?> invoker = invocation.getInvoker();\n+        apiClazz = invoker.getInterface();\n+        DubboApiInfo dubboApiInfo = new DubboApiInfo(\n+            apiClazz, invocation.getMethodName(),\n+            invocation.getParameterTypes(), version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwNzkzOQ==", "bodyText": "good for performance, ok", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391607939", "createdAt": "2020-03-12T13:08:37Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/advice/ApacheDubboFilterAdvice.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.advice;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelper;\n+import co.elastic.apm.agent.dubbo.helper.DubboApiInfo;\n+import co.elastic.apm.agent.dubbo.helper.DubboTraceHelper;\n+import co.elastic.apm.agent.dubbo.helper.IgnoreExceptionHelper;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.Result;\n+import org.apache.dubbo.rpc.RpcContext;\n+\n+@VisibleForAdvice\n+public class ApacheDubboFilterAdvice {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    @VisibleForAdvice\n+    public static HelperClassManager<ApacheDubboAttachmentHelper> helperClassManager;\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        ApacheDubboFilterAdvice.tracer = tracer;\n+        DubboTraceHelper.init(tracer);\n+        IgnoreExceptionHelper.init(tracer);\n+        helperClassManager = HelperClassManager.ForAnyClassLoader.of(tracer,\n+            \"co.elastic.apm.agent.dubbo.helper.ApacheDubboAttachmentHelperImpl\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnterFilterInvoke(@Advice.Argument(1) Invocation invocation,\n+                                           @Advice.Local(\"span\") Span span,\n+                                           @Advice.Local(\"apiClazz\") Class<?> apiClazz,\n+                                           @Advice.Local(\"transaction\") Transaction transaction,\n+                                           @Advice.Local(\"scope\") Scope scope) {\n+        RpcContext context = RpcContext.getContext();\n+        String version = context.getUrl().getParameter(\"version\");\n+        Invoker<?> invoker = invocation.getInvoker();\n+        apiClazz = invoker.getInterface();\n+        DubboApiInfo dubboApiInfo = new DubboApiInfo(\n+            apiClazz, invocation.getMethodName(),\n+            invocation.getParameterTypes(), version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NzkwOA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg0OTQ5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxODowNlrOF1cPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzowOToyOFrOF1d4Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MTQ0MA==", "bodyText": "This allocates lots of objects on each invocation. In order to reduce allocations, could we go for a more simple span name to make it completely allocation free like this:\nspan.appendToName(apiInfo.getApiClass().getName())\n    .appendToName(\"#\")\n    .appendToName(apiInfo.getMethodName());", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391581440", "createdAt": "2020-03-12T12:18:06Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwODQxNA==", "bodyText": "ok i will reduce the allocations", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391608414", "createdAt": "2020-03-12T13:09:28Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MTQ0MA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg1NTI3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxOTo1MVrOF1cSmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo1NToyMlrOF-_QQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ==", "bodyText": "Could you explain what this exactly does? I fear that this is going to have too much runtime overhead.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582361", "createdAt": "2020-03-12T12:19:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNTYzNA==", "bodyText": "the best pratice by dubbo, we will throw some exception that we expected, we call it as the business exception, so we don't want to let these  exceptions to be shown as error in kibana.\none way is ignoring these exception by setting the CoreConfigurations, but it's inconvenient to settings the configuration for each application\uff0c because each application has their own business exceptions, so i decide to handle it dynamically.\nfor performance, one exception class will only be judged whether it's business exception once, and the agent will cache the result.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391615634", "createdAt": "2020-03-12T13:21:59Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNTE5Mw==", "bodyText": "You are already trying to capture business exceptions with custom attributes. I would still just capture a business exception just like a regular one. Then you can both see business exceptions and actual errors in the UI.\nCould you make an example of when you would throw a business exception? Would one example be someone trying to order an item when there's no stock for that item? Like NoToiletPaperException?\nI would argue that it's still interesting to monitor how many of these exceptions are thrown over time.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r392915193", "createdAt": "2020-03-16T10:28:23Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczOTQ4MQ==", "bodyText": "ok, You are right.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r394739481", "createdAt": "2020-03-19T01:33:14Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjM4Ng==", "bodyText": "Are you planning to remove the biz exception concept?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592386", "createdAt": "2020-04-01T12:55:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjM2MQ=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg1OTMzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMTowMlrOF1cVBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0NToxMlrOF1fL0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mjk4Mg==", "bodyText": "Would transaction.captureEception(t); work?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391582982", "createdAt": "2020-03-12T12:21:02Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyOTc3OQ==", "bodyText": "some business exceptions are not expected to be capture as an exception, in these case,  i want to capture their as a result, and store it in custom context", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391629779", "createdAt": "2020-03-12T13:45:12Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mjk4Mg=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg2MTkzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMTo0NFrOF1cWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoyNTowM1rOGUkrGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA==", "bodyText": "Custom context is reserved for user-defined properties. Core agent plugins should not use them.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583374", "createdAt": "2020-03-12T12:21:44Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzMTE4Mg==", "bodyText": "sometimes i want to capture the arguments and return object, including exception thrown, and show them in kibana, where should i store them in?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391631182", "createdAt": "2020-03-12T13:47:17Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NzA4OA==", "bodyText": "Would it be possible to register an interceptor that is custom to your application that adds the custom context?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r408867088", "createdAt": "2020-04-15T14:03:19Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5Mzk4NQ==", "bodyText": "Like capture_body for http request, it is quite common to capture something for dubbo request\uff0cfor example, the params, the data was return or the exception thrown.\nThe difference is the dubbo agent store these data into the custom context.\nIs it proper to store these data into SpanContext or TransactionContext, like http?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r422893985", "createdAt": "2020-05-11T09:05:59Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwMTY1Mg==", "bodyText": "There's currently no proper field for that. I agree that could be useful to store parameters and return values but it's not Dubbo specific. I also applies to gRPC, for example.\nSo I suggest leaving this out in this PR and open a follow-up discussion in https://github.com/elastic/apm instead, according to the guidelines in https://github.com/elastic/apm/blob/master/docs/agents/new-fields.md. This makes sure we align across agents and that the proposal is not Dubbo or Java specific.\n\nor the exception thrown.\n\nWe capture the transaction via transaction.captureException now, right?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r422901652", "createdAt": "2020-05-11T09:18:59Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMjA0Mg==", "bodyText": "ok\uff0c i will remove it out of this PR", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r423422042", "createdAt": "2020-05-12T02:11:32Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNTU2Mg==", "bodyText": "It has been removed now.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r424225562", "createdAt": "2020-05-13T07:25:03Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static String EXTERNAL_TYPE = \"external\";\n+\n+    private static String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String PROVIDER_SERVICE_NAME_KEY = \"elastic-apm-dubbo-provider\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static String buildDubboRequestName(DubboApiInfo apiInfo) {\n+        Class<?>[] paramClasses = apiInfo.getParamClasses();\n+        String paramsSign = \"\";\n+        if (paramClasses != null && paramClasses.length > 0) {\n+            StringBuilder paramSignBuilder = new StringBuilder(paramClasses[0].getSimpleName());\n+            for (int i = 1; i < paramClasses.length; i++) {\n+                paramSignBuilder.append(\",\").append(paramClasses[i].getSimpleName());\n+            }\n+            paramsSign = paramSignBuilder.toString();\n+        }\n+\n+        String requestName = apiInfo.getApiClass().getName() + \".\" + apiInfo.getMethodName() + \"(\" + paramsSign + \")\";\n+        String version = apiInfo.getVersion();\n+        if (version != null && version.length() > 0) {\n+            requestName += \" version=\" + version;\n+        }\n+\n+        return requestName;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(DubboApiInfo apiInfo, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE)\n+            .withName(buildDubboRequestName(apiInfo));\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    @VisibleForAdvice\n+    public static void fillTransaction(Transaction transaction, DubboApiInfo dubboApiInfo) {\n+        transaction.withName(buildDubboRequestName(dubboApiInfo));\n+        transaction.withType(\"dubbo\");\n+        transaction.activate();\n+    }\n+\n+    public static boolean isBizException(Class<?> interfaceClass, Class<?> exp) {\n+        String apiJarFile = getJarFile(interfaceClass);\n+        if (apiJarFile == null) {\n+            return false;\n+        }\n+        return apiJarFile.equals(getJarFile(exp));\n+    }\n+\n+    public static String getJarFile(Class<?> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        ProtectionDomain domain = clazz.getProtectionDomain();\n+        if (domain == null) {\n+            return null;\n+        }\n+        CodeSource source = domain.getCodeSource();\n+        if (source == null) {\n+            return null;\n+        }\n+        URL location = source.getLocation();\n+        if (location == null) {\n+            return null;\n+        }\n+        return location.getFile();\n+    }\n+\n+    public static void doCapture(Object[] args, Throwable t, Object returnValue) {\n+        Transaction transaction = tracer.currentTransaction();\n+        if (transaction == null) {\n+            return;\n+        }\n+        boolean hasError = t != null;\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        CoreConfiguration.EventType captureBody = coreConfig.getCaptureBody();\n+        if (CoreConfiguration.EventType.OFF.equals(captureBody) ||\n+            (CoreConfiguration.EventType.ERRORS.equals(captureBody) && !hasError)) {\n+            return;\n+        }\n+\n+        captureArgs(transaction, args);\n+        if (t != null) {\n+            transaction.addCustomContext(\"throw\", t.toString());\n+        } else {\n+            transaction.addCustomContext(\"return\", returnValue.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MzM3NA=="}, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg2NDkzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMjo0OFrOF1cYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMjo0OFrOF1cYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4Mzg0MA==", "bodyText": "can this class extend AbstractInstrumentationTest?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r391583840", "createdAt": "2020-03-12T12:22:48Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/test/java/co/elastic/apm/agent/dubbo/AbstractDubboInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.dubbo.api.DubboTestApi;\n+import co.elastic.apm.agent.dubbo.api.exception.BizException;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracerBuilder;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.TransactionContext;\n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class AbstractDubboInstrumentationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a384a1459c137d9da4b2ac0e1acddae450e384"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDU1OTAyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo1Mzo1M1rOF-_MIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzoyNToxMlrOGBxi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ==", "bodyText": "Can we make the name just \"${simpleClassName}#${methodName}\".\nThis would make it more consistent how we name transactions for other technologies like Spring MVC and JAS-RS", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401591331", "createdAt": "2020-04-01T12:53:53Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjEzNA==", "bodyText": "Use java.lang.StringBuilder#append(java.lang.CharSequence, int, int) instead of Class#getSimpleClassName for that.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r401592134", "createdAt": "2020-04-01T12:54:58Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ=="}, "originalCommit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMzUxNg==", "bodyText": "what about \"${simpleClassName}#${methodName}(${parameters})\", because ${parameters} is a unique part of dubbo API", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r404513516", "createdAt": "2020-04-07T03:25:12Z", "author": {"login": "CoderLan0668"}, "path": "apm-agent-plugins/apm-dubbo-plugin/src/main/java/co/elastic/apm/agent/dubbo/helper/DubboTraceHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.dubbo.helper;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+@VisibleForAdvice\n+public class DubboTraceHelper {\n+\n+    @VisibleForAdvice\n+    public static ElasticApmTracer tracer;\n+\n+    private static final String EXTERNAL_TYPE = \"external\";\n+\n+    private static final String DUBBO_SUBTYPE = \"dubbo\";\n+\n+    public static final String SPAN_KEY = \"span\";\n+\n+    public static void init(ElasticApmTracer tracer) {\n+        DubboTraceHelper.tracer = tracer;\n+    }\n+\n+    @VisibleForAdvice\n+    public static Span createConsumerSpan(Class<?> apiClass, String methodName, Class<?>[] paramClasses,\n+                                          String version, InetSocketAddress remoteAddress) {\n+        TraceContextHolder<?> traceContext = DubboTraceHelper.tracer.getActive();\n+        if (traceContext == null) {\n+            return null;\n+        }\n+        Span span = traceContext.createExitSpan();\n+        if (span == null) {\n+            return null;\n+        }\n+\n+        span.withType(EXTERNAL_TYPE)\n+            .withSubtype(DUBBO_SUBTYPE);\n+        fillName(span, apiClass, methodName, paramClasses, version);\n+\n+        Destination destination = span.getContext().getDestination();\n+        destination.withAddress(remoteAddress.getHostName()).withPort(remoteAddress.getPort());\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(EXTERNAL_TYPE).withResource(DUBBO_SUBTYPE).withName(DUBBO_SUBTYPE);\n+\n+        return span.activate();\n+    }\n+\n+    private static void fillName(AbstractSpan<?> span, Class<?> apiClass, String methodName,\n+                                 Class<?>[] paramClasses, String version) {\n+        span.appendToName(apiClass.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTMzMQ=="}, "originalCommit": {"oid": "d1c0a459abead7eb32c6242a3ed675cf6dcba4c5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODYxMTg0OnYy", "diffSide": "RIGHT", "path": "docs/supported-technologies.asciidoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozNzo0OVrOGXGsxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzozODo0NFrOGXTnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MDE5Nw==", "bodyText": "Why exactly 2.7.3? Does it not work with 2.7.{0,1,2}? What happens when the agent is used with versions lower than 2.6.0? Does it break, does it work? Should we try to avoid instrumenting those versions?", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r426880197", "createdAt": "2020-05-18T20:37:49Z", "author": {"login": "felixbarny"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -262,6 +262,11 @@ The spans are named after the schema `<method> <host>`, for example `GET elastic\n |\n | 1.7.0\n \n+|Apache Dubbo\n+| 2.7.3 and upper,  2.6.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NDg5NA==", "bodyText": "Why exactly 2.7.3? Does it not work with 2.7.{0,1,2}?\n\nThat's because the method org.apache.dubbo.rpc.Result#whenCompleteWithContext was not available previously. This means instrumenting a Dubbo 2.7.2 application would print lots of errors.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r427054894", "createdAt": "2020-05-19T06:19:46Z", "author": {"login": "felixbarny"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -262,6 +262,11 @@ The spans are named after the schema `<method> <host>`, for example `GET elastic\n |\n | 1.7.0\n \n+|Apache Dubbo\n+| 2.7.3 and upper,  2.6.x", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MDE5Nw=="}, "originalCommit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NTkxNg==", "bodyText": "The agent will not work with dubbo 2.7.{0,1,2}, since 2.7.3, dubbo provides a better async callback like  AsyncRpcResult.whenCompleteWithContext, the most importance is the 2.7.{0,1,2}   are not recommended in production by dubbo official\uff0c so the agent do not compatible with 2.7.{0,1,2}\u3002\nthe agent may be work with versions lower than 2.6.0, but they have not been well tested.", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r427065916", "createdAt": "2020-05-19T06:45:53Z", "author": {"login": "CoderLan0668"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -262,6 +262,11 @@ The spans are named after the schema `<method> <host>`, for example `GET elastic\n |\n | 1.7.0\n \n+|Apache Dubbo\n+| 2.7.3 and upper,  2.6.x", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MDE5Nw=="}, "originalCommit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MTc0NQ==", "bodyText": "Thanks, I have tested with 2.5.x and it works. I've also ensured not to instrument unsupported versions. I think we are really close now! \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1052#discussion_r427091745", "createdAt": "2020-05-19T07:38:44Z", "author": {"login": "felixbarny"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -262,6 +262,11 @@ The spans are named after the schema `<method> <host>`, for example `GET elastic\n |\n | 1.7.0\n \n+|Apache Dubbo\n+| 2.7.3 and upper,  2.6.x", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MDE5Nw=="}, "originalCommit": {"oid": "00c8db2e673fe6bee0fdc0c99fafdf4f290a7b7e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 463, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}