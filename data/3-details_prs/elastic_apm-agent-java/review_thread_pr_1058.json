{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDMyNDc4", "number": 1058, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0OToyNVrODj4Vmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMDoyMlrOD3lcEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ5Nzg2OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0OToyNVrOFv7rGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0Njo1NVrOF0PdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTA4Mg==", "bodyText": "What do you think to move this logic to a shell script?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385805082", "createdAt": "2020-02-28T16:49:25Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Nzk5MQ==", "bodyText": "Also, as an alternative, it might be easier to get project version from maven pom.xml rather than parsing it from git.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389577991", "createdAt": "2020-03-09T10:34:40Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTA4Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMzY2MA==", "bodyText": "Great idea! I have implemented this upstream and will update this pipeline to use the new functionality.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390323660", "createdAt": "2020-03-10T13:46:55Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTA4Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUwMTI2OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1MDoyOFrOFv7tRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozODo0NVrOF0Ursg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTYzNw==", "bodyText": "Shell script that returns the URL?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385805637", "createdAt": "2020-02-28T16:50:28Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwOTEzOA==", "bodyText": "Good suggestion! I have migrated this logic to a stand-alone shell script.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390409138", "createdAt": "2020-03-10T15:38:45Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTYzNw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUwOTY3OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1MzowM1rOFv7ygA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjowMjo1NVrOF00FtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjk3Ng==", "bodyText": "This should be tag-based, this pipeline is master based IIRC, therefore the tag conditional can be left as it was previously, what do you think?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385806976", "createdAt": "2020-02-28T16:53:03Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NzU3OQ==", "bodyText": "@v1v Do you mean this this conditional specifically?\n      when {\n        tag pattern: 'v\\\\d+\\\\.\\\\d+\\\\.\\\\d+', comparator: 'REGEXP'\n      }", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390457579", "createdAt": "2020-03-10T16:45:39Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjk3Ng=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MTE3OQ==", "bodyText": "Let me clarify, I meant, this particular stage could be kept in the other CI Jenkinsfile. IIUC, this particular pipeline will be triggered for the master branch and as a consequence, it will create a tag/branch with the version.\nTherefore, the other CI Jenkinsfile could be kept as it was, it was configured to listen for branches/tags/PRs and the when condition in place will care of running that particular stage.\nI think it might help to simplify this pipeline. what do you think?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390481179", "createdAt": "2020-03-10T17:20:17Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjk3Ng=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMzcwMQ==", "bodyText": "Gotcha! I agree and have restored the original logic. Thanks!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390923701", "createdAt": "2020-03-11T12:02:55Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjk3Ng=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUxNDI3OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NDoyMFrOFv71cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowMzowNVrOFwZs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzczMA==", "bodyText": "nit:\nmaybe DEFAULT_MAVEN_CONFIG ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385807730", "createdAt": "2020-02-28T16:54:20Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMjIyNw==", "bodyText": "I said nothing, that's how it's defined in the other Jenkinsfile!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385812227", "createdAt": "2020-02-28T17:03:16Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzczMA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5NzA3Mg==", "bodyText": "Aye. I just moved it from there. :)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r386297072", "createdAt": "2020-03-02T10:03:05Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzczMA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDEyOTIzOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMzo0OVrOFzhmvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MTo0N1rOF0PQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MjI4Nw==", "bodyText": "What are the use-cases of overriding maven config on a per build basis ? I'm pretty sure we haven't had to use this so far.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389572287", "createdAt": "2020-03-09T10:23:49Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MjQyNA==", "bodyText": "Very good question. I used the original Jenkinsfile as a skeleton for this one and that's where this came from. I don't see where it would come into play in this workflow, however, so I think it is safe to remove.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389592424", "createdAt": "2020-03-09T11:05:02Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MjI4Nw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMDE0OA==", "bodyText": "I have consolidated this into a single step in this commit.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390320148", "createdAt": "2020-03-10T13:41:47Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MjI4Nw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDE0MzQ0OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyODowNFrOFzhvdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMTozOVrOF069Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDUxOA==", "bodyText": "we switched to using versions plugin instead in latest version of the release instructions https://github.com/elastic/apm-agent-java/blob/master/CONTRIBUTING.md#releasing", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389574518", "createdAt": "2020-03-09T10:28:04Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5NzIwOA==", "bodyText": "Ah! Glad you caught that. Thanks! I will make this change.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389597208", "createdAt": "2020-03-09T11:15:58Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDUxOA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1OTE1NA==", "bodyText": "As mentioned in my comment, the change was mostly due to having the release plugin to change formatting in pom.xml, and not just update versions.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389659154", "createdAt": "2020-03-09T13:24:45Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDUxOA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNjE3NA==", "bodyText": "I have updated this stage substantially. The new workflow is as follows:\n\n\nDisplay the current version present in pom.xml and ask the user if they would like to do an update. If they select \"no\", then execution continues to the next stage.\n\n\nIf \"yes\" has been selected, an additional dialog appears again displaying the current version along with an input field for the user to enter a new version.\n\n\nAfter submitting the new version, mvn versions:set -DnewVersion=${new_version} is run.\n\n\nExecution continues from there.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r391036174", "createdAt": "2020-03-11T15:01:39Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDUxOA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDE0NjAyOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyODo0NlrOFzhxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozNjozOFrOF0PCLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw==", "bodyText": "does the #welcome part of the URL matters here ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389574913", "createdAt": "2020-03-09T10:28:46Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5NTYxNA==", "bodyText": "It doesn't matter. The root of the site redirects here so I just put it in to avoid the (slight) overhead of the redirect.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389595614", "createdAt": "2020-03-09T11:12:21Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyOTg1Ng==", "bodyText": "For a future improvement: could we use this: https://status.maven.org/history.atom", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389629856", "createdAt": "2020-03-09T12:30:45Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjU5MQ==", "bodyText": "A while ago I looked into using the Atom feed for this kind of thing but it's fraught with problems. Unfortunately, it's basically just free-text and there is no clear way to determine whether a given entry represents an ongoing outage, a recovery, an announcement, or free puppies. \ud83d\udc36 I have some ideas about how to do this kind of thing in the future with Github since they have enabled webhooks. My current plan is to get that working and then see if Sonatype is open to the possibility of using webhooks on their page as well.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390316591", "createdAt": "2020-03-10T13:36:38Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDE3NzAwOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDozODoxNVrOFziD_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyNTo1OVrOFzm_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3OTc3Mg==", "bodyText": "probably worth having a non-obscure credentials ID and/or a proper env variable for this.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389579772", "createdAt": "2020-03-09T10:38:15Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {\n+          environment {\n+            REPO_NAME = \"${OPBEANS_REPO}\"\n+          }\n+          steps {\n+            deleteDir()\n+            dir(\"${OPBEANS_REPO}\"){\n+              git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5Njk3NA==", "bodyText": "Using this method, we can use Jenkins secure credentials storage to ensure that we don't leak credentials to the log. Could you please elaborate on your reason for wanting this not to be obscured?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389596974", "createdAt": "2020-03-09T11:15:28Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {\n+          environment {\n+            REPO_NAME = \"${OPBEANS_REPO}\"\n+          }\n+          steps {\n+            deleteDir()\n+            dir(\"${OPBEANS_REPO}\"){\n+              git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3OTc3Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2MDU1OA==", "bodyText": "There is no special reason, I was just surprised to not have something referred by a human-friendly name here.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389660558", "createdAt": "2020-03-09T13:25:59Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {\n+          environment {\n+            REPO_NAME = \"${OPBEANS_REPO}\"\n+          }\n+          steps {\n+            deleteDir()\n+            dir(\"${OPBEANS_REPO}\"){\n+              git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3OTc3Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDE4MjEzOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDozOTo1NlrOFziG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1MjoxNlrOF0Pslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4MDUzNg==", "bodyText": "What controls params.push_docker value ? Isn't it always true for release pipeline ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389580536", "createdAt": "2020-03-09T10:39:56Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5NjUwOQ==", "bodyText": "You are right. This came from the previous Jenkinsfile where it was gated, but that gate should not be necessary here. I will remove it. Thanks!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389596509", "createdAt": "2020-03-09T11:14:19Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4MDUzNg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyNzQ0Ng==", "bodyText": "This has been removed. Thanks for catching this!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390327446", "createdAt": "2020-03-10T13:52:16Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4MDUzNg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDUxNDkxOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozNToxMlrOFzlPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1NTo1NlrOF0Sq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMTkzNg==", "bodyText": "what happens if there are multiple staging repos (for example a leftover from a failed release)?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389631936", "createdAt": "2020-03-09T12:35:12Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NjE1MQ==", "bodyText": "At present, we consider this an error requiring manual intervention.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390376151", "createdAt": "2020-03-10T14:55:56Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMTkzNg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDUxNzkxOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozNjowOFrOFzlRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo0NjowNlrOF0VBmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMjM5MQ==", "bodyText": "Closing can take a minute or two. Does this return after triggering the close or after the close is finished?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389632391", "createdAt": "2020-03-09T12:36:08Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNDc0NA==", "bodyText": "We attempt to poll the repo for the actual close event, so this should block until the close actually happens.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390414744", "createdAt": "2020-03-10T15:46:06Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMjM5MQ=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDUzNzUxOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo0MjoyOVrOFzldGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0MzowMFrOF01RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNTM1Mw==", "bodyText": "let's to this after the Wait for artifact to be available in Maven Central step", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389635353", "createdAt": "2020-03-09T12:42:29Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzA4MQ==", "bodyText": "I've moved this. Thanks!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390943081", "createdAt": "2020-03-11T12:43:00Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNTM1Mw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDU0MjA4OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo0Mzo1OVrOFzlf6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0NTo0OVrOF0SKrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNjA3NQ==", "bodyText": "what's the title of the release? So far, we did \"Release $version\".", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389636075", "createdAt": "2020-03-09T12:43:59Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MDIzNQ==", "bodyText": "Right now, we don't specify a name when we call the GitHub API but this is easy to change. I will make a change upstream in the APM Pipeline library to support this behavior.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389740235", "createdAt": "2020-03-09T14:50:33Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNjA3NQ=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNzc5Nw==", "bodyText": "This change is now merged. I will update this call to use the new functionality.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389907797", "createdAt": "2020-03-09T19:20:01Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNjA3NQ=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2NzkxNw==", "bodyText": "The call has been updated. Thanks for the suggestion!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390367917", "createdAt": "2020-03-10T14:45:49Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNjA3NQ=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDU0OTQ5OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo0NjoyOFrOFzlkSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNTowOVrOF0QsyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNzE5Mg==", "bodyText": "Does that mean it first starts to try after 15 sec? Is there a timeout? It usually takes around 10 min.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389637192", "createdAt": "2020-03-09T12:46:28Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg4NA==", "bodyText": "cURL has its own time-out, and after it expires, it will trigger the retry in the waitUntil. which will retry every 15 seconds, starting immediately, with a back-off.\nI think that we can improve this with the following changes:\n\nSleep first for ~10 minutes before we enter the re-try loop.\nBump the initial re-try up to 1 minute from 15s.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389732884", "createdAt": "2020-03-09T14:39:55Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNzE5Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0Mzg4MA==", "bodyText": "The above strategy is now implemented. Thanks for the feedback!", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390343880", "createdAt": "2020-03-10T14:15:09Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNzE5Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDU2NzI5OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1MTo0OVrOFzlu_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0NDoyOVrOF-NpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA==", "bodyText": "How does the release job get triggered?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389639934", "createdAt": "2020-03-09T12:51:49Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNTUwNg==", "bodyText": "By hand. I could probably improve this description but what I meant to indicate here is that this pipeline should be run after the existing release job is run.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389725506", "createdAt": "2020-03-09T14:28:53Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMDY3Nw==", "bodyText": "maybe open a dialog describing what to do which should be closed after the release job is done?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389810677", "createdAt": "2020-03-09T16:33:34Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzk2OA==", "bodyText": "BTW, I love that this just delegates to the existing and battle-tested release job instead of re-inventing this step which is definitely the most critical piece.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389833968", "createdAt": "2020-03-09T17:10:48Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MjE3Ng==", "bodyText": "Or we could trigger the release job when a new tag is created. That way, we don't have a direct dependency to actively trigger the build in the internal CI form the public CI.\nThe public CI  would execute the release:prepare phase of the maven release plugin which updates the versions and creates a new tag.\nThe creation of the tag triggers the release job on the internal CI which executes the release:perform phase of the release plugin.\nThis does not have to, and probably shouldn't, be in the first iteration of the automated release.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r394372176", "createdAt": "2020-03-18T14:07:39Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3OTU1Ng==", "bodyText": "I agree that this is a good long-term goal and I also agree that we shouldn't try to achieve this in the first iteration. Therefore, I'm going to resolve this comment because it's becoming a bit tricky to track all the feedback in this PR but we'll come back to it after we have this PR merged. Thanks, @felixbarny ! :)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400779556", "createdAt": "2020-03-31T09:44:29Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTY3NzA3OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0NjoyM1rOFzwo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0Njo0NVrOGJ6ccw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw==", "bodyText": "Instead of updating the version here, I wonder if we should instead require the release version to be set in the release job. See https://maven.apache.org/maven-release/maven-release-plugin/examples/non-interactive-release.html\nWe could then also require to set the next dev version. The release plugin offers system properties for the release and next dev version: -DreleaseVersion=1.2.0  -DdevelopmentVersion=1.3.0-SNAPSHOT.\n@eyalkoren @SylvainJuge WDYT?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389818617", "createdAt": "2020-03-09T16:46:23Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTYyNQ==", "bodyText": "I'm not really sure to understand how this would be different: do we make the release job just \"release current version\", which is read from pom.xml ?\nWhat if we keep having this prompt for release version and the default value is read from pom.xml, if a different value is set just updates version before executing release ?\nHaving this version set/bump done at CI level allows to avoid running any local git command, which is one less opportunity for human errors.\nI'm also ok for doing an increment on the minor version number, but would rather use mvn versions:set and not mvn:release plugin. for the reason I mentioned above (which I can definitely get by).", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389835625", "createdAt": "2020-03-09T17:13:24Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDc5MQ==", "bodyText": "but would rather use mvn versions:set and not mvn:release plugin\n\nDuring a release:prepare and after a release:perform the versions get updated by the release plugin anyways.\nSo in the current state of this PR, we would update the version in step 2, then once again in on internal-ci via the release:prepare stage (it removes the -SNAPSHOT) and finally after the release is done, after the release:perform stage (increments the patch version and adds -SNAPSHOT, in most cases we actually want to increment the minor version).\nWhat I'm suggesting is to modify the version 2 times instead of 3.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389864791", "createdAt": "2020-03-09T17:59:46Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MDQ4Mg==", "bodyText": "Hi @felixbarny and @SylvainJuge We've let this discussion sit for a while. I don't have any strong opinions on the way we handle this, but I'd like to come to a consensus so we can get this merged. What's the best way to find a path forward here?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r412960482", "createdAt": "2020-04-22T13:00:25Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NzkyMw==", "bodyText": "don't see this as blocking the PR, that's something we can always improve later on", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r413047923", "createdAt": "2020-04-22T14:46:45Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTc4NDIyOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMzowNFrOFzxqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToyMTo0MFrOF072cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTM4Nw==", "bodyText": "Could we add a step that checks whether the current build on master is green?\n(Not required for the first version)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389835387", "createdAt": "2020-03-09T17:13:04Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwMjU2Mg==", "bodyText": "Good idea! I have introduced this capability upstream in this PR.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390902562", "createdAt": "2020-03-11T11:19:42Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTM4Nw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1MDg2NQ==", "bodyText": "I have introduced a step into this pipeline that warns if the master build is not passing and presents the user with an input asking if they would like to abort the build or continue.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r391050865", "createdAt": "2020-03-11T15:21:40Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTM4Nw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzc4NTg4OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxMDowM1rOF0ErGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxMDowM1rOF0ErGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0Njg0Mw==", "bodyText": "The GH release contains a link to a release-notes URL calculated in the Create GitHub release draft stage. This link will be available after the relevant branch gets built, after pushing the new tag in the Branch creation phase.\nIt takes time, so this step needs to block until the release-notes URL is available, otherwise we will publish a Release with a broken link.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390146843", "createdAt": "2020-03-10T08:10:03Z", "author": {"login": "eyalkoren"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzg2NTg3OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozODoxNFrOF0FcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozODoxNFrOF0FcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1OTM5NA==", "bodyText": "We have added another step since you have started working on this regarding documentation:\n\nUpdate CHANGELOG.asciidoc to reflect the new version release:\nGo over PRs or git log and add bug fixes and features.\nMove release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n\nThis step seems a bit tricky to automate. But we could instead just show this instruction in an input. When done with manually reviewing and adjusting the release notes, the automated release continues.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390159394", "createdAt": "2020-03-10T08:38:14Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQ0MDYzOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzo1NlrOF9nS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzo1NlrOF9nS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MTI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                OPBEANS_REPO = 'opbeans-java'", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400151291", "createdAt": "2020-03-30T12:27:56Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQ0OTY0OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMDowOVrOF9nYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo1NjowNlrOF-OFdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MjY3Mw==", "bodyText": "These env variables are only defined in the top-level Initializing stage that it's only used in the nested checkout stage. Is this required for the other stages?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400152673", "createdAt": "2020-03-30T12:30:09Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjgwNw==", "bodyText": "Good catch. I moved them up to the top level where they belong.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400786807", "createdAt": "2020-03-31T09:56:06Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MjY3Mw=="}, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQ1MzIxOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMTowM1rOF9nafw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMTowM1rOF9nafw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MzIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          sh(script: \"git checkout -f {$branch_specifier}\")\n          \n          \n            \n                          sh(script: \"git checkout -f ${branch_specifier}\")", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400153215", "createdAt": "2020-03-30T12:31:03Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQ2MzczOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMzo1N1rOF9ng2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMzo1N1rOF9ng2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDg0Mw==", "bodyText": "Moved to the script closure\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // 2.1 Fetch the current version from pom.xml\n          \n          \n            \n                        def ver = mvnVersion(showQualifiers: true)\n          \n          \n            \n                        // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n          \n          \n            \n                        script {\n          \n          \n            \n                          def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n          \n          \n            \n                        script {\n          \n          \n            \n                          // 2.1 Fetch the current version from pom.xml\n          \n          \n            \n                          def ver = mvnVersion(showQualifiers: true)\n          \n          \n            \n                          // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n          \n          \n            \n                          def should_continue = input(message: \"Current version is ${ver}\", parameters: [", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400154843", "createdAt": "2020-03-30T12:33:57Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 1.1 Check to ensure the build is green. Require confirmation if it is not.\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            // 2.1 Fetch the current version from pom.xml\n+            def ver = mvnVersion(showQualifiers: true)\n+            // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n+            script {\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjcwNTIwOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMjo0MFrOGJ4q_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMjo0MFrOGJ4q_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxODg3OA==", "bodyText": "A few comments regarding the git commands\n\nIs it possible to use the gitCheckout step instead the sh step? If so, then we can remove the githubEnv references\nCan we use the withGitRelease step before pushing with the command gitPush?\nCan we use the setupAPMGitEmail step to configure the user.email and user.name?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r413018878", "createdAt": "2020-04-22T14:12:40Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,255 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f ${branch_specifier}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93fe965503acc9a8b8b9d876c28b02ececa2688"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg1NzA0OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowODowN1rOGN4JDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowODowN1rOGN4JDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNDQ5NA==", "bodyText": "See #1058 (comment)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          setupAPMGitEmail()", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417204494", "createdAt": "2020-04-29T10:08:07Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg3OTI3OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxNDo1MVrOGN4WtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozMDo1MVrOGN42IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNzk4OA==", "bodyText": "What do you think to move the setupAPMGitEmail before the stash? Then all the other calls afteeward are not required:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          setupAPMGitEmail()\n          \n          \n            \n                          script {\n          \n          \n            \n                            env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n          \n          \n            \n                            env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n          \n          \n            \n                            env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n          \n          \n            \n                          }\n          \n          \n            \n                        }\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          setupAPMGitEmail()\n          \n          \n            \n                        }\n          \n          \n            \n                        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          script {\n          \n          \n            \n                            env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n          \n          \n            \n                            env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n          \n          \n            \n                            env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n          \n          \n            \n                          }\n          \n          \n            \n                        }", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417207988", "createdAt": "2020-04-29T10:14:51Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNjAzMg==", "bodyText": "I was wondering about that. I was just being extra-cautious here since there isn't much harm in setting it multiple times but if it will work this way than that's even better.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417216032", "createdAt": "2020-04-29T10:30:51Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNzk4OA=="}, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg4MzI0OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxNjoxNlrOGN4ZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxNjoxNlrOGN4ZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwODY2OQ==", "bodyText": "See #1058 (comment) and #1058 (comment)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          script {\n          \n          \n            \n                            env.BRANCH_NAME = \"master\"\n          \n          \n            \n                          }\n          \n          \n            \n                          withGitRelease() {\n          \n          \n            \n                            setupAPMGitEmail()\n          \n          \n            \n                          withGitRelease() {", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417208669", "createdAt": "2020-04-29T10:16:16Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n+              }\n+              withGitRelease() {\n+                script {\n+                  def curVer = mvnVersion()\n+                  sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n+                  def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n+                  if (isMajor == 0) {\n+                    input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                  }\n+                }\n+                gitPush()\n+              } \n+            }\n+          }\n+        }\n+        stage('Create GitHub release draft') {\n+          steps {\n+            deleteDir()\n+            unstash 'source'\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curVer = mvnVersion(showQualifiers: false)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def finalUrl = sh(script: \"scripts/jenkins/generate_release_notes_url.sh ${curVer}\", , returnStdout: true)\n+                def ret = githubReleaseCreate(draft: true, name: \"Release ${curVer}\", body: \"[Release Notes for ${curVer}](${finalUrl})\")\n+                env.RELEASE_ID = ret['id']\n+                env.RELEASE_NOTES_URL = finalUrl\n+              }\n+            }\n+\n+          }\n+        }\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            script {\n+              def fullUrl = sh(script: \"./scripts/jenkins/maven_artifact_url.sh \")\n+              echo \"Sleeping for ten minutes to wait for Sonatype\"\n+              sleep(time: 10, unit: \"MINUTES\")\n+              waitUntil(initialRecurrencePeriod: 60000) {\n+                script {\n+                  def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                  echo \"Waiting for the artifacts to be published on Sonatype\"\n+                  return ret == 0\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            deleteDir()\n+            unstash 'source'\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                env.BRANCH_NAME = \"master\"\n+              }\n+              withGitRelease() {\n+                setupAPMGitEmail()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg5NjYzOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoyMDo0OVrOGN4h3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoyOTo1NFrOGN40Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDg0Nw==", "bodyText": "IIRC, BRANCH_NAME is a read only env variable, withEnv could help to change the value for the release context, what do you think?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          script {\n          \n          \n            \n                            env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n          \n          \n            \n                          }\n          \n          \n            \n                          withGitRelease() {\n          \n          \n            \n                            script {\n          \n          \n            \n                              def curVer = mvnVersion()\n          \n          \n            \n                              sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n          \n          \n            \n                              def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n          \n          \n            \n                              if (isMajor == 0) {\n          \n          \n            \n                                input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n          \n          \n            \n                              }\n          \n          \n            \n                            }\n          \n          \n            \n                            gitPush()\n          \n          \n            \n                          } \n          \n          \n            \n                          withEnv([\"BRANCH_NAME=tags/${env.TAG_BARE}\"]){\n          \n          \n            \n                            withGitRelease() {\n          \n          \n            \n                              script {\n          \n          \n            \n                                def curVer = mvnVersion()\n          \n          \n            \n                                sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n          \n          \n            \n                                def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n          \n          \n            \n                                if (isMajor == 0) {\n          \n          \n            \n                                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n          \n          \n            \n                                }\n          \n          \n            \n                              }\n          \n          \n            \n                              gitPush()\n          \n          \n            \n                            }\n          \n          \n            \n                          }", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417210847", "createdAt": "2020-04-29T10:20:49Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n+              }\n+              withGitRelease() {\n+                script {\n+                  def curVer = mvnVersion()\n+                  sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n+                  def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n+                  if (isMajor == 0) {\n+                    input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                  }\n+                }\n+                gitPush()\n+              } ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNTUyNg==", "bodyText": "Interesting. I had no problems in setting it directly when I was testing it locally but I agree that if we can use a context-based approach that it is much cleaner. Thanks for pointing this out. I wasn't familiar with withEnv.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417215526", "createdAt": "2020-04-29T10:29:54Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n+              }\n+              withGitRelease() {\n+                script {\n+                  def curVer = mvnVersion()\n+                  sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n+                  def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n+                  if (isMajor == 0) {\n+                    input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                  }\n+                }\n+                gitPush()\n+              } ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDg0Nw=="}, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTk0MDU2OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozMzo1NVrOGN48yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxODowNVrOGN6R6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNzczOQ==", "bodyText": "An issue with versions:set is that it creates a pom.xml.versionsBackup file for every pom.xml in the project.\nI think mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version} would be the better option.\nAlso, I don't see the new changes being committed in this step, is that correct?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417217739", "createdAt": "2020-04-29T10:33:55Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be87cdc1696b633db6f7c306e4dc7468f89a83e4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzOTUzMQ==", "bodyText": "Thanks, @felixbarny. I have updated the mvn call per your suggestion. I have also added a git commit. Let me know if it looks good to you.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417239531", "createdAt": "2020-04-29T11:18:05Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNzczOQ=="}, "originalCommit": {"oid": "be87cdc1696b633db6f7c306e4dc7468f89a83e4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTk1NDEwOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozODoxOVrOGN5FYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowODoxN1rOGN5_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxOTkzOA==", "bodyText": "Add a step that just prints a message like.\nStart the release job on the internal CI. Click proceed once the job has succeeded. Click cancel if the release has failed and manually undo the release.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417219938", "createdAt": "2020-04-29T10:38:19Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8a2b5c6ac5e7c3f8ac152421386d7b23efe3c2c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDkwNA==", "bodyText": "Good call! Step added.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417234904", "createdAt": "2020-04-29T11:08:17Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxOTkzOA=="}, "originalCommit": {"oid": "b8a2b5c6ac5e7c3f8ac152421386d7b23efe3c2c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjEwMDcyOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyNToyMVrOGN6fzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyNToyMVrOGN6fzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MzA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n          \n          \n            \n                                  description: 'We will update the project version in all pom.xml files. Set this to your desired <release-version>-SNAPSHOT (for example 1.2.3-SNAPSHOT if you want to release version 1.2.3).', name: 'New Version'", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417243084", "createdAt": "2020-04-29T11:25:21Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjEwODQyOnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyNzo0OVrOGN6kdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyNzo0OVrOGN6kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NDI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              name: \"Do you wish to update the version?\",\n          \n          \n            \n                              name: \"You are about to release version ${ver - '-SNAPSHOT'}. Do you wish to update the version?\",", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417244278", "createdAt": "2020-04-29T11:27:49Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjExNjY1OnYy", "diffSide": "RIGHT", "path": ".ci/release/Jenkinsfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMDoyMlrOGN6pKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTo1NjoxN1rOGN7c5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTQ4MA==", "bodyText": "don't forget to push :)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417245480", "createdAt": "2020-04-29T11:30:22Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version}\")\n+                withGitRelease() {\n+                  sh(script: \"git commit -a -m 'Version bump'\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0Njk4Ng==", "bodyText": "The reason I didn't push here is that it happens in the step shortly after. Do you think we should have a push here as well? I'm fine with either. :)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417246986", "createdAt": "2020-04-29T11:33:21Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version}\")\n+                withGitRelease() {\n+                  sh(script: \"git commit -a -m 'Version bump'\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTQ4MA=="}, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1NDMwNQ==", "bodyText": "If we don't push here, the internal CI doesn't see the changes", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417254305", "createdAt": "2020-04-29T11:47:36Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version}\")\n+                withGitRelease() {\n+                  sh(script: \"git commit -a -m 'Version bump'\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTQ4MA=="}, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1ODcyNQ==", "bodyText": "Ah! You're right of course. I'll make this change.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417258725", "createdAt": "2020-04-29T11:56:17Z", "author": {"login": "cachedout"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version}\")\n+                withGitRelease() {\n+                  sh(script: \"git commit -a -m 'Version bump'\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTQ4MA=="}, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 470, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}