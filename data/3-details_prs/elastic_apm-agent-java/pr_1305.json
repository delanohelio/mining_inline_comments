{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTg0MjM3", "number": 1305, "title": "add Spring Webflux server support", "bodyText": "What does this PR do?\nThis pull-request is an improvement on the #1221 community pull-request.\nGiven the large number of changes, it was simpler to open another PR than recycle #1221.\nFixes #60\nFeatures\nTest application:\n\navailable as an executable jar and also used for unit-testing instrumentation\nprovides both functional and annotated controllers endpoints\nexecutable with netty or tomcat as server, which allows to cover Webflux with or without Servlets\nprovides a client to call itself (based on Webflux client), thus using any third-party HTTP client is not necessary\n\nInstrumentation:\n\nWebflux server: covers both functional and annotated endpoints variants\nWebflux client: not covered yet, see #1306\nusing new plugin API and indy dispatcher.\nadds reactor instrumentation for context-propagation\n\nImplementation checklist\n\n provide context-propagation, maybe through reactor-core instrumentation\n test supported webflux/reactor versions\n performance benchmark to ensure minimal overhead\n in-depth allocation benchmark to estimate overhead (current implementation is expected to allocate a bit more).\n capture upstream transaction HTTP headers (if any) for context propagation\n\nChecklist\n\n This is a new plugin\n\n I have updated CHANGELOG.asciidoc\n My code follows the style guidelines of this project\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated CHANGELOG.asciidoc\n I have updated supported-technologies.asciidoc\n Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? Describe how you made sure that old, non-supported versions are not instrumented by accident.", "createdAt": "2020-07-22T15:14:58Z", "url": "https://github.com/elastic/apm-agent-java/pull/1305", "merged": true, "mergeCommit": {"oid": "36ff1f18db1c89ec9c2bb185035fa162ce6de9f9"}, "closed": true, "closedAt": "2021-05-28T07:32:13Z", "author": {"login": "SylvainJuge"}, "timelineItems": {"totalCount": 174, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABeDarhlAH2gAyNDU1MTg0MjM3OmJkMzQ4NjA3YTUyZWRkMmU4MGRlOWJkMjA0NDJmZmFhYTQyYjg0M2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABebHiw3gH2gAyNDU1MTg0MjM3Ojg2YWFmNmE4YjRjNDIwMjhmZWNiYmY3OTdlNDVjMjFjNWFiYjkxZWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd348607a52edd2e80de9bd20442ffaaa42b843f", "author": {"user": {"login": "dependabot[bot]", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bd348607a52edd2e80de9bd20442ffaaa42b843f", "committedDate": "2021-03-15T16:15:14Z", "message": "Bump json-schema-validator from 1.0.48 to 1.0.49 (#1670)\n\nBumps [json-schema-validator](https://github.com/networknt/json-schema-validator) from 1.0.48 to 1.0.49.\r\n- [Release notes](https://github.com/networknt/json-schema-validator/releases)\r\n- [Changelog](https://github.com/networknt/json-schema-validator/blob/master/CHANGELOG.md)\r\n- [Commits](https://github.com/networknt/json-schema-validator/compare/1.0.48...1.0.49)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09b326d62982602b7b8214f1f55767c10f55845", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e09b326d62982602b7b8214f1f55767c10f55845", "committedDate": "2021-03-15T16:15:14Z", "message": "Add support for OkHttp 4.4+ (#1672)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c951cd13be175c7447e8ed1a5743dd15d28adebc", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c951cd13be175c7447e8ed1a5743dd15d28adebc", "committedDate": "2021-03-15T16:15:14Z", "message": "[load-testing] silence tomcat to avoid verbose logs (#1668)\n\n* silence tomcat to avoid verbose logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfd2287b16d64ddd8030c1766e55eb81e7fb90d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/dbfd2287b16d64ddd8030c1766e55eb81e7fb90d", "committedDate": "2021-03-15T16:15:14Z", "message": "update async-profiler to 1.8.4 (#1678)\n\n* update async-profiler to 1.8.4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28d369d22e44111dfd2d14cc6431c94d56165bb", "author": {"user": {"login": "kuisathaverat", "name": "Ivan Fernandez Calvo"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b28d369d22e44111dfd2d14cc6431c94d56165bb", "committedDate": "2021-03-15T16:15:15Z", "message": "ci: delete workspace before checkout (#1681)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f49fe07e9151a277a53d59ec74258f61e1003a", "author": {"user": {"login": "kuisathaverat", "name": "Ivan Fernandez Calvo"}}, "url": "https://github.com/elastic/apm-agent-java/commit/71f49fe07e9151a277a53d59ec74258f61e1003a", "committedDate": "2021-03-15T16:15:15Z", "message": "ci: fix JJBB configuration (#1680)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd94587dcc3177719dc665941ef30d7b6872f4c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3fd94587dcc3177719dc665941ef30d7b6872f4c", "committedDate": "2021-03-15T16:15:15Z", "message": "Upgrading tested Elasticsearch version to 7.11 (#1683)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6e56106443b4da7b2c39274637595240b64ad2", "author": {"user": {"login": "v1v", "name": "Victor Martinez"}}, "url": "https://github.com/elastic/apm-agent-java/commit/bb6e56106443b4da7b2c39274637595240b64ad2", "committedDate": "2021-03-15T16:15:15Z", "message": "chore: enable stale bot for pull requests (#1679)\n\n* chore: enable stale bot for pull requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c8d8a75da54adb016df0acd3c65609f27048497", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/3c8d8a75da54adb016df0acd3c65609f27048497", "committedDate": "2021-03-15T16:15:15Z", "message": "Fix changelog: it's 2021"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50aeae21d4b80c2872ac282bacde6db4ddedb903", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/50aeae21d4b80c2872ac282bacde6db4ddedb903", "committedDate": "2021-03-15T16:15:15Z", "message": "fix IBM JVM support doc typo (#1684)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c02a0497fa97742b53cdcefdea78cacc72a9ac", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/29c02a0497fa97742b53cdcefdea78cacc72a9ac", "committedDate": "2021-03-15T16:15:15Z", "message": "[load-testing] clean app to remove old artifacts (#1682)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4afe28adf6f2b10bac194fda307e88c158ca8611", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4afe28adf6f2b10bac194fda307e88c158ca8611", "committedDate": "2021-03-15T16:15:15Z", "message": "Adding analysis info to see why deploy-snapshot job fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986b32ebaaffd5f4940773581448339f237eff18", "author": {"user": {"login": "dependabot[bot]", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/986b32ebaaffd5f4940773581448339f237eff18", "committedDate": "2021-03-15T16:15:15Z", "message": "Bump jctools-core from 3.2.0 to 3.3.0 (#1685)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1f87e6c86228636bf7a98a07215fbede003449", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5d1f87e6c86228636bf7a98a07215fbede003449", "committedDate": "2021-03-15T16:15:15Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "268187ba763fc038f9eb3fb14469269ada4fb542", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/268187ba763fc038f9eb3fb14469269ada4fb542", "committedDate": "2021-03-15T16:15:15Z", "message": "cleanup tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89075b3d5b7e8f1b306d95f4cd1938f1701107ad", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/89075b3d5b7e8f1b306d95f4cd1938f1701107ad", "committedDate": "2021-03-15T16:15:15Z", "message": "properly ignore SSE transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72242e9a7250e85abfb589b4c52d1fd25314e89d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/72242e9a7250e85abfb589b4c52d1fd25314e89d", "committedDate": "2021-03-15T16:15:15Z", "message": "add websocket to test app + make sure it's ignored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d1665a4f5b094b91b342e159f3ec394efc82f4", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/73d1665a4f5b094b91b342e159f3ec394efc82f4", "committedDate": "2021-03-15T16:15:15Z", "message": "add benchmark mode to test app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67b2952b262ddadbf3b2ce4ed827e5f9693db6c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d67b2952b262ddadbf3b2ce4ed827e5f9693db6c", "committedDate": "2021-03-15T16:15:15Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6840887e43a08dc53a6744b30098522a06fb0758", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6840887e43a08dc53a6744b30098522a06fb0758", "committedDate": "2021-03-15T17:06:02Z", "message": "fix verbose logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7100d77ceb9cc485ff2627ad48d4fbd1496e9b3a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7100d77ceb9cc485ff2627ad48d4fbd1496e9b3a", "committedDate": "2021-03-16T11:41:04Z", "message": "cleanup & remove dependency to reactor-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb15ca7e4f45a8f80e853b38007872cd1a203f91", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fb15ca7e4f45a8f80e853b38007872cd1a203f91", "committedDate": "2021-03-16T14:30:44Z", "message": "add few missing parts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2585bbcdf57f8bec64bbabdcfa2502d11a87ecfe", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2585bbcdf57f8bec64bbabdcfa2502d11a87ecfe", "committedDate": "2021-03-22T17:28:31Z", "message": "use in-flight storage for reactor/webflux collab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039ae9f7eb7947c4d511cb157771dbee80689e50", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/039ae9f7eb7947c4d511cb157771dbee80689e50", "committedDate": "2021-03-29T09:45:04Z", "message": "improved reference accounting for reactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae724d7fd73d5f559687f3916005a565e6e0b9e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4ae724d7fd73d5f559687f3916005a565e6e0b9e", "committedDate": "2021-03-29T13:57:41Z", "message": "create map for weak context storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6971d1e0c7ab50691d6a1bc2c6d4cc98ec78d214", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6971d1e0c7ab50691d6a1bc2c6d4cc98ec78d214", "committedDate": "2021-03-30T13:27:02Z", "message": "ensure proper test reliability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4d04d85336d21f12a66308cdf2b4a872b38bfd", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/da4d04d85336d21f12a66308cdf2b4a872b38bfd", "committedDate": "2021-03-31T12:51:28Z", "message": "attempt to reliably execute GC + expiration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00d788b69562b07ff670097c522f017a9fe0ccb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f00d788b69562b07ff670097c522f017a9fe0ccb", "committedDate": "2021-03-31T12:55:11Z", "message": "make logging slightly less verbose"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32e3b3a492e4301f9ad030abc391b3f76a8e0c7b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/32e3b3a492e4301f9ad030abc391b3f76a8e0c7b", "committedDate": "2021-04-01T08:55:22Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a4afa7718a3c50520841d7f8876269dfcc0093", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/71a4afa7718a3c50520841d7f8876269dfcc0093", "committedDate": "2021-04-01T09:44:23Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2MTEyNzI2", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-626112726", "createdAt": "2021-04-01T10:19:16Z", "commit": {"oid": "71a4afa7718a3c50520841d7f8876269dfcc0093"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMDoxOToxNlrOJBfZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMDoxOToxNlrOJBfZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU0MjczMA==", "bodyText": "allows to skip git commit plugin execution and still get a valid property", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r605542730", "createdAt": "2021-04-01T10:19:16Z", "author": {"login": "SylvainJuge"}, "path": "elastic-apm-agent/pom.xml", "diffHunk": "@@ -14,6 +14,9 @@\n     <properties>\n         <elastic.apm.agent>co.elastic.apm.agent.premain.AgentMain</elastic.apm.agent>\n         <apm-agent-parent.base.dir>${project.basedir}/..</apm-agent-parent.base.dir>\n+\n+        <!-- default value that will be overloaded through commit-id plugin -->\n+        <git.commit.id.abbrev>UNKNOWN</git.commit.id.abbrev>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a4afa7718a3c50520841d7f8876269dfcc0093"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2MTEzNjMw", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-626113630", "createdAt": "2021-04-01T10:20:18Z", "commit": {"oid": "71a4afa7718a3c50520841d7f8876269dfcc0093"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMDoyMDoxOVrOJBfbxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMDoyMDoxOVrOJBfbxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU0MzM2NA==", "bodyText": "not sure if it's worth having such a global version as most plugins use their own. We could align it in another PR if it makes sense.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r605543364", "createdAt": "2021-04-01T10:20:19Z", "author": {"login": "SylvainJuge"}, "path": "pom.xml", "diffHunk": "@@ -107,6 +107,7 @@\n         <version.log4j>2.12.1</version.log4j>\n         <version.log4j2-ecs-layout>1.0.1</version.log4j2-ecs-layout>\n         <version.spring>5.0.15.RELEASE</version.spring>\n+        <version.spring-boot>2.2.2.RELEASE</version.spring-boot>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a4afa7718a3c50520841d7f8876269dfcc0093"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc598933e80a0c853bfd256448d7768e7b18818", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8fc598933e80a0c853bfd256448d7768e7b18818", "committedDate": "2021-04-01T11:54:49Z", "message": "further cleanup & fix cucumber + ivy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "910d2244d7bbc87092b46cf56f4fc0a839f3007b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/910d2244d7bbc87092b46cf56f4fc0a839f3007b", "committedDate": "2021-04-01T14:06:50Z", "message": "thou shall not forget to pay tribute to javadoc gods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2fcc6395e05625b4a60c7a5045840fd1196423", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/be2fcc6395e05625b4a60c7a5045840fd1196423", "committedDate": "2021-04-06T08:13:42Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b60fd43ae8921c47ee70e1a3db98c1d40b7f3151", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b60fd43ae8921c47ee70e1a3db98c1d40b7f3151", "committedDate": "2021-04-06T09:08:22Z", "message": "fit new instrumentation/advice split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f91b0475010716ba39805cf3c5a6d4fd874f9b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/29f91b0475010716ba39805cf3c5a6d4fd874f9b", "committedDate": "2021-04-06T09:34:27Z", "message": "update generated doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/56467fbf868b035479e555548657a61212bdb1d4", "committedDate": "2021-04-06T13:05:23Z", "message": "avoid NPE when container startup fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/012af603ce314abff0e04183cfaf61b537cf5495", "committedDate": "2021-04-07T14:19:55Z", "message": "post-review comments & cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5OTkyODQ0", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-629992844", "createdAt": "2021-04-07T13:16:59Z", "commit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QxMzoxNjo1OVrOJEcqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QxNDo0NzowM1rOJEhnJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY0MzY3MA==", "bodyText": "[minor] Not clear - framework types are not visible from the boot CL", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608643670", "createdAt": "2021-04-07T13:16:59Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -481,42 +481,65 @@ static void validateAdvice(Class<?> adviceClass) {\n \n         TypePool pool = new TypePool.Default.WithLazyResolution(TypePool.CacheProvider.NoOp.INSTANCE, ClassFileLocator.ForClassLoader.of(classLoader), TypePool.Default.ReaderMode.FAST);\n         TypeDescription typeDescription = pool.describe(adviceClassName).resolve();\n+\n         for (MethodDescription.InDefinedShape enterAdvice : typeDescription.getDeclaredMethods().filter(isStatic().and(isAnnotatedWith(Advice.OnMethodEnter.class)))) {\n-            validateAdviceReturnAndParameterTypes(enterAdvice);\n+            validateAdviceReturnAndParameterTypes(enterAdvice, adviceClassName);\n \n             for (AnnotationDescription enter : enterAdvice.getDeclaredAnnotations().filter(ElementMatchers.annotationType(Advice.OnMethodEnter.class))) {\n-                if (enter.prepare(Advice.OnMethodEnter.class).load().inline()) {\n-                    throw new IllegalStateException(String.format(\"Indy-dispatched advice %s#%s has to be declared with inline=false\", adviceClassName, enterAdvice.getName()));\n-                }\n+                checkInline(enterAdvice, adviceClassName, enter.prepare(Advice.OnMethodEnter.class).load().inline());\n             }\n         }\n         for (MethodDescription.InDefinedShape exitAdvice : typeDescription.getDeclaredMethods().filter(isStatic().and(isAnnotatedWith(Advice.OnMethodExit.class)))) {\n-            validateAdviceReturnAndParameterTypes(exitAdvice);\n+            validateAdviceReturnAndParameterTypes(exitAdvice, adviceClassName);\n             if (exitAdvice.getReturnType().asRawType().getTypeName().startsWith(\"co.elastic.apm\")) {\n                 throw new IllegalStateException(\"Advice return type must be visible from the bootstrap class loader and must not be an agent type.\");\n             }\n             for (AnnotationDescription exit : exitAdvice.getDeclaredAnnotations().filter(ElementMatchers.annotationType(Advice.OnMethodExit.class))) {\n-                if (exit.prepare(Advice.OnMethodExit.class).load().inline()) {\n-                    throw new IllegalStateException(String.format(\"Indy-dispatched advice %s#%s has to be declared with inline=false\", adviceClassName, exitAdvice.getName()));\n-                }\n+                checkInline(exitAdvice, adviceClassName, exit.prepare(Advice.OnMethodExit.class).load().inline());\n             }\n         }\n         if (!(classLoader instanceof ExternalPluginClassLoader) && adviceClassName.startsWith(\"co.elastic.apm.agent.\") && adviceClassName.split(\"\\\\.\").length > 6) {\n             throw new IllegalStateException(String.format(\n                 \"Invalid Advice class - %s - Indy-dispatched advice class must be at the root of the instrumentation plugin.\",\n                 adviceClassName)\n             );\n+\n         }\n     }\n \n-    private static void validateAdviceReturnAndParameterTypes(MethodDescription.InDefinedShape advice) {\n-        if (advice.getReturnType().asRawType().getTypeName().startsWith(\"co.elastic.apm\")) {\n-            throw new IllegalStateException(\"Advice return type must not be an agent type: \" + advice.toGenericString());\n+    private static void checkInline(MethodDescription.InDefinedShape advice, String adviceClassName, boolean isInline){\n+        if (isInline) {\n+            throw new IllegalStateException(String.format(\"Indy-dispatched advice %s#%s has to be declared with inline=false\", adviceClassName, advice.getName()));\n+        } else if (!Modifier.isPublic(advice.getModifiers())) {\n+            throw new IllegalStateException(String.format(\"Indy-dispatched advice %s#%s has to be declared public\", adviceClassName, advice.getName()));\n         }\n-        for (ParameterDescription.InDefinedShape parameter : advice.getParameters()) {\n-            if (parameter.getType().asRawType().getTypeName().startsWith(\"co.elastic.apm\")) {\n-                throw new IllegalStateException(\"Advice parameters must not contain an agent type: \" + advice.toGenericString());\n+    }\n+\n+    private static void validateAdviceReturnAndParameterTypes(MethodDescription.InDefinedShape advice, String adviceClass) {\n+        String adviceMethod = advice.getInternalName();\n+        try {\n+            checkNotAgentType(advice.getReturnType(), \"return type\", adviceClass, adviceMethod);\n+\n+            for (ParameterDescription.InDefinedShape parameter : advice.getParameters()) {\n+                checkNotAgentType(parameter.getType(), \"parameter\", adviceClass, adviceMethod);\n+\n+                AnnotationDescription.Loadable<Advice.Return> returnAnnotation = parameter.getDeclaredAnnotations().ofType(Advice.Return.class);\n+                if (returnAnnotation != null && !returnAnnotation.load().readOnly()) {\n+                    throw new IllegalStateException(\"Advice parameter must not use '@Advice.Return(readOnly=false)', use @AssignTo.Return instead\");\n+                }\n             }\n+        } catch (Exception e) {\n+            // Because types are lazily resolved, unexpected things are expected\n+            throw new IllegalStateException(String.format(\"unable to validate advice defined in %s#%s\", adviceClass, adviceMethod), e);\n+        }\n+    }\n+\n+    private static void checkNotAgentType(TypeDescription.Generic type, String description, String adviceClass, String adviceMethod) {\n+        // we have to use 'raw' type to avoid trying to resolve classes that are not visible in bootstrap classloader\n+        // for example, a plugin may use framework types in advice signature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY0OTk2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Updates full URL from current state of {@literal this}.\n          \n          \n            \n                 * Updates full URL from current state of {@literal this}. Must be called after all other Url fields are set.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608649964", "createdAt": "2021-04-07T13:24:21Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java", "diffHunk": "@@ -86,6 +86,36 @@ public StringBuilder getFull() {\n         return full;\n     }\n \n+    /**\n+     * Updates full URL from current state of {@literal this}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY1MDE0OQ==", "bodyText": "[minor]", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608650149", "createdAt": "2021-04-07T13:24:34Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java", "diffHunk": "@@ -86,6 +86,36 @@ public StringBuilder getFull() {\n         return full;\n     }\n \n+    /**\n+     * Updates full URL from current state of {@literal this}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY0OTk2NA=="}, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY1NzY2Nw==", "bodyText": "What's the benefit? This adds allocation in serialization (Integer.toString).", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608657667", "createdAt": "2021-04-07T13:33:09Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java", "diffHunk": "@@ -108,17 +138,17 @@ public Url withHostname(@Nullable String hostname) {\n     }\n \n     /**\n-     * The port of the request, e.g. '443'\n+     * The port of the request, e.g. 443\n      */\n-    public StringBuilder getPort() {\n+    public int getPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY2MzI2Mg==", "bodyText": "[minor] you can check ref count after each clear()", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608663262", "createdAt": "2021-04-07T13:39:22Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/SpanConcurrentHashMapTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.context.AbstractContext;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+class SpanConcurrentHashMapTest {\n+\n+    @Nullable\n+    private Object key;\n+\n+    @Test\n+    void putRemove() {\n+        TestSpan testSpan = new TestSpan();\n+        checkRefCount(testSpan, 0);\n+\n+        key = new Object();\n+        SpanConcurrentHashMap<Object, TestSpan> map = new SpanConcurrentHashMap<>();\n+        map.put(key, testSpan);\n+\n+        checkRefCount(testSpan, 1);\n+\n+        assertThat(map.remove(key)).isSameAs(testSpan);\n+        checkRefCount(testSpan, 0);\n+\n+        // remove when already removed should not decrement further\n+        assertThat(map.remove(key)).isNull();\n+        checkRefCount(testSpan, 0);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(PutOperation.class)\n+    void putTwice(PutOperation operation) {\n+        TestSpan testSpan = new TestSpan();\n+        key = new Object();\n+        SpanConcurrentHashMap<Object, TestSpan> map = new SpanConcurrentHashMap<>();\n+\n+        checkRefCount(testSpan, 0);\n+\n+        operation.execute(map, key, testSpan);\n+\n+        checkRefCount(testSpan, 1);\n+\n+        operation.execute(map, key, testSpan);\n+\n+        checkRefCount(testSpan, 1);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(PutOperation.class)\n+    void swapValues(PutOperation operation) {\n+        TestSpan ts1 = new TestSpan();\n+        TestSpan ts2 = new TestSpan();\n+\n+        key = new Object();\n+        SpanConcurrentHashMap<Object, TestSpan> map = new SpanConcurrentHashMap<>();\n+\n+        operation.execute(map, key, ts1);\n+        operation.execute(map, key, ts2);\n+\n+        assertThat(map).hasSize(1);\n+\n+        checkRefCount(ts1, 0);\n+        checkRefCount(ts2, 1);\n+    }\n+\n+    private enum PutOperation {\n+        put,\n+        putIfAbsent;\n+\n+        void execute(ConcurrentHashMap<Object, TestSpan> map, Object key, TestSpan value) {\n+            switch (this) {\n+                case put:\n+                    map.put(key, value);\n+                    break;\n+                case putIfAbsent:\n+                    map.putIfAbsent(key, value);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void clear() {\n+        SpanConcurrentHashMap<Object, TestSpan> map = new SpanConcurrentHashMap<>();\n+\n+        List<AbstractSpan<?>> list = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            TestSpan span = new TestSpan();\n+            list.add(span);\n+            map.put(i, span);\n+            checkRefCount(span, 1);\n+        }\n+\n+        // clear twice, should only decrement once\n+        map.clear();\n+        map.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY2NjM2Nw==", "bodyText": "Suggestion: move this factory method to WeakMapSupplier", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608666367", "createdAt": "2021-04-07T13:42:55Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/SpanConcurrentHashMap.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.sdk.weakmap.NullSafeWeakConcurrentMap;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.AbstractWeakConcurrentMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Hash map dedicated to storage of in-flight spans and transactions, reference count is being incremented/decremented\n+ * when entry is added/removed. Usage of this map is intended for providing GC-based storage of context associated\n+ * to a framework-level object key, when the latter is collected by GC it allows to decrement and then recycle the\n+ * span/transaction.\n+ *\n+ * @param <K> key type\n+ * @param <V> context type\n+ */\n+public class SpanConcurrentHashMap<K, V extends AbstractSpan<?>> extends ConcurrentHashMap<K, V> {\n+\n+    public static <K, V extends AbstractSpan<?>> WeakConcurrentMap<K, V> createWeakMap() {\n+        SpanConcurrentHashMap<AbstractWeakConcurrentMap.WeakKey<K>, V> map = new SpanConcurrentHashMap<>();\n+        WeakConcurrentMap<K, V> result = new NullSafeWeakConcurrentMap<>(false, map);\n+        WeakMapSupplier.registerMap(result);\n+        return result;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56467fbf868b035479e555548657a61212bdb1d4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcwMzYwMA==", "bodyText": "On the one hand it uses GlobalVariables, but on the other hand it registers the instrumentation class, which is loaded (in this context) buy the plugin CL, so effectively you have an entry-per-plugin load. Is that what you wanted to achieve? If so, I think a simple AtomicBoolean will achieve the same, as there will be one TracedSubscriber class per indy plugin CL.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608703600", "createdAt": "2021-04-07T14:23:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-reactor-plugin/src/main/java/co/elastic/apm/agent/reactor/TracedSubscriber.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.reactor;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.sdk.state.GlobalVariables;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+import javax.annotation.Nullable;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+public class TracedSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TracedSubscriber.class);\n+\n+    private static final AtomicBoolean isRegistered = GlobalVariables.get(ReactorInstrumentation.class, \"reactor-hook-enabled\", new AtomicBoolean(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcxMTEzMA==", "bodyText": "[reminder] it allocates three objects. If there is an easy way to pool some and only allocate through the lift operation, then that could be nice. I am not sure it worth terrible complication of the code and the effort though. Maybe see in benchmarks if it makes sense.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608711130", "createdAt": "2021-04-07T14:31:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-reactor-plugin/src/main/java/co/elastic/apm/agent/reactor/TracedSubscriber.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.reactor;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.sdk.state.GlobalVariables;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+import javax.annotation.Nullable;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+public class TracedSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TracedSubscriber.class);\n+\n+    private static final AtomicBoolean isRegistered = GlobalVariables.get(ReactorInstrumentation.class, \"reactor-hook-enabled\", new AtomicBoolean(false));\n+\n+    private static final WeakConcurrentMap<TracedSubscriber<?>, AbstractSpan<?>> contextMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private static final String HOOK_KEY = \"elastic-apm\";\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final Tracer tracer;\n+\n+    TracedSubscriber(CoreSubscriber<? super T> subscriber, Tracer tracer, AbstractSpan<?> context) {\n+        this.subscriber = subscriber;\n+        this.tracer = tracer;\n+        contextMap.put(this, context);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscriber scheduler\".\n+     *\n+     * @param s subscription\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        AbstractSpan<?> context = getContext();\n+        boolean hasActivated = doEnter(\"onSubscribe\", context);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(hasActivated, \"onSubscribe\", context);\n+            discardIf(thrown != null);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\"\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        AbstractSpan<?> context = getContext();\n+        boolean hasActivated = doEnter(\"onNext\", context);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(hasActivated, \"onNext\", context);\n+            discardIf(thrown != null);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\"\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        AbstractSpan<?> context = getContext();\n+        boolean hasActivated = doEnter(\"onError\", context);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            doExit(hasActivated, \"onError\", context);\n+            discardIf(true);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\"\n+     */\n+    @Override\n+    public void onComplete() {\n+        AbstractSpan<?> context = getContext();\n+        boolean hasActivated = doEnter(\"onComplete\", context);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            doExit(hasActivated, \"onComplete\", context);\n+            discardIf(true);\n+        }\n+    }\n+\n+    /**\n+     * Wrapped method entry\n+     *\n+     * @param method  method name (only for debugging)\n+     * @param context context\n+     * @return {@literal true} if context has been activated\n+     */\n+    private boolean doEnter(String method, @Nullable AbstractSpan<?> context) {\n+        debugTrace(true, method, context);\n+\n+        if (context == null || tracer.getActive() == context) {\n+            // already activated or discarded\n+            return false;\n+        }\n+\n+        context.activate();\n+        return true;\n+    }\n+\n+    /**\n+     * Wrapped method exit\n+     *\n+     * @param deactivate {@literal true} to de-activate due to a previous activation, no-op otherwise\n+     * @param method     method name (only for debugging)\n+     * @param context    context\n+     */\n+    private void doExit(boolean deactivate, String method, @Nullable AbstractSpan<?> context) {\n+        debugTrace(false, method, context);\n+\n+        if (context == null || !deactivate) {\n+            return;\n+        }\n+\n+        if (context != tracer.getActive()) {\n+            // don't attempt to deactivate if not the active one\n+            return;\n+        }\n+\n+        // the current context has been activated on enter thus must be the active one\n+        context.deactivate();\n+    }\n+\n+    private void discardIf(boolean condition) {\n+        if (!condition) {\n+            return;\n+        }\n+        contextMap.remove(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable AbstractSpan<?> context) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} reactor {} {}\", isEnter ? \">>\" : \"<<\", method, context);\n+    }\n+\n+    /**\n+     * @return context associated with {@literal this}.\n+     */\n+    @Nullable\n+    private AbstractSpan<?> getContext() {\n+        return contextMap.get(this);\n+    }\n+\n+    /**\n+     * Register active context propagation\n+     *\n+     * @param tracer tracer\n+     */\n+    static void registerHooks(Tracer tracer) {\n+        if (isRegistered.getAndSet(true)) {\n+            return;\n+        }\n+        Hooks.onEachOperator(HOOK_KEY, wrapOperators(tracer));\n+    }\n+\n+    /**\n+     * Unregister active context propagation. Should only be used for testing\n+     */\n+    static void unregisterHooks() {\n+        if (!isRegistered.getAndSet(false)) {\n+            return;\n+        }\n+        Hooks.resetOnEachOperator(HOOK_KEY);\n+    }\n+\n+    /**\n+     * @return true if hook is registered. Should only be used for testing\n+     */\n+    static boolean isHookRegistered() {\n+        return isRegistered.get();\n+    }\n+\n+    private static <X> Function<? super Publisher<X>, ? extends Publisher<X>> wrapOperators(final Tracer tracer) {\n+        //noinspection Convert2Lambda,rawtypes,Convert2Diamond\n+        return Operators.liftPublisher(new BiFunction<Publisher, CoreSubscriber<? super X>, CoreSubscriber<? super X>>() {\n+            @Override\n+            public CoreSubscriber<? super X> apply(Publisher publisher, CoreSubscriber<? super X> subscriber) {\n+                // don't wrap known #error #just #empty as they have instantaneous execution\n+                if (publisher instanceof Fuseable.ScalarCallable) {\n+                    log.trace(\"skip wrapping {}\", subscriber.toString());\n+                    return subscriber;\n+                }\n+\n+                AbstractSpan<?> active = tracer.getActive();\n+\n+                if (active == null) {\n+                    // no active context, we have nothing to wrap\n+                    return subscriber;\n+                }\n+\n+                log.trace(\"wrapping subscriber {} publisher {} with active span/transaction {}\", subscriber.toString(), publisher, active);\n+\n+                return new TracedSubscriber<>(subscriber, tracer, active);\n+            }\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcxNDEzOA==", "bodyText": "It's a big one. Would you feel safer to start as experimental for a couple of releases?\nI was a bit sorry for not starting the log shading as such.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608714138", "createdAt": "2021-04-07T14:35:23Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-reactor-plugin/src/main/java/co/elastic/apm/agent/reactor/ReactorInstrumentation.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.reactor;\n+\n+import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+/**\n+ * Instruments Mono/Flux to automatically register context-propagation hook\n+ * <ul>\n+ *     <li>{@link reactor.core.publisher.Mono#onAssembly}</li>\n+ *     <li>{@link reactor.core.publisher.Flux#onAssembly}</li>\n+ * </ul>\n+ */\n+@SuppressWarnings(\"JavadocReference\")\n+public class ReactorInstrumentation extends TracerAwareInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"reactor.core.publisher.Mono\")\n+            .or(named(\"reactor.core.publisher.Flux\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return isStatic().and(named(\"onAssembly\"));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"reactor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcxNTcwMA==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608715700", "createdAt": "2021-04-07T14:37:07Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Spring WebFlux plugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcxODk0Mg==", "bodyText": "Extract to a separate advice class", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608718942", "createdAt": "2021-04-07T14:40:35Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-reactor-plugin/src/main/java/co/elastic/apm/agent/reactor/ReactorInstrumentation.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.reactor;\n+\n+import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+/**\n+ * Instruments Mono/Flux to automatically register context-propagation hook\n+ * <ul>\n+ *     <li>{@link reactor.core.publisher.Mono#onAssembly}</li>\n+ *     <li>{@link reactor.core.publisher.Flux#onAssembly}</li>\n+ * </ul>\n+ */\n+@SuppressWarnings(\"JavadocReference\")\n+public class ReactorInstrumentation extends TracerAwareInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"reactor.core.publisher.Mono\")\n+            .or(named(\"reactor.core.publisher.Flux\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return isStatic().and(named(\"onAssembly\"));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"reactor\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static void onEnter() {\n+        TracedSubscriber.registerHooks(tracer);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODcyNDc3Mw==", "bodyText": "All these dependencies should not be in the instrumentation class, which is loaded early by the agent CL. Please extract to a helper class and make sure all instrumentations do not contain improper dependencies.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r608724773", "createdAt": "2021-04-07T14:47:03Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/WebFluxInstrumentation.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.server.reactive.AbstractServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Operators;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.function.BiFunction;\n+\n+public abstract class WebFluxInstrumentation extends TracerAwareInstrumentation {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WebFluxInstrumentation.class);\n+\n+    public static final String TRANSACTION_ATTRIBUTE = WebFluxInstrumentation.class.getName() + \".transaction\";\n+    public static final String ANNOTATED_BEAN_NAME_ATTRIBUTE = WebFluxInstrumentation.class.getName() + \".bean_name\";\n+    public static final String ANNOTATED_METHOD_NAME_ATTRIBUTE = WebFluxInstrumentation.class.getName() + \".method_name\";\n+    private static final String SERVLET_TRANSACTION = WebFluxInstrumentation.class.getName() + \".servlet_transaction\";\n+\n+    public static final String SSE_EVENT_CLASS = \"org.springframework.http.codec.ServerSentEvent\";\n+\n+    @Override\n+    public final Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"spring-webflux\");\n+    }\n+\n+    @Nullable\n+    public static Transaction getOrCreateTransaction(Class<?> clazz, ServerWebExchange exchange) {\n+\n+        Transaction transaction = getServletTransaction(exchange);\n+        boolean fromServlet = transaction != null;\n+\n+        if (!fromServlet) {\n+            transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+        }\n+\n+        if (transaction == null) {\n+            return null;\n+        }\n+\n+        transaction.withType(\"request\").activate();\n+\n+        // store transaction in exchange to make it easy to retrieve from other handlers\n+        exchange.getAttributes().put(TRANSACTION_ATTRIBUTE, transaction);\n+\n+        exchange.getAttributes().put(SERVLET_TRANSACTION, fromServlet);\n+\n+        return transaction;\n+    }\n+\n+    public static boolean isServletTransaction(ServerWebExchange exchange) {\n+        return Boolean.TRUE == exchange.getAttributes().get(SERVLET_TRANSACTION);\n+    }\n+\n+    @Nullable\n+    private static Transaction getServletTransaction(ServerWebExchange exchange) {\n+        // see ServletHttpHandlerAdapter and sub-classes for implementation details\n+\n+        // While the active transaction is the one created by Servlet, it would rely on the fact that we are on the\n+        // same thread as the one that created the transaction, which is an implementation detail. While not really\n+        // elegant, this solution seems the most reliable for now.\n+        Transaction transaction = null;\n+        try {\n+            ServerHttpRequest exchangeRequest = exchange.getRequest();\n+            if (exchangeRequest instanceof AbstractServerHttpRequest) {\n+                Object nativeRequest = ((AbstractServerHttpRequest) exchangeRequest).getNativeRequest();\n+                if (nativeRequest instanceof HttpServletRequest) {\n+                    transaction = (Transaction) ((HttpServletRequest) nativeRequest)\n+                        // adding a dependency to servlet instrumentation plugin is not worth for such a simple string\n+                        // but it's fine as long as we have tests for this\n+                        .getAttribute(\"co.elastic.apm.agent.servlet.ServletApiAdvice.transaction\");\n+                }\n+            }\n+        } catch (Throwable ignored) {\n+            return null;\n+        }\n+        return transaction;\n+    }\n+\n+    public static <T> Mono<T> wrapDispatcher(Mono<T> mono, Transaction transaction, ServerWebExchange exchange) {\n+        return doWrap(mono, transaction, exchange, \"webflux-dispatcher\");\n+    }\n+\n+    public static <T> Mono<T> wrapHandlerAdapter(Mono<T> mono, Transaction transaction, ServerWebExchange exchange) {\n+        return doWrap(mono, transaction, exchange, \"webflux-handler-adapter\");\n+    }\n+\n+    private static <T> Mono<T> doWrap(Mono<T> mono, final Transaction transaction, final ServerWebExchange exchange, final String description) {\n+        //noinspection Convert2Lambda,rawtypes,Convert2Diamond,ReactiveStreamsUnusedPublisher\n+        mono = mono.transform(Operators.liftPublisher(new BiFunction<Publisher, CoreSubscriber<? super T>, CoreSubscriber<? super T>>() {\n+            @Override // liftPublisher too (or whole transform param)\n+            public CoreSubscriber<? super T> apply(Publisher publisher, CoreSubscriber<? super T> subscriber) {\n+                log.trace(\"wrapping {} subscriber with transaction {}\", description, transaction);\n+\n+                // If there is already an active transaction, it's tempting to avoid wrapping as the context propagation\n+                // would be already provided through reactor instrumentation. However, we can't as the transaction\n+                // name would not be properly set to match Webflux annotated controllers/router definitions.\n+                return new TransactionAwareSubscriber<>(subscriber, tracer, transaction, exchange, description);\n+            }\n+        }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbb09c463c2a31d7f94b1f482730344e3af7354", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1fbb09c463c2a31d7f94b1f482730344e3af7354", "committedDate": "2021-04-08T14:07:55Z", "message": "clarify comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c733bd4d5df50f4e150cc2636cf0ee49d0cd3af", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8c733bd4d5df50f4e150cc2636cf0ee49d0cd3af", "committedDate": "2021-04-08T14:21:13Z", "message": "only allocate for url.port for compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe12943d3df8a4b486fa8e33e731ca8893575b9", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bfe12943d3df8a4b486fa8e33e731ca8893575b9", "committedDate": "2021-04-08T14:29:35Z", "message": "improve ref count checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f900315c4e8633ca7f8c97bf36e8e34059744e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/08f900315c4e8633ca7f8c97bf36e8e34059744e", "committedDate": "2021-04-08T14:53:56Z", "message": "few other minor changes & comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMxNTAwMjcy", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-631500272", "createdAt": "2021-04-08T14:55:38Z", "commit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOFQxNDo1NTozOFrOJFirJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOFQxNDo1NTozOFrOJFirJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTc5MDc1OA==", "bodyText": "We might find a better solution to avoid duplication of common plugin test dependencies, but it would be better handled in a separate cleanup PR.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r609790758", "createdAt": "2021-04-08T14:55:38Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-kafka-plugin/apm-kafka-headers-plugin/pom.xml", "diffHunk": "@@ -27,5 +27,10 @@\n             <artifactId>apm-kafka-base-plugin</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.ivy</groupId>\n+            <artifactId>ivy</artifactId>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012af603ce314abff0e04183cfaf61b537cf5495"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b6164bd4b89b2ff1f842173cb3e4331dd45ff0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/44b6164bd4b89b2ff1f842173cb3e4331dd45ff0", "committedDate": "2021-04-08T14:59:00Z", "message": "cleanup readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a99f8771c1976afd8d5fce21fdca87bcbb4afc", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c1a99f8771c1976afd8d5fce21fdca87bcbb4afc", "committedDate": "2021-04-19T10:03:08Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222cf4ec16ab26ab9fcdf9022e114a0bb3909532", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/222cf4ec16ab26ab9fcdf9022e114a0bb3909532", "committedDate": "2021-04-19T11:48:58Z", "message": "make webflux experimental"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7af2fc1309f872895ada85e6b861fa7321b68c34", "committedDate": "2021-04-22T09:20:38Z", "message": "move stuff to helper class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ0NjM2MDE3", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-644636017", "createdAt": "2021-04-26T12:55:33Z", "commit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMjo1NTozM1rOJPiL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxNDoyNjo0MFrOJPnHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDI2ODUwMw==", "bodyText": "Is this safe to assume javax.servlet classes are available? While it is wrapped with try-catch, this may fail linkage if not occurring lazily enough.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620268503", "createdAt": "2021-04-26T12:55:33Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/WebfluxHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.server.reactive.AbstractServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Operators;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.function.BiFunction;\n+\n+public class WebfluxHelper {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WebfluxHelper.class);\n+\n+    public static final String TRANSACTION_ATTRIBUTE = WebfluxHelper.class.getName() + \".transaction\";\n+    public static final String ANNOTATED_BEAN_NAME_ATTRIBUTE = WebfluxHelper.class.getName() + \".bean_name\";\n+    public static final String ANNOTATED_METHOD_NAME_ATTRIBUTE = WebfluxHelper.class.getName() + \".method_name\";\n+    private static final String SERVLET_TRANSACTION = WebfluxHelper.class.getName() + \".servlet_transaction\";\n+\n+    public static final String SSE_EVENT_CLASS = \"org.springframework.http.codec.ServerSentEvent\";\n+\n+    @Nullable\n+    public static Transaction getOrCreateTransaction(Tracer tracer, Class<?> clazz, ServerWebExchange exchange) {\n+\n+        Transaction transaction = getServletTransaction(exchange);\n+        boolean fromServlet = transaction != null;\n+\n+        if (!fromServlet) {\n+            transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+        }\n+\n+        if (transaction == null) {\n+            return null;\n+        }\n+\n+        transaction.withType(\"request\").activate();\n+\n+        // store transaction in exchange to make it easy to retrieve from other handlers\n+        exchange.getAttributes().put(TRANSACTION_ATTRIBUTE, transaction);\n+\n+        exchange.getAttributes().put(SERVLET_TRANSACTION, fromServlet);\n+\n+        return transaction;\n+    }\n+\n+    public static boolean isServletTransaction(ServerWebExchange exchange) {\n+        return Boolean.TRUE == exchange.getAttributes().get(SERVLET_TRANSACTION);\n+    }\n+\n+    @Nullable\n+    private static Transaction getServletTransaction(ServerWebExchange exchange) {\n+        // see ServletHttpHandlerAdapter and sub-classes for implementation details\n+\n+        // While the active transaction is the one created by Servlet, it would rely on the fact that we are on the\n+        // same thread as the one that created the transaction, which is an implementation detail. While not really\n+        // elegant, this solution seems the most reliable for now.\n+        Transaction transaction = null;\n+        try {\n+            ServerHttpRequest exchangeRequest = exchange.getRequest();\n+            if (exchangeRequest instanceof AbstractServerHttpRequest) {\n+                Object nativeRequest = ((AbstractServerHttpRequest) exchangeRequest).getNativeRequest();\n+                if (nativeRequest instanceof HttpServletRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDI3MjA4MQ==", "bodyText": "Can we rely on this to be provided?", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620272081", "createdAt": "2021-04-26T12:59:43Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>co.elastic.apm</groupId>\n+        <artifactId>apm-spring-webflux</artifactId>\n+        <version>1.22.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-spring-webflux-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <!-- for licence header plugin -->\n+        <apm-agent-parent.base.dir>${project.basedir}/../../..</apm-agent-parent.base.dir>\n+\n+        <animal.sniffer.skip>true</animal.sniffer.skip>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+            <version>${version.spring}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-webflux</artifactId>\n+            <version>${version.spring}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>javax.servlet-api</artifactId>\n+            <version>3.1.0</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDI3MjQ3NQ==", "bodyText": "[minor] - not required", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620272475", "createdAt": "2021-04-26T13:00:11Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/WebfluxHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.server.reactive.AbstractServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Operators;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.function.BiFunction;\n+\n+public class WebfluxHelper {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WebfluxHelper.class);\n+\n+    public static final String TRANSACTION_ATTRIBUTE = WebfluxHelper.class.getName() + \".transaction\";\n+    public static final String ANNOTATED_BEAN_NAME_ATTRIBUTE = WebfluxHelper.class.getName() + \".bean_name\";\n+    public static final String ANNOTATED_METHOD_NAME_ATTRIBUTE = WebfluxHelper.class.getName() + \".method_name\";\n+    private static final String SERVLET_TRANSACTION = WebfluxHelper.class.getName() + \".servlet_transaction\";\n+\n+    public static final String SSE_EVENT_CLASS = \"org.springframework.http.codec.ServerSentEvent\";\n+\n+    @Nullable\n+    public static Transaction getOrCreateTransaction(Tracer tracer, Class<?> clazz, ServerWebExchange exchange) {\n+\n+        Transaction transaction = getServletTransaction(exchange);\n+        boolean fromServlet = transaction != null;\n+\n+        if (!fromServlet) {\n+            transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+        }\n+\n+        if (transaction == null) {\n+            return null;\n+        }\n+\n+        transaction.withType(\"request\").activate();\n+\n+        // store transaction in exchange to make it easy to retrieve from other handlers\n+        exchange.getAttributes().put(TRANSACTION_ATTRIBUTE, transaction);\n+\n+        exchange.getAttributes().put(SERVLET_TRANSACTION, fromServlet);\n+\n+        return transaction;\n+    }\n+\n+    public static boolean isServletTransaction(ServerWebExchange exchange) {\n+        return Boolean.TRUE == exchange.getAttributes().get(SERVLET_TRANSACTION);\n+    }\n+\n+    @Nullable\n+    private static Transaction getServletTransaction(ServerWebExchange exchange) {\n+        // see ServletHttpHandlerAdapter and sub-classes for implementation details\n+\n+        // While the active transaction is the one created by Servlet, it would rely on the fact that we are on the\n+        // same thread as the one that created the transaction, which is an implementation detail. While not really\n+        // elegant, this solution seems the most reliable for now.\n+        Transaction transaction = null;\n+        try {\n+            ServerHttpRequest exchangeRequest = exchange.getRequest();\n+            if (exchangeRequest instanceof AbstractServerHttpRequest) {\n+                Object nativeRequest = ((AbstractServerHttpRequest) exchangeRequest).getNativeRequest();\n+                if (nativeRequest instanceof HttpServletRequest) {\n+                    transaction = (Transaction) ((HttpServletRequest) nativeRequest)\n+                        // adding a dependency to servlet instrumentation plugin is not worth for such a simple string\n+                        // but it's fine as long as we have tests for this\n+                        .getAttribute(\"co.elastic.apm.agent.servlet.ServletApiAdvice.transaction\");\n+                }\n+            }\n+        } catch (Throwable ignored) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDI3OTE0NQ==", "bodyText": "[minor] Would be a bit simpler to do this computation in HandlerAdapterInstrumentation and store only one attribute.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620279145", "createdAt": "2021-04-26T13:08:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/TransactionAwareSubscriber.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.context.Request;\n+import co.elastic.apm.agent.impl.context.Response;\n+import co.elastic.apm.agent.impl.context.web.ResultUtil;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import co.elastic.apm.agent.util.PotentiallyMultiValuedMap;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerMapping;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n+import reactor.core.CoreSubscriber;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.impl.transaction.AbstractSpan.PRIO_HIGH_LEVEL_FRAMEWORK;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.MATCHING_PATTERN_ATTRIBUTE;\n+\n+/**\n+ * Transaction-aware subscriber that will (optionally) activate transaction and terminate it on error or completion.\n+ *\n+ * @param <T>\n+ */\n+class TransactionAwareSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TransactionAwareSubscriber.class);\n+\n+    private static final WeakConcurrentMap<HandlerMethod, Boolean> ignoredHandlerMethods = WeakMapSupplier.createMap();\n+\n+    private static final WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> transactionMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final ServerWebExchange exchange;\n+\n+    private final String description;\n+\n+    private final Tracer tracer;\n+\n+    /**\n+     * {@literal true} when transaction was activated on subscription\n+     */\n+    private boolean activatedOnSubscribe = false;\n+\n+    /**\n+     * @param subscriber  subscriber to wrap\n+     * @param transaction transaction\n+     * @param exchange    server web exchange\n+     * @param description human-readable description to make debugging easier\n+     */\n+    TransactionAwareSubscriber(CoreSubscriber<? super T> subscriber,\n+                               Tracer tracer,\n+                               Transaction transaction,\n+                               ServerWebExchange exchange,\n+                               String description) {\n+\n+        this.subscriber = subscriber;\n+        this.exchange = exchange;\n+        this.description = description;\n+        this.tracer = tracer;\n+\n+        transactionMap.put(this, transaction);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscribe scheduler\".\n+     * Might activate transaction if not already active. When activating the transaction is kept active after method execution.\n+     * Refer to {@link #doEnter} for details on activation.\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        Transaction transaction = getTransaction();\n+        doEnter(true, \"onSubscribe\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onSubscribe\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will discard transaction reference if any exception is thrown.\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onNext\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onNext\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onError\", transaction);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            endTransaction(t, transaction);\n+            doExit(true, \"onError\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     */\n+    @Override\n+    public void onComplete() {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onComplete\", transaction);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            endTransaction(null, transaction);\n+            doExit(true, \"onComplete\", transaction);\n+        }\n+    }\n+\n+    private void doEnter(boolean isSubscribe, String method, @Nullable Transaction transaction) {\n+        debugTrace(true, method, transaction);\n+\n+        if (!isSubscribe || transaction == null) {\n+            return;\n+        }\n+\n+        if (transaction == tracer.getActive()) {\n+            activatedOnSubscribe = false;\n+            return;\n+        }\n+\n+        transaction.activate();\n+        activatedOnSubscribe = true;\n+    }\n+\n+    private void doExit(boolean discard, String method, @Nullable Transaction transaction) {\n+        debugTrace(false, method, transaction);\n+\n+        if (transaction == null) {\n+            return;\n+        }\n+\n+        if (discard) {\n+            if (activatedOnSubscribe && tracer.getActive() == transaction) {\n+                transaction.deactivate();\n+            }\n+            transactionMap.remove(this);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private Transaction getTransaction() {\n+        return transactionMap.get(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable Transaction transaction) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} {} {} {}\", isEnter ? \">>>>\" : \"<<<<\", description, method, transaction);\n+    }\n+\n+    /**\n+     * Only for testing\n+     *\n+     * @return storage map for in-flight transactions\n+     */\n+    static WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> getTransactionMap() {\n+        return transactionMap;\n+    }\n+\n+    private void endTransaction(@Nullable Throwable thrown, @Nullable Transaction transaction) {\n+        if (transaction == null) {\n+            // already discarded\n+            return;\n+        }\n+\n+        Object attribute = exchange.getAttributes().remove(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n+        if (attribute != transaction) {\n+            // transaction might be already terminated due to instrumentation of more than one\n+            // dispatcher/handler/invocation-handler class\n+            return;\n+        }\n+\n+        if (ignoreTransaction(exchange, transaction)) {\n+            transaction.ignoreTransaction();\n+            transaction.end();\n+            return;\n+        }\n+\n+        StringBuilder transactionName = transaction.getAndOverrideName(PRIO_HIGH_LEVEL_FRAMEWORK, true);\n+        if (transactionName != null) {\n+            String httpMethod = exchange.getRequest().getMethodValue();\n+\n+            // bean name & method should be set for annotated methods\n+            String beanName = exchange.getAttribute(WebfluxHelper.ANNOTATED_BEAN_NAME_ATTRIBUTE);\n+            String methodName = exchange.getAttribute(WebfluxHelper.ANNOTATED_METHOD_NAME_ATTRIBUTE);\n+\n+            PathPattern pattern = exchange.getAttribute(MATCHING_PATTERN_ATTRIBUTE);\n+\n+            if (beanName != null && methodName != null) {\n+                transactionName.append(beanName)\n+                    .append('#')\n+                    .append(methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDI4NDMwMg==", "bodyText": "[minor]\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Object attribute = exchange.getAttribute(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n          \n          \n            \n                        Object transaction = exchange.getAttribute(WebfluxHelper.TRANSACTION_ATTRIBUTE);", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620284302", "createdAt": "2021-04-26T13:14:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerResult;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+import javax.annotation.Nullable;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments known implementations of {@link org.springframework.web.reactive.HandlerAdapter#handle(ServerWebExchange, Object)}\n+ * that handle annotation based controllers execution and naming\n+ * <ul>\n+ *     <li>{@link org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter}</li>\n+ *     <li>{@link org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter}</li>\n+ *     <li>{@link org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter}</li>\n+ *     <li>{@link org.springframework.web.reactive.result.SimpleHandlerAdapter}</li>\n+ * </ul>\n+ */\n+public class HandlerAdapterInstrumentation extends WebFluxInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter\")\n+            .or(named(\"org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter\"))\n+            .or(named(\"org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter\"))\n+            .or(named(\"org.springframework.web.reactive.result.SimpleHandlerAdapter\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"handle\")\n+            .and(takesArgument(0, named(\"org.springframework.web.server.ServerWebExchange\")))\n+            .and(takesArgument(1, Object.class));\n+    }\n+\n+    @Override\n+    public String getAdviceClassName() {\n+        return \"co.elastic.apm.agent.springwebflux.HandlerAdapterInstrumentation$HandleAdvice\";\n+    }\n+\n+    public static class HandleAdvice {\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) ServerWebExchange exchange,\n+                                     @Advice.Argument(1) Object handler) {\n+\n+            Object attribute = exchange.getAttribute(WebfluxHelper.TRANSACTION_ATTRIBUTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDMxMDYwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean ignoreTransaction(ServerWebExchange exchange, Transaction transaction) {\n          \n          \n            \n                private static boolean ignoreTransaction(ServerWebExchange exchange) {", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620310607", "createdAt": "2021-04-26T13:44:44Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/TransactionAwareSubscriber.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.context.Request;\n+import co.elastic.apm.agent.impl.context.Response;\n+import co.elastic.apm.agent.impl.context.web.ResultUtil;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import co.elastic.apm.agent.util.PotentiallyMultiValuedMap;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerMapping;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n+import reactor.core.CoreSubscriber;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.impl.transaction.AbstractSpan.PRIO_HIGH_LEVEL_FRAMEWORK;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.MATCHING_PATTERN_ATTRIBUTE;\n+\n+/**\n+ * Transaction-aware subscriber that will (optionally) activate transaction and terminate it on error or completion.\n+ *\n+ * @param <T>\n+ */\n+class TransactionAwareSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TransactionAwareSubscriber.class);\n+\n+    private static final WeakConcurrentMap<HandlerMethod, Boolean> ignoredHandlerMethods = WeakMapSupplier.createMap();\n+\n+    private static final WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> transactionMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final ServerWebExchange exchange;\n+\n+    private final String description;\n+\n+    private final Tracer tracer;\n+\n+    /**\n+     * {@literal true} when transaction was activated on subscription\n+     */\n+    private boolean activatedOnSubscribe = false;\n+\n+    /**\n+     * @param subscriber  subscriber to wrap\n+     * @param transaction transaction\n+     * @param exchange    server web exchange\n+     * @param description human-readable description to make debugging easier\n+     */\n+    TransactionAwareSubscriber(CoreSubscriber<? super T> subscriber,\n+                               Tracer tracer,\n+                               Transaction transaction,\n+                               ServerWebExchange exchange,\n+                               String description) {\n+\n+        this.subscriber = subscriber;\n+        this.exchange = exchange;\n+        this.description = description;\n+        this.tracer = tracer;\n+\n+        transactionMap.put(this, transaction);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscribe scheduler\".\n+     * Might activate transaction if not already active. When activating the transaction is kept active after method execution.\n+     * Refer to {@link #doEnter} for details on activation.\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        Transaction transaction = getTransaction();\n+        doEnter(true, \"onSubscribe\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onSubscribe\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will discard transaction reference if any exception is thrown.\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onNext\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onNext\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onError\", transaction);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            endTransaction(t, transaction);\n+            doExit(true, \"onError\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     */\n+    @Override\n+    public void onComplete() {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onComplete\", transaction);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            endTransaction(null, transaction);\n+            doExit(true, \"onComplete\", transaction);\n+        }\n+    }\n+\n+    private void doEnter(boolean isSubscribe, String method, @Nullable Transaction transaction) {\n+        debugTrace(true, method, transaction);\n+\n+        if (!isSubscribe || transaction == null) {\n+            return;\n+        }\n+\n+        if (transaction == tracer.getActive()) {\n+            activatedOnSubscribe = false;\n+            return;\n+        }\n+\n+        transaction.activate();\n+        activatedOnSubscribe = true;\n+    }\n+\n+    private void doExit(boolean discard, String method, @Nullable Transaction transaction) {\n+        debugTrace(false, method, transaction);\n+\n+        if (transaction == null) {\n+            return;\n+        }\n+\n+        if (discard) {\n+            if (activatedOnSubscribe && tracer.getActive() == transaction) {\n+                transaction.deactivate();\n+            }\n+            transactionMap.remove(this);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private Transaction getTransaction() {\n+        return transactionMap.get(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable Transaction transaction) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} {} {} {}\", isEnter ? \">>>>\" : \"<<<<\", description, method, transaction);\n+    }\n+\n+    /**\n+     * Only for testing\n+     *\n+     * @return storage map for in-flight transactions\n+     */\n+    static WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> getTransactionMap() {\n+        return transactionMap;\n+    }\n+\n+    private void endTransaction(@Nullable Throwable thrown, @Nullable Transaction transaction) {\n+        if (transaction == null) {\n+            // already discarded\n+            return;\n+        }\n+\n+        Object attribute = exchange.getAttributes().remove(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n+        if (attribute != transaction) {\n+            // transaction might be already terminated due to instrumentation of more than one\n+            // dispatcher/handler/invocation-handler class\n+            return;\n+        }\n+\n+        if (ignoreTransaction(exchange, transaction)) {\n+            transaction.ignoreTransaction();\n+            transaction.end();\n+            return;\n+        }\n+\n+        StringBuilder transactionName = transaction.getAndOverrideName(PRIO_HIGH_LEVEL_FRAMEWORK, true);\n+        if (transactionName != null) {\n+            String httpMethod = exchange.getRequest().getMethodValue();\n+\n+            // bean name & method should be set for annotated methods\n+            String beanName = exchange.getAttribute(WebfluxHelper.ANNOTATED_BEAN_NAME_ATTRIBUTE);\n+            String methodName = exchange.getAttribute(WebfluxHelper.ANNOTATED_METHOD_NAME_ATTRIBUTE);\n+\n+            PathPattern pattern = exchange.getAttribute(MATCHING_PATTERN_ATTRIBUTE);\n+\n+            if (beanName != null && methodName != null) {\n+                transactionName.append(beanName)\n+                    .append('#')\n+                    .append(methodName);\n+            } else {\n+                transactionName.append(httpMethod).append(' ');\n+                if (pattern != null) {\n+                    transactionName.append(pattern.getPatternString());\n+                } else {\n+                    transactionName.append(\"unknown route\");\n+                }\n+            }\n+        }\n+\n+        // Fill request/response details if they haven't been already by another HTTP plugin (servlet or other).\n+        if (!transaction.getContext().getRequest().hasContent()) {\n+            fillRequest(transaction, exchange);\n+            fillResponse(transaction, exchange);\n+        }\n+\n+        transaction.captureException(thrown);\n+\n+        // In case transaction has been created by Servlet, we should not terminate it as the Servlet instrumentation\n+        // will take care of this.\n+        if (!WebfluxHelper.isServletTransaction(exchange)) {\n+            transaction.end();\n+        }\n+\n+    }\n+\n+    private static boolean ignoreTransaction(ServerWebExchange exchange, Transaction transaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDMyMTM2NQ==", "bodyText": "Only if capture_headers config is enabled", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620321365", "createdAt": "2021-04-26T13:56:35Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/TransactionAwareSubscriber.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.context.Request;\n+import co.elastic.apm.agent.impl.context.Response;\n+import co.elastic.apm.agent.impl.context.web.ResultUtil;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import co.elastic.apm.agent.util.PotentiallyMultiValuedMap;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerMapping;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n+import reactor.core.CoreSubscriber;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.impl.transaction.AbstractSpan.PRIO_HIGH_LEVEL_FRAMEWORK;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.MATCHING_PATTERN_ATTRIBUTE;\n+\n+/**\n+ * Transaction-aware subscriber that will (optionally) activate transaction and terminate it on error or completion.\n+ *\n+ * @param <T>\n+ */\n+class TransactionAwareSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TransactionAwareSubscriber.class);\n+\n+    private static final WeakConcurrentMap<HandlerMethod, Boolean> ignoredHandlerMethods = WeakMapSupplier.createMap();\n+\n+    private static final WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> transactionMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final ServerWebExchange exchange;\n+\n+    private final String description;\n+\n+    private final Tracer tracer;\n+\n+    /**\n+     * {@literal true} when transaction was activated on subscription\n+     */\n+    private boolean activatedOnSubscribe = false;\n+\n+    /**\n+     * @param subscriber  subscriber to wrap\n+     * @param transaction transaction\n+     * @param exchange    server web exchange\n+     * @param description human-readable description to make debugging easier\n+     */\n+    TransactionAwareSubscriber(CoreSubscriber<? super T> subscriber,\n+                               Tracer tracer,\n+                               Transaction transaction,\n+                               ServerWebExchange exchange,\n+                               String description) {\n+\n+        this.subscriber = subscriber;\n+        this.exchange = exchange;\n+        this.description = description;\n+        this.tracer = tracer;\n+\n+        transactionMap.put(this, transaction);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscribe scheduler\".\n+     * Might activate transaction if not already active. When activating the transaction is kept active after method execution.\n+     * Refer to {@link #doEnter} for details on activation.\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        Transaction transaction = getTransaction();\n+        doEnter(true, \"onSubscribe\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onSubscribe\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will discard transaction reference if any exception is thrown.\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onNext\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onNext\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onError\", transaction);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            endTransaction(t, transaction);\n+            doExit(true, \"onError\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     */\n+    @Override\n+    public void onComplete() {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onComplete\", transaction);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            endTransaction(null, transaction);\n+            doExit(true, \"onComplete\", transaction);\n+        }\n+    }\n+\n+    private void doEnter(boolean isSubscribe, String method, @Nullable Transaction transaction) {\n+        debugTrace(true, method, transaction);\n+\n+        if (!isSubscribe || transaction == null) {\n+            return;\n+        }\n+\n+        if (transaction == tracer.getActive()) {\n+            activatedOnSubscribe = false;\n+            return;\n+        }\n+\n+        transaction.activate();\n+        activatedOnSubscribe = true;\n+    }\n+\n+    private void doExit(boolean discard, String method, @Nullable Transaction transaction) {\n+        debugTrace(false, method, transaction);\n+\n+        if (transaction == null) {\n+            return;\n+        }\n+\n+        if (discard) {\n+            if (activatedOnSubscribe && tracer.getActive() == transaction) {\n+                transaction.deactivate();\n+            }\n+            transactionMap.remove(this);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private Transaction getTransaction() {\n+        return transactionMap.get(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable Transaction transaction) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} {} {} {}\", isEnter ? \">>>>\" : \"<<<<\", description, method, transaction);\n+    }\n+\n+    /**\n+     * Only for testing\n+     *\n+     * @return storage map for in-flight transactions\n+     */\n+    static WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> getTransactionMap() {\n+        return transactionMap;\n+    }\n+\n+    private void endTransaction(@Nullable Throwable thrown, @Nullable Transaction transaction) {\n+        if (transaction == null) {\n+            // already discarded\n+            return;\n+        }\n+\n+        Object attribute = exchange.getAttributes().remove(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n+        if (attribute != transaction) {\n+            // transaction might be already terminated due to instrumentation of more than one\n+            // dispatcher/handler/invocation-handler class\n+            return;\n+        }\n+\n+        if (ignoreTransaction(exchange, transaction)) {\n+            transaction.ignoreTransaction();\n+            transaction.end();\n+            return;\n+        }\n+\n+        StringBuilder transactionName = transaction.getAndOverrideName(PRIO_HIGH_LEVEL_FRAMEWORK, true);\n+        if (transactionName != null) {\n+            String httpMethod = exchange.getRequest().getMethodValue();\n+\n+            // bean name & method should be set for annotated methods\n+            String beanName = exchange.getAttribute(WebfluxHelper.ANNOTATED_BEAN_NAME_ATTRIBUTE);\n+            String methodName = exchange.getAttribute(WebfluxHelper.ANNOTATED_METHOD_NAME_ATTRIBUTE);\n+\n+            PathPattern pattern = exchange.getAttribute(MATCHING_PATTERN_ATTRIBUTE);\n+\n+            if (beanName != null && methodName != null) {\n+                transactionName.append(beanName)\n+                    .append('#')\n+                    .append(methodName);\n+            } else {\n+                transactionName.append(httpMethod).append(' ');\n+                if (pattern != null) {\n+                    transactionName.append(pattern.getPatternString());\n+                } else {\n+                    transactionName.append(\"unknown route\");\n+                }\n+            }\n+        }\n+\n+        // Fill request/response details if they haven't been already by another HTTP plugin (servlet or other).\n+        if (!transaction.getContext().getRequest().hasContent()) {\n+            fillRequest(transaction, exchange);\n+            fillResponse(transaction, exchange);\n+        }\n+\n+        transaction.captureException(thrown);\n+\n+        // In case transaction has been created by Servlet, we should not terminate it as the Servlet instrumentation\n+        // will take care of this.\n+        if (!WebfluxHelper.isServletTransaction(exchange)) {\n+            transaction.end();\n+        }\n+\n+    }\n+\n+    private static boolean ignoreTransaction(ServerWebExchange exchange, Transaction transaction) {\n+        // Annotated controllers have the invoked handler method available in exchange\n+        // thus we can rely on this to ignore methods that return ServerSideEvents which should not report transactions\n+        Object attribute = exchange.getAttribute(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE);\n+        if (!(attribute instanceof HandlerMethod)) {\n+            return false;\n+        }\n+\n+        HandlerMethod handlerMethod = (HandlerMethod) attribute;\n+        Boolean ignoredCache = ignoredHandlerMethods.get(handlerMethod);\n+        if (ignoredCache != null) {\n+            return ignoredCache;\n+        }\n+\n+        Type returnType = handlerMethod.getMethod().getGenericReturnType();\n+        if (!(returnType instanceof ParameterizedType)) {\n+            ignoredHandlerMethods.put(handlerMethod, false);\n+            return false;\n+        }\n+\n+        Type[] genReturnTypes = ((ParameterizedType) returnType).getActualTypeArguments();\n+        //noinspection ForLoopReplaceableByForEach\n+        for (int i = 0; i < genReturnTypes.length; i++) {\n+            if (genReturnTypes[i].getTypeName().startsWith(WebfluxHelper.SSE_EVENT_CLASS)) {\n+                ignoredHandlerMethods.put(handlerMethod, true);\n+                return true;\n+            }\n+        }\n+\n+        ignoredHandlerMethods.put(handlerMethod, false);\n+        return false;\n+    }\n+\n+    private static void fillRequest(Transaction transaction, ServerWebExchange exchange) {\n+        ServerHttpRequest serverRequest = exchange.getRequest();\n+        Request request = transaction.getContext().getRequest();\n+\n+        request.withMethod(serverRequest.getMethodValue());\n+\n+        InetSocketAddress remoteAddress = serverRequest.getRemoteAddress();\n+        request.getSocket()\n+            .withRemoteAddress(remoteAddress == null ? null : remoteAddress.getAddress().getHostAddress())\n+            .withEncrypted(serverRequest.getSslInfo() != null);\n+\n+        URI uri = serverRequest.getURI();\n+        request.getUrl()\n+            .withProtocol(uri.getScheme())\n+            .withHostname(uri.getHost())\n+            .withPort(uri.getPort())\n+            .withPathname(uri.getPath())\n+            .withSearch(uri.getQuery())\n+            .updateFull();\n+\n+        copyHeaders(serverRequest.getHeaders(), request.getHeaders());\n+\n+        for (Map.Entry<String, List<HttpCookie>> cookie : serverRequest.getCookies().entrySet()) {\n+            for (HttpCookie value : cookie.getValue()) {\n+                request.getCookies().add(cookie.getKey(), value.getValue());\n+            }\n+        }\n+\n+    }\n+\n+    private static void fillResponse(Transaction transaction, ServerWebExchange exchange) {\n+        ServerHttpResponse serverResponse = exchange.getResponse();\n+        HttpStatus statusCode = serverResponse.getStatusCode();\n+        int status = statusCode != null ? statusCode.value() : 200;\n+\n+        transaction.withResultIfUnset(ResultUtil.getResultByHttpStatus(status));\n+\n+        Response response = transaction.getContext().getResponse();\n+\n+        copyHeaders(serverResponse.getHeaders(), response.getHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDMyMTc3OA==", "bodyText": "Only if capture_headers config is enabled", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620321778", "createdAt": "2021-04-26T13:57:02Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/TransactionAwareSubscriber.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.context.Request;\n+import co.elastic.apm.agent.impl.context.Response;\n+import co.elastic.apm.agent.impl.context.web.ResultUtil;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import co.elastic.apm.agent.util.PotentiallyMultiValuedMap;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerMapping;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n+import reactor.core.CoreSubscriber;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.impl.transaction.AbstractSpan.PRIO_HIGH_LEVEL_FRAMEWORK;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.MATCHING_PATTERN_ATTRIBUTE;\n+\n+/**\n+ * Transaction-aware subscriber that will (optionally) activate transaction and terminate it on error or completion.\n+ *\n+ * @param <T>\n+ */\n+class TransactionAwareSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TransactionAwareSubscriber.class);\n+\n+    private static final WeakConcurrentMap<HandlerMethod, Boolean> ignoredHandlerMethods = WeakMapSupplier.createMap();\n+\n+    private static final WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> transactionMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final ServerWebExchange exchange;\n+\n+    private final String description;\n+\n+    private final Tracer tracer;\n+\n+    /**\n+     * {@literal true} when transaction was activated on subscription\n+     */\n+    private boolean activatedOnSubscribe = false;\n+\n+    /**\n+     * @param subscriber  subscriber to wrap\n+     * @param transaction transaction\n+     * @param exchange    server web exchange\n+     * @param description human-readable description to make debugging easier\n+     */\n+    TransactionAwareSubscriber(CoreSubscriber<? super T> subscriber,\n+                               Tracer tracer,\n+                               Transaction transaction,\n+                               ServerWebExchange exchange,\n+                               String description) {\n+\n+        this.subscriber = subscriber;\n+        this.exchange = exchange;\n+        this.description = description;\n+        this.tracer = tracer;\n+\n+        transactionMap.put(this, transaction);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscribe scheduler\".\n+     * Might activate transaction if not already active. When activating the transaction is kept active after method execution.\n+     * Refer to {@link #doEnter} for details on activation.\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        Transaction transaction = getTransaction();\n+        doEnter(true, \"onSubscribe\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onSubscribe\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will discard transaction reference if any exception is thrown.\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onNext\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onNext\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onError\", transaction);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            endTransaction(t, transaction);\n+            doExit(true, \"onError\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     */\n+    @Override\n+    public void onComplete() {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onComplete\", transaction);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            endTransaction(null, transaction);\n+            doExit(true, \"onComplete\", transaction);\n+        }\n+    }\n+\n+    private void doEnter(boolean isSubscribe, String method, @Nullable Transaction transaction) {\n+        debugTrace(true, method, transaction);\n+\n+        if (!isSubscribe || transaction == null) {\n+            return;\n+        }\n+\n+        if (transaction == tracer.getActive()) {\n+            activatedOnSubscribe = false;\n+            return;\n+        }\n+\n+        transaction.activate();\n+        activatedOnSubscribe = true;\n+    }\n+\n+    private void doExit(boolean discard, String method, @Nullable Transaction transaction) {\n+        debugTrace(false, method, transaction);\n+\n+        if (transaction == null) {\n+            return;\n+        }\n+\n+        if (discard) {\n+            if (activatedOnSubscribe && tracer.getActive() == transaction) {\n+                transaction.deactivate();\n+            }\n+            transactionMap.remove(this);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private Transaction getTransaction() {\n+        return transactionMap.get(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable Transaction transaction) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} {} {} {}\", isEnter ? \">>>>\" : \"<<<<\", description, method, transaction);\n+    }\n+\n+    /**\n+     * Only for testing\n+     *\n+     * @return storage map for in-flight transactions\n+     */\n+    static WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> getTransactionMap() {\n+        return transactionMap;\n+    }\n+\n+    private void endTransaction(@Nullable Throwable thrown, @Nullable Transaction transaction) {\n+        if (transaction == null) {\n+            // already discarded\n+            return;\n+        }\n+\n+        Object attribute = exchange.getAttributes().remove(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n+        if (attribute != transaction) {\n+            // transaction might be already terminated due to instrumentation of more than one\n+            // dispatcher/handler/invocation-handler class\n+            return;\n+        }\n+\n+        if (ignoreTransaction(exchange, transaction)) {\n+            transaction.ignoreTransaction();\n+            transaction.end();\n+            return;\n+        }\n+\n+        StringBuilder transactionName = transaction.getAndOverrideName(PRIO_HIGH_LEVEL_FRAMEWORK, true);\n+        if (transactionName != null) {\n+            String httpMethod = exchange.getRequest().getMethodValue();\n+\n+            // bean name & method should be set for annotated methods\n+            String beanName = exchange.getAttribute(WebfluxHelper.ANNOTATED_BEAN_NAME_ATTRIBUTE);\n+            String methodName = exchange.getAttribute(WebfluxHelper.ANNOTATED_METHOD_NAME_ATTRIBUTE);\n+\n+            PathPattern pattern = exchange.getAttribute(MATCHING_PATTERN_ATTRIBUTE);\n+\n+            if (beanName != null && methodName != null) {\n+                transactionName.append(beanName)\n+                    .append('#')\n+                    .append(methodName);\n+            } else {\n+                transactionName.append(httpMethod).append(' ');\n+                if (pattern != null) {\n+                    transactionName.append(pattern.getPatternString());\n+                } else {\n+                    transactionName.append(\"unknown route\");\n+                }\n+            }\n+        }\n+\n+        // Fill request/response details if they haven't been already by another HTTP plugin (servlet or other).\n+        if (!transaction.getContext().getRequest().hasContent()) {\n+            fillRequest(transaction, exchange);\n+            fillResponse(transaction, exchange);\n+        }\n+\n+        transaction.captureException(thrown);\n+\n+        // In case transaction has been created by Servlet, we should not terminate it as the Servlet instrumentation\n+        // will take care of this.\n+        if (!WebfluxHelper.isServletTransaction(exchange)) {\n+            transaction.end();\n+        }\n+\n+    }\n+\n+    private static boolean ignoreTransaction(ServerWebExchange exchange, Transaction transaction) {\n+        // Annotated controllers have the invoked handler method available in exchange\n+        // thus we can rely on this to ignore methods that return ServerSideEvents which should not report transactions\n+        Object attribute = exchange.getAttribute(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE);\n+        if (!(attribute instanceof HandlerMethod)) {\n+            return false;\n+        }\n+\n+        HandlerMethod handlerMethod = (HandlerMethod) attribute;\n+        Boolean ignoredCache = ignoredHandlerMethods.get(handlerMethod);\n+        if (ignoredCache != null) {\n+            return ignoredCache;\n+        }\n+\n+        Type returnType = handlerMethod.getMethod().getGenericReturnType();\n+        if (!(returnType instanceof ParameterizedType)) {\n+            ignoredHandlerMethods.put(handlerMethod, false);\n+            return false;\n+        }\n+\n+        Type[] genReturnTypes = ((ParameterizedType) returnType).getActualTypeArguments();\n+        //noinspection ForLoopReplaceableByForEach\n+        for (int i = 0; i < genReturnTypes.length; i++) {\n+            if (genReturnTypes[i].getTypeName().startsWith(WebfluxHelper.SSE_EVENT_CLASS)) {\n+                ignoredHandlerMethods.put(handlerMethod, true);\n+                return true;\n+            }\n+        }\n+\n+        ignoredHandlerMethods.put(handlerMethod, false);\n+        return false;\n+    }\n+\n+    private static void fillRequest(Transaction transaction, ServerWebExchange exchange) {\n+        ServerHttpRequest serverRequest = exchange.getRequest();\n+        Request request = transaction.getContext().getRequest();\n+\n+        request.withMethod(serverRequest.getMethodValue());\n+\n+        InetSocketAddress remoteAddress = serverRequest.getRemoteAddress();\n+        request.getSocket()\n+            .withRemoteAddress(remoteAddress == null ? null : remoteAddress.getAddress().getHostAddress())\n+            .withEncrypted(serverRequest.getSslInfo() != null);\n+\n+        URI uri = serverRequest.getURI();\n+        request.getUrl()\n+            .withProtocol(uri.getScheme())\n+            .withHostname(uri.getHost())\n+            .withPort(uri.getPort())\n+            .withPathname(uri.getPath())\n+            .withSearch(uri.getQuery())\n+            .updateFull();\n+\n+        copyHeaders(serverRequest.getHeaders(), request.getHeaders());\n+\n+        for (Map.Entry<String, List<HttpCookie>> cookie : serverRequest.getCookies().entrySet()) {\n+            for (HttpCookie value : cookie.getValue()) {\n+                request.getCookies().add(cookie.getKey(), value.getValue());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDMzMjExOQ==", "bodyText": "How complicated would it be to use serverRequest.getBody() to capture the request body?", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620332119", "createdAt": "2021-04-26T14:08:18Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-spring-webflux/apm-spring-webflux-plugin/src/main/java/co/elastic/apm/agent/springwebflux/TransactionAwareSubscriber.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.springwebflux;\n+\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.impl.context.Request;\n+import co.elastic.apm.agent.impl.context.Response;\n+import co.elastic.apm.agent.impl.context.web.ResultUtil;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import co.elastic.apm.agent.util.PotentiallyMultiValuedMap;\n+import co.elastic.apm.agent.util.SpanConcurrentHashMap;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.reactive.HandlerMapping;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n+import reactor.core.CoreSubscriber;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.impl.transaction.AbstractSpan.PRIO_HIGH_LEVEL_FRAMEWORK;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.MATCHING_PATTERN_ATTRIBUTE;\n+\n+/**\n+ * Transaction-aware subscriber that will (optionally) activate transaction and terminate it on error or completion.\n+ *\n+ * @param <T>\n+ */\n+class TransactionAwareSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(TransactionAwareSubscriber.class);\n+\n+    private static final WeakConcurrentMap<HandlerMethod, Boolean> ignoredHandlerMethods = WeakMapSupplier.createMap();\n+\n+    private static final WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> transactionMap = SpanConcurrentHashMap.createWeakMap();\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+\n+    private final ServerWebExchange exchange;\n+\n+    private final String description;\n+\n+    private final Tracer tracer;\n+\n+    /**\n+     * {@literal true} when transaction was activated on subscription\n+     */\n+    private boolean activatedOnSubscribe = false;\n+\n+    /**\n+     * @param subscriber  subscriber to wrap\n+     * @param transaction transaction\n+     * @param exchange    server web exchange\n+     * @param description human-readable description to make debugging easier\n+     */\n+    TransactionAwareSubscriber(CoreSubscriber<? super T> subscriber,\n+                               Tracer tracer,\n+                               Transaction transaction,\n+                               ServerWebExchange exchange,\n+                               String description) {\n+\n+        this.subscriber = subscriber;\n+        this.exchange = exchange;\n+        this.description = description;\n+        this.tracer = tracer;\n+\n+        transactionMap.put(this, transaction);\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onSubscribe(Subscription)} for context propagation, executed in \"subscribe scheduler\".\n+     * Might activate transaction if not already active. When activating the transaction is kept active after method execution.\n+     * Refer to {@link #doEnter} for details on activation.\n+     */\n+    @Override\n+    public void onSubscribe(Subscription s) {\n+        Transaction transaction = getTransaction();\n+        doEnter(true, \"onSubscribe\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onSubscribe(s);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onSubscribe\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onNext(Object)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will discard transaction reference if any exception is thrown.\n+     *\n+     * @param next next item\n+     */\n+    @Override\n+    public void onNext(T next) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onNext\", transaction);\n+        Throwable thrown = null;\n+        try {\n+            subscriber.onNext(next);\n+        } catch (Throwable e) {\n+            thrown = e;\n+            throw e;\n+        } finally {\n+            doExit(thrown != null, \"onNext\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onError(Throwable)} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     *\n+     * @param t error\n+     */\n+    @Override\n+    public void onError(Throwable t) {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onError\", transaction);\n+        try {\n+            subscriber.onError(t);\n+        } finally {\n+            endTransaction(t, transaction);\n+            doExit(true, \"onError\", transaction);\n+        }\n+    }\n+\n+    /**\n+     * Wraps {@link Subscriber#onComplete()} for context propagation, executed in \"publisher scheduler\".\n+     * Assumes the transaction is already active, will terminate transaction and optionally deactivate if it was\n+     * previously activated by {@link #onSubscribe(Subscription)}.\n+     */\n+    @Override\n+    public void onComplete() {\n+        Transaction transaction = getTransaction();\n+        doEnter(false, \"onComplete\", transaction);\n+        try {\n+            subscriber.onComplete();\n+        } finally {\n+            endTransaction(null, transaction);\n+            doExit(true, \"onComplete\", transaction);\n+        }\n+    }\n+\n+    private void doEnter(boolean isSubscribe, String method, @Nullable Transaction transaction) {\n+        debugTrace(true, method, transaction);\n+\n+        if (!isSubscribe || transaction == null) {\n+            return;\n+        }\n+\n+        if (transaction == tracer.getActive()) {\n+            activatedOnSubscribe = false;\n+            return;\n+        }\n+\n+        transaction.activate();\n+        activatedOnSubscribe = true;\n+    }\n+\n+    private void doExit(boolean discard, String method, @Nullable Transaction transaction) {\n+        debugTrace(false, method, transaction);\n+\n+        if (transaction == null) {\n+            return;\n+        }\n+\n+        if (discard) {\n+            if (activatedOnSubscribe && tracer.getActive() == transaction) {\n+                transaction.deactivate();\n+            }\n+            transactionMap.remove(this);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private Transaction getTransaction() {\n+        return transactionMap.get(this);\n+    }\n+\n+    private void debugTrace(boolean isEnter, String method, @Nullable Transaction transaction) {\n+        if (!log.isTraceEnabled()) {\n+            return;\n+        }\n+        log.trace(\"{} {} {} {}\", isEnter ? \">>>>\" : \"<<<<\", description, method, transaction);\n+    }\n+\n+    /**\n+     * Only for testing\n+     *\n+     * @return storage map for in-flight transactions\n+     */\n+    static WeakConcurrentMap<TransactionAwareSubscriber<?>, Transaction> getTransactionMap() {\n+        return transactionMap;\n+    }\n+\n+    private void endTransaction(@Nullable Throwable thrown, @Nullable Transaction transaction) {\n+        if (transaction == null) {\n+            // already discarded\n+            return;\n+        }\n+\n+        Object attribute = exchange.getAttributes().remove(WebfluxHelper.TRANSACTION_ATTRIBUTE);\n+        if (attribute != transaction) {\n+            // transaction might be already terminated due to instrumentation of more than one\n+            // dispatcher/handler/invocation-handler class\n+            return;\n+        }\n+\n+        if (ignoreTransaction(exchange, transaction)) {\n+            transaction.ignoreTransaction();\n+            transaction.end();\n+            return;\n+        }\n+\n+        StringBuilder transactionName = transaction.getAndOverrideName(PRIO_HIGH_LEVEL_FRAMEWORK, true);\n+        if (transactionName != null) {\n+            String httpMethod = exchange.getRequest().getMethodValue();\n+\n+            // bean name & method should be set for annotated methods\n+            String beanName = exchange.getAttribute(WebfluxHelper.ANNOTATED_BEAN_NAME_ATTRIBUTE);\n+            String methodName = exchange.getAttribute(WebfluxHelper.ANNOTATED_METHOD_NAME_ATTRIBUTE);\n+\n+            PathPattern pattern = exchange.getAttribute(MATCHING_PATTERN_ATTRIBUTE);\n+\n+            if (beanName != null && methodName != null) {\n+                transactionName.append(beanName)\n+                    .append('#')\n+                    .append(methodName);\n+            } else {\n+                transactionName.append(httpMethod).append(' ');\n+                if (pattern != null) {\n+                    transactionName.append(pattern.getPatternString());\n+                } else {\n+                    transactionName.append(\"unknown route\");\n+                }\n+            }\n+        }\n+\n+        // Fill request/response details if they haven't been already by another HTTP plugin (servlet or other).\n+        if (!transaction.getContext().getRequest().hasContent()) {\n+            fillRequest(transaction, exchange);\n+            fillResponse(transaction, exchange);\n+        }\n+\n+        transaction.captureException(thrown);\n+\n+        // In case transaction has been created by Servlet, we should not terminate it as the Servlet instrumentation\n+        // will take care of this.\n+        if (!WebfluxHelper.isServletTransaction(exchange)) {\n+            transaction.end();\n+        }\n+\n+    }\n+\n+    private static boolean ignoreTransaction(ServerWebExchange exchange, Transaction transaction) {\n+        // Annotated controllers have the invoked handler method available in exchange\n+        // thus we can rely on this to ignore methods that return ServerSideEvents which should not report transactions\n+        Object attribute = exchange.getAttribute(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE);\n+        if (!(attribute instanceof HandlerMethod)) {\n+            return false;\n+        }\n+\n+        HandlerMethod handlerMethod = (HandlerMethod) attribute;\n+        Boolean ignoredCache = ignoredHandlerMethods.get(handlerMethod);\n+        if (ignoredCache != null) {\n+            return ignoredCache;\n+        }\n+\n+        Type returnType = handlerMethod.getMethod().getGenericReturnType();\n+        if (!(returnType instanceof ParameterizedType)) {\n+            ignoredHandlerMethods.put(handlerMethod, false);\n+            return false;\n+        }\n+\n+        Type[] genReturnTypes = ((ParameterizedType) returnType).getActualTypeArguments();\n+        //noinspection ForLoopReplaceableByForEach\n+        for (int i = 0; i < genReturnTypes.length; i++) {\n+            if (genReturnTypes[i].getTypeName().startsWith(WebfluxHelper.SSE_EVENT_CLASS)) {\n+                ignoredHandlerMethods.put(handlerMethod, true);\n+                return true;\n+            }\n+        }\n+\n+        ignoredHandlerMethods.put(handlerMethod, false);\n+        return false;\n+    }\n+\n+    private static void fillRequest(Transaction transaction, ServerWebExchange exchange) {\n+        ServerHttpRequest serverRequest = exchange.getRequest();\n+        Request request = transaction.getContext().getRequest();\n+\n+        request.withMethod(serverRequest.getMethodValue());\n+\n+        InetSocketAddress remoteAddress = serverRequest.getRemoteAddress();\n+        request.getSocket()\n+            .withRemoteAddress(remoteAddress == null ? null : remoteAddress.getAddress().getHostAddress())\n+            .withEncrypted(serverRequest.getSslInfo() != null);\n+\n+        URI uri = serverRequest.getURI();\n+        request.getUrl()\n+            .withProtocol(uri.getScheme())\n+            .withHostname(uri.getHost())\n+            .withPort(uri.getPort())\n+            .withPathname(uri.getPath())\n+            .withSearch(uri.getQuery())\n+            .updateFull();\n+\n+        copyHeaders(serverRequest.getHeaders(), request.getHeaders());\n+\n+        for (Map.Entry<String, List<HttpCookie>> cookie : serverRequest.getCookies().entrySet()) {\n+            for (HttpCookie value : cookie.getValue()) {\n+                request.getCookies().add(cookie.getKey(), value.getValue());\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM0OTI0OA==", "bodyText": "The problem is that when we add something intentionally to the jar, we need to maintain both here and co.elastic.apm.servlet.AgentFileIT#testEverythingIsShaded. I don't see how something can be merged without making sure tests pass. So the latest we should stumble into this, is when running the integration tests, or running manual tests (which is normally done after integration tests pass).\nIf you feel this is important, at least add a reference from each of the location to the other, so that when one is updated, the other is updated as well.", "url": "https://github.com/elastic/apm-agent-java/pull/1305#discussion_r620349248", "createdAt": "2021-04-26T14:26:40Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-premain/src/main/java/co/elastic/apm/agent/premain/AgentMain.java", "diffHunk": "@@ -174,6 +177,43 @@ private static File getAgentJarFile() throws URISyntaxException {\n         if (!agentJar.getName().endsWith(\".jar\")) {\n             throw new IllegalStateException(\"Agent is not a jar file: \" + agentJar);\n         }\n-        return agentJar.getAbsoluteFile();\n+        // verify agent shading at runtime, because tests might not have been always executed (when creating plugin)\n+        // and failure to properly shade will create unexpected and complex behavior that is hard to diagnose and\n+        // debug, thus the cost of doing this at runtime is worth it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af2fc1309f872895ada85e6b861fa7321b68c34"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b21bd749f97387fd62b3941653747c18fd469a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f6b21bd749f97387fd62b3941653747c18fd469a", "committedDate": "2021-05-25T07:43:11Z", "message": "minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a00485538b8ab77e8e5ecfb376a60c6a2f9b9a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/85a00485538b8ab77e8e5ecfb376a60c6a2f9b9a", "committedDate": "2021-05-25T08:36:27Z", "message": "merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc07fa792746dec819e82f9c22c392db3d77de7", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bbc07fa792746dec819e82f9c22c392db3d77de7", "committedDate": "2021-05-25T08:47:29Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c22be6347730991d46bac9e2341197f4b2c7776", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2c22be6347730991d46bac9e2341197f4b2c7776", "committedDate": "2021-05-25T14:13:51Z", "message": "review changes + remove servlet dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6256b91d062c816521c6fa521637ccedcbafc664", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6256b91d062c816521c6fa521637ccedcbafc664", "committedDate": "2021-05-25T15:00:11Z", "message": "capture headers/cookies only when asked to"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43957cf5230a33dbf0d14942cc6b92877ce5ef07", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/43957cf5230a33dbf0d14942cc6b92877ce5ef07", "committedDate": "2021-05-25T18:28:31Z", "message": "remove duplicated packaging test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee387957cae3c4512f2e064cb136a9b74b101064", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ee387957cae3c4512f2e064cb136a9b74b101064", "committedDate": "2021-05-25T18:57:12Z", "message": "update generated doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4NzI3NDYx", "url": "https://github.com/elastic/apm-agent-java/pull/1305#pullrequestreview-668727461", "createdAt": "2021-05-26T08:18:12Z", "commit": {"oid": "ee387957cae3c4512f2e064cb136a9b74b101064"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf57249c896698f84e13bdacede13c3d86874dd2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cf57249c896698f84e13bdacede13c3d86874dd2", "committedDate": "2021-05-26T08:44:37Z", "message": "revert test to master version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd1390005f0fb943ad406ddf35aa43147200967", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ecd1390005f0fb943ad406ddf35aa43147200967", "committedDate": "2021-05-26T15:39:56Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d213b0f37ba6349ad4e389a66ac887cfa3288f41", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d213b0f37ba6349ad4e389a66ac887cfa3288f41", "committedDate": "2021-05-26T16:40:15Z", "message": "update changelog + supported technologies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2953b2b34a8bdc0cd51368bbc031b5724d55411", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c2953b2b34a8bdc0cd51368bbc031b5724d55411", "committedDate": "2021-05-26T16:44:48Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42afb4d5e89bff89bc43cc042a2a9efb42b37216", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/42afb4d5e89bff89bc43cc042a2a9efb42b37216", "committedDate": "2021-05-26T16:45:22Z", "message": "Merge branch 'mb-add-spring-webflux-plugin' of github.com:SylvainJuge/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe585f408673f00bc49ccb3491a9531d3838f81c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fe585f408673f00bc49ccb3491a9531d3838f81c", "committedDate": "2021-05-27T11:45:19Z", "message": "fix jetty issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500077cbf392ff2019e53dddc080445cbee43a22", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/500077cbf392ff2019e53dddc080445cbee43a22", "committedDate": "2021-05-27T13:22:21Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1fe078a234128320a6478f53df9c8200c193d4c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f1fe078a234128320a6478f53df9c8200c193d4c", "committedDate": "2021-05-27T15:02:12Z", "message": "add upstream missing context propagation headers + minor things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b1e92445be91fdf086b73d22ddbea64347e20e6", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3b1e92445be91fdf086b73d22ddbea64347e20e6", "committedDate": "2021-05-27T15:10:37Z", "message": "Merge branch 'mb-add-spring-webflux-plugin' of github.com:SylvainJuge/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86aaf6a8b4c42028fecbbf797e45c21c5abb91eb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/86aaf6a8b4c42028fecbbf797e45c21c5abb91eb", "committedDate": "2021-05-28T07:31:39Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b42f40a0b71702015ae10246c5aab5bff764472b", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b42f40a0b71702015ae10246c5aab5bff764472b", "committedDate": "2019-10-08T18:11:30Z", "message": "add additional test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b57ce262e555cadfee77709926ac4755577688", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d8b57ce262e555cadfee77709926ac4755577688", "committedDate": "2019-10-08T18:11:30Z", "message": "update pom and replace getName() into getNameAsString()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ec9f053b4b4cc9f80cb7e08d5d98892e44c67e", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/99ec9f053b4b4cc9f80cb7e08d5d98892e44c67e", "committedDate": "2019-10-08T18:11:31Z", "message": "remove * imports and redundant method calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b73b2fbab36b7026c560f52a7d2e259ea8cb622", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2b73b2fbab36b7026c560f52a7d2e259ea8cb622", "committedDate": "2019-10-08T18:14:53Z", "message": "add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94313ec0b4521e5f07bc4102b053b8b3088feabf", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/94313ec0b4521e5f07bc4102b053b8b3088feabf", "committedDate": "2019-10-08T18:14:54Z", "message": "Undertow set configurable port for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3604bb60726cd2e4f3529449799bf9105036057", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e3604bb60726cd2e4f3529449799bf9105036057", "committedDate": "2019-10-08T18:14:54Z", "message": "Update CHANGELOG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f2d3d932153bb3e51eec281ac6d50b95231e78", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/30f2d3d932153bb3e51eec281ac6d50b95231e78", "committedDate": "2019-10-08T18:14:54Z", "message": "update test case and change API access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157ba5a39415829e25efc342cafd08669a130dd2", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/157ba5a39415829e25efc342cafd08669a130dd2", "committedDate": "2019-10-08T18:21:27Z", "message": "fix asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "026d74d17a249348533a9d3fce27e7a6572d6212", "author": {"user": {"login": "marcin-bukowiecki", "name": "Marcin Bukowiecki"}}, "url": "https://github.com/elastic/apm-agent-java/commit/026d74d17a249348533a9d3fce27e7a6572d6212", "committedDate": "2019-10-08T18:23:32Z", "message": "fix asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "783bbfa65e2ca81ac46877b7b72942120abe4e09", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/783bbfa65e2ca81ac46877b7b72942120abe4e09", "committedDate": "2020-04-30T08:38:05Z", "message": "bootstrap plugin module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b902c2b529dad8b661de71a7d80d68d4ad15625f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b902c2b529dad8b661de71a7d80d68d4ad15625f", "committedDate": "2020-04-30T09:42:48Z", "message": "refactor test app in separate module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6947f93424406f515a91946f44fe1e6f8c6c889f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6947f93424406f515a91946f44fe1e6f8c6c889f", "committedDate": "2020-05-04T14:20:49Z", "message": "remove ivy from global test deps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9965964d25d125305dd96d2284efae0404f766", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/da9965964d25d125305dd96d2284efae0404f766", "committedDate": "2020-05-04T14:47:15Z", "message": "first working webflux testapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "871582bfda84bd9188d7ee14d4f0462bb7f1ce21", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/871582bfda84bd9188d7ee14d4f0462bb7f1ce21", "committedDate": "2020-05-04T16:41:29Z", "message": "start adding few tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc4d66a79f4fc34d4fc54697fa8687607ca9927", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/efc4d66a79f4fc34d4fc54697fa8687607ca9927", "committedDate": "2020-05-04T16:46:25Z", "message": "move to proper test package + code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c0add7b866ec3e08bd1d2f55bae95bc6736d96", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/60c0add7b866ec3e08bd1d2f55bae95bc6736d96", "committedDate": "2020-05-05T12:24:07Z", "message": "package as a standalone jar app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14b04e9411e30125c1ea8a066e1fed3f4d00f671", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/14b04e9411e30125c1ea8a066e1fed3f4d00f671", "committedDate": "2020-05-05T12:30:43Z", "message": "create plugin module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebed467881c43cb8c4c3169f405d517f85efd456", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ebed467881c43cb8c4c3169f405d517f85efd456", "committedDate": "2020-05-12T08:19:10Z", "message": "wip improve test app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3734bd83a4fdd0ecef213a040df4bae8088b9f08", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3734bd83a4fdd0ecef213a040df4bae8088b9f08", "committedDate": "2020-05-12T08:21:38Z", "message": "wip instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41f8a02835929b47ee43852230d097224f91094", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d41f8a02835929b47ee43852230d097224f91094", "committedDate": "2020-05-13T13:31:24Z", "message": "add missing jackson on classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c4631e411e34d0e759df9d5766432a28955e83", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/60c4631e411e34d0e759df9d5766432a28955e83", "committedDate": "2020-05-14T12:11:21Z", "message": "wip test app with functional & rest controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fab74fb7b28dcbf293658fa88f44f510c043397", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9fab74fb7b28dcbf293658fa88f44f510c043397", "committedDate": "2020-05-14T14:51:50Z", "message": "make junit test work on maven CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3dc9678470f25938c8581605f9f7ca12584969e", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/e3dc9678470f25938c8581605f9f7ca12584969e", "committedDate": "2020-05-28T08:43:28Z", "message": "Merge branch 'mb-add-spring-webflux-plugin' of https://github.com/marcin-bukowiecki/apm-agent-java into marcin-bukowiecki-mb-add-spring-webflux-plugin\n\n# Conflicts:\n#\tCHANGELOG.md\n#\tdocs/configuration.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4d351cda598fd26b7ac4ecf06a0dfdafdbe16b", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/2e4d351cda598fd26b7ac4ecf06a0dfdafdbe16b", "committedDate": "2020-05-28T08:44:02Z", "message": "Merge branch 'marcin-bukowiecki-mb-add-spring-webflux-plugin' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed216139ef8ba4e68025acde78db12e46e45ad36", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/ed216139ef8ba4e68025acde78db12e46e45ad36", "committedDate": "2020-06-08T19:40:26Z", "message": "Improve Spring WebFlux support\nAdd Reactive Netty instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac3efdfbc8891120824f7fc9dada364daaddfc66", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/ac3efdfbc8891120824f7fc9dada364daaddfc66", "committedDate": "2020-06-09T20:46:02Z", "message": "group transactions by methods\ncapture exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cbc7b9a4f4cefff3fc085a2fbf43ba38d6177a2", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/2cbc7b9a4f4cefff3fc085a2fbf43ba38d6177a2", "committedDate": "2020-06-10T19:54:26Z", "message": "fix transaction duration calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a7e1f4b0fab306f02b08e89906b19828569249b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4a7e1f4b0fab306f02b08e89906b19828569249b", "committedDate": "2020-06-17T08:12:07Z", "message": "make plugin compile for java8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98e7c0bb0153d3183b31099f1053aaf2b5d66279", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/98e7c0bb0153d3183b31099f1053aaf2b5d66279", "committedDate": "2020-06-17T08:20:03Z", "message": "throw exception on missing resutl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee4fb289475b15d284f6c15c2b293d55e7664f5", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cee4fb289475b15d284f6c15c2b293d55e7664f5", "committedDate": "2020-06-17T08:21:24Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0450d14d1502d724a572a22f34d207a3da0e9316", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0450d14d1502d724a572a22f34d207a3da0e9316", "committedDate": "2020-06-17T08:24:55Z", "message": "Merge branch 'add-spring-webflux' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "989d187f5dc026498eeb4af7fb29341b6bc029a0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/989d187f5dc026498eeb4af7fb29341b6bc029a0", "committedDate": "2020-06-17T17:05:32Z", "message": "wip make test app exhaustive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08dede202b1a91b56921f380abc4870e643ce8b3", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/08dede202b1a91b56921f380abc4870e643ce8b3", "committedDate": "2020-06-23T08:24:49Z", "message": "limit test to most common http verbs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210e3b13887b483590277525db9fc8dc8a0b8f48", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/210e3b13887b483590277525db9fc8dc8a0b8f48", "committedDate": "2020-06-23T09:20:09Z", "message": "test both types of endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e2accdd86e64a8e5722c98410493e010bd80a0d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8e2accdd86e64a8e5722c98410493e010bd80a0d", "committedDate": "2020-06-23T12:43:31Z", "message": "wip merge tests & instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be93359cadc8224121c21b7f73ba1514fd3887e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7be93359cadc8224121c21b7f73ba1514fd3887e", "committedDate": "2020-06-23T14:56:50Z", "message": "wip make some tests work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b657010280e1fb6b785fc89214a46385b732878e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b657010280e1fb6b785fc89214a46385b732878e", "committedDate": "2020-06-25T09:57:11Z", "message": "keep agent debug logs while testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04981897ff8638fefdc746a245d2d7c2cc6d731b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/04981897ff8638fefdc746a245d2d7c2cc6d731b", "committedDate": "2020-06-25T13:17:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb8fbc49c955a25c55248ce65b4644488077599", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cfb8fbc49c955a25c55248ce65b4644488077599", "committedDate": "2020-06-25T13:18:38Z", "message": "add missing package info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edb94dc7040c7d3c837b53b130a91090bf9fcc7", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4edb94dc7040c7d3c837b53b130a91090bf9fcc7", "committedDate": "2020-06-25T15:06:29Z", "message": "Implement path-pattern transaction naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225d86b860c0dbe7a06d04f77a49c0610444a8f2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/225d86b860c0dbe7a06d04f77a49c0610444a8f2", "committedDate": "2020-06-26T08:19:11Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e50717be88bde258c8a689870305a410f3e4b3", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a5e50717be88bde258c8a689870305a410f3e4b3", "committedDate": "2020-06-26T09:19:42Z", "message": "improve test app tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08f11eb7915d4f44f0d2382c5a4c45d9146e26f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d08f11eb7915d4f44f0d2382c5a4c45d9146e26f", "committedDate": "2020-06-26T14:16:05Z", "message": "merge instrumentation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9db3d7352ec969f7675b77db86ddbe635582a28", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b9db3d7352ec969f7675b77db86ddbe635582a28", "committedDate": "2020-06-26T14:30:49Z", "message": "rename mapping & classes for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e426d2a39f048c682d8e423d8ef5d1eb09fafafd", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e426d2a39f048c682d8e423d8ef5d1eb09fafafd", "committedDate": "2020-06-26T14:39:29Z", "message": "apply same test to both implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe3d51fcca1da5e917ed8cee74fdd9c791d9f86", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4fe3d51fcca1da5e917ed8cee74fdd9c791d9f86", "committedDate": "2020-06-26T14:45:00Z", "message": "change package for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2955cc5f3daadb3e8266d2bf58d4653ceafddd0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b2955cc5f3daadb3e8266d2bf58d4653ceafddd0", "committedDate": "2020-07-07T13:56:57Z", "message": "update grpc version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de539f47e7f78953116ee1333c2d26c8a8705507", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/de539f47e7f78953116ee1333c2d26c8a8705507", "committedDate": "2020-07-07T17:09:06Z", "message": "provide simpler way to provide full url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8840d081bed1bfb0049ecab6f36f3c26550b37", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/af8840d081bed1bfb0049ecab6f36f3c26550b37", "committedDate": "2020-07-09T08:02:39Z", "message": "add HTTP request details capture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb38059e724889dba52d80f251a8465c63cfd91", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7fb38059e724889dba52d80f251a8465c63cfd91", "committedDate": "2020-07-09T13:29:39Z", "message": "use transactiuon naming consistent with servlets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5becc5cde992cb95f918cb44f62de4ac2a400a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bf5becc5cde992cb95f918cb44f62de4ac2a400a", "committedDate": "2020-07-09T16:25:14Z", "message": "improve transaction naming & fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d1ea10ff1f6a1dc41c8c4a86426baa1f2d93c1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/03d1ea10ff1f6a1dc41c8c4a86426baa1f2d93c1", "committedDate": "2020-07-09T16:31:36Z", "message": "fix exception capture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a90dbbc452a7e867e7af5fd1688969b0993d1293", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a90dbbc452a7e867e7af5fd1688969b0993d1293", "committedDate": "2020-07-15T07:53:13Z", "message": "(disabled) attempt to rename transaction with API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecf7791047e2d6c933fbd7ff184196de8f00c95d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ecf7791047e2d6c933fbd7ff184196de8f00c95d", "committedDate": "2020-07-15T09:39:56Z", "message": "add TODO list to readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a8b7db33e346250880b590147f3aa7ac438f0f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c2a8b7db33e346250880b590147f3aa7ac438f0f", "committedDate": "2020-07-15T12:21:19Z", "message": "activate transaction on subscription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dce953e9d136de588e5503283989022f268ed4", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/19dce953e9d136de588e5503283989022f268ed4", "committedDate": "2020-07-15T12:22:55Z", "message": "add random port for test app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15eaecf1830f8f4ab412a47df72cda1267a7ac0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d15eaecf1830f8f4ab412a47df72cda1267a7ac0", "committedDate": "2020-07-15T14:17:59Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e1cb09462497b848431299d0c66321a503db30f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6e1cb09462497b848431299d0c66321a503db30f", "committedDate": "2020-07-15T14:18:30Z", "message": "add transaction timing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee9033d530490992810689f55fa14206d092a01", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6ee9033d530490992810689f55fa14206d092a01", "committedDate": "2020-07-16T07:13:07Z", "message": "simplify instrumentation and improve transaction naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b413d72e5ca3b9d2858fe136be037aea37f07c84", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b413d72e5ca3b9d2858fe136be037aea37f07c84", "committedDate": "2020-07-17T20:55:33Z", "message": "compatibility & testing with servlets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ea13b8e85bb9286c1c80b958ed3a81886d2267", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/16ea13b8e85bb9286c1c80b958ed3a81886d2267", "committedDate": "2020-07-20T09:07:01Z", "message": "fix non-servlet transaction end"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16f1e89f28cf53c849f9c357a8972cbbe76636a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d16f1e89f28cf53c849f9c357a8972cbbe76636a", "committedDate": "2020-07-20T09:41:02Z", "message": "add sample request in test app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70e4483373e2f5d753c5e67e77b1b075a8c1cfb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b70e4483373e2f5d753c5e67e77b1b075a8c1cfb", "committedDate": "2020-07-20T09:49:47Z", "message": "use proper logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e081d39f06629c52710fc401ef7ff40e631a81d7", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e081d39f06629c52710fc401ef7ff40e631a81d7", "committedDate": "2020-07-20T15:28:10Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3492235fcd0241bbe06f7e1cffe69fbc2d4ae8", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7a3492235fcd0241bbe06f7e1cffe69fbc2d4ae8", "committedDate": "2020-07-21T09:39:05Z", "message": "fix plugin dependencies & extra runtime test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1043b4e0b6f05c6d01d59b741892c9f49161469", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e1043b4e0b6f05c6d01d59b741892c9f49161469", "committedDate": "2020-07-21T15:22:17Z", "message": "improve validation errors for indy plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b57fce004aa88d7423291af2469ac903be7829b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8b57fce004aa88d7423291af2469ac903be7829b", "committedDate": "2020-07-21T15:24:20Z", "message": "rename to single level package + indify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba80f0f72b07bd795201372107c60f8984523987", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ba80f0f72b07bd795201372107c60f8984523987", "committedDate": "2020-07-21T19:11:27Z", "message": "fix class type & loading issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31511db6f5b9d5135f0519d8272fb0b0b69e9c07", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/31511db6f5b9d5135f0519d8272fb0b0b69e9c07", "committedDate": "2020-07-22T07:22:32Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410bec9f66ffc0f8c25d05db0c6c128de61835e9", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/410bec9f66ffc0f8c25d05db0c6c128de61835e9", "committedDate": "2020-07-22T12:23:54Z", "message": "add 'client' test mode for app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f85d8d689ca94ef5ec8e36f1605c36091f50e29e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f85d8d689ca94ef5ec8e36f1605c36091f50e29e", "committedDate": "2020-07-22T12:43:00Z", "message": "remove wip wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b18fd4f5a7c9e0d0d3d79327a98aea2fd737c6bb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b18fd4f5a7c9e0d0d3d79327a98aea2fd737c6bb", "committedDate": "2020-07-22T12:58:02Z", "message": "minor post-review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4898ee8de38486ffd5c2187b23201679359eeda9", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4898ee8de38486ffd5c2187b23201679359eeda9", "committedDate": "2020-07-22T12:59:45Z", "message": "remove previous instrumentations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cdae947712474efe7fd903b3761648fe65c72a3", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3cdae947712474efe7fd903b3761648fe65c72a3", "committedDate": "2020-07-23T08:16:56Z", "message": "make plugin java7 compliant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa4ba1763c3b6e27cf85bdd0496ff4f92404285", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6fa4ba1763c3b6e27cf85bdd0496ff4f92404285", "committedDate": "2020-07-23T08:19:57Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ab4f884a46fbf2a70ee993562fa418c9dec51f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/13ab4f884a46fbf2a70ee993562fa418c9dec51f", "committedDate": "2021-02-09T09:48:17Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d695c9d75d7860d9e3361a9c6ded2bd30873a776", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d695c9d75d7860d9e3361a9c6ded2bd30873a776", "committedDate": "2021-02-09T10:03:28Z", "message": "make it less flaky"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e8ba07dc170182d71f219aae8a326cb35310bd", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/50e8ba07dc170182d71f219aae8a326cb35310bd", "committedDate": "2021-02-10T09:35:58Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b475fe662b88c622f8927e0384762a66538433e4", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b475fe662b88c622f8927e0384762a66538433e4", "committedDate": "2021-02-11T16:16:10Z", "message": "add basic reactor plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf96ce79accba91550fe3b958218b4a42b71e8e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3cf96ce79accba91550fe3b958218b4a42b71e8e", "committedDate": "2021-02-15T16:57:22Z", "message": "first attempt to reuse reactor instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6403d97663b28f65ac84f7d6515f06ba803df2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5d6403d97663b28f65ac84f7d6515f06ba803df2", "committedDate": "2021-02-18T15:39:14Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "642de229965f05185ed152ece6d16ffb79bb0935", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/642de229965f05185ed152ece6d16ffb79bb0935", "committedDate": "2021-02-18T21:25:18Z", "message": "basic reactor context propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "989bfe3f0ddc77c651b2f7f108b61774720895d5", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/989bfe3f0ddc77c651b2f7f108b61774720895d5", "committedDate": "2021-02-19T09:24:46Z", "message": "fix some context broken context propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c03b1c0fa7d34be626905fb48df31dde0124aa", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d2c03b1c0fa7d34be626905fb48df31dde0124aa", "committedDate": "2021-02-19T13:28:45Z", "message": "minor tweaks to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2158bd591b903ded277d40910cde5d58f3349713", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2158bd591b903ded277d40910cde5d58f3349713", "committedDate": "2021-02-19T13:51:15Z", "message": "fix flaky unexpected main thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88952ab1a80ff002c8c0151021f3434d1a9eaf2b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/88952ab1a80ff002c8c0151021f3434d1a9eaf2b", "committedDate": "2021-02-19T14:57:30Z", "message": "better cooperation with servlet transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42e230268f923e0dbce2d3692a9206feca55660", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a42e230268f923e0dbce2d3692a9206feca55660", "committedDate": "2021-03-02T14:04:12Z", "message": "temp work-around ForkJoin instrumentation issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "108196eda8273bdf46e5ebaa239cbb0eafb4a9e3", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/108196eda8273bdf46e5ebaa239cbb0eafb4a9e3", "committedDate": "2021-03-02T15:55:35Z", "message": "remove minor concurrency issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaff5f07b3009d185eea000368391952779fe6ff", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/aaff5f07b3009d185eea000368391952779fe6ff", "committedDate": "2021-03-02T15:59:27Z", "message": "deal with child spans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2080572dcd9284bdb3a197391739357eb88a2f12", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2080572dcd9284bdb3a197391739357eb88a2f12", "committedDate": "2021-03-03T13:19:31Z", "message": "context propagation before mono returned"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b093020eca488a3f265c700124f2d0f21827548", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1b093020eca488a3f265c700124f2d0f21827548", "committedDate": "2021-03-03T14:10:52Z", "message": "ensure transaction ends only once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37471936b7460163ba43d273733569d66abcb0f9", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/37471936b7460163ba43d273733569d66abcb0f9", "committedDate": "2021-03-03T14:20:29Z", "message": "thou shalt please javac"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b42680d556cbed288127f0436d88e837438e4ce0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b42680d556cbed288127f0436d88e837438e4ce0", "committedDate": "2021-03-03T14:40:27Z", "message": "add comment for work-around"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40a50dae748ad74d3b9c729282b5a04d6ec9001", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c40a50dae748ad74d3b9c729282b5a04d6ec9001", "committedDate": "2021-03-08T15:56:28Z", "message": "fluxify client + add SSE support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1420764d9c3e75a07c99c22b72be653ac84fd86", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a1420764d9c3e75a07c99c22b72be653ac84fd86", "committedDate": "2021-03-08T16:09:02Z", "message": "Merge branch 'master' into mb-add-spring-webflux-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70cba29b9d108c95b5ee8b51a77cbd14ff01e29f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/70cba29b9d108c95b5ee8b51a77cbd14ff01e29f", "committedDate": "2021-03-08T19:02:10Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fac1f85b008e94702b3827f69175db1afa8cf4c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5fac1f85b008e94702b3827f69175db1afa8cf4c", "committedDate": "2021-03-09T14:12:37Z", "message": "cleanup tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9294a9fd493ebd31d1ed5d7b1de950914bdefa65", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9294a9fd493ebd31d1ed5d7b1de950914bdefa65", "committedDate": "2021-03-10T15:01:01Z", "message": "properly ignore SSE transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170dd0e1e8febf14a0db19f85630054686a2b271", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/170dd0e1e8febf14a0db19f85630054686a2b271", "committedDate": "2021-03-11T10:23:29Z", "message": "add websocket to test app + make sure it's ignored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2266aa0eab0ad10b6c8c1bd455a962e33a0ee68", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a2266aa0eab0ad10b6c8c1bd455a962e33a0ee68", "committedDate": "2021-03-15T16:15:14Z", "message": "Update slf4j and add to dependabot allow list (#1669)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3810, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}