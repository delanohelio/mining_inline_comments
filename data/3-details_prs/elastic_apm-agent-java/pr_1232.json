{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTU0MTg4", "number": 1232, "title": "Fix another exception related to inferred spans", "bodyText": "closes #1229", "createdAt": "2020-06-15T13:49:50Z", "url": "https://github.com/elastic/apm-agent-java/pull/1232", "merged": true, "mergeCommit": {"oid": "7c9c5e44782c56be309eef7a897e9196cbe8ffc5"}, "closed": true, "closedAt": "2020-06-16T10:00:06Z", "author": {"login": "felixbarny"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrgHiKgH2gAyNDM0NTU0MTg4OjUwMjI4ZjVmZjFjN2Q3OTRmMjI5OWM5Y2M2ZDc2ZmQ1YjYxZmExZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcryA37AFqTQzMTMzMzEyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9", "committedDate": "2020-06-15T12:50:01Z", "message": "Fix another exception related to inferred spans\n\ncloses #1229"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjQ3MTc2", "url": "https://github.com/elastic/apm-agent-java/pull/1232#pullrequestreview-431247176", "createdAt": "2020-06-16T07:52:15Z", "commit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1MjoxNVrOGkPctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1MjoxNVrOGkPctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ==", "bodyText": "If you are OK with OutOfMemoryError being thrown here, why even check that the max is exceeded? In any case it may be out of memory before that, depending on what the heap got left. I think this max check makes sense only if you limit it to a much lower number, and then you throw some IllegalStateException or something. Currently you allow it to grow to ~2 GB (consecutive block) for each list, which seems a lot.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440655031", "createdAt": "2020-06-16T07:52:15Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzMzMTI4", "url": "https://github.com/elastic/apm-agent-java/pull/1232#pullrequestreview-431333128", "createdAt": "2020-06-16T09:39:54Z", "commit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozOTo1NVrOGkTflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozOTo1NVrOGkTflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTMwMw==", "bodyText": "It is a slippery slope, just overthought this because of the specific issue with this one.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440721303", "createdAt": "2020-06-16T09:39:55Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ=="}, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3749, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}