{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDMyNDc4", "number": 1058, "title": "Fully-automated release process", "bodyText": "Summary\nThis PR introduces a fully-automated release process.\nDependencies\nThis PR cannot be merged until elastic/infra#18234 is merged. Additionally, a new release of the APM Pipeline Library is needed which includes this PR: elastic/apm-pipeline-library#413\nDesign\nThe design of this PR is to be purely additive.\nThe current release process can still be executed using the same means as prior to this change. Where previously, however, there were a number of manual steps, this new pipeline can be run which will attempt to automate the bulk of those.\nUse\nAfter the pre-requisite PRs are merged and this PR is also merged, the internal CI server should have a new \"post-release\" job which contains the logic in this PR.\nTo run the post-build steps, the job will need to be run. It is important that when launching the job that a window is kept open because the job will present dialogue asking questions as the release process progresses. I would prefer if we perhaps set up a Zoom call during the first few invocations of this job so that I can be on-hand to help debug any errors. While this is tested wherever possible, the nature of this job makes testing certain elements somewhat challenging.\nFor the time being, your release process should not change. We will take this as incrementally as you like.\nIf there is a desire to split this into more discrete changes, or even to merge this in pieces, I am open to that option. Please provide feedback about this question if it's a concern.\nMaturity\nThis is being submitted as a draft in order to get feedback from the AQA team and from the apm-agent-java folks.\nReviewing\nFor the AQA team:\n\n\nPlease make sure the Jenkins pipeline syntax looks correct. I'm sure there are a few places where things could be improved.\n\n\nIn a few cases, this drops back to a shell. Please mark any cases where you think this would be better encapsulated in our pipeline library or where the same functionality can be achieved using existing Jenkins run-time variables or by composing pieces of our library. (I'm almost certain there are at least one or two of these.\n\n\nBugs :)\n\n\nFor the apm-agent-java team:\n\n\nI tried my best to leave plain-text documentation to make this easy to follow. In a few cases, it may not be obvious what is happening so please ask questions!\n\n\nIf you don't want to automate any of these steps, it's very easy to put them behind gates and default them to being disabled. (Or just to remove them entirely.) Please mark any areas of concerns where you might like us to do this.\n\n\nI know that we discussed the automated CHANGELOG in another issue. I have included a step here which generates a CHANGELOG and just provides it as an artifact at the end of the build. I am happy to remove/disable it if you aren't interested in having this artifact available to inspect. It does not modify files in the repo or affect the build in any way.", "createdAt": "2020-02-28T14:56:07Z", "url": "https://github.com/elastic/apm-agent-java/pull/1058", "merged": true, "mergeCommit": {"oid": "9a5f42a7e0cd80ac4d55cd0bdb842cefee921981"}, "closed": true, "closedAt": "2020-06-11T09:28:09Z", "author": {"login": "cachedout"}, "timelineItems": {"totalCount": 77, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIy4haAFqTM2NjUzOTU4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqJhKQABqjM0MzI5NDI0NTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTM5NTgw", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-366539580", "createdAt": "2020-02-28T16:49:25Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0OToyNVrOFv7rGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NDoyMFrOFv71cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTA4Mg==", "bodyText": "What do you think to move this logic to a shell script?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385805082", "createdAt": "2020-02-28T16:49:25Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTYzNw==", "bodyText": "Shell script that returns the URL?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385805637", "createdAt": "2020-02-28T16:50:28Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjk3Ng==", "bodyText": "This should be tag-based, this pipeline is master based IIRC, therefore the tag conditional can be left as it was previously, what do you think?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385806976", "createdAt": "2020-02-28T16:53:03Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzczMA==", "bodyText": "nit:\nmaybe DEFAULT_MAVEN_CONFIG ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r385807730", "createdAt": "2020-02-28T16:54:20Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDUxMDE3", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371051017", "createdAt": "2020-03-09T10:23:49Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMzo0OVrOFzhmvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDozOTo1NlrOFziG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MjI4Nw==", "bodyText": "What are the use-cases of overriding maven config on a per build basis ? I'm pretty sure we haven't had to use this so far.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389572287", "createdAt": "2020-03-09T10:23:49Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDUxOA==", "bodyText": "we switched to using versions plugin instead in latest version of the release instructions https://github.com/elastic/apm-agent-java/blob/master/CONTRIBUTING.md#releasing", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389574518", "createdAt": "2020-03-09T10:28:04Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw==", "bodyText": "does the #welcome part of the URL matters here ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389574913", "createdAt": "2020-03-09T10:28:46Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Nzk5MQ==", "bodyText": "Also, as an alternative, it might be easier to get project version from maven pom.xml rather than parsing it from git.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389577991", "createdAt": "2020-03-09T10:34:40Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNTA4Mg=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3OTc3Mg==", "bodyText": "probably worth having a non-obscure credentials ID and/or a proper env variable for this.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389579772", "createdAt": "2020-03-09T10:38:15Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }\n+          }\n+          steps {\n+            sh(label: \"Build Docker image\", script: \"scripts/jenkins/build_docker.sh\")\n+            // Get Docker registry credentials\n+            dockerLogin(secret: \"${ELASTIC_DOCKER_SECRET}\", registry: 'docker.elastic.co')\n+            sh(label: \"Push Docker image\", script: \"scripts/jenkins/push_docker.sh\")\n+          }\n+        }\n+        // 14. Opbeans\n+        stage('Opbeans') {\n+          environment {\n+            REPO_NAME = \"${OPBEANS_REPO}\"\n+          }\n+          steps {\n+            deleteDir()\n+            dir(\"${OPBEANS_REPO}\"){\n+              git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4MDUzNg==", "bodyText": "What controls params.push_docker value ? Isn't it always true for release pipeline ?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389580536", "createdAt": "2020-03-09T10:39:56Z", "author": {"login": "SylvainJuge"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})\n+          }\n+        }\n+        // 13. Publish Docker images\n+        stage('Docker push') {\n+          when {\n+            beforeAgent true\n+            expression { return params.push_docker }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTIyMzU2", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371122356", "createdAt": "2020-03-09T12:30:45Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozMDo0NVrOFzlHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo0NjoyOFrOFzlkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyOTg1Ng==", "bodyText": "For a future improvement: could we use this: https://status.maven.org/history.atom", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389629856", "createdAt": "2020-03-09T12:30:45Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDkxMw=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMTkzNg==", "bodyText": "what happens if there are multiple staging repos (for example a leftover from a failed release)?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389631936", "createdAt": "2020-03-09T12:35:12Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMjM5MQ==", "bodyText": "Closing can take a minute or two. Does this return after triggering the close or after the close is finished?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389632391", "createdAt": "2020-03-09T12:36:08Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNTM1Mw==", "bodyText": "let's to this after the Wait for artifact to be available in Maven Central step", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389635353", "createdAt": "2020-03-09T12:42:29Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNjA3NQ==", "bodyText": "what's the title of the release? So far, we did \"Release $version\".", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389636075", "createdAt": "2020-03-09T12:43:59Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNzE5Mg==", "bodyText": "Does that mean it first starts to try after 15 sec? Is there a timeout? It usually takes around 10 min.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389637192", "createdAt": "2020-03-09T12:46:28Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTM2NDI3", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371136427", "createdAt": "2020-03-09T12:51:49Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1MTo0OVrOFzlu_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1MTo0OVrOFzlu_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA==", "bodyText": "How does the release job get triggered?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389639934", "createdAt": "2020-03-09T12:51:49Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzUwMTc2", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371350176", "createdAt": "2020-03-09T16:46:22Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0NjoyM1rOFzwo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0NjoyM1rOFzwo-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODYxNw==", "bodyText": "Instead of updating the version here, I wonder if we should instead require the release version to be set in the release job. See https://maven.apache.org/maven-release/maven-release-plugin/examples/non-interactive-release.html\nWe could then also require to set the next dev version. The release plugin offers system properties for the release and next dev version: -DreleaseVersion=1.2.0  -DdevelopmentVersion=1.3.0-SNAPSHOT.\n@eyalkoren @SylvainJuge WDYT?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389818617", "createdAt": "2020-03-09T16:46:23Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzY5NzAy", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371369702", "createdAt": "2020-03-09T17:10:48Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMDo0OFrOFzxk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMzowNFrOFzxqew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzk2OA==", "bodyText": "BTW, I love that this just delegates to the existing and battle-tested release job instead of re-inventing this step which is definitely the most critical piece.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389833968", "createdAt": "2020-03-09T17:10:48Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTkzNA=="}, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTM4Nw==", "bodyText": "Could we add a step that checks whether the current build on master is green?\n(Not required for the first version)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r389835387", "createdAt": "2020-03-09T17:13:04Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzQzNDEy", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371743412", "createdAt": "2020-03-10T08:10:03Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxMDowM1rOF0ErGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxMDowM1rOF0ErGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0Njg0Mw==", "bodyText": "The GH release contains a link to a release-notes URL calculated in the Create GitHub release draft stage. This link will be available after the relevant branch gets built, after pushing the new tag in the Branch creation phase.\nIt takes time, so this step needs to block until the release-notes URL is available, otherwise we will publish a Release with a broken link.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390146843", "createdAt": "2020-03-10T08:10:03Z", "author": {"login": "eyalkoren"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              // Show the select input modal\n+              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: \"This will run `mvn release:update-versions`\")]\n+              if (INPUT_PARAMS == 'Yes') {\n+                  dir(\"${BASE_DIR}\") {\n+                    sh mvn release:update-versions\n+                  }\n+              } else {\n+                  echo 'Skipping version update'\n+              }\n+            }\n+          }\n+        }\n+        // 3. Execute the release Jenkins job on the internal ci server.\n+            // For now we assume that the release has been pushed to staging already on the internal CI\n+        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+\n+              }\n+            }\n+          }\n+        }\n+        // 5. Fetch and checkout the latest tag e.g. git fetch origin\n+          // We already have this :)\n+        // 6. If this was a major release, create a new branch for the major.\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d \".\"|{ read ver; test $ver == \"0.0\"; }', returnStatus: true)\n+                if (isMajor == 0) {\n+                  // We need to create a new branch. First get the name of the branch\n+                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  echo \"This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub.\"\n+                  // Now we need to branch\n+                  sh(script: \"git checkout -b $newBranchName\")\n+                  // And push\n+                  githubEnv()\n+                  gitPush() \n+                  // 6.1 Add the new branch to the conf.yaml in the docs repo\n+                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                } else {  // This was a minor release\n+                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0\n+                  // Determine current tag\n+                  def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                  def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                  sh(script: \"git branch -f $targetBranch $curTag\")\n+                  gitPush()\n+                }\n+              }\n+              // Checkout the tag again!\n+              sh(\"git checkout ${BUILD_TAG}\")\n+            }\n+          }\n+        }\n+        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. \n+        stage('Generate a proposed CHANGELOG') {\n+          steps {\n+            githubEnv()\n+            generateChangelog(repo: 'apm-agent-java')\n+          }\n+        }\n+        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.\n+        stage('Create GitHub release draft') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curTag = sh(script: \"git tag|tail -1\", returnStdout: true)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def baseUrl = \"https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-\"\n+                def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def finalUrl = sh(script: \"echo $baseUrl$dotX\\.html#release-notes-$bareTag\")\n+                def ret = githubReleaseCreate(draft: true, body: \"[Release Notes for $bareTag]($finalUrl)\")\n+                env.RELEASE_ID = ret['id']\n+              }\n+            }\n+\n+          }\n+        }\n+        // 10. Update cloudfoundry/index.yml\n+        // Needs to append a line such as the following:\n+        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            dir(\"${basedir}\") {\n+              script {\n+                sh(\"git checkout master\")\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def baseUrl = \"https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent\"\n+                def lineToAppend = sh(script: \"echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\\.jar' >> cloudfoundry/index.yml \")\n+                gitPush()\n+              }\n+            }\n+          }\n+        }\n+        // 11. Wait for released package to be available in maven central\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                // We are looking for something like this:\n+                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom\n+                def baseUrl = \"https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java\"\n+                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)\n+                def fullUrl = sh(script: \"$baseUrl/$bareTag/apm-agent-java-$bareTag\\.pom\")\n+                waitUntil(initialRecurrencePeriod: 15000) {\n+                  script {\n+                    def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                    echo \"Waiting for the artifacts to be published on Sonatype\"\n+                    return ret == 0\n+                  }\n+                }\n+              }\n+            }\n+\n+          }\n+        }\n+        // 12. Publish release on Github. This will notify users watching repository.\n+        stage('Publish release on GitHub') {\n+          steps {\n+            githubReleasePublish(id: ${env.RELEASE_ID})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzU4MDg5", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371758089", "createdAt": "2020-03-10T08:37:29Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzU4NTMx", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-371758531", "createdAt": "2020-03-10T08:38:13Z", "commit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozODoxNFrOF0FcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozODoxNFrOF0FcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1OTM5NA==", "bodyText": "We have added another step since you have started working on this regarding documentation:\n\nUpdate CHANGELOG.asciidoc to reflect the new version release:\nGo over PRs or git log and add bug fixes and features.\nMove release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n\nThis step seems a bit tricky to automate. But we could instead just show this instruction in an input. When done with manually reviewing and adjusting the release notes, the automated release continues.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r390159394", "createdAt": "2020-03-10T08:38:14Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,235 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+        MAVEN_CONFIG = \"${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668eabc167475153708ee930eab7cd48907c9c0"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODAyNTE2", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-383802516", "createdAt": "2020-03-30T12:27:56Z", "commit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzo1NlrOF9nS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozMzo1N1rOF9ng2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MTI5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                OPBEANS_REPO = 'opbeans-java'", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400151291", "createdAt": "2020-03-30T12:27:56Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MjY3Mw==", "bodyText": "These env variables are only defined in the top-level Initializing stage that it's only used in the nested checkout stage. Is this required for the other stages?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400152673", "createdAt": "2020-03-30T12:30:09Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MzIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          sh(script: \"git checkout -f {$branch_specifier}\")\n          \n          \n            \n                          sh(script: \"git checkout -f ${branch_specifier}\")", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400153215", "createdAt": "2020-03-30T12:31:03Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDg0Mw==", "bodyText": "Moved to the script closure\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // 2.1 Fetch the current version from pom.xml\n          \n          \n            \n                        def ver = mvnVersion(showQualifiers: true)\n          \n          \n            \n                        // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n          \n          \n            \n                        script {\n          \n          \n            \n                          def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n          \n          \n            \n                        script {\n          \n          \n            \n                          // 2.1 Fetch the current version from pom.xml\n          \n          \n            \n                          def ver = mvnVersion(showQualifiers: true)\n          \n          \n            \n                          // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n          \n          \n            \n                          def should_continue = input(message: \"Current version is ${ver}\", parameters: [", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r400154843", "createdAt": "2020-03-30T12:33:57Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,238 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    OPBEANS_REPO = 'opbeans-java'\n+\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      environment {\n+        HOME = \"${env.WORKSPACE}\"\n+        JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+        PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+      }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f {$branch_specifier}\")\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            httpRequest(url: \"https://oss.sonatype.org/#welcome\")\n+          }\n+        }\n+        // 1.1 Check to ensure the build is green. Require confirmation if it is not.\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        // 2. Review project version.\n+        stage('Review project version') {\n+          steps {\n+            // 2.1 Fetch the current version from pom.xml\n+            def ver = mvnVersion(showQualifiers: true)\n+            // 2.2 Raise a prompt asking if the version is correct or if they wish to update\n+            script {\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9ea08b73db9687fb70a1ea7a78abf993df369a"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjMzNzI5", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-398233729", "createdAt": "2020-04-22T14:12:40Z", "commit": {"oid": "d93fe965503acc9a8b8b9d876c28b02ececa2688"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMjo0MFrOGJ4q_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMjo0MFrOGJ4q_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxODg3OA==", "bodyText": "A few comments regarding the git commands\n\nIs it possible to use the gitCheckout step instead the sh step? If so, then we can remove the githubEnv references\nCan we use the withGitRelease step before pushing with the command gitPush?\nCan we use the setupAPMGitEmail step to configure the user.email and user.name?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r413018878", "createdAt": "2020-04-22T14:12:40Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,255 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        /**\n+         Checkout the code\n+        */\n+        stage('Checkout') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              // This is required to ensure that Maven is working with a real branch\n+              sh(script: \"git checkout -f ${branch_specifier}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93fe965503acc9a8b8b9d876c28b02ececa2688"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTI5MjE1", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-402529215", "createdAt": "2020-04-29T10:08:07Z", "commit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowODowN1rOGN4JDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoyMDo0OVrOGN4h3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNDQ5NA==", "bodyText": "See #1058 (comment)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          setupAPMGitEmail()", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417204494", "createdAt": "2020-04-29T10:08:07Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNzk4OA==", "bodyText": "What do you think to move the setupAPMGitEmail before the stash? Then all the other calls afteeward are not required:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          setupAPMGitEmail()\n          \n          \n            \n                          script {\n          \n          \n            \n                            env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n          \n          \n            \n                            env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n          \n          \n            \n                            env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n          \n          \n            \n                          }\n          \n          \n            \n                        }\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          setupAPMGitEmail()\n          \n          \n            \n                        }\n          \n          \n            \n                        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n          \n          \n            \n                        dir(\"${BASE_DIR}\") {\n          \n          \n            \n                          script {\n          \n          \n            \n                            env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n          \n          \n            \n                            env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n          \n          \n            \n                            env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n          \n          \n            \n                          }\n          \n          \n            \n                        }", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417207988", "createdAt": "2020-04-29T10:14:51Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwODY2OQ==", "bodyText": "See #1058 (comment) and #1058 (comment)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          script {\n          \n          \n            \n                            env.BRANCH_NAME = \"master\"\n          \n          \n            \n                          }\n          \n          \n            \n                          withGitRelease() {\n          \n          \n            \n                            setupAPMGitEmail()\n          \n          \n            \n                          withGitRelease() {", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417208669", "createdAt": "2020-04-29T10:16:16Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n+              }\n+              withGitRelease() {\n+                script {\n+                  def curVer = mvnVersion()\n+                  sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n+                  def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n+                  if (isMajor == 0) {\n+                    input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                  }\n+                }\n+                gitPush()\n+              } \n+            }\n+          }\n+        }\n+        stage('Create GitHub release draft') {\n+          steps {\n+            deleteDir()\n+            unstash 'source'\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                def curVer = mvnVersion(showQualifiers: false)\n+                // Construct the URL with anchor for the release notes\n+                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0\n+                def finalUrl = sh(script: \"scripts/jenkins/generate_release_notes_url.sh ${curVer}\", , returnStdout: true)\n+                def ret = githubReleaseCreate(draft: true, name: \"Release ${curVer}\", body: \"[Release Notes for ${curVer}](${finalUrl})\")\n+                env.RELEASE_ID = ret['id']\n+                env.RELEASE_NOTES_URL = finalUrl\n+              }\n+            }\n+\n+          }\n+        }\n+        stage('Wait for artifact to be available in Maven Central') {\n+          steps {\n+            script {\n+              def fullUrl = sh(script: \"./scripts/jenkins/maven_artifact_url.sh \")\n+              echo \"Sleeping for ten minutes to wait for Sonatype\"\n+              sleep(time: 10, unit: \"MINUTES\")\n+              waitUntil(initialRecurrencePeriod: 60000) {\n+                script {\n+                  def ret = sh(script: \"curl -fs $fullUrl >/dev/null 2>&1\", returnStatus: true)\n+                  echo \"Waiting for the artifacts to be published on Sonatype\"\n+                  return ret == 0\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Update Cloudfoundry') {\n+          steps {\n+            deleteDir()\n+            unstash 'source'\n+            dir(\"${BASE_DIR}\"){\n+              script {\n+                env.BRANCH_NAME = \"master\"\n+              }\n+              withGitRelease() {\n+                setupAPMGitEmail()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDg0Nw==", "bodyText": "IIRC, BRANCH_NAME is a read only env variable, withEnv could help to change the value for the release context, what do you think?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          script {\n          \n          \n            \n                            env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n          \n          \n            \n                          }\n          \n          \n            \n                          withGitRelease() {\n          \n          \n            \n                            script {\n          \n          \n            \n                              def curVer = mvnVersion()\n          \n          \n            \n                              sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n          \n          \n            \n                              def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n          \n          \n            \n                              if (isMajor == 0) {\n          \n          \n            \n                                input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n          \n          \n            \n                              }\n          \n          \n            \n                            }\n          \n          \n            \n                            gitPush()\n          \n          \n            \n                          } \n          \n          \n            \n                          withEnv([\"BRANCH_NAME=tags/${env.TAG_BARE}\"]){\n          \n          \n            \n                            withGitRelease() {\n          \n          \n            \n                              script {\n          \n          \n            \n                                def curVer = mvnVersion()\n          \n          \n            \n                                sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n          \n          \n            \n                                def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n          \n          \n            \n                                if (isMajor == 0) {\n          \n          \n            \n                                  input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n          \n          \n            \n                                }\n          \n          \n            \n                              }\n          \n          \n            \n                              gitPush()\n          \n          \n            \n                            }\n          \n          \n            \n                          }", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417210847", "createdAt": "2020-04-29T10:20:49Z", "author": {"login": "v1v"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }\n+        stage('Nexus release') {\n+          steps {\n+            script {\n+              def spid = getVault('nexus')[\"staging-profile-id\"]\n+              dir(\"${BASE_DIR}\"){\n+                withEnvMask(vars: [[var: \"SPID\", password: spid]]){\n+                  def foundStagingId = nexusFindStagingId(stagingProfileId: \"${SPID}\", groupId: \"co.elastic.apm\")\n+                  nexusCloseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                  nexusReleaseStagingRepository(stagingProfileId: \"${SPID}\", stagingId: foundStagingId)\n+                }\n+              }\n+            }\n+          }\n+        }\n+        stage('Branch creation') {\n+          steps {\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.BRANCH_NAME = \"tags/${env.TAG_BARE}\"\n+              }\n+              withGitRelease() {\n+                script {\n+                  def curVer = mvnVersion()\n+                  sh(script: \"./scripts/jenkins/branch_creation.sh ${curVer}\")\n+                  def isMajor = sh(script: \"./scripts/jenkins/is_major.sh ${curVer}\", returnStatus: true)\n+                  if (isMajor == 0) {\n+                    input message: \"This was a major version release. Please update the conf.yml in the docs repo before continuing\", ok \"Continue\"\n+                  }\n+                }\n+                gitPush()\n+              } ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8504adaec5b4dad26a8b5f549be795831e96b3f"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTQ1NDY5", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-402545469", "createdAt": "2020-04-29T10:33:55Z", "commit": {"oid": "be87cdc1696b633db6f7c306e4dc7468f89a83e4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozMzo1NVrOGN48yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozODoxOVrOGN5FYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNzczOQ==", "bodyText": "An issue with versions:set is that it creates a pom.xml.versionsBackup file for every pom.xml in the project.\nI think mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version} would be the better option.\nAlso, I don't see the new changes being committed in this step, is that correct?", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417217739", "createdAt": "2020-04-29T10:33:55Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,229 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be87cdc1696b633db6f7c306e4dc7468f89a83e4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxOTkzOA==", "bodyText": "Add a step that just prints a message like.\nStart the release job on the internal CI. Click proceed once the job has succeeded. Click cancel if the release has failed and manually undo the release.", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417219938", "createdAt": "2020-04-29T10:38:19Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn versions:set -DnewVersion=${new_version}\")\n+              } else {\n+                echo \"Skipping version update\"\n+              }\n+            }\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8a2b5c6ac5e7c3f8ac152421386d7b23efe3c2c"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTc2Njkx", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-402576691", "createdAt": "2020-04-29T11:25:21Z", "commit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyNToyMVrOGN6fzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMDoyMlrOGN6pKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MzA4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n          \n          \n            \n                                  description: 'We will update the project version in all pom.xml files. Set this to your desired <release-version>-SNAPSHOT (for example 1.2.3-SNAPSHOT if you want to release version 1.2.3).', name: 'New Version'", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417243084", "createdAt": "2020-04-29T11:25:21Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NDI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              name: \"Do you wish to update the version?\",\n          \n          \n            \n                              name: \"You are about to release version ${ver - '-SNAPSHOT'}. Do you wish to update the version?\",", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417244278", "createdAt": "2020-04-29T11:27:49Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTQ4MA==", "bodyText": "don't forget to push :)", "url": "https://github.com/elastic/apm-agent-java/pull/1058#discussion_r417245480", "createdAt": "2020-04-29T11:30:22Z", "author": {"login": "felixbarny"}, "path": ".ci/release/Jenkinsfile", "diffHunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env groovy\n+\n+@Library('apm@current') _\n+pipeline {\n+  agent { label 'linux && immutable' }\n+  environment {\n+    REPO = 'apm-agent-java'\n+    BASE_DIR = \"src/github.com/elastic/${env.REPO}\"\n+    NOTIFY_TO = credentials('notify-to')\n+    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'\n+    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'\n+    NEXUS_SECRET = 'secret/apm-team/ci/nexus'\n+    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'\n+    HOME = \"${env.WORKSPACE}\"\n+    JAVA_HOME = \"${env.HUDSON_HOME}/.java/java10\"\n+    PATH = \"${env.JAVA_HOME}/bin:${env.PATH}\"\n+  }\n+  options {\n+    timeout(time: 3, unit: 'HOURS')\n+    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))\n+    timestamps()\n+    ansiColor('xterm')\n+    durabilityHint('PERFORMANCE_OPTIMIZED')\n+\n+  }\n+  parameters {\n+    string(name: 'branch_specifier', defaultValue: 'master')\n+  }\n+\n+  stages {\n+    stage('Initializing'){\n+      options { skipDefaultCheckout() }\n+      stages {\n+        stage('Checkout') {\n+          steps {\n+            gitCheckout(\n+                basedir: \"${BASE_DIR}\",\n+                branch: 'master',\n+                repo: 'git@github.com:elastic/apm-agent-java.git',\n+                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',\n+                shallow: false\n+            )\n+            dir(\"${BASE_DIR}\") {\n+              setupAPMGitEmail()\n+            }\n+            stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)\n+            dir(\"${BASE_DIR}\") {\n+              script {\n+                env.TAG_BARE = sh(script: \"git tag | tail -1\", returnStdout: true)\n+                env.TAG_VER = sh(script: \"git tag | tail -1 | sed s/v//\", returnStdout: true)\n+                env.TAG_DOT_X = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d \".\"|awk \\'{print $1\".x\"}\\'', returnStdout: true)\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage('Release') {\n+      options { skipDefaultCheckout () }\n+      stages{\n+        stage('Check oss.sonatype.org') {\n+          steps {\n+            // If this fails, an exception should be thrown and execution will halt\n+            script {\n+              def r = sh(label: \"Check Maven status\", script: \"scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH\", returnStatus: true)\n+              if (r == 1) {\n+                error(\"Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Check master build status') {\n+          steps {\n+            script {\n+              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/\n+              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {\n+                input(message: \"WARNING! The master build is not passing. Do you wish to continue?\")\n+              }\n+            }\n+          }\n+        }\n+        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {\n+          steps {\n+            input(message: \"\"\"\n+            Update CHANGELOG.asciidoc to reflect the new version release:\n+            Go over PRs or git log and add bug fixes and features.\n+            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).\n+\n+            Click 'Proceed' to confirm that this step has been completed or Abort to stop the build in order to complete this step.\n+            \"\"\"\n+            )\n+          }\n+        }\n+        stage('Review project version') {\n+          steps {\n+            script {\n+              def ver = mvnVersion(showQualifiers: true)\n+              def should_continue = input(message: \"Current version is ${ver}\", parameters: [\n+                [\n+                  $class: 'ChoiceParameterDefinition',\n+                  name: \"Do you wish to update the version?\",\n+                  \"choices\": [\"Yes\", \"No\"],\n+                  description: \"Selecting 'Yes' will allow you to select the new version in the next step.\"\n+                ]\n+              ])\n+              if (should_continue == 'Yes'){\n+                def new_version = input(message: \"Please enter version to change to:\", parameters:\n+                  [\n+                    [\n+                      $class: 'StringParameterDefinition',\n+                      defaultValue: \"${ver}\",\n+                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'\n+                    ]\n+                  ]\n+                )\n+                sh(name: \"mavenVersionUpdate\", script: \"mvn --batch-mode release:update-versions -DdevelopmentVersion=${new_version}\")\n+                withGitRelease() {\n+                  sh(script: \"git commit -a -m 'Version bump'\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a4d9c7ef5644357f4055ec12372c5b743fbca"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjEyMTUx", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-402612151", "createdAt": "2020-04-29T12:21:29Z", "commit": {"oid": "c021075a7446e3c2aaf11ff4ea33350cbeb4f70a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDIyNjQ2", "url": "https://github.com/elastic/apm-agent-java/pull/1058#pullrequestreview-428022646", "createdAt": "2020-06-10T12:56:02Z", "commit": {"oid": "c021075a7446e3c2aaf11ff4ea33350cbeb4f70a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b560832c01c3a7d8022840fbb6ad19d4bcb2ebe0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b560832c01c3a7d8022840fbb6ad19d4bcb2ebe0", "committedDate": "2020-06-11T07:55:52Z", "message": "Partially complete release pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f86271146d507a3a6e48742990ac3aebfad2dcc0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f86271146d507a3a6e48742990ac3aebfad2dcc0", "committedDate": "2020-06-11T07:55:52Z", "message": "More release process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c1cf60f852bf24c1a6749a1fd627c8127d3f86", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/77c1cf60f852bf24c1a6749a1fd627c8127d3f86", "committedDate": "2020-06-11T07:55:52Z", "message": "Move into discrete stages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b019417f82f28dea0aea3cc67b494a13d8f26404", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b019417f82f28dea0aea3cc67b494a13d8f26404", "committedDate": "2020-06-11T07:55:52Z", "message": "Modify some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda1447f74384fb22cbf74a34fbe51b7176b67ff", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/eda1447f74384fb22cbf74a34fbe51b7176b67ff", "committedDate": "2020-06-11T07:55:53Z", "message": "Refactor into separate release Jenkinsfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f4a7213168a83e9daa8302be9815b83e923ee0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/27f4a7213168a83e9daa8302be9815b83e923ee0", "committedDate": "2020-06-11T07:55:53Z", "message": "Move release code out of main jenkinsfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47cec6ad9aec570fc32b966fea583a2308e1fbf", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c47cec6ad9aec570fc32b966fea583a2308e1fbf", "committedDate": "2020-06-11T07:55:53Z", "message": "Set working directories correctly and move post-release steps into post-release pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105a5c9444005d2541df47262228d500017aafe0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/105a5c9444005d2541df47262228d500017aafe0", "committedDate": "2020-06-11T07:55:53Z", "message": "Sub in Vault variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f3e8c2f59bb2245341bcba361b0d5ab2d7172d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/19f3e8c2f59bb2245341bcba361b0d5ab2d7172d", "committedDate": "2020-06-11T07:55:53Z", "message": "Add branch_specifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2c59df39fd2552a797be4d7ee706dbdd5acc2c", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/dd2c59df39fd2552a797be4d7ee706dbdd5acc2c", "committedDate": "2020-06-11T07:55:53Z", "message": "Remove incorrect comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca7c91f7466963727739029eb02556486b8535c", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7ca7c91f7466963727739029eb02556486b8535c", "committedDate": "2020-06-11T07:55:53Z", "message": "Remove unused param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68c3acba5e89473e81648fa4c14cb8ecc49634d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c68c3acba5e89473e81648fa4c14cb8ecc49634d", "committedDate": "2020-06-11T07:55:53Z", "message": "Consolodate MAVEN_CONFIG into a single fixed str"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af41426c39e392b75237c931b23da3a31b58255", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8af41426c39e392b75237c931b23da3a31b58255", "committedDate": "2020-06-11T07:55:53Z", "message": "Remove Docker gate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641bdd4b38c054ec23bea889e890e08d626a8bc9", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/641bdd4b38c054ec23bea889e890e08d626a8bc9", "committedDate": "2020-06-11T07:55:53Z", "message": "Sleep before retry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835af449bbd1fadde44fccbc39ed15b8d60a7207", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/835af449bbd1fadde44fccbc39ed15b8d60a7207", "committedDate": "2020-06-11T07:55:53Z", "message": "Add name to GitHub release call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232e900ebefc2fc5dc40a335f47f098eddc9e228", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/232e900ebefc2fc5dc40a335f47f098eddc9e228", "committedDate": "2020-06-11T07:55:53Z", "message": "Move changelog URL detection to stand-alone sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c91db141b154a0c379840e3236590436c8834d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c4c91db141b154a0c379840e3236590436c8834d", "committedDate": "2020-06-11T07:55:53Z", "message": "Restore opbeans to original Jenkinsfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645f15999a9201da6f6f010e417b963ce7efa493", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/645f15999a9201da6f6f010e417b963ce7efa493", "committedDate": "2020-06-11T07:55:53Z", "message": "Move cloudfoundry down one stage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3df503fcd05f929cfd29f5169e72c2cd951cdc37", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3df503fcd05f929cfd29f5169e72c2cd951cdc37", "committedDate": "2020-06-11T07:55:53Z", "message": "Dialogs for version updating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657bf62cbc1f25c093950a86c843162f87273446", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/657bf62cbc1f25c093950a86c843162f87273446", "committedDate": "2020-06-11T07:55:53Z", "message": "Warn and give option to abort if master build is failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a413d8627ee0034ea0e88ff0a09c918e55336bd", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6a413d8627ee0034ea0e88ff0a09c918e55336bd", "committedDate": "2020-06-11T07:55:53Z", "message": "Move shell logic into dedicated scripts and use mvnversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3280f035e350cc8f39231efc4fcee163f42c78b", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d3280f035e350cc8f39231efc4fcee163f42c78b", "committedDate": "2020-06-11T07:55:53Z", "message": "put in finalurl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14be6f5b67dad21dc419e4db8d6faf6c988ae0db", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/14be6f5b67dad21dc419e4db8d6faf6c988ae0db", "committedDate": "2020-06-11T07:55:53Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a4b3d514b0bc6f3862c1ed83f71ca2db458300d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4a4b3d514b0bc6f3862c1ed83f71ca2db458300d", "committedDate": "2020-06-11T07:55:53Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64c8411e33c91154c55d0010de4de73727606b9", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f64c8411e33c91154c55d0010de4de73727606b9", "committedDate": "2020-06-11T07:55:53Z", "message": "Block GH release on release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43cc93f3f5b4171565446614783aa92dc0b33b67", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/43cc93f3f5b4171565446614783aa92dc0b33b67", "committedDate": "2020-06-11T07:55:53Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a3c9a0c845fcd4a63dc6df3be90cab61b114bc", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b7a3c9a0c845fcd4a63dc6df3be90cab61b114bc", "committedDate": "2020-06-11T07:55:53Z", "message": "changelog confirmation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0019f9e8e0d8eb46eaf4f8645ab9a0c4239fdcf5", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0019f9e8e0d8eb46eaf4f8645ab9a0c4239fdcf5", "committedDate": "2020-06-11T07:55:53Z", "message": "Move all env vars to top-level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1142bf55d08315e8cc64d22ca9e73c5dc7439a", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6d1142bf55d08315e8cc64d22ca9e73c5dc7439a", "committedDate": "2020-06-11T07:55:53Z", "message": "Add better downtime detection for Maven"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d9508bcd71652ffb3ff87004926a8eff42278c", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f3d9508bcd71652ffb3ff87004926a8eff42278c", "committedDate": "2020-06-11T07:55:53Z", "message": "Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "990147044be2cba882685b99a40aefcf538c9ad5", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/990147044be2cba882685b99a40aefcf538c9ad5", "committedDate": "2020-06-11T07:55:53Z", "message": "Application to check release notes status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d22a2be90fe960be01ea8cd9629fa2ea2fa6b3d0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d22a2be90fe960be01ea8cd9629fa2ea2fa6b3d0", "committedDate": "2020-06-11T07:55:53Z", "message": "Encapsulate cloudfoundry step in shell script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e35193da4e5bd7d36c0d0122cf738489e56eb9", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f6e35193da4e5bd7d36c0d0122cf738489e56eb9", "committedDate": "2020-06-11T07:55:54Z", "message": "Move Maven URL generation logic to script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae8f142b180ad0b6e376cca5e56660f4c0a3926", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bae8f142b180ad0b6e376cca5e56660f4c0a3926", "committedDate": "2020-06-11T07:55:54Z", "message": "Remove automatic changelog generation per review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60a5d0ca8e4ed549bf61b34b0935d3d12667fd0", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d60a5d0ca8e4ed549bf61b34b0935d3d12667fd0", "committedDate": "2020-06-11T07:55:54Z", "message": "Move branch creation logic to script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a62a8693fe79f58191afb6e6c4c7a60c35cdf39", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5a62a8693fe79f58191afb6e6c4c7a60c35cdf39", "committedDate": "2020-06-11T07:55:54Z", "message": "Fix regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcd7b74596d47a07d9007b0c5c27e2fa1ebf55c", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5bcd7b74596d47a07d9007b0c5c27e2fa1ebf55c", "committedDate": "2020-06-11T07:55:54Z", "message": "Add docs check script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001e1487314aebcb988d9cc3a5fcb8afee5446ab", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/001e1487314aebcb988d9cc3a5fcb8afee5446ab", "committedDate": "2020-06-11T07:55:54Z", "message": "Simplify tag/version detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56d8308ac86e18034c66ed22860052a53b83dab8", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/56d8308ac86e18034c66ed22860052a53b83dab8", "committedDate": "2020-06-11T07:55:54Z", "message": "Use doc check script before GH release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42fbbbc2552b3c8681830f6c9b4e9effed511d54", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/42fbbbc2552b3c8681830f6c9b4e9effed511d54", "committedDate": "2020-06-11T07:55:54Z", "message": "Newlines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e15b5ceb3d4c704e034859ebef4d40cf4c448179", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e15b5ceb3d4c704e034859ebef4d40cf4c448179", "committedDate": "2020-06-11T07:55:54Z", "message": "Remove unnecessary dir calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fff87aae4ac6da9363d019d0e7f874ed3d88b23", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7fff87aae4ac6da9363d019d0e7f874ed3d88b23", "committedDate": "2020-06-11T07:55:54Z", "message": "Fix repo typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf950fde72f82b4124281da4f5b11ffe202e3da", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9bf950fde72f82b4124281da4f5b11ffe202e3da", "committedDate": "2020-06-11T07:55:54Z", "message": "switch to gitcheckout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b046f401b6b180d22f97085f1f77f58c54c5316b", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b046f401b6b180d22f97085f1f77f58c54c5316b", "committedDate": "2020-06-11T07:55:54Z", "message": "Remove comment scaffolding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc05690d1eddb85c4b31d33e9250edb2a9b3b58", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2dc05690d1eddb85c4b31d33e9250edb2a9b3b58", "committedDate": "2020-06-11T07:55:54Z", "message": "More changes to git"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e3645deab4a90df2f5b2e00076e98d71a44873", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/00e3645deab4a90df2f5b2e00076e98d71a44873", "committedDate": "2020-06-11T07:55:54Z", "message": "Use gitrelease and gitpush in branch creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52719751583f3a94e309283496f58c110cf956bf", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/52719751583f3a94e309283496f58c110cf956bf", "committedDate": "2020-06-11T07:55:54Z", "message": "Use git steps in CF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9514d1642769caa936033ca70bcdf86bc3bbca44", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9514d1642769caa936033ca70bcdf86bc3bbca44", "committedDate": "2020-06-11T07:55:54Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf106da57d7031b07f346681cd43752740eddadd", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bf106da57d7031b07f346681cd43752740eddadd", "committedDate": "2020-06-11T07:55:54Z", "message": "Fix detected lint error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c41889ec43aee230f4d458dcc3c31bc2d677ba27", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c41889ec43aee230f4d458dcc3c31bc2d677ba27", "committedDate": "2020-06-11T07:55:54Z", "message": "Minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d882791dd6641c96728871982659b8762bffc9bb", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d882791dd6641c96728871982659b8762bffc9bb", "committedDate": "2020-06-11T07:55:54Z", "message": "Add confirmation step for internal CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c0784668972a0cc43f930383be47bdf44dd28a", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/06c0784668972a0cc43f930383be47bdf44dd28a", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aee5acd5f9e41de94dffb413af9352bc60ac6a9", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0aee5acd5f9e41de94dffb413af9352bc60ac6a9", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d63151634320518c13f918ebfb6265fc3ea16d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e1d63151634320518c13f918ebfb6265fc3ea16d", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70eb776880ad8ef3a3f75cad70dd7afddb4d573", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b70eb776880ad8ef3a3f75cad70dd7afddb4d573", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Victor Martinez <victormartinezrubio@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf30f7f22dc89427fcdd2b73a5525cd0ca788225", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/cf30f7f22dc89427fcdd2b73a5525cd0ca788225", "committedDate": "2020-06-11T07:55:54Z", "message": "Change maven command per review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c370546266ad209aa349e23154af2c9a074a7c8c", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c370546266ad209aa349e23154af2c9a074a7c8c", "committedDate": "2020-06-11T07:55:54Z", "message": "Add git commit after version bump"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23080b095acd0c2eb8c5b89075db7b8fde661776", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/23080b095acd0c2eb8c5b89075db7b8fde661776", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e106024f53c2c543f6f5953ec80e9a3d4328807", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5e106024f53c2c543f6f5953ec80e9a3d4328807", "committedDate": "2020-06-11T07:55:54Z", "message": "Update .ci/release/Jenkinsfile\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b60b5d38740ecec0d2144798f7f4db076738274d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b60b5d38740ecec0d2144798f7f4db076738274d", "committedDate": "2020-06-11T07:55:54Z", "message": "Add git push"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c021075a7446e3c2aaf11ff4ea33350cbeb4f70a", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c021075a7446e3c2aaf11ff4ea33350cbeb4f70a", "committedDate": "2020-04-29T12:17:35Z", "message": "Add git push"}, "afterCommit": {"oid": "b60b5d38740ecec0d2144798f7f4db076738274d", "author": {"user": {"login": "cachedout", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b60b5d38740ecec0d2144798f7f4db076738274d", "committedDate": "2020-06-11T07:55:54Z", "message": "Add git push"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4116, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}