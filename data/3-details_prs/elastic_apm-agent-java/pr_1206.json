{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTE3Nzg2", "number": 1206, "title": "Instrument Runnables/Callables instead of wrapping them", "bodyText": "What does this PR do?\ncloses #987\nBonus content:\n\nSupport for ForJoinPool and ScheduledExecutorService\nSupport for ExecutorService#invokeAny and ExecutorService#invokeAll\n\nChecklist\n\n\n I have updated CHANGELOG.asciidoc\n I have added tests that prove my fix is effective or that my feature works\n[ ] Added an API method or config option? Document in which version this will be introduced\n[ ] I have made corresponding changes to the documentation", "createdAt": "2020-05-27T15:06:04Z", "url": "https://github.com/elastic/apm-agent-java/pull/1206", "merged": true, "mergeCommit": {"oid": "f2ac5f684ab43e7cc91a62bf606d748d7aa3ce52"}, "closed": true, "closedAt": "2020-06-17T14:45:56Z", "author": {"login": "felixbarny"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclak9hgH2gAyNDIzOTE3Nzg2OjE0MGQ1MWM0Y2E5MTBiNWU3OWQxYjlmNDJhMDMzOGM2MmRmNTM0NDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsK9VwAH2gAyNDIzOTE3Nzg2OjQ4Zjc1ZTE1ZDhmZTJiN2RmMmU4NDI1M2VhNjljMTg5NzI5NzFjNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "140d51c4ca910b5e79d1b9f42a0338c62df53445", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/140d51c4ca910b5e79d1b9f42a0338c62df53445", "committedDate": "2020-05-27T14:59:11Z", "message": "Instrument Runnables/Callables instead of wrapping\n\ncloses #987"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6095a7f0fe1290ef0611b2b4f3b4bb109f7d57a", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c6095a7f0fe1290ef0611b2b4f3b4bb109f7d57a", "committedDate": "2020-05-27T15:03:38Z", "message": "Add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2424cdc98f02f8f1a517ea7fc2bfd9263ab9ae67", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2424cdc98f02f8f1a517ea7fc2bfd9263ab9ae67", "committedDate": "2020-05-29T11:38:19Z", "message": "Instrument ExecutorService#invoke{All|Any}"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28fa7957d4e2919b31d6cbea8d06c8f2d084c8e1", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/28fa7957d4e2919b31d6cbea8d06c8f2d084c8e1", "committedDate": "2020-05-30T09:05:41Z", "message": "Fix for Executors that execute on current thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa9610e8d02f23331c1cd4251c26b26f0b39cf39", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/aa9610e8d02f23331c1cd4251c26b26f0b39cf39", "committedDate": "2020-05-31T13:58:27Z", "message": "Instrument ForkJoinPool and ScheduledExecutorService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70189033185b03d953cfcb883c8d7d1279d78ed", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d70189033185b03d953cfcb883c8d7d1279d78ed", "committedDate": "2020-05-31T14:44:10Z", "message": "Speed up tests by avoiding to call Mockito spy in hot method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/332e1fb2bd497411d6dbb32d5fdace4ee89d6e20", "committedDate": "2020-06-02T11:09:20Z", "message": "Fix Javadoc error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzI2OTc4", "url": "https://github.com/elastic/apm-agent-java/pull/1206#pullrequestreview-430326978", "createdAt": "2020-06-15T05:16:15Z", "commit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyMDo0N1rOGjjhlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyOTo0N1rOGjmPmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTM4MQ==", "bodyText": "Obtain these two class lists outside the matching flow, otherwise Mockito has problems with the config mocks. See this comment.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439935381", "createdAt": "2020-06-15T05:20:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -467,18 +467,8 @@ private static AgentBuilder getAgentBuilder(final ByteBuddy byteBuddy, final Cor\n             .or(nameStartsWith(\"io.sqreen.\"))\n             .or(nameContains(\"javassist\"))\n             .or(nameContains(\".asm.\"))\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n+            .or(anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation()))\n+            .or(anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjcxMw==", "bodyText": "Is it used?", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439936713", "createdAt": "2020-06-15T05:26:26Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzA3MA==", "bodyText": "If it's thread local, why using an AtomicInteger?\nAlso, if it's about identification of nesting only (without knowing the level of nesting), no need for a map - a stack of classes is sufficient.\nLastly, using class name may be better as it won't require weak referencing.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439937070", "createdAt": "2020-06-15T05:28:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {\n+    private static final ThreadLocal<Map<Class<?>, AtomicInteger>> callDepthPerThread = new ThreadLocal<Map<Class<?>, AtomicInteger>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MzA5NA==", "bodyText": "Done both in the if and else, can be done outside", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439963094", "createdAt": "2020-06-15T06:51:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDMwNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964307", "createdAt": "2020-06-15T06:54:11Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDQxNw==", "bodyText": "Update javadoc", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964417", "createdAt": "2020-06-15T06:54:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDU4MQ==", "bodyText": "Update javadoc", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964581", "createdAt": "2020-06-15T06:54:53Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2OTQxOA==", "bodyText": "We need some cleanup of stale entries, maybe use WeakConcurrentMap.WithInlinedExpunction?\nOn the other hand, given that this map may be accessed VERY frequently, using a cleaner thread makes more sense", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439969418", "createdAt": "2020-06-15T07:07:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng==", "bodyText": "This introduces a risk of causing ClassCastException due to the collection type. I think it's better to try/catch using Collection.remove and Collection.add and avoid wrapping (with logging) if not supported by the collection.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439976376", "createdAt": "2020-06-15T07:22:33Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NzMyMQ==", "bodyText": "What about pooling wrappers? Could be used very frequently.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439977321", "createdAt": "2020-06-15T07:24:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTkzMQ==", "bodyText": "[minor] - proposal: make the activation here, rather than implicit, making it symmetric with onExit.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439979931", "createdAt": "2020-06-15T07:29:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/RunnableCallableForkJoinTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.is;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Used only within {@link JavaConcurrent#withContext} to\n+ * {@linkplain co.elastic.apm.agent.bci.ElasticApmAgent#ensureInstrumented(Class, Collection) ensure}\n+ * that particular {@link Callable}, {@link Runnable} and {@link ForkJoinTask} classes are instrumented.\n+ */\n+public class RunnableCallableForkJoinTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(\n+            is(Runnable.class)\n+            .or(is(Callable.class))\n+            .or(is(ForkJoinTask.class))\n+        );\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"run\").and(takesArguments(0))\n+            .or(named(\"call\").and(takesArguments(0)))\n+            .or(named(\"exec\").and(takesArguments(0).and(returns(boolean.class))));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Arrays.asList(\"concurrent\", \"executor\");\n+    }\n+\n+    @Nullable\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static AbstractSpan<?> onEnter(@Advice.This Object thiz) {\n+        return JavaConcurrent.restoreContext(thiz, tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f5b7e175b9bc305b876d2b8c9c6d20fe7639d9", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a8f5b7e175b9bc305b876d2b8c9c6d20fe7639d9", "committedDate": "2020-06-16T09:24:27Z", "message": "Remove unused CallDepth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ecfb81a8073ade8c6aef0702c571eef820496a", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/08ecfb81a8073ade8c6aef0702c571eef820496a", "committedDate": "2020-06-16T09:54:19Z", "message": "Merge remote-tracking branch 'origin/master' into executor-instrument-runnables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b5d7da061de92c018b253e27b5d8206748124c", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b9b5d7da061de92c018b253e27b5d8206748124c", "committedDate": "2020-06-16T10:19:56Z", "message": "Add global expunging of stale WeakConcurrentMap entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6463427c64efb18d1689afa1afcff98dc1e36d29", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6463427c64efb18d1689afa1afcff98dc1e36d29", "committedDate": "2020-06-16T12:34:32Z", "message": "Revert problematic usages of WeakMapSupplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a51ad0e1501336fc175364f095d929fb0669e276", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a51ad0e1501336fc175364f095d929fb0669e276", "committedDate": "2020-06-16T12:53:26Z", "message": "Add executor-collection instrumentation group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38493d9fe14fbc6781c56c22b59609fdf21d66d0", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/38493d9fe14fbc6781c56c22b59609fdf21d66d0", "committedDate": "2020-06-16T13:07:19Z", "message": "Update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTIzNzkx", "url": "https://github.com/elastic/apm-agent-java/pull/1206#pullrequestreview-431523791", "createdAt": "2020-06-16T13:51:16Z", "commit": {"oid": "38493d9fe14fbc6781c56c22b59609fdf21d66d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a4e0028834a8e638aafdb731dcf849ed2c23f19", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/4a4e0028834a8e638aafdb731dcf849ed2c23f19", "committedDate": "2020-06-17T08:36:55Z", "message": "Disable problematic async Dubbo tests for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f75e15d8fe2b7df2e84253ea69c18972971c41", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/48f75e15d8fe2b7df2e84253ea69c18972971c41", "committedDate": "2020-06-17T14:44:48Z", "message": "Merge branch 'master' into executor-instrument-runnables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4000, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}