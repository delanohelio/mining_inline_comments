{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTMyMDg0", "number": 1592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTozMDo1NVrOFLwncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTozNDoxMVrOFLwsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3ODc1MTg1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTozMDo1NVrOIPHMoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTo0Njo0OVrOIPIDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxNzQ3Mg==", "bodyText": "why not throw directly an IllegalArgumentException when called on a root node instead of an assertion that might be disabled ?", "url": "https://github.com/elastic/apm-agent-java/pull/1592#discussion_r552717472", "createdAt": "2021-01-06T15:30:55Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -436,7 +436,16 @@ private void fillStackTrace(List<StackFrame> stackTrace) {\n         }\n     }\n \n-    public void recycle(ObjectPool<CallTree> pool) {\n+    /**\n+     * Recycles this subtree to the provided pool recursively.\n+     * Note that this method ends by recycling {@code this} node (i.e. - this subtree root), which means that\n+     * <b>the caller of this method should make sure that no reference to this object is held anywhere</b>.\n+     * <p>ALSO NOTE: MAKE SURE NOT TO CALL THIS METHOD FOR {@link CallTree.Root} INSTANCES.</p>\n+     *\n+     * @param pool the pool to which all subtree nodes are to be recycled\n+     */\n+    public final void recycle(ObjectPool<CallTree> pool) {\n+        assert !(this instanceof Root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9260594ffcae07bbae33deb5ae01b2826d2002"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjczMTQ0MA==", "bodyText": "I thought of avoiding the instanceof check overhead in production. Normally I think it is not something that would be specific for a unique corner case, our tests should find it if we try to recycle improperly", "url": "https://github.com/elastic/apm-agent-java/pull/1592#discussion_r552731440", "createdAt": "2021-01-06T15:46:49Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -436,7 +436,16 @@ private void fillStackTrace(List<StackFrame> stackTrace) {\n         }\n     }\n \n-    public void recycle(ObjectPool<CallTree> pool) {\n+    /**\n+     * Recycles this subtree to the provided pool recursively.\n+     * Note that this method ends by recycling {@code this} node (i.e. - this subtree root), which means that\n+     * <b>the caller of this method should make sure that no reference to this object is held anywhere</b>.\n+     * <p>ALSO NOTE: MAKE SURE NOT TO CALL THIS METHOD FOR {@link CallTree.Root} INSTANCES.</p>\n+     *\n+     * @param pool the pool to which all subtree nodes are to be recycled\n+     */\n+    public final void recycle(ObjectPool<CallTree> pool) {\n+        assert !(this instanceof Root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxNzQ3Mg=="}, "originalCommit": {"oid": "9f9260594ffcae07bbae33deb5ae01b2826d2002"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3ODc2NDgyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTozNDoxMVrOIPHU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTo0ODoxMFrOIPIHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxOTU5OA==", "bodyText": "leftover TODO ?", "url": "https://github.com/elastic/apm-agent-java/pull/1592#discussion_r552719598", "createdAt": "2021-01-06T15:34:11Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -735,6 +754,8 @@ public void resetState() {\n             super.resetState();\n             activeSpan = null;\n             activationTimestamp = -1;\n+            // todo - should we reset activeSpanSerialized?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9260594ffcae07bbae33deb5ae01b2826d2002"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjczMjQyNw==", "bodyText": "Well, half leftover...\nDidn't want to look into it now, but wanted the reminder. But I will see if we need to something with it or leave it as is", "url": "https://github.com/elastic/apm-agent-java/pull/1592#discussion_r552732427", "createdAt": "2021-01-06T15:48:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -735,6 +754,8 @@ public void resetState() {\n             super.resetState();\n             activeSpan = null;\n             activationTimestamp = -1;\n+            // todo - should we reset activeSpanSerialized?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxOTU5OA=="}, "originalCommit": {"oid": "9f9260594ffcae07bbae33deb5ae01b2826d2002"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 11, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}