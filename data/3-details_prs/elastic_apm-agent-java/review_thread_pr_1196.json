{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzM0NTAy", "number": 1196, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMjoyMlrOEDlXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo0MzoxMVrOEEj2rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTkzMzcwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMjoyMlrOGgr88A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo0OTo0NlrOGg_IVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNzcyOA==", "bodyText": "this change was the one that fixed the memory leak, as it seems that some calls to onComplete are not always executed at all, or are executed in an unexpected order.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r436927728", "createdAt": "2020-06-08T19:02:22Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallListenerInstrumentation.java", "diffHunk": "@@ -151,7 +148,14 @@ public FinalMethodCall(ElasticApmTracer tracer) {\n                 //\n                 // call complete (but client not guaranteed to get all messages)\n                 // --> end of unary call (success)\n-                .or(named(\"onComplete\"));\n+                .or(named(\"onComplete\"))\n+                //\n+                // client completed all message sending, but can still cancel the call\n+                // --> for unary calls, actual method invocation is done within 'onHalfClose' method, and there is no\n+                // call to 'onComplete', thus consider it as 'final' allows to properly perform cleanup as it's the last\n+                // method that will be invoked on the listener.\n+                //\n+                .or(named(\"onHalfClose\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0MTk0Mw==", "bodyText": "I don't think that's the issue. The problem is that we're only instrumenting server call listeners, that contain Unary in the class name. The UnaryServerCallListener doesn't override the noop onComplete callback.\nAnother issue is that the transaction is ended in co.elastic.apm.agent.grpc.ServerCallInstrumentation#onExit (on ServerCall#close). The effect is that even when instrumenting io.grpc.ServerCall.Listener#onComplete, the helper is not called, because the transaction has already ended.\nFurthermore, the fact that inFlightServerListeners is of type WeakConcurrentMap<ServerCall.Listener<?>, ServerCall<?, ?>> imposes a risk of a memory leak as ServerCall is not a weak reference. Have you considered mapping directly to the transaction (WeakConcurrentMap<ServerCall.Listener<?>, Transaction>)?\nSimilar story for client instrumentation. Changing the signature to WeakConcurrentMap<ClientCall.Listener<?>, Span> inFlightClientListeners would eliminate the chance of leaks and allows direct lookup of a span given a listener.\nAnother simplification of the client instrumentation could be done by removing co.elastic.apm.agent.grpc.ClientCallImplInstrumentation.Constructor and doing that inside co.elastic.apm.agent.grpc.ChannelInstrumentation (which instruments io.grpc.Channel#newCall). That would be more in line with the server instrumentation in co.elastic.apm.agent.grpc.ServerCallHandlerInstrumentation (instrumenting io.grpc.ServerCallHandler#startCall). And allows you to start the span before the constructor is invoked. In the exit advice you can then use the return value.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r437241943", "createdAt": "2020-06-09T08:49:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallListenerInstrumentation.java", "diffHunk": "@@ -151,7 +148,14 @@ public FinalMethodCall(ElasticApmTracer tracer) {\n                 //\n                 // call complete (but client not guaranteed to get all messages)\n                 // --> end of unary call (success)\n-                .or(named(\"onComplete\"));\n+                .or(named(\"onComplete\"))\n+                //\n+                // client completed all message sending, but can still cancel the call\n+                // --> for unary calls, actual method invocation is done within 'onHalfClose' method, and there is no\n+                // call to 'onComplete', thus consider it as 'final' allows to properly perform cleanup as it's the last\n+                // method that will be invoked on the listener.\n+                //\n+                .or(named(\"onHalfClose\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNzcyOA=="}, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTkzODM4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/GrpcTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMzowOVrOGgr_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMzowOVrOGgr_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyODQzOQ==", "bodyText": "this allows to have more than one test running on the same host without conflict.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r436928439", "createdAt": "2020-06-08T19:03:09Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/GrpcTest.java", "diffHunk": "@@ -26,10 +26,11 @@\n \n import co.elastic.apm.agent.grpc.testapp.GrpcApp;\n import co.elastic.apm.agent.grpc.testapp.GrpcAppProvider;\n+import co.elastic.apm.agent.testutils.TestPort;\n \n public class GrpcTest {\n \n-    private static final int PORT = 50051;\n+    private static final int PORT = TestPort.getAvailableRandomPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTk0ODQwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/testapp/AbstractGrpcAppTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowNTowNlrOGgsF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowNTowNlrOGgsF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkzMDAyMw==", "bodyText": "this one deserves a facepalm and was the cause of the failure on CI, as CI server has less cores than a decent laptop (likely 4), thus server was running with 2 threads in thread pool, which makes the 3rd nested call fail with a missed deadline.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r436930023", "createdAt": "2020-06-08T19:05:06Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/testapp/AbstractGrpcAppTest.java", "diffHunk": "@@ -86,9 +87,15 @@ void simpleErrorCall() {\n     @Test\n     void nestedChecks() {\n         for (SendAndCheckMessageStrategy strategy : STRATEGIES) {\n-            strategy.sendAndCheckMessage(app, \"joe\", 0, \"hello(joe)\");\n-            strategy.sendAndCheckMessage(app, \"bob\", 1, \"nested(1)->hello(bob)\");\n-            strategy.sendAndCheckMessage(app, \"rob\", 2, \"nested(2)->nested(1)->hello(rob)\");\n+            // because nested call is done with a blocking call, we have to make sure that we don't use all sever\n+            // threads otherwise we get exceeded deadlines\n+            for (int depth = 0; depth < HelloServer.POOL_SIZE; depth++) {\n+                StringBuilder prefix = new StringBuilder();\n+                for (int i = 1; i <= depth; i++) {\n+                    prefix.insert(0, String.format(\"nested(%d)->\", i));\n+                }\n+                strategy.sendAndCheckMessage(app, \"joe\", depth, prefix + \"hello(joe)\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTk1MTM1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/testapp/HelloClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowNTozOVrOGgsH4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowNTozOVrOGgsH4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkzMDUzMA==", "bodyText": "adding a deadline makes remote calls fail with timeout instead of waiting forever.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r436930530", "createdAt": "2020-06-08T19:05:39Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/test/java/co/elastic/apm/agent/grpc/testapp/HelloClient.java", "diffHunk": "@@ -37,17 +38,23 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n \n public abstract class HelloClient<Req, Rep> {\n \n     private static final Logger logger = LoggerFactory.getLogger(HelloClient.class);\n-\n     private final ManagedChannel channel;\n+    private final AtomicLong errorCount;\n \n     protected HelloClient(ManagedChannel channel) {\n         this.channel = channel;\n+        this.errorCount = new AtomicLong(0);\n+    }\n+\n+    protected static Deadline getDeadline() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzkxNjc2OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/testutils/TestPort.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo0OTo0MVrOGg_IMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo0OTo0MVrOGg_IMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0MTkwNA==", "bodyText": "You can also use port 0 which makes it open a random free port, without you having to manually try port after port.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r437241904", "createdAt": "2020-06-09T08:49:41Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/testutils/TestPort.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.testutils;\n+\n+import javax.net.ServerSocketFactory;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+\n+public class TestPort {\n+\n+    private static final Random rand = new Random(System.currentTimeMillis());\n+\n+    private static final int MIN_PORT = 1024;\n+    private static final int MAX_PORT = 65536;\n+\n+    /**\n+     * @return random available TCP port\n+     */\n+    public static int getAvailableRandomPort() {\n+        int port;\n+        do {\n+            port = MIN_PORT + rand.nextInt(MAX_PORT - MIN_PORT + 1);\n+        } while (!isAvailablePort(port));\n+        return port;\n+    }\n+\n+    private static boolean isAvailablePort(int port) {\n+        try {\n+            ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1, InetAddress.getByName(\"localhost\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd149e6725ce921467cf2c3d41db5f09b956e7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjEzNjQzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoyNzozMlrOGiQGDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNzozNFrOGj0pnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2ODQ2MA==", "bodyText": "Why do we only support unary calls?", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r438568460", "createdAt": "2020-06-11T06:27:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    private static void onExit(@Advice.Thrown Throwable thrown,\n-                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                               @Advice.Return ServerCall.Listener<?> listener,\n-                               @Advice.Local(\"transaction\") @Nullable Transaction transaction) {\n-\n-        if (tracer == null || grpcHelperManager == null || transaction == null) {\n+        if (serverCall.getMethodDescriptor().getType() != MethodDescriptor.MethodType.UNARY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1MzM1MQ==", "bodyText": "Good question, first, that's on par with what other elastic APM agents provide, avoid extra complexity when adding this feature, and then there was the case of bi-directional streaming which might not fit the concept of \"transaction\" if it's used as a long-lived communication channel, but that might really be a marginal use. Thus we could probably lift this limitation in the near future in a separate PR.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r439253351", "createdAt": "2020-06-12T07:27:14Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    private static void onExit(@Advice.Thrown Throwable thrown,\n-                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                               @Advice.Return ServerCall.Listener<?> listener,\n-                               @Advice.Local(\"transaction\") @Nullable Transaction transaction) {\n-\n-        if (tracer == null || grpcHelperManager == null || transaction == null) {\n+        if (serverCall.getMethodDescriptor().getType() != MethodDescriptor.MethodType.UNARY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2ODQ2MA=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwMzIwOQ==", "bodyText": "Please create a follow-up issue for that.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r440203209", "createdAt": "2020-06-15T14:09:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    private static void onExit(@Advice.Thrown Throwable thrown,\n-                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                               @Advice.Return ServerCall.Listener<?> listener,\n-                               @Advice.Local(\"transaction\") @Nullable Transaction transaction) {\n-\n-        if (tracer == null || grpcHelperManager == null || transaction == null) {\n+        if (serverCall.getMethodDescriptor().getType() != MethodDescriptor.MethodType.UNARY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2ODQ2MA=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTk2Nw==", "bodyText": "done: #1233", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r440215967", "createdAt": "2020-06-15T14:27:34Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);\n-        }\n-    }\n-\n-    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n-    private static void onExit(@Advice.Thrown Throwable thrown,\n-                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                               @Advice.Return ServerCall.Listener<?> listener,\n-                               @Advice.Local(\"transaction\") @Nullable Transaction transaction) {\n-\n-        if (tracer == null || grpcHelperManager == null || transaction == null) {\n+        if (serverCall.getMethodDescriptor().getType() != MethodDescriptor.MethodType.UNARY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2ODQ2MA=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjE0MDExOnYy", "diffSide": "LEFT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoyOTowOVrOGiQIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODo0ODoxNVrOGi8OZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2OTA2Ng==", "bodyText": "Why are we not starting the transaction onEnter anymore? That's what we also do for client calls. It also ensures we measure the time spent when preparing the call, including listener executions.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r438569066", "createdAt": "2020-06-11T06:29:09Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MTQ5NQ==", "bodyText": "fair point, it was a way to make instrumentation a bit simpler with only one single call to helper class. I've changed that in last commit.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r439291495", "createdAt": "2020-06-12T08:48:15Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallHandlerInstrumentation.java", "diffHunk": "@@ -69,35 +67,25 @@ public ServerCallHandlerInstrumentation(ElasticApmTracer tracer) {\n         return named(\"startCall\");\n     }\n \n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    private static void onEnter(@Advice.Origin Class<?> clazz,\n-                                @Advice.Argument(0) ServerCall<?, ?> serverCall,\n-                                @Advice.Argument(1) Metadata headers,\n-                                @Advice.Local(\"transaction\") Transaction transaction) {\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    private static void onExit(@Advice.Origin Class<?> clazz,\n+                               @Advice.Thrown @Nullable Throwable thrown,\n+                               @Advice.Argument(0) ServerCall<?, ?> serverCall,\n+                               @Advice.Argument(1) Metadata headers,\n+                               @Advice.Return ServerCall.Listener<?> listener) {\n \n-        if (tracer == null || grpcHelperManager == null) {\n+        if (tracer == null || grpcHelperManager == null || thrown != null) {\n             return;\n         }\n \n-        GrpcHelper helper = grpcHelperManager.getForClassLoaderOfClass(ServerCall.class);\n-        if (helper != null) {\n-            transaction = helper.startTransaction(tracer, clazz.getClassLoader(), serverCall, headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2OTA2Ng=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjE1NDY5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjozNToyOVrOGiQRoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjozNToyOVrOGiQRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MTQyNQ==", "bodyText": "Also instrument onReady to propagate context and to end the span if an exception occurs.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r438571425", "createdAt": "2020-06-11T06:35:29Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/ServerCallListenerInstrumentation.java", "diffHunk": "@@ -90,7 +88,7 @@ public NonFinalMethodCall(ElasticApmTracer tracer) {\n             return named(\"onMessage\")\n                 //\n                 // client completed all message sending, but can still cancel the call\n-                // --> for unary calls, actual method invocation is done here (but it's an impl. detail)\n+                // --> for unary calls, actual method invocation is done within 'onHalfClose' method.\n                 .or(named(\"onHalfClose\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjE3MTk2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo0MzoxMVrOGiQcwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0NTo1MlrOGjK1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NDI3Mg==", "bodyText": "don't we have to end the transaction in case of an exception?", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r438574272", "createdAt": "2020-06-11T06:43:11Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "diffHunk": "@@ -185,22 +158,21 @@ public void exitServerListenerMethod(@Nullable Throwable thrown, ServerCall.List\n         if (null != thrown) {\n             // when there is a runtime exception thrown in one of the listener methods the calling code will catch it\n             // and set 'unknown' status, we just replicate this behavior as we don't instrument the part that does this\n-            endTransaction(Status.UNKNOWN, thrown, transaction);\n-\n-            // listener won't be called anymore\n-            inFlightServerListeners.remove(listener);\n+            setTransactionStatus(Status.UNKNOWN, thrown, transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NTQxMQ==", "bodyText": "Do we have a test that checks if other callbacks and/or io.grpc.ServerCall#close is called if an exception happens?", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r438575411", "createdAt": "2020-06-11T06:46:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "diffHunk": "@@ -185,22 +158,21 @@ public void exitServerListenerMethod(@Nullable Throwable thrown, ServerCall.List\n         if (null != thrown) {\n             // when there is a runtime exception thrown in one of the listener methods the calling code will catch it\n             // and set 'unknown' status, we just replicate this behavior as we don't instrument the part that does this\n-            endTransaction(Status.UNKNOWN, thrown, transaction);\n-\n-            // listener won't be called anymore\n-            inFlightServerListeners.remove(listener);\n+            setTransactionStatus(Status.UNKNOWN, thrown, transaction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NDI3Mg=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMDgzNg==", "bodyText": "server-side tests have been added in latest version of PR.", "url": "https://github.com/elastic/apm-agent-java/pull/1196#discussion_r439530836", "createdAt": "2020-06-12T16:45:52Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-grpc/apm-grpc-plugin/src/main/java/co/elastic/apm/agent/grpc/helper/GrpcHelperImpl.java", "diffHunk": "@@ -185,22 +158,21 @@ public void exitServerListenerMethod(@Nullable Throwable thrown, ServerCall.List\n         if (null != thrown) {\n             // when there is a runtime exception thrown in one of the listener methods the calling code will catch it\n             // and set 'unknown' status, we just replicate this behavior as we don't instrument the part that does this\n-            endTransaction(Status.UNKNOWN, thrown, transaction);\n-\n-            // listener won't be called anymore\n-            inFlightServerListeners.remove(listener);\n+            setTransactionStatus(Status.UNKNOWN, thrown, transaction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NDI3Mg=="}, "originalCommit": {"oid": "9532e73ca53b5c3ba131d4682104b10474182f9f"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 326, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}