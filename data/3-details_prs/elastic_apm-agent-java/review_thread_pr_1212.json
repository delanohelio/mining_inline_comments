{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTUxOTkz", "number": 1212, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo0NTozOFrOEGyN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNzozMVrOEXfZIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTQ5NjUyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo0NTozOFrOGlyz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODowNDowNVrOG8UyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4Mjk3Nw==", "bodyText": "This is allocating four String objects every time. Please use the AbstractSpan#appendToName() API instead (create it before).\nSame for the other ones.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r442282977", "createdAt": "2020-06-18T14:45:38Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            if (parent != null) {\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                DispatcherType dispatcherType = request.getDispatcherType();\n+                boolean isAllowedType = false;\n+                String spanAction = null, spanName = null;\n+                if (dispatcherType == DispatcherType.FORWARD) {\n+                    String pathInfo = request.getPathInfo();\n+                    spanName = FORWARD + SPACE + request.getServletPath() + (pathInfo != null ? pathInfo : EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwODI4Mg==", "bodyText": "repalced with appendToName", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r465908282", "createdAt": "2020-08-05T18:04:05Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            if (parent != null) {\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                DispatcherType dispatcherType = request.getDispatcherType();\n+                boolean isAllowedType = false;\n+                String spanAction = null, spanName = null;\n+                if (dispatcherType == DispatcherType.FORWARD) {\n+                    String pathInfo = request.getPathInfo();\n+                    spanName = FORWARD + SPACE + request.getServletPath() + (pathInfo != null ? pathInfo : EMPTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4Mjk3Nw=="}, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU0NzI1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo1NjoyN1rOGlzT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo1NjoyN1rOGlzT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5MTE2Ng==", "bodyText": "This else statement looks misplaced. Its content should go inside the if above and you can do else with the servletRequest.getDispatcherType() == DispatcherType.REQUEST check.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r442291166", "createdAt": "2020-06-18T14:56:27Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU5MTc2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNjo1NVrOGlzwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODowNToyOVrOG8U1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5ODQzMw==", "bodyText": "Why using RequestDispatcher.FORWARD_SERVLET_PATH in this case? I think we want the error page path. The transaction will contain the original servlet path.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r442298433", "createdAt": "2020-06-18T15:06:55Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            if (parent != null) {\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                DispatcherType dispatcherType = request.getDispatcherType();\n+                boolean isAllowedType = false;\n+                String spanAction = null, spanName = null;\n+                if (dispatcherType == DispatcherType.FORWARD) {\n+                    String pathInfo = request.getPathInfo();\n+                    spanName = FORWARD + SPACE + request.getServletPath() + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = FORWARD_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.INCLUDE) {\n+                    Object pathInfo = request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);\n+                    spanName = INCLUDE + SPACE + request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH) + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = INCLUDE_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.ERROR) {\n+                    spanName = ERROR + SPACE + request.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwODk5NA==", "bodyText": "changed to getting\nObject servletPath = request.getServletPath();", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r465908994", "createdAt": "2020-08-05T18:05:29Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            if (parent != null) {\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                DispatcherType dispatcherType = request.getDispatcherType();\n+                boolean isAllowedType = false;\n+                String spanAction = null, spanName = null;\n+                if (dispatcherType == DispatcherType.FORWARD) {\n+                    String pathInfo = request.getPathInfo();\n+                    spanName = FORWARD + SPACE + request.getServletPath() + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = FORWARD_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.INCLUDE) {\n+                    Object pathInfo = request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);\n+                    spanName = INCLUDE + SPACE + request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH) + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = INCLUDE_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.ERROR) {\n+                    spanName = ERROR + SPACE + request.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5ODQzMw=="}, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYwNTI2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDowOVrOGlz4mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDowOVrOGlz4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDU3MQ==", "bodyText": "Please check if you already get the Exception object stored in the RequestDispatcher.ERROR_EXCEPTION attribute somewhere else. If not, let's create and send an error here with captureException through the parent span.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r442300571", "createdAt": "2020-06-18T15:10:09Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -143,6 +156,37 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n             servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n                 request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n                 request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+        } else if (transaction == null && servletRequest instanceof HttpServletRequest) {\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            if (parent != null) {\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                DispatcherType dispatcherType = request.getDispatcherType();\n+                boolean isAllowedType = false;\n+                String spanAction = null, spanName = null;\n+                if (dispatcherType == DispatcherType.FORWARD) {\n+                    String pathInfo = request.getPathInfo();\n+                    spanName = FORWARD + SPACE + request.getServletPath() + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = FORWARD_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.INCLUDE) {\n+                    Object pathInfo = request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);\n+                    spanName = INCLUDE + SPACE + request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH) + (pathInfo != null ? pathInfo : EMPTY);\n+                    spanAction = INCLUDE_SPAN_ACTION;\n+                    isAllowedType = true;\n+                } else if (dispatcherType == DispatcherType.ERROR) {\n+                    spanName = ERROR + SPACE + request.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);\n+                    spanAction = ERROR_SPAN_ACTION;\n+                    isAllowedType = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTY2OTg0OnYy", "diffSide": "RIGHT", "path": "integration-tests/application-server-integration-tests/src/test/java/co/elastic/apm/servlet/tests/ServletApiTestApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNToyMVrOGl0hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODowNzozMFrOG8U44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTExMA==", "bodyText": "You need to assert that exactly the expected spans are captured. Potentially, this can pass if two non-related spans are captured.\nYou can filter the span collection for each and assert you get exactly one that contains the required info.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r442311110", "createdAt": "2020-06-18T15:25:21Z", "author": {"login": "eyalkoren"}, "path": "integration-tests/application-server-integration-tests/src/test/java/co/elastic/apm/servlet/tests/ServletApiTestApp.java", "diffHunk": "@@ -75,6 +78,58 @@ private void testCaptureBody(AbstractServletContainerIntegrationTest test) throw\n         }\n     }\n \n+    private void testTransactionReportingWithForward(AbstractServletContainerIntegrationTest test) throws Exception {\n+        String pathToTest = \"/simple-webapp\" + \"/forward\";\n+        boolean isExistForwardSpan = false;\n+        boolean isExistDbH2QuerySpan = false;\n+        test.clearMockServerLog();\n+\n+        test.executeAndValidateRequest(pathToTest, \"Hello World\", 200, null);\n+\n+        JsonNode transaction = test.assertTransactionReported(pathToTest, 200);\n+\n+        List<JsonNode> reportedSpans = test.getReportedSpans();\n+        assertThat(reportedSpans.size()).isEqualTo(2);\n+\n+        for (JsonNode span : test.getReportedSpans()) {\n+            String spanType = span.get(\"type\").textValue();\n+            if (\"servlet.request-dispatcher.forward\".equals(spanType)) {\n+                isExistForwardSpan = true;\n+                assertThat(span.get(\"name\").textValue()).isEqualTo(\"FORWARD /servlet\");\n+            } else if (\"db.h2.query\".equals(spanType)) {\n+                isExistDbH2QuerySpan = true;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTk4Ng==", "bodyText": "added filter before assert.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r465909986", "createdAt": "2020-08-05T18:07:30Z", "author": {"login": "kananindzya"}, "path": "integration-tests/application-server-integration-tests/src/test/java/co/elastic/apm/servlet/tests/ServletApiTestApp.java", "diffHunk": "@@ -75,6 +78,58 @@ private void testCaptureBody(AbstractServletContainerIntegrationTest test) throw\n         }\n     }\n \n+    private void testTransactionReportingWithForward(AbstractServletContainerIntegrationTest test) throws Exception {\n+        String pathToTest = \"/simple-webapp\" + \"/forward\";\n+        boolean isExistForwardSpan = false;\n+        boolean isExistDbH2QuerySpan = false;\n+        test.clearMockServerLog();\n+\n+        test.executeAndValidateRequest(pathToTest, \"Hello World\", 200, null);\n+\n+        JsonNode transaction = test.assertTransactionReported(pathToTest, 200);\n+\n+        List<JsonNode> reportedSpans = test.getReportedSpans();\n+        assertThat(reportedSpans.size()).isEqualTo(2);\n+\n+        for (JsonNode span : test.getReportedSpans()) {\n+            String spanType = span.get(\"type\").textValue();\n+            if (\"servlet.request-dispatcher.forward\".equals(spanType)) {\n+                isExistForwardSpan = true;\n+                assertThat(span.get(\"name\").textValue()).isEqualTo(\"FORWARD /servlet\");\n+            } else if (\"db.h2.query\".equals(spanType)) {\n+                isExistDbH2QuerySpan = true;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTExMA=="}, "originalCommit": {"oid": "96711728acd8fb3d4b652c676cf29ee656ecd085"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMxMzQ0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoyNzozOVrOGtIcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoyNzozOVrOGtIcrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NzUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String FORWARD = \"FORWARD\";\n          \n          \n            \n                private static final String INCLUDE = \"INCLUDE\";\n          \n          \n            \n                private static final String ERROR = \"ERROR\";\n          \n          \n            \n                private static final String SPACE = \" \";\n          \n          \n            \n                private static final String EMPTY = \"\";\n          \n          \n            \n                private static final String FORWARD = \"FORWARD \";\n          \n          \n            \n                private static final String INCLUDE = \"INCLUDE \";\n          \n          \n            \n                private static final String ERROR = \"ERROR \";", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r449977518", "createdAt": "2020-07-06T04:27:39Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -60,6 +63,16 @@\n public class ServletApiAdvice {\n \n     private static final String FRAMEWORK_NAME = \"Servlet API\";\n+    private static final String SPAN_TYPE = \"servlet\";\n+    private static final String SPAN_SUBTYPE = \"request-dispatcher\";\n+    private static final String FORWARD_SPAN_ACTION = \"forward\";\n+    private static final String INCLUDE_SPAN_ACTION = \"include\";\n+    private static final String ERROR_SPAN_ACTION = \"error\";\n+    private static final String FORWARD = \"FORWARD\";\n+    private static final String INCLUDE = \"INCLUDE\";\n+    private static final String ERROR = \"ERROR\";\n+    private static final String SPACE = \" \";\n+    private static final String EMPTY = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMxNTc4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoyOToxNFrOGtIeBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODowNjo0OVrOG8U3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Nzg2Mg==", "bodyText": "Why is the transaction == null required here? Seems it will always be null", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r449977862", "createdAt": "2020-07-06T04:29:14Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -100,49 +122,96 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n         if (tracer.isRunning() &&\n             servletTransactionHelper != null &&\n             servletRequest instanceof HttpServletRequest &&\n-            servletRequest.getDispatcherType() == DispatcherType.REQUEST &&\n             !Boolean.TRUE.equals(excluded.get())) {\n+            if (servletRequest.getDispatcherType() == DispatcherType.REQUEST) {\n+                ServletContext servletContext = servletRequest.getServletContext();\n+                if (servletContext != null) {\n+                    // this makes sure service name discovery also works when attaching at runtime\n+                    determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n+                }\n \n-            ServletContext servletContext = servletRequest.getServletContext();\n-            if (servletContext != null) {\n-                // this makes sure service name discovery also works when attaching at runtime\n-                determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n-            }\n-\n-            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n-            if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n-                ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n-                    ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n-                if (helper != null) {\n-                    transaction = helper.createAndActivateTransaction(request);\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n+                    ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n+                        ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n+                    if (helper != null) {\n+                        transaction = helper.createAndActivateTransaction(request);\n+                    }\n                 }\n-            }\n \n-            if (transaction == null) {\n-                // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n-                excluded.set(Boolean.TRUE);\n-                return;\n-            }\n-            final Request req = transaction.getContext().getRequest();\n-            if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n-                if (request.getCookies() != null) {\n-                    for (Cookie cookie : request.getCookies()) {\n-                        req.addCookie(cookie.getName(), cookie.getValue());\n+                if (transaction == null) {\n+                    // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n+                    excluded.set(Boolean.TRUE);\n+                    return;\n+                }\n+                final Request req = transaction.getContext().getRequest();\n+                if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n+                    if (request.getCookies() != null) {\n+                        for (Cookie cookie : request.getCookies()) {\n+                            req.addCookie(cookie.getName(), cookie.getValue());\n+                        }\n+                    }\n+                    final Enumeration<String> headerNames = request.getHeaderNames();\n+                    if (headerNames != null) {\n+                        while (headerNames.hasMoreElements()) {\n+                            final String headerName = headerNames.nextElement();\n+                            req.addHeader(headerName, request.getHeaders(headerName));\n+                        }\n                     }\n                 }\n-                final Enumeration<String> headerNames = request.getHeaderNames();\n-                if (headerNames != null) {\n-                    while (headerNames.hasMoreElements()) {\n-                        final String headerName = headerNames.nextElement();\n-                        req.addHeader(headerName, request.getHeaders(headerName));\n+                transaction.setFrameworkName(FRAMEWORK_NAME);\n+\n+                servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n+                    request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n+                    request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+            } else if (transaction == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTY0OA==", "bodyText": "i changed here condition to ->\nservletRequest.getDispatcherType() != DispatcherType.ASYNC", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r465909648", "createdAt": "2020-08-05T18:06:49Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -100,49 +122,96 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n         if (tracer.isRunning() &&\n             servletTransactionHelper != null &&\n             servletRequest instanceof HttpServletRequest &&\n-            servletRequest.getDispatcherType() == DispatcherType.REQUEST &&\n             !Boolean.TRUE.equals(excluded.get())) {\n+            if (servletRequest.getDispatcherType() == DispatcherType.REQUEST) {\n+                ServletContext servletContext = servletRequest.getServletContext();\n+                if (servletContext != null) {\n+                    // this makes sure service name discovery also works when attaching at runtime\n+                    determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n+                }\n \n-            ServletContext servletContext = servletRequest.getServletContext();\n-            if (servletContext != null) {\n-                // this makes sure service name discovery also works when attaching at runtime\n-                determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n-            }\n-\n-            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n-            if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n-                ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n-                    ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n-                if (helper != null) {\n-                    transaction = helper.createAndActivateTransaction(request);\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n+                    ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n+                        ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n+                    if (helper != null) {\n+                        transaction = helper.createAndActivateTransaction(request);\n+                    }\n                 }\n-            }\n \n-            if (transaction == null) {\n-                // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n-                excluded.set(Boolean.TRUE);\n-                return;\n-            }\n-            final Request req = transaction.getContext().getRequest();\n-            if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n-                if (request.getCookies() != null) {\n-                    for (Cookie cookie : request.getCookies()) {\n-                        req.addCookie(cookie.getName(), cookie.getValue());\n+                if (transaction == null) {\n+                    // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n+                    excluded.set(Boolean.TRUE);\n+                    return;\n+                }\n+                final Request req = transaction.getContext().getRequest();\n+                if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n+                    if (request.getCookies() != null) {\n+                        for (Cookie cookie : request.getCookies()) {\n+                            req.addCookie(cookie.getName(), cookie.getValue());\n+                        }\n+                    }\n+                    final Enumeration<String> headerNames = request.getHeaderNames();\n+                    if (headerNames != null) {\n+                        while (headerNames.hasMoreElements()) {\n+                            final String headerName = headerNames.nextElement();\n+                            req.addHeader(headerName, request.getHeaders(headerName));\n+                        }\n                     }\n                 }\n-                final Enumeration<String> headerNames = request.getHeaderNames();\n-                if (headerNames != null) {\n-                    while (headerNames.hasMoreElements()) {\n-                        final String headerName = headerNames.nextElement();\n-                        req.addHeader(headerName, request.getHeaders(headerName));\n+                transaction.setFrameworkName(FRAMEWORK_NAME);\n+\n+                servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n+                    request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n+                    request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+            } else if (transaction == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Nzg2Mg=="}, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMxNjI5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoyOTo0MVrOGtIeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDoyOTo0MVrOGtIeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Nzk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    span.withAction(FORWARD_SPAN_ACTION);\n          \n          \n            \n                                    span.withAction(INCLUDE_SPAN_ACTION);", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r449977945", "createdAt": "2020-07-06T04:29:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -100,49 +122,96 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n         if (tracer.isRunning() &&\n             servletTransactionHelper != null &&\n             servletRequest instanceof HttpServletRequest &&\n-            servletRequest.getDispatcherType() == DispatcherType.REQUEST &&\n             !Boolean.TRUE.equals(excluded.get())) {\n+            if (servletRequest.getDispatcherType() == DispatcherType.REQUEST) {\n+                ServletContext servletContext = servletRequest.getServletContext();\n+                if (servletContext != null) {\n+                    // this makes sure service name discovery also works when attaching at runtime\n+                    determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n+                }\n \n-            ServletContext servletContext = servletRequest.getServletContext();\n-            if (servletContext != null) {\n-                // this makes sure service name discovery also works when attaching at runtime\n-                determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n-            }\n-\n-            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n-            if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n-                ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n-                    ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n-                if (helper != null) {\n-                    transaction = helper.createAndActivateTransaction(request);\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n+                    ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n+                        ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n+                    if (helper != null) {\n+                        transaction = helper.createAndActivateTransaction(request);\n+                    }\n                 }\n-            }\n \n-            if (transaction == null) {\n-                // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n-                excluded.set(Boolean.TRUE);\n-                return;\n-            }\n-            final Request req = transaction.getContext().getRequest();\n-            if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n-                if (request.getCookies() != null) {\n-                    for (Cookie cookie : request.getCookies()) {\n-                        req.addCookie(cookie.getName(), cookie.getValue());\n+                if (transaction == null) {\n+                    // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n+                    excluded.set(Boolean.TRUE);\n+                    return;\n+                }\n+                final Request req = transaction.getContext().getRequest();\n+                if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n+                    if (request.getCookies() != null) {\n+                        for (Cookie cookie : request.getCookies()) {\n+                            req.addCookie(cookie.getName(), cookie.getValue());\n+                        }\n+                    }\n+                    final Enumeration<String> headerNames = request.getHeaderNames();\n+                    if (headerNames != null) {\n+                        while (headerNames.hasMoreElements()) {\n+                            final String headerName = headerNames.nextElement();\n+                            req.addHeader(headerName, request.getHeaders(headerName));\n+                        }\n                     }\n                 }\n-                final Enumeration<String> headerNames = request.getHeaderNames();\n-                if (headerNames != null) {\n-                    while (headerNames.hasMoreElements()) {\n-                        final String headerName = headerNames.nextElement();\n-                        req.addHeader(headerName, request.getHeaders(headerName));\n+                transaction.setFrameworkName(FRAMEWORK_NAME);\n+\n+                servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n+                    request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n+                    request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+            } else if (transaction == null) {\n+                final AbstractSpan<?> parent = tracer.getActive();\n+                if (parent != null) {\n+                    final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                    DispatcherType dispatcherType = request.getDispatcherType();\n+                    boolean isSpannableDispatcherType = false;\n+                    span = parent.createSpan()\n+                        .withType(SPAN_TYPE)\n+                        .withSubtype(SPAN_SUBTYPE);\n+\n+                    if (dispatcherType == DispatcherType.FORWARD) {\n+                        span.appendToName(FORWARD)\n+                            .appendToName(SPACE)\n+                            .appendToName(request.getServletPath());\n+                        if (request.getPathInfo() != null) {\n+                            span.appendToName(request.getPathInfo());\n+                        }\n+                        span.withAction(FORWARD_SPAN_ACTION);\n+                        isSpannableDispatcherType = true;\n+                    } else if (dispatcherType == DispatcherType.INCLUDE) {\n+                        Object pathInfo = request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);\n+                        Object includeServletPath = request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);\n+                        span.appendToName(INCLUDE)\n+                            .appendToName(SPACE);\n+                        if (includeServletPath != null) {\n+                            span.appendToName((String) includeServletPath);\n+                        }\n+                        if (pathInfo != null) {\n+                            span.appendToName((String) pathInfo);\n+                        }\n+                        span.withAction(FORWARD_SPAN_ACTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMzNDA4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0MjowNlrOGtIogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0MjowNlrOGtIogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MDU0NA==", "bodyText": "Do not create a span unless you know we need one. Currently these spans can leak. You must always end a span you created, like you must always deactivate a span you activated (which you did).\nIn rare cases (this is not one), you may create a span and then requestDiscarding it, but you still must end it.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r449980544", "createdAt": "2020-07-06T04:42:06Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -100,49 +122,96 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n         if (tracer.isRunning() &&\n             servletTransactionHelper != null &&\n             servletRequest instanceof HttpServletRequest &&\n-            servletRequest.getDispatcherType() == DispatcherType.REQUEST &&\n             !Boolean.TRUE.equals(excluded.get())) {\n+            if (servletRequest.getDispatcherType() == DispatcherType.REQUEST) {\n+                ServletContext servletContext = servletRequest.getServletContext();\n+                if (servletContext != null) {\n+                    // this makes sure service name discovery also works when attaching at runtime\n+                    determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n+                }\n \n-            ServletContext servletContext = servletRequest.getServletContext();\n-            if (servletContext != null) {\n-                // this makes sure service name discovery also works when attaching at runtime\n-                determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n-            }\n-\n-            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n-            if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n-                ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n-                    ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n-                if (helper != null) {\n-                    transaction = helper.createAndActivateTransaction(request);\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n+                    ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n+                        ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n+                    if (helper != null) {\n+                        transaction = helper.createAndActivateTransaction(request);\n+                    }\n                 }\n-            }\n \n-            if (transaction == null) {\n-                // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n-                excluded.set(Boolean.TRUE);\n-                return;\n-            }\n-            final Request req = transaction.getContext().getRequest();\n-            if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n-                if (request.getCookies() != null) {\n-                    for (Cookie cookie : request.getCookies()) {\n-                        req.addCookie(cookie.getName(), cookie.getValue());\n+                if (transaction == null) {\n+                    // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n+                    excluded.set(Boolean.TRUE);\n+                    return;\n+                }\n+                final Request req = transaction.getContext().getRequest();\n+                if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n+                    if (request.getCookies() != null) {\n+                        for (Cookie cookie : request.getCookies()) {\n+                            req.addCookie(cookie.getName(), cookie.getValue());\n+                        }\n+                    }\n+                    final Enumeration<String> headerNames = request.getHeaderNames();\n+                    if (headerNames != null) {\n+                        while (headerNames.hasMoreElements()) {\n+                            final String headerName = headerNames.nextElement();\n+                            req.addHeader(headerName, request.getHeaders(headerName));\n+                        }\n                     }\n                 }\n-                final Enumeration<String> headerNames = request.getHeaderNames();\n-                if (headerNames != null) {\n-                    while (headerNames.hasMoreElements()) {\n-                        final String headerName = headerNames.nextElement();\n-                        req.addHeader(headerName, request.getHeaders(headerName));\n+                transaction.setFrameworkName(FRAMEWORK_NAME);\n+\n+                servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n+                    request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n+                    request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+            } else if (transaction == null) {\n+                final AbstractSpan<?> parent = tracer.getActive();\n+                if (parent != null) {\n+                    final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                    DispatcherType dispatcherType = request.getDispatcherType();\n+                    boolean isSpannableDispatcherType = false;\n+                    span = parent.createSpan()\n+                        .withType(SPAN_TYPE)\n+                        .withSubtype(SPAN_SUBTYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTM0MjEwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0ODo0MFrOGtItOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0ODo0MFrOGtItOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MTc1Mg==", "bodyText": "getNameAsString is allocating a String objects (so two in this comparison).\nThere are better ways to avoid creation of same nested spans. For example, before creating a span, see if the parent span has the same type, subtype and action.\nWhat cases are you trying to prevent with this comparison?", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r449981752", "createdAt": "2020-07-06T04:48:40Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -100,49 +122,96 @@ public static void onEnterServletService(@Advice.Argument(0) ServletRequest serv\n         if (tracer.isRunning() &&\n             servletTransactionHelper != null &&\n             servletRequest instanceof HttpServletRequest &&\n-            servletRequest.getDispatcherType() == DispatcherType.REQUEST &&\n             !Boolean.TRUE.equals(excluded.get())) {\n+            if (servletRequest.getDispatcherType() == DispatcherType.REQUEST) {\n+                ServletContext servletContext = servletRequest.getServletContext();\n+                if (servletContext != null) {\n+                    // this makes sure service name discovery also works when attaching at runtime\n+                    determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n+                }\n \n-            ServletContext servletContext = servletRequest.getServletContext();\n-            if (servletContext != null) {\n-                // this makes sure service name discovery also works when attaching at runtime\n-                determineServiceName(servletContext.getServletContextName(), servletContext.getClassLoader(), servletContext.getContextPath());\n-            }\n-\n-            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n-            if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n-                ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n-                    ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n-                if (helper != null) {\n-                    transaction = helper.createAndActivateTransaction(request);\n+                final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                if (ServletInstrumentation.servletTransactionCreationHelperManager != null) {\n+                    ServletInstrumentation.ServletTransactionCreationHelper<HttpServletRequest> helper =\n+                        ServletInstrumentation.servletTransactionCreationHelperManager.getForClassLoaderOfClass(HttpServletRequest.class);\n+                    if (helper != null) {\n+                        transaction = helper.createAndActivateTransaction(request);\n+                    }\n                 }\n-            }\n \n-            if (transaction == null) {\n-                // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n-                excluded.set(Boolean.TRUE);\n-                return;\n-            }\n-            final Request req = transaction.getContext().getRequest();\n-            if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n-                if (request.getCookies() != null) {\n-                    for (Cookie cookie : request.getCookies()) {\n-                        req.addCookie(cookie.getName(), cookie.getValue());\n+                if (transaction == null) {\n+                    // if the request is excluded, avoid matching all exclude patterns again on each filter invocation\n+                    excluded.set(Boolean.TRUE);\n+                    return;\n+                }\n+                final Request req = transaction.getContext().getRequest();\n+                if (transaction.isSampled() && tracer.getConfig(CoreConfiguration.class).isCaptureHeaders()) {\n+                    if (request.getCookies() != null) {\n+                        for (Cookie cookie : request.getCookies()) {\n+                            req.addCookie(cookie.getName(), cookie.getValue());\n+                        }\n+                    }\n+                    final Enumeration<String> headerNames = request.getHeaderNames();\n+                    if (headerNames != null) {\n+                        while (headerNames.hasMoreElements()) {\n+                            final String headerName = headerNames.nextElement();\n+                            req.addHeader(headerName, request.getHeaders(headerName));\n+                        }\n                     }\n                 }\n-                final Enumeration<String> headerNames = request.getHeaderNames();\n-                if (headerNames != null) {\n-                    while (headerNames.hasMoreElements()) {\n-                        final String headerName = headerNames.nextElement();\n-                        req.addHeader(headerName, request.getHeaders(headerName));\n+                transaction.setFrameworkName(FRAMEWORK_NAME);\n+\n+                servletTransactionHelper.fillRequestContext(transaction, request.getProtocol(), request.getMethod(), request.isSecure(),\n+                    request.getScheme(), request.getServerName(), request.getServerPort(), request.getRequestURI(), request.getQueryString(),\n+                    request.getRemoteAddr(), request.getHeader(\"Content-Type\"));\n+            } else if (transaction == null) {\n+                final AbstractSpan<?> parent = tracer.getActive();\n+                if (parent != null) {\n+                    final HttpServletRequest request = (HttpServletRequest) servletRequest;\n+                    DispatcherType dispatcherType = request.getDispatcherType();\n+                    boolean isSpannableDispatcherType = false;\n+                    span = parent.createSpan()\n+                        .withType(SPAN_TYPE)\n+                        .withSubtype(SPAN_SUBTYPE);\n+\n+                    if (dispatcherType == DispatcherType.FORWARD) {\n+                        span.appendToName(FORWARD)\n+                            .appendToName(SPACE)\n+                            .appendToName(request.getServletPath());\n+                        if (request.getPathInfo() != null) {\n+                            span.appendToName(request.getPathInfo());\n+                        }\n+                        span.withAction(FORWARD_SPAN_ACTION);\n+                        isSpannableDispatcherType = true;\n+                    } else if (dispatcherType == DispatcherType.INCLUDE) {\n+                        Object pathInfo = request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);\n+                        Object includeServletPath = request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);\n+                        span.appendToName(INCLUDE)\n+                            .appendToName(SPACE);\n+                        if (includeServletPath != null) {\n+                            span.appendToName((String) includeServletPath);\n+                        }\n+                        if (pathInfo != null) {\n+                            span.appendToName((String) pathInfo);\n+                        }\n+                        span.withAction(FORWARD_SPAN_ACTION);\n+                        isSpannableDispatcherType = true;\n+                    } else if (dispatcherType == DispatcherType.ERROR) {\n+                        Object servletPath = request.getServletPath();\n+                        span.appendToName(ERROR)\n+                            .appendToName(SPACE);\n+                        if (servletPath != null) {\n+                            span.appendToName((String) servletPath);\n+                        }\n+                        span.withAction(ERROR_SPAN_ACTION);\n+                        isSpannableDispatcherType = true;\n+                    }\n+                    if (isSpannableDispatcherType && !parent.getNameAsString().equals(span.getNameAsString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be406076c63ed4421d7b9e4fa1a9faec3914b18"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY3MDQyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNzozMVrOG_TseA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNzozMVrOG_TseA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjE1Mg==", "bodyText": "No, we can't do that as we don't know if it's the same exception or not.", "url": "https://github.com/elastic/apm-agent-java/pull/1212#discussion_r469036152", "createdAt": "2020-08-12T06:37:31Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java", "diffHunk": "@@ -253,8 +254,12 @@ public static void onExitServletService(@Advice.Argument(0) ServletRequest servl\n                         Object throwable = request.getAttribute(attributeName);\n                         if (throwable instanceof Throwable) {\n                             t2 = (Throwable) throwable;\n-                            if (!attributeName.equals(\"javax.servlet.error.exception\")) {\n+                            if (!attributeName.equals(RequestDispatcher.ERROR_EXCEPTION)) {\n                                 overrideStatusCodeOnThrowable = false;\n+                            } else {\n+                                if (Boolean.TRUE.equals(isExceptionAttributeCaptured.get())) {\n+                                    t2 = null;\n+                                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dc1a1f568d8be0fe364e63bff92b4834200b73c"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 356, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}