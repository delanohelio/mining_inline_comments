{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTc3NjE2", "number": 1149, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxNDoyMlrOD0lCPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1ODo0MlrOD0t5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU5MzI3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxNDoyMlrOGJlGrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODowOTo1OFrOGJpRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5ODI4Ng==", "bodyText": "Seems like we're re-triggering this exception for every request to APM Server, right? Could we exclude TLSv1.3 if we know it triggers the bug on the current JVM?", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412698286", "createdAt": "2020-04-22T06:14:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    private static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+            if (enabledProtocols.contains(TLS_v_1_3) && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTEwMA==", "bodyText": "Maybe also suggest the user what to do when the exception occurs, like updating the JDK, or removing 1.3 for the server's setting (https://www.elastic.co/guide/en/apm/server/current/agent-server-ssl.html#_supported_protocols_2).", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412721100", "createdAt": "2020-04-22T06:59:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    private static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+            if (enabledProtocols.contains(TLS_v_1_3) && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5ODI4Ng=="}, "originalCommit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2MjQ1OQ==", "bodyText": "I agree with both comments, having  a single warning is better, and an actionable message is definitely better than having to deal with that in an FAQ somewhere :-).", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412762459", "createdAt": "2020-04-22T08:03:48Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    private static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+            if (enabledProtocols.contains(TLS_v_1_3) && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5ODI4Ng=="}, "originalCommit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NjU0Mg==", "bodyText": "Also, there would be the option to disable TLS 1.3 client side, but that would impact the whole JVM, or provide a configuration for agent, which implies some extra complexity for documentation/support.", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412766542", "createdAt": "2020-04-22T08:09:58Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    private static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+            if (enabledProtocols.contains(TLS_v_1_3) && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5ODI4Ng=="}, "originalCommit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjAzODQ1OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1Njo1NVrOGJyctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1Njo1NVrOGJyctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNjkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on apm-server as a workaround\");\n          \n          \n            \n                                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on APM Server as a workaround (apm-server.ssl.supported_protocols)\");", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412916917", "createdAt": "2020-04-22T11:56:55Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+\n+        Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+        boolean hasTLS13 = enabledProtocols.contains(TLS_v_1_3);\n+        AtomicBoolean skipTLS13 = socketFactory.skipTLS13();\n+        if (hasTLS13 && skipTLS13.get()) {\n+            enabledProtocols.remove(TLS_v_1_3);\n+            socket.setEnabledProtocols(enabledProtocols.toArray(new String[0]));\n+            hasTLS13 = false;\n+        }\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            if (hasTLS13 && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                boolean hasBeenWarned = skipTLS13.getAndSet(true);\n+                if (!hasBeenWarned) {\n+                    logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on apm-server as a workaround\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjA0NTEzOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1ODo0MlrOGJyg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NToxOVrOGJ0bkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNzk4Mw==", "bodyText": "Why don't we create our own SSLSocketFactory from scratch?", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412917983", "createdAt": "2020-04-22T11:58:42Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerClient.java", "diffHunk": "@@ -121,6 +122,11 @@ private void setServerUrls(List<URL> serverUrls) {\n         return copy;\n     }\n \n+    private static void tlsFallback(HttpsURLConnection connection) {\n+        SSLSocketFactory newFactory = SslUtils.getTLSFallbackSocketFactory(connection.getSSLSocketFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNDAxNA==", "bodyText": "You mean, why do we wrap the default SSLSocketFactory where we could just have created a new one ?\nFor me that's just a way to make sure that our implementation does not introduce obvious security bugs or unexpected behaviors here. Also, the default implementation is not public thus we can't inherit from it.", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412924014", "createdAt": "2020-04-22T12:08:14Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerClient.java", "diffHunk": "@@ -121,6 +122,11 @@ private void setServerUrls(List<URL> serverUrls) {\n         return copy;\n     }\n \n+    private static void tlsFallback(HttpsURLConnection connection) {\n+        SSLSocketFactory newFactory = SslUtils.getTLSFallbackSocketFactory(connection.getSSLSocketFactory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNzk4Mw=="}, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0OTM5NQ==", "bodyText": "I mean similar to this: https://gist.github.com/fkrauthan/ac8624466a4dee4fd02f", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412949395", "createdAt": "2020-04-22T12:45:19Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerClient.java", "diffHunk": "@@ -121,6 +122,11 @@ private void setServerUrls(List<URL> serverUrls) {\n         return copy;\n     }\n \n+    private static void tlsFallback(HttpsURLConnection connection) {\n+        SSLSocketFactory newFactory = SslUtils.getTLSFallbackSocketFactory(connection.getSSLSocketFactory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNzk4Mw=="}, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 285, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}