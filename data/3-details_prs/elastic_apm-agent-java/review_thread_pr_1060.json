{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODYxOTIw", "number": 1060, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODozMzo1OFrODkEZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNDo0NVrODkiOGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQ3MzA5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODozMzo1OFrOFwM8wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOToyNDoxM1rOFwNKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4ODEzMA==", "bodyText": "Why do we need this test jar?", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386088130", "createdAt": "2020-03-01T08:33:58Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>apm-redis-plugin</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.13.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-redisson-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../../..</apm-agent-parent.base.dir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-redis-common</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-redis-common</artifactId>\n+            <type>test-jar</type>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.redisson</groupId>\n+            <artifactId>redisson</artifactId>\n+            <version>3.3.2</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTU2OA==", "bodyText": "It's useless. Let me remove it", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386091568", "createdAt": "2020-03-01T09:24:13Z", "author": {"login": "dengliming"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>apm-redis-plugin</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.13.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-redisson-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../../..</apm-agent-parent.base.dir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-redis-common</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-redis-common</artifactId>\n+            <type>test-jar</type>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.redisson</groupId>\n+            <artifactId>redisson</artifactId>\n+            <version>3.3.2</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4ODEzMA=="}, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQ3ODkyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0NjowNlrOFwM_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0NjowNlrOFwM_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4ODg4Mg==", "bodyText": "This overrides the name that used the method through RedisSpanUtils.createRedisSpan(method).\nIt appears that the method name can only be send, which is not good enough, so we probably need the command name.\nYou can use RedisSpanUtils.createRedisSpan(\"\") at the top instead of using the method name and then use the AbstractSpan#appendToName API to append the command name directly to the Span name, thus avoid the allocation of the commandBuilder.", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386088882", "createdAt": "2020-03-01T08:46:06Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.redis.redisson;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.redis.RedisSpanUtils;\n+import io.netty.channel.Channel;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.redisson.client.RedisConnection;\n+import org.redisson.client.protocol.CommandData;\n+import org.redisson.client.protocol.CommandsData;\n+\n+import javax.annotation.Nullable;\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+\n+public class RedisConnectionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Advice.OnMethodEnter\n+    private static void beforeSend(@Advice.This RedisConnection connection,\n+                                   @Advice.Argument(0) Object args,\n+                                   @Nullable @Advice.Local(\"span\") Span span,\n+                                   @Advice.Origin(\"#m\") String method) {\n+        span = RedisSpanUtils.createRedisSpan(method);\n+        if (span != null) {\n+            // get command\n+            StringBuilder commandBuilder = new StringBuilder();\n+            if (args instanceof CommandsData) {\n+                CommandsData commands = (CommandsData) args;\n+                for (CommandData commandData : commands.getCommands()) {\n+                    commandBuilder.append(commandData.getCommand().getName()).append(\";\");\n+                }\n+            } else if (args instanceof CommandData) {\n+                commandBuilder.append(((CommandData) args).getCommand().getName());\n+            }\n+\n+            // get connection address\n+            Channel channel = connection.getChannel();\n+            InetSocketAddress remoteAddress = (InetSocketAddress) channel.remoteAddress();\n+            span.getContext().getDestination()\n+                .withAddress(remoteAddress.getAddress().getHostAddress())\n+                .withPort(remoteAddress.getPort());\n+            span.withName(commandBuilder.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQ4MDQ0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0ODo0MVrOFwNAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0ODo0MVrOFwNAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4OTA2Ng==", "bodyText": "I assume this can potentially lead to very long span names, which is something we want to avoid. Think of span name as something we would like to be no more than 50 characters long, potentially less, unless there is a very good reason to do otherwise.\nMaybe appending a ... or ... [bulk] to the first command name if a bulk of commands are used? The additional benefit is not using the iteration (for (CommandData commandData : commands.getCommands())) , which allocates an iterator.", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386089066", "createdAt": "2020-03-01T08:48:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.redis.redisson;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.redis.RedisSpanUtils;\n+import io.netty.channel.Channel;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.redisson.client.RedisConnection;\n+import org.redisson.client.protocol.CommandData;\n+import org.redisson.client.protocol.CommandsData;\n+\n+import javax.annotation.Nullable;\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+\n+public class RedisConnectionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Advice.OnMethodEnter\n+    private static void beforeSend(@Advice.This RedisConnection connection,\n+                                   @Advice.Argument(0) Object args,\n+                                   @Nullable @Advice.Local(\"span\") Span span,\n+                                   @Advice.Origin(\"#m\") String method) {\n+        span = RedisSpanUtils.createRedisSpan(method);\n+        if (span != null) {\n+            // get command\n+            StringBuilder commandBuilder = new StringBuilder();\n+            if (args instanceof CommandsData) {\n+                CommandsData commands = (CommandsData) args;\n+                for (CommandData commandData : commands.getCommands()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQ4MDY5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0OToyNFrOFwNAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODo0OToyNFrOFwNAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4OTA5NA==", "bodyText": "This means the name always ends with ;, not something we would like", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386089094", "createdAt": "2020-03-01T08:49:24Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/main/java/co/elastic/apm/agent/redis/redisson/RedisConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.redis.redisson;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.redis.RedisSpanUtils;\n+import io.netty.channel.Channel;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.redisson.client.RedisConnection;\n+import org.redisson.client.protocol.CommandData;\n+import org.redisson.client.protocol.CommandsData;\n+\n+import javax.annotation.Nullable;\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+\n+public class RedisConnectionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Advice.OnMethodEnter\n+    private static void beforeSend(@Advice.This RedisConnection connection,\n+                                   @Advice.Argument(0) Object args,\n+                                   @Nullable @Advice.Local(\"span\") Span span,\n+                                   @Advice.Origin(\"#m\") String method) {\n+        span = RedisSpanUtils.createRedisSpan(method);\n+        if (span != null) {\n+            // get command\n+            StringBuilder commandBuilder = new StringBuilder();\n+            if (args instanceof CommandsData) {\n+                CommandsData commands = (CommandsData) args;\n+                for (CommandData commandData : commands.getCommands()) {\n+                    commandBuilder.append(commandData.getCommand().getName()).append(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQ4OTMxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/test/java/co/elastic/apm/agent/redis/redisson/RedissonInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTowNDozM1rOFwNEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTowNDozM1rOFwNEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDE3MA==", "bodyText": "Are there other ways of using the Redisson client? If so, please add a test for each API usage.", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386090170", "createdAt": "2020-03-01T09:04:33Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-redis-plugin/apm-redisson-plugin/src/test/java/co/elastic/apm/agent/redis/redisson/RedissonInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.redis.redisson;\n+\n+import co.elastic.apm.agent.impl.Scope;\n+import co.elastic.apm.agent.redis.AbstractRedisInstrumentationTest;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.redisson.Redisson;\n+import org.redisson.api.RBucket;\n+import org.redisson.api.RedissonClient;\n+import org.redisson.config.Config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class RedissonInstrumentationTest extends AbstractRedisInstrumentationTest {\n+\n+    protected RedissonClient redisson;\n+\n+    @BeforeEach\n+    void setUp() {\n+        Config config = new Config();\n+        config.useSingleServer().setAddress(\"localhost:\" + redisPort);\n+        redisson = Redisson.create(config);\n+    }\n+\n+    @AfterEach\n+    void shutdown() {\n+        redisson.shutdown();\n+    }\n+\n+    @Test\n+    void testRedission() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed280a49f6371cb7d04c270e343dd81e3bc104"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjI5MDE5OnYy", "diffSide": "RIGHT", "path": "docs/supported-technologies.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoyNDoyNlrOFw5mpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoxMzo0NlrOFw6cTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTc0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |3.x\n          \n          \n            \n            |2.1.5+", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386819748", "createdAt": "2020-03-03T06:24:26Z", "author": {"login": "eyalkoren"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -187,6 +187,11 @@ Other Servlet 3+ compliant servers will most likely work as well.\n |The agent creates spans for interactions with the Lettuce client.\n |1.13.0\n \n+|Redis Redisson\n+|3.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53c24dccc815b7020666fe5fbafccb9e1a68a92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMzQ4NQ==", "bodyText": "Thanks.", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386833485", "createdAt": "2020-03-03T07:13:46Z", "author": {"login": "dengliming"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -187,6 +187,11 @@ Other Servlet 3+ compliant servers will most likely work as well.\n |The agent creates spans for interactions with the Lettuce client.\n |1.13.0\n \n+|Redis Redisson\n+|3.x", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTc0OA=="}, "originalCommit": {"oid": "f53c24dccc815b7020666fe5fbafccb9e1a68a92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM1OTkzOnYy", "diffSide": "RIGHT", "path": "docs/supported-technologies.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNDo0NVrOFw6Rbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNDo0NVrOFw6Rbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |1.13.1\n          \n          \n            \n            |1.15.0", "url": "https://github.com/elastic/apm-agent-java/pull/1060#discussion_r386830703", "createdAt": "2020-03-03T07:04:45Z", "author": {"login": "eyalkoren"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -187,6 +187,11 @@ Other Servlet 3+ compliant servers will most likely work as well.\n |The agent creates spans for interactions with the Lettuce client.\n |1.13.0\n \n+|Redis Redisson\n+|3.x\n+|The agent creates spans for interactions with the Redisson client.\n+|1.13.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53c24dccc815b7020666fe5fbafccb9e1a68a92"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 474, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}