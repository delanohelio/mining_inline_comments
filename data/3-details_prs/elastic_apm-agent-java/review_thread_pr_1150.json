{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjUyNDc2", "number": 1150, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxMzoxMVrOD0lA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo0NjozOFrOD5Yt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU4OTY5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxMzoxMVrOGJlEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxMzoxMVrOGJlEjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5Nzc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n          \n          \n            \n                public <C> void propagateTraceContext (C carrier, TextHeaderSetter<C> headerSetter) {\n          \n      \n    \n    \n  \n\n[minor] - Just a thought - not only the technical action of setting headers, but making it clear that this span is doing context propagation (hence the side effect of making the entire call stack non-discardable).", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412697743", "createdAt": "2020-04-22T06:13:11Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -435,4 +460,31 @@ public void decrementReferences() {\n \n     protected abstract void recycle();\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDYxOTA2OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMjo1MFrOGJlVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NTozNFrOGKr9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA==", "bodyText": "[major] if possible, we should only expose this on AbstractSpan and make the TraceContext implementation package private (meaning - removing it from this interface). Now that we allow discarding spans, if there's anything that uses the TraceContext implementation directly, our traces will break once spans leading to them are discarded and it will be very difficult to debug.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412702008", "createdAt": "2020-04-22T06:22:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MTY4MA==", "bodyText": "I've tried that but it doesn't seem feasible as we allow to activate a TraceContextHolder and we want to be able to do tracer.getActive().setOutgoingTraceContextHeaders. This is needed for the public API and the OpenTracing API bridge, currently.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412751680", "createdAt": "2020-04-22T07:48:17Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTgwMQ==", "bodyText": "Do you think it is problematic to allow that it OP and API only if trace.getActive is instanceof AbstractSpan?\nIf you don't want to introduce this restriction, I would at least add a very clear javadoc warning saying that implementations are not equal and the AbstractSpan overload should be preferred whenever possible.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413551801", "createdAt": "2020-04-23T06:46:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTE5MA==", "bodyText": "It required some refactoring but I've managed to remove TraceContextHolder. Now TraceContext#setOutgoingTraceContextHeaders is package private.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413859190", "createdAt": "2020-04-23T14:45:34Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContextHolder.java", "diffHunk": "@@ -147,14 +146,43 @@ public boolean isExit() {\n         return isExit;\n     }\n \n-    public void setDiscard(boolean discard) {\n-        getTraceContext().setDiscard(discard);\n+    /**\n+     * Sets this context as non-discardable,\n+     * meaning that {@link AbstractSpan#isDiscard()} will return {@code false},\n+     * even if {@link AbstractSpan#requestDiscarding()} has been called.\n+     */\n+    public void setNonDiscardable() {\n+        getTraceContext().setNonDiscardable();\n     }\n \n-    public boolean isDiscard() {\n-        return getTraceContext().isDiscard();\n+    /**\n+     * Returns whether it's possible to discard this span.\n+     *\n+     * @return {@code true}, if it's safe to discard the span, {@code false} otherwise.\n+     */\n+    public boolean isDiscardable() {\n+        return getTraceContext().isDiscardable();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public abstract <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjAwOA=="}, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc1NzA4OnYy", "diffSide": "LEFT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzowMToyMVrOGJmjPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Njo1OFrOGKsCgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ==", "bodyText": "It will be great to get rid of this state, just make sure that the combination of discardRequested, discardable  and sampled provide the same meaning as noop.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412721981", "createdAt": "2020-04-22T07:01:21Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java", "diffHunk": "@@ -79,11 +79,6 @@\n     @Nullable\n     private String result;\n \n-    /**\n-     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n-     */\n-    private boolean noop;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDQ4MQ==", "bodyText": "It wasn't equivalent. I've reverted the removal of the noop flag. It's also something only needed for the OT API... So maybe remove in a dedicated PR but this one changes too much already.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r413860481", "createdAt": "2020-04-23T14:46:58Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java", "diffHunk": "@@ -79,11 +79,6 @@\n     @Nullable\n     private String result;\n \n-    /**\n-     * Noop transactions won't be reported at all, in contrast to non-sampled transactions.\n-     */\n-    private boolean noop;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMTk4MQ=="}, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc2NTkwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzowMzozNlrOGJmoNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzowMzozNlrOGJmoNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMzI1NA==", "bodyText": "Add tests for Errors and for non-sampled transactions", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r412723254", "createdAt": "2020-04-22T07:03:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DiscardSpanTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692592c41790cd3bfa2b205a37fcce9c897d0999"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTkyODExOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo0MzozNlrOGMcpWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxMzo1NlrOGOopHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA==", "bodyText": "If traceMethodThresholdMicros > 0 - log info about using a deprecated configuration, suggesting the switch to the new one.\nIf traceMethodThresholdMicros == 0 - check the span_min_duration config.\nThat is - if we decide to deprecate...", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415705434", "createdAt": "2020-04-27T10:43:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTEzMw==", "bodyText": "Removed the deprecated flag (see #1150 (comment)). The span_min_duration flag is checked in ElasticApmTracer#endSpan", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999133", "createdAt": "2020-04-30T13:13:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNTQzNA=="}, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjA4NzM4OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMjowOVrOGMeEXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxNDo0OVrOGOorbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg==", "bodyText": "[minor]\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void beforeActivate(ErrorCapture error) throws Throwable;\n          \n          \n            \n                void onActivate(ErrorCapture error) throws Throwable;\n          \n      \n    \n    \n  \n\nThere is no meaning for before and after in case of errors, as they are not added/removed to/from a stack, right?", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728732", "createdAt": "2020-04-27T11:22:09Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTcyNw==", "bodyText": "Yes, that's true. I chose this name to be consistent with spans, but I don't have a strong option about it.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r417999727", "createdAt": "2020-04-30T13:14:49Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODczMg=="}, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjA4ODkwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMjozNlrOGMeFRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMjozNlrOGMeFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODk2Nw==", "bodyText": "[minor]\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;\n          \n          \n            \n                void onDeactivate(ErrorCapture deactivatedError) throws Throwable;", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415728967", "createdAt": "2020-04-27T11:22:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActivationListener.java", "diffHunk": "@@ -24,34 +24,50 @@\n  */\n package co.elastic.apm.agent.impl;\n \n+import co.elastic.apm.agent.impl.error.ErrorCapture;\n import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n-import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n \n /**\n- * A callback for {@link TraceContextHolder} activation and deactivaiton events\n+ * A callback for {@link AbstractSpan} and {@link ErrorCapture} activation and deactivaiton events\n  * <p>\n  * The constructor can optionally have a {@link ElasticApmTracer} parameter.\n  * </p>\n  */\n public interface ActivationListener {\n \n     /**\n-     * A callback for {@link TraceContextHolder#activate()}\n+     * A callback for {@link AbstractSpan#activate()}\n      *\n-     * @param context the {@link TraceContextHolder} which is being activated\n+     * @param span the {@link AbstractSpan} that is being activated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void beforeActivate(TraceContextHolder<?> context) throws Throwable;\n+    void beforeActivate(AbstractSpan<?> span) throws Throwable;\n \n     /**\n-     * A callback for {@link TraceContextHolder#deactivate()}\n+     * A callback for {@link ErrorCapture#activate()}\n+     *\n+     * @param error the {@link ErrorCapture} that is being activated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void beforeActivate(ErrorCapture error) throws Throwable;\n+\n+    /**\n+     * A callback for {@link AbstractSpan#deactivate()}\n      * <p>\n      * Note: the corresponding span may already be {@link AbstractSpan#end() ended} and {@link AbstractSpan#resetState() recycled}.\n-     * That's why there is no {@link TraceContextHolder} parameter.\n+     * That's why there is no {@link AbstractSpan} parameter.\n      * </p>\n      *\n-     * @param deactivatedContext the context which has just been deactivated\n+     * @param deactivatedSpan the context that has just been deactivated\n+     * @throws Throwable if there was an error while calling this method\n+     */\n+    void afterDeactivate(AbstractSpan<?> deactivatedSpan) throws Throwable;\n+\n+    /**\n+     * A callback for {@link ErrorCapture#deactivate()}\n+     *\n+     * @param deactivatedError the error that has just been deactivated\n      * @throws Throwable if there was an error while calling this method\n      */\n-    void afterDeactivate(TraceContextHolder<?> deactivatedContext) throws Throwable;\n+    void afterDeactivate(ErrorCapture deactivatedError) throws Throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjEyMjgwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozMDozNlrOGMeYTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozMDozNlrOGMeYTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMzgzOA==", "bodyText": "[minor] same - moving the listeners iteration", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415733838", "createdAt": "2020-04-27T11:30:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();\n+        for (int i = 0; i < activationListeners.size(); i++) {\n+            try {\n+                activationListeners.get(i).beforeActivate(this);\n+            } catch (Error e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                logger.warn(\"Exception while calling {}#beforeActivate\", activationListeners.get(i).getClass().getSimpleName(), t);\n+            }\n+        }\n+        tracer.activate(this);\n+        return (T) this;\n     }\n \n-    @Override\n     public T deactivate() {\n         try {\n-            return super.deactivate();\n+            tracer.deactivate(this);\n+            List<ActivationListener> activationListeners = tracer.getActivationListeners();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjEyNjgyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozMTozMVrOGMeakw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxNjowMlrOGOouqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ==", "bodyText": "[minor] Wouldn't this iteration over listeners make more sense if done at the beginning of ElasticApmTracer#activate?", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415734419", "createdAt": "2020-04-27T11:31:31Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDU1NQ==", "bodyText": "Yes, this way there's no chance to skip activation listeners by directly calling ElasticApmTracer#endSpan", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000555", "createdAt": "2020-04-30T13:16:02Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/AbstractSpan.java", "diffHunk": "@@ -334,26 +406,56 @@ public final void end(long epochMicros) {\n \n     protected abstract void afterEnd();\n \n-    @Override\n-    public boolean isChildOf(TraceContextHolder other) {\n-        return getTraceContext().isChildOf(other);\n-    }\n-\n-    @Override\n     public T activate() {\n         incrementReferences();\n-        return super.activate();\n+        List<ActivationListener> activationListeners = tracer.getActivationListeners();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDQxOQ=="}, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjE0MDE4OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozNTowMFrOGMeiPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozNTowMFrOGMeiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjM4MQ==", "bodyText": "\ud83d\udc4d \ud83d\ude47\u200d\u2642\ufe0f", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736381", "createdAt": "2020-04-27T11:35:00Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -516,7 +527,7 @@ String getIncomingTraceParentHeader() {\n      * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n      * @param <C>          the header carrier type, for example - an HTTP request\n      */\n-    public <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {\n+    <C> void setOutgoingTraceContextHeaders(C carrier, TextHeaderSetter<C> headerSetter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjE0MjYxOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozNTo0MVrOGMejuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozNTo0MVrOGMejuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNjc2Mw==", "bodyText": "\ud83d\ude4f", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415736763", "createdAt": "2020-04-27T11:35:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -537,7 +548,7 @@ String getIncomingTraceParentHeader() {\n      * @param <C>          the header carrier type, for example - a Kafka record\n      * @return true if Trace Context headers were set; false otherwise\n      */\n-    public <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {\n+    <C> boolean setOutgoingTraceContextHeaders(C carrier, BinaryHeaderSetter<C> headerSetter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjE5NTY4OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0ODo0M1rOGMfCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxNjoxOFrOGOovUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw==", "bodyText": "?", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415744567", "createdAt": "2020-04-27T11:48:43Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDcyMQ==", "bodyText": "!", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r418000721", "createdAt": "2020-04-30T13:16:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NDU2Nw=="}, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjIyMzg5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1NDo1NFrOGMfRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1NDo1NFrOGMfRzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span span = transaction.createSpan();\n          \n          \n            \n                        Span span = transaction.createSpan().requestDiscarding();", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748558", "createdAt": "2020-04-27T11:54:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjIyNjcxOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1NTo0MFrOGMfTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1NTo0MFrOGMfTgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0ODk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span parentSpan = transaction.createSpan();\n          \n          \n            \n                        Span parentSpan = transaction.createSpan().requestDiscarding();", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415748995", "createdAt": "2020-04-27T11:55:40Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjIzODQ5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1ODoyMVrOGMfaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1ODoyMVrOGMfaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MDcyMA==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415750720", "createdAt": "2020-04-27T11:58:21Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/DiscardSpanTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class DiscardSpanTest {\n+    private ElasticApmTracer tracer;\n+    private MockReporter reporter;\n+\n+    @BeforeEach\n+    void setUp() {\n+        reporter = new MockReporter();\n+        tracer = MockTracer.createRealTracer(reporter);\n+    }\n+\n+    @AfterEach\n+    void cleanupAndCheck() {\n+        reporter.assertRecycledAfterDecrementingReferences();\n+        tracer.stop();\n+    }\n+\n+    @Test\n+    void testContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testErrorCapturingMakesSpansNonDiscardable() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span span = transaction.createSpan();\n+            try {\n+                span.requestDiscarding().appendToName(\"non-discardable\").captureException(new Exception());\n+                assertThat(span.isDiscardable()).isFalse();\n+            } finally {\n+                span.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"non-discardable\");\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(1);\n+    }\n+\n+    @Test\n+    void testParentsOfContextPropagatingSpansAreNonDiscardable() {\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span parentSpan = transaction.createSpan();\n+            try {\n+                Span contextPropagatingSpan = parentSpan.createSpan();\n+                try {\n+                    contextPropagatingSpan.setOutgoingTraceContextHeaders(new HashMap<>(), TextHeaderMapAccessor.INSTANCE);\n+                    assertThat(contextPropagatingSpan.isDiscardable()).isFalse();\n+                    assertThat(parentSpan.isDiscardable()).isFalse();\n+                } finally {\n+                    contextPropagatingSpan.end();\n+                }\n+            } finally {\n+                parentSpan.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(0);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimit() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            transaction.createSpan().appendToName(\"1st\").end();\n+            transaction.createSpan().appendToName(\"discarded\").requestDiscarding().end();\n+            transaction.createSpan().appendToName(\"2nd\").end();\n+            transaction.createSpan().appendToName(\"exceeds limit\").end();\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"1st\", \"2nd\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(4);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(2);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting() {\n+        when(tracer.getConfigurationRegistry().getConfig(CoreConfiguration.class).getTransactionMaxSpans()).thenReturn(2);\n+        Transaction transaction = tracer.startRootTransaction(null);\n+        assertThat(transaction).isNotNull();\n+        try {\n+            Span first = transaction.createSpan().appendToName(\"1st\");\n+            try {\n+                Span second = first.createSpan().appendToName(\"2nd\");\n+                try {\n+                    second.createSpan().appendToName(\"exceeds limit\").end();\n+                } finally {\n+                    second.end();\n+                }\n+            } finally {\n+                first.end();\n+            }\n+        } finally {\n+            transaction.end();\n+        }\n+        assertThat(reporter.getSpans().stream().map(Span::getNameAsString)).containsExactly(\"2nd\", \"1st\");\n+        assertThat(transaction.getSpanCount().getTotal()).hasValue(3);\n+        assertThat(transaction.getSpanCount().getDropped()).hasValue(1);\n+        assertThat(transaction.getSpanCount().getReported()).hasValue(2);\n+    }\n+\n+    @Test\n+    void testDiscardSpanLimitNesting2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI0ODM3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowMDo0N1rOGMfgAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowMDo0N1rOGMfgAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MjE5Mg==", "bodyText": "This leftover is what fails the test now..", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415752192", "createdAt": "2020-04-27T12:00:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/ElasticApmTracerTest.java", "diffHunk": "@@ -286,8 +286,10 @@ void testEnableDropSpans() {\n             transaction.end();\n         }\n         assertThat(reporter.getFirstTransaction().isSampled()).isTrue();\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped().get()).isEqualTo(1);\n-        assertThat(reporter.getFirstTransaction().getSpanCount().getStarted().get()).isEqualTo(1);\n+        assertThat(reporter.getFirstTransaction().getSpanCount().getDropped()).hasValue(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI3OTU1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-opentracing-plugin/src/main/java/co/elastic/apm/agent/opentracing/impl/ApmSpanBuilderInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODozMVrOGMfx9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODozMVrOGMfx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1Njc5MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415756791", "createdAt": "2020-04-27T12:08:31Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-opentracing-plugin/src/main/java/co/elastic/apm/agent/opentracing/impl/ApmSpanBuilderInstrumentation.java", "diffHunk": "@@ -82,22 +82,34 @@ public static void createSpan(@Advice.Argument(value = 0, typing = Assigner.Typi\n \n         @Nullable\n         @VisibleForAdvice\n-        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable TraceContext parentContext,\n+        public static AbstractSpan<?> doCreateTransactionOrSpan(@Nullable AbstractSpan<?> parentContext,\n                                                                 Map<String, Object> tags,\n                                                                 String operationName, long microseconds,\n                                                                 @Nullable Iterable<Map.Entry<String, String>> baggage, ClassLoader applicationClassLoader) {\n+            AbstractSpan<?> result = null;\n             if (tracer != null) {\n                 if (parentContext == null) {\n-                    return createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n+                    result = createTransaction(tags, operationName, microseconds, baggage, tracer, applicationClassLoader);\n                 } else {\n                     if (microseconds >= 0) {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext, microseconds);\n                     } else {\n-                        return tracer.startSpan(TraceContext.fromParent(), parentContext);\n+                        result = tracer.startSpan(TraceContext.fromParent(), parentContext);\n                     }\n                 }\n             }\n-            return null;\n+            if (result != null) {\n+                // This reference count never gets decremented, which means it will be handled by GC rather than being recycled.\n+                // The OpenTracing API allows interactions with the span, such as span.getTraceContext even after the span has finished\n+                // This makes it hard to recycle the span as the life cycle is unclear.\n+                // See also https://github.com/opentracing/opentracing-java/issues/312\n+                // Previously, we kept a permanent copy of the trace context around and recycled the span on finish.\n+                // But that meant lots of complexity in the internal API,\n+                // as it had to deal with the fact that a TraceContext might be returned by ElasticApmTracer.getActive.\n+                // The complexity doesn't seem worth the OT specific optimization that a bit less memory gets allocated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjMwOTI0OnYy", "diffSide": "LEFT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoxNTozMlrOGMgCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoxNTozMlrOGMgCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2MTA3NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r415761075", "createdAt": "2020-04-27T12:15:32Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -543,28 +531,6 @@ public void recycle(SpanInScopeCallableWrapper<?> wrapper) {\n         callableSpanWrapperObjectPool.recycle(wrapper);\n     }\n \n-    public Runnable wrapRunnable(Runnable delegate, TraceContext traceContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ca34851a16e99ef4497d2677fbbd77f153c66f"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ1ODI0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo0NDoxMFrOGPzR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo0NDoxMFrOGPzR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMTk5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")\n          \n          \n            \n                        \"NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured, the higher of both thresholds will determine which spans will be discarded.\")", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419221990", "createdAt": "2020-05-04T05:44:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -448,7 +448,9 @@\n             \"This configuration affects only spans.\\n\" +\n             \"In order not to break span references,\\n\" +\n             \"all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,\\n\" +\n-            \"regardless of their duration.\\n\")\n+            \"regardless of their duration.\\n\" +\n+            \"\\n\" +\n+            \"NOTE: This option is deprecated in favor of <<config-span-min-duration,`span_min_duration`>>.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ3NjMyOnYy", "diffSide": "LEFT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1NjoxMlrOGPzcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1NjoxMlrOGPzcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNDYxMA==", "bodyText": "We need to test also this config:\n\nwhen the general one is not set\nwhen the general one is set - the higher of both wins", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419224610", "createdAt": "2020-05-04T05:56:12Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -82,7 +84,7 @@ void setUp(TestInfo testInfo) {\n \n         Set<String> tags = testInfo.getTags();\n         if (!tags.isEmpty()) {\n-            when(coreConfiguration.getTraceMethodsDurationThreshold()).thenReturn(TimeDuration.of(tags.iterator().next()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ4NDI5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjowMToyOVrOGPzgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjowMToyOVrOGPzgyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNTgwMQ==", "bodyText": "Currently, this means that the higher of both thresholds (this one and span_min_duration) will determine what to discard. I think this makes sense.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419225801", "createdAt": "2020-05-04T06:01:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentation.java", "diffHunk": "@@ -97,8 +93,8 @@ public static void onMethodExit(@Advice.Local(\"span\") @Nullable AbstractSpan<?>\n             final long endTime = span.getTraceContext().getClock().getEpochMicros();\n             if (span instanceof Span) {\n                 long durationMicros = endTime - span.getTimestamp();\n-                if (traceMethodThresholdMicros <= 0 || durationMicros >= traceMethodThresholdMicros || t != null) {\n-                    span.setDiscard(false);\n+                if (traceMethodThresholdMicros > 0 && durationMicros < traceMethodThresholdMicros && t == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTU1NjI1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo0MDo1NVrOGP0KtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo0MDo1NVrOGP0KtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzNjUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Removes the experimental `profiling_inferred_spans_min_duration` flag in favor of <<config-span-min-duration,`span_min_duration`>>.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419236532", "createdAt": "2020-05-04T06:40:55Z", "author": {"login": "eyalkoren"}, "path": "CHANGELOG.asciidoc", "diffHunk": "@@ -24,6 +24,7 @@ endif::[]\n \n [float]\n ===== Breaking changes\n+* Removes the experimental `profiling_inferred_spans_min_duration` flag in favor of <<config-span-min-duration,`span_min_duration`>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTU2MTk4OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo0Mzo0OFrOGP0OHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo0Mzo0OFrOGP0OHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzNzQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              This deprecates `trace_methods_duration_threshold` and removes `profiling_inferred_spans_min_duration`.\n          \n          \n            \n              When set together with one of the more specific thresholds - `trace_methods_duration_threshold` or `profiling_inferred_spans_min_duration`, the higher threshold will determine spans will be discarded.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419237405", "createdAt": "2020-05-04T06:43:48Z", "author": {"login": "eyalkoren"}, "path": "CHANGELOG.asciidoc", "diffHunk": "@@ -34,6 +35,8 @@ This is not a breaking change, so former\n <<config-disable-instrumentations,`disable_instrumentation`>> configuration containing the `incubating` tag will still be respected - {pull}1123[#1123]\n * Add a `--without-emulated-attach` option for runtime attachment to allow disabling this feature as a workaround.\n * Add workaround for JDK bug JDK-8236039 with TLS 1.3 {pull}1149[#1149]\n+* Adds <<config-span-min-duration,`span_min_duration`>> option to exclude fast executing spans.\n+  This deprecates `trace_methods_duration_threshold` and removes `profiling_inferred_spans_min_duration`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTc0ODg0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzo1NDo1N1rOGP19mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzo1NDo1N1rOGP19mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NTk0Ng==", "bodyText": "The greater between them?", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r419265946", "createdAt": "2020-05-04T07:54:57Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "diffHunk": "@@ -733,7 +735,7 @@ private void stopProfiling(SamplingProfiler samplingProfiler) {\n                     logger.debug(\"End call tree ({}) for thread {}\", deserialize(samplingProfiler, traceContextBuffer), threadId);\n                 }\n                 samplingProfiler.profiledThreads.remove(threadId);\n-                callTree.end(samplingProfiler.callTreePool, samplingProfiler.config.getInferredSpansMinDuration().getMillis() * 1_000_000);\n+                callTree.end(samplingProfiler.callTreePool, samplingProfiler.coreConfig.getSpanMinDuration().getMillis() * 1_000_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e2ab3c384074643cb886b80438b84554030d42"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDk1NTY1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMzo0OFrOGQnN6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMzo0OFrOGQnN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MjkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              the higher threshold will determine spans will be discarded.\n          \n          \n            \n              the higher threshold will determine which spans will be discarded.", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420072936", "createdAt": "2020-05-05T12:33:48Z", "author": {"login": "eyalkoren"}, "path": "CHANGELOG.asciidoc", "diffHunk": "@@ -37,7 +36,8 @@ This is not a breaking change, so former\n * Add workaround for JDK bug JDK-8236039 with TLS 1.3 {pull}1149[#1149]\n * Add log level `OFF` to silence agent logging\n * Adds <<config-span-min-duration,`span_min_duration`>> option to exclude fast executing spans.\n-  This deprecates `trace_methods_duration_threshold` and removes `profiling_inferred_spans_min_duration`.\n+  When set together with one of the more specific thresholds - `trace_methods_duration_threshold` or `profiling_inferred_spans_min_duration`,\n+  the higher threshold will determine spans will be discarded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDk2NDU0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozNjoxMFrOGQnTUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozNjoxMFrOGQnTUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NDMyMA==", "bodyText": "\ud83d\ude0d", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420074320", "createdAt": "2020-05-05T12:36:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -184,24 +189,50 @@ void testAgentPaused() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testDiscardMethods_DiscardAll() {\n         new TestDiscardableMethods(tracer).root(false);\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(0);\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTAwNDA1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo0NjozOFrOGQnsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo0NjozOFrOGQnsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDY1MQ==", "bodyText": "I'd add another test with only @Tag(\"trace_methods_duration_threshold=50ms\")", "url": "https://github.com/elastic/apm-agent-java/pull/1150#discussion_r420080651", "createdAt": "2020-05-05T12:46:38Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/test/java/co/elastic/apm/agent/concurrent/AsyncTraceMethodInstrumentationTest.java", "diffHunk": "@@ -85,15 +90,24 @@ void testWithDefaultConfig() {\n     }\n \n     @Test\n-    @Tag(\"200ms\")\n+    @Tag(\"span_min_duration=200ms\")\n     void testWithHighThreshold() {\n         new TestAsyncTraceMethodsClass().invokeAsync();\n         assertThat(reporter.getTransactions()).hasSize(1);\n         assertThat(reporter.getSpans()).hasSize(2);\n     }\n \n     @Test\n-    @Tag(\"50ms\")\n+    @Tag(\"span_min_duration=50ms\")\n+    @Tag(\"trace_methods_duration_threshold=200ms\")\n+    void testWithHigherSpecificThreshold() {\n+        new TestAsyncTraceMethodsClass().invokeAsync();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getSpans()).hasSize(2);\n+    }\n+\n+    @Test\n+    @Tag(\"span_min_duration=50ms\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d6f2d364d65ee001dd48bcc43cba8fde76d03e"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 292, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}