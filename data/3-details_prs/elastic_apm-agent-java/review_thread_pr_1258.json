{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjM4MzE3", "number": 1258, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMzoxNFrOEJqUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMzoxNFrOEJqUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY1OTc1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jmx-plugin/src/main/java/co/elastic/apm/agent/jmx/JmxMetricTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMzoxNFrOGqRJxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMDoxOFrOGqTOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDQwNw==", "bodyText": "why do we need to catch such a broad exception ? Are there common NPE or IllegalStateException thrown ?", "url": "https://github.com/elastic/apm-agent-java/pull/1258#discussion_r446974407", "createdAt": "2020-06-29T13:33:14Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jmx-plugin/src/main/java/co/elastic/apm/agent/jmx/JmxMetricTracker.java", "diffHunk": "@@ -186,20 +192,28 @@ private void registerMBeanNotificationListener(final MBeanServer server) {\n         listener = new NotificationListener() {\n             @Override\n             public void handleNotification(Notification notification, Object handback) {\n-                if (notification instanceof MBeanServerNotification) {\n-                    ObjectName mBeanName = ((MBeanServerNotification) notification).getMBeanName();\n-                    for (JmxMetric jmxMetric : jmxConfiguration.getCaptureJmxMetrics().get()) {\n-                        if (jmxMetric.getObjectName().apply(mBeanName)) {\n-                            logger.debug(\"MBean added at runtime: {}\", jmxMetric.getObjectName());\n-                            register(Collections.singletonList(jmxMetric), server);\n-                        }\n+                try {\n+                    if (notification instanceof MBeanServerNotification) {\n+                        onMBeanAdded(((MBeanServerNotification) notification).getMBeanName());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(e.getMessage(), e);\n+                }\n+            }\n+\n+            private void onMBeanAdded(ObjectName mBeanName) {\n+                logger.trace(\"Receiving MBean registration notification for {}\", mBeanName);\n+                for (JmxMetric jmxMetric : jmxConfiguration.getCaptureJmxMetrics().get()) {\n+                    if (jmxMetric.getObjectName().apply(mBeanName)) {\n+                        logger.debug(\"MBean added at runtime: {}\", jmxMetric.getObjectName());\n+                        register(Collections.singletonList(jmxMetric), server);\n                     }\n                 }\n             }\n         };\n         try {\n             server.addNotificationListener(MBeanServerDelegate.DELEGATE_NAME, listener, filter, null);\n-        } catch (InstanceNotFoundException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13cfefb8875f434935fcae373873a99d9a461e8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwODMxNA==", "bodyText": "No, didn't see any of those in the wild but if there are any I think we should still continue and try monitor already registered MBeans than to give up jmx monitoring entirely.\nIn theory, this could happen if there's a customer MBean server that does not allow to add notification listeners.", "url": "https://github.com/elastic/apm-agent-java/pull/1258#discussion_r447008314", "createdAt": "2020-06-29T14:20:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-jmx-plugin/src/main/java/co/elastic/apm/agent/jmx/JmxMetricTracker.java", "diffHunk": "@@ -186,20 +192,28 @@ private void registerMBeanNotificationListener(final MBeanServer server) {\n         listener = new NotificationListener() {\n             @Override\n             public void handleNotification(Notification notification, Object handback) {\n-                if (notification instanceof MBeanServerNotification) {\n-                    ObjectName mBeanName = ((MBeanServerNotification) notification).getMBeanName();\n-                    for (JmxMetric jmxMetric : jmxConfiguration.getCaptureJmxMetrics().get()) {\n-                        if (jmxMetric.getObjectName().apply(mBeanName)) {\n-                            logger.debug(\"MBean added at runtime: {}\", jmxMetric.getObjectName());\n-                            register(Collections.singletonList(jmxMetric), server);\n-                        }\n+                try {\n+                    if (notification instanceof MBeanServerNotification) {\n+                        onMBeanAdded(((MBeanServerNotification) notification).getMBeanName());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(e.getMessage(), e);\n+                }\n+            }\n+\n+            private void onMBeanAdded(ObjectName mBeanName) {\n+                logger.trace(\"Receiving MBean registration notification for {}\", mBeanName);\n+                for (JmxMetric jmxMetric : jmxConfiguration.getCaptureJmxMetrics().get()) {\n+                    if (jmxMetric.getObjectName().apply(mBeanName)) {\n+                        logger.debug(\"MBean added at runtime: {}\", jmxMetric.getObjectName());\n+                        register(Collections.singletonList(jmxMetric), server);\n                     }\n                 }\n             }\n         };\n         try {\n             server.addNotificationListener(MBeanServerDelegate.DELEGATE_NAME, listener, filter, null);\n-        } catch (InstanceNotFoundException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDQwNw=="}, "originalCommit": {"oid": "f13cfefb8875f434935fcae373873a99d9a461e8"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 128, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}