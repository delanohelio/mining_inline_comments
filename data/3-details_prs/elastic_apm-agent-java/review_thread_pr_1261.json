{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzc5ODU3", "number": 1261, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjozNVrOEMiT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNTowMDoxMlrOFmiXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTgwNTM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjozNVrOGus_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoxOToyOVrOG4MJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDc2Mg==", "bodyText": "Use the new WeakMapSupplier.createMap(). Also, maybe type to <A, Object>?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451624762", "createdAt": "2020-07-08T15:16:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MjU3Ng==", "bodyText": "Changed to the new sdk API.\nAs for typing - this is a static map, so I cannot type to an instance generic type", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r461572576", "createdAt": "2020-07-28T13:19:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDc2Mg=="}, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTgyOTgwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToyMTo1N1rOGutORA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMTo0N1rOG4vWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODYxMg==", "bodyText": "you could do tracer.getMetaData().getService().getName()", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451628612", "createdAt": "2020-07-08T15:21:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    protected abstract boolean isShadingAppender(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender);\n+\n+    // todo: find more accurate service name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Mzg2Mw==", "bodyText": "I used that, but what I was really looking for is a way to capture the actual service name of the relevant context. The problem is that ECS-lib layouts store the service name statically.\nWhat do you think of adding a way to register a ServiceNameProvider#getServiceName callback to the ECS layout that will be called when the logging event is serialized?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r462083863", "createdAt": "2020-07-29T07:06:49Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    protected abstract boolean isShadingAppender(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender);\n+\n+    // todo: find more accurate service name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODYxMg=="}, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNTk4Mw==", "bodyText": "Actually, I think we don't need to set the service name on the ECS logger implementation. When sending the logs to APM Server, we're already sending it as part of the metadata: https://github.com/elastic/apm/blob/f5a3dbfd9bc731bbe6b920f31b4f9cd611cfb70d/docs/agents/log-shipper.md#metadata", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r462135983", "createdAt": "2020-07-29T08:40:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    protected abstract boolean isShadingAppender(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender);\n+\n+    // todo: find more accurate service name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODYxMg=="}, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0OTI1MA==", "bodyText": "When log correlation is on, the log events should have the right context - they will contain a trace.id and transcation.id that we may report separately with a different service name", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r462149250", "createdAt": "2020-07-29T09:01:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    protected abstract boolean isShadingAppender(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender);\n+\n+    // todo: find more accurate service name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODYxMg=="}, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTg0Njk0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/Log4j2LogShadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToyNTo1MlrOGutZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoyMjozOVrOG4MSng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzMTM3MA==", "bodyText": "have you considered migrating to indy plugins?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451631370", "createdAt": "2020-07-08T15:25:52Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/Log4j2LogShadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.log4j2;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingInstrumentation;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender;\n+import org.apache.logging.log4j.core.appender.FileAppender;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class Log4j2LogShadingInstrumentation extends AbstractLogShadingInstrumentation {\n+\n+    // Logback class referencing is allowed thanks to type erasure\n+    @VisibleForAdvice\n+    @Nullable\n+    public static HelperClassManager<AbstractLogShadingHelper<AbstractOutputStreamAppender<?>>> helperClassManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDgxNA==", "bodyText": "Yes, I assume I will migrate to that before I un-draft it", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r461574814", "createdAt": "2020-07-28T13:22:39Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/Log4j2LogShadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.log4j2;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingInstrumentation;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender;\n+import org.apache.logging.log4j.core.appender.FileAppender;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class Log4j2LogShadingInstrumentation extends AbstractLogShadingInstrumentation {\n+\n+    // Logback class referencing is allowed thanks to type erasure\n+    @VisibleForAdvice\n+    @Nullable\n+    public static HelperClassManager<AbstractLogShadingHelper<AbstractOutputStreamAppender<?>>> helperClassManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzMTM3MA=="}, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTg4NzA3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/helper/Log4j2LogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozNToxMlrOGutyjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozNToxMlrOGutyjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzNzkwMQ==", "bodyText": "Although this makes it more readable it probably has to be set to false so it works with the logs intake API which is currently spec'd to assume ND-JSON", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451637901", "createdAt": "2020-07-08T15:35:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/helper/Log4j2LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.log4j2.helper;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.log4j2.EcsLayout;\n+import org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy;\n+import org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;\n+import org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy;\n+import org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;\n+import org.apache.logging.log4j.core.config.DefaultConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.Method;\n+\n+\n+public class Log4j2LogShadingHelper extends AbstractLogShadingHelper<AbstractOutputStreamAppender<?>> {\n+\n+    public static final String ECS_SHADE_APPENDER = \"EcsShadeAppender\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j2LogShadingHelper.class);\n+\n+    public Log4j2LogShadingHelper(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    protected boolean isShadingAppender(AbstractOutputStreamAppender<?> appender) {\n+        //noinspection StringEquality\n+        return appender.getName() == ECS_SHADE_APPENDER;\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected AbstractOutputStreamAppender<?> createAndConfigureAppender(AbstractOutputStreamAppender<?> originalAppender) {\n+\n+        String logFile = null;\n+\n+        // Using class names and reflection in order to avoid version sensitivity\n+        String appenderClassName = originalAppender.getClass().getName();\n+        if (appenderClassName.equals(\"org.apache.logging.log4j.core.appender.FileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RollingFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RandomAccessFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.MemoryMappedFileAppender\")) {\n+            try {\n+                Method getFileNameMethod = originalAppender.getClass().getDeclaredMethod(\"getFileName\");\n+                logFile = (String) getFileNameMethod.invoke(originalAppender);\n+            } catch (Exception e) {\n+                logger.error(\"Failed to obtain log file name from file appender\", e);\n+            }\n+        }\n+\n+        if (logFile == null) {\n+            return null;\n+        }\n+\n+        String shadeFile = Utils.computeShadeLogFilePath(logFile);\n+\n+        EcsLayout ecsLayout = EcsLayout.newBuilder()\n+            .setServiceName(getServiceName())\n+            .setIncludeMarkers(false)\n+            .setIncludeOrigin(false)\n+            .setStackTraceAsArray(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTg4OTIxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/logback/helper/LogbackLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozNTozOFrOGutz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozNTozOFrOGutz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzODI0MA==", "bodyText": "probably better to set to false, see above", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451638240", "createdAt": "2020-07-08T15:35:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/logback/helper/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.logback.helper;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import ch.qos.logback.core.util.FileSize;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+public class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();;\n+\n+    public LogbackLogShadingHelper(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    protected boolean isShadingAppender(FileAppender<ILoggingEvent> appender) {\n+        return appender.getContext() == defaultLoggerContext;\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        // todo read from configuration??\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjY2Mzk1OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo1NToyN1rOIDQTkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo1NToyN1rOIDQTkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4Mzc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>0.4.0</version>\n          \n          \n            \n                        <version>1.0.0.RC1</version>", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r540283794", "createdAt": "2020-12-10T15:55:27Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/pom.xml", "diffHunk": "@@ -53,7 +53,7 @@\n         <dependency>\n             <groupId>co.elastic.logging</groupId>\n             <artifactId>log4j2-ecs-layout</artifactId>\n-            <version>0.3.0</version>\n+            <version>0.4.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDkwMTM2OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxMjowNFrOIHKK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNToxMjowNVrOIpHrFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NzU2Nw==", "bodyText": "This overlaps/conflicts with elastic/apm#373 as the replacement should not only happen for file appenders but for any appenders that use a plain-text formatter.\nWe might have to do that at the time the formatter is set on the appender as we need the appender name to set the event.dataset (${service.name}.${appender.name}). This implies that it would not work for runtime attachment. But I think that's fair as it ensures that there's no mix of plain-text and JSON logs.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544377567", "createdAt": "2020-12-16T15:12:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_enabled\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .description(\"A boolean specifying whether the agent should automatically reformat application logs \\n\" +\n+            \"into ECS-compatible JSON files, suitable for ingestion into Elasticsearch for further analysis. \\n\" +\n+            \"If true, check out additional `log_shading` configurations options.\")\n+        .dynamic(true)\n+        .buildWithDefault(true);\n+\n+    private final ConfigurationOption<Boolean> logShadingReplace = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_replace\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .tags(\"performance\")\n+        .description(\"By default, when Log Shading is enabled, application logs will be duplicated so that the \\n\" +\n+            \"ECS-formatted logs are written to new files having the `.ecs.json` extension. In order to reduce the \\n\" +\n+            \"related overhead, set this option to true to replace the original log files with the ECS-compatible ones.\")\n+        .dynamic(false)\n+        .buildWithDefault(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTk4ODI0NQ==", "bodyText": "We decided on using a new config option called log_ecs_reformatting that will have multiple options:\n\nOFF\nSHADE - writing to an additional file in ECS format\nREPLACE - reformat to ECS like SHADE, but block writing the original log file\nOVERRIDE - use the same logger output stream, but override with ECS formatting (the option you are referring to, which will be relevant to non-file-appenders as well)\n\nThis way they will not overlap or conflict.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r579988245", "createdAt": "2021-02-22T05:12:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_enabled\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .description(\"A boolean specifying whether the agent should automatically reformat application logs \\n\" +\n+            \"into ECS-compatible JSON files, suitable for ingestion into Elasticsearch for further analysis. \\n\" +\n+            \"If true, check out additional `log_shading` configurations options.\")\n+        .dynamic(true)\n+        .buildWithDefault(true);\n+\n+    private final ConfigurationOption<Boolean> logShadingReplace = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_replace\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .tags(\"performance\")\n+        .description(\"By default, when Log Shading is enabled, application logs will be duplicated so that the \\n\" +\n+            \"ECS-formatted logs are written to new files having the `.ecs.json` extension. In order to reduce the \\n\" +\n+            \"related overhead, set this option to true to replace the original log files with the ECS-compatible ones.\")\n+        .dynamic(false)\n+        .buildWithDefault(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NzU2Nw=="}, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDkwNjc0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxMjo1NlrOIHKN6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwNToxNjo1MFrOIpHvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3ODM0Nw==", "bodyText": "Let's make it clear in the docs that log shading is experimental and may be removed in future releases and that we recommend replacing the plain-text formatters with ECS formatters (elastic/apm#373).\nShould we make the log shading options internal?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544378347", "createdAt": "2020-12-16T15:12:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTk4OTM0OA==", "bodyText": "The new log_ecs_reformatting config will be marked experimental, so it will give us time to gather feedback on how useful these options are without worrying about removing them in the future.\nMy next task in this area will be the addition of the OVERRIDE option, where I can add a note that it is preferred if we decide so.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r579989348", "createdAt": "2021-02-22T05:16:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3ODM0Nw=="}, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk0ODI5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyMDozN1rOIHKmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxNDozODoyMFrOInq-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NDYzMA==", "bodyText": "An idea to make the test faster\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     sleep();\n          \n          \n            \n                     await().untilAsserted(() -> new File(getShadeLogFilePath()).length() == 0);", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544384630", "createdAt": "2020-12-16T15:20:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class LogShadingInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    public static final String TRACE_MESSAGE = \"Trace-this\";\n+    public static final String DEBUG_MESSAGE = \"Debug-this\";\n+    public static final String WARN_MESSAGE = \"Warn-this\";\n+    public static final String ERROR_MESSAGE = \"Error-this\";\n+\n+    private final LoggerFacade logger;\n+    private ObjectMapper objectMapper;\n+\n+    public LogShadingInstrumentationTest() {\n+        logger = getLoggerFacade();\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        logger.open();\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+    }\n+\n+    @After\n+    public void closeLogger() {\n+        logger.close();\n+    }\n+\n+    protected abstract LoggerFacade getLoggerFacade();\n+\n+    @Test\n+    public void testSimpleLogShading() throws IOException, ParseException {\n+        String traceId = UUID.randomUUID().toString();\n+        logger.putTraceIdToMdc(traceId);\n+        try {\n+            logger.trace(TRACE_MESSAGE);\n+            logger.debug(DEBUG_MESSAGE);\n+            logger.warn(WARN_MESSAGE);\n+            logger.error(ERROR_MESSAGE);\n+        } finally {\n+            logger.removeTraceIdFromMdc();\n+        }\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(4);\n+\n+        for (int i = 0; i < 4; i++) {\n+            verifyEcsFormat(rawLogLines.get(i), ecsLogLines.get(i), traceId);\n+        }\n+    }\n+\n+    @Test\n+    public void testShadingIntoConfiguredDir() throws IOException, ParseException {\n+        when(config.getConfig(LoggingConfiguration.class).getLogShadingDestinationDir()).thenReturn(\"shade_logs\");\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+        testSimpleLogShading();\n+    }\n+\n+    @Test\n+    public void testLogShadingDisabled() throws IOException, ParseException {\n+        logger.trace(TRACE_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(false);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(true);\n+        logger.error(ERROR_MESSAGE);\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(2);\n+        verifyEcsFormat(rawLogLines.get(0), ecsLogLines.get(0), null);\n+        verifyEcsFormat(rawLogLines.get(3), ecsLogLines.get(1), null);\n+    }\n+\n+    @Test\n+    public void testLogShadingReplaceOriginal() throws IOException {\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingReplaceEnabled()).thenReturn(true);\n+        logger.trace(TRACE_MESSAGE);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        logger.error(ERROR_MESSAGE);\n+\n+        assertThat(readRawLogLines()).isEmpty();\n+        ArrayList<JsonNode> shadeLogEvents = readShadeLogFile();\n+        assertThat(shadeLogEvents).hasSize(4);\n+        for (JsonNode ecsLogLineTree : shadeLogEvents) {\n+            assertThat(ecsLogLineTree.get(\"process.thread.name\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.level\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.logger\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"message\")).isNotNull();\n+        }\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile() throws IOException {\n+        return readShadeLogFile(getShadeLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile(String shadeLogFilePath) throws IOException {\n+        ArrayList<JsonNode> ecsLogLines = new ArrayList<>();\n+        try (Stream<String> stream = Files.lines(Paths.get(shadeLogFilePath))) {\n+            stream.forEach(line -> {\n+                try {\n+                    ecsLogLines.add(objectMapper.readTree(line));\n+                } catch (JsonProcessingException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        }\n+        return ecsLogLines;\n+    }\n+\n+    @Nonnull\n+    private ArrayList<String[]> readRawLogLines() throws IOException {\n+        ArrayList<String[]> rawLogLines;\n+        try (Stream<String> stream = Files.lines(getOriginalLogFilePath())) {\n+            rawLogLines = stream.map(line -> line.split(\"\\\\s+\")).collect(Collectors.toCollection(ArrayList::new));\n+        }\n+        return rawLogLines;\n+    }\n+\n+    @Nonnull\n+    private Path getOriginalLogFilePath() {\n+        return Paths.get(logger.getLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private String getShadeLogFilePath() {\n+        return Utils.computeShadeLogFilePath(logger.getLogFilePath());\n+    }\n+\n+    private void verifyEcsFormat(String[] splitRawLogLine, JsonNode ecsLogLineTree, @Nullable String traceId) throws ParseException {\n+        SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        Date rawTimestamp = timestampFormat.parse(splitRawLogLine[0]);\n+        timestampFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date ecsTimestamp = timestampFormat.parse(ecsLogLineTree.get(\"@timestamp\").textValue());\n+        assertThat(rawTimestamp).isEqualTo(ecsTimestamp);\n+        assertThat(splitRawLogLine[1]).isEqualTo(ecsLogLineTree.get(\"process.thread.name\").textValue());\n+        assertThat(splitRawLogLine[2]).isEqualTo(ecsLogLineTree.get(\"log.level\").textValue());\n+        assertThat(splitRawLogLine[3]).isEqualTo(ecsLogLineTree.get(\"log.logger\").textValue());\n+        assertThat(splitRawLogLine[4]).isEqualTo(ecsLogLineTree.get(\"message\").textValue());\n+        assertThat(ecsLogLineTree.get(\"service.name\").textValue()).isEqualTo(tracer.getMetaData().getService().getName());\n+        if (traceId != null) {\n+            assertThat(ecsLogLineTree.get(\"trace.id\").textValue()).isEqualTo(traceId);\n+        } else {\n+            assertThat(ecsLogLineTree.get(\"trace.id\")).isNull();\n+        }\n+    }\n+\n+    /**\n+     * Disabled by default, as this is a very slow test. Can be used for manual testing of shade file rolling.\n+     * Note: logback and log4j2 rollover before appending an event, which means the two log files will contain messages.\n+     * As opposed to those, log4j1 rolls over after appending an event, which means that the active log file (log4j1.log)\n+     * will be empty when the test ends.\n+     */\n+     //@Test\n+     public void testShadeLogRolling() throws IOException {\n+         when(config.getConfig(LoggingConfiguration.class).getLogFileSize()).thenReturn(100L);\n+         logger.trace(\"First line\");\n+         sleep();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzYzODYxOQ==", "bodyText": "Unfortunately, this is only possible for log4j1, which rolls the file at the end of the event logging.\nIt is also possible in log4j2 if I set immediateFlush=false, but this fails all other tests. I used two different loggers, one for the rolling test (with immediateFlush==false) and one for the rest, but it ended up being very close in duration to using a sleep of 50ms, which seems safe in log4j2.\nLogback required a very long sleep, but it works well and fast with immediateFlush==false.\nEventually I got to a state where these tests take 200-600ms, which is good enough to enable by default. If they will prove to be flaky we can extend the sleep a bit or disable.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r577638619", "createdAt": "2021-02-17T14:08:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class LogShadingInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    public static final String TRACE_MESSAGE = \"Trace-this\";\n+    public static final String DEBUG_MESSAGE = \"Debug-this\";\n+    public static final String WARN_MESSAGE = \"Warn-this\";\n+    public static final String ERROR_MESSAGE = \"Error-this\";\n+\n+    private final LoggerFacade logger;\n+    private ObjectMapper objectMapper;\n+\n+    public LogShadingInstrumentationTest() {\n+        logger = getLoggerFacade();\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        logger.open();\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+    }\n+\n+    @After\n+    public void closeLogger() {\n+        logger.close();\n+    }\n+\n+    protected abstract LoggerFacade getLoggerFacade();\n+\n+    @Test\n+    public void testSimpleLogShading() throws IOException, ParseException {\n+        String traceId = UUID.randomUUID().toString();\n+        logger.putTraceIdToMdc(traceId);\n+        try {\n+            logger.trace(TRACE_MESSAGE);\n+            logger.debug(DEBUG_MESSAGE);\n+            logger.warn(WARN_MESSAGE);\n+            logger.error(ERROR_MESSAGE);\n+        } finally {\n+            logger.removeTraceIdFromMdc();\n+        }\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(4);\n+\n+        for (int i = 0; i < 4; i++) {\n+            verifyEcsFormat(rawLogLines.get(i), ecsLogLines.get(i), traceId);\n+        }\n+    }\n+\n+    @Test\n+    public void testShadingIntoConfiguredDir() throws IOException, ParseException {\n+        when(config.getConfig(LoggingConfiguration.class).getLogShadingDestinationDir()).thenReturn(\"shade_logs\");\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+        testSimpleLogShading();\n+    }\n+\n+    @Test\n+    public void testLogShadingDisabled() throws IOException, ParseException {\n+        logger.trace(TRACE_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(false);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(true);\n+        logger.error(ERROR_MESSAGE);\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(2);\n+        verifyEcsFormat(rawLogLines.get(0), ecsLogLines.get(0), null);\n+        verifyEcsFormat(rawLogLines.get(3), ecsLogLines.get(1), null);\n+    }\n+\n+    @Test\n+    public void testLogShadingReplaceOriginal() throws IOException {\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingReplaceEnabled()).thenReturn(true);\n+        logger.trace(TRACE_MESSAGE);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        logger.error(ERROR_MESSAGE);\n+\n+        assertThat(readRawLogLines()).isEmpty();\n+        ArrayList<JsonNode> shadeLogEvents = readShadeLogFile();\n+        assertThat(shadeLogEvents).hasSize(4);\n+        for (JsonNode ecsLogLineTree : shadeLogEvents) {\n+            assertThat(ecsLogLineTree.get(\"process.thread.name\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.level\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.logger\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"message\")).isNotNull();\n+        }\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile() throws IOException {\n+        return readShadeLogFile(getShadeLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile(String shadeLogFilePath) throws IOException {\n+        ArrayList<JsonNode> ecsLogLines = new ArrayList<>();\n+        try (Stream<String> stream = Files.lines(Paths.get(shadeLogFilePath))) {\n+            stream.forEach(line -> {\n+                try {\n+                    ecsLogLines.add(objectMapper.readTree(line));\n+                } catch (JsonProcessingException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        }\n+        return ecsLogLines;\n+    }\n+\n+    @Nonnull\n+    private ArrayList<String[]> readRawLogLines() throws IOException {\n+        ArrayList<String[]> rawLogLines;\n+        try (Stream<String> stream = Files.lines(getOriginalLogFilePath())) {\n+            rawLogLines = stream.map(line -> line.split(\"\\\\s+\")).collect(Collectors.toCollection(ArrayList::new));\n+        }\n+        return rawLogLines;\n+    }\n+\n+    @Nonnull\n+    private Path getOriginalLogFilePath() {\n+        return Paths.get(logger.getLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private String getShadeLogFilePath() {\n+        return Utils.computeShadeLogFilePath(logger.getLogFilePath());\n+    }\n+\n+    private void verifyEcsFormat(String[] splitRawLogLine, JsonNode ecsLogLineTree, @Nullable String traceId) throws ParseException {\n+        SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        Date rawTimestamp = timestampFormat.parse(splitRawLogLine[0]);\n+        timestampFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date ecsTimestamp = timestampFormat.parse(ecsLogLineTree.get(\"@timestamp\").textValue());\n+        assertThat(rawTimestamp).isEqualTo(ecsTimestamp);\n+        assertThat(splitRawLogLine[1]).isEqualTo(ecsLogLineTree.get(\"process.thread.name\").textValue());\n+        assertThat(splitRawLogLine[2]).isEqualTo(ecsLogLineTree.get(\"log.level\").textValue());\n+        assertThat(splitRawLogLine[3]).isEqualTo(ecsLogLineTree.get(\"log.logger\").textValue());\n+        assertThat(splitRawLogLine[4]).isEqualTo(ecsLogLineTree.get(\"message\").textValue());\n+        assertThat(ecsLogLineTree.get(\"service.name\").textValue()).isEqualTo(tracer.getMetaData().getService().getName());\n+        if (traceId != null) {\n+            assertThat(ecsLogLineTree.get(\"trace.id\").textValue()).isEqualTo(traceId);\n+        } else {\n+            assertThat(ecsLogLineTree.get(\"trace.id\")).isNull();\n+        }\n+    }\n+\n+    /**\n+     * Disabled by default, as this is a very slow test. Can be used for manual testing of shade file rolling.\n+     * Note: logback and log4j2 rollover before appending an event, which means the two log files will contain messages.\n+     * As opposed to those, log4j1 rolls over after appending an event, which means that the active log file (log4j1.log)\n+     * will be empty when the test ends.\n+     */\n+     //@Test\n+     public void testShadeLogRolling() throws IOException {\n+         when(config.getConfig(LoggingConfiguration.class).getLogFileSize()).thenReturn(100L);\n+         logger.trace(\"First line\");\n+         sleep();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NDYzMA=="}, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY3MzI3Ng==", "bodyText": "Already proved flaky in the first test \ud83d\ude41\nI raised sleep time to 4X. Let's see where it takes us.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r577673276", "createdAt": "2021-02-17T14:49:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class LogShadingInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    public static final String TRACE_MESSAGE = \"Trace-this\";\n+    public static final String DEBUG_MESSAGE = \"Debug-this\";\n+    public static final String WARN_MESSAGE = \"Warn-this\";\n+    public static final String ERROR_MESSAGE = \"Error-this\";\n+\n+    private final LoggerFacade logger;\n+    private ObjectMapper objectMapper;\n+\n+    public LogShadingInstrumentationTest() {\n+        logger = getLoggerFacade();\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        logger.open();\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+    }\n+\n+    @After\n+    public void closeLogger() {\n+        logger.close();\n+    }\n+\n+    protected abstract LoggerFacade getLoggerFacade();\n+\n+    @Test\n+    public void testSimpleLogShading() throws IOException, ParseException {\n+        String traceId = UUID.randomUUID().toString();\n+        logger.putTraceIdToMdc(traceId);\n+        try {\n+            logger.trace(TRACE_MESSAGE);\n+            logger.debug(DEBUG_MESSAGE);\n+            logger.warn(WARN_MESSAGE);\n+            logger.error(ERROR_MESSAGE);\n+        } finally {\n+            logger.removeTraceIdFromMdc();\n+        }\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(4);\n+\n+        for (int i = 0; i < 4; i++) {\n+            verifyEcsFormat(rawLogLines.get(i), ecsLogLines.get(i), traceId);\n+        }\n+    }\n+\n+    @Test\n+    public void testShadingIntoConfiguredDir() throws IOException, ParseException {\n+        when(config.getConfig(LoggingConfiguration.class).getLogShadingDestinationDir()).thenReturn(\"shade_logs\");\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+        testSimpleLogShading();\n+    }\n+\n+    @Test\n+    public void testLogShadingDisabled() throws IOException, ParseException {\n+        logger.trace(TRACE_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(false);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(true);\n+        logger.error(ERROR_MESSAGE);\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(2);\n+        verifyEcsFormat(rawLogLines.get(0), ecsLogLines.get(0), null);\n+        verifyEcsFormat(rawLogLines.get(3), ecsLogLines.get(1), null);\n+    }\n+\n+    @Test\n+    public void testLogShadingReplaceOriginal() throws IOException {\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingReplaceEnabled()).thenReturn(true);\n+        logger.trace(TRACE_MESSAGE);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        logger.error(ERROR_MESSAGE);\n+\n+        assertThat(readRawLogLines()).isEmpty();\n+        ArrayList<JsonNode> shadeLogEvents = readShadeLogFile();\n+        assertThat(shadeLogEvents).hasSize(4);\n+        for (JsonNode ecsLogLineTree : shadeLogEvents) {\n+            assertThat(ecsLogLineTree.get(\"process.thread.name\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.level\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.logger\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"message\")).isNotNull();\n+        }\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile() throws IOException {\n+        return readShadeLogFile(getShadeLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile(String shadeLogFilePath) throws IOException {\n+        ArrayList<JsonNode> ecsLogLines = new ArrayList<>();\n+        try (Stream<String> stream = Files.lines(Paths.get(shadeLogFilePath))) {\n+            stream.forEach(line -> {\n+                try {\n+                    ecsLogLines.add(objectMapper.readTree(line));\n+                } catch (JsonProcessingException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        }\n+        return ecsLogLines;\n+    }\n+\n+    @Nonnull\n+    private ArrayList<String[]> readRawLogLines() throws IOException {\n+        ArrayList<String[]> rawLogLines;\n+        try (Stream<String> stream = Files.lines(getOriginalLogFilePath())) {\n+            rawLogLines = stream.map(line -> line.split(\"\\\\s+\")).collect(Collectors.toCollection(ArrayList::new));\n+        }\n+        return rawLogLines;\n+    }\n+\n+    @Nonnull\n+    private Path getOriginalLogFilePath() {\n+        return Paths.get(logger.getLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private String getShadeLogFilePath() {\n+        return Utils.computeShadeLogFilePath(logger.getLogFilePath());\n+    }\n+\n+    private void verifyEcsFormat(String[] splitRawLogLine, JsonNode ecsLogLineTree, @Nullable String traceId) throws ParseException {\n+        SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        Date rawTimestamp = timestampFormat.parse(splitRawLogLine[0]);\n+        timestampFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date ecsTimestamp = timestampFormat.parse(ecsLogLineTree.get(\"@timestamp\").textValue());\n+        assertThat(rawTimestamp).isEqualTo(ecsTimestamp);\n+        assertThat(splitRawLogLine[1]).isEqualTo(ecsLogLineTree.get(\"process.thread.name\").textValue());\n+        assertThat(splitRawLogLine[2]).isEqualTo(ecsLogLineTree.get(\"log.level\").textValue());\n+        assertThat(splitRawLogLine[3]).isEqualTo(ecsLogLineTree.get(\"log.logger\").textValue());\n+        assertThat(splitRawLogLine[4]).isEqualTo(ecsLogLineTree.get(\"message\").textValue());\n+        assertThat(ecsLogLineTree.get(\"service.name\").textValue()).isEqualTo(tracer.getMetaData().getService().getName());\n+        if (traceId != null) {\n+            assertThat(ecsLogLineTree.get(\"trace.id\").textValue()).isEqualTo(traceId);\n+        } else {\n+            assertThat(ecsLogLineTree.get(\"trace.id\")).isNull();\n+        }\n+    }\n+\n+    /**\n+     * Disabled by default, as this is a very slow test. Can be used for manual testing of shade file rolling.\n+     * Note: logback and log4j2 rollover before appending an event, which means the two log files will contain messages.\n+     * As opposed to those, log4j1 rolls over after appending an event, which means that the active log file (log4j1.log)\n+     * will be empty when the test ends.\n+     */\n+     //@Test\n+     public void testShadeLogRolling() throws IOException {\n+         when(config.getConfig(LoggingConfiguration.class).getLogFileSize()).thenReturn(100L);\n+         logger.trace(\"First line\");\n+         sleep();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NDYzMA=="}, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ2OTQ3MA==", "bodyText": "This test was very useful for me to test our log file rolling configurations. It will be as useful in the future if we would like to change something like our rolling-decision strategy. However, it is not as important for continuous-integration testing, which is why I disabled it and still left it.\nIt now adds about 1.5 seconds to the build for the three logging frameworks combined, so as long as it is not flaky, we can leave it on and disable later if required.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r578469470", "createdAt": "2021-02-18T14:38:20Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class LogShadingInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    public static final String TRACE_MESSAGE = \"Trace-this\";\n+    public static final String DEBUG_MESSAGE = \"Debug-this\";\n+    public static final String WARN_MESSAGE = \"Warn-this\";\n+    public static final String ERROR_MESSAGE = \"Error-this\";\n+\n+    private final LoggerFacade logger;\n+    private ObjectMapper objectMapper;\n+\n+    public LogShadingInstrumentationTest() {\n+        logger = getLoggerFacade();\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        logger.open();\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+    }\n+\n+    @After\n+    public void closeLogger() {\n+        logger.close();\n+    }\n+\n+    protected abstract LoggerFacade getLoggerFacade();\n+\n+    @Test\n+    public void testSimpleLogShading() throws IOException, ParseException {\n+        String traceId = UUID.randomUUID().toString();\n+        logger.putTraceIdToMdc(traceId);\n+        try {\n+            logger.trace(TRACE_MESSAGE);\n+            logger.debug(DEBUG_MESSAGE);\n+            logger.warn(WARN_MESSAGE);\n+            logger.error(ERROR_MESSAGE);\n+        } finally {\n+            logger.removeTraceIdFromMdc();\n+        }\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(4);\n+\n+        for (int i = 0; i < 4; i++) {\n+            verifyEcsFormat(rawLogLines.get(i), ecsLogLines.get(i), traceId);\n+        }\n+    }\n+\n+    @Test\n+    public void testShadingIntoConfiguredDir() throws IOException, ParseException {\n+        when(config.getConfig(LoggingConfiguration.class).getLogShadingDestinationDir()).thenReturn(\"shade_logs\");\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+        testSimpleLogShading();\n+    }\n+\n+    @Test\n+    public void testLogShadingDisabled() throws IOException, ParseException {\n+        logger.trace(TRACE_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(false);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(true);\n+        logger.error(ERROR_MESSAGE);\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(2);\n+        verifyEcsFormat(rawLogLines.get(0), ecsLogLines.get(0), null);\n+        verifyEcsFormat(rawLogLines.get(3), ecsLogLines.get(1), null);\n+    }\n+\n+    @Test\n+    public void testLogShadingReplaceOriginal() throws IOException {\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingReplaceEnabled()).thenReturn(true);\n+        logger.trace(TRACE_MESSAGE);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        logger.error(ERROR_MESSAGE);\n+\n+        assertThat(readRawLogLines()).isEmpty();\n+        ArrayList<JsonNode> shadeLogEvents = readShadeLogFile();\n+        assertThat(shadeLogEvents).hasSize(4);\n+        for (JsonNode ecsLogLineTree : shadeLogEvents) {\n+            assertThat(ecsLogLineTree.get(\"process.thread.name\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.level\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.logger\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"message\")).isNotNull();\n+        }\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile() throws IOException {\n+        return readShadeLogFile(getShadeLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile(String shadeLogFilePath) throws IOException {\n+        ArrayList<JsonNode> ecsLogLines = new ArrayList<>();\n+        try (Stream<String> stream = Files.lines(Paths.get(shadeLogFilePath))) {\n+            stream.forEach(line -> {\n+                try {\n+                    ecsLogLines.add(objectMapper.readTree(line));\n+                } catch (JsonProcessingException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        }\n+        return ecsLogLines;\n+    }\n+\n+    @Nonnull\n+    private ArrayList<String[]> readRawLogLines() throws IOException {\n+        ArrayList<String[]> rawLogLines;\n+        try (Stream<String> stream = Files.lines(getOriginalLogFilePath())) {\n+            rawLogLines = stream.map(line -> line.split(\"\\\\s+\")).collect(Collectors.toCollection(ArrayList::new));\n+        }\n+        return rawLogLines;\n+    }\n+\n+    @Nonnull\n+    private Path getOriginalLogFilePath() {\n+        return Paths.get(logger.getLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private String getShadeLogFilePath() {\n+        return Utils.computeShadeLogFilePath(logger.getLogFilePath());\n+    }\n+\n+    private void verifyEcsFormat(String[] splitRawLogLine, JsonNode ecsLogLineTree, @Nullable String traceId) throws ParseException {\n+        SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        Date rawTimestamp = timestampFormat.parse(splitRawLogLine[0]);\n+        timestampFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date ecsTimestamp = timestampFormat.parse(ecsLogLineTree.get(\"@timestamp\").textValue());\n+        assertThat(rawTimestamp).isEqualTo(ecsTimestamp);\n+        assertThat(splitRawLogLine[1]).isEqualTo(ecsLogLineTree.get(\"process.thread.name\").textValue());\n+        assertThat(splitRawLogLine[2]).isEqualTo(ecsLogLineTree.get(\"log.level\").textValue());\n+        assertThat(splitRawLogLine[3]).isEqualTo(ecsLogLineTree.get(\"log.logger\").textValue());\n+        assertThat(splitRawLogLine[4]).isEqualTo(ecsLogLineTree.get(\"message\").textValue());\n+        assertThat(ecsLogLineTree.get(\"service.name\").textValue()).isEqualTo(tracer.getMetaData().getService().getName());\n+        if (traceId != null) {\n+            assertThat(ecsLogLineTree.get(\"trace.id\").textValue()).isEqualTo(traceId);\n+        } else {\n+            assertThat(ecsLogLineTree.get(\"trace.id\")).isNull();\n+        }\n+    }\n+\n+    /**\n+     * Disabled by default, as this is a very slow test. Can be used for manual testing of shade file rolling.\n+     * Note: logback and log4j2 rollover before appending an event, which means the two log files will contain messages.\n+     * As opposed to those, log4j1 rolls over after appending an event, which means that the active log file (log4j1.log)\n+     * will be empty when the test ends.\n+     */\n+     //@Test\n+     public void testShadeLogRolling() throws IOException {\n+         when(config.getConfig(LoggingConfiguration.class).getLogFileSize()).thenReturn(100L);\n+         logger.trace(\"First line\");\n+         sleep();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NDYzMA=="}, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5NTM2NDA0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxNTowNzoxMVrOIug3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxNTowNzoxMVrOIug3Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTY0Mzg0Mg==", "bodyText": "I have not tested the ref works but I think it makes sense to link to the ecs docs so people can learn more about it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"into ECS-compatible JSON, suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +\n          \n          \n            \n                        \"into {ecs-logging-ref}/index.html[ECS-compatible JSON], suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r585643842", "createdAt": "2021-03-02T15:07:11Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,53 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<LogEcsReformatting> logEcsReformatting = ConfigurationOption.enumOption(LogEcsReformatting.class)\n+        .key(\"log_ecs_reformatting\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .tags(\"added[1.22.0]\", \"experimental\")\n+        .description(\"Specifying whether and how the agent should automatically reformat application logs \\n\" +\n+            \"into ECS-compatible JSON, suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682e11632c9cbc5bdc1b525d7c05ae550743c88"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5OTY2Nzg5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMDo0OToxOFrOIvJqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQxMjo1NTowOFrOIy_uOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg==", "bodyText": "As this class has a dependency (LoggingConfiguration), I'd prefer it not to be a static utility class but to have a constructor argument for LoggingConfiguration.\nIt'd simplify UtilsTest (or at least make it more lightweight) in that it doesn't need to extend from AbstractInstrumentationTest and you could just inject a mock instance for  LoggingConfiguration.\nAlso, consider creating a constructor argument for LoggingConfiguration in AbstractLogShadingHelper. Instead of making the implementations singletons, have a look at co.elastic.apm.agent.jdbc.JdbcInstrumentation#getJdbcHelper.\nBy using that pattern, the fact that advices are static does not leak into the rest of the codebase which can use regular constructor-based \"dependency-injection\". I think it makes sense to follow a similar pattern throughout the codebase so that it's more cohesive and can serve as a reference for new plugins.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586312352", "createdAt": "2021-03-03T10:49:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxNDc4Mg==", "bodyText": "Actually, I think co.elastic.apm.agent.log4j2.Log4j2LogShadingHelper#instance can probably stay as-is and just change private static final Log4j2LogShadingHelper INSTANCE = new Log4j2LogShadingHelper(); to private static final Log4j2LogShadingHelper INSTANCE = new Log4j2LogShadingHelper(GlobalTracer.requireTracerImpl());\nI like the fact that it's a final field rather than a volatile field in JdbcInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586314782", "createdAt": "2021-03-03T10:52:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM1ODIzNw==", "bodyText": "Utils is a static utility by its nature. The argument of having a \"dependency\" shouldn't interfere with that. Depending on the logging framework as in LoggerFactory.getLogger(), for example, would be the same but would not exclude a class from being a static utility.\nDoing what you suggest can create the exact opposite problem of enforcing the utility user to introduce this dependency, which it might don't even need for anything else. And given that it is a utility, this will affect multiple users.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586358237", "createdAt": "2021-03-03T11:59:40Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM4MTk4Mw==", "bodyText": "IMHO, a static utility should not depend on another class that is stateful. But what do you think about just adding a String shadeFileDestinationDir parameter that the caller can read from config.getLogEcsFormattingDestinationDir()?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586381983", "createdAt": "2021-03-03T12:37:48Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDM0MzczOQ==", "bodyText": "There is such method already: https://github.com/elastic/apm-agent-java/pull/1261/files#diff-2f5c514f954a475ff220cebc3a8551dce7915534f14d15bcffa86021ad108403R322\nbut it only returns the configured value or null.\nThe documentation for the log_ecs_reformatting_dir config option says:\nIf `log_ecs_reformatting` is set to `SHADE` or `REPLACE`, \nthe shade log files will be written alongside \nthe original logs in the same directory by default. \nUse this configuration in order to write the shade logs \ninto an alternative destination. Omitting this config or \nsetting it to an empty string will restore the default \nbehavior. If relative path is used, this path will be used \nrelative to the original logs directory.\n\nIn order to support that, there is some logic required, as well as an input argument for the original log file, so I felt this is not very appropriate to be located within the config class.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r590343739", "createdAt": "2021-03-09T12:55:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5OTczMTM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo0OVrOIvKRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxNTozMjoxNFrOI0N14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng==", "bodyText": "Why not like this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n          \n          \n            \n                    configuredServiceName = tracer.getConfig(CoreConfiguration.class).getServiceName();", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586322286", "createdAt": "2021-03-03T11:03:49Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM1OTQyMQ==", "bodyText": "Because it is a bit more future-proof. I want to get here the exact same service name that is reported in the metadata, so if in the future we need to make it all-capital, or append a prefix, or apply any logic instead of only using the configured name as is, it will still remain in sync.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586359421", "createdAt": "2021-03-03T12:01:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzUyMzA2Nw==", "bodyText": "Got it. I think to make it even more future-proof and to solve the issue about which service name to use, we should expose a ElasticApmTracer#getServiceName(ClassLoader) method. In contrast to what the existing private method does, it should get the service name from the MetaData if there's no override for the provided class loader. We can probably get the class loader of the application by calling Thread.currentThread().getContextClassLoader().\nOne complication is that the metadata is inside a future, but that should be resolvable as the service name doesn't depend on the cloud metadata.\nAnother issue is that the service name might not be known that early in the application startup. For example, the detection of the spring.application.name happens after the first event has been logged. But at least for spring boot, there seems to be a fix. We can instrument either org.springframework.boot.SpringApplication#prepareEnvironment or org.springframework.boot.context.config.ConfigFileApplicationListener#onApplicationEvent, or similar which allows us to read environment.getProperty(\"spring.application.name\") before the first event is logged.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r587523067", "createdAt": "2021-03-04T14:38:25Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDM3NjM3OQ==", "bodyText": "I think we should be careful not to over-complicate this already-complicated feature.\nThe way I see it - we either make efforts to maintain service name in sync with APM events, or we decide that the most important is consistency across all log events. Once we decide it is the latter, it is less important (and even a disadvantage) to make it class-loader-dependent. It will introduce the same issue of being dependent on the thread that does causes the appender initialization. I rather take the configured name or the default if not configured.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r590376379", "createdAt": "2021-03-09T13:39:41Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYyMzY1MQ==", "bodyText": "We decided to start with leaving it as it is now and see how we enhance it later on. In any case, when the user is setting the service_name explicitly, then it will work as expected.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r591623651", "createdAt": "2021-03-10T15:32:14Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5OTczMTYxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo1MVrOIvKRkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxNDozODozNVrOIwTkew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg==", "bodyText": "This may yield different service names for the same webapp depending on whether the log has been created inside or outside of an active transaction.\nNot sure what the alternative is, though.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586322322", "createdAt": "2021-03-03T11:03:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM2MjI0NQ==", "bodyText": "Yes, I am aware and agree this is not ideal. However, don't forget that when logging correlation is enabled, we also add trace.id and transaction.id. What I tried to do is keep these Log events in sync with the APM events that we report in that context. So I guess the question is: what's more important - the sync with APM events or the ability to aggregate for a single service name in the logging app?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586362245", "createdAt": "2021-03-03T12:06:16Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM2NDI2NQ==", "bodyText": "(I honestly don't have an answer, I think you are in a better position to judge, so we'll go with what you think is better)", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586364265", "createdAt": "2021-03-03T12:09:30Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM5MTE3NQ==", "bodyText": "One thing I missed is that getServiceName only gets called in the context of co.elastic.apm.agent.log.shader.AbstractLogShadingHelper#createAndConfigureAppender which is only called once, when the first log after instrumenting the appender is logged.\nThis may or may not be within a transaction. Likely, it happens before the service name can be determined for a .war web application or before being able to detect the spring.application.name.\nIt's tricky. But at least, the service name should stay consistent throughout the lifetime of the application.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586391175", "createdAt": "2021-03-03T12:52:36Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjQyMjI5NQ==", "bodyText": "That is correct, and now I recall we already had this discussion \ud83d\ude42\nIf we think it's important enough to maintain consistency (for future purposes as well), we can add the service name to the MDC and in the ECS logger first look for such key and only if it is not there, use the one configured during the appender configuration.\nReally, it's your call (sorry, I didn't understand from the last comment if you made this decision)", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586422295", "createdAt": "2021-03-03T13:37:59Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzUyMzE5NQ==", "bodyText": "I think it's important that the service name stays consistent regardless of whether or not a log is emitted during a transaction. So setting it once when creating the ecs formatter/encoder does make sense. But I think we can refine the way we gather the service name. See also https://github.com/elastic/apm-agent-java/pull/1261/files#r587523067", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r587523195", "createdAt": "2021-03-04T14:38:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwMDE5NDU1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMjo1NTozNVrOIvOmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMjo1NTozNVrOIvOmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM5MzI2NA==", "bodyText": "Javadoc links to the instrumented method would be helpful on all instrumentations \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586393264", "createdAt": "2021-03-03T12:55:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingInstrumentation;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class Log4j1LogShadingInstrumentation extends AbstractLogShadingInstrumentation {\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        Collection<String> ret = super.getInstrumentationGroupNames();\n+        ret.add(\"log4j1\");\n+        return ret;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader())\n+            .and(classLoaderCanLoadClass(\"org.apache.log4j.WriterAppender\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.apache.log4j.WriterAppender\");\n+    }\n+\n+    public static class ShadingInstrumentation extends Log4j1LogShadingInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"subAppend\").and(takesArgument(0, named(\"org.apache.log4j.spi.LoggingEvent\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwMTE3MDY3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-logback-plugin/apm-logback-plugin-impl/src/main/java/co/elastic/apm/agent/logback/LogbackLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjowODoyNFrOIvYCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxNTozMToxNFrOI0NyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU0NzczMg==", "bodyText": "why do we have to do the shading trick for slf4j on this module? could we just remove this portion of apm-logback-plugin-impl/pom.xml? It does not use any slf4j classes in a context where we need to reference the target cl's slf4j.\n<relocation>\n    <pattern>org.slf4j</pattern>\n    <shadedPattern>co.elastic.apm.agent.logshading.shaded.slf4j</shadedPattern>\n</relocation>", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586547732", "createdAt": "2021-03-03T16:08:24Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-logback-plugin/apm-logback-plugin-impl/src/main/java/co/elastic/apm/agent/logback/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logback;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();\n+\n+    private static final LogbackLogShadingHelper INSTANCE = new LogbackLogShadingHelper();\n+\n+    static LogbackLogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    private LogbackLogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(FileAppender<ILoggingEvent> appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender, String appenderName) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(false);\n+        shadeAppender.setEncoder(ecsEncoder);\n+\n+        FixedWindowRollingPolicy rollingPolicy = new FixedWindowRollingPolicy();\n+        rollingPolicy.setMinIndex(1);\n+        rollingPolicy.setMaxIndex(1);\n+        rollingPolicy.setFileNamePattern(shadeFile + \".%i\");\n+        rollingPolicy.setParent(shadeAppender);\n+        rollingPolicy.setContext(defaultLoggerContext);\n+        rollingPolicy.start();\n+        shadeAppender.setRollingPolicy(rollingPolicy);\n+\n+        SizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new SizeBasedTriggeringPolicy<>();\n+        try {\n+            VersionUtils.setMaxFileSize(triggeringPolicy, getMaxLogFileSize());\n+        } catch (Throwable throwable) {\n+            // We cannot log here because this plugin escapes slf4j package reallocation.\n+            System.out.println(\"Failed to set max file size for log shader file-rolling strategy. Using the default \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDM4MzkzMQ==", "bodyText": "Not sure now, maybe just a copy+paste+easier-to-just-leave \ud83d\ude42\nI'll remove and see if anything breaks", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r590383931", "createdAt": "2021-03-09T13:49:34Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-logback-plugin/apm-logback-plugin-impl/src/main/java/co/elastic/apm/agent/logback/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logback;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();\n+\n+    private static final LogbackLogShadingHelper INSTANCE = new LogbackLogShadingHelper();\n+\n+    static LogbackLogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    private LogbackLogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(FileAppender<ILoggingEvent> appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender, String appenderName) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(false);\n+        shadeAppender.setEncoder(ecsEncoder);\n+\n+        FixedWindowRollingPolicy rollingPolicy = new FixedWindowRollingPolicy();\n+        rollingPolicy.setMinIndex(1);\n+        rollingPolicy.setMaxIndex(1);\n+        rollingPolicy.setFileNamePattern(shadeFile + \".%i\");\n+        rollingPolicy.setParent(shadeAppender);\n+        rollingPolicy.setContext(defaultLoggerContext);\n+        rollingPolicy.start();\n+        shadeAppender.setRollingPolicy(rollingPolicy);\n+\n+        SizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new SizeBasedTriggeringPolicy<>();\n+        try {\n+            VersionUtils.setMaxFileSize(triggeringPolicy, getMaxLogFileSize());\n+        } catch (Throwable throwable) {\n+            // We cannot log here because this plugin escapes slf4j package reallocation.\n+            System.out.println(\"Failed to set max file size for log shader file-rolling strategy. Using the default \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU0NzczMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYyMjc1Mw==", "bodyText": "We cannot add an slf4j dependency in the logback module, but we will add a \"facade\" logging method in the abstract helper that the helper subclasses can use. The common module should be able to have this dependency", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r591622753", "createdAt": "2021-03-10T15:31:14Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-logback-plugin/apm-logback-plugin-impl/src/main/java/co/elastic/apm/agent/logback/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logback;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();\n+\n+    private static final LogbackLogShadingHelper INSTANCE = new LogbackLogShadingHelper();\n+\n+    static LogbackLogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    private LogbackLogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(FileAppender<ILoggingEvent> appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender, String appenderName) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(false);\n+        shadeAppender.setEncoder(ecsEncoder);\n+\n+        FixedWindowRollingPolicy rollingPolicy = new FixedWindowRollingPolicy();\n+        rollingPolicy.setMinIndex(1);\n+        rollingPolicy.setMaxIndex(1);\n+        rollingPolicy.setFileNamePattern(shadeFile + \".%i\");\n+        rollingPolicy.setParent(shadeAppender);\n+        rollingPolicy.setContext(defaultLoggerContext);\n+        rollingPolicy.start();\n+        shadeAppender.setRollingPolicy(rollingPolicy);\n+\n+        SizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new SizeBasedTriggeringPolicy<>();\n+        try {\n+            VersionUtils.setMaxFileSize(triggeringPolicy, getMaxLogFileSize());\n+        } catch (Throwable throwable) {\n+            // We cannot log here because this plugin escapes slf4j package reallocation.\n+            System.out.println(\"Failed to set max file size for log shader file-rolling strategy. Using the default \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU0NzczMg=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwMTI3OTk1OnYy", "diffSide": "RIGHT", "path": "docs/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjoyODoxOVrOIvZFPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQxMzo1MDowMFrOIzCMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU2NDkyNQ==", "bodyText": "There's already a log4j instrumentation group name for Log4j2LoggerErrorCapturingInstrumentation. It's hard to know from just looking at this list what the difference between log4j and log4j1 is.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586564925", "createdAt": "2021-03-03T16:28:19Z", "author": {"login": "felixbarny"}, "path": "docs/configuration.asciidoc", "diffHunk": "@@ -702,7 +704,7 @@ you should add an additional entry to this list (make sure to also include the d\n ==== `disable_instrumentations` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])\n \n A list of instrumentations which should be disabled.\n-Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.\n+Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `log4j1`, `log4j2`, `logback`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDM4NDI1MQ==", "bodyText": "OK, I'll change both", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r590384251", "createdAt": "2021-03-09T13:50:00Z", "author": {"login": "eyalkoren"}, "path": "docs/configuration.asciidoc", "diffHunk": "@@ -702,7 +704,7 @@ you should add an additional entry to this list (make sure to also include the d\n ==== `disable_instrumentations` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])\n \n A list of instrumentations which should be disabled.\n-Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.\n+Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `log4j1`, `log4j2`, `logback`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU2NDkyNQ=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwMTM2NjY5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjo0Mzo0NlrOIvZ75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxNTozNjoyN1rOI0OEjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU3ODkxNw==", "bodyText": "It's more of an idea or a thing to discuss but I think it makes sense to add the appenderName to the event dataset so that it's possible to filter by different log streams of an application.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ecsLayout.setServiceName(getServiceName());\n          \n          \n            \n                            ecsLayout.setServiceName(getServiceName());\n          \n          \n            \n                            ecsLayout.setEventDataset(getServiceName() + \".\" + appenderName);", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586578917", "createdAt": "2021-03-03T16:43:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+\n+import co.elastic.logging.log4j.EcsLayout;\n+import org.apache.log4j.FileAppender;\n+import org.apache.log4j.RollingFileAppender;\n+import org.apache.log4j.WriterAppender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+class Log4j1LogShadingHelper extends AbstractLogShadingHelper<WriterAppender> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j1LogShadingHelper.class);\n+\n+    private static final Log4j1LogShadingHelper INSTANCE = new Log4j1LogShadingHelper();\n+\n+    static Log4j1LogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    Log4j1LogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(WriterAppender appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected WriterAppender createAndConfigureAppender(WriterAppender originalAppender, String appenderName) {\n+\n+        RollingFileAppender shadeAppender = null;\n+        if (originalAppender instanceof FileAppender) {\n+            try {\n+                FileAppender fileAppender = (FileAppender) originalAppender;\n+                String shadeFile = Utils.computeShadeLogFilePath(fileAppender.getFile());\n+\n+                EcsLayout ecsLayout = new EcsLayout();\n+                ecsLayout.setServiceName(getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDM4OTY0MA==", "bodyText": "Yeah, good idea. I'll apply this suggestion, unless you want to think of an alternative. As long as this is experimental, I think it's OK to start with something that may change later.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r590389640", "createdAt": "2021-03-09T13:56:45Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+\n+import co.elastic.logging.log4j.EcsLayout;\n+import org.apache.log4j.FileAppender;\n+import org.apache.log4j.RollingFileAppender;\n+import org.apache.log4j.WriterAppender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+class Log4j1LogShadingHelper extends AbstractLogShadingHelper<WriterAppender> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j1LogShadingHelper.class);\n+\n+    private static final Log4j1LogShadingHelper INSTANCE = new Log4j1LogShadingHelper();\n+\n+    static Log4j1LogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    Log4j1LogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(WriterAppender appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected WriterAppender createAndConfigureAppender(WriterAppender originalAppender, String appenderName) {\n+\n+        RollingFileAppender shadeAppender = null;\n+        if (originalAppender instanceof FileAppender) {\n+            try {\n+                FileAppender fileAppender = (FileAppender) originalAppender;\n+                String shadeFile = Utils.computeShadeLogFilePath(fileAppender.getFile());\n+\n+                EcsLayout ecsLayout = new EcsLayout();\n+                ecsLayout.setServiceName(getServiceName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU3ODkxNw=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYyNzQwNw==", "bodyText": "If the name is null (not sure if that can be the case) use log instead of the appender name", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r591627407", "createdAt": "2021-03-10T15:36:27Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+\n+import co.elastic.logging.log4j.EcsLayout;\n+import org.apache.log4j.FileAppender;\n+import org.apache.log4j.RollingFileAppender;\n+import org.apache.log4j.WriterAppender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+class Log4j1LogShadingHelper extends AbstractLogShadingHelper<WriterAppender> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j1LogShadingHelper.class);\n+\n+    private static final Log4j1LogShadingHelper INSTANCE = new Log4j1LogShadingHelper();\n+\n+    static Log4j1LogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    Log4j1LogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(WriterAppender appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected WriterAppender createAndConfigureAppender(WriterAppender originalAppender, String appenderName) {\n+\n+        RollingFileAppender shadeAppender = null;\n+        if (originalAppender instanceof FileAppender) {\n+            try {\n+                FileAppender fileAppender = (FileAppender) originalAppender;\n+                String shadeFile = Utils.computeShadeLogFilePath(fileAppender.getFile());\n+\n+                EcsLayout ecsLayout = new EcsLayout();\n+                ecsLayout.setServiceName(getServiceName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU3ODkxNw=="}, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNjUyOTI0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDo0MjozMVrOIwJaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDo0MjozMVrOIwJaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzM1Njc5Mw==", "bodyText": "Also return null if the appender already uses an ECS encoder/layout.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r587356793", "createdAt": "2021-03-04T10:42:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1OTUzMjMxOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LogEcsReformatting.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNTowMDoxMlrOI3rc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwNjowNDoyMFrOI4IvfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1NDUwMQ==", "bodyText": "As I find it hard to recall what the difference between REPLACE  and OVERRIDE  is, just some ideas how we could maybe make it clearer.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SHADE,\n          \n          \n            \n                REPLACE,\n          \n          \n            \n                // NOT IMPLEMENTED YET\n          \n          \n            \n                //OVERRIDE\n          \n          \n            \n                SHADE_FILE,\n          \n          \n            \n                REPLACE_FILE,\n          \n          \n            \n                // NOT IMPLEMENTED YET\n          \n          \n            \n                // REFORMAT\n          \n      \n    \n    \n  \n\nThe _FILE options only work for file appenders while REFORMAT works with potentially any appender.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r595254501", "createdAt": "2021-03-16T15:00:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LogEcsReformatting.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logging;\n+\n+public enum LogEcsReformatting {\n+    OFF,\n+    SHADE,\n+    REPLACE,\n+    // NOT IMPLEMENTED YET\n+    //OVERRIDE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTczNDM5Nw==", "bodyText": "I actually prefer the simplicity in enum names, especially ones you use for configuration, so I think these single-verb-word names make sense. I see what you say about the meaning of each, but I don't think this will make a big change - in any case you would read the documentation and this is where I put efforts to very clearly explain what each does.\nIn addition, shade is currently only applied for files because this is how I implemented it, but it may do the same for console/stdout appenders as well if required for the same reason (keep existing log stream but also ingest ECS format of it to ES).", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r595734397", "createdAt": "2021-03-17T06:04:20Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LogEcsReformatting.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logging;\n+\n+public enum LogEcsReformatting {\n+    OFF,\n+    SHADE,\n+    REPLACE,\n+    // NOT IMPLEMENTED YET\n+    //OVERRIDE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1NDUwMQ=="}, "originalCommit": {"oid": "d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 141, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}