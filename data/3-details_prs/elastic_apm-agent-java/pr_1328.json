{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTc3ODcx", "number": 1328, "title": "Add RabbitMQ support", "bodyText": "What does this PR do?\nRabbitMQ support based on the RocketMQ support\nChecklist\n\n This is a new plugin\n\n I have updated CHANGELOG.asciidoc\n My code follows the style guidelines of this project\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated supported-technologies.asciidoc\nn/a Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? Describe how you made sure that old, non-supported versions are not instrumented by accident.\n-> Testing the instrumentation with old versions of the RabbitMQ client", "createdAt": "2020-08-09T17:15:42Z", "url": "https://github.com/elastic/apm-agent-java/pull/1328", "merged": true, "mergeCommit": {"oid": "4053baf004bb3ce1c4a3943a4a30cda984625bd5"}, "closed": true, "closedAt": "2020-12-22T15:09:36Z", "author": {"login": "hectorespert"}, "timelineItems": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc95VmvgBqjM2NDM5OTk2MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdopsufAH2gAyNDY1MTc3ODcxOjFmZjEzODk4M2I5NjI5NDIyZWE2YjQ1Y2UyZGMzZWJkNzEwNTQ4NzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c708a978971492cbb58c6e334006e3fdfee0046c", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c708a978971492cbb58c6e334006e3fdfee0046c", "committedDate": "2020-08-11T16:19:55Z", "message": "Add RabbitMQTextHeaderGetter test class"}, "afterCommit": {"oid": "f556b280de2f4e5ce2cb8b6e27d010fd44567b98", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/f556b280de2f4e5ce2cb8b6e27d010fd44567b98", "committedDate": "2020-08-11T16:23:29Z", "message": "Add RabbitMQTextHeaderGetter test class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8255b2d70546d12ab849659d3828148b69ac821", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/f8255b2d70546d12ab849659d3828148b69ac821", "committedDate": "2020-08-11T17:13:08Z", "message": "Implement RabbitMQTextHeaderGetter tests"}, "afterCommit": {"oid": "53080c24e74fd5ffa2c719819d295936ebfcfe15", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/53080c24e74fd5ffa2c719819d295936ebfcfe15", "committedDate": "2020-09-04T14:21:00Z", "message": "Implement RabbitMQTextHeaderGetter tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e67ab15e03b9eac5ff045d0ba5722b38a222891f", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e67ab15e03b9eac5ff045d0ba5722b38a222891f", "committedDate": "2020-09-04T15:38:37Z", "message": "Remove helper"}, "afterCommit": {"oid": "47b702dba54c1b1801a40ce3424e1e269ede94e8", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/47b702dba54c1b1801a40ce3424e1e269ede94e8", "committedDate": "2020-09-04T15:39:14Z", "message": "RabbitMQ instrumentation plugin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47b702dba54c1b1801a40ce3424e1e269ede94e8", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/47b702dba54c1b1801a40ce3424e1e269ede94e8", "committedDate": "2020-09-04T15:39:14Z", "message": "RabbitMQ instrumentation plugin"}, "afterCommit": {"oid": "a2637c20ae73bd193d498f7a03910aa809e13d06", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a2637c20ae73bd193d498f7a03910aa809e13d06", "committedDate": "2020-09-04T15:55:25Z", "message": "RabbitMQ instrumentation plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzc2MDY2", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-482776066", "createdAt": "2020-09-04T16:02:43Z", "commit": {"oid": "a2637c20ae73bd193d498f7a03910aa809e13d06"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjowMjo0M1rOHNTmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjowMjo0M1rOHNTmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcxNDYxMQ==", "bodyText": "Is context required in exit spans? I can't get the producer's instrumentation to work.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r483714611", "createdAt": "2020-09-04T16:02:43Z", "author": {"login": "hectorespert"}, "path": "apm-agent-plugins/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/RabbitMQProducerInstrumentation.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderSetter;\n+import com.rabbitmq.client.AMQP;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.*;\n+\n+public class RabbitMQProducerInstrumentation extends RabbitMQBaseInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"basicPublish\")\n+            .and(takesArguments(6));\n+    }\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return RabbitProducerAdvice.class;\n+    }\n+\n+    public static class RabbitProducerAdvice {\n+\n+        private RabbitProducerAdvice() {}\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @Nullable\n+        public static Object onBasicPublish(@Advice.Argument(0) final String exchange/*, @Advice.Argument(value = 4, readOnly = false) @Nullable AMQP.BasicProperties basicProperties*/) {\n+            if (!tracer.isRunning() || tracer.getActive() == null) {\n+                return null;\n+            }\n+\n+            final AbstractSpan<?> activeSpan = tracer.getActive();\n+            if (activeSpan == null) {\n+                return null;\n+            }\n+\n+            Span exitSpan = activeSpan.createExitSpan();\n+            if (null == exitSpan) {\n+                return null;\n+            }\n+\n+            exitSpan.withType(\"messaging\").withSubtype(\"rabbitmq\")\n+                .withAction(\"send\")\n+                .withName(\"RabbitMQ message sent to \")\n+                .appendToName(exchange);\n+\n+            // TODO: Propagate trace context\n+            //final TextHeaderSetter<HashMap<String, Object>> textHeaderSetter = new RabbitMQTextHeaderSetter();\n+            //basicProperties = propagateTraceContext(exitSpan, basicProperties, textHeaderSetter);\n+\n+            /*\n+            TODO: Transaction context\n+            exitSpan.getContext().getMessage().withQueue(exchange);\n+            exitSpan.getContext().getDestination().getService().withType(\"messaging\").withName(\"rabbitmq\")\n+                .getResource().append(\"rabbitmq/\").append(exchange);*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2637c20ae73bd193d498f7a03910aa809e13d06"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2637c20ae73bd193d498f7a03910aa809e13d06", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a2637c20ae73bd193d498f7a03910aa809e13d06", "committedDate": "2020-09-04T15:55:25Z", "message": "RabbitMQ instrumentation plugin"}, "afterCommit": {"oid": "a747abc3850410b2c308c0e8ec12ef577d8890d3", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a747abc3850410b2c308c0e8ec12ef577d8890d3", "committedDate": "2020-09-08T16:08:14Z", "message": "RabbitMQ instrumentation plugin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a747abc3850410b2c308c0e8ec12ef577d8890d3", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a747abc3850410b2c308c0e8ec12ef577d8890d3", "committedDate": "2020-09-08T16:08:14Z", "message": "RabbitMQ instrumentation plugin"}, "afterCommit": {"oid": "e3dd15d04ba9eba94f37eb5ad11b18701488ca3a", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e3dd15d04ba9eba94f37eb5ad11b18701488ca3a", "committedDate": "2020-09-08T17:11:00Z", "message": "RabbitMQ instrumentation plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb7186d3868c562e1ed19ab68c27c04a912287a", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/acb7186d3868c562e1ed19ab68c27c04a912287a", "committedDate": "2020-09-10T15:23:03Z", "message": "Consumer RabbitMQ instrumentation plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc6fa6d6e8af9adfae0ff8af367a2cdb57921ec", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/5bc6fa6d6e8af9adfae0ff8af367a2cdb57921ec", "committedDate": "2020-09-10T15:23:03Z", "message": "RabbitMQ instrumentation plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b273205d65a5597331804c26a3f06e0c63e3bd3b", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b273205d65a5597331804c26a3f06e0c63e3bd3b", "committedDate": "2020-09-10T15:23:03Z", "message": "Fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6605b602f9474e40066a72b58c900537d4b06a52", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6605b602f9474e40066a72b58c900537d4b06a52", "committedDate": "2020-09-10T15:23:03Z", "message": "try to modify the basic properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cf47c20c22a3a34c390f3c50077f31db506df84", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/0cf47c20c22a3a34c390f3c50077f31db506df84", "committedDate": "2020-09-10T15:23:03Z", "message": "Fix producer headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e79e815339ca79e22727a46612b2023b8925c37", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/7e79e815339ca79e22727a46612b2023b8925c37", "committedDate": "2020-09-10T15:23:03Z", "message": "Fix exit span end"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c922d40b0428608732fb2c0c802cdf925cf3aa8", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2c922d40b0428608732fb2c0c802cdf925cf3aa8", "committedDate": "2020-09-10T15:23:03Z", "message": "Add context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3bf09e83253f5e61b517e18367f0450bbdcfc5", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/8f3bf09e83253f5e61b517e18367f0450bbdcfc5", "committedDate": "2020-09-10T15:23:03Z", "message": "Update CHANGELOG.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4fbabda4c9767f89c2242cbb539a7cf59ef7d6", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6c4fbabda4c9767f89c2242cbb539a7cf59ef7d6", "committedDate": "2020-09-10T15:23:03Z", "message": "Update supported-technologies.asciidoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26808c19e568cb067b017e463ce19f0ba5b23661", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/26808c19e568cb067b017e463ce19f0ba5b23661", "committedDate": "2020-09-10T15:20:32Z", "message": "Update supported-technologies.asciidoc"}, "afterCommit": {"oid": "6c4fbabda4c9767f89c2242cbb539a7cf59ef7d6", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6c4fbabda4c9767f89c2242cbb539a7cf59ef7d6", "committedDate": "2020-09-10T15:23:03Z", "message": "Update supported-technologies.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667cf11075409b23608e0ef2d02eb1663bcb2d5c", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/667cf11075409b23608e0ef2d02eb1663bcb2d5c", "committedDate": "2020-09-10T20:57:17Z", "message": "Test producer without Rabbit BasicProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796beb72c1fb6863492e71c357e7d1427df0d107", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/796beb72c1fb6863492e71c357e7d1427df0d107", "committedDate": "2020-09-11T17:49:41Z", "message": "Rabbit integhration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "617d34bfd9044622e7e31906bb333d02ef8c6842", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/617d34bfd9044622e7e31906bb333d02ef8c6842", "committedDate": "2020-09-11T18:05:40Z", "message": "Test old rabbit versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5ca334e9c09358314e7ab243145be96e348f3b", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/ea5ca334e9c09358314e7ab243145be96e348f3b", "committedDate": "2020-09-15T15:56:44Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60114b3f419c5cf8e1cac4dcf7b14570655df8a", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e60114b3f419c5cf8e1cac4dcf7b14570655df8a", "committedDate": "2020-09-16T15:19:55Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1060aa63074fb2a4195321dd45c771f691840b95", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1060aa63074fb2a4195321dd45c771f691840b95", "committedDate": "2020-09-24T15:54:28Z", "message": "cosmetic changes on singletons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d3c00d346232128450cc5e98c4241a4d1337b7", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/74d3c00d346232128450cc5e98c4241a4d1337b7", "committedDate": "2020-09-24T15:54:28Z", "message": "add missing package-info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae9ef800e71402ac274363ef9ccd1da9bf898a55", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ae9ef800e71402ac274363ef9ccd1da9bf898a55", "committedDate": "2020-09-24T15:54:28Z", "message": "use separate module for integ. tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0401d1c8b874ccff64e6d27fe7ff6ce99e0d51d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e0401d1c8b874ccff64e6d27fe7ff6ce99e0d51d", "committedDate": "2020-09-24T15:54:28Z", "message": "add logging & make schema validation less verbose"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "434f7bcd47b394bf64d0616b410597e74484337e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/434f7bcd47b394bf64d0616b410597e74484337e", "committedDate": "2020-09-24T15:54:28Z", "message": "make it work again & integ tests for v3,4,5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7fb5cce2c7eaa9af12722fb97817a56b29a3859", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b7fb5cce2c7eaa9af12722fb97817a56b29a3859", "committedDate": "2020-09-24T15:54:28Z", "message": "properly test consumer instr + fix binary headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70814c7c8efc954857df3647d17a2a2e975088c1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/70814c7c8efc954857df3647d17a2a2e975088c1", "committedDate": "2020-09-24T15:54:28Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19f758f66bdbb35336a8d6e6872cef2ad44e8ce", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c19f758f66bdbb35336a8d6e6872cef2ad44e8ce", "committedDate": "2020-09-24T15:54:28Z", "message": "migrate tests to new architecture & remove mock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7da8eb2912f9760ded0ae2078b24644ed7f92f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/eb7da8eb2912f9760ded0ae2078b24644ed7f92f", "committedDate": "2020-09-24T15:54:28Z", "message": "rename for consistency & javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a313cdc132862dd92cccd9d3ccde28639a622cb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3a313cdc132862dd92cccd9d3ccde28639a622cb", "committedDate": "2020-09-24T15:54:28Z", "message": "make channel instrumentation matching faster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "291a9e03fb5eb6b5eeca10c4b820a01665880261", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/291a9e03fb5eb6b5eeca10c4b820a01665880261", "committedDate": "2020-09-24T15:54:28Z", "message": "allow advice class delegation on runtime instr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3848ebe79557ef89f69678351894eec132ed29", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0b3848ebe79557ef89f69678351894eec132ed29", "committedDate": "2020-09-24T15:54:28Z", "message": "revert to using advice class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "075657d5f4f77f5e36dad4a25aba3db21760e536", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/075657d5f4f77f5e36dad4a25aba3db21760e536", "committedDate": "2020-09-24T15:54:28Z", "message": "make instrumentation matching fast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ffa60ed9a48ad362c4a161237869d30d52d837", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b8ffa60ed9a48ad362c4a161237869d30d52d837", "committedDate": "2020-09-24T15:54:28Z", "message": "remove rabbitmq from integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e32a214f3ca107a25102d18ba714484cf9bf1f", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/36e32a214f3ca107a25102d18ba714484cf9bf1f", "committedDate": "2020-09-24T15:54:28Z", "message": "simpler naming & cleanup code & junit5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/24a800d9ef5b50b1f9100a4bcd5b09d18be871b1", "committedDate": "2020-09-24T15:54:28Z", "message": "cleanup & make test pass again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTA4NzY0", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-497508764", "createdAt": "2020-09-28T13:25:56Z", "commit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNTo1NlrOHY9lxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNTo1NlrOHY9lxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNjk2NQ==", "bodyText": "What functionality is impacted by that? Will RabbitMQ be visible as part of the service map?\nWhat's preventing the capturing of the address? Maybe summarize the problems in a follow-up issue.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r495936965", "createdAt": "2020-09-28T13:25:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockReporter.java", "diffHunk": "@@ -92,7 +92,7 @@\n         when(apmServerClient.isAtLeast(any())).thenReturn(true);\n         dslJsonSerializer = new DslJsonSerializer(mock(StacktraceConfiguration.class), apmServerClient);\n         SPAN_TYPES_WITHOUT_ADDRESS = Set.of(\"jms\");\n-        SPAN_ACTIONS_WITHOUT_ADDRESS = Map.of(\"kafka\", Set.of(\"poll\"));\n+        SPAN_ACTIONS_WITHOUT_ADDRESS = Map.of(\"kafka\", Set.of(\"poll\"), \"rabbitmq\", Set.of(\"send\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDcyNTEx", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-500072511", "createdAt": "2020-10-01T07:25:54Z", "commit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoyNTo1NFrOHa9tSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoyNTo1NFrOHa9tSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzNjA0Mg==", "bodyText": "What does that means? How come we don't look for specific types?", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r498036042", "createdAt": "2020-10-01T07:25:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderSetter;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // Instrumentation applied at runtime, thus no need to check type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "517d3c53d965957c3afad753b0320ae93f68fa59", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/517d3c53d965957c3afad753b0320ae93f68fa59", "committedDate": "2020-10-01T08:56:36Z", "message": "add send destination address"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTg2ODU3", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-500186857", "createdAt": "2020-10-01T09:54:22Z", "commit": {"oid": "517d3c53d965957c3afad753b0320ae93f68fa59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c58ab15582060245b383970ee9a608e3d7918e8", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/4c58ab15582060245b383970ee9a608e3d7918e8", "committedDate": "2020-10-01T13:46:20Z", "message": "Update the configuration.asciidoc file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a4857a5aeff32f281f6f22acd5ded75bbb5dc5c", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2a4857a5aeff32f281f6f22acd5ded75bbb5dc5c", "committedDate": "2020-10-02T10:18:26Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e60eb00f115b810009d6d0a93ca95beaeb8a9b6", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/9e60eb00f115b810009d6d0a93ca95beaeb8a9b6", "committedDate": "2020-10-07T08:06:55Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjUyOTk3", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-503652997", "createdAt": "2020-10-07T08:42:57Z", "commit": {"oid": "9e60eb00f115b810009d6d0a93ca95beaeb8a9b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo0Mjo1N1rOHdo1gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo0Mjo1N1rOHdo1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzOTgxMA==", "bodyText": "without this, it works only with advice that is directly within the instrumentation class, and not delegated to it's own class.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r500839810", "createdAt": "2020-10-07T08:42:57Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -683,10 +683,10 @@ public static void ensureInstrumented(Class<?> classToInstrument, Collection<Cla\n                         .with(FailSafeDeclaredMethodsCompiler.INSTANCE);\n                     AgentBuilder agentBuilder = getAgentBuilder(byteBuddy, config, logger, AgentBuilder.DescriptionStrategy.Default.HYBRID, false);\n                     for (Class<? extends ElasticApmInstrumentation> instrumentationClass : instrumentationClasses) {\n+                        ElasticApmInstrumentation apmInstrumentation = instantiate(instrumentationClass);\n                         pluginClassLoaderByAdviceClass.put(\n-                            instrumentationClass.getName(),\n+                            apmInstrumentation.getAdviceClass().getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e60eb00f115b810009d6d0a93ca95beaeb8a9b6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38a760b98eba1af34eaa79da68ff5e054f3963b", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e38a760b98eba1af34eaa79da68ff5e054f3963b", "committedDate": "2020-10-07T08:55:30Z", "message": "Fix parent version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2120c84c7ea286912eda80d8d5bfd8456de81cfd", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2120c84c7ea286912eda80d8d5bfd8456de81cfd", "committedDate": "2020-10-07T09:02:10Z", "message": "update doc with support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b97b110acf42af8c4fbae9f3eb0ffc81d6b6f275", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b97b110acf42af8c4fbae9f3eb0ffc81d6b6f275", "committedDate": "2020-10-07T09:21:44Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef83141a4ae6317fbbdab0d680df84b7905868d4", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/ef83141a4ae6317fbbdab0d680df84b7905868d4", "committedDate": "2020-10-07T13:07:01Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ce87f945b2be2ab476fae68bb6c1d96757d4d4", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e9ce87f945b2be2ab476fae68bb6c1d96757d4d4", "committedDate": "2020-10-07T13:27:21Z", "message": "fix missing copyright notice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d18bccd500b23b1b6323f26d2dacd44b7f9acfd", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/3d18bccd500b23b1b6323f26d2dacd44b7f9acfd", "committedDate": "2020-10-13T15:21:54Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6598d94dda07fff42a0c33b9754775ed8eb50074", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6598d94dda07fff42a0c33b9754775ed8eb50074", "committedDate": "2020-10-21T10:58:30Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15537ecc263134984a1727e71bb80c0579d295f2", "author": {"user": {"login": "hectorespert", "name": "Hector Espert"}}, "url": "https://github.com/elastic/apm-agent-java/commit/15537ecc263134984a1727e71bb80c0579d295f2", "committedDate": "2020-10-26T17:13:43Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/94188302f9e0e399e4c88979f78dbb51f41bbec9", "committedDate": "2020-11-03T09:18:55Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNTI1NDk2", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-522525496", "createdAt": "2020-11-03T14:04:49Z", "commit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDowNDo1MFrOHswMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxNjo1N1rOHtRmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4OTAyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void contextPropagationWithProperties() throws IOException, InterruptedException {\n          \n          \n            \n                public void testContextPropagationWithProperties() throws IOException, InterruptedException {", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r516689025", "createdAt": "2020-11-03T14:04:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ChannelInstrumentationTest extends RabbitMQTest {\n+\n+    @Test\n+    public void contextPropagationWithProperties() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4OTMxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void contextPropagationWithoutProperties() throws IOException, InterruptedException {\n          \n          \n            \n                public void testContextPropagationWithoutProperties() throws IOException, InterruptedException {", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r516689315", "createdAt": "2020-11-03T14:05:16Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ChannelInstrumentationTest extends RabbitMQTest {\n+\n+    @Test\n+    public void contextPropagationWithProperties() throws IOException, InterruptedException {\n+        testContextPropagation(emptyProperties());\n+    }\n+\n+    @Test\n+    public void contextPropagationWithoutProperties() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5NTU3MQ==", "bodyText": "Verify transaction details - type, name.\nVerify context propagation:\n\nboth transactions should have the same trace ID\nreceiver side transaction's parent should be the send span\n\nYou can reuse the utility methods for such checks.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r516695571", "createdAt": "2020-11-03T14:13:38Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ChannelInstrumentationTest extends RabbitMQTest {\n+\n+    @Test\n+    public void contextPropagationWithProperties() throws IOException, InterruptedException {\n+        testContextPropagation(emptyProperties());\n+    }\n+\n+    @Test\n+    public void contextPropagationWithoutProperties() throws IOException, InterruptedException {\n+        testContextPropagation(null);\n+    }\n+\n+    private void testContextPropagation(@Nullable AMQP.BasicProperties properties) throws IOException, InterruptedException {\n+\n+        Connection connection = createConnection();\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel);\n+        String queue = createQueue(channel, exchange);\n+\n+        CountDownLatch messageReceived = new CountDownLatch(1);\n+\n+        channel.basicConsume(queue, new DefaultConsumer(channel) {\n+            @Override\n+            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n+                Map<String, Object> headers = properties.getHeaders();\n+                assertThat(headers).containsKey(\"elastic-apm-traceparent\");\n+                assertThat(headers).containsKey(\"traceparent\");\n+                messageReceived.countDown();\n+            }\n+        });\n+\n+        getTracer().startRootTransaction(getClass().getClassLoader())\n+            .withName(\"Rabbit-Test Transaction\")\n+            .withType(\"request\")\n+            .withResult(\"success\")\n+            .activate();\n+\n+        channel.basicPublish(exchange, ROUTING_KEY, properties, MSG);\n+\n+        getTracer().currentTransaction().deactivate().end();\n+\n+        messageReceived.await(1, TimeUnit.SECONDS);\n+\n+        // 2 transactions, 1 span expected\n+        getReporter().awaitTransactionCount(2);\n+        getReporter().awaitSpanCount(1);\n+\n+        Span span = getReporter().getSpans().get(0);\n+        checkSpan(span, exchange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0NzIwOQ==", "bodyText": "I understand why Consumer instrumentation is dynamic, but why does the Channel instrumentation needs to be dynamic? Isn't there a close number of implementations (all containing the String Channel)?", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r517147209", "createdAt": "2020-11-04T07:42:16Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TextHeaderSetter;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // Instrumentation applied at runtime, thus no need to check type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzNjA0Mg=="}, "originalCommit": {"oid": "24a800d9ef5b50b1f9100a4bcd5b09d18be871b1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMjc2MQ==", "bodyText": "I am not sure I understand why this is required instead of simple type matching for Channel implementations.\nHowever, since we already have this instrumentation, let's use it to store channel destination metadata (address and port) and use it to fill the send span destination details in the basicPublish instrumentation. Looks like very little is left in order to collect this info.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r517232761", "createdAt": "2020-11-04T10:11:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameEndsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+/**\n+ * Instruments\n+ * <ul>\n+ *     <li>{@link Connection#createChannel}</li>\n+ * </ul>\n+ */\n+public class ConnectionInstrumentation extends BaseInstrumentation {\n+\n+    private static final Collection<Class<? extends ElasticApmInstrumentation>> CHANNEL_INSTRUMENTATIONS =\n+        Arrays.<Class<? extends ElasticApmInstrumentation>>asList(\n+            ChannelInstrumentation.BasicPublish.class,\n+            ChannelInstrumentation.BasicConsume.class\n+        );\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        // this fast heuristic works for all implementations within driver\n+        return nameEndsWith(\"Connection\")\n+            .and(nameStartsWith(\"com.rabbitmq.client.impl\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // fine to use super type matching thanks to restricting with pre-filter\n+        return hasSuperType(named(\"com.rabbitmq.client.Connection\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"createChannel\");\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+    public static void onExit(@Nullable @Advice.Thrown Throwable thrown,\n+                              @Advice.Return @Nullable Channel channel) {\n+\n+        if (thrown != null || channel == null) {\n+            return;\n+        }\n+        DynamicTransformer.Accessor.get().ensureInstrumented(channel.getClass(), CHANNEL_INSTRUMENTATIONS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNjMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the producer send message within a traced transaction, a span will be created and a transaction is created when consumes a message.\n          \n          \n            \n            When the producer sends a message within a traced transaction, a send span will be created and the transaction resulting from the message consumption will be correlated to the same trace. When a message is consumed, a transaction is created, regardless if the send action is traced.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r517236308", "createdAt": "2020-11-04T10:16:57Z", "author": {"login": "eyalkoren"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -348,6 +348,12 @@ If both producer and consumer are traced, then distributed tracing is supported,\n side will be a part of the same trace containing the producer side as well. Kafka streams are not traced.\n |1.13.0\n \n+|RabbitMQ\n+|3.x - 5.x\n+|The agent captures RabbitMQ Message sends and consumes.  \n+When the producer send message within a traced transaction, a span will be created and a transaction is created when consumes a message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001244ac1b836aeebc1c9865c3a7816e7b186e5b", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/001244ac1b836aeebc1c9865c3a7816e7b186e5b", "committedDate": "2020-11-04T13:37:11Z", "message": "Update docs/supported-technologies.asciidoc\r\n\r\nimprove documentation\n\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f33080dd91be45e440f6c6150fd45333f063df82", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f33080dd91be45e440f6c6150fd45333f063df82", "committedDate": "2020-11-04T15:45:45Z", "message": "transaction & span naming consistent with Kafka"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0494705582a0f28ea8d2f9b0f731753ea8394f61", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0494705582a0f28ea8d2f9b0f731753ea8394f61", "committedDate": "2020-11-10T15:09:01Z", "message": "post-review changes: add missing features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "791c8891f23237f1736e3de0d45b336369d94635", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/791c8891f23237f1736e3de0d45b336369d94635", "committedDate": "2020-11-10T15:18:40Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81afdf82fba6313b1ac82f54ae462a97947d0552", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/81afdf82fba6313b1ac82f54ae462a97947d0552", "committedDate": "2020-11-12T10:24:50Z", "message": "Merge branch 'master' into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/555c9396fa89cded0b0e195feb71f8ad382d8edc", "committedDate": "2020-11-12T10:29:12Z", "message": "align version with master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzk2ODE5", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-530796819", "createdAt": "2020-11-15T13:03:35Z", "commit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMzowMzozNVrOHzfhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoxODowNVrOHzgEgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NTk0MA==", "bodyText": "I actually prefer the former. This name doesn't indicate it is RabbitMQ.\nMy comment about aligning names was more about the fact that the exchange/queue is missing from the receive transaction. In Kafka, I relied on the class name to indicate it is Kafka, so suggesting:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withName(\"Channel#basicPublish to \")\n          \n          \n            \n                            .withName(\"RabbitMQ message SEND to \")", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523755940", "createdAt": "2020-11-15T13:03:35Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) final String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            final AbstractSpan<?> activeSpan = tracer.getActive();\n+            if (activeSpan == null || isExchangeIgnored(exchange)) {\n+                return null;\n+            }\n+\n+            Span exitSpan = activeSpan.createExitSpan();\n+            if (null == exitSpan) {\n+                return null;\n+            }\n+\n+            exitSpan.withType(\"messaging\")\n+                .withSubtype(\"rabbitmq\")\n+                .withAction(\"send\")\n+                .withName(\"Channel#basicPublish to \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NjA2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withName(\"Consumer#handleDelivery from \").appendToName(exchange);\n          \n          \n            \n                            .withName(\"RabbitMQ message RECEIVE from \").appendToName(exchange);", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523756061", "createdAt": "2020-11-15T13:04:23Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ConsumerInstrumentation.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderGetter;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+/**\n+ * Instruments\n+ * <ul>\n+ *     <li>{@link com.rabbitmq.client.Consumer#handleDelivery}</li>\n+ * </ul>\n+ */\n+public class ConsumerInstrumentation extends BaseInstrumentation {\n+\n+    public ConsumerInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // Instrumentation applied at runtime, thus no need to check type\n+        return any();\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"handleDelivery\");\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader())\n+            .and(classLoaderCanLoadClass(\"com.rabbitmq.client.Consumer\"));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return RabbitConsumerAdvice.class;\n+    }\n+\n+    public static class RabbitConsumerAdvice {\n+\n+        private RabbitConsumerAdvice() {\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onHandleDelivery(@Advice.Origin Class<?> originClazz,\n+                                              @Advice.This Consumer consumer,\n+                                              @Advice.Argument(value = 1) @Nullable Envelope envelope,\n+                                              @Advice.Argument(value = 2) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning() || tracer.currentTransaction() != null) {\n+                return null;\n+            }\n+\n+            String exchange = envelope != null ? envelope.getExchange() : null;\n+            if (exchange == null) {\n+                exchange = \"unknown\";\n+            }\n+\n+            if (isExchangeIgnored(exchange)) {\n+                return null;\n+            }\n+\n+            Transaction transaction = tracer.startChildTransaction(properties, RabbitMQTextHeaderGetter.INSTANCE, originClazz.getClassLoader());\n+            if (transaction == null) {\n+                return null;\n+            }\n+\n+            transaction.withType(\"messaging\")\n+                .withName(\"Consumer#handleDelivery from \").appendToName(exchange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NjY5NA==", "bodyText": "If tracer.currentTransaction() != null, we should probably capture this as a message receive span.\nFor example, when there is an active transaction that is synching on an async read from queue (like in send-reply scenario).\nRequires a test as well. JMS and Kafka rely on send-reply scenarios for that.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523756694", "createdAt": "2020-11-15T13:10:19Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ConsumerInstrumentation.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderGetter;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+/**\n+ * Instruments\n+ * <ul>\n+ *     <li>{@link com.rabbitmq.client.Consumer#handleDelivery}</li>\n+ * </ul>\n+ */\n+public class ConsumerInstrumentation extends BaseInstrumentation {\n+\n+    public ConsumerInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // Instrumentation applied at runtime, thus no need to check type\n+        return any();\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"handleDelivery\");\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader())\n+            .and(classLoaderCanLoadClass(\"com.rabbitmq.client.Consumer\"));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return RabbitConsumerAdvice.class;\n+    }\n+\n+    public static class RabbitConsumerAdvice {\n+\n+        private RabbitConsumerAdvice() {\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onHandleDelivery(@Advice.Origin Class<?> originClazz,\n+                                              @Advice.This Consumer consumer,\n+                                              @Advice.Argument(value = 1) @Nullable Envelope envelope,\n+                                              @Advice.Argument(value = 2) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning() || tracer.currentTransaction() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MDA2MA==", "bodyText": "null value for a key may also be a valuable info:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Object value = entry.getValue();\n          \n          \n            \n                                if (value != null) {\n          \n          \n            \n                                    // headers aren't stored as String instances here\n          \n          \n            \n                                    message.addHeader(entry.getKey(), value.toString());\n          \n          \n            \n                                }\n          \n          \n            \n                                // headers aren't stored as String instances here\n          \n          \n            \n                                message.addHeader(entry.getKey(), String.valueOf(entry.getValue()));", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523760060", "createdAt": "2020-11-15T13:38:15Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/BaseInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import com.rabbitmq.client.AMQP;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Map;\n+\n+public abstract class BaseInstrumentation extends TracerAwareInstrumentation {\n+\n+    private static CoreConfiguration coreConfiguration;\n+    private static MessagingConfiguration messagingConfiguration;\n+\n+    public BaseInstrumentation(ElasticApmTracer tracer) {\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"rabbitmq\");\n+    }\n+\n+    protected static boolean isExchangeIgnored(String exchange) {\n+        return WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), exchange);\n+    }\n+\n+    private static boolean isCaptureHeaders() {\n+        return coreConfiguration.isCaptureHeaders();\n+    }\n+\n+    private static boolean captureHeaderKey(String key) {\n+        return !WildcardMatcher.isAnyMatch(coreConfiguration.getSanitizeFieldNames(), key);\n+    }\n+\n+    protected static void captureMessage(String exchange, @Nullable AMQP.BasicProperties properties, AbstractSpan<?> context) {\n+        Map<String, Object> headers = null;\n+        long age = -1L;\n+        if (null != properties) {\n+\n+            Date timestamp = properties.getTimestamp();\n+            if (timestamp != null) {\n+                long now = System.currentTimeMillis();\n+                long time = timestamp.getTime();\n+                age = time <= now ? (now - time) : 0;\n+            }\n+\n+            headers = properties.getHeaders();\n+        }\n+\n+        Message message = context.getContext().getMessage()\n+            .withQueue(exchange)\n+            .withAge(age);\n+\n+        if (isCaptureHeaders() && headers != null && headers.size() > 0) {\n+            for (Map.Entry<String, Object> entry : headers.entrySet()) {\n+                if (captureHeaderKey(entry.getKey())) {\n+                    Object value = entry.getValue();\n+                    if (value != null) {\n+                        // headers aren't stored as String instances here\n+                        message.addHeader(entry.getKey(), value.toString());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MjkwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void contextPropagationWithProperties() throws IOException, InterruptedException {\n          \n          \n            \n                void contextPropagationWithoutProperties() throws IOException, InterruptedException {", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523762901", "createdAt": "2020-11-15T14:01:32Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/RabbitMQTest.java", "diffHunk": "@@ -0,0 +1,405 @@\n+package co.elastic.apm.agent.rabbitmq;\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.Headers;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.ConnectionFactory;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.RabbitMQContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the whole RabbitMQ instrumentation as a whole, both for transactions and spans\n+ */\n+public class RabbitMQTest extends AbstractInstrumentationTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RabbitMQTest.class);\n+\n+    private static final String IMAGE = \"rabbitmq:3.7-management-alpine\";\n+    private static final RabbitMQContainer container = new RabbitMQContainer(IMAGE);\n+\n+    private static final String ROUTING_KEY = \"test.key\";\n+\n+    private static final byte[] MSG = \"Testing APM!\".getBytes();\n+\n+    @Nullable\n+    private static ConnectionFactory factory;\n+\n+    @Nullable\n+    private Connection connection;\n+\n+    @BeforeAll\n+    static void before() {\n+        container.withLogConsumer(new Slf4jLogConsumer(logger))\n+            .start();\n+\n+        factory = new ConnectionFactory();\n+\n+        factory.setHost(container.getHost());\n+        factory.setPort(container.getAmqpPort());\n+        factory.setUsername(container.getAdminUsername());\n+        factory.setPassword(container.getAdminPassword());\n+    }\n+\n+    @AfterEach\n+    void cleanup() throws IOException {\n+        if (connection != null) {\n+            if (connection.isOpen()) {\n+                logger.info(\"silently closing open connection id = {}\", connection);\n+                connection.close();\n+            }\n+        }\n+    }\n+\n+    @AfterAll\n+    static void after() {\n+        container.close();\n+    }\n+\n+\n+    @Test\n+    void contextPropagationWithProperties() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MjkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void contextPropagationWithoutProperties() throws IOException, InterruptedException {\n          \n          \n            \n                void contextPropagationWithProperties() throws IOException, InterruptedException {", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523762921", "createdAt": "2020-11-15T14:01:43Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/RabbitMQTest.java", "diffHunk": "@@ -0,0 +1,405 @@\n+package co.elastic.apm.agent.rabbitmq;\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.Headers;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.ConnectionFactory;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.RabbitMQContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the whole RabbitMQ instrumentation as a whole, both for transactions and spans\n+ */\n+public class RabbitMQTest extends AbstractInstrumentationTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RabbitMQTest.class);\n+\n+    private static final String IMAGE = \"rabbitmq:3.7-management-alpine\";\n+    private static final RabbitMQContainer container = new RabbitMQContainer(IMAGE);\n+\n+    private static final String ROUTING_KEY = \"test.key\";\n+\n+    private static final byte[] MSG = \"Testing APM!\".getBytes();\n+\n+    @Nullable\n+    private static ConnectionFactory factory;\n+\n+    @Nullable\n+    private Connection connection;\n+\n+    @BeforeAll\n+    static void before() {\n+        container.withLogConsumer(new Slf4jLogConsumer(logger))\n+            .start();\n+\n+        factory = new ConnectionFactory();\n+\n+        factory.setHost(container.getHost());\n+        factory.setPort(container.getAmqpPort());\n+        factory.setUsername(container.getAdminUsername());\n+        factory.setPassword(container.getAdminPassword());\n+    }\n+\n+    @AfterEach\n+    void cleanup() throws IOException {\n+        if (connection != null) {\n+            if (connection.isOpen()) {\n+                logger.info(\"silently closing open connection id = {}\", connection);\n+                connection.close();\n+            }\n+        }\n+    }\n+\n+    @AfterAll\n+    static void after() {\n+        container.close();\n+    }\n+\n+\n+    @Test\n+    void contextPropagationWithProperties() throws IOException, InterruptedException {\n+        performTest(null);\n+    }\n+\n+    @Test\n+    void contextPropagationWithoutProperties() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NDg2NA==", "bodyText": "Or what you did - use com.rabbitmq.client.Channel#getConnection, much simpler \ud83d\ude04", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523764864", "createdAt": "2020-11-15T14:18:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameEndsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+/**\n+ * Instruments\n+ * <ul>\n+ *     <li>{@link Connection#createChannel}</li>\n+ * </ul>\n+ */\n+public class ConnectionInstrumentation extends BaseInstrumentation {\n+\n+    private static final Collection<Class<? extends ElasticApmInstrumentation>> CHANNEL_INSTRUMENTATIONS =\n+        Arrays.<Class<? extends ElasticApmInstrumentation>>asList(\n+            ChannelInstrumentation.BasicPublish.class,\n+            ChannelInstrumentation.BasicConsume.class\n+        );\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        // this fast heuristic works for all implementations within driver\n+        return nameEndsWith(\"Connection\")\n+            .and(nameStartsWith(\"com.rabbitmq.client.impl\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // fine to use super type matching thanks to restricting with pre-filter\n+        return hasSuperType(named(\"com.rabbitmq.client.Connection\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"createChannel\");\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+    public static void onExit(@Nullable @Advice.Thrown Throwable thrown,\n+                              @Advice.Return @Nullable Channel channel) {\n+\n+        if (thrown != null || channel == null) {\n+            return;\n+        }\n+        DynamicTransformer.Accessor.get().ensureInstrumented(channel.getClass(), CHANNEL_INSTRUMENTATIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMjc2MQ=="}, "originalCommit": {"oid": "94188302f9e0e399e4c88979f78dbb51f41bbec9"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODA0MjI5", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-530804229", "createdAt": "2020-11-15T14:35:04Z", "commit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDozNTowNFrOHzgMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1NjowOFrOHzgX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2Njk1NA==", "bodyText": "We should only capture headers on message read when starting a transaction.\nCapturing outgoing headers in not aligned with other messaging plugins nor HTTP client plugins.\n(Similarly if we decide to capture body in the future).", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523766954", "createdAt": "2020-11-15T14:35:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/BaseInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import com.rabbitmq.client.AMQP;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Map;\n+\n+public abstract class BaseInstrumentation extends TracerAwareInstrumentation {\n+\n+    private static CoreConfiguration coreConfiguration;\n+    private static MessagingConfiguration messagingConfiguration;\n+\n+    public BaseInstrumentation(ElasticApmTracer tracer) {\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"rabbitmq\");\n+    }\n+\n+    protected static boolean isExchangeIgnored(String exchange) {\n+        return WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), exchange);\n+    }\n+\n+    private static boolean isCaptureHeaders() {\n+        return coreConfiguration.isCaptureHeaders();\n+    }\n+\n+    private static boolean captureHeaderKey(String key) {\n+        return !WildcardMatcher.isAnyMatch(coreConfiguration.getSanitizeFieldNames(), key);\n+    }\n+\n+    protected static void captureMessage(String exchange, @Nullable AMQP.BasicProperties properties, AbstractSpan<?> context) {\n+        Map<String, Object> headers = null;\n+        long age = -1L;\n+        if (null != properties) {\n+\n+            Date timestamp = properties.getTimestamp();\n+            if (timestamp != null) {\n+                long now = System.currentTimeMillis();\n+                long time = timestamp.getTime();\n+                age = time <= now ? (now - time) : 0;\n+            }\n+\n+            headers = properties.getHeaders();\n+        }\n+\n+        Message message = context.getContext().getMessage()\n+            .withQueue(exchange)\n+            .withAge(age);\n+\n+        if (isCaptureHeaders() && headers != null && headers.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTg1MQ==", "bodyText": "Same version as the common module. This module seems redundant.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r523769851", "createdAt": "2020-11-15T14:56:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-test-5/pom.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>apm-rabbitmq</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.19.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>apm-rabbitmq-test-5</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <version.rabbitmq>5.9.0</version.rabbitmq>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555c9396fa89cded0b0e195feb71f8ad382d8edc"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c238b2521f6149fe7d73320e94fbd097a79e2859", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c238b2521f6149fe7d73320e94fbd097a79e2859", "committedDate": "2020-11-16T08:41:07Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1047ab8873504e84a7238b72c704b221850bf521", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1047ab8873504e84a7238b72c704b221850bf521", "committedDate": "2020-11-16T08:52:20Z", "message": "remove useless rabbitmq 5.x module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d62258f9584edbaeb57c1653d1ea3e738e2d605", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5d62258f9584edbaeb57c1653d1ea3e738e2d605", "committedDate": "2020-11-16T10:46:21Z", "message": "post-review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67cae78deb91b7ea5214aca0c29e2c025eb5ba5a", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/67cae78deb91b7ea5214aca0c29e2c025eb5ba5a", "committedDate": "2020-11-18T12:48:57Z", "message": "change span/transaction naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c35bdb7c87e65cabb05aca8743671b965e359a2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1c35bdb7c87e65cabb05aca8743671b965e359a2", "committedDate": "2020-11-23T16:39:50Z", "message": "add test rpc scenario with default exchange"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b4dd92e700acaa5c8465af0a58e63082ad30bb", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d7b4dd92e700acaa5c8465af0a58e63082ad30bb", "committedDate": "2020-11-24T08:55:01Z", "message": "make test faster by using single connection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9621b18a4ba9a2082b0ba1eca440cc02b80b3a1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c9621b18a4ba9a2082b0ba1eca440cc02b80b3a1", "committedDate": "2020-11-24T14:58:34Z", "message": "instrument poll API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d967551d9648805c70fa1f58a946420aa2b2db6", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9d967551d9648805c70fa1f58a946420aa2b2db6", "committedDate": "2020-11-24T15:14:05Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into rabbitmq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820b2c7a28aa6df0c80fe5689351027c778043a1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/820b2c7a28aa6df0c80fe5689351027c778043a1", "committedDate": "2020-11-26T15:42:13Z", "message": "fix supported version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e16134a919e2969e92e8cd427d29115162e45c", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/21e16134a919e2969e92e8cd427d29115162e45c", "committedDate": "2020-11-26T15:43:39Z", "message": "Revert \"fix supported version\"\n\nThis reverts commit 820b2c7a28aa6df0c80fe5689351027c778043a1."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87bf58ba2cedd999cafcbdcbec77a1dc56c8d0d", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e87bf58ba2cedd999cafcbdcbec77a1dc56c8d0d", "committedDate": "2020-11-26T15:44:53Z", "message": "fix PEBKC error + too fast to push"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd30317efa364ff64fadc91f91923e398560f67", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8bd30317efa364ff64fadc91f91923e398560f67", "committedDate": "2020-12-09T13:37:03Z", "message": "implement changes to better fit spec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7ebeb047dae016bf8319b83e549404cb4d5b6552", "committedDate": "2020-12-09T14:21:22Z", "message": "update doc for rabbitmq & extra polling span checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTc5MDQ2", "url": "https://github.com/elastic/apm-agent-java/pull/1328#pullrequestreview-549179046", "createdAt": "2020-12-10T13:10:14Z", "commit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoxMDoxNFrOIDIe5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MDozOVrOIDSqyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1NTYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withName(\"RabbitMQ message RECEIVE from \").appendToName(normalizeExchangeName(exchange));\n          \n          \n            \n                            .withName(\"RabbitMQ RECEIVE from \").appendToName(normalizeExchangeName(exchange));\n          \n      \n    \n    \n  \n\nMy fault \ud83d\ude0a , but now that we have a spec...", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540155622", "createdAt": "2020-12-10T13:10:14Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ConsumerInstrumentation.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderGetter;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+/**\n+ * Instruments\n+ * <ul>\n+ *     <li>{@link com.rabbitmq.client.Consumer#handleDelivery}</li>\n+ * </ul>\n+ */\n+public class ConsumerInstrumentation extends BaseInstrumentation {\n+\n+    public ConsumerInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        // Instrumentation applied at runtime, thus no need to check type\n+        return any();\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"handleDelivery\");\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader())\n+            .and(classLoaderCanLoadClass(\"com.rabbitmq.client.Consumer\"));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return RabbitConsumerAdvice.class;\n+    }\n+\n+    public static class RabbitConsumerAdvice {\n+\n+        private RabbitConsumerAdvice() {\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onHandleDelivery(@Advice.Origin Class<?> originClazz,\n+                                              @Advice.This Consumer consumer,\n+                                              @Advice.Argument(value = 1) @Nullable Envelope envelope,\n+                                              @Advice.Argument(value = 2) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            String exchange = envelope != null ? envelope.getExchange() : null;\n+\n+            if (null == exchange || isIgnored(exchange)) {\n+                return null;\n+            }\n+\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null) {\n+                return null;\n+            }\n+\n+            transaction = tracer.startChildTransaction(properties, RabbitMQTextHeaderGetter.INSTANCE, originClazz.getClassLoader());\n+            if (transaction == null) {\n+                return null;\n+            }\n+\n+            transaction.withType(\"messaging\")\n+                .withName(\"RabbitMQ message RECEIVE from \").appendToName(normalizeExchangeName(exchange));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3ODk1Mw==", "bodyText": "[minor] why not null for no exchange?", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540278953", "createdAt": "2020-12-10T15:49:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);\n+\n+            exitSpan.propagateTraceContext(headersWithContext, RabbitMQTextHeaderSetter.INSTANCE);\n+\n+            return properties.builder().headers(headersWithContext).build();\n+        }\n+\n+        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class, inline = false)\n+        public static void afterBasicPublish(@Advice.Enter @Nullable Object[] enterArray,\n+                                             @Advice.Thrown @Nullable Throwable throwable) {\n+            if (enterArray != null && enterArray.length >= 2 && enterArray[1] != null) {\n+                Span span = (Span) enterArray[1];\n+                span.captureException(throwable)\n+                    .deactivate()\n+                    .end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicGet}</li>\n+     * </ul>\n+     */\n+    public static class BasicGet extends ChannelInstrumentation {\n+\n+        public BasicGet(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicGet\")\n+                .and(takesArgument(0, String.class));\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) @Nullable String queue) {\n+\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            return createExitSpan(normalizeQueueName(queue));\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Advice.This Channel channel,\n+                                  @Advice.Argument(0) String queue,\n+                                  @Advice.Enter @Nullable Object objSpan,\n+                                  @Advice.Return @Nullable GetResponse rv,\n+                                  @Advice.Thrown @Nullable Throwable thrown) {\n+\n+            if (!(objSpan instanceof Span)) {\n+                return;\n+            }\n+            Span span = (Span) objSpan;\n+\n+            if (isIgnored(queue)) {\n+                // allow to ignore on queue name when there is no answer\n+                span.requestDiscarding();\n+            }\n+\n+            span.withAction(\"poll\")\n+                .withName(\"RabbitMQ POLL from \").appendToName(normalizeQueueName(queue));\n+\n+            Envelope envelope = null;\n+            AMQP.BasicProperties properties = null;\n+\n+            if (rv != null) {\n+                envelope = rv.getEnvelope();\n+                properties = rv.getProps();\n+            }\n+\n+            String exchange = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3OTEzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            }\n          \n          \n            \n                            exchange = envelope.getExchange();\n          \n      \n    \n    \n  \n\nYou never set the exchange on poll spans' destination.resource.\nFixing this does not cause any test failure, so it is not tested as well. I think it is because it is tested with empty exchange or ignore queues only. The test of polling within transaction should contain the exchange.", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540279136", "createdAt": "2020-12-10T15:49:43Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);\n+\n+            exitSpan.propagateTraceContext(headersWithContext, RabbitMQTextHeaderSetter.INSTANCE);\n+\n+            return properties.builder().headers(headersWithContext).build();\n+        }\n+\n+        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class, inline = false)\n+        public static void afterBasicPublish(@Advice.Enter @Nullable Object[] enterArray,\n+                                             @Advice.Thrown @Nullable Throwable throwable) {\n+            if (enterArray != null && enterArray.length >= 2 && enterArray[1] != null) {\n+                Span span = (Span) enterArray[1];\n+                span.captureException(throwable)\n+                    .deactivate()\n+                    .end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicGet}</li>\n+     * </ul>\n+     */\n+    public static class BasicGet extends ChannelInstrumentation {\n+\n+        public BasicGet(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicGet\")\n+                .and(takesArgument(0, String.class));\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) @Nullable String queue) {\n+\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            return createExitSpan(normalizeQueueName(queue));\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Advice.This Channel channel,\n+                                  @Advice.Argument(0) String queue,\n+                                  @Advice.Enter @Nullable Object objSpan,\n+                                  @Advice.Return @Nullable GetResponse rv,\n+                                  @Advice.Thrown @Nullable Throwable thrown) {\n+\n+            if (!(objSpan instanceof Span)) {\n+                return;\n+            }\n+            Span span = (Span) objSpan;\n+\n+            if (isIgnored(queue)) {\n+                // allow to ignore on queue name when there is no answer\n+                span.requestDiscarding();\n+            }\n+\n+            span.withAction(\"poll\")\n+                .withName(\"RabbitMQ POLL from \").appendToName(normalizeQueueName(queue));\n+\n+            Envelope envelope = null;\n+            AMQP.BasicProperties properties = null;\n+\n+            if (rv != null) {\n+                envelope = rv.getEnvelope();\n+                properties = rv.getProps();\n+            }\n+\n+            String exchange = \"\";\n+\n+            if (null != envelope) {\n+                // since exchange name is only known when receiving the message, we might have to discard it\n+                if (isIgnored(envelope.getExchange())) {\n+                    span.requestDiscarding();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4ODA5NA==", "bodyText": "Should contain the exchange in the resource name", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540288094", "createdAt": "2020-12-10T16:00:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/test/java/co/elastic/apm/agent/rabbitmq/RabbitMQTest.java", "diffHunk": "@@ -0,0 +1,672 @@\n+package co.elastic.apm.agent.rabbitmq;\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.context.Headers;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Id;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.ConnectionFactory;\n+import com.rabbitmq.client.DefaultConsumer;\n+import com.rabbitmq.client.Envelope;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.RabbitMQContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.BiConsumer;\n+import java.util.function.Supplier;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the whole RabbitMQ instrumentation as a whole, both for transactions and spans\n+ */\n+public class RabbitMQTest extends AbstractInstrumentationTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RabbitMQTest.class);\n+\n+    private static final String IMAGE = \"rabbitmq:3.7-management-alpine\";\n+    private static final RabbitMQContainer container = new RabbitMQContainer(IMAGE);\n+\n+    private static final String ROUTING_KEY = \"test.key\";\n+\n+    private static final byte[] MSG = \"Testing APM!\".getBytes();\n+\n+    private static ConnectionFactory factory;\n+\n+    private static Connection connection;\n+\n+    @BeforeAll\n+    static void before() {\n+        container.withLogConsumer(new Slf4jLogConsumer(logger))\n+            .start();\n+\n+        factory = new ConnectionFactory();\n+\n+        factory.setHost(container.getHost());\n+        factory.setPort(container.getAmqpPort());\n+        factory.setUsername(container.getAdminUsername());\n+        factory.setPassword(container.getAdminPassword());\n+\n+        try {\n+            connection = factory.newConnection();\n+            Objects.requireNonNull(connection);\n+            logger.info(\"created connection id = {}\", connection);\n+        } catch (IOException | TimeoutException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+\n+    @AfterAll\n+    static void after() throws IOException {\n+        container.close();\n+\n+        if (connection.isOpen()) {\n+            logger.info(\"silently closing open connection id = {}\", connection);\n+            connection.close();\n+        }\n+    }\n+\n+\n+    @Test\n+    void contextPropagationWithoutProperties() throws IOException, InterruptedException {\n+        performTest(null);\n+    }\n+\n+    @Test\n+    void contextPropagationWithProperties() throws IOException, InterruptedException {\n+        performTest(emptyProperties());\n+    }\n+\n+    @Test\n+    void bodyCaptureNotSupported() throws IOException, InterruptedException {\n+        // body capture is not supported because at the RabbitMQ driver level\n+        // the message is provided as a byte array.\n+        CoreConfiguration config = AbstractInstrumentationTest.config.getConfig(CoreConfiguration.class);\n+        when(config.getCaptureBody()).thenReturn(CoreConfiguration.EventType.ALL);\n+\n+        performTest(\n+            emptyProperties(),\n+            false,\n+            randString(\"exchange\"),\n+            (mt, ms) -> {\n+\n+                checkMessageBodyNotCaptured(mt);\n+                checkMessageBodyNotCaptured(ms);\n+            });\n+    }\n+\n+    @Test\n+    void headersCaptureEnabledByDefault() throws IOException, InterruptedException {\n+        Map<String, String> headers = Map.of(\"message-header\", \"header value\");\n+        Map<String, String> headersWithNullValue = new HashMap<>(headers);\n+        headersWithNullValue.put(\"null-header\", null);\n+        testHeadersCapture(headersWithNullValue,\n+            Map.of(\n+                \"message-header\", \"header value\",\n+                \"null-header\", \"null\"),\n+            true);\n+    }\n+\n+    @Test\n+    void headersCaptureDisabled() throws IOException, InterruptedException {\n+        CoreConfiguration coreConfiguration = config.getConfig(CoreConfiguration.class);\n+        when(coreConfiguration.isCaptureHeaders()).thenReturn(false);\n+\n+        testHeadersCapture(Map.of(\"message-header\", \"header value\"), Map.of(), false);\n+    }\n+\n+    @Test\n+    void headersCaptureSanitize() throws IOException, InterruptedException {\n+        CoreConfiguration coreConfiguration = config.getConfig(CoreConfiguration.class);\n+        when(coreConfiguration.getSanitizeFieldNames()).thenReturn(List.of(WildcardMatcher.valueOf(\"secret*\")));\n+\n+        testHeadersCapture(\n+            Map.of(\n+                \"other-header\", \"other-value\",\n+                \"secret-token\", \"secret-value\"),\n+            Map.of(\n+                \"other-header\", \"other-value\"\n+            ), true);\n+    }\n+\n+    private void testHeadersCapture(Map<String, String> headersMap, Map<String, String> expectedHeaders, boolean expectTracingHeaders) throws IOException, InterruptedException {\n+        performTest(\n+            propertiesMap(headersMap),\n+            false,\n+            randString(\"exchange\"),\n+            (mt, ms) -> {\n+                assertThat(ms.getHeaders())\n+                    .describedAs(\"spans should not capture outgoing message headers\")\n+                    .isEmpty();\n+\n+                // only transaction should have headers\n+                checkHeaders(mt, expectedHeaders);\n+                checkDistributedTracingHeaders(mt, expectTracingHeaders);\n+            });\n+    }\n+\n+    @Test\n+    void ignoreExchangeName() throws IOException, InterruptedException {\n+        MessagingConfiguration messagingConfiguration = config.getConfig(MessagingConfiguration.class);\n+        when(messagingConfiguration.getIgnoreMessageQueues()).thenReturn(List.of(WildcardMatcher.valueOf(\"ignored-*\")));\n+\n+        performTest(emptyProperties(), true, randString(\"ignored\"), (mt, ms) -> {\n+        });\n+    }\n+\n+    private void performTest(@Nullable AMQP.BasicProperties properties) throws IOException, InterruptedException {\n+        performTest(properties, false, randString(\"exchange\"), (mt, ms) -> {\n+        });\n+    }\n+\n+    private void performTest(@Nullable AMQP.BasicProperties properties,\n+                             boolean shouldIgnore,\n+                             String channelName,\n+                             BiConsumer<Message, Message> messageCheck) throws IOException, InterruptedException {\n+\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel, channelName);\n+        String queue = createQueue(channel, exchange);\n+\n+        CountDownLatch messageReceived = new CountDownLatch(1);\n+\n+        channel.basicConsume(queue, new DefaultConsumer(channel) {\n+            // using an anonymous class to ensure class matching is properly applied\n+\n+            @Override\n+            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n+                assertThat(properties).isNotNull();\n+                Map<String, Object> headers = properties.getHeaders();\n+\n+                if (shouldIgnore) {\n+                    assertThat(headers).doesNotContainKeys(DISTRIBUTED_TRACING_HEADERS);\n+                } else {\n+                    assertThat(headers).containsKeys(DISTRIBUTED_TRACING_HEADERS);\n+                }\n+\n+                messageReceived.countDown();\n+            }\n+        });\n+\n+        Transaction rootTransaction = startRootTransaction();\n+\n+        channel.basicPublish(exchange, ROUTING_KEY, properties, MSG);\n+\n+        endRootTransaction(rootTransaction);\n+\n+        messageReceived.await(1, TimeUnit.SECONDS);\n+\n+        if (shouldIgnore) {\n+            getReporter().awaitTransactionCount(1);\n+            assertThat(getReporter().getFirstTransaction())\n+                .describedAs(\"only the test root transaction is expected\")\n+                .isSameAs(rootTransaction);\n+\n+            getReporter()\n+                .awaitUntilAsserted(1_000, () -> assertThat(getReporter().getNumReportedTransactions())\n+                    .describedAs(\"no other transaction should be reported\")\n+                    .isEqualTo(1));\n+\n+            getReporter().assertNoSpan(1_000);\n+            return;\n+        }\n+\n+\n+        // 2 transactions, 1 span expected\n+        getReporter().awaitTransactionCount(2);\n+        getReporter().awaitSpanCount(1);\n+\n+        Transaction childTransaction = getNonRootTransaction(rootTransaction, getReporter().getTransactions());\n+\n+        checkTransaction(childTransaction, exchange);\n+\n+        Span span = getReporter().getSpans().get(0);\n+        checkSendSpan(span, exchange);\n+\n+        // span should be child of the first transaction\n+        checkParentChild(rootTransaction, span);\n+        // second transaction should be the child of span\n+        checkParentChild(span, childTransaction);\n+\n+        // common assertions on span & transaction message\n+        Message spanMessage = span.getContext().getMessage();\n+        Message transactionMessage = childTransaction.getContext().getMessage();\n+\n+\n+        // test-specific assertions on captured message\n+        messageCheck.accept(transactionMessage, spanMessage);\n+\n+    }\n+\n+    @Test\n+    void testPollingWithinTransaction() throws IOException {\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel, \"exchange\");\n+\n+        String queueName = randString(\"queue-\");\n+\n+        pollingTest(true, false, () -> declareAndBindQueue(queueName, exchange, channel), exchange);\n+\n+        reporter.awaitTransactionCount(1);\n+        reporter.awaitSpanCount(1);\n+\n+        Span pollingSpan = reporter.getFirstSpan();\n+        checkPollSpan(pollingSpan, queueName);\n+    }\n+\n+    @Test\n+    void testPollingOutsideTransaction() throws IOException {\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel, \"exchange\");\n+\n+        pollingTest(false, false, () -> declareAndBindQueue(\"queue\", exchange, channel), exchange);\n+\n+        reporter.assertNoTransaction(100);\n+        reporter.assertNoSpan(100);\n+    }\n+\n+    @Test\n+    void testPollingIgnoreQueueName() throws IOException {\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel, \"exchange\");\n+\n+        MessagingConfiguration messagingConfiguration = config.getConfig(MessagingConfiguration.class);\n+        when(messagingConfiguration.getIgnoreMessageQueues()).thenReturn(List.of(WildcardMatcher.valueOf(\"ignored-qu*\")));\n+\n+        pollingTest(true, false, () -> declareAndBindQueue(\"ignored-queue\", exchange, channel), exchange);\n+\n+        reporter.awaitTransactionCount(1);\n+        reporter.assertNoSpan(100);\n+    }\n+\n+    @Test\n+    void testPollingIgnoreExchangeName() throws IOException {\n+        Channel channel = connection.createChannel();\n+        String exchange = createExchange(channel, \"ignored-exchange\");\n+\n+        MessagingConfiguration messagingConfiguration = config.getConfig(MessagingConfiguration.class);\n+        when(messagingConfiguration.getIgnoreMessageQueues()).thenReturn(List.of(WildcardMatcher.valueOf(\"ignored-ex*\")));\n+\n+        pollingTest(true, true, () -> declareAndBindQueue(\"queue\", exchange, channel), exchange);\n+\n+        reporter.awaitTransactionCount(1);\n+        reporter.assertNoSpan(100);\n+    }\n+\n+    private String declareAndBindQueue(String queue, String exchange, Channel channel) {\n+        try {\n+            channel.queueDeclare(queue, false, false, false, null);\n+            channel.queueBind(queue, exchange, ROUTING_KEY);\n+            return queue;\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private void pollingTest(boolean withinTransaction, boolean withResult, Supplier<String> createQueue, String exchange) throws IOException {\n+        Channel channel = connection.createChannel();\n+\n+        String queue = createQueue.get();\n+\n+        if (withResult) {\n+            channel.basicPublish(exchange, ROUTING_KEY, emptyProperties(), MSG);\n+        }\n+\n+        Transaction rootTransaction = null;\n+        if (withinTransaction) {\n+            rootTransaction = startRootTransaction();\n+        }\n+\n+        channel.basicGet(queue, true);\n+\n+        if (withinTransaction) {\n+            endRootTransaction(rootTransaction);\n+        }\n+    }\n+\n+    @Test\n+    void testRpcCall() throws IOException, InterruptedException {\n+        // with an RPC call, the message consumer might be executed within the caller thread\n+        // as a result, if there is an active transaction we should create a span for the message processing\n+\n+        Channel channel = connection.createChannel();\n+\n+        // using an empty name for exchange allows to use the default exchange\n+        // which has the property to send message to any queue by name using routing key\n+        final String exchange = \"\";\n+\n+        channel.basicQos(1);\n+\n+        String rpcQueueName = randString(\"rpc_queue\");\n+        channel.queueDeclare(rpcQueueName, false, false, false, null);\n+        // because we use a random queue, we don't have to purge it\n+        // if it was persistent, any previous message should be discarded with a call to 'queuePurge'\n+\n+        // RPC server implementation\n+        String serverConsumerTag = channel.basicConsume(rpcQueueName, false, new DefaultConsumer(channel) {\n+\n+            @Override\n+            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n+\n+                AMQP.BasicProperties replyProperties = new AMQP.BasicProperties\n+                    .Builder()\n+                    .correlationId(properties.getCorrelationId())\n+                    .build();\n+\n+                String reply = \"reply from RPC server: \" + new String(body);\n+                channel.basicPublish(exchange, properties.getReplyTo(), replyProperties, reply.getBytes());\n+                channel.basicAck(envelope.getDeliveryTag(), false);\n+            }\n+        });\n+\n+        final String correlationId = UUID.randomUUID().toString();\n+\n+        String replyQueueName = channel.queueDeclare().getQueue();\n+        AMQP.BasicProperties properties = new AMQP.BasicProperties\n+            .Builder()\n+            .correlationId(correlationId)\n+            .replyTo(replyQueueName)\n+            .build();\n+\n+\n+        Transaction rootTransaction = startRootTransaction();\n+\n+        channel.basicPublish(exchange, rpcQueueName, properties, MSG);\n+\n+        ArrayBlockingQueue<String> rpcResult = new ArrayBlockingQueue<>(1);\n+\n+        // here we could have used the DeliverCallback functional interface added in rabbitmq 5.x driver\n+        // however, internally it only delegates to a regular Consumer\n+        String clientConsumerTag = channel.basicConsume(replyQueueName, true, new DefaultConsumer(channel) {\n+            @Override\n+            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n+                if (correlationId.equals(properties.getCorrelationId())) {\n+                    rpcResult.offer(new String(body));\n+                }\n+            }\n+        });\n+\n+        assertThat(rpcResult.take()).isEqualTo(\"reply from RPC server: Testing APM!\");\n+\n+        endRootTransaction(rootTransaction);\n+\n+        // we need to cancel consumers after usage\n+        channel.basicCancel(clientConsumerTag);\n+        channel.basicCancel(serverConsumerTag);\n+\n+\n+        // we should have captured the following:\n+        // 3 transactions:\n+        // - root transaction\n+        // - transaction for the server-side of the RPC call (processing request)\n+        // - transaction for the client-side of the RPC call (processing response)\n+        // 2 spans:\n+        // - span for sending the RPC request message in the root transaction\n+        // - span for sending the RPC response message in server-side processing\n+\n+        getReporter().awaitTransactionCount(3);\n+        getReporter().awaitSpanCount(2);\n+\n+        // start with the spans as we can identify them using the root transaction\n+        // parent/child relationships are used to find who is who as we don't have other fields like name\n+        // to distinguish them\n+\n+        Span clientRequestRpc = null;\n+        Span serverReplyRpc = null;\n+        for (Span s : getReporter().getSpans()) {\n+            Id spanParentId = s.getTraceContext().getParentId();\n+            if (rootTransaction.getTraceContext().getId().equals(spanParentId)) {\n+                // client request is child of root transaction\n+                assertThat(clientRequestRpc).isNull();\n+                clientRequestRpc = s;\n+            } else {\n+                assertThat(serverReplyRpc).isNull();\n+                serverReplyRpc = s;\n+            }\n+        }\n+        assertThat(clientRequestRpc).isNotNull();\n+        assertThat(serverReplyRpc).isNotNull();\n+\n+        Transaction serverSideRpc = null;\n+        Transaction clientSideRpc = null;\n+        for (Transaction t : getReporter().getTransactions()) {\n+            if (t != rootTransaction) {\n+                Id transactionParentId = t.getTraceContext().getParentId();\n+                if (clientRequestRpc.getTraceContext().getId().equals(transactionParentId)) {\n+                    assertThat(serverSideRpc).isNull();\n+                    serverSideRpc = t;\n+                } else {\n+                    assertThat(clientSideRpc).isNull();\n+                    clientSideRpc = t;\n+                }\n+            }\n+        }\n+        assertThat(serverSideRpc).isNotNull();\n+        assertThat(clientSideRpc).isNotNull();\n+\n+        checkSendSpan(clientRequestRpc, exchange);\n+        checkParentChild(rootTransaction, clientRequestRpc);\n+\n+        checkTransaction(serverSideRpc, exchange);\n+        assertThat(serverSideRpc.getNameAsString()).isEqualTo(\"RabbitMQ message RECEIVE from <default>\");\n+        checkParentChild(clientRequestRpc, serverSideRpc);\n+\n+        checkSendSpan(serverReplyRpc, exchange);\n+        checkParentChild(serverSideRpc, serverReplyRpc);\n+\n+        checkTransaction(clientSideRpc, exchange);\n+        checkParentChild(serverReplyRpc, clientSideRpc);\n+\n+    }\n+\n+    private void endRootTransaction(Transaction rootTransaction) {\n+        rootTransaction.deactivate().end();\n+    }\n+\n+    private Transaction startRootTransaction() {\n+        return getTracer().startRootTransaction(getClass().getClassLoader())\n+            .withName(\"Rabbit-Test Root Transaction\")\n+            .withType(\"request\")\n+            .withResult(\"success\")\n+            .activate();\n+    }\n+\n+    private static Transaction getNonRootTransaction(Transaction rootTransaction, List<Transaction> transactions) {\n+        Transaction childTransaction = null;\n+        for (Transaction t : transactions) {\n+            if (t != rootTransaction) {\n+                assertThat(childTransaction).isNull();\n+                childTransaction = t;\n+            }\n+        }\n+        assertThat(childTransaction).isNotNull();\n+        return childTransaction;\n+    }\n+\n+    private String createQueue(Channel channel, String exchange) throws IOException {\n+        String queueName = channel.queueDeclare().getQueue();\n+        channel.queueBind(queueName, exchange, ROUTING_KEY);\n+        return queueName;\n+    }\n+\n+    private String createExchange(Channel channel, String exchangeName) throws IOException {\n+        channel.exchangeDeclare(exchangeName, \"direct\", false);\n+        return exchangeName;\n+    }\n+\n+    private static String randString(String prefix) {\n+        return String.format(\"%s-%08x\", prefix, System.currentTimeMillis());\n+    }\n+\n+    private AMQP.BasicProperties propertiesMap(Map<String, String> map) {\n+        // doing a dumb copy to convert Map<String,String> to Map<String,Object>\n+        Map<String, Object> objectMap = new HashMap<>();\n+        for (Map.Entry<String, String> entry : map.entrySet()) {\n+            objectMap.put(entry.getKey(), entry.getValue());\n+        }\n+        return new AMQP.BasicProperties.Builder()\n+            .headers(objectMap)\n+            .build();\n+    }\n+\n+    private AMQP.BasicProperties emptyProperties() {\n+        return new AMQP.BasicProperties.Builder().headers(new HashMap<>()).build();\n+    }\n+\n+    private static void checkParentChild(AbstractSpan<?> parent, AbstractSpan<?> child) {\n+        assertThat(child.getTraceContext().getParentId())\n+            .describedAs(\"child (%s) should be a child of (%s)\", child, parent)\n+            .isEqualTo(parent.getTraceContext().getId());\n+\n+        assertThat(child.getTraceContext().getTraceId())\n+            .describedAs(\"child (%s) should have same trace ID as parent (%s)\", child, parent)\n+            .isEqualTo(parent.getTraceContext().getTraceId());\n+    }\n+\n+    private static void checkTransaction(Transaction transaction, String exchange) {\n+        assertThat(transaction.getType()).isEqualTo(\"messaging\");\n+        assertThat(transaction.getNameAsString())\n+            .isEqualTo(\"RabbitMQ message RECEIVE from %s\", exchange.isEmpty() ? \"<default>\" : exchange);\n+        assertThat(transaction.getFrameworkName()).isEqualTo(\"RabbitMQ\");\n+\n+        checkMessage(transaction.getContext().getMessage(), exchange);\n+    }\n+\n+    private static void checkMessage(Message message, String queueName) {\n+        assertThat(message.getQueueName()).isEqualTo(queueName);\n+\n+        // RabbitMQ does not provide timestamp by default\n+        assertThat(message.getAge()).isLessThan(0);\n+    }\n+\n+\n+    private static void checkMessageBodyNotCaptured(Message message) {\n+        assertThat(message.getBodyForRead()).describedAs(\"body capture isn't supported\").isNull();\n+    }\n+\n+    private static final String[] DISTRIBUTED_TRACING_HEADERS = {\n+        \"elastic-apm-traceparent\",\n+        \"tracestate\",\n+        \"traceparent\"\n+    };\n+\n+    private static void checkDistributedTracingHeaders(Message message, boolean expectTracingHeaders) {\n+        HashMap<String, String> headersMap = getHeadersMap(message);\n+        if (expectTracingHeaders) {\n+            assertThat(headersMap)\n+                .describedAs(\"distributed tracing headers should be captured\")\n+                .containsKeys(DISTRIBUTED_TRACING_HEADERS);\n+        } else {\n+            assertThat(headersMap)\n+                .describedAs(\"distributed tracing headers aren't expected\")\n+                .doesNotContainKeys(DISTRIBUTED_TRACING_HEADERS);\n+        }\n+    }\n+\n+    private static void checkHeaders(Message message, Map<String, String> expectedHeaders) {\n+        HashMap<String, String> headersMap = getHeadersMap(message);\n+        for (String key : DISTRIBUTED_TRACING_HEADERS) {\n+            headersMap.remove(key);\n+        }\n+        assertThat(headersMap)\n+            .describedAs(\"should contain entries of %s\", expectedHeaders)\n+            .containsAllEntriesOf(expectedHeaders);\n+    }\n+\n+    private static HashMap<String, String> getHeadersMap(Message message) {\n+        Headers headers = message.getHeaders();\n+        HashMap<String, String> headersMap = new HashMap<>();\n+        headers.forEach(h -> headersMap.put(h.getKey(), h.getValue().toString()));\n+        return headersMap;\n+    }\n+\n+    private static void checkSendSpan(Span span, String exchange) {\n+        String expectedResource = exchange.isEmpty() ? \"rabbitmq\" : String.format(\"rabbitmq/%s\", exchange);\n+        checkSpanCommon(span,\n+            \"send\",\n+            String.format(\"RabbitMQ SEND to %s\", exchange.isEmpty() ? \"<default>\" : exchange),\n+            exchange,\n+            expectedResource);\n+\n+    }\n+\n+    private static void checkPollSpan(Span span, String queue){\n+        checkSpanCommon(span,\n+            \"poll\",\n+            String.format(\"RabbitMQ POLL from %s\", queue),\n+            queue,\n+            \"rabbitmq\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 648}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNTEyMg==", "bodyText": "[minor]\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // tracer disabled or ignored exchange\n          \n          \n            \n                            // tracer disabled or ignored exchange or this is nested within another exit span", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540305122", "createdAt": "2020-12-10T16:21:55Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwODk2Mg==", "bodyText": "[minor]\nIf currentHeaders == null, create only one instead of two", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540308962", "createdAt": "2020-12-10T16:26:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNTA4MA==", "bodyText": "[minor]\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Span createExitSpan(@Nullable String exchangeOrQueue) {\n          \n          \n            \n                private static Span createAndActivateExitSpan(@Nullable String exchangeOrQueue) {", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540315080", "createdAt": "2020-12-10T16:33:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);\n+\n+            exitSpan.propagateTraceContext(headersWithContext, RabbitMQTextHeaderSetter.INSTANCE);\n+\n+            return properties.builder().headers(headersWithContext).build();\n+        }\n+\n+        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class, inline = false)\n+        public static void afterBasicPublish(@Advice.Enter @Nullable Object[] enterArray,\n+                                             @Advice.Thrown @Nullable Throwable throwable) {\n+            if (enterArray != null && enterArray.length >= 2 && enterArray[1] != null) {\n+                Span span = (Span) enterArray[1];\n+                span.captureException(throwable)\n+                    .deactivate()\n+                    .end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicGet}</li>\n+     * </ul>\n+     */\n+    public static class BasicGet extends ChannelInstrumentation {\n+\n+        public BasicGet(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicGet\")\n+                .and(takesArgument(0, String.class));\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) @Nullable String queue) {\n+\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            return createExitSpan(normalizeQueueName(queue));\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Advice.This Channel channel,\n+                                  @Advice.Argument(0) String queue,\n+                                  @Advice.Enter @Nullable Object objSpan,\n+                                  @Advice.Return @Nullable GetResponse rv,\n+                                  @Advice.Thrown @Nullable Throwable thrown) {\n+\n+            if (!(objSpan instanceof Span)) {\n+                return;\n+            }\n+            Span span = (Span) objSpan;\n+\n+            if (isIgnored(queue)) {\n+                // allow to ignore on queue name when there is no answer\n+                span.requestDiscarding();\n+            }\n+\n+            span.withAction(\"poll\")\n+                .withName(\"RabbitMQ POLL from \").appendToName(normalizeQueueName(queue));\n+\n+            Envelope envelope = null;\n+            AMQP.BasicProperties properties = null;\n+\n+            if (rv != null) {\n+                envelope = rv.getEnvelope();\n+                properties = rv.getProps();\n+            }\n+\n+            String exchange = \"\";\n+\n+            if (null != envelope) {\n+                // since exchange name is only known when receiving the message, we might have to discard it\n+                if (isIgnored(envelope.getExchange())) {\n+                    span.requestDiscarding();\n+                }\n+            }\n+            captureMessage(queue, properties, span);\n+            captureDestination(exchange, channel, span);\n+\n+            span.captureException(thrown)\n+                .deactivate()\n+                .end();\n+        }\n+    }\n+\n+    /**\n+     * Creates a messaging exit span\n+     *\n+     * @param exchangeOrQueue exchange or queue name\n+     * @return exit span if applicable, {@literal null} otherwise\n+     */\n+    @Nullable\n+    private static Span createExitSpan(@Nullable String exchangeOrQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODE1NQ==", "bodyText": "Include default as well", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540318155", "createdAt": "2020-12-10T16:36:24Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);\n+\n+            exitSpan.propagateTraceContext(headersWithContext, RabbitMQTextHeaderSetter.INSTANCE);\n+\n+            return properties.builder().headers(headersWithContext).build();\n+        }\n+\n+        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class, inline = false)\n+        public static void afterBasicPublish(@Advice.Enter @Nullable Object[] enterArray,\n+                                             @Advice.Thrown @Nullable Throwable throwable) {\n+            if (enterArray != null && enterArray.length >= 2 && enterArray[1] != null) {\n+                Span span = (Span) enterArray[1];\n+                span.captureException(throwable)\n+                    .deactivate()\n+                    .end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicGet}</li>\n+     * </ul>\n+     */\n+    public static class BasicGet extends ChannelInstrumentation {\n+\n+        public BasicGet(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicGet\")\n+                .and(takesArgument(0, String.class));\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) @Nullable String queue) {\n+\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            return createExitSpan(normalizeQueueName(queue));\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Advice.This Channel channel,\n+                                  @Advice.Argument(0) String queue,\n+                                  @Advice.Enter @Nullable Object objSpan,\n+                                  @Advice.Return @Nullable GetResponse rv,\n+                                  @Advice.Thrown @Nullable Throwable thrown) {\n+\n+            if (!(objSpan instanceof Span)) {\n+                return;\n+            }\n+            Span span = (Span) objSpan;\n+\n+            if (isIgnored(queue)) {\n+                // allow to ignore on queue name when there is no answer\n+                span.requestDiscarding();\n+            }\n+\n+            span.withAction(\"poll\")\n+                .withName(\"RabbitMQ POLL from \").appendToName(normalizeQueueName(queue));\n+\n+            Envelope envelope = null;\n+            AMQP.BasicProperties properties = null;\n+\n+            if (rv != null) {\n+                envelope = rv.getEnvelope();\n+                properties = rv.getProps();\n+            }\n+\n+            String exchange = \"\";\n+\n+            if (null != envelope) {\n+                // since exchange name is only known when receiving the message, we might have to discard it\n+                if (isIgnored(envelope.getExchange())) {\n+                    span.requestDiscarding();\n+                }\n+            }\n+            captureMessage(queue, properties, span);\n+            captureDestination(exchange, channel, span);\n+\n+            span.captureException(thrown)\n+                .deactivate()\n+                .end();\n+        }\n+    }\n+\n+    /**\n+     * Creates a messaging exit span\n+     *\n+     * @param exchangeOrQueue exchange or queue name\n+     * @return exit span if applicable, {@literal null} otherwise\n+     */\n+    @Nullable\n+    private static Span createExitSpan(@Nullable String exchangeOrQueue) {\n+        AbstractSpan<?> context = tracer.getActive();\n+        if (exchangeOrQueue == null || context == null || isIgnored(exchangeOrQueue)) {\n+            return null;\n+        }\n+        Span exitSpan = context.createExitSpan();\n+        if (exitSpan == null) {\n+            return null;\n+        }\n+\n+        return exitSpan.activate()\n+            .withType(\"messaging\")\n+            .withSubtype(\"rabbitmq\");\n+    }\n+\n+    private static void captureDestination(String exchange, Channel channel, Span span) {\n+        Destination destination = span.getContext().getDestination();\n+\n+        Destination.Service service = destination.getService();\n+        service.withType(\"messaging\")\n+            .withName(\"rabbitmq\")\n+            .withResource(\"rabbitmq\");\n+\n+        if (!exchange.isEmpty()) {\n+            // include non-default exchange name in resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODY1Nw==", "bodyText": "Use the normalized exchange name", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540318657", "createdAt": "2020-12-10T16:36:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxOTAwNw==", "bodyText": "Use the normalized exchange name", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540319007", "createdAt": "2020-12-10T16:37:13Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-rabbitmq/apm-rabbitmq-plugin/src/main/java/co/elastic/apm/agent/rabbitmq/ChannelInstrumentation.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.rabbitmq;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Destination;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.rabbitmq.header.RabbitMQTextHeaderSetter;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import com.rabbitmq.client.Consumer;\n+import com.rabbitmq.client.Envelope;\n+import com.rabbitmq.client.GetResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Instruments implementations of {@link com.rabbitmq.client.Channel}\n+ */\n+public abstract class ChannelInstrumentation extends BaseInstrumentation {\n+\n+    public ChannelInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameStartsWith(\"com.rabbitmq.client\")\n+            .and(nameContains(\"Channel\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader()).and(classLoaderCanLoadClass(\"com.rabbitmq.client.Channel\"));\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicConsume} to ensure instrumentation of {@link com.rabbitmq.client.Consumer} implementation</li>\n+     * </ul>\n+     */\n+    public static class BasicConsume extends ChannelInstrumentation {\n+\n+        public static final Collection<Class<? extends ElasticApmInstrumentation>> CONSUMER_INSTRUMENTATION =\n+            Collections.<Class<? extends ElasticApmInstrumentation>>singleton(ConsumerInstrumentation.class);\n+\n+        public BasicConsume(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicConsume\")\n+                .and(takesArguments(7))\n+                .and(takesArgument(6, named(\"com.rabbitmq.client.Consumer\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onEnter(@Advice.This Channel channel,\n+                                   @Advice.Argument(6) @Nullable Consumer consumer) {\n+            if (consumer == null) {\n+                return;\n+            }\n+\n+            DynamicTransformer.Accessor.get().ensureInstrumented(consumer.getClass(), CONSUMER_INSTRUMENTATION);\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicPublish}</li>\n+     * </ul>\n+     */\n+    public static class BasicPublish extends ChannelInstrumentation {\n+\n+        public BasicPublish(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicPublish\")\n+                .and(takesArguments(6));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        @AssignTo(arguments = @AssignTo.Argument(index = 0, value = 4))\n+        @Nullable\n+        public static Object[] onBasicPublish(@Advice.This Channel channel,\n+                                              @Advice.Argument(0) @Nullable String exchange,\n+                                              @Advice.Argument(4) @Nullable AMQP.BasicProperties properties) {\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            Span exitSpan = createExitSpan(exchange);\n+            if (exitSpan == null) {\n+                // tracer disabled or ignored exchange\n+                return null;\n+            }\n+\n+            exitSpan.withAction(\"send\")\n+                .withName(\"RabbitMQ SEND to \").appendToName(normalizeExchangeName(exchange));\n+\n+            properties = propagateTraceContext(exitSpan, properties);\n+\n+            captureMessage(exchange, properties, exitSpan);\n+            captureDestination(exchange, channel, exitSpan);\n+\n+            return new Object[]{properties, exitSpan};\n+        }\n+\n+        private static AMQP.BasicProperties propagateTraceContext(Span exitSpan,\n+                                                                  @Nullable AMQP.BasicProperties originalBasicProperties) {\n+            AMQP.BasicProperties properties = originalBasicProperties;\n+            if (properties == null) {\n+                properties = new AMQP.BasicProperties();\n+            }\n+\n+            Map<String, Object> currentHeaders = properties.getHeaders();\n+            if (currentHeaders == null) {\n+                currentHeaders = new HashMap<>();\n+            }\n+\n+            HashMap<String, Object> headersWithContext = new HashMap<>(currentHeaders);\n+\n+            exitSpan.propagateTraceContext(headersWithContext, RabbitMQTextHeaderSetter.INSTANCE);\n+\n+            return properties.builder().headers(headersWithContext).build();\n+        }\n+\n+        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class, inline = false)\n+        public static void afterBasicPublish(@Advice.Enter @Nullable Object[] enterArray,\n+                                             @Advice.Thrown @Nullable Throwable throwable) {\n+            if (enterArray != null && enterArray.length >= 2 && enterArray[1] != null) {\n+                Span span = (Span) enterArray[1];\n+                span.captureException(throwable)\n+                    .deactivate()\n+                    .end();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments\n+     * <ul>\n+     *     <li>{@link com.rabbitmq.client.Channel#basicGet}</li>\n+     * </ul>\n+     */\n+    public static class BasicGet extends ChannelInstrumentation {\n+\n+        public BasicGet(ElasticApmTracer tracer) {\n+            super(tracer);\n+        }\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"basicGet\")\n+                .and(takesArgument(0, String.class));\n+        }\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onEnter(@Advice.Argument(0) @Nullable String queue) {\n+\n+            if (!tracer.isRunning()) {\n+                return null;\n+            }\n+\n+            return createExitSpan(normalizeQueueName(queue));\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onExit(@Advice.This Channel channel,\n+                                  @Advice.Argument(0) String queue,\n+                                  @Advice.Enter @Nullable Object objSpan,\n+                                  @Advice.Return @Nullable GetResponse rv,\n+                                  @Advice.Thrown @Nullable Throwable thrown) {\n+\n+            if (!(objSpan instanceof Span)) {\n+                return;\n+            }\n+            Span span = (Span) objSpan;\n+\n+            if (isIgnored(queue)) {\n+                // allow to ignore on queue name when there is no answer\n+                span.requestDiscarding();\n+            }\n+\n+            span.withAction(\"poll\")\n+                .withName(\"RabbitMQ POLL from \").appendToName(normalizeQueueName(queue));\n+\n+            Envelope envelope = null;\n+            AMQP.BasicProperties properties = null;\n+\n+            if (rv != null) {\n+                envelope = rv.getEnvelope();\n+                properties = rv.getProps();\n+            }\n+\n+            String exchange = \"\";\n+\n+            if (null != envelope) {\n+                // since exchange name is only known when receiving the message, we might have to discard it\n+                if (isIgnored(envelope.getExchange())) {\n+                    span.requestDiscarding();\n+                }\n+            }\n+            captureMessage(queue, properties, span);\n+            captureDestination(exchange, channel, span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMTgyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |1.19.1\n          \n          \n            \n            |1.20.0", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540321823", "createdAt": "2020-12-10T16:39:54Z", "author": {"login": "eyalkoren"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -356,8 +356,22 @@ If both producer and consumer are traced, then distributed tracing is supported,\n side will be a part of the same trace containing the producer side as well. Kafka streams are not traced.\n |1.13.0\n \n+|RabbitMQ\n+|3.x - 5.x\n+|The agent captures RabbitMQ Message sends, consumption and polling.\n+When the producer sends a message within a traced transaction, a send span will be created and the transaction resulting\n+from the message consumption will be correlated to the same trace.\n+When a message is consumed, a transaction is created, regardless if the send action is traced.\n+When a message is polled, a span is created for the polling operation and optionally have message fields if a message\n+has been returned.\n+|1.19.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMjUwNw==", "bodyText": "Always with the exchange, normalized when it is the default", "url": "https://github.com/elastic/apm-agent-java/pull/1328#discussion_r540322507", "createdAt": "2020-12-10T16:40:39Z", "author": {"login": "eyalkoren"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -356,8 +356,22 @@ If both producer and consumer are traced, then distributed tracing is supported,\n side will be a part of the same trace containing the producer side as well. Kafka streams are not traced.\n |1.13.0\n \n+|RabbitMQ\n+|3.x - 5.x\n+|The agent captures RabbitMQ Message sends, consumption and polling.\n+When the producer sends a message within a traced transaction, a send span will be created and the transaction resulting\n+from the message consumption will be correlated to the same trace.\n+When a message is consumed, a transaction is created, regardless if the send action is traced.\n+When a message is polled, a span is created for the polling operation and optionally have message fields if a message\n+has been returned.\n+|1.19.1\n+\n |===\n \n+For RabbitMQ:\n+\n+- `context.message.queue.name` field will contain queue name when using polling, exchange name otherwise.\n+- `context.message.destination.resource` field will contain `rabbitmq` for the default exchange and `rabbitmq/XXX` for named exchanges", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebeb047dae016bf8319b83e549404cb4d5b6552"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ced417d868d58a134ce0263d2e05c68c67b090", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/66ced417d868d58a134ce0263d2e05c68c67b090", "committedDate": "2020-12-15T10:32:30Z", "message": "post-review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea007e04439c6796ab7c4e36097352bae364e253", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ea007e04439c6796ab7c4e36097352bae364e253", "committedDate": "2020-12-22T12:28:37Z", "message": "avoid NPE on single test execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff138983b9629422ea6b45ce2dc3ebd71054871", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1ff138983b9629422ea6b45ce2dc3ebd71054871", "committedDate": "2020-12-22T12:29:10Z", "message": "Merge branch 'master' of github.com:elastic/apm-agent-java into rabbitmq"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}