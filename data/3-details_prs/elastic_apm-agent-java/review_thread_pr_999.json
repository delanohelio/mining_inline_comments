{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NzI5NDU0", "number": 999, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozODowNFrODZ2pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxMzo1N1rODZ3gJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM2MzM5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jms-plugin/src/main/java/co/elastic/apm/agent/jms/JmsInstrumentationHelperImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozODowNFrOFgeaCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzoxNzowM1rOFg0ldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjkzOQ==", "bodyText": "does it means that we will provide tracing headers even if the transaction itself is not being sampled ?\nIf so, does it means that we need to make sure that all instrumentations that might propagate context should still work even if sampling is not enabled ?", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369596939", "createdAt": "2020-01-22T14:38:04Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jms-plugin/src/main/java/co/elastic/apm/agent/jms/JmsInstrumentationHelperImpl.java", "diffHunk": "@@ -97,8 +97,8 @@ public Span startJmsSendSpan(Destination destination, Message message) {\n             .activate();\n \n         try {\n+            message.setStringProperty(JMS_TRACE_PARENT_PROPERTY, span.getTraceContext().getOutgoingTraceParentHeader().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk2MDMxMQ==", "bodyText": "YES! If we don't, it is a bug as we are expected to (which is what this PR is about). This is what we use the flags part of the traceparent header- it is how we tell downstream transactions whether they should be sampled-in or out.", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369960311", "createdAt": "2020-01-23T07:17:03Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jms-plugin/src/main/java/co/elastic/apm/agent/jms/JmsInstrumentationHelperImpl.java", "diffHunk": "@@ -97,8 +97,8 @@ public Span startJmsSendSpan(Destination destination, Message message) {\n             .activate();\n \n         try {\n+            message.setStringProperty(JMS_TRACE_PARENT_PROPERTY, span.getTraceContext().getOutgoingTraceParentHeader().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjkzOQ=="}, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDQ4Njc3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTowOTozMFrOFgflqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzowOTo1MFrOFg0fAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNjI5Nw==", "bodyText": "why do we need to reset the reporter here ?", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369616297", "createdAt": "2020-01-22T15:09:30Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "diffHunk": "@@ -208,6 +219,25 @@ public void testQueueSendReceiveOnNonTracedThread() throws Exception {\n         doTestSendReceiveOnNonTracedThread(() -> brokerFacade.receive(queue, 10), queue, false);\n     }\n \n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testQueueSendReceiveOnNonTracedThread_NonSampledTransaction() throws Exception {\n+        final Queue queue = createTestQueue();\n+\n+        // End current transaction and start a non-sampled one\n+        tracer.currentTransaction().deactivate().end();\n+        reporter.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1ODY1OA==", "bodyText": "Because we end a transaction just above, which means it is reported, but soon after I use reporter.getFirstTransaction(), which I want to return my tested transaction and not this one", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369958658", "createdAt": "2020-01-23T07:09:50Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "diffHunk": "@@ -208,6 +219,25 @@ public void testQueueSendReceiveOnNonTracedThread() throws Exception {\n         doTestSendReceiveOnNonTracedThread(() -> brokerFacade.receive(queue, 10), queue, false);\n     }\n \n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testQueueSendReceiveOnNonTracedThread_NonSampledTransaction() throws Exception {\n+        final Queue queue = createTestQueue();\n+\n+        // End current transaction and start a non-sampled one\n+        tracer.currentTransaction().deactivate().end();\n+        reporter.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNjI5Nw=="}, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDUwMzQxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxMzo1N1rOFgfwHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzoxMjo1NFrOFg0hlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxODk3Mg==", "bodyText": "what about having the annotation directly on isSampled method in order to avoid duplicates of //noinspection ConstantConditions ?", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369618972", "createdAt": "2020-01-22T15:13:57Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "diffHunk": "@@ -386,7 +416,10 @@ private void verifyQueueSendReceiveOnNonTracedThread(Queue queue)\n         Message incomingMessage = resultQ.poll(2, TimeUnit.SECONDS);\n         assertThat(incomingMessage).isNotNull();\n         verifyMessage(message, incomingMessage);\n-        verifySendReceiveOnNonTracedThread(queue.getQueueName(), outgoingMessage);\n+        //noinspection ConstantConditions\n+        if (tracer.currentTransaction().isSampled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk1OTMxNw==", "bodyText": "Not sure what you mean. This removes the warning about tracer.currentTransaction() potentially returning null", "url": "https://github.com/elastic/apm-agent-java/pull/999#discussion_r369959317", "createdAt": "2020-01-23T07:12:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jms-plugin/src/test/java/co/elastic/apm/agent/jms/JmsInstrumentationIT.java", "diffHunk": "@@ -386,7 +416,10 @@ private void verifyQueueSendReceiveOnNonTracedThread(Queue queue)\n         Message incomingMessage = resultQ.poll(2, TimeUnit.SECONDS);\n         assertThat(incomingMessage).isNotNull();\n         verifyMessage(message, incomingMessage);\n-        verifySendReceiveOnNonTracedThread(queue.getQueueName(), outgoingMessage);\n+        //noinspection ConstantConditions\n+        if (tracer.currentTransaction().isSampled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxODk3Mg=="}, "originalCommit": {"oid": "684a7e3d41c684fd57bc2fae4faac33cd70ad7dd"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 394, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}