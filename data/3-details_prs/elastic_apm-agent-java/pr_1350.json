{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDA3MTQ2", "number": 1350, "title": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set", "bodyText": "What does this PR do?\n\nAdds elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the java.io.tmpdir system property which would apply to the system being profiled as well. If not set, the java.io.tmpdir system property is used as before.\nWhen loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\nAdd unit tests which cover this configurable behaviour\nUpdate changelog and configuration docs\n\nFixes #1226\nChecklist\n\n\n This is an enhancement of existing features, or a new feature in existing plugins\n\n I have updated CHANGELOG.asciidoc\n I have added tests that prove my fix is effective or that my feature works\n Added an API method or config option? Document in which version this will be introduced\n I have made corresponding changes to the documentation\n\n\n This is a bugfix\n\n I have updated CHANGELOG.asciidoc\n I have added tests that would fail without this fix\n\n\n This is a new plugin\n\n I have updated CHANGELOG.asciidoc\n My code follows the style guidelines of this project\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated supported-technologies.asciidoc\n Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? Describe how you made sure that old, non-supported versions are not instrumented by accident.\n\n\n This is something else\n\n I have updated CHANGELOG.asciidoc", "createdAt": "2020-08-19T19:34:01Z", "url": "https://github.com/elastic/apm-agent-java/pull/1350", "merged": true, "mergeCommit": {"oid": "951b5fff8863a7d1a0816c43b16ac920006e315c"}, "closed": true, "closedAt": "2020-08-20T14:20:22Z", "author": {"login": "marcjay"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAgx1nAH2gAyNDcwNDA3MTQ2Ojc0ZjFjMDU3MGY4ZjAzMTA5MWZhZWNmZjgwZTY5YTZiNDM5YjBlZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAw85wAFqTQ3MTY2MTk2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "committedDate": "2020-08-19T19:28:38Z", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebd3c243329dff6f7ad081b239a9f8655c09c60b", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/ebd3c243329dff6f7ad081b239a9f8655c09c60b", "committedDate": "2020-08-19T19:39:55Z", "message": "Re-trigger actions"}, "afterCommit": {"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "committedDate": "2020-08-19T19:28:38Z", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5a821d66e39ad37121347fa7ffe4e29b423d1a3", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d5a821d66e39ad37121347fa7ffe4e29b423d1a3", "committedDate": "2020-08-19T19:43:31Z", "message": "Re-trigger actions"}, "afterCommit": {"oid": "74f1c0570f8f031091faecff80e69a6b439b0ee0", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/74f1c0570f8f031091faecff80e69a6b439b0ee0", "committedDate": "2020-08-19T19:28:38Z", "message": "Add ability to specify directory that libasyncProfiler is exported to, to support /tmp partitions that have noexec set\n\n- Add elastic.apm.profiling_inferred_spans_lib_directory property that can be set to specify a directory which should be used to place the libasyncProfiler.so shared library, so that it can take a value such as /var/tmp when running in a server-hardened environment, without needing to change the `java.io.tmpdir` system property which would apply to the system being profiled as well. If not set, the `java.io.tmpdir` system property is used as before\n- When loading the library, catch any UnsatisfiedLinkError errors, which would usually indicate a /tmp partition that has noexec set, and and re-throw the exception with a message to suggest setting the property\n- Add unit tests which cover this configurable behaviour\n- Update changelog and configuration docs\n\nFixes #1226"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d35a52b6244d0fca790f32a715c22b861ced749", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/8d35a52b6244d0fca790f32a715c22b861ced749", "committedDate": "2020-08-19T20:53:24Z", "message": "Remove use of java.util.Optional from ProfilingConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/546063cff6494164b8450808da1cf0d57c50ca03", "committedDate": "2020-08-19T21:05:45Z", "message": "Fix typo in exception message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzg2OTUy", "url": "https://github.com/elastic/apm-agent-java/pull/1350#pullrequestreview-471386952", "createdAt": "2020-08-20T08:44:30Z", "commit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0NDozMFrOHD01lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MTowNVrOHD1N2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MzQ2Mg==", "bodyText": "[minor] I'd prefer a package-private reset method but this certainly works too", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473773462", "createdAt": "2020-08-20T08:44:30Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NTkyMQ==", "bodyText": "[tip] JUnit has a handy org.junit.jupiter.api.io.TempDir annotation to inject a temp dir into a test method via method parameter. This dir is deleted when the test method exits (regularly or exceptionally).", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473775921", "createdAt": "2020-08-20T08:46:45Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfilerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.profiler.asyncprofiler;\n+\n+import co.elastic.apm.agent.configuration.SpyConfiguration;\n+import co.elastic.apm.agent.profiler.ProfilingConfiguration;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.configuration.ConfigurationRegistry;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public class AsyncProfilerTest {\n+\n+    private ProfilingConfiguration profilerConfig;\n+\n+    @BeforeEach\n+    void setUp() throws ReflectiveOperationException {\n+        ConfigurationRegistry config = SpyConfiguration.createSpyConfig();\n+        profilerConfig = config.getConfig(ProfilingConfiguration.class);\n+\n+        // Ensure that the singleton AsyncProfiler is reset so a new instance is created for each test\n+        Field instance = AsyncProfiler.class.getDeclaredField(\"instance\");\n+        instance.setAccessible(true);\n+        instance.set(null, null);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToTempDirectory() {\n+        AsyncProfiler.getInstance(profilerConfig);\n+\n+        File libDirectory = new File(profilerConfig.getProfilerLibDirectory());\n+        File[] libasyncProfilers = libDirectory.listFiles(getLibasyncProfilerFilenameFilter());\n+        assertThat(libasyncProfilers).hasSizeGreaterThanOrEqualTo(1);\n+    }\n+\n+    @Test\n+    void testShouldCopyLibToSpecifiedDirectory() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODA1Mg==", "bodyText": "[very minor] just a personal preference so that the AsyncProfiler class doesn't depend on the configuration class. Feel free to leave as-is\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AsyncProfiler getInstance(ProfilingConfiguration config) {\n          \n          \n            \n                public static AsyncProfiler getInstance(String profilerLibDirectory) {", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778052", "createdAt": "2020-08-20T08:49:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/asyncprofiler/AsyncProfiler.java", "diffHunk": "@@ -64,24 +65,31 @@\n     private AsyncProfiler() {\n     }\n \n-    public static AsyncProfiler getInstance() {\n+    public static AsyncProfiler getInstance(ProfilingConfiguration config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODY1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n          \n          \n            \n                        \"noexec may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.\\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473778658", "createdAt": "2020-08-20T08:49:59Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTIwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n          \n          \n            \n                        \"Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.\\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779207", "createdAt": "2020-08-20T08:50:33Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")\n          \n          \n            \n                        \"If unset, the value of the `java.io.tmpdir` system property will be used.\")", "url": "https://github.com/elastic/apm-agent-java/pull/1350#discussion_r473779674", "createdAt": "2020-08-20T08:51:05Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingConfiguration.java", "diffHunk": "@@ -163,6 +163,19 @@\n         .tags(\"added[1.15.0]\", \"internal\")\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<String> profilerLibDirectory = ConfigurationOption.<String>stringOption()\n+        .key(\"profiling_inferred_spans_lib_directory\")\n+        .description(\"Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library \" +\n+            \"is exported to a temporary location and loaded by the JVM.\\n\" +\n+            \"The partition backing this location must be executable, however in some server-hardened environments, \" +\n+            \"noexec may be set on the standard /tmp partition, leading to java.lang.UnsatisfiedLinkError errors.\\n\" +\n+            \"Set this property to an alternative directory (e.g. '/var/tmp') to resolve this.\\n\" +\n+            \"If unset, the value of the \\\"java.io.tmpdir\\\" System property will be used.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546063cff6494164b8450808da1cf0d57c50ca03"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1248deba0d5cea6f67319dd89f4b049ba0226199", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/1248deba0d5cea6f67319dd89f4b049ba0226199", "committedDate": "2020-08-20T11:59:05Z", "message": "Address PR feedback\n\n- Use backticks in documentation\n- Remvove ProfilingConfiguration dependency in AsyncProfiler getInstance() method\n- Add package-private reset method to reset AsyncProfiler singleton\n- Use JUnit @TempDir to simplify temp directory creation in unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "774a07eb48158673555fbfea049625850ebccf5d", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/774a07eb48158673555fbfea049625850ebccf5d", "committedDate": "2020-08-20T12:45:48Z", "message": "Lowercase System to system in documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044aa644690c1958523d82cf951915044e0bc1c1", "author": {"user": {"login": "marcjay", "name": "Marc Jay"}}, "url": "https://github.com/elastic/apm-agent-java/commit/044aa644690c1958523d82cf951915044e0bc1c1", "committedDate": "2020-08-20T12:52:53Z", "message": "Add backticks to CHANGELOG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjYxOTY3", "url": "https://github.com/elastic/apm-agent-java/pull/1350#pullrequestreview-471661967", "createdAt": "2020-08-20T14:19:12Z", "commit": {"oid": "044aa644690c1958523d82cf951915044e0bc1c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3859, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}