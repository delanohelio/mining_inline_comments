{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjMzNDk5", "number": 1081, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0MzoxM1rODpHYCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0MzoxM1rODpHYCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDM5MDUwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jdbc-plugin/src/test/java/co/elastic/apm/agent/jdbc/AbstractJdbcInstrumentationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0MzoxM1rOF4FgcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0MzoxM1rOF4FgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NDgwMA==", "bodyText": "Nice", "url": "https://github.com/elastic/apm-agent-java/pull/1081#discussion_r394354800", "createdAt": "2020-03-18T13:43:13Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/test/java/co/elastic/apm/agent/jdbc/AbstractJdbcInstrumentationTest.java", "diffHunk": "@@ -270,42 +278,46 @@ private void testBatch(boolean isLargeBatch) throws SQLException {\n         assertSpanRecorded(insert, false, 2);\n     }\n \n-    private void testUpdate(boolean isLargeUpdate) throws SQLException {\n-        final String insert = \"INSERT INTO ELASTIC_APM (FOO, BAR) VALUES (42, 'TEST')\";\n+    private interface StatementExecutor<T> {\n+        T withStatement(Statement s, String sql) throws SQLException;\n+    }\n \n+    private void testUpdate(StatementExecutor<Number> statementConsumer) throws SQLException {\n         Statement statement = connection.createStatement();\n+        String insert = \"INSERT INTO ELASTIC_APM (FOO, BAR) VALUES (42, 'TEST')\";\n \n-        if (isLargeUpdate) {\n-            boolean supported = executePotentiallyUnsupportedFeature(() -> statement.executeLargeUpdate(insert));\n-            if (!supported) {\n-                // feature not supported, just ignore test\n-                return;\n-            }\n-\n-        } else {\n-            statement.executeUpdate(insert);\n+        boolean supported = executePotentiallyUnsupportedFeature(() -> assertThat(statementConsumer.withStatement(statement, insert).intValue()).isEqualTo(1));\n+        if (!supported) {\n+            // feature not supported, just ignore test\n+            return;\n         }\n-\n         assertSpanRecorded(insert, false, 1);\n+        reporter.reset();\n+        // unique key violation\n+        assertThatThrownBy(() -> statementConsumer.withStatement(statement, insert)).isInstanceOf(SQLException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd914396a13798f54c0fff6b3ce10c0e93311dd"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 233, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}