{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTE3Nzg2", "number": 1206, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyMDo0N1rOEFZHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyOTo0N1rOEFa4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDg5ODQyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyMDo0N1rOGjjhlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozMzoyNFrOGj99lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTM4MQ==", "bodyText": "Obtain these two class lists outside the matching flow, otherwise Mockito has problems with the config mocks. See this comment.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439935381", "createdAt": "2020-06-15T05:20:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -467,18 +467,8 @@ private static AgentBuilder getAgentBuilder(final ByteBuddy byteBuddy, final Cor\n             .or(nameStartsWith(\"io.sqreen.\"))\n             .or(nameContains(\"javassist\"))\n             .or(nameContains(\".asm.\"))\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n+            .or(anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation()))\n+            .or(anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NzM5MA==", "bodyText": "That's what it does \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439997390", "createdAt": "2020-06-15T08:03:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -467,18 +467,8 @@ private static AgentBuilder getAgentBuilder(final ByteBuddy byteBuddy, final Cor\n             .or(nameStartsWith(\"io.sqreen.\"))\n             .or(nameContains(\"javassist\"))\n             .or(nameContains(\".asm.\"))\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n+            .or(anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation()))\n+            .or(anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTM4MQ=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2ODUzNA==", "bodyText": "That's right \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440368534", "createdAt": "2020-06-15T18:33:24Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -467,18 +467,8 @@ private static AgentBuilder getAgentBuilder(final ByteBuddy byteBuddy, final Cor\n             .or(nameStartsWith(\"io.sqreen.\"))\n             .or(nameContains(\"javassist\"))\n             .or(nameContains(\".asm.\"))\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n-            .or(new ElementMatcher.Junction.AbstractBase<TypeDescription>() {\n-                @Override\n-                public boolean matches(TypeDescription target) {\n-                    return WildcardMatcher.anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation(), target.getName()) != null;\n-                }\n-            })\n+            .or(anyMatch(coreConfiguration.getDefaultClassesExcludedFromInstrumentation()))\n+            .or(anyMatch(coreConfiguration.getClassesExcludedFromInstrumentation()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNTM4MQ=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkwNzI3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyNjoyNlrOGjjmyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowMToyNVrOGjrfnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjcxMw==", "bodyText": "Is it used?", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439936713", "createdAt": "2020-06-15T05:26:26Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2NTk1MQ==", "bodyText": "no. can and should be removed. It's coming back in a different form in #1230", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440065951", "createdAt": "2020-06-15T10:01:25Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjcxMw=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkwOTU1OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyODowNVrOGjjoLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozMDo1OFrOGj_1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzA3MA==", "bodyText": "If it's thread local, why using an AtomicInteger?\nAlso, if it's about identification of nesting only (without knowing the level of nesting), no need for a map - a stack of classes is sufficient.\nLastly, using class name may be better as it won't require weak referencing.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439937070", "createdAt": "2020-06-15T05:28:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {\n+    private static final ThreadLocal<Map<Class<?>, AtomicInteger>> callDepthPerThread = new ThreadLocal<Map<Class<?>, AtomicInteger>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MjE1Ng==", "bodyText": "Also, if it's about identification of nesting only (without knowing the level of nesting), no need for a map - a stack of classes is sufficient.\n\nNot quite sure what you mean by that. Note that often you also need to know in the exit advice whether it's a nested invocation.\n\nIf it's thread local, why using an AtomicInteger?\n\nMainly out of convenience. We could create something like a MultableInt to get rid of the volatile reads/writes if that's what you're hinting at?\n\nLastly, using class name may be better as it won't require weak referencing.\n\nThe new version is using a string which is important so the call depth is a global vs a per classloader counter.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440172156", "createdAt": "2020-06-15T13:24:07Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {\n+    private static final ThreadLocal<Map<Class<?>, AtomicInteger>> callDepthPerThread = new ThreadLocal<Map<Class<?>, AtomicInteger>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzA3MA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5OTIyMA==", "bodyText": "Note that often you also need to know in the exit advice whether it's a nested invocation.\n\nWhy isn't a stack enough for that? In any case, if you know in the enter advice, it should be easy to tell the exit advice...\n\nMainly out of convenience. We could create something like a MultableInt to get rid of the volatile reads/writes if that's what you're hinting at?\n\nThe volatile and the additional overhead of atomically fetching and incrementing/decrementing. Why does it have to be mutable and not an Integer you override when incrementing/decrementing? You would really need a deep nesting to be out of the Integer cache\n\nThe new version is using a string which is important so the call depth is a global vs a per classloader counter.\n\nDo you think the usage of same class names loaded by different class loaders on the same stack is a concern?", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440399220", "createdAt": "2020-06-15T19:30:58Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/CallDepth.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A utility that makes it easy to detect nested method calls.\n+ */\n+public class CallDepth {\n+    private static final ThreadLocal<Map<Class<?>, AtomicInteger>> callDepthPerThread = new ThreadLocal<Map<Class<?>, AtomicInteger>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzA3MA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTA3OTY1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1MTowOFrOGjlN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyODoxMFrOGkTDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MzA5NA==", "bodyText": "Done both in the if and else, can be done outside", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439963094", "createdAt": "2020-06-15T06:51:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNDE1Nw==", "bodyText": "The decrement should happen after the activate. Otherwise, the span might be recycled if the reference count goes down to 0.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440714157", "createdAt": "2020-06-16T09:28:10Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MzA5NA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTA4NzY1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDoxMVrOGjlSkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDoxMVrOGjlSkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDMwNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964307", "createdAt": "2020-06-15T06:54:11Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTA4ODM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDoyOVrOGjlTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDoyOVrOGjlTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDQxNw==", "bodyText": "Update javadoc", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964417", "createdAt": "2020-06-15T06:54:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTA4OTUwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDo1M1rOGjlTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo1NDo1M1rOGjlTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NDU4MQ==", "bodyText": "Update javadoc", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439964581", "createdAt": "2020-06-15T06:54:53Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTEyMDYyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzowNzowNFrOGjlmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMzoxNVrOGkVA7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2OTQxOA==", "bodyText": "We need some cleanup of stale entries, maybe use WeakConcurrentMap.WithInlinedExpunction?\nOn the other hand, given that this map may be accessed VERY frequently, using a cleaner thread makes more sense", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439969418", "createdAt": "2020-06-15T07:07:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NDQzMw==", "bodyText": "Good catch, it's not using any extinction at all \ud83d\ude48\nWe should create a global registry for WeakConcurrentMaps so that we only need one cleaner thread for all vs one per map. But for now, WithInlinedExpunction should do.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440174433", "createdAt": "2020-06-15T13:27:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2OTQxOA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMDUxOA==", "bodyText": "I also had that in mind, but didn't see an API in WeakConcurrentMap to control which thread is the cleaner thread.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440400518", "createdAt": "2020-06-15T19:33:45Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2OTQxOA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NjIyMg==", "bodyText": "I've added a central registry to get and clean weak maps", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440746222", "createdAt": "2020-06-16T10:23:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2OTQxOA=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2NTAxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMjozM1rOGjmBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1MTowNFrOGkcVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng==", "bodyText": "This introduces a risk of causing ClassCastException due to the collection type. I think it's better to try/catch using Collection.remove and Collection.add and avoid wrapping (with logging) if not supported by the collection.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439976376", "createdAt": "2020-06-15T07:22:33Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTM5Ng==", "bodyText": "That would impact the order of the callables in the collection. But we could clear and re-fill it.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440179396", "createdAt": "2020-06-15T13:35:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MDY3Mw==", "bodyText": "That's right. So either that, or avoid wrapping (meaning - not supporting lambdas in collections) if you feel it adds too much complexity.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440380673", "createdAt": "2020-06-15T18:56:03Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0Mjk3MQ==", "bodyText": "I think calling add and remove is more likely to fail than creating an entirely new list because that's a good chance the collection is immutable.\nMaybe leave as-is and remove if we see it causes problems?", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440742971", "createdAt": "2020-06-16T10:17:16Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5MTI4Ng==", "bodyText": "My vote is actually to go the other way around - fail (meaning - don't wrap lambdas in collections if the collection is immutable) or not try to wrap in collections and see if we get requests to support that. I prefer questions about why something is not working than issues with breaking applications.\nIf you are not convinced - leave as is.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440791286", "createdAt": "2020-06-16T11:52:48Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNDgxNA==", "bodyText": "That may cause subtle context losses that are very hard to debug. I'd like to resort to these defensive measures only if there are actual problems in the wild which will surface in a more obvious way by throwing an exception. I'll add a new instrumentation group name executor-collection to disable just this instrumentation more easily.\nI think in practice it's unlikely that an executor implementation depends on the type of the collection or even overrides the default implementation in AbstractExecutorService.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440824814", "createdAt": "2020-06-16T12:52:10Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NjA3Ng==", "bodyText": "This entire PR is about executors exposing APIs that allow interfaces but expect specific types \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440866076", "createdAt": "2020-06-16T13:51:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(runnable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(runnable, active);\n+        active.incrementReferences();\n+        // Do no discard branches leading to async operations so not to break span references\n+        active.setNonDiscardable();\n+        return runnable;\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static <T> Callable<T> withContext(@Nullable Callable<T> callable, @Nullable ElasticApmTracer tracer) {\n+        if (callable instanceof CallableLambdaWrapper || callable == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return callable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return callable;\n+        }\n+        if (isLambda(callable)) {\n+            callable = new CallableLambdaWrapper<>(callable);\n+        }\n+        ElasticApmAgent.ensureInstrumented(callable.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(callable, active);\n+        active.incrementReferences();\n+        return callable;\n+    }\n+\n+    @Nullable\n+    public static <T> ForkJoinTask<T> withContext(@Nullable ForkJoinTask<T> task, @Nullable ElasticApmTracer tracer) {\n+        if (task == null || tracer == null  || needsContext.get() == Boolean.FALSE) {\n+            return task;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return task;\n+        }\n+        ElasticApmAgent.ensureInstrumented(task.getClass(), RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION);\n+        contextMap.put(task, active);\n+        active.incrementReferences();\n+        return task;\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Object contextObject) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && contextObject != null) {\n+            removeContext(contextObject);\n+        }\n+    }\n+\n+    public static void doFinally(@Nullable Throwable thrown, @Nullable Collection<? extends Callable<?>> callables) {\n+        needsContext.set(Boolean.TRUE);\n+        if (thrown != null && callables != null) {\n+            for (Callable<?> callable : callables) {\n+                removeContext(callable);\n+            }\n+        }\n+    }\n+\n+    private static boolean isLambda(Object o) {\n+        return o.getClass().getName().indexOf('/') != -1;\n+    }\n+\n+    @Nullable\n+    public static <T> Collection<? extends Callable<T>> withContext(@Nullable Collection<? extends Callable<T>> callables, @Nullable ElasticApmTracer tracer) {\n+        if (callables == null || tracer == null) {\n+            return null;\n+        }\n+        if (callables.isEmpty()) {\n+            return callables;\n+        }\n+        final Collection<Callable<T>> wrapped;\n+        if (needsWrapping(callables)) {\n+            wrapped = new ArrayList<>(callables.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjM3Ng=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE3MDc1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyNDoyOVrOGjmFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1NDowMlrOGj-oeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NzMyMQ==", "bodyText": "What about pooling wrappers? Could be used very frequently.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439977321", "createdAt": "2020-06-15T07:24:29Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwNzQ2OQ==", "bodyText": "By putting the runnable in a WeakConcurrentMap, we're already allocating a WeakReference and a Map.Entry so pooling the Runnable wrapper won't make it allocation free, unfortunately. Given that, I don't think it's worth it.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440207469", "createdAt": "2020-06-15T14:15:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NzMyMQ=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3OTUxMw==", "bodyText": "Okey dokey", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440379513", "createdAt": "2020-06-15T18:54:02Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/JavaConcurrent.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmAgent;\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+public class JavaConcurrent {\n+\n+    private static final WeakConcurrentMap<Object, AbstractSpan<?>> contextMap = new WeakConcurrentMap<Object, AbstractSpan<?>>(false);\n+    private static final List<Class<? extends ElasticApmInstrumentation>> RUNNABLE_CALLABLE_FJTASK_INSTRUMENTATION = Collections.\n+        <Class<? extends ElasticApmInstrumentation>>singletonList(RunnableCallableForkJoinTaskInstrumentation.class);\n+    private static final ThreadLocal<Boolean> needsContext = new ThreadLocal<>();\n+\n+    private static void removeContext(Object o) {\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context != null) {\n+            context.decrementReferences();\n+        }\n+    }\n+\n+    @Nullable\n+    public static AbstractSpan<?> restoreContext(Object o, @Nullable ElasticApmTracer tracer) {\n+        if (tracer == null) {\n+            return null;\n+        }\n+        // When an Executor executes directly on the current thread we need to enable this thread for context propagation again\n+        needsContext.set(Boolean.TRUE);\n+        AbstractSpan<?> context = contextMap.remove(o);\n+        if (context == null) {\n+            return null;\n+        }\n+        if (tracer.getActive() != context) {\n+            context.activate();\n+            context.decrementReferences();\n+            return context;\n+        } else {\n+            context.decrementReferences();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps the provided runnable and makes this {@link AbstractSpan} active in the {@link Runnable#run()} method.\n+     *\n+     * <p>\n+     * Note: does activates the {@link AbstractSpan} and not only the {@link TraceContext}.\n+     * This should only be used when the span is closed in thread the provided {@link Runnable} is executed in.\n+     * </p>\n+     */\n+    @Nullable\n+    public static Runnable withContext(@Nullable Runnable runnable, @Nullable ElasticApmTracer tracer) {\n+        if (runnable instanceof RunnableLambdaWrapper || runnable == null || tracer == null || needsContext.get() == Boolean.FALSE) {\n+            return runnable;\n+        }\n+        needsContext.set(Boolean.FALSE);\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active == null) {\n+            return runnable;\n+        }\n+        if (isLambda(runnable)) {\n+            runnable = new RunnableLambdaWrapper(runnable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NzMyMQ=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE4NjcyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/RunnableCallableForkJoinTaskInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyOTo0N1rOGjmPmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyNDoxOVrOGkVDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTkzMQ==", "bodyText": "[minor] - proposal: make the activation here, rather than implicit, making it symmetric with onExit.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r439979931", "createdAt": "2020-06-15T07:29:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/RunnableCallableForkJoinTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.is;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Used only within {@link JavaConcurrent#withContext} to\n+ * {@linkplain co.elastic.apm.agent.bci.ElasticApmAgent#ensureInstrumented(Class, Collection) ensure}\n+ * that particular {@link Callable}, {@link Runnable} and {@link ForkJoinTask} classes are instrumented.\n+ */\n+public class RunnableCallableForkJoinTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(\n+            is(Runnable.class)\n+            .or(is(Callable.class))\n+            .or(is(ForkJoinTask.class))\n+        );\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"run\").and(takesArguments(0))\n+            .or(named(\"call\").and(takesArguments(0)))\n+            .or(named(\"exec\").and(takesArguments(0).and(returns(boolean.class))));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Arrays.asList(\"concurrent\", \"executor\");\n+    }\n+\n+    @Nullable\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static AbstractSpan<?> onEnter(@Advice.This Object thiz) {\n+        return JavaConcurrent.restoreContext(thiz, tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0Njc3OQ==", "bodyText": "I did that on purpose to minimize the null checks you need to do.", "url": "https://github.com/elastic/apm-agent-java/pull/1206#discussion_r440746779", "createdAt": "2020-06-16T10:24:19Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-java-concurrent-plugin/src/main/java/co/elastic/apm/agent/concurrent/RunnableCallableForkJoinTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.concurrent;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinTask;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.is;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+/**\n+ * Used only within {@link JavaConcurrent#withContext} to\n+ * {@linkplain co.elastic.apm.agent.bci.ElasticApmAgent#ensureInstrumented(Class, Collection) ensure}\n+ * that particular {@link Callable}, {@link Runnable} and {@link ForkJoinTask} classes are instrumented.\n+ */\n+public class RunnableCallableForkJoinTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(\n+            is(Runnable.class)\n+            .or(is(Callable.class))\n+            .or(is(ForkJoinTask.class))\n+        );\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"run\").and(takesArguments(0))\n+            .or(named(\"call\").and(takesArguments(0)))\n+            .or(named(\"exec\").and(takesArguments(0).and(returns(boolean.class))));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Arrays.asList(\"concurrent\", \"executor\");\n+    }\n+\n+    @Nullable\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static AbstractSpan<?> onEnter(@Advice.This Object thiz) {\n+        return JavaConcurrent.restoreContext(thiz, tracer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTkzMQ=="}, "originalCommit": {"oid": "332e1fb2bd497411d6dbb32d5fdace4ee89d6e20"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 342, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}