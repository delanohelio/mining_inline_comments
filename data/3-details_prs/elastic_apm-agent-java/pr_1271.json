{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0Nzk1NDM5", "number": 1271, "title": "First step towards enabling external plugins", "bodyText": "What does this PR do?\nImplements #937 (comment)\nMakes it possible to load external plugins in an isolated class loader. The plugins depend on the apm-agent-plugin-sdk and the apm-agent-api artifacts to create a jar that can be place it into the plugins_dir. An example for such a plugin is in integration-tests/external-plugin-test.\nAs some parts are still missing, this is not mentioned in the changelog yet and the corresponding configuration is marked internal (thus not included in the generated docs).\n\nCreates apm-agent-plugin-sdk: used both by internal and external/community plugins\nI decided against fractoring out a apm-agent-tracer-impl module from apm-agent-core for now. It was more tricky than expected and not needed for external plugins.\n\nMissing bits before we can open this to the public:\n\nRemove ElasticApmPlugin#indyPlugin, making indy plugins the only option\nstop shading Byte Buddy so that users can depend on elastic-apm-agent in their tests to activate apm-agent-api\n\nagent has to be loaded in its dedicated class loader first to avoid conflicts with the application\n\n\npublish test module for apm-agent-core", "createdAt": "2020-07-06T14:00:17Z", "url": "https://github.com/elastic/apm-agent-java/pull/1271", "merged": true, "mergeCommit": {"oid": "48f01f8cdbeb443436b4eeec7686c05d3c889243"}, "closed": true, "closedAt": "2020-07-17T10:04:33Z", "author": {"login": "felixbarny"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyRcfWAH2gAyNDQ0Nzk1NDM5OmMwZTZhMTUzM2EzMzlhZGZmOTZmNjYyZTlkNWU1M2NiNzdjYjMwMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1wNFOAH2gAyNDQ0Nzk1NDM5Ojg5OTE0MmZlNTNmNDY5YjgwYTFhZjQ0NGUwMmZmYmU4YjRhOTBhODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0e6a1533a339adff96f662e9d5e53cb77cb3001", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c0e6a1533a339adff96f662e9d5e53cb77cb3001", "committedDate": "2020-07-06T13:41:48Z", "message": "First step towards loading external plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ab46402c96fa874093de3489f2cc9ed7adc5b21", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/5ab46402c96fa874093de3489f2cc9ed7adc5b21", "committedDate": "2020-07-07T09:51:07Z", "message": "Move indyPlugin() from ElasticApmInstrumentation to TracerAwareInstrumentation\n\nso that we don't have to do a breaking change in the SDK.\nExternal plugins are always indy-dispatched without an opt-out."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b57c31c244d5d348ca55f6bd6d2cb7b8a2a6f812", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b57c31c244d5d348ca55f6bd6d2cb7b8a2a6f812", "committedDate": "2020-07-07T10:08:10Z", "message": "Fix InstrumentationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce3c39a009e46330611d782f8e131b7637d2422", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/bce3c39a009e46330611d782f8e131b7637d2422", "committedDate": "2020-07-08T08:54:36Z", "message": "Add missing license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "committedDate": "2020-07-08T15:04:31Z", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MDg4ODIw", "url": "https://github.com/elastic/apm-agent-java/pull/1271#pullrequestreview-447088820", "createdAt": "2020-07-13T09:35:18Z", "commit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTozNToxOVrOGwgwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoxMToxNlrOGwqWRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMTU4MA==", "bodyText": "[minor] add one blank line between two dependencies to make it more clear that the comment above only applies to the dependency above. Also, adding a small comment to explain why apm-agent-core:test-jar below is required. As we would likely point to this plugin for documentation/reference that might help.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453521580", "createdAt": "2020-07-13T09:35:19Z", "author": {"login": "SylvainJuge"}, "path": "integration-tests/external-plugin-test/pom.xml", "diffHunk": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>integration-tests</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.17.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>external-plugin-test</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../..</apm-agent-parent.base.dir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-agent-plugin-sdk</artifactId>\n+            <version>${project.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-agent-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <!--\n+        this is needed so that the apm-api-plugin instruments apm-agent-api to inject the actual implementation\n+        not doing this will return noop transactions in the tests\n+        -->\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>elastic-apm-agent</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyNjUwMA==", "bodyText": "[question] do we have to ensure proper include/exclude here ? what about compile-time dependencies that plugin might have and should not be embedded in the final jar ?", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453526500", "createdAt": "2020-07-13T09:43:20Z", "author": {"login": "SylvainJuge"}, "path": "integration-tests/external-plugin-test/pom.xml", "diffHunk": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>integration-tests</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.17.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>external-plugin-test</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../..</apm-agent-parent.base.dir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-agent-plugin-sdk</artifactId>\n+            <version>${project.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-agent-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <!--\n+        this is needed so that the apm-api-plugin instruments apm-agent-api to inject the actual implementation\n+        not doing this will return noop transactions in the tests\n+        -->\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>elastic-apm-agent</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>apm-agent-core</artifactId>\n+            <type>test-jar</type>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTIzOQ==", "bodyText": "[question] Do we enforce/ensure that an instrumentation class is always loaded from the same classloader ? For example if we need to deal with plugin dependencies we might have to deal with cross-plugin classloader visibility instead of having classes loaded in multiple plugin classloaders.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453641239", "createdAt": "2020-07-13T13:16:58Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -161,6 +204,9 @@ private static synchronized void initInstrumentation(final ElasticApmTracer trac\n         if (!tracer.getConfig(CoreConfiguration.class).isEnabled()) {\n             return;\n         }\n+        for (ElasticApmInstrumentation apmInstrumentation : instrumentations) {\n+            pluginClassLoaderByAdviceClass.put(apmInstrumentation.getAdviceClass().getName(), apmInstrumentation.getClass().getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTk5MA==", "bodyText": "[minor] might be relevant to throw/log an error if it's not the case.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453641990", "createdAt": "2020-07-13T13:18:08Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -325,8 +371,10 @@ public boolean matches(TypeDescription typeDescription, ClassLoader classLoader,\n         if (offsetMapping != null) {\n             withCustomMapping = withCustomMapping.bind(offsetMapping);\n         }\n-        if (instrumentation.indyPlugin()) {\n-            validateAdvice(instrumentation.getAdviceClass().getName());\n+        // external plugins are always indy plugins\n+        if (!(instrumentation instanceof TracerAwareInstrumentation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NTQxNw==", "bodyText": "[question] do we have to deal with concurrent access to this map and list of classloaders ?", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453645417", "createdAt": "2020-07-13T13:23:16Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -114,6 +119,8 @@\n     private static final WeakConcurrentMap<Class<?>, Set<Collection<Class<? extends ElasticApmInstrumentation>>>> dynamicallyInstrumentedClasses = WeakMapSupplier.createMap();\n     @Nullable\n     private static File agentJarFile;\n+    private static final List<ClassLoader> pluginClassLoaders = new ArrayList<>();\n+    private static final Map<String, ClassLoader> pluginClassLoaderByAdviceClass = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzQxNg==", "bodyText": "[minor] probably missing some tests with an isolated classloader to cover usage for external plugins.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453653416", "createdAt": "2020-07-13T13:35:11Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/PackageScannerTest.java", "diffHunk": "@@ -33,21 +34,21 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NzE3Mw==", "bodyText": "[minor] missing some Javadoc", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453657173", "createdAt": "2020-07-13T13:40:44Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {\n+\n+    void ensureInstrumented(Class<?> classToInstrument, Collection<Class<? extends ElasticApmInstrumentation>> instrumentationClasses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1ODU3NA==", "bodyText": "[minor] probably worth adding some details what this class provides and why we have a ServiceLoader indirection.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453658574", "createdAt": "2020-07-13T13:42:44Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MDc5Mg==", "bodyText": "[minor] do we expect to have more than one implementation here ?", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453660792", "createdAt": "2020-07-13T13:45:47Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {\n+\n+    void ensureInstrumented(Class<?> classToInstrument, Collection<Class<? extends ElasticApmInstrumentation>> instrumentationClasses);\n+\n+    class Accessor {\n+        private static final DynamicTransformer transformer;\n+\n+        static {\n+            ClassLoader classLoader = Accessor.class.getClassLoader();\n+            if (classLoader == null) {\n+                classLoader = ClassLoader.getSystemClassLoader();\n+            }\n+            transformer = ServiceLoader.load(DynamicTransformer.class, classLoader).iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzE0NQ==", "bodyText": "[question] why override with return false when it's already what parent class implementation does ?", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453663145", "createdAt": "2020-07-13T13:49:10Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java", "diffHunk": "@@ -487,9 +511,14 @@ public static String onMethodExit() {\n         public Collection<String> getInstrumentationGroupNames() {\n             return List.of(\"test\", \"experimental\");\n         }\n+\n+        @Override\n+        public boolean indyPlugin() {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NjMyNQ==", "bodyText": "[minor] final modifier might be avoided for consistency in method signature", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453666325", "createdAt": "2020-07-13T13:53:42Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/HelperClassManager.java", "diffHunk": "@@ -286,7 +285,7 @@ private synchronized T loadAndReferenceHelper(Class<?> classOfTargetClassLoader)\n          * Creates an isolated CL that has two parents: the target class loader and the agent CL.\n          * The agent class loader is currently the bootstrap CL but in the future it will be an isolated CL that is a child of the bootstrap CL.\n          */\n-        public synchronized static ClassLoader getOrCreatePluginClassLoader(@Nullable ClassLoader targetClassLoader, List<String> classesToInject, ElementMatcher<? super TypeDescription> exclusionMatcher) throws Exception {\n+        public synchronized static ClassLoader getOrCreatePluginClassLoader(@Nullable ClassLoader targetClassLoader, List<String> classesToInject, final ClassLoader parent, ElementMatcher<? super TypeDescription> exclusionMatcher) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NTgzOQ==", "bodyText": "[minor] might also be interesting to have an example that extends TracerAwareInstrumentation as relying on API is not the only option.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453675839", "createdAt": "2020-07-13T14:07:09Z", "author": {"login": "SylvainJuge"}, "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NzA2Ng==", "bodyText": "[minor] if we use this plugin as an example, that's not the canonical way to deal with configuration as it does not provides proper documentation. A comment to explain it's a shortcut might be relevant.", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453677066", "createdAt": "2020-07-13T14:08:59Z", "author": {"login": "SylvainJuge"}, "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_class\", \"co.elastic.apm.plugin.PluginInstrumentationTest\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3ODY2MQ==", "bodyText": "[question] why can't we have Transaction directly in the advice signature ? is that to avoid leaking an extra type in the instrumented class stack frames ?", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453678661", "createdAt": "2020-07-13T14:11:16Z", "author": {"login": "SylvainJuge"}, "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_class\", \"co.elastic.apm.plugin.PluginInstrumentationTest\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_method\", \"traceMe\"));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"test-plugin\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static Object onEnter(@Advice.Origin(value = \"#m\") String methodName) {\n+        return ElasticApm.startTransaction().setName(methodName);\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+    public static void onExit(@Advice.Thrown Throwable thrown, @Advice.Enter Object transactionObject) {\n+        Transaction transaction = (Transaction) transactionObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7f103e49ec1ee95187c1cf4fb6c44830cbf9da", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/ab7f103e49ec1ee95187c1cf4fb6c44830cbf9da", "committedDate": "2020-07-14T13:00:12Z", "message": "Apply suggestions from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDQ3MzMz", "url": "https://github.com/elastic/apm-agent-java/pull/1271#pullrequestreview-449047333", "createdAt": "2020-07-15T14:59:26Z", "commit": {"oid": "ab7f103e49ec1ee95187c1cf4fb6c44830cbf9da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28395e5685350c076857e1d426c224c7ec937d22", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/28395e5685350c076857e1d426c224c7ec937d22", "committedDate": "2020-07-17T09:08:59Z", "message": "Fix npe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d618da4ab0a2bd33ebafcf8c826324b741beea16", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d618da4ab0a2bd33ebafcf8c826324b741beea16", "committedDate": "2020-07-17T09:12:07Z", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "899142fe53f469b80a1af444e02ffbe8b4a90a86", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/899142fe53f469b80a1af444e02ffbe8b4a90a86", "committedDate": "2020-07-17T09:13:48Z", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3789, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}