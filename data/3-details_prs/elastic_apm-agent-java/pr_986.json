{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzg1MDQz", "number": 986, "title": "Make instrumentation options dynamic", "bodyText": "Checklist\n\n\n Implement code\n Add tests\n Update documentation\n Update CHANGELOG.asciidoc\n Update supported-technologies.asciidoc\n Added an API method or config option? Document in which version this will be introduced.\n Added an instrumentation plugin? How did you make sure that old, non-supported versions are not instrumented by accident?", "createdAt": "2020-01-08T10:25:40Z", "url": "https://github.com/elastic/apm-agent-java/pull/986", "merged": true, "mergeCommit": {"oid": "b09e71180b1c92117eec0d5f52e08fa4f8180679"}, "closed": true, "closedAt": "2020-03-09T18:01:27Z", "author": {"login": "felixbarny"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2dniGAH2gAyMzYwMzg1MDQzOjMyZmZmNTdlZTQ0NDM2Mzg4N2RiYjJmMjZjYmM5YWY1OTg4NDc5ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMA9LoAH2gAyMzYwMzg1MDQzOmIwMmU0ZTlmYzYyMTkyOWYwZGQzNGEwZWQwNWQ2OTZhZTg3NGY1NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32fff57ee444363887dbb2f26cbc9af5988479d5", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/32fff57ee444363887dbb2f26cbc9af5988479d5", "committedDate": "2020-01-02T17:57:16Z", "message": "Experiment with AgentBuilder.patchOnByteBuddyAgent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d863ad2da07ab1146e052973e50271397364aa1e", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d863ad2da07ab1146e052973e50271397364aa1e", "committedDate": "2020-01-06T15:29:19Z", "message": "Make instrumentation options dynamic\n\nPowered by Byte Buddy's new patchOnByteBuddyAgent feature which will release in 1.10.7\nAffects options instrument, disable_instrumentations and trace_methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81f67d67e3163441fe1898ff64c83f11f9ed0b1", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c81f67d67e3163441fe1898ff64c83f11f9ed0b1", "committedDate": "2020-01-08T10:23:59Z", "message": "Use POOL_ONLY on startup and HYBRID on re-init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1012d56e4119a0720bcff1f1e9a1691db677285", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d1012d56e4119a0720bcff1f1e9a1691db677285", "committedDate": "2020-03-04T16:32:59Z", "message": "Merge remote-tracking branch 'origin/master' into make-instrumentation-options-dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd", "committedDate": "2020-03-04T16:48:17Z", "message": "Decouple retransform from configuration reload thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODI4MzE4", "url": "https://github.com/elastic/apm-agent-java/pull/986#pullrequestreview-370828318", "createdAt": "2020-03-08T12:59:46Z", "commit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjo1OTo0NlrOFzVFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNDozMjoyM1rOFzVjJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NzIxOQ==", "bodyText": "Can this happen during startup if the remote config overrides local settings?\nEither case, I believe the HYBRID strategy is not as safe as it relies on reflection, which can wake up hidden daemons.\nI recall a scenario where some JDBC driver compiled with one JDBC specification version, was used in an environment that contained an older JDBC version. While that was never a problem, as the incompatible methods were never used and the JVM did method-granularity-lazy class linkage, the usage of getDeclaredMethods surfaced this incompatibility as it caused an attempt to resolve all methods.", "url": "https://github.com/elastic/apm-agent-java/pull/986#discussion_r389367219", "createdAt": "2020-03-08T12:59:46Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -141,12 +148,54 @@ public void run() {\n             return;\n         }\n         ElasticApmInstrumentation.staticInit(tracer);\n+        // POOL_ONLY because we don't want to cause eager linking on startup as the class path may not be complete yet\n+        AgentBuilder agentBuilder = initAgentBuilder(tracer, instrumentation, instrumentations, logger, AgentBuilder.DescriptionStrategy.Default.POOL_ONLY);\n+        resettableClassFileTransformer = agentBuilder.installOn(ElasticApmAgent.instrumentation);\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        for (ConfigurationOption instrumentationOption : coreConfig.getInstrumentationOptions()) {\n+            instrumentationOption.addChangeListener(new ConfigurationOption.ChangeListener() {\n+                @Override\n+                public void onChange(ConfigurationOption configurationOption, Object oldValue, Object newValue) {\n+                    reInitInstrumentation();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static synchronized Future<?> reInitInstrumentation() {\n+        ElasticApmTracer tracer = ElasticApmInstrumentation.tracer;\n+        if (tracer == null || instrumentation == null) {\n+            throw new IllegalStateException(\"Can't re-init agent before it has been initialized\");\n+        }\n+        ThreadPoolExecutor executor = ExecutorUtils.createSingleThreadDeamonPool(\"apm-reinit\", 1);\n+        try {\n+            return executor.submit(new Runnable() {\n+                @Override\n+                public void run() {\n+                    doReInitInstrumentation(loadInstrumentations(tracer));\n+                }\n+            });\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+\n+    static synchronized void doReInitInstrumentation(Iterable<ElasticApmInstrumentation> instrumentations) {\n+        final Logger logger = LoggerFactory.getLogger(ElasticApmAgent.class);\n+        logger.info(\"Re initializing instrumentation\");\n+        // HYBRID to speed up the matchers, assuming dependant classes have already loaded so we don't interfere with the ordering of initialization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2OTk5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(reporter.getSpans()).hasSize(0);\n          \n          \n            \n                    // if original configuration was used, a span would have been created - see `testTraceMethod`\n          \n          \n            \n                    assertThat(reporter.getSpans()).hasSize(0);", "url": "https://github.com/elastic/apm-agent-java/pull/986#discussion_r389369993", "createdAt": "2020-03-08T13:33:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/methodmatching/TraceMethodInstrumentationTest.java", "diffHunk": "@@ -107,6 +108,17 @@ void testTraceMethod() {\n         assertThat(reporter.getFirstSpan().getNameAsString()).isEqualTo(\"TestClass#traceMeToo\");\n     }\n \n+    @Test\n+    void testReInitTraceMethod() throws Exception {\n+        when(coreConfiguration.getTraceMethods()).thenReturn(\n+            List.of(MethodMatcher.of(\"private co.elastic.apm.agent.bci.methodmatching.TraceMethodInstrumentationTest$TestClass#traceMe()\")));\n+        ElasticApmAgent.reInitInstrumentation().get();\n+        TestClass.traceMe();\n+        assertThat(reporter.getTransactions()).hasSize(1);\n+        assertThat(reporter.getFirstTransaction().getNameAsString()).isEqualTo(\"TestClass#traceMe\");\n+        assertThat(reporter.getSpans()).hasSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MTIwNA==", "bodyText": "Make the initInstrumentation() method synchronized as well, as it registers listeners that can be called concurrently (assuming that net.bytebuddy.agent.builder.AgentBuilder#installOn and net.bytebuddy.agent.builder.AgentBuilder#patchOnByteBuddyAgent should not be invoked concurrently)", "url": "https://github.com/elastic/apm-agent-java/pull/986#discussion_r389371204", "createdAt": "2020-03-08T13:49:19Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -141,12 +148,54 @@ public void run() {\n             return;\n         }\n         ElasticApmInstrumentation.staticInit(tracer);\n+        // POOL_ONLY because we don't want to cause eager linking on startup as the class path may not be complete yet\n+        AgentBuilder agentBuilder = initAgentBuilder(tracer, instrumentation, instrumentations, logger, AgentBuilder.DescriptionStrategy.Default.POOL_ONLY);\n+        resettableClassFileTransformer = agentBuilder.installOn(ElasticApmAgent.instrumentation);\n+        CoreConfiguration coreConfig = tracer.getConfig(CoreConfiguration.class);\n+        for (ConfigurationOption instrumentationOption : coreConfig.getInstrumentationOptions()) {\n+            instrumentationOption.addChangeListener(new ConfigurationOption.ChangeListener() {\n+                @Override\n+                public void onChange(ConfigurationOption configurationOption, Object oldValue, Object newValue) {\n+                    reInitInstrumentation();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static synchronized Future<?> reInitInstrumentation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NDc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)\n          \n          \n            \n                        .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)\n          \n          \n            \n                        .with(new AgentBuilder.RedefinitionStrategy.BatchAllocator() {\n          \n          \n            \n                            @Override\n          \n          \n            \n                            public Iterable<? extends List<Class<?>>> batch(List<Class<?>> types) {\n          \n          \n            \n                                // if this is on startup, do the same as BatchAllocator.ForTotal, otherwise use batches\n          \n          \n            \n                            }\n          \n          \n            \n                        })\n          \n      \n    \n    \n  \n\nNot exactly this, but this BatchAllocator can be handy for retransformations...", "url": "https://github.com/elastic/apm-agent-java/pull/986#discussion_r389374759", "createdAt": "2020-03-08T14:32:23Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -348,7 +396,7 @@ private static AgentBuilder getAgentBuilder(final ByteBuddy byteBuddy, final Cor\n \n         return new AgentBuilder.Default(byteBuddy)\n             .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDAwMzQ3", "url": "https://github.com/elastic/apm-agent-java/pull/986#pullrequestreview-371000347", "createdAt": "2020-03-09T09:03:04Z", "commit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzowNFrOFzfG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzowNFrOFzfG2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMTM1NA==", "bodyText": "traceMethods and disabledInstrumentations are tested, but seems that dynamically changing instrument is not tested.", "url": "https://github.com/elastic/apm-agent-java/pull/986#discussion_r389531354", "createdAt": "2020-03-09T09:03:04Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -516,6 +519,10 @@ public boolean isInstrument() {\n         return instrument.get();\n     }\n \n+    public List<ConfigurationOption<?>> getInstrumentationOptions() {\n+        return Arrays.asList(instrument, traceMethods, disabledInstrumentations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a23cd0758201ac4a3efbfd86e9a6b81f20e57bd"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9c9d275e7df701ca21760cfe5cc30bf274ce50", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/cf9c9d275e7df701ca21760cfe5cc30bf274ce50", "committedDate": "2020-03-09T14:50:32Z", "message": "Merge remote-tracking branch 'origin/master' into make-instrumentation-options-dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca5f2b5adf45acad8b28a0254aff8aa87edd10f", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/8ca5f2b5adf45acad8b28a0254aff8aa87edd10f", "committedDate": "2020-03-09T15:49:10Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzA2OTQ3", "url": "https://github.com/elastic/apm-agent-java/pull/986#pullrequestreview-371306947", "createdAt": "2020-03-09T15:54:18Z", "commit": {"oid": "8ca5f2b5adf45acad8b28a0254aff8aa87edd10f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02e4e9fc621929f0dd34a0ed05d696ae874f574", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b02e4e9fc621929f0dd34a0ed05d696ae874f574", "committedDate": "2020-03-09T17:00:00Z", "message": "Limit batch size of retransformations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4034, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}