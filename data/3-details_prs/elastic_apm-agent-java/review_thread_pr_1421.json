{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NzU5NjQ5", "number": 1421, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToyNzoxOVrOEogR2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTozOTo0N1rOEoghog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTA3MzUyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToyNzoyMFrOHZomLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToyNzoyMFrOHZomLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MTU4MQ==", "bodyText": "You think it worth caching already encountered metrics, so that we don't match a potentially long list of matchers?", "url": "https://github.com/elastic/apm-agent-java/pull/1421#discussion_r496641581", "createdAt": "2020-09-29T11:27:20Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -97,11 +99,21 @@ public void run() {\n     }\n \n     private static class MeterMapConsumer implements Consumer<Meter> {\n+\n+        private final List<WildcardMatcher> disabledMetrics;\n+\n+        public MeterMapConsumer(List<WildcardMatcher> disabledMetrics) {\n+            this.disabledMetrics = disabledMetrics;\n+        }\n+\n         final Map<Meter.Id, Meter> meters = new HashMap<>();\n \n         @Override\n         public void accept(Meter meter) {\n-            meters.put(meter.getId(), meter);\n+            Meter.Id meterId = meter.getId();\n+            if (WildcardMatcher.anyMatch(disabledMetrics, meterId.getName()) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc5519c52e5b506146e5a5713e10ce8b494f6951"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTExMzk0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTozOTo0N1rOHZo_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTozOTo0N1rOHZo_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0ODA1MA==", "bodyText": "I think compared to the actual serialization of the metrics the matching is not likely to be significant.\nand idea to make it a bit more readable\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (WildcardMatcher.anyMatch(disabledMetrics, meterId.getName()) == null) {\n          \n          \n            \n                        if (WildcardMatcher.isNoneMatch(disabledMetrics, meterId.getName())) {", "url": "https://github.com/elastic/apm-agent-java/pull/1421#discussion_r496648050", "createdAt": "2020-09-29T11:39:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -97,11 +99,21 @@ public void run() {\n     }\n \n     private static class MeterMapConsumer implements Consumer<Meter> {\n+\n+        private final List<WildcardMatcher> disabledMetrics;\n+\n+        public MeterMapConsumer(List<WildcardMatcher> disabledMetrics) {\n+            this.disabledMetrics = disabledMetrics;\n+        }\n+\n         final Map<Meter.Id, Meter> meters = new HashMap<>();\n \n         @Override\n         public void accept(Meter meter) {\n-            meters.put(meter.getId(), meter);\n+            Meter.Id meterId = meter.getId();\n+            if (WildcardMatcher.anyMatch(disabledMetrics, meterId.getName()) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc5519c52e5b506146e5a5713e10ce8b494f6951"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}