{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxODU0MzQ0", "number": 1262, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTowNTo0M1rOEKjLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0MToyMlrOEKw-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDk3NTM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTowNTo0M1rOGrp7GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoyNjowNlrOGsKkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyODgyNQ==", "bodyText": "Add an info log here", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r448428825", "createdAt": "2020-07-01T15:05:43Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ae318da0acbd3a7ec361f112218b3f0672d57f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2MzYwMw==", "bodyText": "We are already logging this info in the delay itself. We will be able to see there is no delay_instrumentation configured, so we should be able to know that", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r448963603", "createdAt": "2020-07-02T12:26:06Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyODgyNQ=="}, "originalCommit": {"oid": "a2ae318da0acbd3a7ec361f112218b3f0672d57f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIzNTI4OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0MDo1M1rOGr_YGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoyMDoxN1rOGtLlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MDMxMg==", "bodyText": "Can we end the delay once the platform MBean server is initialized (!MBeanServerFactory.findMBeanServer(null).isEmpty())? In that case, it should be guaranteed that JUL is initialized.", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r448780312", "createdAt": "2020-07-02T06:40:53Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (premain && shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);\n+        }\n+        if (delayInitMs > 0) {\n+            startWithDelay(delayInitMs);\n         } else {\n             startSync();\n         }\n     }\n \n-    private synchronized void startWithDelay() {\n+    private boolean shouldDelay() {\n+        return ClassLoader.getSystemClassLoader().getResource(\"org/apache/catalina/startup/Bootstrap.class\") != null;\n+    }\n+\n+    private synchronized void startWithDelay(final long delayInitMs) {\n         ThreadPoolExecutor pool = ExecutorUtils.createSingleThreadDeamonPool(\"tracer-initializer\", 1);\n         pool.submit(new Runnable() {\n             @Override\n             public void run() {\n                 try {\n-                    long delayInitMs = coreConfiguration.getDelayInitMs();\n                     logger.info(\"Delaying initialization of tracer for \" + delayInitMs + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652cdd9a801e5d4fe7748269f6e1fd92ea63bdb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2MjkyMQ==", "bodyText": "You mean poll every 500ms or so? It still doesn't guarantee anything.\nI think we can live with the 5 seconds delay in Tomcat on 1.8 installed via premain", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r448962921", "createdAt": "2020-07-02T12:24:51Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (premain && shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);\n+        }\n+        if (delayInitMs > 0) {\n+            startWithDelay(delayInitMs);\n         } else {\n             startSync();\n         }\n     }\n \n-    private synchronized void startWithDelay() {\n+    private boolean shouldDelay() {\n+        return ClassLoader.getSystemClassLoader().getResource(\"org/apache/catalina/startup/Bootstrap.class\") != null;\n+    }\n+\n+    private synchronized void startWithDelay(final long delayInitMs) {\n         ThreadPoolExecutor pool = ExecutorUtils.createSingleThreadDeamonPool(\"tracer-initializer\", 1);\n         pool.submit(new Runnable() {\n             @Override\n             public void run() {\n                 try {\n-                    long delayInitMs = coreConfiguration.getDelayInitMs();\n                     logger.info(\"Delaying initialization of tracer for \" + delayInitMs + \"ms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MDMxMg=="}, "originalCommit": {"oid": "8652cdd9a801e5d4fe7748269f6e1fd92ea63bdb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODkyMw==", "bodyText": "You'd only wait up to 500ms more than necessary vs waiting up to 5s more than necessary and possibly not waiting long enough. We could use the same mechanism for delay_init and the MBean server polling. Both conditions need to be fulfilled to end the delay.\n\nI think we can live with the 5 seconds delay in Tomcat on 1.8 installed via premain\n\nI think so too, just mentioning for completeness", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r450028923", "createdAt": "2020-07-06T07:20:17Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (premain && shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);\n+        }\n+        if (delayInitMs > 0) {\n+            startWithDelay(delayInitMs);\n         } else {\n             startSync();\n         }\n     }\n \n-    private synchronized void startWithDelay() {\n+    private boolean shouldDelay() {\n+        return ClassLoader.getSystemClassLoader().getResource(\"org/apache/catalina/startup/Bootstrap.class\") != null;\n+    }\n+\n+    private synchronized void startWithDelay(final long delayInitMs) {\n         ThreadPoolExecutor pool = ExecutorUtils.createSingleThreadDeamonPool(\"tracer-initializer\", 1);\n         pool.submit(new Runnable() {\n             @Override\n             public void run() {\n                 try {\n-                    long delayInitMs = coreConfiguration.getDelayInitMs();\n                     logger.info(\"Delaying initialization of tracer for \" + delayInitMs + \"ms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MDMxMg=="}, "originalCommit": {"oid": "8652cdd9a801e5d4fe7748269f6e1fd92ea63bdb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIzNjUwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0MToyMlrOGr_Y2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0MToyMlrOGr_Y2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MDUwNA==", "bodyText": "Can we do the delay for specific versions of Java, like only 1.8?", "url": "https://github.com/elastic/apm-agent-java/pull/1262#discussion_r448780504", "createdAt": "2020-07-02T06:41:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -538,28 +539,35 @@ void init(List<LifecycleListener> lifecycleListeners) {\n         }\n     }\n \n-    public synchronized void start() {\n-        if (getConfig(CoreConfiguration.class).getDelayInitMs() > 0) {\n-            startWithDelay();\n+    public synchronized void start(boolean premain) {\n+        long delayInitMs = getConfig(CoreConfiguration.class).getDelayInitMs();\n+        if (premain && shouldDelay()) {\n+            delayInitMs = Math.max(delayInitMs, 5000L);\n+        }\n+        if (delayInitMs > 0) {\n+            startWithDelay(delayInitMs);\n         } else {\n             startSync();\n         }\n     }\n \n-    private synchronized void startWithDelay() {\n+    private boolean shouldDelay() {\n+        return ClassLoader.getSystemClassLoader().getResource(\"org/apache/catalina/startup/Bootstrap.class\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652cdd9a801e5d4fe7748269f6e1fd92ea63bdb"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 148, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}