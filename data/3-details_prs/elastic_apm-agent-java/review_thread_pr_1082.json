{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTA1OTE2", "number": 1082, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1NzowNVrODn13sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowMzowNlrODn2AmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTAzNjY2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1NzowNVrOF2EnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzo0MzozMlrOF2dbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MzA0MQ==", "bodyText": "[minor] maybe return null when HostPort.host == null || HostPort.port < 0", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392243041", "createdAt": "2020-03-13T13:57:05Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDExNg==", "bodyText": "[minor] maybe naming this method with Oracle might be relevant as it's very Oracle-specific.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392244116", "createdAt": "2020-03-13T13:58:59Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MzA0MQ=="}, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0OTUzNg==", "bodyText": "maybe return null when HostPort.host == null || HostPort.port < 0\n\n\ud83d\udc4d for HostPort.host == null, however I am pretty sure the port is optional, so one may set a host and not the port (in which case the default will be used- there is a test for that)\n\nmaybe naming this method with Oracle might be relevant as it's very Oracle-specific.\n\nIt's within the Oracle parser (enum)", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392649536", "createdAt": "2020-03-15T07:43:32Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MzA0MQ=="}, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTA0ODQwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowMDoxNlrOF2Eutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzo0OTozNFrOF2dcrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDkxOQ==", "bodyText": "do we really want to continue parsing in case of error ?", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392244919", "createdAt": "2020-03-13T14:00:16Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {\n+                TreeNode parsedTree = null;\n+                Deque<TreeNode> stack = new ArrayDeque<>();\n+                StringBuilder currentValueBuffer = null;\n+                for (char c : connectionUrl.toLowerCase().toCharArray()) {\n+                    switch (c) {\n+                        case '(': {\n+                            TreeNode treeNode = new TreeNode();\n+                            if (stack.isEmpty()) {\n+                                parsedTree = treeNode;\n+                            } else {\n+                                stack.peek().childNodes.add(treeNode);\n+                            }\n+                            stack.push(treeNode);\n+                            currentValueBuffer = treeNode.name;\n+                            break;\n+                        }\n+                        case ')': {\n+                            stack.pop();\n+                            // continue to do the same as finding `=`\n+                        }\n+                        case '=': {\n+                            if (stack.isEmpty()) {\n+                                currentValueBuffer = null;\n+                            } else {\n+                                currentValueBuffer = stack.peek().value;\n+                            }\n+                            break;\n+                        }\n+                        default: {\n+                            if (currentValueBuffer == null) {\n+                                logger.warn(\"Failed to parse Oracle DB address list from: {}\", connectionUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0OTkwMA==", "bodyText": "Could be an error or an unknown use of the connection string. However, I only care about very specific nodes in this tree, so if the parsing yields a valid tree in which I can find the tree nodes I am looking for, I don't care.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392649900", "createdAt": "2020-03-15T07:49:34Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {\n+                TreeNode parsedTree = null;\n+                Deque<TreeNode> stack = new ArrayDeque<>();\n+                StringBuilder currentValueBuffer = null;\n+                for (char c : connectionUrl.toLowerCase().toCharArray()) {\n+                    switch (c) {\n+                        case '(': {\n+                            TreeNode treeNode = new TreeNode();\n+                            if (stack.isEmpty()) {\n+                                parsedTree = treeNode;\n+                            } else {\n+                                stack.peek().childNodes.add(treeNode);\n+                            }\n+                            stack.push(treeNode);\n+                            currentValueBuffer = treeNode.name;\n+                            break;\n+                        }\n+                        case ')': {\n+                            stack.pop();\n+                            // continue to do the same as finding `=`\n+                        }\n+                        case '=': {\n+                            if (stack.isEmpty()) {\n+                                currentValueBuffer = null;\n+                            } else {\n+                                currentValueBuffer = stack.peek().value;\n+                            }\n+                            break;\n+                        }\n+                        default: {\n+                            if (currentValueBuffer == null) {\n+                                logger.warn(\"Failed to parse Oracle DB address list from: {}\", connectionUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDkxOQ=="}, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTA1OTQ1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowMzowN1rOF2E1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzo1MjowMlrOF2ddRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NjY2OQ==", "bodyText": "[minor] same here, having a null return value would avoid duplication of the null check and port > 0 below.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392246669", "createdAt": "2020-03-13T14:03:07Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -208,7 +318,16 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n         MYSQL(\"mysql\") {\n             @Override\n             ConnectionMetaData parse(String connectionUrl, String user) {\n-                return ConnectionUrlParser.defaultParse(connectionUrl, dbVendor, 3306, user);\n+                String host = \"localhost\";\n+                int port = 3306;\n+                HostPort hostPort = parseMySqlFlavor(connectionUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MDA1Mw==", "bodyText": "I don't think-  most (or all) make port configuration optional, each provider using a different default port if not configured.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392650053", "createdAt": "2020-03-15T07:52:02Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -208,7 +318,16 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n         MYSQL(\"mysql\") {\n             @Override\n             ConnectionMetaData parse(String connectionUrl, String user) {\n-                return ConnectionUrlParser.defaultParse(connectionUrl, dbVendor, 3306, user);\n+                String host = \"localhost\";\n+                int port = 3306;\n+                HostPort hostPort = parseMySqlFlavor(connectionUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NjY2OQ=="}, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 235, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}