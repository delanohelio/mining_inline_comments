{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTE2MzIz", "number": 1083, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozNTozMlrODnzUAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozODo1NFrODnzXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDYxNzYyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozNTozMlrOF2Ag4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo0MDo1NlrOF2CKow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NTg0MA==", "bodyText": "works fine as is but you could alternatively do SpyConfiguration.createSpyConfig().getConfig(ReporterConfiguration.class);.\nThis lets you avoid having to re-specify the default values (the just required to avoid NPEs step)", "url": "https://github.com/elastic/apm-agent-java/pull/1083#discussion_r392175840", "createdAt": "2020-03-13T11:35:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package specs;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.report.ApmServerClient;\n+import co.elastic.apm.agent.report.HttpUtils;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import io.cucumber.java.After;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiKeysStepsDefinitions {\n+\n+    // those constants should be provided by the gherkin test, not using hard-coded values\n+    // as it would require to update the test definition, we'll keep it as-is for now.\n+    private static final String SECRET_TOKEN = \"secr3tT0ken\";\n+    private static final String API_KEY = \"@p1Key\";\n+\n+    // so far, only reporter and it's configuration is being tested\n+    private ReporterConfiguration configuration = null;\n+\n+    private WireMockServer server = new WireMockServer(WireMockConfiguration.options()\n+        .extensions(new ResponseTemplateTransformer(false))\n+        .dynamicPort());\n+\n+    @Before\n+    public void init() {\n+        server.stubFor(get(urlEqualTo(\"/\"))\n+            .willReturn(aResponse()\n+                .withTransformers(\"response-template\")\n+                // just send back auth header (if any) for easy parsing on client side\n+                .withBody(\"{{request.headers.Authorization}}\")));\n+\n+        server.start();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        server.stop();\n+    }\n+\n+    // Init\n+\n+    @Given(\"an agent\")\n+    public void initAgent() {\n+        // we just initialize configuration as reporter is initialized lazily\n+        configuration = mock(ReporterConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a47202a8aec390a226fa084425bc1e7d284577"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwMjkxNQ==", "bodyText": "Nice, I never took time to investigate differences between spies and mocks in mockito, now it's more clear :-)", "url": "https://github.com/elastic/apm-agent-java/pull/1083#discussion_r392202915", "createdAt": "2020-03-13T12:40:56Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package specs;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.report.ApmServerClient;\n+import co.elastic.apm.agent.report.HttpUtils;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import io.cucumber.java.After;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiKeysStepsDefinitions {\n+\n+    // those constants should be provided by the gherkin test, not using hard-coded values\n+    // as it would require to update the test definition, we'll keep it as-is for now.\n+    private static final String SECRET_TOKEN = \"secr3tT0ken\";\n+    private static final String API_KEY = \"@p1Key\";\n+\n+    // so far, only reporter and it's configuration is being tested\n+    private ReporterConfiguration configuration = null;\n+\n+    private WireMockServer server = new WireMockServer(WireMockConfiguration.options()\n+        .extensions(new ResponseTemplateTransformer(false))\n+        .dynamicPort());\n+\n+    @Before\n+    public void init() {\n+        server.stubFor(get(urlEqualTo(\"/\"))\n+            .willReturn(aResponse()\n+                .withTransformers(\"response-template\")\n+                // just send back auth header (if any) for easy parsing on client side\n+                .withBody(\"{{request.headers.Authorization}}\")));\n+\n+        server.start();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        server.stop();\n+    }\n+\n+    // Init\n+\n+    @Given(\"an agent\")\n+    public void initAgent() {\n+        // we just initialize configuration as reporter is initialized lazily\n+        configuration = mock(ReporterConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NTg0MA=="}, "originalCommit": {"oid": "96a47202a8aec390a226fa084425bc1e7d284577"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDYyNjI0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozODo1NFrOF2AmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0NDozOFrOF2ugAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NzIwMw==", "bodyText": "The step definitions look very nice and clean!", "url": "https://github.com/elastic/apm-agent-java/pull/1083#discussion_r392177203", "createdAt": "2020-03-13T11:38:54Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package specs;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.report.ApmServerClient;\n+import co.elastic.apm.agent.report.HttpUtils;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import io.cucumber.java.After;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiKeysStepsDefinitions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a47202a8aec390a226fa084425bc1e7d284577"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNDExOQ==", "bodyText": "Yes, I like it too, however I feel that the shared spec we could be further improved to remove similar and not explicit statements, I'll open another PR for this.", "url": "https://github.com/elastic/apm-agent-java/pull/1083#discussion_r392204119", "createdAt": "2020-03-13T12:43:30Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package specs;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.report.ApmServerClient;\n+import co.elastic.apm.agent.report.HttpUtils;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import io.cucumber.java.After;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiKeysStepsDefinitions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NzIwMw=="}, "originalCommit": {"oid": "96a47202a8aec390a226fa084425bc1e7d284577"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyOTI4MQ==", "bodyText": "The PR has already been merged on shared spec improvement. elastic/apm#226", "url": "https://github.com/elastic/apm-agent-java/pull/1083#discussion_r392929281", "createdAt": "2020-03-16T10:44:38Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/specs/ApiKeysStepsDefinitions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package specs;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.report.ApmServerClient;\n+import co.elastic.apm.agent.report.HttpUtils;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import io.cucumber.java.After;\n+import io.cucumber.java.Before;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiKeysStepsDefinitions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NzIwMw=="}, "originalCommit": {"oid": "96a47202a8aec390a226fa084425bc1e7d284577"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 238, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}