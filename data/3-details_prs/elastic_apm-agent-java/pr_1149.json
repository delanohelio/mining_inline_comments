{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTc3NjE2", "number": 1149, "title": "TLS v1.3 Fallback for JDK bug", "bodyText": "What does this PR do?\nThis PR implements a fallback for #1080\nTLS 1.3 has been added in JDK 11, but due to a JDK bug (JDK-8236039), it can't be used in affected versions.\nBy default, there is no fallback on other versions of the protocol, even if those are both available and supported by the remote server.\nThis PR implements the following fallback:\n\napplied only when SSL socket handshake fails with a known error type & message pattern and TLS v1.3 protocol is enabled.\ncreates a new socket without TLS v1.3 and restarts handshake.\n\nWhen applied, the following warning is present in agent log:\nWARN co.elastic.apm.agent.report.ssl.TLSFallbackSSLSocket - Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\n\nChecklist\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\nI have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated CHANGELOG.asciidoc\nI have updated supported-technologies.asciidoc\nAdded an API method or config option? Document in which version this will be introduced\nAdded an instrumentation plugin? How did you make sure that old, non-supported versions are not instrumented by accident?\n\nAuthor's Checklist\n\n manual testing with affected JDK (11.0.5)\n manual testing with unaffected JDK (8.0.x)\n\nRelated issues\n\nCloses #1080", "createdAt": "2020-04-21T10:15:44Z", "url": "https://github.com/elastic/apm-agent-java/pull/1149", "merged": true, "mergeCommit": {"oid": "3c4f6e0c1dc9e5e863e4a8621f36586cd6f7c6b2"}, "closed": true, "closedAt": "2020-04-23T12:21:09Z", "author": {"login": "SylvainJuge"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZwQBeAH2gAyNDA2NTc3NjE2OmQ4M2E0MDk3NTFlNzFjMTk0NTYxYjI0M2RhNjhlY2JkMzA2ODc4YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcabg6dAFqTM5OTAyMTYzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d83a409751e71c194561b243da68ecbd306878a0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d83a409751e71c194561b243da68ecbd306878a0", "committedDate": "2020-04-21T09:27:08Z", "message": "add fallback for tls 1.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c624187998f17542d5eb428f46feb9d99df1eabc", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c624187998f17542d5eb428f46feb9d99df1eabc", "committedDate": "2020-04-21T10:00:33Z", "message": "remove java8 API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9423864c3d9b9aeeade54b610a0ce0bbbbd3f943", "committedDate": "2020-04-21T10:17:28Z", "message": "update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODcxMzc5", "url": "https://github.com/elastic/apm-agent-java/pull/1149#pullrequestreview-397871379", "createdAt": "2020-04-22T06:14:22Z", "commit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxNDoyMlrOGJlGrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxNDoyMlrOGJlGrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5ODI4Ng==", "bodyText": "Seems like we're re-triggering this exception for every request to APM Server, right? Could we exclude TLSv1.3 if we know it triggers the bug on the current JVM?", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412698286", "createdAt": "2020-04-22T06:14:22Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    private static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+            if (enabledProtocols.contains(TLS_v_1_3) && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9423864c3d9b9aeeade54b610a0ce0bbbbd3f943"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a057f906f1d634c61e1d9e8a070cd145c6f5ff", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e5a057f906f1d634c61e1d9e8a070cd145c6f5ff", "committedDate": "2020-04-22T09:46:21Z", "message": "post-review changes + add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/bedbd4e9e5f9fb129145494dd11c144aac14e7a2", "committedDate": "2020-04-22T10:11:56Z", "message": "reuse socket factories when possible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTE0Nzk0", "url": "https://github.com/elastic/apm-agent-java/pull/1149#pullrequestreview-398114794", "createdAt": "2020-04-22T11:56:55Z", "commit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1Njo1NVrOGJyctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo1ODo0MlrOGJyg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNjkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on apm-server as a workaround\");\n          \n          \n            \n                                logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on APM Server as a workaround (apm-server.ssl.supported_protocols)\");", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412916917", "createdAt": "2020-04-22T11:56:55Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.report.ssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketImplFactory;\n+import java.nio.channels.SocketChannel;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+class TLSFallbackSSLSocket extends SSLSocket {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TLSFallbackSSLSocket.class);\n+\n+    static final String TLS_v_1_3 = \"TLSv1.3\";\n+\n+    private final TLSFallbackSSLSocketFactory socketFactory;\n+\n+    private SSLSocket socket;\n+\n+    TLSFallbackSSLSocket(SSLSocket socket, TLSFallbackSSLSocketFactory socketFactory) {\n+        this.socket = socket;\n+        this.socketFactory = socketFactory;\n+    }\n+\n+    @Override\n+    public void startHandshake() throws IOException {\n+\n+        // known JDK bug: JDK-8236039\n+        // automatically fallback to another protocol when triggered\n+\n+        Set<String> enabledProtocols = new HashSet<>(Arrays.asList(socket.getEnabledProtocols()));\n+        boolean hasTLS13 = enabledProtocols.contains(TLS_v_1_3);\n+        AtomicBoolean skipTLS13 = socketFactory.skipTLS13();\n+        if (hasTLS13 && skipTLS13.get()) {\n+            enabledProtocols.remove(TLS_v_1_3);\n+            socket.setEnabledProtocols(enabledProtocols.toArray(new String[0]));\n+            hasTLS13 = false;\n+        }\n+        try {\n+            socket.startHandshake();\n+        } catch (SSLHandshakeException e) {\n+\n+            if (hasTLS13 && e.getMessage().contains(\"should not be presented in\")) {\n+\n+                boolean hasBeenWarned = skipTLS13.getAndSet(true);\n+                if (!hasBeenWarned) {\n+                    logger.warn(\"Workaround for JDK Bug JDK-8236039 applied, will connect without TLS v1.3. Update JRE/JDK to fix this, or disable TLS v1.3 on apm-server as a workaround\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxNzk4Mw==", "bodyText": "Why don't we create our own SSLSocketFactory from scratch?", "url": "https://github.com/elastic/apm-agent-java/pull/1149#discussion_r412917983", "createdAt": "2020-04-22T11:58:42Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerClient.java", "diffHunk": "@@ -121,6 +122,11 @@ private void setServerUrls(List<URL> serverUrls) {\n         return copy;\n     }\n \n+    private static void tlsFallback(HttpsURLConnection connection) {\n+        SSLSocketFactory newFactory = SslUtils.getTLSFallbackSocketFactory(connection.getSSLSocketFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedbd4e9e5f9fb129145494dd11c144aac14e7a2"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f6e2878e92ae2ebbcfe8a4f6b189dabf122798", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/20f6e2878e92ae2ebbcfe8a4f6b189dabf122798", "committedDate": "2020-04-22T12:03:36Z", "message": "Update apm-agent-core/src/main/java/co/elastic/apm/agent/report/ssl/TLSFallbackSSLSocket.java\n\nCo-Authored-By: Felix Barnsteiner <felixbarny@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d187ae0a32ee904a9998b722d47bd2732cd599", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f3d187ae0a32ee904a9998b722d47bd2732cd599", "committedDate": "2020-04-23T08:50:55Z", "message": "remove weakmap & simpler factory init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179edb3ef85f9f825c85f9c03f35db3f5d4cc7d1", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/179edb3ef85f9f825c85f9c03f35db3f5d4cc7d1", "committedDate": "2020-04-23T08:52:57Z", "message": "Merge branch 'tls13-fallback' of github.com:SylvainJuge/apm-agent-java into tls13-fallback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "493d5d726bbf7daa3bc965a5129384f92706a3a0", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/493d5d726bbf7daa3bc965a5129384f92706a3a0", "committedDate": "2020-04-23T09:11:23Z", "message": "do not use default factory for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb8512c600fb95a9723201939c759fa65152ac2", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fdb8512c600fb95a9723201939c759fa65152ac2", "committedDate": "2020-04-23T10:03:05Z", "message": "fix failing test & revert to wrap without map"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDIxNjM2", "url": "https://github.com/elastic/apm-agent-java/pull/1149#pullrequestreview-399021636", "createdAt": "2020-04-23T11:51:30Z", "commit": {"oid": "fdb8512c600fb95a9723201939c759fa65152ac2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3939, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}