{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTA1OTE2", "number": 1082, "title": "Enhance JDBC connection string parsing for multiple hosts", "bodyText": "What does this PR do?\n\nEnhance the JDBC connection string parser to support dedicated syntaxes for multiple hosts in Oracle, MySQL and MariaDB.\nChecklist\n\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\n\n\n\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n\n\n\n I have updated CHANGELOG.asciidoc\n\nRelated issues\n\nCloses #1031", "createdAt": "2020-03-12T08:29:44Z", "url": "https://github.com/elastic/apm-agent-java/pull/1082", "merged": true, "mergeCommit": {"oid": "c99e0826f0127defd73069513003599e1500d259"}, "closed": true, "closedAt": "2020-03-15T08:58:42Z", "author": {"login": "eyalkoren"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM3aZVgH2gAyMzg3MTA1OTE2OjM5NGZkYTUwODNhMDZlMDBhYWIyNzVlYWU2NThlYTdhZDc5YzZjYjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcN0x2wgH2gAyMzg3MTA1OTE2OjQyMGFhNTc4ZjIzYmM4MjRhNmQ5ZjZlMWUxNjJkMmE1N2FlNDg1Yjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/394fda5083a06e00aab275eae658ea7ad79c6cb8", "committedDate": "2020-03-12T08:26:47Z", "message": "Enhance JDBC connection string parsing for multiple hosts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzE5Mjg2", "url": "https://github.com/elastic/apm-agent-java/pull/1082#pullrequestreview-374319286", "createdAt": "2020-03-13T13:57:05Z", "commit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1NzowNVrOF2EnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowMzowN1rOF2E1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MzA0MQ==", "bodyText": "[minor] maybe return null when HostPort.host == null || HostPort.port < 0", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392243041", "createdAt": "2020-03-13T13:57:05Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDExNg==", "bodyText": "[minor] maybe naming this method with Oracle might be relevant as it's very Oracle-specific.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392244116", "createdAt": "2020-03-13T13:58:59Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MzA0MQ=="}, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDkxOQ==", "bodyText": "do we really want to continue parsing in case of error ?", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392244919", "createdAt": "2020-03-13T14:00:16Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -165,36 +175,136 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n                 String host = null;\n                 int port = DEFAULT_PORT;\n \n-                // try looking for a //host:port/instance pattern\n-                HostPort hostPort = parseHostPort(connectionUrl);\n-                if (hostPort.host != null) {\n-                    host = hostPort.host;\n-                    if (hostPort.port > 0) {\n-                        port = hostPort.port;\n+                HostPort hostPort;\n+                if (connectionUrl.startsWith(\"(\")) {\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    // (DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=service_name)))\n+                    try {\n+                        hostPort = parseAddressList(connectionUrl);\n+                        if (hostPort.host != null) {\n+                            host = hostPort.host;\n+                            if (hostPort.port > 0) {\n+                                port = hostPort.port;\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"Failed to parse address from this address list: {}\", connectionUrl);\n+                        port = -1;\n                     }\n                 } else {\n-                    // Thin driver host:port:sid syntax:\n-                    // myhost:666:instance\n-                    // myhost:instance\n-                    // thin:myhost:port:instance\n-                    if (connectionUrl.startsWith(\"thin:\")) {\n-                        connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                    // try looking for a //host:port/instance pattern\n+                    hostPort = parseHostPort(connectionUrl);\n+                    if (hostPort.host != null) {\n+                        host = hostPort.host;\n+                        if (hostPort.port > 0) {\n+                            port = hostPort.port;\n+                        }\n+                    } else {\n+                        // Thin driver host:port:sid syntax:\n+                        // myhost:666:instance\n+                        // myhost:instance\n+                        // thin:myhost:port:instance\n+                        if (connectionUrl.startsWith(\"thin:\")) {\n+                            connectionUrl = connectionUrl.substring(\"thin:\".length());\n+                        }\n+\n+                        String[] parts = connectionUrl.split(\":\");\n+                        if (parts.length > 0) {\n+                            host = parts[0];\n+                        }\n+                        if (parts.length > 1) {\n+                            try {\n+                                port = Integer.parseInt(parts[1]);\n+                            } catch (NumberFormatException e) {\n+                                // apparently not a port...\n+                            }\n+                        }\n                     }\n+                }\n \n-                    String[] parts = connectionUrl.split(\":\");\n-                    if (parts.length > 0) {\n-                        host = parts[0];\n+                return new ConnectionMetaData(dbVendor, host, port, user);\n+            }\n+\n+            private HostPort parseAddressList(String connectionUrl) {\n+                TreeNode parsedTree = null;\n+                Deque<TreeNode> stack = new ArrayDeque<>();\n+                StringBuilder currentValueBuffer = null;\n+                for (char c : connectionUrl.toLowerCase().toCharArray()) {\n+                    switch (c) {\n+                        case '(': {\n+                            TreeNode treeNode = new TreeNode();\n+                            if (stack.isEmpty()) {\n+                                parsedTree = treeNode;\n+                            } else {\n+                                stack.peek().childNodes.add(treeNode);\n+                            }\n+                            stack.push(treeNode);\n+                            currentValueBuffer = treeNode.name;\n+                            break;\n+                        }\n+                        case ')': {\n+                            stack.pop();\n+                            // continue to do the same as finding `=`\n+                        }\n+                        case '=': {\n+                            if (stack.isEmpty()) {\n+                                currentValueBuffer = null;\n+                            } else {\n+                                currentValueBuffer = stack.peek().value;\n+                            }\n+                            break;\n+                        }\n+                        default: {\n+                            if (currentValueBuffer == null) {\n+                                logger.warn(\"Failed to parse Oracle DB address list from: {}\", connectionUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NjY2OQ==", "bodyText": "[minor] same here, having a null return value would avoid duplication of the null check and port > 0 below.", "url": "https://github.com/elastic/apm-agent-java/pull/1082#discussion_r392246669", "createdAt": "2020-03-13T14:03:07Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/helper/ConnectionMetaData.java", "diffHunk": "@@ -208,7 +318,16 @@ ConnectionMetaData parse(String connectionUrl, String user) {\n         MYSQL(\"mysql\") {\n             @Override\n             ConnectionMetaData parse(String connectionUrl, String user) {\n-                return ConnectionUrlParser.defaultParse(connectionUrl, dbVendor, 3306, user);\n+                String host = \"localhost\";\n+                int port = 3306;\n+                HostPort hostPort = parseMySqlFlavor(connectionUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394fda5083a06e00aab275eae658ea7ad79c6cb8"}, "originalPosition": 205}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420aa578f23bc824a6d9f6e1e162d2a57ae485b9", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/420aa578f23bc824a6d9f6e1e162d2a57ae485b9", "committedDate": "2020-03-15T07:56:37Z", "message": "Applying review suggestions and CHANGELOG"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3886, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}