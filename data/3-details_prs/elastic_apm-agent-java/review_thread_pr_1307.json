{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjY5Mjgz", "number": 1307, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMTo1OFrOEXe3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo1Nzo1MVrOEccE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU4MzcwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMTo1OFrOG_S5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowMDoyNlrOG_ysNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzE1Nw==", "bodyText": "Trying to load the instrumentations of this module would fail of the agent is attached to a Java 7 JVM, for example. But maybe that can easily be fixed by just catching the java.lang.UnsupportedClassVersionError in co.elastic.apm.agent.util.DependencyInjectingServiceLoader#instantiate(java.lang.ClassLoader, java.lang.String). That would be quite nice.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023157", "createdAt": "2020-08-12T06:01:58Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-agent-plugins</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.17.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-httpclient11-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>11</source>\n+                    <target>11</target>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Mzk4OA==", "bodyText": "I added exception handling to DependencyInjectingServiceLoader#instantiate", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543988", "createdAt": "2020-08-12T21:00:26Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-agent-plugins</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.17.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-httpclient11-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>11</source>\n+                    <target>11</target>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzE1Nw=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU4NzE1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMzozOVrOG_S7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNzo1OFrOG_twcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzY3OQ==", "bodyText": "don't depend on the exact internal name. instead, use hasSuperType(named(\"java.net.http.HttpClient\")) and add a pre matcher with nameContains(\"HttpClient\")", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023679", "createdAt": "2020-08-12T06:03:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzE1Mw==", "bodyText": "fixed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469463153", "createdAt": "2020-08-12T18:37:58Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzY3OQ=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU4ODM1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNDoxMlrOG_S8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0MDoyNFrOG_t1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg2NA==", "bodyText": "rely on the HttpRequest#header instrumentation here as well instead of cloning the request", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023864", "createdAt": "2020-08-12T06:04:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NDUyNA==", "bodyText": "sorry, I should have deleted this instrumentation. Now I am working on it", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469464524", "createdAt": "2020-08-12T18:40:24Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg2NA=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU4OTYzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNDo0M1rOG_S9OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1NTowN1rOG_yg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDA1Nw==", "bodyText": "replace with tracer.getActiveExitSpan()", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024057", "createdAt": "2020-08-12T06:04:43Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTEwOQ==", "bodyText": "replaced", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541109", "createdAt": "2020-08-12T20:55:07Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDA1Nw=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU5MzMwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNjowOFrOG_S_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1NToxNFrOG_yhNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDU5Mg==", "bodyText": "check for null", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024592", "createdAt": "2020-08-12T06:06:08Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort())\n+                .activate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTE3Mg==", "bodyText": "added check", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541172", "createdAt": "2020-08-12T20:55:14Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort())\n+                .activate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDU5Mg=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU5NDE2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNjoyOFrOG_S_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxOToxNDoxNlrOHBUk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDcyNg==", "bodyText": "Rename so the name doesn't clash with co.elastic.apm.agent.http.client.HttpClientHelper", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024726", "createdAt": "2020-08-12T06:06:28Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice\n+public class HttpClientHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0Nzc2Nw==", "bodyText": "renamed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471147767", "createdAt": "2020-08-16T19:14:16Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice\n+public class HttpClientHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDcyNg=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU5NjE0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNzoxN1rOG_TBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1NjozOVrOG_ykTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTAyNQ==", "bodyText": "When using indy plugins, this annotation is not needed. You can even make the class package-private if you want to.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025025", "createdAt": "2020-08-12T06:07:17Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MTk2NQ==", "bodyText": "deleted annotation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469541965", "createdAt": "2020-08-12T20:56:39Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTAyNQ=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDU5NzkwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowODowN1rOG_TCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1ODoyNlrOG_yn5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTMwMA==", "bodyText": "add pre-matcher to speed up matching nameContains(\"HttpClient\")", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025300", "createdAt": "2020-08-12T06:08:07Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {\n+\n+        }\n+\n+        @Nonnull\n+        @AssignTo.Return\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static HttpHeaders onAfterExecute(@Advice.Return @Nonnull final HttpHeaders httpHeaders) {\n+            Span span = tracer.getActiveSpan();\n+            if (span == null) {\n+                return httpHeaders;\n+            }\n+            Map<String, List<String>> headersMap = new LinkedHashMap<>(httpHeaders.map());\n+            span.propagateTraceContext(headersMap, HttpClientRequestPropertyAccessor.instance());\n+            return HttpHeaders.of(headersMap, (x, y) -> true);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Mjg4Ng==", "bodyText": "added pre matcher filter", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469542886", "createdAt": "2020-08-12T20:58:26Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {\n+\n+        }\n+\n+        @Nonnull\n+        @AssignTo.Return\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static HttpHeaders onAfterExecute(@Advice.Return @Nonnull final HttpHeaders httpHeaders) {\n+            Span span = tracer.getActiveSpan();\n+            if (span == null) {\n+                return httpHeaders;\n+            }\n+            Map<String, List<String>> headersMap = new LinkedHashMap<>(httpHeaders.map());\n+            span.propagateTraceContext(headersMap, HttpClientRequestPropertyAccessor.instance());\n+            return HttpHeaders.of(headersMap, (x, y) -> true);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTMwMA=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDYwNDMwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/resources/META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoxMDozOVrOG_TF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1ODo0MFrOG_yobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjI2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation\n          \n          \n            \n            co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation\n          \n          \n            \n            co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026264", "createdAt": "2020-08-12T06:10:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/resources/META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation", "diffHunk": "@@ -0,0 +1,2 @@\n+co.elastic.apm.agent.httpclient.HttpClientInstrumentation\n+co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzAyMA==", "bodyText": "added HttpClientAsyncInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543020", "createdAt": "2020-08-12T20:58:40Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/resources/META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation", "diffHunk": "@@ -0,0 +1,2 @@\n+co.elastic.apm.agent.httpclient.HttpClientInstrumentation\n+co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjI2NA=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDYwNzEzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoxMjoxMlrOG_THvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1ODo1NFrOG_yo9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjc1MQ==", "bodyText": "the return value is a CompletableFuture, not a HttpResponse.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026751", "createdAt": "2020-08-12T06:12:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzE1Nw==", "bodyText": "fixed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543157", "createdAt": "2020-08-12T20:58:54Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjc1MQ=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDYwODU0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoxMjo1MVrOG_TIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1OToxNVrOG_ypow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjk2MQ==", "bodyText": "You don't have to instrument the CompletableFuture. Just call future.whenComplete", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026961", "createdAt": "2020-08-12T06:12:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\").and(returns(named(\"java.util.concurrent.CompletableFuture\")));\n+    }\n+\n+    @Override\n+    public boolean indyPlugin() {\n+        return true;\n+    }\n+\n+    public abstract static class AbstractCompletableFutureInstrumentation extends HttpClientAsyncInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzMzMQ==", "bodyText": "added calling future.whenComplete", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469543331", "createdAt": "2020-08-12T20:59:15Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\").and(returns(named(\"java.util.concurrent.CompletableFuture\")));\n+    }\n+\n+    @Override\n+    public boolean indyPlugin() {\n+        return true;\n+    }\n+\n+    public abstract static class AbstractCompletableFutureInstrumentation extends HttpClientAsyncInstrumentation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjk2MQ=="}, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk0OTQxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToxODoyN1rOG_8Vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0NDo1N1rOHAdAvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjA5MA==", "bodyText": "These creator interfaces are not needed anymore with indy plugins :)\nJust directly implement the BiConsumer as a lambda.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702090", "createdAt": "2020-08-13T05:18:27Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreator;\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreatorImpl;\n+import co.elastic.apm.agent.httpclient.helper.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            AsyncCallbackCreator callbackCreator = new AsyncCallbackCreatorImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNzM3NQ==", "bodyText": "fixed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470237375", "createdAt": "2020-08-13T20:44:57Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreator;\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreatorImpl;\n+import co.elastic.apm.agent.httpclient.helper.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            AsyncCallbackCreator callbackCreator = new AsyncCallbackCreatorImpl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjA5MA=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk1MTQwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToxOTozOFrOG_8W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDoxNToxNlrOHBNY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw==", "bodyText": "Doesn\u2019t that propagate the error and crash the agent? Or is it caught somewhere else?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702377", "createdAt": "2020-08-13T05:19:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwNTkwOA==", "bodyText": "No, it's not caught anywhere else. Here should I just catch and ignore it?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469705908", "createdAt": "2020-08-13T05:31:53Z", "author": {"login": "kananindzya"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc5NDMwMg==", "bodyText": "Maybe just log your msg on debug. But I'm not sure if that actually works out. Please also try the agent with an older Java version to verify that it doesn't crash.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469794302", "createdAt": "2020-08-13T08:44:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0Nzg2Mg==", "bodyText": "I run on on Java 1.8.0_242 via javaagent and got exception\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - service_name: 'spring-hello-service' (source: elasticapm.properties)\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - disable_instrumentations: '' (source: elasticapm.properties)\n2020-08-14 03:02:47,266 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - application_packages: 'com.kananinja.apm.spring' (source: elasticapm.properties)\n2020-08-14 03:02:47,267 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - log_level: 'DEBUG' (source: elasticapm.properties)\n2020-08-14 03:02:47,267 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - enable_log_correlation: 'true' (source: elasticapm.properties)\n2020-08-14 03:02:47,268 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\nFailed to start agent\njava.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103)\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386)\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)\nCaused by: java.util.ServiceConfigurationError: unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:134)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:112)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:66)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:86)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150)\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136)\n\t... 12 more\nCaused by: java.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:348)\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:118)\n\t... 18 more", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470247862", "createdAt": "2020-08-13T21:05:17Z", "author": {"login": "kananindzya"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1MjM3Ng==", "bodyText": "log msg with error level\n2020-08-14 03:11:12,918 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - enable_log_correlation: 'true' (source: elasticapm.properties)\n2020-08-14 03:11:12,920 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\n2020-08-14 03:11:12,942 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:12,949 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:12,954 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation', unsupported class version error\njava.lang.UnsupportedClassVersionError: co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.Class.forName0(Native Method) ~[?:1.8.0_242]\n\tat java.lang.Class.forName(Class.java:348) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:126) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.instantiate(DependencyInjectingServiceLoader.java:116) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.<init>(DependencyInjectingServiceLoader.java:70) [?:?]\n\tat co.elastic.apm.agent.util.DependencyInjectingServiceLoader.load(DependencyInjectingServiceLoader.java:90) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.loadInstrumentations(ElasticApmAgent.java:158) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initInstrumentation(ElasticApmAgent.java:150) [?:?]\n\tat co.elastic.apm.agent.bci.ElasticApmAgent.initialize(ElasticApmAgent.java:136) [?:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat co.elastic.apm.agent.bci.AgentMain.init(AgentMain.java:103) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat co.elastic.apm.agent.bci.AgentMain.premain(AgentMain.java:57) [elastic-apm-agent-1.18.1.RC1-SNAPSHOT.jar:?]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:386) [?:1.8.0_242]\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401) [?:1.8.0_242]\n2020-08-14 03:11:13,014 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpClientInstrumentation\n2020-08-14 03:11:13,022 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientInstrumentation\n2020-08-14 03:11:13,023 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.ag", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470252376", "createdAt": "2020-08-13T21:14:19Z", "author": {"login": "kananindzya"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0OTgwMg==", "bodyText": "So it did work out to catch the error?\nI'd just log the message String.format(\"unable to instantiate '%s', unsupported class version error: %s\", implementation, e.getMessage()) on DEBUG log, not print the whole stack trace on ERROR. That's because this exception is expected when running the agent on an older JVM.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470449802", "createdAt": "2020-08-14T07:11:16Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMDAxMg==", "bodyText": "Yes, error catched and ignored:\n2020-08-16 02:12:33,350 [main] DEBUG co.elastic.apm.agent.configuration.StartupInfo - log_level: 'DEBUG' (source: Java System Properties)\n2020-08-16 02:12:33,351 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - No plugins dir\n2020-08-16 02:12:33,376 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpClientInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,376 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,377 [main] ERROR co.elastic.apm.agent.util.DependencyInjectingServiceLoader - unable to instantiate 'co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation', unsupported class version error: co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n2020-08-16 02:12:33,431 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpClientInstrumentation\n2020-08-16 02:12:33,439 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientInstrumentation\n2020-08-16 02:12:33,440 [main] DEBUG co.elastic.apm.agent.bci.ElasticApmAgent - Applying instrumentation co.elastic.apm.agent.httpclient.ApacheHttpAsyncClientRedirectInstrumentati", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471030012", "createdAt": "2020-08-15T20:15:16Z", "author": {"login": "kananindzya"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw=="}, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTgyNjY0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/test/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxODo1N1rOHAqKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowNjo1MFrOHA6T5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MjgzNw==", "bodyText": "Why is this necessary? Doesn't this fail on circular redirects? If so, override the test method to just skip it.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470452837", "createdAt": "2020-08-14T07:18:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/test/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import org.junit.Before;\n+\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class HttpClientAsyncInstrumentationTest extends AbstractHttpClientInstrumentationTest {\n+    private HttpClient client;\n+\n+    @Before\n+    public void setUp() {\n+        client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NORMAL).build();\n+    }\n+\n+    @Override\n+    protected void performGet(String path) throws Exception {\n+        HttpRequest request = HttpRequest.newBuilder()\n+            .uri(URI.create(path))\n+            .build();\n+        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).get();\n+    }\n+\n+    @Override\n+    protected boolean isIpv6Supported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void assertCircularRedirect() {\n+        assertThat(reporter.getSpans().get(0).getContext().getHttp().getStatusCode()).isEqualTo(303);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzQxMw==", "bodyText": "Yes, this fail on circluar redirects.\nOk, I overrided this test method.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470717413", "createdAt": "2020-08-14T16:06:50Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/test/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import org.junit.Before;\n+\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class HttpClientAsyncInstrumentationTest extends AbstractHttpClientInstrumentationTest {\n+    private HttpClient client;\n+\n+    @Before\n+    public void setUp() {\n+        client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NORMAL).build();\n+    }\n+\n+    @Override\n+    protected void performGet(String path) throws Exception {\n+        HttpRequest request = HttpRequest.newBuilder()\n+            .uri(URI.create(path))\n+            .build();\n+        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).get();\n+    }\n+\n+    @Override\n+    protected boolean isIpv6Supported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void assertCircularRedirect() {\n+        assertThat(reporter.getSpans().get(0).getContext().getHttp().getStatusCode()).isEqualTo(303);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MjgzNw=="}, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTgzMDcyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoyMDoyNFrOHAqMvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowNzoxNlrOHA6UvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MzQzNw==", "bodyText": "Can this be removed?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453437", "createdAt": "2020-08-14T07:20:24Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzYyOA==", "bodyText": "Removed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470717628", "createdAt": "2020-08-14T16:07:16Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MzQzNw=="}, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTgzMzAxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoyMToxM1rOHAqOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjowODoxNFrOHA6WvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Mzc2NA==", "bodyText": "nit: better return here to reduce the level of nesting", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453764", "createdAt": "2020-08-14T07:21:13Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = tracer.getActiveExitSpan();\n+            if (span != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxODE0MQ==", "bodyText": "fixed", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470718141", "createdAt": "2020-08-14T16:08:14Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = tracer.getActiveExitSpan();\n+            if (span != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Mzc2NA=="}, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTg0NzM5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoyNjoyMVrOHAqWZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoyNjoyMVrOHAqWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1NTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n          \n          \n            \n                            try {\n          \n          \n            \n                                if (response != null) {\n          \n          \n            \n                                    int statusCode = response.statusCode();\n          \n          \n            \n                                    activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                }\n          \n          \n            \n                                activeSpan.captureException(throwable);\n          \n          \n            \n                            } finally {\n          \n          \n            \n                                activeSpan.end();\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete(callback);\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete((response, throwable) -> {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    if (response != null) {\n          \n          \n            \n                                        int statusCode = response.statusCode();\n          \n          \n            \n                                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    activeSpan.captureException(throwable);\n          \n          \n            \n                                } finally {\n          \n          \n            \n                                    activeSpan.end();\n          \n          \n            \n                                }\n          \n          \n            \n                            });", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470455910", "createdAt": "2020-08-14T07:26:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    activeSpan.captureException(throwable);\n+                } finally {\n+                    activeSpan.end();\n+                }\n+            };\n+            if (completableFuture != null) {\n+                completableFuture.whenComplete(callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjE2NjgzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClient11Helper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyODoxOFrOHBhOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNTo0NFrOHEctcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDk4NA==", "bodyText": "why is this necessary?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471354984", "createdAt": "2020-08-17T09:28:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClient11Helper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import javax.annotation.Nullable;\n+\n+public class HttpClient11Helper {\n+\n+    private HttpClient11Helper() {\n+    }\n+\n+    @Nullable\n+    protected static CharSequence computeHostName(@Nullable String originalHostName) {\n+        CharSequence hostName = originalHostName;\n+        if (originalHostName != null && originalHostName.contains(\":\") && !originalHostName.startsWith(\"[\")) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.setLength(0);\n+            sb.append(\"[\").append(originalHostName).append(\"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjczNw==", "bodyText": "deleted", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r474426737", "createdAt": "2020-08-21T06:05:44Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClient11Helper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import javax.annotation.Nullable;\n+\n+public class HttpClient11Helper {\n+\n+    private HttpClient11Helper() {\n+    }\n+\n+    @Nullable\n+    protected static CharSequence computeHostName(@Nullable String originalHostName) {\n+        CharSequence hostName = originalHostName;\n+        if (originalHostName != null && originalHostName.contains(\":\") && !originalHostName.startsWith(\"[\")) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.setLength(0);\n+            sb.append(\"[\").append(originalHostName).append(\"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDk4NA=="}, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjIwODg0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTo0MDowMVrOHBhnzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowNTo0MFrOHEctWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2MTQ4Nw==", "bodyText": "Would it be possible to use co.elastic.apm.agent.http.client.HttpClientHelper#startHttpClientSpan(co.elastic.apm.agent.impl.transaction.AbstractSpan<?>, java.lang.String, java.net.URI, java.lang.CharSequence) i.e. HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri, null)?\nOr are you using the other variant for a particular reason?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471361487", "createdAt": "2020-08-17T09:40:01Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.http.client.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNjcxNQ==", "bodyText": "replaced", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r474426715", "createdAt": "2020-08-21T06:05:40Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.http.client.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2MTQ4Nw=="}, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU1NTk0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-jdk-httpclient-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo1Nzo1MVrOHG-Zbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODowMDoyMFrOHHAcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTgyMg==", "bodyText": "[very minor] potentially return the span here (as an Object) and add a parameter @Nullable @Advice.Enter Object spanObj on the exit advice. This can replace the final Span span = tracer.getActiveExitSpan(); statement in the exit advice.\nThe same can be done in HttpClientInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r477075822", "createdAt": "2020-08-26T06:57:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-jdk-httpclient-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"HttpClient\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"java.net.http.HttpClient\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\")\n+            .and(returns(named(\"java.util.concurrent.CompletableFuture\")))\n+            .and(takesArguments(3));\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+        startSpan(httpRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwOTMxNA==", "bodyText": "done", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r477109314", "createdAt": "2020-08-26T08:00:20Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-jdk-httpclient-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"HttpClient\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"java.net.http.HttpClient\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\")\n+            .and(returns(named(\"java.util.concurrent.CompletableFuture\")))\n+            .and(takesArguments(3));\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+        startSpan(httpRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTgyMg=="}, "originalCommit": {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 178, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}