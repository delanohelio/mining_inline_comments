{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzc5ODU3", "number": 1261, "title": "Dynamic logger ecs reconfig", "bodyText": "What does this PR do?\n\nChecklist\n\n\n This is an enhancement of existing features, or a new feature in existing plugins\n\n I have updated CHANGELOG.asciidoc\n I have added tests that prove my fix is effective or that my feature works\n Added an API method or config option? Document in which version this will be introduced\n I have made corresponding changes to the documentation\n\n\n This is a bugfix\n\n I have updated CHANGELOG.asciidoc\n I have added tests that would fail without this fix\n\n\n This is a new plugin\n\n I have updated CHANGELOG.asciidoc\n My code follows the style guidelines of this project\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated supported-technologies.asciidoc\n I have added information to the Log correlation documentation\n Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? Describe how you made sure that old, non-supported versions are not instrumented by accident.\n\n\n This is something else\n\n I have updated CHANGELOG.asciidoc", "createdAt": "2020-06-30T04:47:44Z", "url": "https://github.com/elastic/apm-agent-java/pull/1261", "merged": true, "mergeCommit": {"oid": "7f62bf127c34bf877cd0e53d741c9175bbb83147"}, "closed": true, "closedAt": "2021-03-17T19:05:00Z", "author": {"login": "eyalkoren"}, "timelineItems": {"totalCount": 92, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU_nKpAH2gAyNDQxNzc5ODU3OjJjMTEwMjcyNTYwNTNmNzllNzhmMWFkMTYzNTUzNWUxNTkzMDllNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeEERXAAH2gAyNDQxNzc5ODU3OmQ0NjIyYWFjMjAwMDAyYzFjZTMzZTgzNjAyZGJiYjEzMjdhYjMwMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c11027256053f79e78f1ad1635535e159309e41", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2c11027256053f79e78f1ad1635535e159309e41", "committedDate": "2020-04-06T14:31:22Z", "message": "Tail files and notify FileChangeListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad565608426e923d8c9ed668f59015e10f7ceb1", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/1ad565608426e923d8c9ed668f59015e10f7ceb1", "committedDate": "2020-04-07T12:57:49Z", "message": "ApmServerLogShipper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd348571f0fc902ff7ce0d7bbeb2b33b3ac2a5d", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/ddd348571f0fc902ff7ce0d7bbeb2b33b3ac2a5d", "committedDate": "2020-04-08T12:24:14Z", "message": "Use log4j2 and ecs-logging-java as opposed to simple-logger\n\nTail that log and send to APM Server to the not yet existing\n/intake/v2/logs endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7677cd9c715ca30a6c9165b785c250429d7919ac", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/7677cd9c715ca30a6c9165b785c250429d7919ac", "committedDate": "2020-04-08T12:24:53Z", "message": "Merge remote-tracking branch 'origin/master' into log-shipper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b20b1372f0cb918ee920a216d578a9e373300d", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/38b20b1372f0cb918ee920a216d578a9e373300d", "committedDate": "2020-04-08T13:04:40Z", "message": "Set service.name and event.dataset in logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8f954ae969dff538648d410a137e79c78758a4", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/9a8f954ae969dff538648d410a137e79c78758a4", "committedDate": "2020-04-09T07:38:55Z", "message": "Store and restore persistent state about file position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b8a2516d9bf067e2dfc0965f7eef04468f6d61", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/13b8a2516d9bf067e2dfc0965f7eef04468f6d61", "committedDate": "2020-04-09T14:27:06Z", "message": "Store and restore persistent state about file position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23aee7caf4954966b3b0780c64270c06251474a", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c23aee7caf4954966b3b0780c64270c06251474a", "committedDate": "2020-04-09T14:27:07Z", "message": "Set rollover policy to size 50M max 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60db4435427c6e59ddce114b34df6abd4635ca24", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/60db4435427c6e59ddce114b34df6abd4635ca24", "committedDate": "2020-04-09T14:27:07Z", "message": "Send file metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52013bbdfa3a48ebbe286d98a0ff45b3ba38abc0", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/52013bbdfa3a48ebbe286d98a0ff45b3ba38abc0", "committedDate": "2020-04-11T07:10:32Z", "message": "Ack/nak state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350440e38c1971f80290345d31e6638781c53476", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/350440e38c1971f80290345d31e6638781c53476", "committedDate": "2020-04-17T07:48:02Z", "message": "Look up file by inode if available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15bc635a15187c8e4d895ff115605bc758c6018e", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/15bc635a15187c8e4d895ff115605bc758c6018e", "committedDate": "2020-04-17T07:48:27Z", "message": "Add log_file_max_size option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225b38971bc00faaa252d82b7f8c421e0dcbc15e", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/225b38971bc00faaa252d82b7f8c421e0dcbc15e", "committedDate": "2020-04-17T15:54:14Z", "message": "No need to set service.name as it's sent in metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb4aeb78100396fa65a4c971ed345f49b5633dc", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/eeb4aeb78100396fa65a4c971ed345f49b5633dc", "committedDate": "2020-04-20T06:24:21Z", "message": "When logging to sout, ship temp log file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c162ba4b8acb1c66e9ea9d3b748b26c9f031ed", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b7c162ba4b8acb1c66e9ea9d3b748b26c9f031ed", "committedDate": "2020-04-20T06:24:46Z", "message": "Merge remote-tracking branch 'origin/master' into log-shipper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2549ffc1c5e9dd24188af700423b6ce2bdc2d60", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a2549ffc1c5e9dd24188af700423b6ce2bdc2d60", "committedDate": "2020-04-22T06:22:49Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc6f9d54a6135b7cc2c9d424c914308f2d409c8", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/adc6f9d54a6135b7cc2c9d424c914308f2d409c8", "committedDate": "2020-04-23T10:48:51Z", "message": "Add shader infrastructure and support for Logback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7eb755af64a6a99bf86b427241708f3d30c733", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fd7eb755af64a6a99bf86b427241708f3d30c733", "committedDate": "2020-04-23T14:27:37Z", "message": "Handling logging packages relocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0f3ba166365c7d5f593d5ba66ea348c9ace8db", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9c0f3ba166365c7d5f593d5ba66ea348c9ace8db", "committedDate": "2020-04-23T14:30:21Z", "message": "pom leftover"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f3111503feb90987cb866a9f3c0875b760c5f86", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1f3111503feb90987cb866a9f3c0875b760c5f86", "committedDate": "2020-06-30T04:14:53Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3f3bb3fead546059133d5007b3502da13812c5", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0c3f3bb3fead546059133d5007b3502da13812c5", "committedDate": "2020-06-30T04:39:59Z", "message": "fix-merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b39b7638d4432af674b91d8f7d6082f6740deb", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e7b39b7638d4432af674b91d8f7d6082f6740deb", "committedDate": "2020-06-30T07:18:39Z", "message": "Removing stale entries from configuration docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023b38dfbf11873145feb374643767a2d3c63b75", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/023b38dfbf11873145feb374643767a2d3c63b75", "committedDate": "2020-07-05T07:57:25Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a4da402a43ba45363894ef74cc67a25bd7c2647", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/4a4da402a43ba45363894ef74cc67a25bd7c2647", "committedDate": "2020-07-05T12:34:10Z", "message": "Update configuration.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd3c98acfa1acd2799b91efdde8eefaab4b6e12c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/fd3c98acfa1acd2799b91efdde8eefaab4b6e12c", "committedDate": "2020-07-05T15:04:51Z", "message": "Add Logback ECS reformatting testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955a59576b5a374c80067e1e6467a5ea1f55392c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/955a59576b5a374c80067e1e6467a5ea1f55392c", "committedDate": "2020-07-07T04:21:53Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b5292ec4848e40b3cee2ee9a3240af01f08a25", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c6b5292ec4848e40b3cee2ee9a3240af01f08a25", "committedDate": "2020-07-07T13:22:11Z", "message": "Add Log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2abc2e3bed679527253a7bcad6dfc6a3767914fe", "committedDate": "2020-07-08T13:30:45Z", "message": "Making Log4j2 instrumentation suitable for 2.10.0+"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODcwODk3", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-444870897", "createdAt": "2020-07-08T15:16:35Z", "commit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjozNVrOGus_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozNTozOFrOGutz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDc2Mg==", "bodyText": "Use the new WeakMapSupplier.createMap(). Also, maybe type to <A, Object>?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451624762", "createdAt": "2020-07-08T15:16:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODYxMg==", "bodyText": "you could do tracer.getMetaData().getService().getName()", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451628612", "createdAt": "2020-07-08T15:21:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL)\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    private final String serviceName;\n+\n+    public AbstractLogShadingHelper(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        serviceName = tracer.getConfig(CoreConfiguration.class).getServiceName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = new WeakConcurrentMap.WithInlinedExpunction<Object, Object>();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    protected abstract boolean isShadingAppender(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender);\n+\n+    // todo: find more accurate service name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzMTM3MA==", "bodyText": "have you considered migrating to indy plugins?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451631370", "createdAt": "2020-07-08T15:25:52Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/Log4j2LogShadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.log4j2;\n+\n+import co.elastic.apm.agent.bci.HelperClassManager;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingInstrumentation;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender;\n+import org.apache.logging.log4j.core.appender.FileAppender;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class Log4j2LogShadingInstrumentation extends AbstractLogShadingInstrumentation {\n+\n+    // Logback class referencing is allowed thanks to type erasure\n+    @VisibleForAdvice\n+    @Nullable\n+    public static HelperClassManager<AbstractLogShadingHelper<AbstractOutputStreamAppender<?>>> helperClassManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzNzkwMQ==", "bodyText": "Although this makes it more readable it probably has to be set to false so it works with the logs intake API which is currently spec'd to assume ND-JSON", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451637901", "createdAt": "2020-07-08T15:35:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/log4j2/helper/Log4j2LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.log4j2.helper;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.log4j2.EcsLayout;\n+import org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy;\n+import org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;\n+import org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy;\n+import org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;\n+import org.apache.logging.log4j.core.config.DefaultConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.Method;\n+\n+\n+public class Log4j2LogShadingHelper extends AbstractLogShadingHelper<AbstractOutputStreamAppender<?>> {\n+\n+    public static final String ECS_SHADE_APPENDER = \"EcsShadeAppender\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j2LogShadingHelper.class);\n+\n+    public Log4j2LogShadingHelper(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    protected boolean isShadingAppender(AbstractOutputStreamAppender<?> appender) {\n+        //noinspection StringEquality\n+        return appender.getName() == ECS_SHADE_APPENDER;\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected AbstractOutputStreamAppender<?> createAndConfigureAppender(AbstractOutputStreamAppender<?> originalAppender) {\n+\n+        String logFile = null;\n+\n+        // Using class names and reflection in order to avoid version sensitivity\n+        String appenderClassName = originalAppender.getClass().getName();\n+        if (appenderClassName.equals(\"org.apache.logging.log4j.core.appender.FileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RollingFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RandomAccessFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender\") ||\n+            appenderClassName.equals(\"org.apache.logging.log4j.core.appender.MemoryMappedFileAppender\")) {\n+            try {\n+                Method getFileNameMethod = originalAppender.getClass().getDeclaredMethod(\"getFileName\");\n+                logFile = (String) getFileNameMethod.invoke(originalAppender);\n+            } catch (Exception e) {\n+                logger.error(\"Failed to obtain log file name from file appender\", e);\n+            }\n+        }\n+\n+        if (logFile == null) {\n+            return null;\n+        }\n+\n+        String shadeFile = Utils.computeShadeLogFilePath(logFile);\n+\n+        EcsLayout ecsLayout = EcsLayout.newBuilder()\n+            .setServiceName(getServiceName())\n+            .setIncludeMarkers(false)\n+            .setIncludeOrigin(false)\n+            .setStackTraceAsArray(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzODI0MA==", "bodyText": "probably better to set to false, see above", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r451638240", "createdAt": "2020-07-08T15:35:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/src/main/java/co/elastic/apm/agent/log/shader/logback/helper/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader.logback.helper;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import ch.qos.logback.core.util.FileSize;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+public class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();;\n+\n+    public LogbackLogShadingHelper(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    protected boolean isShadingAppender(FileAppender<ILoggingEvent> appender) {\n+        return appender.getContext() == defaultLoggerContext;\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        // todo read from configuration??\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abc2e3bed679527253a7bcad6dfc6a3767914fe"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "887cd5852605ac4ffc2a54f056befe2729888f85", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/887cd5852605ac4ffc2a54f056befe2729888f85", "committedDate": "2020-07-28T05:51:47Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f024fe1eddb7e44b3e4ea74a8b572f3a8ce6a736", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f024fe1eddb7e44b3e4ea74a8b572f3a8ce6a736", "committedDate": "2020-07-30T02:06:29Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902b859d62769737709981a4914a75dc8f67ab48", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/902b859d62769737709981a4914a75dc8f67ab48", "committedDate": "2020-07-30T02:31:33Z", "message": "Add support for log4j 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75086b63a7e28bba0bc12fc1445578e31ab244a1", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/75086b63a7e28bba0bc12fc1445578e31ab244a1", "committedDate": "2020-07-30T05:25:31Z", "message": "Updated configuration.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1edadc10b6fe0c7a42e0e864e95ef1c65c98f2", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8d1edadc10b6fe0c7a42e0e864e95ef1c65c98f2", "committedDate": "2020-08-23T07:39:13Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb64bad3eaf7eeb7a859938f3f65fa3c9b7e8d1", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7eb64bad3eaf7eeb7a859938f3f65fa3c9b7e8d1", "committedDate": "2020-08-23T14:14:05Z", "message": "Refactoring to Indy plugin and usage of new SDK APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a1e0dad97167ef70d220519fb2c27426afaea7", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/66a1e0dad97167ef70d220519fb2c27426afaea7", "committedDate": "2020-08-24T17:50:31Z", "message": "Splitting plugin to modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32161b59ae6fb4c1a376916ae25a91c1c9d96833", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/32161b59ae6fb4c1a376916ae25a91c1c9d96833", "committedDate": "2020-09-02T15:43:03Z", "message": "Fixing ECS shading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b071aa315919beb2cc5b8ca97a7f8e742345b347", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b071aa315919beb2cc5b8ca97a7f8e742345b347", "committedDate": "2020-09-13T07:43:33Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c58a5ce48fe625b6d7111fd35b24d4b146c7c32e", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c58a5ce48fe625b6d7111fd35b24d4b146c7c32e", "committedDate": "2020-09-13T10:14:59Z", "message": "Updating agent versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00d6cc5fe060a09a8594ff9f62e7d9289449636", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f00d6cc5fe060a09a8594ff9f62e7d9289449636", "committedDate": "2020-09-14T09:39:49Z", "message": "Remove ThreadLocal delegator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b79cf6c97570325427d490ceed95c2fba0b13eb", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5b79cf6c97570325427d490ceed95c2fba0b13eb", "committedDate": "2020-09-14T16:50:08Z", "message": "Adding config options and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e0a7c8f3e61750e9ffd4beaa6f32e9dcd9491d", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/40e0a7c8f3e61750e9ffd4beaa6f32e9dcd9491d", "committedDate": "2020-09-16T07:13:50Z", "message": "Updating configuration.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d8f36a8e58b4235d375831c25d6e2381cfdcbf", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/60d8f36a8e58b4235d375831c25d6e2381cfdcbf", "committedDate": "2020-09-16T07:21:47Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333ded80587f58ffd2f4d66d23e0408b647f3ab2", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/333ded80587f58ffd2f4d66d23e0408b647f3ab2", "committedDate": "2020-09-16T12:54:04Z", "message": "Config option changes and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a1830968b8f2a3cb80f6fbb5227cc76057b896e", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6a1830968b8f2a3cb80f6fbb5227cc76057b896e", "committedDate": "2020-09-16T13:27:48Z", "message": "Finalizing shade log rolling (disabled by default)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c20c59a3e2f5733e885cecd8a969255bbe03210", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8c20c59a3e2f5733e885cecd8a969255bbe03210", "committedDate": "2020-09-16T13:41:56Z", "message": "Fixing docs link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b1286abc62cfc54f182366e6099a958778ad3c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e9b1286abc62cfc54f182366e6099a958778ad3c", "committedDate": "2020-10-18T08:36:35Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09", "committedDate": "2020-10-18T08:56:43Z", "message": "Update version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MzQyODk3", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-549342897", "createdAt": "2020-12-10T15:55:26Z", "commit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo1NToyN1rOIDQTkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyMDozN1rOIHKmdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4Mzc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>0.4.0</version>\n          \n          \n            \n                        <version>1.0.0.RC1</version>", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r540283794", "createdAt": "2020-12-10T15:55:27Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/pom.xml", "diffHunk": "@@ -53,7 +53,7 @@\n         <dependency>\n             <groupId>co.elastic.logging</groupId>\n             <artifactId>log4j2-ecs-layout</artifactId>\n-            <version>0.3.0</version>\n+            <version>0.4.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NzU2Nw==", "bodyText": "This overlaps/conflicts with elastic/apm#373 as the replacement should not only happen for file appenders but for any appenders that use a plain-text formatter.\nWe might have to do that at the time the formatter is set on the appender as we need the appender name to set the event.dataset (${service.name}.${appender.name}). This implies that it would not work for runtime attachment. But I think that's fair as it ensures that there's no mix of plain-text and JSON logs.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544377567", "createdAt": "2020-12-16T15:12:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_enabled\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .description(\"A boolean specifying whether the agent should automatically reformat application logs \\n\" +\n+            \"into ECS-compatible JSON files, suitable for ingestion into Elasticsearch for further analysis. \\n\" +\n+            \"If true, check out additional `log_shading` configurations options.\")\n+        .dynamic(true)\n+        .buildWithDefault(true);\n+\n+    private final ConfigurationOption<Boolean> logShadingReplace = ConfigurationOption.booleanOption()\n+        .key(\"log_shading_replace\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .tags(\"performance\")\n+        .description(\"By default, when Log Shading is enabled, application logs will be duplicated so that the \\n\" +\n+            \"ECS-formatted logs are written to new files having the `.ecs.json` extension. In order to reduce the \\n\" +\n+            \"related overhead, set this option to true to replace the original log files with the ECS-compatible ones.\")\n+        .dynamic(false)\n+        .buildWithDefault(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3ODM0Nw==", "bodyText": "Let's make it clear in the docs that log shading is experimental and may be removed in future releases and that we recommend replacing the plain-text formatters with ECS formatters (elastic/apm#373).\nShould we make the log shading options internal?", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544378347", "createdAt": "2020-12-16T15:12:56Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,38 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<Boolean> logShadingEnabled = ConfigurationOption.booleanOption()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NDYzMA==", "bodyText": "An idea to make the test faster\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     sleep();\n          \n          \n            \n                     await().untilAsserted(() -> new File(getShadeLogFilePath()).length() == 0);", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r544384630", "createdAt": "2020-12-16T15:20:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/test/java/co/elastic/apm/agent/log/shader/LogShadingInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class LogShadingInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    public static final String TRACE_MESSAGE = \"Trace-this\";\n+    public static final String DEBUG_MESSAGE = \"Debug-this\";\n+    public static final String WARN_MESSAGE = \"Warn-this\";\n+    public static final String ERROR_MESSAGE = \"Error-this\";\n+\n+    private final LoggerFacade logger;\n+    private ObjectMapper objectMapper;\n+\n+    public LogShadingInstrumentationTest() {\n+        logger = getLoggerFacade();\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        logger.open();\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+    }\n+\n+    @After\n+    public void closeLogger() {\n+        logger.close();\n+    }\n+\n+    protected abstract LoggerFacade getLoggerFacade();\n+\n+    @Test\n+    public void testSimpleLogShading() throws IOException, ParseException {\n+        String traceId = UUID.randomUUID().toString();\n+        logger.putTraceIdToMdc(traceId);\n+        try {\n+            logger.trace(TRACE_MESSAGE);\n+            logger.debug(DEBUG_MESSAGE);\n+            logger.warn(WARN_MESSAGE);\n+            logger.error(ERROR_MESSAGE);\n+        } finally {\n+            logger.removeTraceIdFromMdc();\n+        }\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(4);\n+\n+        for (int i = 0; i < 4; i++) {\n+            verifyEcsFormat(rawLogLines.get(i), ecsLogLines.get(i), traceId);\n+        }\n+    }\n+\n+    @Test\n+    public void testShadingIntoConfiguredDir() throws IOException, ParseException {\n+        when(config.getConfig(LoggingConfiguration.class).getLogShadingDestinationDir()).thenReturn(\"shade_logs\");\n+        Files.deleteIfExists(Paths.get(getShadeLogFilePath()));\n+        testSimpleLogShading();\n+    }\n+\n+    @Test\n+    public void testLogShadingDisabled() throws IOException, ParseException {\n+        logger.trace(TRACE_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(false);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingEnabled()).thenReturn(true);\n+        logger.error(ERROR_MESSAGE);\n+\n+        ArrayList<String[]> rawLogLines = readRawLogLines();\n+        assertThat(rawLogLines).hasSize(4);\n+\n+        ArrayList<JsonNode> ecsLogLines = readShadeLogFile();\n+        assertThat(ecsLogLines).hasSize(2);\n+        verifyEcsFormat(rawLogLines.get(0), ecsLogLines.get(0), null);\n+        verifyEcsFormat(rawLogLines.get(3), ecsLogLines.get(1), null);\n+    }\n+\n+    @Test\n+    public void testLogShadingReplaceOriginal() throws IOException {\n+        when(config.getConfig(LoggingConfiguration.class).isLogShadingReplaceEnabled()).thenReturn(true);\n+        logger.trace(TRACE_MESSAGE);\n+        logger.debug(DEBUG_MESSAGE);\n+        logger.warn(WARN_MESSAGE);\n+        logger.error(ERROR_MESSAGE);\n+\n+        assertThat(readRawLogLines()).isEmpty();\n+        ArrayList<JsonNode> shadeLogEvents = readShadeLogFile();\n+        assertThat(shadeLogEvents).hasSize(4);\n+        for (JsonNode ecsLogLineTree : shadeLogEvents) {\n+            assertThat(ecsLogLineTree.get(\"process.thread.name\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.level\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"log.logger\")).isNotNull();\n+            assertThat(ecsLogLineTree.get(\"message\")).isNotNull();\n+        }\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile() throws IOException {\n+        return readShadeLogFile(getShadeLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private ArrayList<JsonNode> readShadeLogFile(String shadeLogFilePath) throws IOException {\n+        ArrayList<JsonNode> ecsLogLines = new ArrayList<>();\n+        try (Stream<String> stream = Files.lines(Paths.get(shadeLogFilePath))) {\n+            stream.forEach(line -> {\n+                try {\n+                    ecsLogLines.add(objectMapper.readTree(line));\n+                } catch (JsonProcessingException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+        }\n+        return ecsLogLines;\n+    }\n+\n+    @Nonnull\n+    private ArrayList<String[]> readRawLogLines() throws IOException {\n+        ArrayList<String[]> rawLogLines;\n+        try (Stream<String> stream = Files.lines(getOriginalLogFilePath())) {\n+            rawLogLines = stream.map(line -> line.split(\"\\\\s+\")).collect(Collectors.toCollection(ArrayList::new));\n+        }\n+        return rawLogLines;\n+    }\n+\n+    @Nonnull\n+    private Path getOriginalLogFilePath() {\n+        return Paths.get(logger.getLogFilePath());\n+    }\n+\n+    @Nonnull\n+    private String getShadeLogFilePath() {\n+        return Utils.computeShadeLogFilePath(logger.getLogFilePath());\n+    }\n+\n+    private void verifyEcsFormat(String[] splitRawLogLine, JsonNode ecsLogLineTree, @Nullable String traceId) throws ParseException {\n+        SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        Date rawTimestamp = timestampFormat.parse(splitRawLogLine[0]);\n+        timestampFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date ecsTimestamp = timestampFormat.parse(ecsLogLineTree.get(\"@timestamp\").textValue());\n+        assertThat(rawTimestamp).isEqualTo(ecsTimestamp);\n+        assertThat(splitRawLogLine[1]).isEqualTo(ecsLogLineTree.get(\"process.thread.name\").textValue());\n+        assertThat(splitRawLogLine[2]).isEqualTo(ecsLogLineTree.get(\"log.level\").textValue());\n+        assertThat(splitRawLogLine[3]).isEqualTo(ecsLogLineTree.get(\"log.logger\").textValue());\n+        assertThat(splitRawLogLine[4]).isEqualTo(ecsLogLineTree.get(\"message\").textValue());\n+        assertThat(ecsLogLineTree.get(\"service.name\").textValue()).isEqualTo(tracer.getMetaData().getService().getName());\n+        if (traceId != null) {\n+            assertThat(ecsLogLineTree.get(\"trace.id\").textValue()).isEqualTo(traceId);\n+        } else {\n+            assertThat(ecsLogLineTree.get(\"trace.id\")).isNull();\n+        }\n+    }\n+\n+    /**\n+     * Disabled by default, as this is a very slow test. Can be used for manual testing of shade file rolling.\n+     * Note: logback and log4j2 rollover before appending an event, which means the two log files will contain messages.\n+     * As opposed to those, log4j1 rolls over after appending an event, which means that the active log file (log4j1.log)\n+     * will be empty when the test ends.\n+     */\n+     //@Test\n+     public void testShadeLogRolling() throws IOException {\n+         when(config.getConfig(LoggingConfiguration.class).getLogFileSize()).thenReturn(100L);\n+         logger.trace(\"First line\");\n+         sleep();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6943fa4ff9253dfdcaf0f232f76cdc4c6c59be09"}, "originalPosition": 217}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eefb01b629e8f89451a592cfb94fa792d54a3998", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/eefb01b629e8f89451a592cfb94fa792d54a3998", "committedDate": "2021-02-17T10:17:39Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf629dddb181f18976b17b7ec205f0c98d935e1", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/aaf629dddb181f18976b17b7ec205f0c98d935e1", "committedDate": "2021-02-17T10:21:46Z", "message": "Updage module versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff786bde892306b0578d7210a2a59ac80b626489", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ff786bde892306b0578d7210a2a59ac80b626489", "committedDate": "2021-02-17T11:44:51Z", "message": "Adjusting to new metadata API and fixing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd8b9b517d2f74da749ca63a60cfac4aced7cb1", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ecd8b9b517d2f74da749ca63a60cfac4aced7cb1", "committedDate": "2021-02-17T13:57:30Z", "message": "Enhancing and enabling rolling file tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3000133b6dec3da60aab730b7f57180845cd8979", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3000133b6dec3da60aab730b7f57180845cd8979", "committedDate": "2021-02-17T14:48:38Z", "message": "Extending sleep time in Logback test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661243add0ca0afab4f964f69eb3c0e6d88c9755", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/661243add0ca0afab4f964f69eb3c0e6d88c9755", "committedDate": "2021-02-18T06:40:14Z", "message": "Extend sleep even further :("}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab3fb9ef360d250326a0bc4251ae9ff54e42681", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/3ab3fb9ef360d250326a0bc4251ae9ff54e42681", "committedDate": "2021-02-18T15:30:58Z", "message": "Adding rolling-file-test javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551c75fd0c8c11ec5c4794979cc35f8e799bb2c1", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/551c75fd0c8c11ec5c4794979cc35f8e799bb2c1", "committedDate": "2021-02-21T18:03:13Z", "message": "Changing config options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcf25fd06df8cf1ab88246e7d1d64a78950c3db5", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/dcf25fd06df8cf1ab88246e7d1d64a78950c3db5", "committedDate": "2021-02-22T17:36:48Z", "message": "Adding documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f7ed2c42115f8ffa3cf2218c7b301fcb60d558", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/81f7ed2c42115f8ffa3cf2218c7b301fcb60d558", "committedDate": "2021-02-22T17:36:59Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f4887dec6bfe1e1391460a4f5011faf7945b80", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/18f4887dec6bfe1e1391460a4f5011faf7945b80", "committedDate": "2021-02-24T20:24:19Z", "message": "Adding legacy Logback testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43bb909877f2b0807fdea33c25a34731a4329ab3", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/43bb909877f2b0807fdea33c25a34731a4329ab3", "committedDate": "2021-02-28T09:21:32Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2be2ea2062b03b9b821756dc46480815d09ba1e", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b2be2ea2062b03b9b821756dc46480815d09ba1e", "committedDate": "2021-03-02T05:15:04Z", "message": "Updating gRPC test app version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb920997b136c168549c80de69acfd512f3421b", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8cb920997b136c168549c80de69acfd512f3421b", "committedDate": "2021-03-02T09:01:55Z", "message": "Adding dedicated IndyPluginClassLoaderParent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c21bdee6c3b80fd5adf6a3915fcfd83ebef198", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c7c21bdee6c3b80fd5adf6a3915fcfd83ebef198", "committedDate": "2021-03-02T10:31:28Z", "message": "Adding support for log4j2 2.6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e51e7d6c3c840a6ee98f3ae639c368079536e09", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9e51e7d6c3c840a6ee98f3ae639c368079536e09", "committedDate": "2021-03-02T11:12:42Z", "message": "Adding to supported technologies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "464ff4ba430bf3508b600568e9323af7fd2a10a8", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/464ff4ba430bf3508b600568e9323af7fd2a10a8", "committedDate": "2021-03-02T14:35:44Z", "message": "Setting service name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a682e11632c9cbc5bdc1b525d7c05ae550743c88", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a682e11632c9cbc5bdc1b525d7c05ae550743c88", "committedDate": "2021-03-02T14:38:25Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxOTIwNzA1", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-601920705", "createdAt": "2021-03-02T15:07:11Z", "commit": {"oid": "a682e11632c9cbc5bdc1b525d7c05ae550743c88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxNTowNzoxMVrOIug3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxNTowNzoxMVrOIug3Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTY0Mzg0Mg==", "bodyText": "I have not tested the ref works but I think it makes sense to link to the ecs docs so people can learn more about it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"into ECS-compatible JSON, suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +\n          \n          \n            \n                        \"into {ecs-logging-ref}/index.html[ECS-compatible JSON], suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r585643842", "createdAt": "2021-03-02T15:07:11Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LoggingConfiguration.java", "diffHunk": "@@ -159,8 +159,53 @@ public void assertValid(Boolean value) {\n         })\n         .buildWithDefault(false);\n \n+    private final ConfigurationOption<LogEcsReformatting> logEcsReformatting = ConfigurationOption.enumOption(LogEcsReformatting.class)\n+        .key(\"log_ecs_reformatting\")\n+        .configurationCategory(LOGGING_CATEGORY)\n+        .tags(\"added[1.22.0]\", \"experimental\")\n+        .description(\"Specifying whether and how the agent should automatically reformat application logs \\n\" +\n+            \"into ECS-compatible JSON, suitable for ingestion into Elasticsearch for further Log analysis. \\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682e11632c9cbc5bdc1b525d7c05ae550743c88"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78dd72766716790c8b6665b98b73b577ff6385ab", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/78dd72766716790c8b6665b98b73b577ff6385ab", "committedDate": "2021-03-02T16:23:42Z", "message": "Some enhancements to IndyPluginClassLoaderParent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/27614da50053ee3237a2209dd2fcf67065d5c015", "committedDate": "2021-03-03T08:10:33Z", "message": "Registering the CL as parallel capable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNzU4NDMy", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-602758432", "createdAt": "2021-03-03T10:49:18Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMDo0OToxOFrOIvJqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMDo0OToxOFrOIvJqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMxMjM1Mg==", "bodyText": "As this class has a dependency (LoggingConfiguration), I'd prefer it not to be a static utility class but to have a constructor argument for LoggingConfiguration.\nIt'd simplify UtilsTest (or at least make it more lightweight) in that it doesn't need to extend from AbstractInstrumentationTest and you could just inject a mock instance for  LoggingConfiguration.\nAlso, consider creating a constructor argument for LoggingConfiguration in AbstractLogShadingHelper. Instead of making the implementations singletons, have a look at co.elastic.apm.agent.jdbc.JdbcInstrumentation#getJdbcHelper.\nBy using that pattern, the fact that advices are static does not leak into the rest of the codebase which can use regular constructor-based \"dependency-injection\". I think it makes sense to follow a similar pattern throughout the codebase so that it's more cohesive and can serve as a reference for new plugins.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586312352", "createdAt": "2021-03-03T10:49:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/Utils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+\n+import javax.annotation.Nullable;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class Utils {\n+\n+    private static final String SHADE_FILE_EXTENSION = \".ecs.json\";\n+    private static final LoggingConfiguration config = GlobalTracer.requireTracerImpl().getConfig(LoggingConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNzcxMDQ4", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-602771048", "createdAt": "2021-03-03T11:03:49Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo0OVrOIvKRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo0OVrOIvKRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjI4Ng==", "bodyText": "Why not like this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n          \n          \n            \n                    configuredServiceName = tracer.getConfig(CoreConfiguration.class).getServiceName();", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586322286", "createdAt": "2021-03-03T11:03:49Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNzcxMDgx", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-602771081", "createdAt": "2021-03-03T11:03:51Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo1MVrOIvKRkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMTowMzo1MVrOIvKRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjMyMjMyMg==", "bodyText": "This may yield different service names for the same webapp depending on whether the log has been created inside or outside of an active transaction.\nNot sure what the alternative is, though.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586322322", "createdAt": "2021-03-03T11:03:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {\n+            return null;\n+        }\n+\n+        Object shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        if (shadeAppender == null) {\n+            synchronized (appenderToShadeAppender) {\n+                if (!appenderToShadeAppender.containsKey(originalAppender)) {\n+                    A createdAppender = createAndConfigureAppender(originalAppender, ECS_SHADE_APPENDER_NAME);\n+                    appenderToShadeAppender.put(originalAppender, createdAppender != null ? createdAppender : NULL_APPENDER);\n+                }\n+            }\n+            shadeAppender = appenderToShadeAppender.get(originalAppender);\n+        }\n+        return shadeAppender != NULL_APPENDER ? (A) shadeAppender : null;\n+    }\n+\n+    public void stopShading(A originalAppender) {\n+        synchronized (appenderToShadeAppender) {\n+            Object shadeAppender = appenderToShadeAppender.remove(originalAppender);\n+            if (shadeAppender != null) {\n+                closeShadeAppender((A) shadeAppender);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether we should skip {@code append()} invocations for log events for the given appender.\n+     * Log event appends should be skipped if they are replaced by ECS-formatted events, meaning if:\n+     *  - shading is enabled by configuration AND\n+     *  - replace is enabled by configuration AND\n+     *  - there is a shade appender for this appender (there isn't when this appender IS A shade appender or it is not a file appender)\n+     * @param appender the appender\n+     * @return true if log events should be ignored for the given appender; false otherwise\n+     */\n+    public boolean shouldSkipAppend(A appender) {\n+        return loggingConfiguration.getLogEcsReformatting() == LogEcsReformatting.REPLACE && getOrCreateShadeAppenderFor(appender) != null;\n+    }\n+\n+    public boolean isShadingEnabled() {\n+        LogEcsReformatting logEcsReformatting = loggingConfiguration.getLogEcsReformatting();\n+        return logEcsReformatting == LogEcsReformatting.SHADE || logEcsReformatting== LogEcsReformatting.REPLACE;\n+    }\n+\n+    /**\n+     * Checks whether the given appender is a shading appender, so to avoid recursive shading\n+     *\n+     * @return true if the provide appender is a shading appender; false otherwise\n+     */\n+    private boolean isShadingAppender(A appender) {\n+        //noinspection StringEquality\n+        return getAppenderName(appender) == ECS_SHADE_APPENDER_NAME;\n+    }\n+\n+    protected abstract String getAppenderName(A appender);\n+\n+    @Nullable\n+    protected abstract A createAndConfigureAppender(A originalAppender, String appenderName);\n+\n+    @Nullable\n+    protected String getServiceName() {\n+        String serviceName = configuredServiceName;\n+        AbstractSpan<?> active = tracer.getActive();\n+        if (active != null) {\n+            String runtimeServiceName = active.getTraceContext().getServiceName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyODYxOTk3", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-602861997", "createdAt": "2021-03-03T12:55:35Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMjo1NTozNVrOIvOmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxMjo1NTozNVrOIvOmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjM5MzI2NA==", "bodyText": "Javadoc links to the instrumented method would be helpful on all instrumentations \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586393264", "createdAt": "2021-03-03T12:55:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingInstrumentation;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isBootstrapClassLoader;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class Log4j1LogShadingInstrumentation extends AbstractLogShadingInstrumentation {\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        Collection<String> ret = super.getInstrumentationGroupNames();\n+        ret.add(\"log4j1\");\n+        return ret;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return not(isBootstrapClassLoader())\n+            .and(classLoaderCanLoadClass(\"org.apache.log4j.WriterAppender\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.apache.log4j.WriterAppender\");\n+    }\n+\n+    public static class ShadingInstrumentation extends Log4j1LogShadingInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"subAppend\").and(takesArgument(0, named(\"org.apache.log4j.spi.LoggingEvent\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzMDY3MjE1", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-603067215", "createdAt": "2021-03-03T16:08:23Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjowODoyNFrOIvYCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjowODoyNFrOIvYCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU0NzczMg==", "bodyText": "why do we have to do the shading trick for slf4j on this module? could we just remove this portion of apm-logback-plugin-impl/pom.xml? It does not use any slf4j classes in a context where we need to reference the target cl's slf4j.\n<relocation>\n    <pattern>org.slf4j</pattern>\n    <shadedPattern>co.elastic.apm.agent.logshading.shaded.slf4j</shadedPattern>\n</relocation>", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586547732", "createdAt": "2021-03-03T16:08:24Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-logback-plugin/apm-logback-plugin-impl/src/main/java/co/elastic/apm/agent/logback/LogbackLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logback;\n+\n+import ch.qos.logback.classic.LoggerContext;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.FileAppender;\n+import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n+import ch.qos.logback.core.rolling.RollingFileAppender;\n+import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+import co.elastic.logging.logback.EcsEncoder;\n+\n+class LogbackLogShadingHelper extends AbstractLogShadingHelper<FileAppender<ILoggingEvent>> {\n+\n+    private static final LoggerContext defaultLoggerContext = new LoggerContext();\n+\n+    private static final LogbackLogShadingHelper INSTANCE = new LogbackLogShadingHelper();\n+\n+    static LogbackLogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    private LogbackLogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(FileAppender<ILoggingEvent> appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    protected FileAppender<ILoggingEvent> createAndConfigureAppender(FileAppender<ILoggingEvent> originalAppender, String appenderName) {\n+        RollingFileAppender<ILoggingEvent> shadeAppender = new RollingFileAppender<>();\n+        String shadeFile = Utils.computeShadeLogFilePath(originalAppender.getFile());\n+        shadeAppender.setFile(shadeFile);\n+\n+        EcsEncoder ecsEncoder = new EcsEncoder();\n+        ecsEncoder.setServiceName(getServiceName());\n+        ecsEncoder.setIncludeMarkers(false);\n+        ecsEncoder.setIncludeOrigin(false);\n+        ecsEncoder.setStackTraceAsArray(false);\n+        shadeAppender.setEncoder(ecsEncoder);\n+\n+        FixedWindowRollingPolicy rollingPolicy = new FixedWindowRollingPolicy();\n+        rollingPolicy.setMinIndex(1);\n+        rollingPolicy.setMaxIndex(1);\n+        rollingPolicy.setFileNamePattern(shadeFile + \".%i\");\n+        rollingPolicy.setParent(shadeAppender);\n+        rollingPolicy.setContext(defaultLoggerContext);\n+        rollingPolicy.start();\n+        shadeAppender.setRollingPolicy(rollingPolicy);\n+\n+        SizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new SizeBasedTriggeringPolicy<>();\n+        try {\n+            VersionUtils.setMaxFileSize(triggeringPolicy, getMaxLogFileSize());\n+        } catch (Throwable throwable) {\n+            // We cannot log here because this plugin escapes slf4j package reallocation.\n+            System.out.println(\"Failed to set max file size for log shader file-rolling strategy. Using the default \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzMDg5NDc5", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-603089479", "createdAt": "2021-03-03T16:28:19Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjoyODoxOVrOIvZFPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjoyODoxOVrOIvZFPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU2NDkyNQ==", "bodyText": "There's already a log4j instrumentation group name for Log4j2LoggerErrorCapturingInstrumentation. It's hard to know from just looking at this list what the difference between log4j and log4j1 is.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586564925", "createdAt": "2021-03-03T16:28:19Z", "author": {"login": "felixbarny"}, "path": "docs/configuration.asciidoc", "diffHunk": "@@ -702,7 +704,7 @@ you should add an additional entry to this list (make sure to also include the d\n ==== `disable_instrumentations` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])\n \n A list of instrumentations which should be disabled.\n-Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.\n+Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j`, `log4j1`, `log4j2`, `logback`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `timer-task`, `urlconnection`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzMTEyMzA3", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-603112307", "createdAt": "2021-03-03T16:43:46Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjo0Mzo0NlrOIvZ75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wM1QxNjo0Mzo0NlrOIvZ75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjU3ODkxNw==", "bodyText": "It's more of an idea or a thing to discuss but I think it makes sense to add the appenderName to the event dataset so that it's possible to filter by different log streams of an application.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ecsLayout.setServiceName(getServiceName());\n          \n          \n            \n                            ecsLayout.setServiceName(getServiceName());\n          \n          \n            \n                            ecsLayout.setEventDataset(getServiceName() + \".\" + appenderName);", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r586578917", "createdAt": "2021-03-03T16:43:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log4j1-plugin/src/main/java/co/elastic/apm/agent/log4j1/Log4j1LogShadingHelper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log4j1;\n+\n+import co.elastic.apm.agent.log.shader.AbstractLogShadingHelper;\n+import co.elastic.apm.agent.log.shader.Utils;\n+\n+import co.elastic.logging.log4j.EcsLayout;\n+import org.apache.log4j.FileAppender;\n+import org.apache.log4j.RollingFileAppender;\n+import org.apache.log4j.WriterAppender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+class Log4j1LogShadingHelper extends AbstractLogShadingHelper<WriterAppender> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Log4j1LogShadingHelper.class);\n+\n+    private static final Log4j1LogShadingHelper INSTANCE = new Log4j1LogShadingHelper();\n+\n+    static Log4j1LogShadingHelper instance() {\n+        return INSTANCE;\n+    }\n+\n+    Log4j1LogShadingHelper() {}\n+\n+    @Override\n+    protected String getAppenderName(WriterAppender appender) {\n+        return appender.getName();\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected WriterAppender createAndConfigureAppender(WriterAppender originalAppender, String appenderName) {\n+\n+        RollingFileAppender shadeAppender = null;\n+        if (originalAppender instanceof FileAppender) {\n+            try {\n+                FileAppender fileAppender = (FileAppender) originalAppender;\n+                String shadeFile = Utils.computeShadeLogFilePath(fileAppender.getFile());\n+\n+                EcsLayout ecsLayout = new EcsLayout();\n+                ecsLayout.setServiceName(getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzOTU0Mjk1", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-603954295", "createdAt": "2021-03-04T10:42:31Z", "commit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDo0MjozMVrOIwJaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDo0MjozMVrOIwJaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzM1Njc5Mw==", "bodyText": "Also return null if the appender already uses an ECS encoder/layout.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r587356793", "createdAt": "2021-03-04T10:42:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-log-shader-plugin/apm-log-shader-plugin-common/src/main/java/co/elastic/apm/agent/log/shader/AbstractLogShadingHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.log.shader;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.GlobalTracer;\n+import co.elastic.apm.agent.impl.payload.ServiceFactory;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.logging.LogEcsReformatting;\n+import co.elastic.apm.agent.logging.LoggingConfiguration;\n+import co.elastic.apm.agent.sdk.state.GlobalState;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The abstract Log shading helper- loaded as part of the agent core (agent CL / bootstrap CL / System CL).\n+ * Annotated with {@link GlobalState} because it holds the global mapping from original appender to corresponding\n+ * shade-appender.\n+ *\n+ * @param <A> logging-framework-specific Appender type\n+ */\n+@GlobalState\n+public abstract class AbstractLogShadingHelper<A> {\n+\n+    public static final String ECS_SHADE_APPENDER_NAME = \"EcsShadeAppender\";\n+\n+    private static final Object NULL_APPENDER = new Object();\n+\n+    private final ElasticApmTracer tracer;\n+    private final LoggingConfiguration loggingConfiguration;\n+    @Nullable\n+    private final String configuredServiceName;\n+\n+    public AbstractLogShadingHelper() {\n+        this.tracer = GlobalTracer.requireTracerImpl();\n+        loggingConfiguration = tracer.getConfig(LoggingConfiguration.class);\n+        configuredServiceName = new ServiceFactory().createService(tracer.getConfig(CoreConfiguration.class), \"\").getName();\n+    }\n+\n+    private static final WeakConcurrentMap<Object, Object> appenderToShadeAppender = WeakMapSupplier.createMap();\n+\n+    @Nullable\n+    public A getOrCreateShadeAppenderFor(A originalAppender) {\n+        if (isShadingAppender(originalAppender)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27614da50053ee3237a2209dd2fcf67065d5c015"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff28e48525152bc76b362f95b022ea191d369b6", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/1ff28e48525152bc76b362f95b022ea191d369b6", "committedDate": "2021-03-08T07:37:04Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21274dd7b45e82ec3f0761a26235174ae3405ddb", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/21274dd7b45e82ec3f0761a26235174ae3405ddb", "committedDate": "2021-03-09T14:02:31Z", "message": "Adding a line break"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5055e7ce2cfb36013522cdf8b6fc06c7044254b8", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5055e7ce2cfb36013522cdf8b6fc06c7044254b8", "committedDate": "2021-03-11T10:06:11Z", "message": "Trying referencing to ecs-logging docs\n\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b54bbc8379dcf4df32ba61e1f852c6e8a127d2fc", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/b54bbc8379dcf4df32ba61e1f852c6e8a127d2fc", "committedDate": "2021-03-11T10:08:22Z", "message": "Merge remote-tracking branch 'eyalkoren/dynamic-logger-ecs-reconfig' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41b9cbbbf5a2e9b16860ae70c3b33fcdf905347", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f41b9cbbbf5a2e9b16860ae70c3b33fcdf905347", "committedDate": "2021-03-11T10:09:14Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a913607c252554fb7bbeca649754c3e102ae69", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/65a913607c252554fb7bbeca649754c3e102ae69", "committedDate": "2021-03-11T10:31:55Z", "message": "Removing dependency of Utils in LoggingConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4135e1f822d6abfc40c87ebe340a98a7c0afcf", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/eb4135e1f822d6abfc40c87ebe340a98a7c0afcf", "committedDate": "2021-03-11T10:44:36Z", "message": "Remove in-context service name usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d460449d12f497c60e74370f2479aa5cce8fc2aa", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d460449d12f497c60e74370f2479aa5cce8fc2aa", "committedDate": "2021-03-11T13:21:25Z", "message": "Changing instrumentation groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d8aa65b5ddd53a246cdc872c9de94ebf0d300c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/57d8aa65b5ddd53a246cdc872c9de94ebf0d300c", "committedDate": "2021-03-11T16:22:29Z", "message": "Applying review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53", "committedDate": "2021-03-11T17:11:04Z", "message": "Fixing javadoc signature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzMzU3NDY4", "url": "https://github.com/elastic/apm-agent-java/pull/1261#pullrequestreview-613357468", "createdAt": "2021-03-16T15:00:12Z", "commit": {"oid": "d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNTowMDoxMlrOI3rc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNTowMDoxMlrOI3rc5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1NDUwMQ==", "bodyText": "As I find it hard to recall what the difference between REPLACE  and OVERRIDE  is, just some ideas how we could maybe make it clearer.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SHADE,\n          \n          \n            \n                REPLACE,\n          \n          \n            \n                // NOT IMPLEMENTED YET\n          \n          \n            \n                //OVERRIDE\n          \n          \n            \n                SHADE_FILE,\n          \n          \n            \n                REPLACE_FILE,\n          \n          \n            \n                // NOT IMPLEMENTED YET\n          \n          \n            \n                // REFORMAT\n          \n      \n    \n    \n  \n\nThe _FILE options only work for file appenders while REFORMAT works with potentially any appender.", "url": "https://github.com/elastic/apm-agent-java/pull/1261#discussion_r595254501", "createdAt": "2021-03-16T15:00:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/LogEcsReformatting.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.logging;\n+\n+public enum LogEcsReformatting {\n+    OFF,\n+    SHADE,\n+    REPLACE,\n+    // NOT IMPLEMENTED YET\n+    //OVERRIDE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9937c3187cf0c8b493e51b9fcc3d9cdcbd01b53"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab2e17f48928a43c882abfc1c06237757de55f4", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/aab2e17f48928a43c882abfc1c06237757de55f4", "committedDate": "2021-03-17T16:34:18Z", "message": "Fix log correlation config validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6258c8e1afb07cf38ddfeb3786d5fd602c25623", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c6258c8e1afb07cf38ddfeb3786d5fd602c25623", "committedDate": "2021-03-17T16:34:30Z", "message": "Merge remote-tracking branch 'upstream/master' into dynamic-logger-ecs-reconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4622aac200002c1ce33e83602dbbb1327ab3018", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d4622aac200002c1ce33e83602dbbb1327ab3018", "committedDate": "2021-03-17T16:42:40Z", "message": "Adding to CHANGELOG"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3778, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}