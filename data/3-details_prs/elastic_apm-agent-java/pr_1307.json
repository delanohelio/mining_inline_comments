{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjY5Mjgz", "number": 1307, "title": "added HttpClient java11 instrumentation for sync requests", "bodyText": "closes #1278\n\n sync requests\n async requests\n changelog\n update docs\n test on application and add screenshots(java 11, attach to java7 jvm)", "createdAt": "2020-07-22T17:57:15Z", "url": "https://github.com/elastic/apm-agent-java/pull/1307", "merged": true, "mergeCommit": {"oid": "cc5bd65389c4ca904180676d1803aae7c442f6ea"}, "closed": true, "closedAt": "2020-08-26T14:52:29Z", "author": {"login": "kananindzya"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc99yGwAH2gAyNDU1MjY5MjgzOjA3MDVkOThiZWQ0Y2NlNzBiNGRjNjc4YzY2M2U0YTBjNDY0ZjIzMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCqLDPAH2gAyNDU1MjY5MjgzOmU5ODg2ODY2OTFlZTY0NzdiMTgyMzVhZmU1MmI4NWVkMmRmYTFmZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0705d98bed4cce70b4dc678c663e4a0c464f2328", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/0705d98bed4cce70b4dc678c663e4a0c464f2328", "committedDate": "2020-08-11T21:34:24Z", "message": "added HttpClient java11 instrumentation for sync requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "addb289ecc6c6fd21fa2f818107bb2d7db7a5acc", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/addb289ecc6c6fd21fa2f818107bb2d7db7a5acc", "committedDate": "2020-08-11T21:34:24Z", "message": "added reassigning of HttpRequest argument."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b53d7fabab09d493d32632da98b32324b6271b", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/29b53d7fabab09d493d32632da98b32324b6271b", "committedDate": "2020-08-11T21:34:24Z", "message": "added test for async calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ede7dd3ec63aa6a719c0e366873e7fad8a240db", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/6ede7dd3ec63aa6a719c0e366873e7fad8a240db", "committedDate": "2020-08-11T21:34:24Z", "message": "local"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ede6a9463fe290434a34618fb4be05906f5a30", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/07ede6a9463fe290434a34618fb4be05906f5a30", "committedDate": "2020-08-11T21:34:24Z", "message": "deleted GlobalThreadLocal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/b5ccdc5d53b7944c6193384dd42306c58d51df76", "committedDate": "2020-08-11T21:34:24Z", "message": "added HttpRequests#headers method instrumentation, instead of full cloning of HttpRequest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cfe67e82d13b157c59e12f29b82b3407def234d", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/7cfe67e82d13b157c59e12f29b82b3407def234d", "committedDate": "2020-08-11T21:31:06Z", "message": "added HttpRequests#headers method instrumentation, instead of full cloning of HttpRequest"}, "afterCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/b5ccdc5d53b7944c6193384dd42306c58d51df76", "committedDate": "2020-08-11T21:34:24Z", "message": "added HttpRequests#headers method instrumentation, instead of full cloning of HttpRequest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjExOTUz", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-465611953", "createdAt": "2020-08-12T06:01:57Z", "commit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMTo1OFrOG_S5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoxMjo1MVrOG_TIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzE1Nw==", "bodyText": "Trying to load the instrumentations of this module would fail of the agent is attached to a Java 7 JVM, for example. But maybe that can easily be fixed by just catching the java.lang.UnsupportedClassVersionError in co.elastic.apm.agent.util.DependencyInjectingServiceLoader#instantiate(java.lang.ClassLoader, java.lang.String). That would be quite nice.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023157", "createdAt": "2020-08-12T06:01:58Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-agent-plugins</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.17.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-httpclient11-plugin</artifactId>\n+    <name>${project.groupId}:${project.artifactId}</name>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>11</source>\n+                    <target>11</target>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzY3OQ==", "bodyText": "don't depend on the exact internal name. instead, use hasSuperType(named(\"java.net.http.HttpClient\")) and add a pre matcher with nameContains(\"HttpClient\")", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023679", "createdAt": "2020-08-12T06:03:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg2NA==", "bodyText": "rely on the HttpRequest#header instrumentation here as well instead of cloning the request", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469023864", "createdAt": "2020-08-12T06:04:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDA1Nw==", "bodyText": "replace with tracer.getActiveExitSpan()", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024057", "createdAt": "2020-08-12T06:04:43Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDU5Mg==", "bodyText": "check for null", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024592", "createdAt": "2020-08-12T06:06:08Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort())\n+                .activate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNDcyNg==", "bodyText": "Rename so the name doesn't clash with co.elastic.apm.agent.http.client.HttpClientHelper", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469024726", "createdAt": "2020-08-12T06:06:28Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice\n+public class HttpClientHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTAyNQ==", "bodyText": "When using indy plugins, this annotation is not needed. You can even make the class package-private if you want to.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025025", "createdAt": "2020-08-12T06:07:17Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientHelper.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+\n+import javax.annotation.Nullable;\n+\n+@VisibleForAdvice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNTMwMA==", "bodyText": "add pre-matcher to speed up matching nameContains(\"HttpClient\")", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469025300", "createdAt": "2020-08-12T06:08:07Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {\n+\n+        }\n+\n+        @Nonnull\n+        @AssignTo.Return\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static HttpHeaders onAfterExecute(@Advice.Return @Nonnull final HttpHeaders httpHeaders) {\n+            Span span = tracer.getActiveSpan();\n+            if (span == null) {\n+                return httpHeaders;\n+            }\n+            Map<String, List<String>> headersMap = new LinkedHashMap<>(httpHeaders.map());\n+            span.propagateTraceContext(headersMap, HttpClientRequestPropertyAccessor.instance());\n+            return HttpHeaders.of(headersMap, (x, y) -> true);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation\n          \n          \n            \n            co.elastic.apm.agent.httpclient.HttpClientAsyncInstrumentation\n          \n          \n            \n            co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026264", "createdAt": "2020-08-12T06:10:39Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/resources/META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation", "diffHunk": "@@ -0,0 +1,2 @@\n+co.elastic.apm.agent.httpclient.HttpClientInstrumentation\n+co.elastic.apm.agent.httpclient.HttpRequestHeadersInstrumentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjc1MQ==", "bodyText": "the return value is a CompletableFuture, not a HttpResponse.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026751", "createdAt": "2020-08-12T06:12:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjk2MQ==", "bodyText": "You don't have to instrument the CompletableFuture. Just call future.whenComplete", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469026961", "createdAt": "2020-08-12T06:12:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.DynamicTransformer;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import co.elastic.apm.agent.sdk.state.GlobalThreadLocal;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static final WeakConcurrentMap<CompletableFuture<?>, Span> handlerSpanMap = WeakMapSupplier.createMap();\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @VisibleForAdvice\n+        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(HttpClient11Advice.class, \"spanTls\");\n+\n+        @Nullable\n+        @AssignTo.Argument(value = 0, typing = Assigner.Typing.DYNAMIC)\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return httpRequest;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                spanTls.set(span);\n+                span.activate();\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(httpRequest.uri())\n+                    .method(httpRequest.method(), httpRequest.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()))\n+                    .expectContinue(httpRequest.expectContinue());\n+                if (httpRequest.timeout().isPresent()) {\n+                    builder = builder.timeout(httpRequest.timeout().get());\n+                }\n+                if (httpRequest.version().isPresent()) {\n+                    builder = builder.version(httpRequest.version().get());\n+                }\n+                for (String header : httpRequest.headers().map().keySet()) {\n+                    builder.header(header, httpRequest.headers().firstValue(header).orElse(null));\n+                }\n+                return builder.build();\n+            }\n+            return httpRequest;\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = spanTls.getAndRemove();\n+            if (span != null) {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        span.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    span.captureException(t);\n+                } finally {\n+                    span.deactivate().end();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"jdk.internal.net.http.HttpClientImpl\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\").and(returns(named(\"java.util.concurrent.CompletableFuture\")));\n+    }\n+\n+    @Override\n+    public boolean indyPlugin() {\n+        return true;\n+    }\n+\n+    public abstract static class AbstractCompletableFutureInstrumentation extends HttpClientAsyncInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ccdc5d53b7944c6193384dd42306c58d51df76"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/2e21017f0a8ebe046322451ebecefbe64e8ca806", "committedDate": "2020-08-12T20:54:44Z", "message": "feature fixed HttpClientAsyncInstrumentation according to comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NDUwMDQz", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-466450043", "createdAt": "2020-08-13T05:18:26Z", "commit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToxODoyN1rOG_8Vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToxOTozOFrOG_8W6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjA5MA==", "bodyText": "These creator interfaces are not needed anymore with indy plugins :)\nJust directly implement the BiConsumer as a lambda.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702090", "createdAt": "2020-08-13T05:18:27Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreator;\n+import co.elastic.apm.agent.httpclient.helper.AsyncCallbackCreatorImpl;\n+import co.elastic.apm.agent.httpclient.helper.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            AsyncCallbackCreator callbackCreator = new AsyncCallbackCreatorImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMjM3Nw==", "bodyText": "Doesn\u2019t that propagate the error and crash the agent? Or is it caught somewhere else?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r469702377", "createdAt": "2020-08-13T05:19:38Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/DependencyInjectingServiceLoader.java", "diffHunk": "@@ -129,6 +129,9 @@ private T instantiate(ClassLoader classLoader, String implementation) {\n         } catch (InstantiationException e) {\n             String msg = String.format(\"unable to instantiate '%s', please check descriptor in META-INF\", implementation);\n             throw new ServiceConfigurationError(msg, e);\n+        } catch(UnsupportedClassVersionError e) {\n+            String msg = String.format(\"unable to instantiate '%s', unsupported class version error\", implementation);\n+            throw new ServiceConfigurationError(msg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e21017f0a8ebe046322451ebecefbe64e8ca806"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81fb50a42e697ebb5cd43beedb17bcaa05e67393", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/81fb50a42e697ebb5cd43beedb17bcaa05e67393", "committedDate": "2020-08-13T20:44:32Z", "message": "delete AsyncCallbackCreator, replaced with lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52412d5bc13e9f19acf3d44feae4c845c217c38", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/e52412d5bc13e9f19acf3d44feae4c845c217c38", "committedDate": "2020-08-13T21:06:53Z", "message": "added license info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/441883d92f1878400f482d30fde6df85542eaaf6", "committedDate": "2020-08-13T21:12:11Z", "message": "added exception handling, instead of instance return null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzU3NDYx", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-467357461", "createdAt": "2020-08-14T07:18:57Z", "commit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxODo1N1rOHAqKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoyNjoyMVrOHAqWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MjgzNw==", "bodyText": "Why is this necessary? Doesn't this fail on circular redirects? If so, override the test method to just skip it.", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470452837", "createdAt": "2020-08-14T07:18:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/test/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import org.junit.Before;\n+\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class HttpClientAsyncInstrumentationTest extends AbstractHttpClientInstrumentationTest {\n+    private HttpClient client;\n+\n+    @Before\n+    public void setUp() {\n+        client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NORMAL).build();\n+    }\n+\n+    @Override\n+    protected void performGet(String path) throws Exception {\n+        HttpRequest request = HttpRequest.newBuilder()\n+            .uri(URI.create(path))\n+            .build();\n+        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).get();\n+    }\n+\n+    @Override\n+    protected boolean isIpv6Supported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void assertCircularRedirect() {\n+        assertThat(reporter.getSpans().get(0).getContext().getHttp().getStatusCode()).isEqualTo(303);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MzQzNw==", "bodyText": "Can this be removed?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453437", "createdAt": "2020-08-14T07:20:24Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpRequestHeadersInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.sdk.advice.AssignTo;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nonnull;\n+import java.net.http.HttpHeaders;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpRequestHeadersInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpRequestHeadersAdvice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpRequestHeadersAdvice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Mzc2NA==", "bodyText": "nit: better return here to reduce the level of nesting", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470453764", "createdAt": "2020-08-14T07:21:13Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+public class HttpClientInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    @VisibleForAdvice\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable HttpResponse response,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span span = tracer.getActiveExitSpan();\n+            if (span != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1NTkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n          \n          \n            \n                            try {\n          \n          \n            \n                                if (response != null) {\n          \n          \n            \n                                    int statusCode = response.statusCode();\n          \n          \n            \n                                    activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                }\n          \n          \n            \n                                activeSpan.captureException(throwable);\n          \n          \n            \n                            } finally {\n          \n          \n            \n                                activeSpan.end();\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete(callback);\n          \n          \n            \n                        if (completableFuture != null) {\n          \n          \n            \n                            completableFuture.whenComplete((response, throwable) -> {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    if (response != null) {\n          \n          \n            \n                                        int statusCode = response.statusCode();\n          \n          \n            \n                                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    activeSpan.captureException(throwable);\n          \n          \n            \n                                } finally {\n          \n          \n            \n                                    activeSpan.end();\n          \n          \n            \n                                }\n          \n          \n            \n                            });", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r470455910", "createdAt": "2020-08-14T07:26:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = co.elastic.apm.agent.http.client.HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),\n+                HttpClientHelper.computeHostName(uri.getHost()), uri.getPort());\n+            if (span != null) {\n+                span.activate();\n+            }\n+        }\n+\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void onAfterExecute(@Advice.Return @Nullable CompletableFuture completableFuture,\n+                                          @Advice.Thrown @Nullable Throwable t) {\n+            final Span activeSpan = tracer.getActiveExitSpan();\n+            if (activeSpan == null) {\n+                return;\n+            }\n+            activeSpan.deactivate();\n+            BiConsumer<HttpResponse, Throwable> callback = (response, throwable) -> {\n+                try {\n+                    if (response != null) {\n+                        int statusCode = response.statusCode();\n+                        activeSpan.getContext().getHttp().withStatusCode(statusCode);\n+                    }\n+                    activeSpan.captureException(throwable);\n+                } finally {\n+                    activeSpan.end();\n+                }\n+            };\n+            if (completableFuture != null) {\n+                completableFuture.whenComplete(callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441883d92f1878400f482d30fde6df85542eaaf6"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a59904dc94ccef65959a82df560875edf1c361c8", "author": {"user": {"login": "kananindzya", "name": "Nugusbayev Kanagat"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a59904dc94ccef65959a82df560875edf1c361c8", "committedDate": "2020-08-14T16:08:39Z", "message": "Update apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java\n\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13bcd418bed3c7877b218502b01c0f6b9b7f42ab", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/13bcd418bed3c7877b218502b01c0f6b9b7f42ab", "committedDate": "2020-08-14T16:09:04Z", "message": "fixes according to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf0539afe2dabb01c1d7ba5380503e6c233978c", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/7bf0539afe2dabb01c1d7ba5380503e6c233978c", "committedDate": "2020-08-14T16:09:14Z", "message": "Merge branch 'issue-1278-support-java-11-httpclient' of github.com:kananindzya/apm-agent-java into issue-1278-support-java-11-httpclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93999ec8b0a96f4db7eddde2712bd4b3b050c4bb", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/93999ec8b0a96f4db7eddde2712bd4b3b050c4bb", "committedDate": "2020-08-14T16:14:40Z", "message": "fixed return arg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ddf8dbcd945e09064fb322bebfd53dda80dd43", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/07ddf8dbcd945e09064fb322bebfd53dda80dd43", "committedDate": "2020-08-14T16:37:13Z", "message": "fixed logging without print stacktrace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f6d4ed7e5a25f7b29338318e855bcc90aa2df4", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/51f6d4ed7e5a25f7b29338318e855bcc90aa2df4", "committedDate": "2020-08-14T21:30:44Z", "message": "added javadoc plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7dd77fb262431fa72fa1ac7dbab9f723cfeec4c", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/a7dd77fb262431fa72fa1ac7dbab9f723cfeec4c", "committedDate": "2020-08-15T20:41:19Z", "message": "updated changelog, supported technologies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fefbce7f1a48a7dcafe6f8b0e4f36814ab0de2d", "author": {"user": {"login": "kananindzya", "name": "Nugusbayev Kanagat"}}, "url": "https://github.com/elastic/apm-agent-java/commit/4fefbce7f1a48a7dcafe6f8b0e4f36814ab0de2d", "committedDate": "2020-08-16T19:10:13Z", "message": "Delete hs_err_pid14762.log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2335e16ff4bc84b0194bd041268374e8933b2c7", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/e2335e16ff4bc84b0194bd041268374e8933b2c7", "committedDate": "2020-08-16T19:13:55Z", "message": "rename HttpClientHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3", "committedDate": "2020-08-16T19:21:40Z", "message": "Merge branch 'issue-1278-support-java-11-httpclient' of github.com:kananindzya/apm-agent-java into issue-1278-support-java-11-httpclient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzA3Mjg2", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-468307286", "createdAt": "2020-08-17T09:28:18Z", "commit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyODoxOFrOHBhOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTo0MDowMVrOHBhnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDk4NA==", "bodyText": "why is this necessary?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471354984", "createdAt": "2020-08-17T09:28:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClient11Helper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import javax.annotation.Nullable;\n+\n+public class HttpClient11Helper {\n+\n+    private HttpClient11Helper() {\n+    }\n+\n+    @Nullable\n+    protected static CharSequence computeHostName(@Nullable String originalHostName) {\n+        CharSequence hostName = originalHostName;\n+        if (originalHostName != null && originalHostName.contains(\":\") && !originalHostName.startsWith(\"[\")) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.setLength(0);\n+            sb.append(\"[\").append(originalHostName).append(\"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2MTQ4Nw==", "bodyText": "Would it be possible to use co.elastic.apm.agent.http.client.HttpClientHelper#startHttpClientSpan(co.elastic.apm.agent.impl.transaction.AbstractSpan<?>, java.lang.String, java.net.URI, java.lang.CharSequence) i.e. HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri, null)?\nOr are you using the other variant for a particular reason?", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r471361487", "createdAt": "2020-08-17T09:40:01Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-httpclient11-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.http.client.HttpClientHelper;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return HttpClient11Advice.class;\n+    }\n+\n+    public static class HttpClient11Advice {\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+            if (tracer.getActive() == null) {\n+                return;\n+            }\n+            final AbstractSpan<?> parent = tracer.getActive();\n+            URI uri = httpRequest.uri();\n+            Span span = HttpClientHelper.startHttpClientSpan(parent, httpRequest.method(), uri.toString(), uri.getScheme(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf3d0843fa59a08d23abba00ae542ab9f8ec4b3"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633f436c765130bd58507bb289094a317a526106", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/633f436c765130bd58507bb289094a317a526106", "committedDate": "2020-08-21T06:05:16Z", "message": "deleted helper class, change method startHttpClientSpan with URI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e23951893f614a7e431853c7ce23d394971b711b", "author": {"user": {"login": "kananindzya", "name": "Nugusbayev Kanagat"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e23951893f614a7e431853c7ce23d394971b711b", "committedDate": "2020-08-21T07:01:46Z", "message": "Merge branch 'master' into issue-1278-support-java-11-httpclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95bd9f7b0be14a79b90525d49914bf72465552f3", "author": {"user": {"login": "kananindzya", "name": "Nugusbayev Kanagat"}}, "url": "https://github.com/elastic/apm-agent-java/commit/95bd9f7b0be14a79b90525d49914bf72465552f3", "committedDate": "2020-08-21T16:02:55Z", "message": "Merge branch 'master' into issue-1278-support-java-11-httpclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1dff05d987943f2ddebaff54b9ec16ba15f446", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ae1dff05d987943f2ddebaff54b9ec16ba15f446", "committedDate": "2020-08-25T15:28:48Z", "message": "cleanup pom.xml & bump to java 11 for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68971e938a99ef98116ca987f5a025a34486d726", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/68971e938a99ef98116ca987f5a025a34486d726", "committedDate": "2020-08-25T15:33:01Z", "message": "pom cleanup again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917ce7fe2aba82142f114856a5e7dc33bb0c1b7e", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/917ce7fe2aba82142f114856a5e7dc33bb0c1b7e", "committedDate": "2020-08-25T15:36:05Z", "message": "make test ignore consistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31ad4d12aa21e02aea75f3a197560f7ed9d9cce", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/f31ad4d12aa21e02aea75f3a197560f7ed9d9cce", "committedDate": "2020-08-25T15:36:36Z", "message": "avoid advice nesting & code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6bea21372cc59b31551e29f3472b815a8de8c3", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/7d6bea21372cc59b31551e29f3472b815a8de8c3", "committedDate": "2020-08-25T16:24:16Z", "message": "rename plugin to 'jdk-httpclient'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6db2256d712fe2c9cfdf119d5d33d3ec61321fa", "author": {"user": {"login": "kananindzya", "name": "Nugusbayev Kanagat"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b6db2256d712fe2c9cfdf119d5d33d3ec61321fa", "committedDate": "2020-08-25T17:53:44Z", "message": "Merge pull request #7 from SylvainJuge/issue-1278-support-java-11-httpclient\n\nIssue 1278 support java 11 httpclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/bc562d109446d937021c0c5a59bbd0f64a5b25c1", "committedDate": "2020-08-26T04:42:14Z", "message": "added prefilter for async instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjAxODc2", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-475201876", "createdAt": "2020-08-26T06:57:51Z", "commit": {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo1Nzo1MVrOHG-Zbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo1Nzo1MVrOHG-Zbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NTgyMg==", "bodyText": "[very minor] potentially return the span here (as an Object) and add a parameter @Nullable @Advice.Enter Object spanObj on the exit advice. This can replace the final Span span = tracer.getActiveExitSpan(); statement in the exit advice.\nThe same can be done in HttpClientInstrumentation", "url": "https://github.com/elastic/apm-agent-java/pull/1307#discussion_r477075822", "createdAt": "2020-08-26T06:57:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-jdk-httpclient-plugin/src/main/java/co/elastic/apm/agent/httpclient/HttpClientAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.httpclient;\n+\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import javax.annotation.Nullable;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HttpClientAsyncInstrumentation extends AbstractHttpClientInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"HttpClient\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return hasSuperType(named(\"java.net.http.HttpClient\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"sendAsync\")\n+            .and(returns(named(\"java.util.concurrent.CompletableFuture\")))\n+            .and(takesArguments(3));\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static void onBeforeExecute(@Advice.Argument(value = 0) HttpRequest httpRequest) {\n+        startSpan(httpRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc562d109446d937021c0c5a59bbd0f64a5b25c1"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4345e2e2653de3382ad7441cfde456a0be1d1818", "author": {"user": null}, "url": "https://github.com/elastic/apm-agent-java/commit/4345e2e2653de3382ad7441cfde456a0be1d1818", "committedDate": "2020-08-26T08:00:05Z", "message": "return span on method enter, added Advice.Enter argument onMethodExit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjQ2NzU2", "url": "https://github.com/elastic/apm-agent-java/pull/1307#pullrequestreview-475246756", "createdAt": "2020-08-26T08:03:33Z", "commit": {"oid": "4345e2e2653de3382ad7441cfde456a0be1d1818"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e988686691ee6477b18235afe52b85ed2dfa1fde", "author": {"user": {"login": "SylvainJuge", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e988686691ee6477b18235afe52b85ed2dfa1fde", "committedDate": "2020-08-26T11:33:10Z", "message": "fix javadoc again"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3817, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}