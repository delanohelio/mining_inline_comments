{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzQ3MjMx", "number": 1235, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1NTo1OVrOEGQnsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0Nzo0NVrOEGrfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTk5MjE2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1NTo1OVrOGk8WNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyOTo0NVrOGlNqjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MDY0Nw==", "bodyText": "Use await() or awaitUntilAsserted() instead of sleep.", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441390647", "createdAt": "2020-06-17T08:55:59Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TimerTaskInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    @Test\n+    void testTimerTaskWithScheduleAtFixedRate() throws InterruptedException {\n+        reporter.reset();\n+        TestTimerTask timerTask = new TestTimerTask();\n+        Timer timer = new Timer(true);\n+        timer.scheduleAtFixedRate(timerTask, 0, 5);\n+        Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a161a5033b3664da8c85f92072c0ee2f071ab2ca"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDM4Mw==", "bodyText": "replaced", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441674383", "createdAt": "2020-06-17T16:29:45Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/test/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TimerTaskInstrumentationTest extends AbstractInstrumentationTest {\n+\n+    @Test\n+    void testTimerTaskWithScheduleAtFixedRate() throws InterruptedException {\n+        reporter.reset();\n+        TestTimerTask timerTask = new TestTimerTask();\n+        Timer timer = new Timer(true);\n+        timer.scheduleAtFixedRate(timerTask, 0, 5);\n+        Thread.sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MDY0Nw=="}, "originalCommit": {"oid": "a161a5033b3664da8c85f92072c0ee2f071ab2ca"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTk5OTg2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1ODowN1rOGk8bgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxNjoxOFrOGlNK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA==", "bodyText": "Add framework information", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441392000", "createdAt": "2020-06-17T08:58:07Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.bci.bytebuddy.SimpleMethodSignatureOffsetMappingFactory;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.isInAnyPackage;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperClass;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class TimerTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(TimerTaskInstrumentation.class);\n+\n+    private final Collection<String> applicationPackages;\n+\n+    public TimerTaskInstrumentation(ElasticApmTracer tracer) {\n+        applicationPackages = tracer.getConfig(StacktraceConfiguration.class).getApplicationPackages();\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void setTransactionName(@SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature, @Advice.Origin Class<?> clazz, @Advice.Local(\"transaction\") Transaction transaction) {\n+        if (tracer != null) {\n+            AbstractSpan<?> active = tracer.getActive();\n+            if (active == null) {\n+                transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+                if (transaction != null) {\n+                    transaction.withName(signature)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a161a5033b3664da8c85f92072c0ee2f071ab2ca"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDI3NQ==", "bodyText": "added changelog, and supproted technologies", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441660275", "createdAt": "2020-06-17T16:06:31Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.bci.bytebuddy.SimpleMethodSignatureOffsetMappingFactory;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.isInAnyPackage;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperClass;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class TimerTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(TimerTaskInstrumentation.class);\n+\n+    private final Collection<String> applicationPackages;\n+\n+    public TimerTaskInstrumentation(ElasticApmTracer tracer) {\n+        applicationPackages = tracer.getConfig(StacktraceConfiguration.class).getApplicationPackages();\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void setTransactionName(@SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature, @Advice.Origin Class<?> clazz, @Advice.Local(\"transaction\") Transaction transaction) {\n+        if (tracer != null) {\n+            AbstractSpan<?> active = tracer.getActive();\n+            if (active == null) {\n+                transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+                if (transaction != null) {\n+                    transaction.withName(signature)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA=="}, "originalCommit": {"oid": "a161a5033b3664da8c85f92072c0ee2f071ab2ca"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjI3NA==", "bodyText": "added framework name information", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r441666274", "createdAt": "2020-06-17T16:16:18Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-scheduled-annotation-plugin/src/main/java/co/elastic/apm/agent/spring/scheduled/TimerTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.elastic.apm.agent.spring.scheduled;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.bci.bytebuddy.SimpleMethodSignatureOffsetMappingFactory;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.stacktrace.StacktraceConfiguration;\n+import co.elastic.apm.agent.impl.transaction.AbstractSpan;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.isInAnyPackage;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperClass;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class TimerTaskInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(TimerTaskInstrumentation.class);\n+\n+    private final Collection<String> applicationPackages;\n+\n+    public TimerTaskInstrumentation(ElasticApmTracer tracer) {\n+        applicationPackages = tracer.getConfig(StacktraceConfiguration.class).getApplicationPackages();\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void setTransactionName(@SimpleMethodSignatureOffsetMappingFactory.SimpleMethodSignature String signature, @Advice.Origin Class<?> clazz, @Advice.Local(\"transaction\") Transaction transaction) {\n+        if (tracer != null) {\n+            AbstractSpan<?> active = tracer.getActive();\n+            if (active == null) {\n+                transaction = tracer.startRootTransaction(clazz.getClassLoader());\n+                if (transaction != null) {\n+                    transaction.withName(signature)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MjAwMA=="}, "originalCommit": {"oid": "a161a5033b3664da8c85f92072c0ee2f071ab2ca"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM5NDk0OnYy", "diffSide": "RIGHT", "path": "docs/supported-technologies.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0Nzo0NVrOGln9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0Nzo0NVrOGln9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwNTEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |The agent instruments the 'run' method in a package configured in <<config-application-packages>> of any class extending 'java.util.TimerTask', and creates a transaction with the type `scheduled`, representing the job execution\n          \n          \n            \n            |The agent instruments the `run` method in a package configured in <<config-application-packages>> of any class extending `java.util.TimerTask`, and creates a transaction with the type `scheduled`, representing the job execution", "url": "https://github.com/elastic/apm-agent-java/pull/1235#discussion_r442105135", "createdAt": "2020-06-18T09:47:45Z", "author": {"login": "felixbarny"}, "path": "docs/supported-technologies.asciidoc", "diffHunk": "@@ -358,6 +358,12 @@ When using a scheduling framework a transaction for every execution will be crea\n \n NOTE: only classes from the quartz-jobs dependency will be instrumented automatically. For the instrumentation of other jobs the package must be added to the <<config-application-packages>> parameter.\n |1.8.0\n+\n+|TimerTask\n+|\n+|The agent instruments the 'run' method in a package configured in <<config-application-packages>> of any class extending 'java.util.TimerTask', and creates a transaction with the type `scheduled`, representing the job execution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40933c1e78903c2d010ef1beef835a70e2085cea"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 111, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}