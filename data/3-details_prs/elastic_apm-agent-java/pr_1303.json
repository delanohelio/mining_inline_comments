{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTYyNzQw", "number": 1303, "title": "Add micrometer support", "bodyText": "What does this PR do?\n\nCloses #893\nChecklist\n\n\n This is an enhancement of existing features, or a new feature in existing plugins\n\n I have updated CHANGELOG.asciidoc\n I have added tests that prove my fix is effective or that my feature works\n Added an API method or config option? Document in which version this will be introduced\n I have made corresponding changes to the documentation\n\n\n This is a bugfix\n\n I have updated CHANGELOG.asciidoc\n I have added tests that would fail without this fix\n\n\n This is a new plugin\n\n I have updated CHANGELOG.asciidoc\n My code follows the style guidelines of this project\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n I have updated supported-technologies.asciidoc\n Added an API method or config option? Document in which version this will be introduced\n Added an instrumentation plugin? Describe how you made sure that old, non-supported versions are not instrumented by accident.\nWe're not instrumenting a particular method in MeterRegistry, just all public methods. The plugin is compiled against 1.0.1 to make sure we don't call methods that have been introduced later. We're only calling public API methods that are guaranteed to be stable in 1.x. Testing against the most recent version doesn't seem necessary. I've tested with the currently most recent version 1.5 manually.\n\n\n This is something else\n\n I have updated CHANGELOG.asciidoc", "createdAt": "2020-07-22T14:40:36Z", "url": "https://github.com/elastic/apm-agent-java/pull/1303", "merged": true, "mergeCommit": {"oid": "1e26d7dac9e3b9f0640ed7d58b59f333c593b58b"}, "closed": true, "closedAt": "2020-08-10T15:37:50Z", "author": {"login": "felixbarny"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3byQlgH2gAyNDU1MTYyNzQwOjZlNzJjZGVmZjk3YTQyMDg1ZjNkOTA2MTEyZWQyZjM4Yjk1YTg3NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9jgdwAFqTQ2NDMwNTY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e72cdeff97a42085f3d906112ed2f38b95a8758", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6e72cdeff97a42085f3d906112ed2f38b95a8758", "committedDate": "2020-07-22T14:34:15Z", "message": "Add micrometer support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e4c77dd1a09f7301d7a31ba8f71a935a628ef9", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c9e4c77dd1a09f7301d7a31ba8f71a935a628ef9", "committedDate": "2020-07-24T12:52:17Z", "message": "Avoid reporting registires registered in compound registries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f702d6f2b340d1a9f8aa1bf013f117bc9626b7", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/48f702d6f2b340d1a9f8aa1bf013f117bc9626b7", "committedDate": "2020-07-27T09:20:09Z", "message": "Merge remote-tracking branch 'origin/master' into micrometer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e5e5a22ddf189b8ff80af2591fa9498ace5bae", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/81e5e5a22ddf189b8ff80af2591fa9498ace5bae", "committedDate": "2020-07-27T14:19:56Z", "message": "Add docs and logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e0d1d327b9cbd3886ef435dbe9bd48818e6ba8", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c2e0d1d327b9cbd3886ef435dbe9bd48818e6ba8", "committedDate": "2020-07-30T13:40:54Z", "message": "Merge remote-tracking branch 'origin/master' into micrometer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d5ab2cdef80b3b5d5194dc7603eb9ec94b0d15", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/76d5ab2cdef80b3b5d5194dc7603eb9ec94b0d15", "committedDate": "2020-07-31T08:16:00Z", "message": "Deduplicate meters by Meter.Id\n\n- Ignore CompositeMeterRegistry\n- Make compatible with Micrometer 1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c67fcdb1583c19836fdf570dd9627cf53c8a9b", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b7c67fcdb1583c19836fdf570dd9627cf53c8a9b", "committedDate": "2020-07-31T08:44:52Z", "message": "Use Mockito.doReturn rather than when/then"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2225ed4f752250409ba8b57daf00738b25c1ff", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/6e2225ed4f752250409ba8b57daf00738b25c1ff", "committedDate": "2020-07-31T09:03:13Z", "message": "Add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef6eaf1efc8010fe786125afacd8fe3495cb419", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/2ef6eaf1efc8010fe786125afacd8fe3495cb419", "committedDate": "2020-07-31T09:13:41Z", "message": "Fix usage of doReturn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc", "committedDate": "2020-07-31T11:48:05Z", "message": "Update generated docs and fix ConfigurationExporterTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/e65cdfac0d284eb67a3675f07ff7e1c26ddceff9", "committedDate": "2020-08-05T11:20:54Z", "message": "Attempt to fix integration test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTM5Mjgz", "url": "https://github.com/elastic/apm-agent-java/pull/1303#pullrequestreview-461539283", "createdAt": "2020-08-05T10:34:37Z", "commit": {"oid": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDozNDozN1rOG8D4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyNzoyN1rOG8MN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzMTM5Mw==", "bodyText": "Why was it moved? So it will be invoked even when enabled == false?", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465631393", "createdAt": "2020-08-05T10:34:37Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -198,6 +199,7 @@ public boolean accept(File dir, String name) {\n \n     public static synchronized void initInstrumentation(final ElasticApmTracer tracer, Instrumentation instrumentation,\n                                                         Iterable<ElasticApmInstrumentation> instrumentations) {\n+        GlobalTracer.init(tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i = 0; i < bytes.length; i++) {\n          \n          \n            \n                        jw.writeByte(bytes[i]);\n          \n          \n            \n                    }\n          \n          \n            \n                    jw.writeAscii(bytes);", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465638215", "createdAt": "2020-08-05T10:48:49Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java", "diffHunk": "@@ -256,6 +256,13 @@ public JsonWriter getJsonWriter() {\n         return jw;\n     }\n \n+    @Override\n+    public void writeBytes(byte[] bytes) {\n+        for (int i = 0; i < bytes.length; i++) {\n+            jw.writeByte(bytes[i]);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1be2b2f3a795794f1a5dd6aa3d5f509903c86cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNzMwMQ==", "bodyText": "I didn't understand this comment. Isn't this called for each instance of MeterRegistry?", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465717301", "createdAt": "2020-08-05T13:14:47Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();\n+    private final Reporter reporter;\n+    private final ElasticApmTracer tracer;\n+    private boolean scheduledReporting = false;\n+\n+    public MicrometerMetricsReporter(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        this.reporter = tracer.getReporter();\n+    }\n+\n+    public void registerMeterRegistry(MeterRegistry meterRegistry) {\n+        if (meterRegistry instanceof CompositeMeterRegistry) {\n+            return;\n+        }\n+        boolean added = meterRegistries.add(meterRegistry);\n+        if (added) {\n+            logger.info(\"Registering Micrometer MeterRegistry: {}\", meterRegistry);\n+            scheduleReporting();\n+        }\n+    }\n+\n+    private synchronized void scheduleReporting() {\n+        if (scheduledReporting) {\n+            return;\n+        }\n+        scheduledReporting = true;\n+        long metricsIntervalMs = tracer.getConfig(ReporterConfiguration.class).getMetricsIntervalMs();\n+        if (metricsIntervalMs > 0) {\n+            // called for every class loader that loaded micrometer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzUwNg==", "bodyText": "I think the JsonWriter would fit in the serializer better", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465723506", "createdAt": "2020-08-05T13:24:33Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjM4MA==", "bodyText": "If the JsonWriter is a field of the serializer, the serialize method can return the byte array.\nWhy did you decide to deviate from our usual reporting flow, where we serialize directly to the connection socket?", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465736380", "createdAt": "2020-08-05T13:43:48Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/main/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporter.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.Tracer;\n+import co.elastic.apm.agent.report.Reporter;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier;\n+import com.blogspot.mydailyjava.weaklockfree.WeakConcurrentSet;\n+import com.dslplatform.json.DslJson;\n+import com.dslplatform.json.JsonWriter;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+public class MicrometerMetricsReporter implements Runnable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MicrometerMetricsReporter.class);\n+\n+    private final WeakConcurrentSet<MeterRegistry> meterRegistries = WeakMapSupplier.createSet();\n+    private final StringBuilder replaceBuilder = new StringBuilder();\n+    private final JsonWriter jsonWriter = new DslJson<>(new DslJson.Settings<>()).newWriter();\n+    private final Reporter reporter;\n+    private final ElasticApmTracer tracer;\n+    private boolean scheduledReporting = false;\n+\n+    public MicrometerMetricsReporter(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        this.reporter = tracer.getReporter();\n+    }\n+\n+    public void registerMeterRegistry(MeterRegistry meterRegistry) {\n+        if (meterRegistry instanceof CompositeMeterRegistry) {\n+            return;\n+        }\n+        boolean added = meterRegistries.add(meterRegistry);\n+        if (added) {\n+            logger.info(\"Registering Micrometer MeterRegistry: {}\", meterRegistry);\n+            scheduleReporting();\n+        }\n+    }\n+\n+    private synchronized void scheduleReporting() {\n+        if (scheduledReporting) {\n+            return;\n+        }\n+        scheduledReporting = true;\n+        long metricsIntervalMs = tracer.getConfig(ReporterConfiguration.class).getMetricsIntervalMs();\n+        if (metricsIntervalMs > 0) {\n+            // called for every class loader that loaded micrometer\n+            tracer.getSharedSingleThreadedPool().scheduleAtFixedRate(this, metricsIntervalMs, metricsIntervalMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    // guaranteed to be invoked by a single thread\n+    @Override\n+    public void run() {\n+        if (tracer.getState() != Tracer.TracerState.RUNNING) {\n+            return;\n+        }\n+        final long timestamp = System.currentTimeMillis() * 1000;\n+        MeterMapConsumer meterConsumer = new MeterMapConsumer();\n+        for (MeterRegistry registry : meterRegistries) {\n+            registry.forEachMeter(meterConsumer);\n+        }\n+        logger.debug(\"Reporting {} meters\", meterConsumer.meters.size());\n+        MicrometerMeterRegistrySerializer.serialize(meterConsumer.meters, timestamp, replaceBuilder, jsonWriter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDg3NA==", "bodyText": "Assert that only the non-composite was registered", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465750874", "createdAt": "2020-08-05T14:04:32Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-micrometer-plugin/src/test/java/co/elastic/apm/agent/micrometer/MicrometerMetricsReporterTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.micrometer;\n+\n+import co.elastic.apm.agent.MockReporter;\n+import co.elastic.apm.agent.MockTracer;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.report.ReporterConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.FunctionCounter;\n+import io.micrometer.core.instrument.FunctionTimer;\n+import io.micrometer.core.instrument.LongTaskTimer;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.MockClock;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import io.micrometer.core.instrument.simple.CountingMode;\n+import io.micrometer.core.instrument.simple.SimpleConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+\n+class MicrometerMetricsReporterTest {\n+\n+    private MeterRegistry meterRegistry;\n+    private MicrometerMetricsReporter metricsReporter;\n+    private MockReporter reporter;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @BeforeEach\n+    void setUp() {\n+        SimpleMeterRegistry simpleMeterRegistry = new SimpleMeterRegistry();\n+        CompositeMeterRegistry nestedCompositeMeterRegistry = new CompositeMeterRegistry(Clock.SYSTEM, List.of(simpleMeterRegistry));\n+        meterRegistry = new CompositeMeterRegistry(Clock.SYSTEM, List.of(nestedCompositeMeterRegistry));\n+        reporter = new MockReporter();\n+        ElasticApmTracer tracer = MockTracer.createRealTracer(reporter);\n+        doReturn(0L).when(tracer.getConfig(ReporterConfiguration.class)).getMetricsIntervalMs();\n+        metricsReporter = new MicrometerMetricsReporter(tracer);\n+        metricsReporter.registerMeterRegistry(meterRegistry);\n+        metricsReporter.registerMeterRegistry(nestedCompositeMeterRegistry);\n+        metricsReporter.registerMeterRegistry(simpleMeterRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NzkwNw==", "bodyText": "You mean- using the same labels for the event and the meter? Try to make it more explicit.", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r465767907", "createdAt": "2020-08-05T14:27:27Z", "author": {"login": "eyalkoren"}, "path": "docs/metrics.asciidoc", "diffHunk": "@@ -277,3 +282,173 @@ You can filter and group by these dimensions:\n * `span.subtype`: The sub-type of the span, for example `mysql` (optional)\n \n --\n+\n+\n+[float]\n+[[metrics-micrometer]]\n+=== Custom metrics using Micrometer\n+\n+The Elastic APM Java agent lets you use the popular metrics collection framework https://micrometer.io/[Micrometer] to track custom application metrics.\n+\n+Some use cases for tracking custom metrics from your application include monitoring performance-related things like cache statistics, thread pools, or page hits.\n+However, you can also track business-related metrics such as revenue and correlate them with performance metrics.\n+Metrics registered to a Micrometer `MeterRegistry` are aggregated in memory and reported every <<config-metrics-interval, `metrics_interval`>>.\n+Based on the metadata about the service and the timestamp, you can correlate metrics with traces.\n+However, you won't be able to attribute a value to a specific transaction or to a user.\n+If you'd like to do that, have a look at the <<api-transaction-add-tag>> API method instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cdfac0d284eb67a3675f07ff7e1c26ddceff9"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fdb27efa4a2cedd05dc85bc7a1632311c12a82f", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/3fdb27efa4a2cedd05dc85bc7a1632311c12a82f", "committedDate": "2020-08-05T15:25:13Z", "message": "write bytes in batch\n\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09a2114379091b0482011c64c7a95d14358a299", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/c09a2114379091b0482011c64c7a95d14358a299", "committedDate": "2020-08-06T09:23:55Z", "message": "Clarify docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/9d2ba3ca8e0b4c335a22f297bb574d31fdc40657", "committedDate": "2020-08-06T09:23:55Z", "message": "Check that compound registries are not registered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f6cd3e4cd51bbf245782f4896477d23bd0cad7", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/37f6cd3e4cd51bbf245782f4896477d23bd0cad7", "committedDate": "2020-08-06T09:23:55Z", "message": "Move JsonWriter to MicrometerMetricsSerializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36af469af0aec7956c7dc891be50fed153bd832", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/b36af469af0aec7956c7dc891be50fed153bd832", "committedDate": "2020-08-06T12:51:52Z", "message": "Report internal MetricRegistry off the disruptor thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46724ec5c83bb51a83417b5d1794b44fea62da9", "author": {"user": {"login": "felixbarny", "name": "Felix Barnsteiner"}}, "url": "https://github.com/elastic/apm-agent-java/commit/d46724ec5c83bb51a83417b5d1794b44fea62da9", "committedDate": "2020-08-07T08:53:55Z", "message": "Report JsonWriters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzA1Njc0", "url": "https://github.com/elastic/apm-agent-java/pull/1303#pullrequestreview-464305674", "createdAt": "2020-08-10T14:56:28Z", "commit": {"oid": "d46724ec5c83bb51a83417b5d1794b44fea62da9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1NjoyOFrOG-SMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1NjoyOFrOG-SMSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2Mjk1Mg==", "bodyText": "Ahh, getByteBuffer is good as well \ud83d\udc4d", "url": "https://github.com/elastic/apm-agent-java/pull/1303#discussion_r467962952", "createdAt": "2020-08-10T14:56:28Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java", "diffHunk": "@@ -136,20 +135,8 @@ private void writeEvent(ReportingEvent event) {\n         } else if (event.getError() != null) {\n             currentlyTransmitting++;\n             payloadSerializer.serializeErrorNdJson(event.getError());\n-        } else if (event.getMetricRegistry() != null) {\n-            payloadSerializer.serializeMetrics(event.getMetricRegistry());\n-        }\n-    }\n-\n-    /**\n-     * Should be called whenever {@link IntakeV2ReportingEventHandler#writeEvent(ReportingEvent)} is not called for\n-     * an event that should normally be written.\n-     *\n-     * @param event the event to end\n-     */\n-    private void handleNonWrittenEvent(ReportingEvent event) {\n-        if (event.getMetricRegistry() != null) {\n-            event.getMetricRegistry().flipPhaseAndReport(null);\n+        } else if (event.getJsonWriter() != null) {\n+            payloadSerializer.writeBytes(event.getJsonWriter().getByteBuffer(), event.getJsonWriter().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46724ec5c83bb51a83417b5d1794b44fea62da9"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3805, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}