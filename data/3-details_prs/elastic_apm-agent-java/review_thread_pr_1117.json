{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NDczOTg2", "number": 1117, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToyMjowOFrOD2TiLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozNjozNlrOD5uG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjY5NzQyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToyMjowOFrOGMDEBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToyMjowOFrOGMDEBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4NjI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @see co.elastic.apm.agent.impl.transaction.Span#childIds\n          \n          \n            \n                 * @see co.elastic.apm.agent.impl.transaction.AbstractSpan#childIds", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415286278", "createdAt": "2020-04-26T11:22:08Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -73,12 +73,17 @@\n     private long activationTimestamp = -1;\n     /**\n      * The context of the transaction or span which is the direct parent of this call tree node.\n-     * Used in {@link #spanify(Root, TraceContext)} to override the parent.\n+     * Used in {@link #spanify} to override the parent.\n      */\n     @Nullable\n     private TraceContext activeContextOfDirectParent;\n     private long deactivationTimestamp = -1;\n     private boolean isSpan;\n+    /**\n+     * @see co.elastic.apm.agent.impl.transaction.Span#childIds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjc4NDU1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjoxNTo1N1rOGMDr0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowNDowMVrOGMT22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjQ2Nw==", "bodyText": "Doesn't worth pooling?", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415296467", "createdAt": "2020-04-26T12:15:57Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -391,6 +414,25 @@ public void resetState() {\n         }\n     }\n \n+    public void addChildId(long id) {\n+        if (childIds == null) {\n+            childIds = new LongList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQzMg==", "bodyText": "Not really. Lists are quite tricky to pool as they can have vastly different sizes. The danger is that over time, all lists in the pool will be quite large even though there are only few that actually contain a lot of elements.\nJudging from the benchmarks, the allocations caused by the inferred spans processing increase by 10%. That seems reasonable and it's definitely not the major source of allocations.", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415561432", "createdAt": "2020-04-27T07:04:01Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/CallTree.java", "diffHunk": "@@ -391,6 +414,25 @@ public void resetState() {\n         }\n     }\n \n+    public void addChildId(long id) {\n+        if (childIds == null) {\n+            childIds = new LongList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjQ2Nw=="}, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjgxMDk1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjozMDo1OFrOGMD3tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0NTo0N1rOGMtKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"   bbbb b      \",\n          \n          \n            \n                        \" a aaaa aa a a \",\n          \n          \n            \n                        \"1 2    2  3 3 1\"\n          \n          \n            \n                        \"   bbbb b      \",\n          \n          \n            \n                        \" a aaaa a a a \",\n          \n          \n            \n                        \"1 2    2 3 3 1\"\n          \n      \n    \n    \n  \n\nJust to make sure that one measurement is enough", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415299509", "createdAt": "2020-04-26T12:30:58Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MTQ1Mw==", "bodyText": "Hm, that doesn't work because b is still considered the top of the stack at the time 3 gets activated.", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415561453", "createdAt": "2020-04-27T07:04:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODg3Mw==", "bodyText": "Why isn't that enough, if you know that activation of 3 happens after deactivation of 2 and you know that b cannot be a (direct or indirect) child of 3?", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415578873", "createdAt": "2020-04-27T07:34:35Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5MDQwNQ==", "bodyText": "Because of situations like these:\n aa  aa \n1  22  1\n\nWe have to add each activation to the childIds of the current top of the stack.\nHowever, it leads to errors in situations like these:\n bbb      \n aaa aa a \n1   2  2 1\n\nAs 2 is falsely declared a child of b when it's actually a child of a. Currently not sure how to fix it without introducing regressions.", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415590405", "createdAt": "2020-04-27T07:52:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NjAxNA==", "bodyText": "I think I've managed to fix it", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r415976014", "createdAt": "2020-04-27T16:45:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +265,30 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1            ]    [1            ]\n+     *  [a          ]      [a          ]\n+     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b      \",\n+            \" a aaaa aa a a \",\n+            \"1 2    2  3 3 1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTUwOQ=="}, "originalCommit": {"oid": "13f01b121806fa09e33003b90df2eb4c7f1d8338"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg2NDU0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowNzo1M1rOGQmWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowNzo1M1rOGQmWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1ODY4Mg==", "bodyText": "\ud83d\udcaa", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420058682", "createdAt": "2020-05-05T12:07:53Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -266,29 +272,181 @@ void testDeactivationBeforeEnd() throws Exception {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40721206b8420474d25b7af0a600253835f5ffb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkzNzk4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyODo1MVrOGQnDEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozNzo0MVrOGRFurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDE2Mw==", "bodyText": "How come 2 is not a child of a?", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420070163", "createdAt": "2020-05-05T12:28:51Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -266,29 +272,181 @@ void testDeactivationBeforeEnd() throws Exception {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n         }, new Object[][] {\n-            {\"a\",       9},\n+            {\"a\",       8},\n             {\"  b\",     5},\n         }, new Object[][] {\n-            {\"1\",       14},\n-            {\"  a\",     12},\n+            {\"1\",       13},\n+            {\"  a\",     11},\n             {\"    b\",    6},\n             {\"      2\",  5},\n             {\"    3\",    2},\n         });\n     }\n \n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds2() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\", 8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\", 13},\n+            {\"  a\", 11},\n+            {\"    b\", 2},\n+            {\"  2\", 6},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40721206b8420474d25b7af0a600253835f5ffb"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3Mjg0Nw==", "bodyText": "Wow, good catch! From now on, I call you the eagle eye. Or maybe Eyeal \ud83e\udd14\nSubmitting fix shortly that searches for common ancestors, instead of always adding the child_ids on the top of the stack", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420572847", "createdAt": "2020-05-06T06:37:41Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -266,29 +272,181 @@ void testDeactivationBeforeEnd() throws Exception {\n     }\n \n     /*\n-     * [1            ]    [1            ]\n-     *  [a          ]      [a          ]\n-     *   [2   ]  [3]        [b    ] [3]   <- b is supposed to stealChildIdsFom(a)\n-     *    [b   ]            [2   ]           however, it should only steal 2, not 3\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n      */\n     @Test\n     void testDectivationBeforeEnd2() throws Exception {\n         assertCallTree(new String[]{\n-            \"   bbbb b      \",\n-            \" a aaaa aa a a \",\n-            \"1 2    2  3 3 1\"\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n         }, new Object[][] {\n-            {\"a\",       9},\n+            {\"a\",       8},\n             {\"  b\",     5},\n         }, new Object[][] {\n-            {\"1\",       14},\n-            {\"  a\",     12},\n+            {\"1\",       13},\n+            {\"  a\",     11},\n             {\"    b\",    6},\n             {\"      2\",  5},\n             {\"    3\",    2},\n         });\n     }\n \n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds2() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\", 8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\", 13},\n+            {\"  a\", 11},\n+            {\"    b\", 2},\n+            {\"  2\", 6},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDE2Mw=="}, "originalCommit": {"oid": "f40721206b8420474d25b7af0a600253835f5ffb"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODUwODczOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozNjozNlrOGRJJ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0NjozMVrOGT4Rxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODk0Ng==", "bodyText": "This might be problematic for the UI: elastic/kibana#62952 (comment)", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r420628946", "createdAt": "2020-05-06T08:36:36Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +271,210 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n+        }, new Object[][] {\n+            {\"a\",       8},\n+            {\"  b\",     5},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  a\",     11},\n+            {\"    b\",    6},\n+            {\"      2\",  5},\n+            {\"    3\",    2},\n+        });\n+    }\n+\n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_RootChangesToC() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_CommonAncestorA() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\",   8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\",        13},\n+            {\"  a\",      11},\n+            {\"    b\",     2},\n+            {\"    2\",     6},\n+            {\"      3\",   4},\n+            {\"        c\", 2}\n+        });\n+\n+        // this is empty but not null because a has stolen the child ids from b\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+        assertThat(spans.get(\"c\").getChildIds()).isNull();\n+        // has both 2 and 3 as child_ids, even though only 2 is a direct child", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d73f9381295d6d754ef229169d96ec86ef894dc"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5ODE4Mw==", "bodyText": "Fixed it", "url": "https://github.com/elastic/apm-agent-java/pull/1117#discussion_r423498183", "createdAt": "2020-05-12T06:46:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/test/java/co/elastic/apm/agent/profiler/CallTreeTest.java", "diffHunk": "@@ -262,6 +271,210 @@ void testDectivationBeforeEnd() throws Exception {\n         });\n     }\n \n+    /*\n+     * [1           ]    [1           ]\n+     *  [a         ]      [a         ]\n+     *   [2   ] [3]        [b    ][3]   <- b is supposed to stealChildIdsFom(a)\n+     *    [b   ]           [2   ]          however, it should only steal 2, not 3\n+     */\n+    @Test\n+    void testDectivationBeforeEnd2() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   bbbb b     \",\n+            \" a aaaa a a a \",\n+            \"1 2    2 3 3 1\"\n+        }, new Object[][] {\n+            {\"a\",       8},\n+            {\"  b\",     5},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  a\",     11},\n+            {\"    b\",    6},\n+            {\"      2\",  5},\n+            {\"    3\",    2},\n+        });\n+    }\n+\n+    /*\n+     * [1       ]\n+     *  [a     ]\n+     *   [b][2]\n+     */\n+    @Test\n+    void testActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \" bbb      \",\n+            \" aaa aa a \",\n+            \"1   2  2 1\"\n+        }, new Object[][] {\n+            {\"a\",       6},\n+            {\"  b\",     3},\n+        }, new Object[][] {\n+            {\"1\",       9},\n+            {\"  a\",     7},\n+            {\"    b\",   2},\n+            {\"    2\",   3}\n+        });\n+    }\n+\n+    /*\n+     * [1         ]\n+     *  [a][2    ]\n+     *  [b] [3  ]\n+     *       [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_RootChangesToC() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \" bbb        \",\n+            \" aaa  ccc   \",\n+            \"1   23   321\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       11},\n+            {\"  b\",      2, List.of(\"a\")},\n+            {\"  2\",      6},\n+            {\"    3\",    4},\n+            {\"      c\",  2}\n+        });\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a  ][3    ]\n+     *  [b  ] [4  ]\n+     *   [2]   [c]\n+     */\n+    @Test\n+    void testRegularActivationFollowedByNestedActivationAfterMethodEnds() throws Exception {\n+        assertCallTree(new String[]{\n+            \"   d          \",\n+            \" b b b        \",\n+            \" a a a  ccc   \",\n+            \"1 2 2 34   431\"\n+        }, new Object[][] {\n+            {\"a\",        3},\n+            {\"  b\",      3},\n+            {\"c\",        3},\n+        }, new Object[][] {\n+            {\"1\",       13},\n+            {\"  b\",      4, List.of(\"a\")},\n+            {\"    2\",    2},\n+            {\"  3\",      6},\n+            {\"    4\",    4},\n+            {\"      c\",  2}\n+        });\n+    }\n+\n+    /*\n+     * [1           ]\n+     *  [a         ]\n+     *   [b][2    ]\n+     *       [3  ]\n+     *        [c]\n+     */\n+    @Test\n+    void testNestedActivationAfterMethodEnds_CommonAncestorA() throws Exception {\n+        Map<String, AbstractSpan<?>> spans = assertCallTree(new String[]{\n+            \"  bbb  ccc    \",\n+            \" aaaa  aaa  a \",\n+            \"1    23   32 1\"\n+        }, new Object[][]{\n+            {\"a\",   8},\n+            {\"  b\", 3},\n+            {\"  c\", 3},\n+        }, new Object[][]{\n+            {\"1\",        13},\n+            {\"  a\",      11},\n+            {\"    b\",     2},\n+            {\"    2\",     6},\n+            {\"      3\",   4},\n+            {\"        c\", 2}\n+        });\n+\n+        // this is empty but not null because a has stolen the child ids from b\n+        assertThat(spans.get(\"b\").getChildIds().getSize()).isEqualTo(0);\n+        assertThat(spans.get(\"c\").getChildIds()).isNull();\n+        // has both 2 and 3 as child_ids, even though only 2 is a direct child", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODk0Ng=="}, "originalCommit": {"oid": "1d73f9381295d6d754ef229169d96ec86ef894dc"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 252, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}