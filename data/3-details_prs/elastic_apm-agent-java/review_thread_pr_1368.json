{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTY1NjQw", "number": 1368, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowMjozMlrOEeR00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowMjozMlrOEeR00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTg0Nzg3OnYy", "diffSide": "LEFT", "path": "apm-agent-plugins/apm-okhttp-plugin/src/main/java/co/elastic/apm/agent/okhttp/OkHttp3ClientInstrumentation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowMjozMlrOHJ1-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoxMTo1N1rOHKlXeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MzYyMA==", "bodyText": "It's probably fine either way, so just out of curiosity, why did you change from GlobalThreadLocal<Span> to returning the span in the Object[] return value?", "url": "https://github.com/elastic/apm-agent-java/pull/1368#discussion_r480083620", "createdAt": "2020-08-31T12:02:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-okhttp-plugin/src/main/java/co/elastic/apm/agent/okhttp/OkHttp3ClientInstrumentation.java", "diffHunk": "@@ -40,62 +36,52 @@\n import okhttp3.HttpUrl;\n import okhttp3.Request;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import static net.bytebuddy.matcher.ElementMatchers.named;\n import static net.bytebuddy.matcher.ElementMatchers.returns;\n \n public class OkHttp3ClientInstrumentation extends AbstractOkHttp3ClientInstrumentation {\n \n-    public OkHttp3ClientInstrumentation(ElasticApmTracer tracer) {\n-        super(tracer);\n-    }\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return OkHttpClient3ExecuteAdvice.class;\n     }\n \n-    @VisibleForAdvice\n     public static class OkHttpClient3ExecuteAdvice {\n \n-        @VisibleForAdvice\n-        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(OkHttpClient3ExecuteAdvice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58c17e9e6592484f082ca70aaa6d44315d2281e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgxMzAxNA==", "bodyText": "Hah, good question :) I don't know why.\nWhat is the difference between using GlobalThreadLocal and returning an array of objects? And when to use them?", "url": "https://github.com/elastic/apm-agent-java/pull/1368#discussion_r480813014", "createdAt": "2020-09-01T05:02:16Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-okhttp-plugin/src/main/java/co/elastic/apm/agent/okhttp/OkHttp3ClientInstrumentation.java", "diffHunk": "@@ -40,62 +36,52 @@\n import okhttp3.HttpUrl;\n import okhttp3.Request;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import static net.bytebuddy.matcher.ElementMatchers.named;\n import static net.bytebuddy.matcher.ElementMatchers.returns;\n \n public class OkHttp3ClientInstrumentation extends AbstractOkHttp3ClientInstrumentation {\n \n-    public OkHttp3ClientInstrumentation(ElasticApmTracer tracer) {\n-        super(tracer);\n-    }\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return OkHttpClient3ExecuteAdvice.class;\n     }\n \n-    @VisibleForAdvice\n     public static class OkHttpClient3ExecuteAdvice {\n \n-        @VisibleForAdvice\n-        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(OkHttpClient3ExecuteAdvice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MzYyMA=="}, "originalCommit": {"oid": "b58c17e9e6592484f082ca70aaa6d44315d2281e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2MDAyNA==", "bodyText": "Also a good question :)\nI guess in terms of allocations, the Obect[] approach might even be better, as the JIT compiler should be able to do some escape analysis and replace it with a stack allocation. Also, it seems a bit safer maybe as there are fewer things that can go wrong, such as forgetting to clear the ThreadLocal.\nA downside is that it requires more casting and things can go wrong when accessing the wrong index in the array.\nBut overall, the Object[] approach is probably preferable in most situations.", "url": "https://github.com/elastic/apm-agent-java/pull/1368#discussion_r480860024", "createdAt": "2020-09-01T06:11:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-okhttp-plugin/src/main/java/co/elastic/apm/agent/okhttp/OkHttp3ClientInstrumentation.java", "diffHunk": "@@ -40,62 +36,52 @@\n import okhttp3.HttpUrl;\n import okhttp3.Request;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import static net.bytebuddy.matcher.ElementMatchers.named;\n import static net.bytebuddy.matcher.ElementMatchers.returns;\n \n public class OkHttp3ClientInstrumentation extends AbstractOkHttp3ClientInstrumentation {\n \n-    public OkHttp3ClientInstrumentation(ElasticApmTracer tracer) {\n-        super(tracer);\n-    }\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return OkHttpClient3ExecuteAdvice.class;\n     }\n \n-    @VisibleForAdvice\n     public static class OkHttpClient3ExecuteAdvice {\n \n-        @VisibleForAdvice\n-        public final static GlobalThreadLocal<Span> spanTls = GlobalThreadLocal.get(OkHttpClient3ExecuteAdvice.class, \"spanTls\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MzYyMA=="}, "originalCommit": {"oid": "b58c17e9e6592484f082ca70aaa6d44315d2281e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 19, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}