{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTM1Njc4", "number": 1468, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNzoyNVrOE1M9Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozOTo1N1rOE1NOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjIyMjk5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNzoyNVrOHtV92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNzoyNVrOHtV92w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzg2Nw==", "bodyText": "[minor] make this log message specific to J9 JVM as it won't happen with other JVMs", "url": "https://github.com/elastic/apm-agent-java/pull/1468#discussion_r517307867", "createdAt": "2020-11-04T12:27:25Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java", "diffHunk": "@@ -196,14 +203,40 @@ public static Method getIndyBootstrapMethod() {\n     /**\n      * Injects the {@code java.lang.IndyBootstrapDispatcher} class into the bootstrap class loader if it wasn't already.\n      */\n-    private static Class<?> initIndyBootstrap() throws Exception {\n+    private static Class<?> initIndyBootstrap(final Logger logger) throws Exception {\n+        Class<?> indyBootstrapDispatcherClass;\n         try {\n-            return Class.forName(INDY_BOOTSTRAP_CLASS_NAME, false, null);\n+            indyBootstrapDispatcherClass = Class.forName(INDY_BOOTSTRAP_CLASS_NAME, false, null);\n         } catch (ClassNotFoundException e) {\n             byte[] bootstrapClass = IOUtils.readToBytes(ClassLoader.getSystemClassLoader().getResourceAsStream(INDY_BOOTSTRAP_RESOURCE));\n             ClassInjector.UsingUnsafe.ofBootLoader().injectRaw(Collections.singletonMap(INDY_BOOTSTRAP_CLASS_NAME, bootstrapClass));\n+            indyBootstrapDispatcherClass = Class.forName(INDY_BOOTSTRAP_CLASS_NAME, false, null);\n+        }\n+\n+        if (JvmRuntimeInfo.getMajorVersion() >= 9 && JvmRuntimeInfo.isJ9VM()) {\n+            try {\n+                logger.info(\"Overriding IndyBootstrapDispatcher class's module to java.base module\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8432ac24731c7d087cf76cf1a61ddaaecf79a307"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjI0NDM3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/IndyBootstrapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozMzozOFrOHtWKXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozMzozOFrOHtWKXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMTA3MQ==", "bodyText": "[minor] use assertJ assertions instead of Junit ones", "url": "https://github.com/elastic/apm-agent-java/pull/1468#discussion_r517311071", "createdAt": "2020-11-04T12:33:38Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/IndyBootstrapTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.bci;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import net.bytebuddy.dynamic.loading.ClassInjector;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.util.IOUtils;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8432ac24731c7d087cf76cf1a61ddaaecf79a307"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjI2NjM0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/IndyBootstrapTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozOTo1N1rOHtWXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDozMTozNFrOHtatBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNDQyNQ==", "bodyText": "[question] Would it be possible to have an exception thrown with an explicit message when this method is called and IndyBootstrapDispatcherModuleSetter hasn't been loaded from the right classloader ? If yes, that might help to diagnose any unexpected state in the field.", "url": "https://github.com/elastic/apm-agent-java/pull/1468#discussion_r517314425", "createdAt": "2020-11-04T12:39:57Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/IndyBootstrapTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.bci;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import net.bytebuddy.dynamic.loading.ClassInjector;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.util.IOUtils;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+\n+class IndyBootstrapTest extends AbstractInstrumentationTest {\n+\n+    @Test\n+    void testSetJavaBaseModule() throws Throwable {\n+        Module javaBaseModule = Class.class.getModule();\n+        assertNotEquals(IndyBootstrapTest.class.getModule(), javaBaseModule);\n+\n+        // In order to test this functionality, IndyBootstrapDispatcherModuleSetter needs to be loaded from the Boot CL\n+        InputStream classFileAsStream = IndyBootstrapDispatcherModuleSetter.class.getResourceAsStream(\"IndyBootstrapDispatcherModuleSetter.class\");\n+        byte[] bootstrapClass = IOUtils.readToBytes(classFileAsStream);\n+        ClassInjector.UsingUnsafe.ofBootLoader().injectRaw(Collections.singletonMap(IndyBootstrapDispatcherModuleSetter.class.getName(), bootstrapClass));\n+\n+        IndyBootstrap.setJavaBaseModule(IndyBootstrapTest.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8432ac24731c7d087cf76cf1a61ddaaecf79a307"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NTQ3Nw==", "bodyText": "This can't happen - the setJavaBaseModule method tries to load it from the bootstrap CL explicitly, so failing to inject it there will result with ClassNotFoundException (which I think is explanatory enough).\nAs you can see here, I do load it with the test's class loader, but its single method is never invoked on any class that is not loaded correctly.", "url": "https://github.com/elastic/apm-agent-java/pull/1468#discussion_r517385477", "createdAt": "2020-11-04T14:31:34Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/IndyBootstrapTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.bci;\n+\n+import co.elastic.apm.agent.AbstractInstrumentationTest;\n+import net.bytebuddy.dynamic.loading.ClassInjector;\n+import org.junit.jupiter.api.Test;\n+import org.stagemonitor.util.IOUtils;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+\n+class IndyBootstrapTest extends AbstractInstrumentationTest {\n+\n+    @Test\n+    void testSetJavaBaseModule() throws Throwable {\n+        Module javaBaseModule = Class.class.getModule();\n+        assertNotEquals(IndyBootstrapTest.class.getModule(), javaBaseModule);\n+\n+        // In order to test this functionality, IndyBootstrapDispatcherModuleSetter needs to be loaded from the Boot CL\n+        InputStream classFileAsStream = IndyBootstrapDispatcherModuleSetter.class.getResourceAsStream(\"IndyBootstrapDispatcherModuleSetter.class\");\n+        byte[] bootstrapClass = IOUtils.readToBytes(classFileAsStream);\n+        ClassInjector.UsingUnsafe.ofBootLoader().injectRaw(Collections.singletonMap(IndyBootstrapDispatcherModuleSetter.class.getName(), bootstrapClass));\n+\n+        IndyBootstrap.setJavaBaseModule(IndyBootstrapTest.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNDQyNQ=="}, "originalCommit": {"oid": "8432ac24731c7d087cf76cf1a61ddaaecf79a307"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 72, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}