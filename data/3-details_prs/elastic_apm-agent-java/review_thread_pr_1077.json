{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTYyNDMz", "number": 1077, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjoxMFrODmE3Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMjoyMVrODmospg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUyMTUwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjoxMFrOFzTmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjoxMFrOFzTmSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n          \n            \n                protected AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n      \n    \n    \n  \n\nProvides a more accurate access and works also if the actual instrumentation is loaded by a different class loader than the one loading this abstract parent", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342794", "createdAt": "2020-03-08T07:22:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUyMjc1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyNToxNlrOFzTm7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo1MTozNlrOFzuceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjk1OA==", "bodyText": "This shouldn't be done here, as it is not required for all subclasses. Adds a non-required dependency between AsyncInstrumentation and ServletApiAdvice.", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342958", "createdAt": "2020-03-08T07:25:16Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){\n+        ServletApiAdvice.init(tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MjY0OQ==", "bodyText": "fixed in the last commit", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389782649", "createdAt": "2020-03-09T15:51:36Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){\n+        ServletApiAdvice.init(tracer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjk1OA=="}, "originalCommit": {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzg4OTcwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0NTo1MFrOF0Fqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDoyNjoyMFrOF0JDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA3OQ==", "bodyText": "Also instrument Servlet#doService, as all servlets might already be initialized once the agent attaches.", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163079", "createdAt": "2020-03-10T08:45:50Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxODY1OA==", "bodyText": "done in the last commit", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390218658", "createdAt": "2020-03-10T10:26:20Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA3OQ=="}, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzg5MjkyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1NVrOF0Fsgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1NVrOF0Fsgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzU4Nw==", "bodyText": "As we're ok with logging twice, it's fine to make this non-volatile\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static volatile boolean doCheckAndWarn = true;\n          \n          \n            \n                public static boolean doCheckAndWarn = true;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163587", "createdAt": "2020-03-10T08:46:55Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzkxNDQyOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1MzozMVrOF0F5oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1MzozMVrOF0F5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2Njk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            doCheckAndWarn = false;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390166944", "createdAt": "2020-03-10T08:53:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzkxNTY4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1Mzo1MVrOF0F6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1Mzo1MVrOF0F6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NzEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doCheckAndWarn = false;", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390167138", "createdAt": "2020-03-10T08:53:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+\n+        if (majorVersion < 3) {\n+            logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+        }\n+\n+        doCheckAndWarn = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzkyMzg5OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NjowNFrOF0F_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NjowNFrOF0F_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODM0Mg==", "bodyText": "Kill two birds with one stone and also log the servlet info. That will be really useful to avoid back-and-forth in support requests.\nlogger.info(servletConfig.getServletContext().getServerInfo());", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390168342", "createdAt": "2020-03-10T08:56:04Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM5MjcwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletVersionInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMjoyMVrOF0Kheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0NDoxNlrOF0PW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY4Mg==", "bodyText": "To avoid a CAS on every invocation\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!doLogAndWarn.getAndSet(false)) {\n          \n          \n            \n                        if (!doLogAndWarn.get() || !doLogAndWarn.getAndSet(false)) {\n          \n      \n    \n    \n  \n\nmaybe rename doLogAndWarn to alreadyLogged to get rid of the negations which are a bit harder to parse?", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390242682", "createdAt": "2020-03-10T11:12:21Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletVersionInstrumentation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet} to log Servlet container details and warns about unsupported version.\n+ * <p>\n+ * Does not inherit from {@link AbstractServletInstrumentation} in order to still instrument when servlet version is not\n+ * supported.\n+ */\n+public abstract class ServletVersionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletVersionInstrumentation.class);\n+\n+    @VisibleForAdvice\n+    public static AtomicBoolean doLogAndWarn = new AtomicBoolean(true);\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#init(ServletConfig)}\n+     */\n+    public static class Init extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"init\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+            if (!doLogAndWarn.getAndSet(false)) {\n+                return;\n+            }\n+\n+            int majorVersion = -1;\n+            int minorVersion = -1;\n+            String serverInfo = null;\n+            if (servletConfig != null) {\n+                ServletContext servletContext = servletConfig.getServletContext();\n+                if (null != servletContext) {\n+                    majorVersion = servletContext.getMajorVersion();\n+                    minorVersion = servletContext.getMinorVersion();\n+                    serverInfo = servletContext.getServerInfo();\n+                }\n+            }\n+\n+            logger.info(\"Servlet container info = {}\", serverInfo);\n+            if (majorVersion < 3) {\n+                logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#service(ServletRequest, ServletResponse)}\n+     */\n+    public static class Service extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"service\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+                .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.This Servlet servlet) {\n+            if (!doLogAndWarn.getAndSet(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMTg3Mg==", "bodyText": "definitely agree on having less negations, however doing a double check here seems a bit overkill. I think it's fine to replace this AtomicBoolean with a simple volatile boolean as AtomicBoolean.get does makes a volatile read, thus it won't be more efficient.", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390321872", "createdAt": "2020-03-10T13:44:16Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletVersionInstrumentation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet} to log Servlet container details and warns about unsupported version.\n+ * <p>\n+ * Does not inherit from {@link AbstractServletInstrumentation} in order to still instrument when servlet version is not\n+ * supported.\n+ */\n+public abstract class ServletVersionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletVersionInstrumentation.class);\n+\n+    @VisibleForAdvice\n+    public static AtomicBoolean doLogAndWarn = new AtomicBoolean(true);\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#init(ServletConfig)}\n+     */\n+    public static class Init extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"init\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+            if (!doLogAndWarn.getAndSet(false)) {\n+                return;\n+            }\n+\n+            int majorVersion = -1;\n+            int minorVersion = -1;\n+            String serverInfo = null;\n+            if (servletConfig != null) {\n+                ServletContext servletContext = servletConfig.getServletContext();\n+                if (null != servletContext) {\n+                    majorVersion = servletContext.getMajorVersion();\n+                    minorVersion = servletContext.getMinorVersion();\n+                    serverInfo = servletContext.getServerInfo();\n+                }\n+            }\n+\n+            logger.info(\"Servlet container info = {}\", serverInfo);\n+            if (majorVersion < 3) {\n+                logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#service(ServletRequest, ServletResponse)}\n+     */\n+    public static class Service extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"service\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+                .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.This Servlet servlet) {\n+            if (!doLogAndWarn.getAndSet(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY4Mg=="}, "originalCommit": {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 230, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}