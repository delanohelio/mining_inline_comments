{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NjQ0MDU3", "number": 1447, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNTowMlrOEvsvYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNTowMlrOEvsvYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUxNTU1OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-urlconnection-plugin/src/main/java/co/elastic/apm/agent/urlconnection/HttpUrlConnectionInstrumentation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNTowMlrOHk0qmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjo0NTozMVrOHlciAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return hasSuperType(is(HttpURLConnection.class)).and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")));\n          \n          \n            \n                    return hasSuperType(is(HttpURLConnection.class))\n          \n          \n            \n                        .and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")))\n          \n          \n            \n                        .and(declaresField(named(\"connected\")));", "url": "https://github.com/elastic/apm-agent-java/pull/1447#discussion_r508373658", "createdAt": "2020-10-20T10:05:02Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-urlconnection-plugin/src/main/java/co/elastic/apm/agent/urlconnection/HttpUrlConnectionInstrumentation.java", "diffHunk": "@@ -64,7 +65,7 @@\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n-        return hasSuperType(is(HttpURLConnection.class));\n+        return hasSuperType(is(HttpURLConnection.class)).and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a1b384f39074b255ddfe6249d28af7fdc421f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NTExMw==", "bodyText": "Why declaresField(named(\"connected\"))? It can be an inherited and not a declared field.", "url": "https://github.com/elastic/apm-agent-java/pull/1447#discussion_r508375113", "createdAt": "2020-10-20T10:07:21Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-urlconnection-plugin/src/main/java/co/elastic/apm/agent/urlconnection/HttpUrlConnectionInstrumentation.java", "diffHunk": "@@ -64,7 +65,7 @@\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n-        return hasSuperType(is(HttpURLConnection.class));\n+        return hasSuperType(is(HttpURLConnection.class)).and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzY1OA=="}, "originalCommit": {"oid": "82a1b384f39074b255ddfe6249d28af7fdc421f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNzQ0OA==", "bodyText": "@felixbarny This cannot work, as the connected field belongs to java.net.URLConnection (abstract). Let me know if you think we can merge it.", "url": "https://github.com/elastic/apm-agent-java/pull/1447#discussion_r509017448", "createdAt": "2020-10-21T06:23:46Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-urlconnection-plugin/src/main/java/co/elastic/apm/agent/urlconnection/HttpUrlConnectionInstrumentation.java", "diffHunk": "@@ -64,7 +65,7 @@\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n-        return hasSuperType(is(HttpURLConnection.class));\n+        return hasSuperType(is(HttpURLConnection.class)).and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzY1OA=="}, "originalCommit": {"oid": "82a1b384f39074b255ddfe6249d28af7fdc421f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNjgxNg==", "bodyText": "Yes, forget what I said. @Advice.FieldValue(\"connected\") boolean connected is guaranteed to work as the connected field is always accessible as we're searching for sub-types of HttpUrlConnection that are also sub-types of URLConnection", "url": "https://github.com/elastic/apm-agent-java/pull/1447#discussion_r509026816", "createdAt": "2020-10-21T06:45:31Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-urlconnection-plugin/src/main/java/co/elastic/apm/agent/urlconnection/HttpUrlConnectionInstrumentation.java", "diffHunk": "@@ -64,7 +65,7 @@\n \n     @Override\n     public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n-        return hasSuperType(is(HttpURLConnection.class));\n+        return hasSuperType(is(HttpURLConnection.class)).and(not(named(\"sun.net.www.protocol.https.HttpsURLConnectionImpl\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzY1OA=="}, "originalCommit": {"oid": "82a1b384f39074b255ddfe6249d28af7fdc421f1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 57, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}