{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTU0MTg4", "number": 1232, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1MjoxNVrOEF0q4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1MjoxNVrOEF0q4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQxMjgyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1MjoxNVrOGkPctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozOTo1NVrOGkTflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ==", "bodyText": "If you are OK with OutOfMemoryError being thrown here, why even check that the max is exceeded? In any case it may be out of memory before that, depending on what the heap got left. I think this max check makes sense only if you limit it to a much lower number, and then you throw some IllegalStateException or something. Currently you allow it to grow to ~2 GB (consecutive block) for each list, which seems a lot.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440655031", "createdAt": "2020-06-16T07:52:15Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MjA0Mg==", "bodyText": "That's exactly how it's done in ArrayList, for example.\n\nIf you are OK with OutOfMemoryError being thrown here, why even check that the max is exceeded?\n\nBecause it would not throw an OutOfMemoryError otherwise, the int would just overflow and be negative.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440672042", "createdAt": "2020-06-16T08:20:51Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ=="}, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MDE2MQ==", "bodyText": "That's true. It's weird that ArrayList does that, this error indicates failure to allocate memory.\nBottom line, I think this is extremely high and we should not consume so much heap memory if something goes bad. We need the feature not to work if we have a bug, but not the JVM getting crashed or sluggish.\nIt's a general-purpose data collection, so you can add a constructor to limit capacity, but since it is only used by us, I think limiting the capacity internally to MUCH lower is good enough.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440680161", "createdAt": "2020-06-16T08:33:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ=="}, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NjY4NQ==", "bodyText": "Sounds a bit like a slippery slope: following that argumentation, we'd have to limit the size of all the collections used in the agent. What makes the usage of this list special or more risky?", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440696685", "createdAt": "2020-06-16T08:59:24Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ=="}, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTMwMw==", "bodyText": "It is a slippery slope, just overthought this because of the specific issue with this one.", "url": "https://github.com/elastic/apm-agent-java/pull/1232#discussion_r440721303", "createdAt": "2020-06-16T09:39:55Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/LongList.java", "diffHunk": "@@ -58,9 +59,20 @@ public void addAll(LongList other) {\n         size += other.size;\n     }\n \n-    private void ensureCapacity(int size) {\n-        if (longs.length < size) {\n-            longs = Arrays.copyOf(longs, longs.length * 2);\n+    private void ensureCapacity(long minCapacity) {\n+        if (longs.length < minCapacity) {\n+            longs = Arrays.copyOf(longs, newCapacity(minCapacity, longs.length));\n+        }\n+    }\n+\n+    static int newCapacity(long minCapacity, long oldCapacity) {\n+        long growBy50Percent = oldCapacity + (oldCapacity >> 1);\n+        if (minCapacity <= growBy50Percent) {\n+            return (int) growBy50Percent;\n+        } else if (minCapacity <= MAX_ARRAY_SIZE) {\n+            return (int) minCapacity;\n+        } else {\n+            throw new OutOfMemoryError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTAzMQ=="}, "originalCommit": {"oid": "50228f5ff1c7d794f2299c9cc6d76fd5b61fa1e9"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}