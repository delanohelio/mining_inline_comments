{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjgzMTYy", "number": 981, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyNToyOVrODXeWbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzo1Mzo0MFrODXhvyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQxMTAwOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/MessagingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyNToyOVrOFcya-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyNToyOVrOFcya-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMDU1Mg==", "bodyText": "nit: constant not needed. so far we only extracted constants if they are used more than once", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365730552", "createdAt": "2020-01-13T10:25:29Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/MessagingConfiguration.java", "diffHunk": "@@ -31,26 +31,35 @@\n import org.stagemonitor.configuration.ConfigurationOptionProvider;\n import org.stagemonitor.configuration.converter.ListValueConverter;\n \n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n public class MessagingConfiguration extends ConfigurationOptionProvider {\n     private static final String MESSAGING_CATEGORY = \"Messaging\";\n     private static final String MESSAGE_POLLING_TRANSACTION_STRATEGY = \"message_polling_transaction_strategy\";\n+    private static final String COLLECT_QUEUE_ADDRESS = \"collect_queue_address\";\n \n-    private ConfigurationOption<Strategy> messagePollingTransaction = ConfigurationOption.enumOption(Strategy.class)\n+    private ConfigurationOption<Strategy> messagePollingTransactionStrategy = ConfigurationOption.enumOption(Strategy.class)\n         .key(MESSAGE_POLLING_TRANSACTION_STRATEGY)\n         .configurationCategory(MESSAGING_CATEGORY)\n         .tags(\"internal\")\n         .description(\"Determines whether the agent should create transactions for the polling action itself (e.g. `javax.jms.MessageConsumer#receive`), \\n\" +\n             \"attempt to create a transaction for the message handling code occurring if the polling method returns a message, \\n\" +\n             \"or both. Valid options are: `POLLING`, `HANDLING` and `BOTH`. \\n\" +\n             \"\\n\" +\n-            \"This option is case-insensitive.\")\n+            \"This option is case-insensitive and is only relevant for JMS.\")\n         .dynamic(true)\n         .buildWithDefault(Strategy.HANDLING);\n \n+    private ConfigurationOption<Boolean> collectQueueAddress = ConfigurationOption.booleanOption()\n+        .key(COLLECT_QUEUE_ADDRESS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQxNzAzOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Headers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyNzo0N1rOFcyerg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMTo0N1rOFc7zCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMTUwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalStateException(\"next() called on a depleted iterator\");\n          \n          \n            \n                            throw new IllegalStateException(\"next() called on a deleted iterator\");", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365731502", "createdAt": "2020-01-13T10:27:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Headers.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.context;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import co.elastic.apm.agent.util.NoRandomAccessMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.Iterator;\n+\n+/**\n+ * A garbage-free data structure for text and binary headers\n+ */\n+public class Headers implements Recyclable, Iterable<Headers.Header> {\n+    private final NoRandomAccessMap<String, String> textHeaders = new NoRandomAccessMap<>();\n+    private final BinaryHeaderMap binaryHeaders = new BinaryHeaderMap();\n+    private final NoGarbageIterator iterator = new NoGarbageIterator();\n+\n+    public void add(String key, String value) {\n+        textHeaders.add(key, value);\n+    }\n+\n+    public boolean add(String key, byte[] value) throws BinaryHeaderMap.InsufficientCapacityException {\n+        return binaryHeaders.add(key, value);\n+    }\n+\n+    @Override\n+    public void resetState() {\n+        textHeaders.resetState();\n+        binaryHeaders.resetState();\n+    }\n+\n+    public int size() {\n+        return textHeaders.size() + binaryHeaders.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    @Override\n+    public Iterator<Header> iterator() {\n+        iterator.reset();\n+        return iterator;\n+    }\n+\n+    public void copyFrom(Headers other) {\n+        textHeaders.copyFrom(other.textHeaders);\n+        binaryHeaders.copyFrom(other.binaryHeaders);\n+    }\n+\n+    public interface Header {\n+        String getKey();\n+\n+        @Nullable\n+        CharSequence getValue();\n+    }\n+\n+    private static class HeaderImpl implements Header {\n+        @Nullable\n+        String key;\n+        @Nullable\n+        CharSequence value;\n+\n+        public String getKey() {\n+            if (key == null) {\n+                throw new IllegalStateException(\"Key shouldn't be null. Make sure you don't read and write to this map concurrently\");\n+            }\n+            return key;\n+        }\n+\n+        @Nullable\n+        public CharSequence getValue() {\n+            return value;\n+        }\n+\n+        void reset() {\n+            key = null;\n+            value = null;\n+        }\n+    }\n+\n+    private class NoGarbageIterator implements Iterator<Header> {\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<NoRandomAccessMap.Entry<String, String>> textHeadersIterator;\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<BinaryHeaderMap.Entry> binaryHeadersIterator;\n+        private final HeaderImpl header = new HeaderImpl();\n+\n+        @Override\n+        public boolean hasNext() {\n+            return textHeadersIterator.hasNext() || binaryHeadersIterator.hasNext();\n+        }\n+\n+        @Override\n+        public Header next() {\n+            if (textHeadersIterator.hasNext()) {\n+                NoRandomAccessMap.Entry<String, String> textHeader = textHeadersIterator.next();\n+                header.key = textHeader.getKey();\n+                header.value = textHeader.getValue();\n+            } else if (binaryHeadersIterator.hasNext()) {\n+                BinaryHeaderMap.Entry binaryHeader = binaryHeadersIterator.next();\n+                header.key = binaryHeader.getKey();\n+                header.value = binaryHeader.getValue();\n+            } else {\n+                throw new IllegalStateException(\"next() called on a depleted iterator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyOTkzMw==", "bodyText": "No, it's actually depleted \ud83d\ude42", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365829933", "createdAt": "2020-01-13T14:23:52Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Headers.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.context;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import co.elastic.apm.agent.util.NoRandomAccessMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.Iterator;\n+\n+/**\n+ * A garbage-free data structure for text and binary headers\n+ */\n+public class Headers implements Recyclable, Iterable<Headers.Header> {\n+    private final NoRandomAccessMap<String, String> textHeaders = new NoRandomAccessMap<>();\n+    private final BinaryHeaderMap binaryHeaders = new BinaryHeaderMap();\n+    private final NoGarbageIterator iterator = new NoGarbageIterator();\n+\n+    public void add(String key, String value) {\n+        textHeaders.add(key, value);\n+    }\n+\n+    public boolean add(String key, byte[] value) throws BinaryHeaderMap.InsufficientCapacityException {\n+        return binaryHeaders.add(key, value);\n+    }\n+\n+    @Override\n+    public void resetState() {\n+        textHeaders.resetState();\n+        binaryHeaders.resetState();\n+    }\n+\n+    public int size() {\n+        return textHeaders.size() + binaryHeaders.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    @Override\n+    public Iterator<Header> iterator() {\n+        iterator.reset();\n+        return iterator;\n+    }\n+\n+    public void copyFrom(Headers other) {\n+        textHeaders.copyFrom(other.textHeaders);\n+        binaryHeaders.copyFrom(other.binaryHeaders);\n+    }\n+\n+    public interface Header {\n+        String getKey();\n+\n+        @Nullable\n+        CharSequence getValue();\n+    }\n+\n+    private static class HeaderImpl implements Header {\n+        @Nullable\n+        String key;\n+        @Nullable\n+        CharSequence value;\n+\n+        public String getKey() {\n+            if (key == null) {\n+                throw new IllegalStateException(\"Key shouldn't be null. Make sure you don't read and write to this map concurrently\");\n+            }\n+            return key;\n+        }\n+\n+        @Nullable\n+        public CharSequence getValue() {\n+            return value;\n+        }\n+\n+        void reset() {\n+            key = null;\n+            value = null;\n+        }\n+    }\n+\n+    private class NoGarbageIterator implements Iterator<Header> {\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<NoRandomAccessMap.Entry<String, String>> textHeadersIterator;\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<BinaryHeaderMap.Entry> binaryHeadersIterator;\n+        private final HeaderImpl header = new HeaderImpl();\n+\n+        @Override\n+        public boolean hasNext() {\n+            return textHeadersIterator.hasNext() || binaryHeadersIterator.hasNext();\n+        }\n+\n+        @Override\n+        public Header next() {\n+            if (textHeadersIterator.hasNext()) {\n+                NoRandomAccessMap.Entry<String, String> textHeader = textHeadersIterator.next();\n+                header.key = textHeader.getKey();\n+                header.value = textHeader.getValue();\n+            } else if (binaryHeadersIterator.hasNext()) {\n+                BinaryHeaderMap.Entry binaryHeader = binaryHeadersIterator.next();\n+                header.key = binaryHeader.getKey();\n+                header.value = binaryHeader.getValue();\n+            } else {\n+                throw new IllegalStateException(\"next() called on a depleted iterator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMTUwMg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NDE3MQ==", "bodyText": "TIL!", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365884171", "createdAt": "2020-01-13T16:01:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Headers.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.context;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import co.elastic.apm.agent.util.NoRandomAccessMap;\n+\n+import javax.annotation.Nullable;\n+import java.util.Iterator;\n+\n+/**\n+ * A garbage-free data structure for text and binary headers\n+ */\n+public class Headers implements Recyclable, Iterable<Headers.Header> {\n+    private final NoRandomAccessMap<String, String> textHeaders = new NoRandomAccessMap<>();\n+    private final BinaryHeaderMap binaryHeaders = new BinaryHeaderMap();\n+    private final NoGarbageIterator iterator = new NoGarbageIterator();\n+\n+    public void add(String key, String value) {\n+        textHeaders.add(key, value);\n+    }\n+\n+    public boolean add(String key, byte[] value) throws BinaryHeaderMap.InsufficientCapacityException {\n+        return binaryHeaders.add(key, value);\n+    }\n+\n+    @Override\n+    public void resetState() {\n+        textHeaders.resetState();\n+        binaryHeaders.resetState();\n+    }\n+\n+    public int size() {\n+        return textHeaders.size() + binaryHeaders.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    @Override\n+    public Iterator<Header> iterator() {\n+        iterator.reset();\n+        return iterator;\n+    }\n+\n+    public void copyFrom(Headers other) {\n+        textHeaders.copyFrom(other.textHeaders);\n+        binaryHeaders.copyFrom(other.binaryHeaders);\n+    }\n+\n+    public interface Header {\n+        String getKey();\n+\n+        @Nullable\n+        CharSequence getValue();\n+    }\n+\n+    private static class HeaderImpl implements Header {\n+        @Nullable\n+        String key;\n+        @Nullable\n+        CharSequence value;\n+\n+        public String getKey() {\n+            if (key == null) {\n+                throw new IllegalStateException(\"Key shouldn't be null. Make sure you don't read and write to this map concurrently\");\n+            }\n+            return key;\n+        }\n+\n+        @Nullable\n+        public CharSequence getValue() {\n+            return value;\n+        }\n+\n+        void reset() {\n+            key = null;\n+            value = null;\n+        }\n+    }\n+\n+    private class NoGarbageIterator implements Iterator<Header> {\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<NoRandomAccessMap.Entry<String, String>> textHeadersIterator;\n+        @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+        private Iterator<BinaryHeaderMap.Entry> binaryHeadersIterator;\n+        private final HeaderImpl header = new HeaderImpl();\n+\n+        @Override\n+        public boolean hasNext() {\n+            return textHeadersIterator.hasNext() || binaryHeadersIterator.hasNext();\n+        }\n+\n+        @Override\n+        public Header next() {\n+            if (textHeadersIterator.hasNext()) {\n+                NoRandomAccessMap.Entry<String, String> textHeader = textHeadersIterator.next();\n+                header.key = textHeader.getKey();\n+                header.value = textHeader.getValue();\n+            } else if (binaryHeadersIterator.hasNext()) {\n+                BinaryHeaderMap.Entry binaryHeader = binaryHeadersIterator.next();\n+                header.key = binaryHeader.getKey();\n+                header.value = binaryHeader.getValue();\n+            } else {\n+                throw new IllegalStateException(\"next() called on a depleted iterator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMTUwMg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ3NzU3OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0ODo0NFrOFczBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0ODo0NFrOFczBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDQyMg==", "bodyText": "Limit the size of this one? Maybe even object pool the body separately, similar to Request.rawBody. Reasoning is that not all spans are message span. But over time, all spans in the pool might have a large Message.body StringBuilder.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365740422", "createdAt": "2020-01-13T10:48:44Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java", "diffHunk": "@@ -39,8 +39,7 @@\n     @Nullable\n     private String topicName;\n \n-    @Nullable\n-    private String body;\n+    private final StringBuilder body = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUxMjg5OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/BinaryHeaderMapTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMToxNlrOFczW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNDozNVrOFc4gug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NTg5Mw==", "bodyText": "This is redundant as there will be a new instance of BinaryHeaderMapTest for every test method.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365745893", "createdAt": "2020-01-13T11:01:16Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/BinaryHeaderMapTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Base64;\n+import java.util.Iterator;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class BinaryHeaderMapTest {\n+    private BinaryHeaderMap headerMap = new BinaryHeaderMap();\n+\n+    @AfterEach\n+    void reset() {\n+        headerMap.resetState();\n+        assertThat(headerMap.isEmpty()).isTrue();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMDMzMA==", "bodyText": "Right, but it tests resetState and isEmpty", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365830330", "createdAt": "2020-01-13T14:24:35Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/BinaryHeaderMapTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Base64;\n+import java.util.Iterator;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class BinaryHeaderMapTest {\n+    private BinaryHeaderMap headerMap = new BinaryHeaderMap();\n+\n+    @AfterEach\n+    void reset() {\n+        headerMap.resetState();\n+        assertThat(headerMap.isEmpty()).isTrue();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NTg5Mw=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTY3MTM3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/KafkaConsumerRecordsInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjowNzoxNVrOFc01pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjowNzoxNVrOFc01pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3MDE1MA==", "bodyText": "Add a javadoc {@link } of the instrumented method(s). This makes it much easier to navigate there with an IDE.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365770150", "createdAt": "2020-01-13T12:07:15Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/KafkaConsumerRecordsInstrumentation.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka;\n+\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.kafka.helper.KafkaInstrumentationHelper;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public abstract class KafkaConsumerRecordsInstrumentation extends BaseKafkaInstrumentation {\n+\n+    public KafkaConsumerRecordsInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.apache.kafka.clients.consumer.ConsumerRecords\");\n+    }\n+\n+    public static class IteratorInstrumentation extends KafkaConsumerRecordsInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTY4NDEzOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/KafkaProducerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoxMjo0NlrOFc09dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNTo1N1rOFc4j2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3MjE0OQ==", "bodyText": "Isn't that redundant because createExitSpan returns null if the current span is an exit span?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365772149", "createdAt": "2020-01-13T12:12:46Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/KafkaProducerInstrumentation.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.kafka.helper.KafkaInstrumentationHelper;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.kafka.clients.ApiVersions;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.record.RecordBatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+public class KafkaProducerInstrumentation extends BaseKafkaInstrumentation {\n+\n+    @VisibleForAdvice\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static final Logger logger = LoggerFactory.getLogger(KafkaProducerInstrumentation.class);\n+\n+    public KafkaProducerInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.apache.kafka.clients.producer.KafkaProducer\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"doSend\").and(takesArgument(0, named(\"org.apache.kafka.clients.producer.ProducerRecord\")));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return KafkaProducerAdvice.class;\n+    }\n+\n+    public static class KafkaProducerAdvice {\n+        @SuppressWarnings(\"unused\")\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @Nullable\n+        public static Span beforeSend(@Advice.FieldValue(\"apiVersions\") final ApiVersions apiVersions,\n+                                      @SuppressWarnings(\"rawtypes\") @Advice.Argument(0) final ProducerRecord record,\n+                                      @Nullable @Advice.Argument(value = 1, readOnly = false) Callback callback) {\n+            if (tracer == null) {\n+                return null;\n+            }\n+\n+            String topic = record.topic();\n+            if (ignoreTopic(topic)) {\n+                return null;\n+            }\n+\n+            final TraceContextHolder<?> activeSpan = tracer.getActive();\n+            if (activeSpan == null || !activeSpan.isSampled()) {\n+                return null;\n+            }\n+\n+            if (activeSpan instanceof Span && \"kafka\".equals(((Span) activeSpan).getSubtype())) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMTEzMA==", "bodyText": "It IS redundant. Thanks!", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365831130", "createdAt": "2020-01-13T14:25:57Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/KafkaProducerInstrumentation.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka;\n+\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.TraceContextHolder;\n+import co.elastic.apm.agent.kafka.helper.KafkaInstrumentationHelper;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.kafka.clients.ApiVersions;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.record.RecordBatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+public class KafkaProducerInstrumentation extends BaseKafkaInstrumentation {\n+\n+    @VisibleForAdvice\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static final Logger logger = LoggerFactory.getLogger(KafkaProducerInstrumentation.class);\n+\n+    public KafkaProducerInstrumentation(ElasticApmTracer tracer) {\n+        super(tracer);\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(\"org.apache.kafka.clients.producer.KafkaProducer\");\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"doSend\").and(takesArgument(0, named(\"org.apache.kafka.clients.producer.ProducerRecord\")));\n+    }\n+\n+    @Override\n+    public Class<?> getAdviceClass() {\n+        return KafkaProducerAdvice.class;\n+    }\n+\n+    public static class KafkaProducerAdvice {\n+        @SuppressWarnings(\"unused\")\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @Nullable\n+        public static Span beforeSend(@Advice.FieldValue(\"apiVersions\") final ApiVersions apiVersions,\n+                                      @SuppressWarnings(\"rawtypes\") @Advice.Argument(0) final ProducerRecord record,\n+                                      @Nullable @Advice.Argument(value = 1, readOnly = false) Callback callback) {\n+            if (tracer == null) {\n+                return null;\n+            }\n+\n+            String topic = record.topic();\n+            if (ignoreTopic(topic)) {\n+                return null;\n+            }\n+\n+            final TraceContextHolder<?> activeSpan = tracer.getActive();\n+            if (activeSpan == null || !activeSpan.isSampled()) {\n+                return null;\n+            }\n+\n+            if (activeSpan instanceof Span && \"kafka\".equals(((Span) activeSpan).getSubtype())) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3MjE0OQ=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTY5NDMxOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/CallbackWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoxNjo1MlrOFc1DSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoxNjo1MlrOFc1DSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3MzY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Span span;\n          \n          \n            \n                private volatile Span span;", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365773640", "createdAt": "2020-01-13T12:16:52Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/CallbackWrapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.impl.transaction.Span;\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+\n+import javax.annotation.Nullable;\n+\n+class CallbackWrapper implements Callback, Recyclable {\n+\n+    private final KafkaInstrumentationHelperImpl helper;\n+\n+    @Nullable\n+    private Callback delegate;\n+    @SuppressWarnings(\"NotNullFieldNotInitialized\")\n+    private Span span;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTc5NTgwOnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjo1NjoyNlrOFc1-fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMTo0MlrOFc7y0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4ODc5Nw==", "bodyText": "This allocates a byte[] in case the header is not read by the application anyways, right?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365788797", "createdAt": "2020-01-13T12:56:26Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {\n+                            try {\n+                                message.addHeader(key, header.value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNDM1MA==", "bodyText": "Yes it does. I could potentially access the underlying org.apache.kafka.common.header.internals.RecordHeader#valueBuffer, but this is implementation detail, not API, so I am not sure it is best, especially assuming that normally if headers are sent they are also read. WDYT?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365834350", "createdAt": "2020-01-13T14:31:39Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {\n+                            try {\n+                                message.addHeader(key, header.value());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4ODc5Nw=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NDExMg==", "bodyText": "Yeah, let's leave it as-is for now.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365884112", "createdAt": "2020-01-13T16:01:42Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {\n+                            try {\n+                                message.addHeader(key, header.value());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4ODc5Nw=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTgxODc3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzowNDozNVrOFc2L7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToyNzo0M1rOFeWTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIzNg==", "bodyText": "Maybe sanitize centrally with a co.elastic.apm.agent.report.processor.Processor?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365792236", "createdAt": "2020-01-13T13:04:35Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNTE2OQ==", "bodyText": "Why? Especially given the comment above- better avoid this allocation and decoding if possible.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365835169", "createdAt": "2020-01-13T14:33:10Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIzNg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NDEwMg==", "bodyText": "So that we don't forget it on other messaging frameworks. What do you think about doing both maybe?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365884102", "createdAt": "2020-01-13T16:01:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIzNg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NzAwMA==", "bodyText": "I think it is a lot of overhead to pay in order to be future-proof, and requires special implementation for the new Headers type I am using. I rather not do that, at least at this point.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r367367000", "createdAt": "2020-01-16T11:27:43Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/helper/ConsumerRecordsIteratorWrapper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka.helper;\n+\n+import co.elastic.apm.agent.configuration.CoreConfiguration;\n+import co.elastic.apm.agent.configuration.MessagingConfiguration;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.impl.context.Message;\n+import co.elastic.apm.agent.impl.transaction.TraceContext;\n+import co.elastic.apm.agent.impl.transaction.Transaction;\n+import co.elastic.apm.agent.matcher.WildcardMatcher;\n+import co.elastic.apm.agent.util.BinaryHeaderMap;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+@SuppressWarnings(\"rawtypes\")\n+class ConsumerRecordsIteratorWrapper implements Iterator<ConsumerRecord> {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(ConsumerRecordsIteratorWrapper.class);\n+\n+    private final Iterator<ConsumerRecord> delegate;\n+    private final ElasticApmTracer tracer;\n+    private final CoreConfiguration coreConfiguration;\n+    private final MessagingConfiguration messagingConfiguration;\n+\n+    public ConsumerRecordsIteratorWrapper(Iterator<ConsumerRecord> delegate, ElasticApmTracer tracer) {\n+        this.delegate = delegate;\n+        this.tracer = tracer;\n+        coreConfiguration = tracer.getConfig(CoreConfiguration.class);\n+        messagingConfiguration = tracer.getConfig(MessagingConfiguration.class);\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        endCurrentTransaction();\n+        return delegate.hasNext();\n+    }\n+\n+    public void endCurrentTransaction() {\n+        try {\n+            Transaction transaction = tracer.currentTransaction();\n+            if (transaction != null && \"messaging\".equals(transaction.getType())) {\n+                transaction.deactivate().end();\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error in Kafka iterator wrapper\", e);\n+        }\n+    }\n+\n+    @Override\n+    public ConsumerRecord next() {\n+        endCurrentTransaction();\n+        ConsumerRecord record = delegate.next();\n+        try {\n+            String topic = record.topic();\n+            if (!WildcardMatcher.isAnyMatch(messagingConfiguration.getIgnoreMessageQueues(), topic)) {\n+                Header traceParentHeader = record.headers().lastHeader(TraceContext.TRACE_PARENT_HEADER);\n+                Transaction transaction;\n+                if (traceParentHeader != null) {\n+                    transaction = tracer.startTransaction(\n+                        TraceContext.fromTraceparentBinaryHeader(),\n+                        traceParentHeader.value(),\n+                        ConsumerRecordsIteratorWrapper.class.getClassLoader()\n+                    );\n+                } else {\n+                    transaction = tracer.startRootTransaction(ConsumerRecordsIteratorWrapper.class.getClassLoader());\n+                }\n+                transaction.withType(\"messaging\").withName(\"Kafka record from \" + topic).activate();\n+                Message message = transaction.getContext().getMessage();\n+                message.withQueue(topic);\n+                if (record.timestampType() == TimestampType.CREATE_TIME) {\n+                    message.withAge(System.currentTimeMillis() - record.timestamp());\n+                }\n+                // todo - add destination fields\n+\n+                if (coreConfiguration.isCaptureHeaders()) {\n+                    for (Header header : record.headers()) {\n+                        String key = header.key();\n+                        if (!TraceContext.TRACE_PARENT_HEADER.equals(key) &&\n+                            WildcardMatcher.anyMatch(coreConfiguration.getSanitizeFieldNames(), key) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIzNg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg0MzA0OnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoxMzowOFrOFc2aBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzoxM1rOFc48NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5NTg0NQ==", "bodyText": "I'm not sure it's a valid assumption that all or even most header values are UTF-8 encoded strings. Maybe fall back to hex-encoding if it's not UTF-8 data?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365795845", "createdAt": "2020-01-13T13:13:08Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+\n+import javax.annotation.Nullable;\n+import java.nio.Buffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CoderResult;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * A map (not implementing the java.util.Map interface) that only supports String-byte[] pair additions and iterations.\n+ * The map doesn't allocate during addition or iteration.\n+ * This map does not support any form of concurrency. It can be either be in a write mode (through its {@link #add}\n+ * method) or read mode (through the {@link #iterator()} API) at a given time. Reads and writes must not be\n+ * performed by more than one thread concurrently.\n+ * <p>\n+ * NOTE: this map does not guarantee visibility, therefore ensuring visibility when switching from read to write mode\n+ * (or the other way around) is under the responsibility of the map's user.\n+ */\n+public class BinaryHeaderMap implements Recyclable, Iterable<BinaryHeaderMap.Entry> {\n+    public static final int MAXIMUM_HEADER_BUFFER_SIZE = DslJsonSerializer.MAX_VALUE_LENGTH * 10;\n+\n+    private CharBuffer valueBuffer;\n+    private final ArrayList<String> keys;\n+    private int[] valueLengths;\n+    private final NoGarbageIterator iterator;\n+\n+    public BinaryHeaderMap() {\n+        valueBuffer = CharBuffer.allocate(64);\n+        keys = new ArrayList<>(10);\n+        valueLengths = new int[10];\n+        iterator = new NoGarbageIterator();\n+    }\n+\n+    public int size() {\n+        return keys.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    public boolean add(String key, byte[] value) throws InsufficientCapacityException {\n+        int valuesPos = valueBuffer.position();\n+        CoderResult coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzM2NQ==", "bodyText": "It is certainly not the assumption. This is only to support recording of textual headers (as Kafka records only support binary). I prefer not to capture anything if it is not textual, and currently this is the indication I have to whether it is or not.\nThe problem with hex-decoding, is that it always works, even if the value was not hex-encoded, so it would make no sense.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365837365", "createdAt": "2020-01-13T14:37:13Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+\n+import javax.annotation.Nullable;\n+import java.nio.Buffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CoderResult;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * A map (not implementing the java.util.Map interface) that only supports String-byte[] pair additions and iterations.\n+ * The map doesn't allocate during addition or iteration.\n+ * This map does not support any form of concurrency. It can be either be in a write mode (through its {@link #add}\n+ * method) or read mode (through the {@link #iterator()} API) at a given time. Reads and writes must not be\n+ * performed by more than one thread concurrently.\n+ * <p>\n+ * NOTE: this map does not guarantee visibility, therefore ensuring visibility when switching from read to write mode\n+ * (or the other way around) is under the responsibility of the map's user.\n+ */\n+public class BinaryHeaderMap implements Recyclable, Iterable<BinaryHeaderMap.Entry> {\n+    public static final int MAXIMUM_HEADER_BUFFER_SIZE = DslJsonSerializer.MAX_VALUE_LENGTH * 10;\n+\n+    private CharBuffer valueBuffer;\n+    private final ArrayList<String> keys;\n+    private int[] valueLengths;\n+    private final NoGarbageIterator iterator;\n+\n+    public BinaryHeaderMap() {\n+        valueBuffer = CharBuffer.allocate(64);\n+        keys = new ArrayList<>(10);\n+        valueLengths = new int[10];\n+        iterator = new NoGarbageIterator();\n+    }\n+\n+    public int size() {\n+        return keys.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    public boolean add(String key, byte[] value) throws InsufficientCapacityException {\n+        int valuesPos = valueBuffer.position();\n+        CoderResult coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5NTg0NQ=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg2NjcyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyMTozMlrOFc2oPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyNDozM1rOFc2tUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5OTQ4NA==", "bodyText": "Avoid creating a stack trace with the singleton exception pattern. See also co.elastic.apm.agent.bci.bytebuddy.MinimumClassFileVersionValidator.UnsupportedClassFileVersionException.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365799484", "createdAt": "2020-01-13T13:21:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+\n+import javax.annotation.Nullable;\n+import java.nio.Buffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CoderResult;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * A map (not implementing the java.util.Map interface) that only supports String-byte[] pair additions and iterations.\n+ * The map doesn't allocate during addition or iteration.\n+ * This map does not support any form of concurrency. It can be either be in a write mode (through its {@link #add}\n+ * method) or read mode (through the {@link #iterator()} API) at a given time. Reads and writes must not be\n+ * performed by more than one thread concurrently.\n+ * <p>\n+ * NOTE: this map does not guarantee visibility, therefore ensuring visibility when switching from read to write mode\n+ * (or the other way around) is under the responsibility of the map's user.\n+ */\n+public class BinaryHeaderMap implements Recyclable, Iterable<BinaryHeaderMap.Entry> {\n+    public static final int MAXIMUM_HEADER_BUFFER_SIZE = DslJsonSerializer.MAX_VALUE_LENGTH * 10;\n+\n+    private CharBuffer valueBuffer;\n+    private final ArrayList<String> keys;\n+    private int[] valueLengths;\n+    private final NoGarbageIterator iterator;\n+\n+    public BinaryHeaderMap() {\n+        valueBuffer = CharBuffer.allocate(64);\n+        keys = new ArrayList<>(10);\n+        valueLengths = new int[10];\n+        iterator = new NoGarbageIterator();\n+    }\n+\n+    public int size() {\n+        return keys.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    public boolean add(String key, byte[] value) throws InsufficientCapacityException {\n+        int valuesPos = valueBuffer.position();\n+        CoderResult coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);\n+        while (coderResult.isOverflow()) {\n+            ((Buffer) valueBuffer).limit(valuesPos);\n+            enlargeBuffer();\n+            coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);\n+        }\n+        boolean result;\n+        if (coderResult.isError()) {\n+            ((Buffer) valueBuffer).limit(valuesPos);\n+            result = false;\n+        } else {\n+            int size = keys.size();\n+            keys.add(key);\n+            if (size == valueLengths.length) {\n+                enlargeValueLengths();\n+            }\n+            valueLengths[size] = valueBuffer.position() - valuesPos;\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n+    private void enlargeBuffer() throws InsufficientCapacityException {\n+        if (valueBuffer.capacity() == MAXIMUM_HEADER_BUFFER_SIZE) {\n+            throw new InsufficientCapacityException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMDc4NQ==", "bodyText": "Another approach would be to return a boolean", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365800785", "createdAt": "2020-01-13T13:24:33Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+\n+import javax.annotation.Nullable;\n+import java.nio.Buffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CoderResult;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * A map (not implementing the java.util.Map interface) that only supports String-byte[] pair additions and iterations.\n+ * The map doesn't allocate during addition or iteration.\n+ * This map does not support any form of concurrency. It can be either be in a write mode (through its {@link #add}\n+ * method) or read mode (through the {@link #iterator()} API) at a given time. Reads and writes must not be\n+ * performed by more than one thread concurrently.\n+ * <p>\n+ * NOTE: this map does not guarantee visibility, therefore ensuring visibility when switching from read to write mode\n+ * (or the other way around) is under the responsibility of the map's user.\n+ */\n+public class BinaryHeaderMap implements Recyclable, Iterable<BinaryHeaderMap.Entry> {\n+    public static final int MAXIMUM_HEADER_BUFFER_SIZE = DslJsonSerializer.MAX_VALUE_LENGTH * 10;\n+\n+    private CharBuffer valueBuffer;\n+    private final ArrayList<String> keys;\n+    private int[] valueLengths;\n+    private final NoGarbageIterator iterator;\n+\n+    public BinaryHeaderMap() {\n+        valueBuffer = CharBuffer.allocate(64);\n+        keys = new ArrayList<>(10);\n+        valueLengths = new int[10];\n+        iterator = new NoGarbageIterator();\n+    }\n+\n+    public int size() {\n+        return keys.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    public boolean add(String key, byte[] value) throws InsufficientCapacityException {\n+        int valuesPos = valueBuffer.position();\n+        CoderResult coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);\n+        while (coderResult.isOverflow()) {\n+            ((Buffer) valueBuffer).limit(valuesPos);\n+            enlargeBuffer();\n+            coderResult = IOUtils.decodeUtf8Bytes(value, valueBuffer);\n+        }\n+        boolean result;\n+        if (coderResult.isError()) {\n+            ((Buffer) valueBuffer).limit(valuesPos);\n+            result = false;\n+        } else {\n+            int size = keys.size();\n+            keys.add(key);\n+            if (size == valueLengths.length) {\n+                enlargeValueLengths();\n+            }\n+            valueLengths[size] = valueBuffer.position() - valuesPos;\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n+    private void enlargeBuffer() throws InsufficientCapacityException {\n+        if (valueBuffer.capacity() == MAXIMUM_HEADER_BUFFER_SIZE) {\n+            throw new InsufficientCapacityException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5OTQ4NA=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg3NzgyOnYy", "diffSide": "RIGHT", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyNToxOFrOFc2usg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyNToxOFrOFc2usg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMTEzOA==", "bodyText": "Maybe instead of throwing an InsufficientCapacityException, just return false?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365801138", "createdAt": "2020-01-13T13:25:18Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/BinaryHeaderMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import co.elastic.apm.agent.objectpool.Recyclable;\n+import co.elastic.apm.agent.report.serialize.DslJsonSerializer;\n+\n+import javax.annotation.Nullable;\n+import java.nio.Buffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CoderResult;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * A map (not implementing the java.util.Map interface) that only supports String-byte[] pair additions and iterations.\n+ * The map doesn't allocate during addition or iteration.\n+ * This map does not support any form of concurrency. It can be either be in a write mode (through its {@link #add}\n+ * method) or read mode (through the {@link #iterator()} API) at a given time. Reads and writes must not be\n+ * performed by more than one thread concurrently.\n+ * <p>\n+ * NOTE: this map does not guarantee visibility, therefore ensuring visibility when switching from read to write mode\n+ * (or the other way around) is under the responsibility of the map's user.\n+ */\n+public class BinaryHeaderMap implements Recyclable, Iterable<BinaryHeaderMap.Entry> {\n+    public static final int MAXIMUM_HEADER_BUFFER_SIZE = DslJsonSerializer.MAX_VALUE_LENGTH * 10;\n+\n+    private CharBuffer valueBuffer;\n+    private final ArrayList<String> keys;\n+    private int[] valueLengths;\n+    private final NoGarbageIterator iterator;\n+\n+    public BinaryHeaderMap() {\n+        valueBuffer = CharBuffer.allocate(64);\n+        keys = new ArrayList<>(10);\n+        valueLengths = new int[10];\n+        iterator = new NoGarbageIterator();\n+    }\n+\n+    public int size() {\n+        return keys.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    public boolean add(String key, byte[] value) throws InsufficientCapacityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTkzODI3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/package-info.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzo0NDowMlrOFc3RrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzo0Nzo1NFrOFdLe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMDA5Mg==", "bodyText": "In this case, are you creating Spans when iterating over the list of messages returned by poll?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365810092", "createdAt": "2020-01-13T13:44:02Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/package-info.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * Kafka tracing includes two parts in general:\n+ * 1. Visibility to record production and consumption events, including relevant metadata\n+ * 2. Distributed tracing\n+ * <p>\n+ * Capturing of record production events is trivial- can only be traced as a span within a traced transaction.\n+ * Consumption is a bit trickier as it relies on the {@link org.apache.kafka.clients.consumer.KafkaConsumer#poll(java.time.Duration)}\n+ * API. The challenge with polling APIs is that their invocation event is typically arbitrary (meaning their\n+ * duration is not of interest) and we really want to trace what happens AFTER they exit with a Message. Since Kafka\n+ * records are only consumed in {@link java.lang.Iterable} batches, we try to trace the actions executed between\n+ * iterations by starting/activating and ending/deactivating a transaction for each record during iteration.\n+ * Such transactions will have the {@code messaging} type. This may result in non-desirable traces, for example if the\n+ * iterator is held and not immediately iterated all through, but we assume this is somewhat of an edge case.\n+ * As long as we can make it safe from memory leaks, this is acceptable.\n+ * In case the polling is executed from within a traced transaction, we won't create a transaction-per-record. Instead,\n+ * we will trace the polling action itself and create a span for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTM0NA==", "bodyText": "No. You think I should?\nThe poll is the actual interesting action. The thread is traced already, so anything the application will do after reading the record on this thread will be traced as well. Maybe when we support multiple span parents (or span references) this may make more sense.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365839344", "createdAt": "2020-01-13T14:40:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/package-info.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * Kafka tracing includes two parts in general:\n+ * 1. Visibility to record production and consumption events, including relevant metadata\n+ * 2. Distributed tracing\n+ * <p>\n+ * Capturing of record production events is trivial- can only be traced as a span within a traced transaction.\n+ * Consumption is a bit trickier as it relies on the {@link org.apache.kafka.clients.consumer.KafkaConsumer#poll(java.time.Duration)}\n+ * API. The challenge with polling APIs is that their invocation event is typically arbitrary (meaning their\n+ * duration is not of interest) and we really want to trace what happens AFTER they exit with a Message. Since Kafka\n+ * records are only consumed in {@link java.lang.Iterable} batches, we try to trace the actions executed between\n+ * iterations by starting/activating and ending/deactivating a transaction for each record during iteration.\n+ * Such transactions will have the {@code messaging} type. This may result in non-desirable traces, for example if the\n+ * iterator is held and not immediately iterated all through, but we assume this is somewhat of an edge case.\n+ * As long as we can make it safe from memory leaks, this is acceptable.\n+ * In case the polling is executed from within a traced transaction, we won't create a transaction-per-record. Instead,\n+ * we will trace the polling action itself and create a span for it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMDA5Mg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NzIxMQ==", "bodyText": "Not sure yet, it just seems a bit inconsistent to create a transaction for each element in the iterator but if there's already a transaction, only a single span for the poll gets created.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365887211", "createdAt": "2020-01-13T16:07:29Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/package-info.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * Kafka tracing includes two parts in general:\n+ * 1. Visibility to record production and consumption events, including relevant metadata\n+ * 2. Distributed tracing\n+ * <p>\n+ * Capturing of record production events is trivial- can only be traced as a span within a traced transaction.\n+ * Consumption is a bit trickier as it relies on the {@link org.apache.kafka.clients.consumer.KafkaConsumer#poll(java.time.Duration)}\n+ * API. The challenge with polling APIs is that their invocation event is typically arbitrary (meaning their\n+ * duration is not of interest) and we really want to trace what happens AFTER they exit with a Message. Since Kafka\n+ * records are only consumed in {@link java.lang.Iterable} batches, we try to trace the actions executed between\n+ * iterations by starting/activating and ending/deactivating a transaction for each record during iteration.\n+ * Such transactions will have the {@code messaging} type. This may result in non-desirable traces, for example if the\n+ * iterator is held and not immediately iterated all through, but we assume this is somewhat of an edge case.\n+ * As long as we can make it safe from memory leaks, this is acceptable.\n+ * In case the polling is executed from within a traced transaction, we won't create a transaction-per-record. Instead,\n+ * we will trace the polling action itself and create a span for it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMDA5Mg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MTE3OQ==", "bodyText": "I don't think consistency is a consideration here. The poll action is interesting like any other outreaching request (HTTP, DB, ES etc). The iteration is not as interesting- think about it as instrumenting the iteration over JDBC ResultSet. Besides, don't forget we create the transaction outside instrumented methods. We do that so we can support distributed tracing. What would we create a span for? If we create a span for the next operation itself, it would still be inconsistent with what we do for transactions, and if we create a span between next invocations- not sure what that represents.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r366141179", "createdAt": "2020-01-14T03:47:54Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/main/java/co/elastic/apm/agent/kafka/package-info.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2019 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * Kafka tracing includes two parts in general:\n+ * 1. Visibility to record production and consumption events, including relevant metadata\n+ * 2. Distributed tracing\n+ * <p>\n+ * Capturing of record production events is trivial- can only be traced as a span within a traced transaction.\n+ * Consumption is a bit trickier as it relies on the {@link org.apache.kafka.clients.consumer.KafkaConsumer#poll(java.time.Duration)}\n+ * API. The challenge with polling APIs is that their invocation event is typically arbitrary (meaning their\n+ * duration is not of interest) and we really want to trace what happens AFTER they exit with a Message. Since Kafka\n+ * records are only consumed in {@link java.lang.Iterable} batches, we try to trace the actions executed between\n+ * iterations by starting/activating and ending/deactivating a transaction for each record during iteration.\n+ * Such transactions will have the {@code messaging} type. This may result in non-desirable traces, for example if the\n+ * iterator is held and not immediately iterated all through, but we assume this is somewhat of an edge case.\n+ * As long as we can make it safe from memory leaks, this is acceptable.\n+ * In case the polling is executed from within a traced transaction, we won't create a transaction-per-record. Instead,\n+ * we will trace the polling action itself and create a span for it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMDA5Mg=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTk1MjA3OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/src/test/java/co/elastic/apm/agent/kafka/KafkaClientVersionsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzo0ODozN1rOFc3aRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo1MTowNVrOFc5ZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMjI5NQ==", "bodyText": "What causes the Kafka client to be loaded by the system class loader?\n\nprobably due to some static initializations done by the first one loaded\n\nWhere does that initialization happen? Do you have a stack trace for this?", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365812295", "createdAt": "2020-01-13T13:48:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/test/java/co/elastic/apm/agent/kafka/KafkaClientVersionsIT.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka;\n+\n+import co.elastic.apm.agent.TestClassWithDependencyRunner;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Arrays;\n+\n+@RunWith(Parameterized.class)\n+public class KafkaClientVersionsIT {\n+    private final TestClassWithDependencyRunner runner;\n+\n+    public KafkaClientVersionsIT(String version) throws Exception {\n+        runner = new TestClassWithDependencyRunner(\"org.apache.kafka\", \"kafka-clients\", version,\n+            KafkaIT.class, KafkaIT.Consumer.class, KafkaIT.RecordIterationMode.class, KafkaIT.TestScenario.class,\n+            KafkaIT.ConsumerRecordConsumer.class);\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+            // No real need to run both versions, the APIs are the same. Running both requires a separate module\n+            // because within a module that declares the dependency, the Kafka client is loaded by the app class loader\n+            // IN ADDITION to the test class loader. This works fine only when the tested version is the same as the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0NDkyOQ==", "bodyText": "Didn't look too much into it...\nBottom line is that I don't need to have both versions tested every time we build as they use the same instrumentation. I only want to see once that it works for both, so I do it manually.", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365844929", "createdAt": "2020-01-13T14:51:05Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-plugins/apm-kafka-plugin/src/test/java/co/elastic/apm/agent/kafka/KafkaClientVersionsIT.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.kafka;\n+\n+import co.elastic.apm.agent.TestClassWithDependencyRunner;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Arrays;\n+\n+@RunWith(Parameterized.class)\n+public class KafkaClientVersionsIT {\n+    private final TestClassWithDependencyRunner runner;\n+\n+    public KafkaClientVersionsIT(String version) throws Exception {\n+        runner = new TestClassWithDependencyRunner(\"org.apache.kafka\", \"kafka-clients\", version,\n+            KafkaIT.class, KafkaIT.Consumer.class, KafkaIT.RecordIterationMode.class, KafkaIT.TestScenario.class,\n+            KafkaIT.ConsumerRecordConsumer.class);\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+            // No real need to run both versions, the APIs are the same. Running both requires a separate module\n+            // because within a module that declares the dependency, the Kafka client is loaded by the app class loader\n+            // IN ADDITION to the test class loader. This works fine only when the tested version is the same as the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMjI5NQ=="}, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTk2NzQ2OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-kafka-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzo1Mzo0MFrOFc3jkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzo1Mzo0MFrOFc3jkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxNDY3Mw==", "bodyText": "To automatically test new versions as they are releases:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <version.kafka>2.4.0</version.kafka>\n          \n          \n            \n                    <version.kafka>[2.4.0,)</version.kafka>", "url": "https://github.com/elastic/apm-agent-java/pull/981#discussion_r365814673", "createdAt": "2020-01-13T13:53:40Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-kafka-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-agent-plugins</artifactId>\n+        <groupId>co.elastic.apm</groupId>\n+        <version>1.12.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <properties>\n+        <apm-agent-parent.base.dir>${project.basedir}/../..</apm-agent-parent.base.dir>\n+        <version.testcontainers>1.12.4</version.testcontainers>\n+        <version.kafka>2.4.0</version.kafka>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85aa2d4543d79088cba6941fb0494a7979acd3f3"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 361, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}