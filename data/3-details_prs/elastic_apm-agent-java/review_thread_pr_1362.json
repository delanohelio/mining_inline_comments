{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTUxMTE4", "number": 1362, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo0NDo1N1rOEePIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxOToyN1rOEeRD2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQwNjc0OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo0NDo1N1rOHJx1jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0OTozOVrOHJztnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTc1OQ==", "bodyText": "Can be simplified with co.elastic.apm.agent.sdk.state.CallDepth. See co.elastic.apm.agent.servlet.RequestStreamRecordingInstrumentation.GetInputStreamAdvice as an example.\nWhen using it, make sure to add onThrowable = Throwable.class to OnMethodExit. See also the Javadocs of co.elastic.apm.agent.sdk.state.CallDepth#decrement for more details.", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480015759", "createdAt": "2020-08-31T09:44:57Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,49 +42,39 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n+    public static final GlobalThreadLocal<Boolean> nestedThreadLocal = GlobalThreadLocal.get(AbstractLoggerErrorCapturingInstrumentation.class, \"nested\", Boolean.FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e594515276ae9d95a3986a36616e26bb04e935a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NjQ5Mg==", "bodyText": "replaced with CallDepth", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480046492", "createdAt": "2020-08-31T10:49:39Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,49 +42,39 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n+    public static final GlobalThreadLocal<Boolean> nestedThreadLocal = GlobalThreadLocal.get(AbstractLoggerErrorCapturingInstrumentation.class, \"nested\", Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTc1OQ=="}, "originalCommit": {"oid": "0e594515276ae9d95a3986a36616e26bb04e935a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTcyMjQ4OnYy", "diffSide": "RIGHT", "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxOToyN1rOHJ000w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo0MzoxNlrOHJ1bJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDcyMw==", "bodyText": "Can be simplified as there's already a if (errorCaptureObj instanceof ErrorCapture) check afterwards. That check is only true if the error object is not null.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (callDepth.isNestedCallAndDecrement()) {\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        callDepth.decrement();", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480064723", "createdAt": "2020-08-31T11:19:27Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,50 +42,37 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return LoggingAdvice.class;\n     }\n \n-    @Override\n-    public boolean indyPlugin() {\n-        return false;\n-    }\n-\n     public static class LoggingAdvice {\n \n-        @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void logEnter(@Advice.Argument(1) Throwable exception,\n-                                    @Advice.Local(\"nested\") boolean nested,\n-                                    @Advice.Origin Class<?> clazz,\n-                                    @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            nested = nestedThreadLocal.get();\n-            if (!nested) {\n-                error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n+        private static final CallDepth callDepth = CallDepth.get(LoggingAdvice.class);\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object logEnter(@Advice.Argument(1) Throwable exception,\n+                                        @Advice.Origin Class<?> clazz) {\n+            if (!callDepth.isNestedCallAndIncrement()) {\n+                ErrorCapture error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n                 if (error != null) {\n                     error.activate();\n                 }\n-                nestedThreadLocal.set(Boolean.TRUE);\n+                return error;\n             }\n+            return null;\n         }\n \n-        @Advice.OnMethodExit(suppress = Throwable.class)\n-        public static void logExit(@Advice.Local(\"nested\") boolean nested,\n-                                   @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            if (error != null) {\n-                error.deactivate().end();\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void logExit(@Advice.Enter @Nullable Object errorCaptureObj) {\n+            if (callDepth.isNestedCallAndDecrement()) {\n+                return;\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2463642e3cb7654276520822742ef64385b7481"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3NDUzMg==", "bodyText": "simplified", "url": "https://github.com/elastic/apm-agent-java/pull/1362#discussion_r480074532", "createdAt": "2020-08-31T11:43:16Z", "author": {"login": "kananindzya"}, "path": "apm-agent-plugins/apm-error-logging-plugin/src/main/java/co/elastic/apm/agent/errorlogging/AbstractLoggerErrorCapturingInstrumentation.java", "diffHunk": "@@ -42,50 +42,37 @@\n \n public abstract class AbstractLoggerErrorCapturingInstrumentation extends TracerAwareInstrumentation {\n \n-    @SuppressWarnings({\"WeakerAccess\"})\n-    @VisibleForAdvice\n-    public static final ThreadLocal<Boolean> nestedThreadLocal = new ThreadLocal<Boolean>() {\n-        @Override\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n-\n     @Override\n     public Class<?> getAdviceClass() {\n         return LoggingAdvice.class;\n     }\n \n-    @Override\n-    public boolean indyPlugin() {\n-        return false;\n-    }\n-\n     public static class LoggingAdvice {\n \n-        @Advice.OnMethodEnter(suppress = Throwable.class)\n-        public static void logEnter(@Advice.Argument(1) Throwable exception,\n-                                    @Advice.Local(\"nested\") boolean nested,\n-                                    @Advice.Origin Class<?> clazz,\n-                                    @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            nested = nestedThreadLocal.get();\n-            if (!nested) {\n-                error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n+        private static final CallDepth callDepth = CallDepth.get(LoggingAdvice.class);\n+\n+        @Nullable\n+        @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+        public static Object logEnter(@Advice.Argument(1) Throwable exception,\n+                                        @Advice.Origin Class<?> clazz) {\n+            if (!callDepth.isNestedCallAndIncrement()) {\n+                ErrorCapture error = tracer.captureException(exception, tracer.getActive(), clazz.getClassLoader());\n                 if (error != null) {\n                     error.activate();\n                 }\n-                nestedThreadLocal.set(Boolean.TRUE);\n+                return error;\n             }\n+            return null;\n         }\n \n-        @Advice.OnMethodExit(suppress = Throwable.class)\n-        public static void logExit(@Advice.Local(\"nested\") boolean nested,\n-                                   @Advice.Local(\"error\") @Nullable ErrorCapture error) {\n-            if (error != null) {\n-                error.deactivate().end();\n+        @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+        public static void logExit(@Advice.Enter @Nullable Object errorCaptureObj) {\n+            if (callDepth.isNestedCallAndDecrement()) {\n+                return;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDcyMw=="}, "originalCommit": {"oid": "d2463642e3cb7654276520822742ef64385b7481"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 221, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}