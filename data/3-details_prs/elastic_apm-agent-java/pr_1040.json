{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODQ1NTY5", "number": 1040, "title": "Adding pause/resume functionality to reduce agent overhead on stress", "bodyText": "What does this PR do?\nThis PR introduces a tracer state, including currently the following states:\n\nRUNNING - agent is fully functional\nPAUSED - agent resource consumption (more specifically- CPU*, memory allocations and IO) is at minimum, but can quickly fully resume to normal working state\nSTOPPED - agent is non functional\n\n* If agent is configured to heavily instrument methods (for example, if trace_methods config option is abused), CPU overhead may still be considerable.\nIn addition, it extends the LifecycleListener interface to include pause and resume methods, to be implemented by any heavy resource users.\nA new LifecycleListener implementation runs a background thread that polls system/process stress monitors on preset intervals. If the agent in in RUNNING state and ANY of the monitors indicates that the tracer should be pause, it will invoke this state change. If the agent in in PAUSED state and ALL of the monitors indicate that the tracer should resume, it will invoke this state change.\nThis PR is currently in Draft mode, mainly used for allowing design review.\n\nChecklist\n\n\n My code follows the style guidelines of this project\n I have rebased my changes on top of the latest master branch\n\n\n\n I have made corresponding changes to the documentation\n I have added tests that prove my fix is effective or that my feature works\n New and existing unit tests pass locally with my changes\n\n\n\n I have updated CHANGELOG.asciidoc\n\nAuthor's Checklist\n\n\n Consolidate the active configuration with the circuit breaker events into a single tracer's state\n Make monitors' settings configurable and properly documented\n Add a GC stress monitor (test manually)\n Add a CPU stress monitor (test manually)\n Test compatibility with HotSpot and J9\n In potentially massive instrumentations, when agent is PAUSED, instrumented code being executed should be minimal - we do not create spans in trace_methods spans, but we cannot change the API spans currently - changing the API to return null on span creation is a breaking change and using an immutable NOOP object means we cannot support context propagation.\n Implement pause and resume callbacks in Async Profiler LifecycleListeners - @felixbarny I'll leave this one to you\n Verify that break down metrics are not collected when PAUSED\n Align plugins to behave the same with regard to context propagation when the agent is PAUSED (spans should not be created).\n Look into clearing object pools when pausing without increasing usage overhead - decided to defer this one for now - only clearing the pool as a pause callback doesn't make a lot of sense as it won't include all in-flight objects. Adding a timestamp on objects and return only objects allocated after the pause means concurrency (visibility) overhead and complication. I think the best option is using a thread that will periodically clear specific pools (probably only spans and transactions) when the agent is paused. Still, this should come with a safety check that we are actually not keeping allocating objects, thus increasing overhead...\n\nRelated issues\n\nCloses #1029\nUse cases\n\nGC monitoring\nWhen garbage collector fails to recover minimal portion of the heap (configurable by percentage), agent should switch to PUASED state. When garbage collector succeeds to recover sufficient heap space (configurable by percentage), agent should resume to RUNNING state.\nCPU monitoring\nIf the system CPU load crosses a configured threshold for a consecutive (configured) number of measurements- the agent will pause. By default, that would happen after a minute (12 consecutive measurements done in 5 second intervals) with system CPU usage over 95%.\nWhen the system CPU load is measured below another threshold for the same period of time, the agent will resume. By default, that would happen after one minute of CPU under 80%.\nScreenshots\n\nGC stress\nAgent log\n2020-02-20 18:14:23.950 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.circuitbreaker.GCStressMonitor - Heap G1 Old Gen pool usage after the last GC has crossed the configured threshold 0.8: 133650656/157286400 (used/max)\n2020-02-20 18:14:23.950 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.ElasticApmTracer - Tracer switched to PAUSED state\n...\n2020-02-20 18:15:08.974 [elastic-apm-circuit-breaker] DEBUG co.elastic.apm.agent.impl.circuitbreaker.GCStressMonitor - Heap G1 Old Gen pool usage after the last GC is over the threshold of 0.6: 133650656/157286400 (used/max)\n...\n2020-02-20 18:19:34.086 [elastic-apm-circuit-breaker] DEBUG co.elastic.apm.agent.impl.circuitbreaker.GCStressMonitor - Heap G1 Old Gen pool usage after the last GC is below the threshold of 0.6: 91855984/157286400 (used/max)\n2020-02-20 18:19:34.086 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.ElasticApmTracer - Tracer switched to RUNNING state\n\nMetrics view\n\nTransaction view\n\nCPU stress\nAgent log\n020-02-25 08:54:09.075 [elastic-apm-circuit-breaker] DEBUG co.elastic.apm.agent.impl.circuitbreaker.SystemCpuStressMonitor - System CPU measurement: 0.8467177607464179\n2020-02-25 08:54:09.075 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.circuitbreaker.CircuitBreaker - Stress detected by co.elastic.apm.agent.impl.circuitbreaker.SystemCpuStressMonitor: Latest system CPU load value measured is 0.8467177607464179. This is the 12th consecutive measurement that crossed the configured stress threshold - 0.8, which indicates this host is under CPU stress.\n2020-02-25 08:54:09.075 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.ElasticApmTracer - Tracer switched to PAUSED state\n...\n2020-02-25 08:58:24.170 [elastic-apm-circuit-breaker] DEBUG co.elastic.apm.agent.impl.circuitbreaker.SystemCpuStressMonitor - System CPU measurement: 0.12389675270607826\n2020-02-25 08:58:24.170 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.circuitbreaker.SystemCpuStressMonitor - Latest system CPU load value measured is 0.12389675270607826. This is 12th consecutive measurement that is below the configured relief threshold - 0.6\n2020-02-25 08:58:24.170 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.circuitbreaker.CircuitBreaker - All registered stress monitors indicate that the stress has been relieved\n2020-02-25 08:58:24.170 [elastic-apm-circuit-breaker] INFO co.elastic.apm.agent.impl.ElasticApmTracer - Tracer switched to RUNNING state\n\nMetrics view\n\nTransaction view", "createdAt": "2020-02-16T16:35:38Z", "url": "https://github.com/elastic/apm-agent-java/pull/1040", "merged": true, "mergeCommit": {"oid": "96b7d60e4edcb39242ab5d7922111d52fd9c1023"}, "closed": true, "closedAt": "2020-03-03T13:25:50Z", "author": {"login": "eyalkoren"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcE7G_kgH2gAyMzc1ODQ1NTY5OjU5NDQ1MDYzNTY5NjYwNmRjYjg2YjcyMmJhNDZmNWY1N2RiODNjNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKB084AFqTM2Nzk1MjA1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "594450635696606dcb86b722ba46f5f57db83c59", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/594450635696606dcb86b722ba46f5f57db83c59", "committedDate": "2020-02-16T16:13:49Z", "message": "Adding circuit breaker infrastructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b256d146d454cd277af215c8dec2bcfd0ca2df", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d1b256d146d454cd277af215c8dec2bcfd0ca2df", "committedDate": "2020-02-16T16:48:52Z", "message": "Resuming only if ALL monitors indicate we should"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTg0MDAz", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-359584003", "createdAt": "2020-02-17T09:17:36Z", "commit": {"oid": "d1b256d146d454cd277af215c8dec2bcfd0ca2df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNzozNlrOFqdInQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNzozNlrOFqdInQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MTg1Mw==", "bodyText": "Change to a simple volatile (benchmark to test)", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r380061853", "createdAt": "2020-02-17T09:17:36Z", "author": {"login": "eyalkoren"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -555,11 +561,57 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        setState(TracerState.RUNNING);\n+    }\n+\n+    public synchronized void pause() {\n+        if (state != TracerState.RUNNING) {\n+            logger.warn(\"Attempting to pause the agent when it is already in a {} state\", state);\n+            return;\n+        }\n+        setState(TracerState.PAUSED);\n+        for (LifecycleListener lifecycleListener : lifecycleListeners) {\n+            try {\n+                lifecycleListener.pause();\n+            } catch (Exception e) {\n+                logger.warn(\"Suppressed exception while calling pause()\", e);\n+            }\n+        }\n+    }\n+\n+    public synchronized void resume() {\n+        if (state != TracerState.PAUSED) {\n+            logger.warn(\"Attempting to resume the agent when it is in a {} state\", state);\n+            return;\n+        }\n+        for (LifecycleListener lifecycleListener : lifecycleListeners) {\n+            try {\n+                lifecycleListener.resume();\n+            } catch (Exception e) {\n+                logger.warn(\"Suppressed exception while calling resume()\", e);\n+            }\n+        }\n+        setState(TracerState.RUNNING);\n+    }\n+\n+    public boolean isRunning() {\n+        return state == TracerState.RUNNING;\n+    }\n+\n+    public TracerState getState() {\n+        return state;\n+    }\n+\n+    private synchronized TracerState setState(TracerState newState) {\n+        state = newState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b256d146d454cd277af215c8dec2bcfd0ca2df"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624cfdc9c6d3b1bd685f302a6dbb72b32b9627d4", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/624cfdc9c6d3b1bd685f302a6dbb72b32b9627d4", "committedDate": "2020-02-17T11:53:07Z", "message": "Basic tests and concurrency issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce7151155b94942a437f9a9dfa020d0cf32f4813", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/ce7151155b94942a437f9a9dfa020d0cf32f4813", "committedDate": "2020-02-18T06:50:02Z", "message": "Test with independent tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14559658f3cb8fc777e0bfdb842aef67bbf2df29", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/14559658f3cb8fc777e0bfdb842aef67bbf2df29", "committedDate": "2020-02-19T09:36:58Z", "message": "Consolidating active config with the CircuitBreaker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2526d3ff743a83d2614b84b9a2bc8cf147eee89", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/d2526d3ff743a83d2614b84b9a2bc8cf147eee89", "committedDate": "2020-02-19T09:58:39Z", "message": "dosc indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5b0f5d23210b4ef9381330636c8d44024444b3f4", "committedDate": "2020-02-19T12:13:11Z", "message": "Make poll interval non-dynamic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTY5MTA1", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-361169105", "createdAt": "2020-02-19T14:44:54Z", "commit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0NDo1NFrOFrq6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1MTo0N1rOFrrMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjEyMQ==", "bodyText": "The state should be reset after each test. If there's an exception in this methods, the state should not leak into other tests. Probably best to call tracer.resume() in co.elastic.apm.agent.AbstractInstrumentationTest#afterAll", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381336121", "createdAt": "2020-02-19T14:44:54Z", "author": {"login": "felixbarny"}, "path": "apm-agent-plugins/apm-servlet-plugin/src/test/java/co/elastic/apm/agent/servlet/ApmFilterTest.java", "diffHunk": "@@ -79,9 +79,10 @@ void testEndsTransaction() throws IOException, ServletException {\n \n     @Test\n     void testDisabled() throws IOException, ServletException {\n-        when(tracer.getConfig(CoreConfiguration.class).isActive()).thenReturn(false);\n+        tracer.pause();\n         filterChain.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse());\n         assertThat(reporter.getTransactions()).hasSize(0);\n+        tracer.resume();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNzA1Nw==", "bodyText": "This is quite a low-level config option. Maybe make it internal?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381337057", "createdAt": "2020-02-19T14:46:17Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);\n+\n+    private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n+        .key(\"stress_monitoring_interval\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Mg==", "bodyText": "I think we should enable the circuit breaker by default. If the stress monitors have config options, maybe we don't need this global switch?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381338272", "createdAt": "2020-02-19T14:48:12Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzOTk3OA==", "bodyText": "Probably not for the first version but I think it makes sense to wait until the stress monitors didn't detect stress for n consecutive iterations. Otherwise, we might quickly switch between off and on.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381339978", "createdAt": "2020-02-19T14:50:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // todo: fill stress monitors\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            stressRelieved &= stressMonitor.isStressRelieved();\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDc1OA==", "bodyText": "Log which stress monitor has detected stress and what the current values are (for example CPU% or heap%)", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r381340758", "createdAt": "2020-02-19T14:51:47Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // todo: fill stress monitors\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            stressRelieved &= stressMonitor.isStressRelieved();\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();\n+                        }\n+                    } else {\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            if (stressMonitor.isUnderStress()) {\n+                                isCurrentlyUnderStress = true;\n+                                tracer.stressDetected();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e8b1896122d0d21ab6e154330d1ff9b928fa1c82", "committedDate": "2020-02-20T09:28:03Z", "message": "Adding GC Stress Monitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxOTQxOTcw", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-361941970", "createdAt": "2020-02-20T14:25:40Z", "commit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDoyNTo0MFrOFsVUIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0ODo1M1rOFsWPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMDg4MQ==", "bodyText": "remove FQN", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382030881", "createdAt": "2020-02-20T14:25:40Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/ClosableLifecycleListenerAdapter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.context;\n+\n+import java.io.Closeable;\n+\n+public class ClosableLifecycleListenerAdapter extends AbstractLifecycleListener {\n+\n+    private final Closeable closeable;\n+\n+    public static LifecycleListener of(Closeable closeable) {\n+        return new co.elastic.apm.agent.context.ClosableLifecycleListenerAdapter(closeable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjEwMQ==", "bodyText": "maybe replace \"are caught and handled\" maybe \"should be caught and handled\", because we document how users should use this method.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382032101", "createdAt": "2020-02-20T14:27:32Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMjIxNw==", "bodyText": "same as above, + reword it so we don't mention any cleanup (as it's a resume operation).", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382032217", "createdAt": "2020-02-20T14:27:43Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.\n+     */\n+    void pause() throws Exception;\n+\n+    /**\n+     * Callback for when {@link ElasticApmTracer#resume()} has been called.\n+     * <p>\n+     * Typically, used in order to revert the actions taken by the {@link LifecycleListener#pause()} method, allowing\n+     * the agent to restore all tracing capabilities\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMzE2MA==", "bodyText": "cleanup > resume", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382033160", "createdAt": "2020-02-20T14:29:11Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);\n \n+    /**\n+     * Callback for when {@link ElasticApmTracer#pause()} has been called.\n+     * <p>\n+     * Typically, this method is used to reduce overhead on the application to a minimum. This can be done by cleaning\n+     * up resources like object pools, as well as by avoiding tracing-related overhead.\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.\n+     */\n+    void pause() throws Exception;\n+\n+    /**\n+     * Callback for when {@link ElasticApmTracer#resume()} has been called.\n+     * <p>\n+     * Typically, used in order to revert the actions taken by the {@link LifecycleListener#pause()} method, allowing\n+     * the agent to restore all tracing capabilities\n+     * </p>\n+     * <p>\n+     * Exceptions thrown from this method are caught and handled so that they don't prevent further cleanup actions.\n+     * </p>\n+     *\n+     * @throws Exception When something goes wrong performing the cleanup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzODA0Mg==", "bodyText": "maybe describe a bit what are agent states and the main transitions between them.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382038042", "createdAt": "2020-02-20T14:36:52Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -641,4 +751,10 @@ private String getServiceName(@Nullable ClassLoader initiatingClassLoader) {\n     public void resetServiceNameOverrides() {\n         serviceNameByClassLoader.clear();\n     }\n+\n+    public enum TracerState {\n+        STOPPED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MjA3NA==", "bodyText": "this is a bit hard to read due to lots of conditionals & try/catch, maybe splitting in two smaller methods isStressRelieved and isUnderStress would make the intent a bit easier to grasp.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382042074", "createdAt": "2020-02-20T14:42:55Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);\n+        }\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MzUwMg==", "bodyText": "what kind of failures do we expect here ? shouldn't they be managed at monitor implementation level ?\nif there are missing JMX attributes for example, we should rather have a monitor that does never calls pause/resume than an exception thrown from constructor.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382043502", "createdAt": "2020-02-20T14:44:59Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDMzNA==", "bodyText": "this catch block should never be called, because all potential exceptions from stress monitor are already caught.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382044334", "createdAt": "2020-02-20T14:46:18Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.context.AbstractLifecycleListener;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import co.elastic.apm.agent.util.ExecutorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CircuitBreaker extends AbstractLifecycleListener {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);\n+\n+    private final ThreadPoolExecutor threadPool;\n+    private final ElasticApmTracer tracer;\n+    private final CircuitBreakerConfiguration circuitBreakerConfiguration;\n+    private final long pollInterval;\n+\n+    private boolean isCurrentlyUnderStress = false;\n+\n+    private final List<StressMonitor> stressMonitors = new CopyOnWriteArrayList<>();\n+\n+    public CircuitBreaker(ElasticApmTracer tracer) {\n+        this.tracer = tracer;\n+        circuitBreakerConfiguration = tracer.getConfig(CircuitBreakerConfiguration.class);\n+        pollInterval = circuitBreakerConfiguration.getStressMonitoringPollingInterval();\n+        threadPool = ExecutorUtils.createSingleThreadDeamonPool(\"circuit-breaker\", 1);\n+    }\n+\n+    @Override\n+    public void start(ElasticApmTracer tracer) {\n+        // failsafe loading of stress monitors in isolation\n+        loadGCStressMonitor(tracer);\n+\n+        threadPool.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                pollStressMonitors();\n+            }\n+        });\n+    }\n+\n+    private void loadGCStressMonitor(ElasticApmTracer tracer) {\n+        try {\n+            stressMonitors.add(new GCStressMonitor(tracer));\n+        } catch (Throwable throwable) {\n+            logger.error(\"Failed to load the GC stress monitor. Circuit breaker will not be triggered based on GC events.\", throwable);\n+        }\n+    }\n+\n+    private void pollStressMonitors() {\n+        while (!Thread.currentThread().isInterrupted()) {\n+            try {\n+                if (circuitBreakerConfiguration.isCircuitBreakerEnabled()) {\n+                    if (isCurrentlyUnderStress) {\n+                        boolean stressRelieved = true;\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            try {\n+                                stressRelieved &= stressMonitor.isStressRelieved();\n+                            } catch (Exception e) {\n+                                if (logger.isDebugEnabled()) {\n+                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                                }\n+                            }\n+                        }\n+                        if (stressRelieved) {\n+                            isCurrentlyUnderStress = false;\n+                            tracer.stressRelieved();\n+                        }\n+                    } else {\n+                        for (StressMonitor stressMonitor : stressMonitors) {\n+                            try {\n+                                if (stressMonitor.isUnderStress()) {\n+                                    isCurrentlyUnderStress = true;\n+                                    tracer.stressDetected();\n+                                    break;\n+                                }\n+                            } catch (Exception e) {\n+                                if (logger.isDebugEnabled()) {\n+                                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if (isCurrentlyUnderStress) {\n+                    isCurrentlyUnderStress = false;\n+                    tracer.stressRelieved();\n+                }\n+            } catch (Throwable throwable) {\n+                logger.error(\"Error occurred during Circuit Breaker polling\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b1896122d0d21ab6e154330d1ff9b928fa1c82"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjEyMg==", "bodyText": "+1 on keeping it active by default, if config options have \"disabled values\" that make equivalent behavior that will be one less parameter to document and to explain.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r382046122", "createdAt": "2020-02-20T14:48:53Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Mg=="}, "originalCommit": {"oid": "5b0f5d23210b4ef9381330636c8d44024444b3f4"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fbad8ab22f38353a84fc5a082b362d30479bf2a", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9fbad8ab22f38353a84fc5a082b362d30479bf2a", "committedDate": "2020-02-23T10:36:29Z", "message": "Applying review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ac040d9159e10f807b6514d42bcacdea38434c", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/e2ac040d9159e10f807b6514d42bcacdea38434c", "committedDate": "2020-02-24T18:59:53Z", "message": "Adding System CPU Stress Monitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b69110e369abe279ee1b84c0219d0455f4bffb5", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0b69110e369abe279ee1b84c0219d0455f4bffb5", "committedDate": "2020-02-25T09:31:20Z", "message": "Make CPU stress monitor (and metrics) J9-compatible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5629bc4aeb613594da6c9cc8b91413792d524649", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5629bc4aeb613594da6c9cc8b91413792d524649", "committedDate": "2020-02-26T08:43:04Z", "message": "Verify that trace_methods spans are not allocated when PAUSED"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c30ac89107a6a967b7957523ae5771f51f9ed6a", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9c30ac89107a6a967b7957523ae5771f51f9ed6a", "committedDate": "2020-02-26T09:18:59Z", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2c4bbf5da2ebff9b492aac34e4abefdc4d83a8", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/0d2c4bbf5da2ebff9b492aac34e4abefdc4d83a8", "committedDate": "2020-02-26T10:08:13Z", "message": "Async profiler half-merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d228576d8ce5378cff877f0d7bcd739f2a071d", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/23d228576d8ce5378cff877f0d7bcd739f2a071d", "committedDate": "2020-02-27T06:39:53Z", "message": "Returning null transactions when agent is PAUSED"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9388ee82c948a07209aee19fd80927e8daed41e3", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/9388ee82c948a07209aee19fd80927e8daed41e3", "committedDate": "2020-02-27T08:24:56Z", "message": "Apply review suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f5621cdfb7b3e2e30f841d1a366e0e750661d9", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/c9f5621cdfb7b3e2e30f841d1a366e0e750661d9", "committedDate": "2020-02-27T12:40:38Z", "message": "Small servlet advice optimization and verification of proper context propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3337663354a1be6bbf129b92160c1345a0fcd78", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a3337663354a1be6bbf129b92160c1345a0fcd78", "committedDate": "2020-02-27T12:48:32Z", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/a269e40752300de9951c7d61266dcf7c4de8c6c5", "committedDate": "2020-03-01T10:02:06Z", "message": "Enhance quartz job test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjQyMzc5", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-367242379", "createdAt": "2020-03-02T14:32:36Z", "commit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozMjozN1rOFwhmWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozNTozMlrOFwhs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNjQ1Nw==", "bodyText": "It seems a bit strange that a method named check* modifies state. Could we just return a boolean here and handle based on that in pollStressMonitors?\nif (isUnderStress()) {\n    isCurrentlyUnderStress = true;\n    tracer.stressDetected();\n}", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386426457", "createdAt": "2020-03-02T14:32:37Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -108,6 +115,41 @@ private void pollStressMonitors() {\n         }\n     }\n \n+    private void checkIfUnderStress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNzIxMA==", "bodyText": "Similar story: return boolean and extract this part to the caller.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386427210", "createdAt": "2020-03-02T14:33:54Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -108,6 +115,41 @@ private void pollStressMonitors() {\n         }\n     }\n \n+    private void checkIfUnderStress() {\n+        for (StressMonitor stressMonitor : stressMonitors) {\n+            try {\n+                if (stressMonitor.isUnderStress()) {\n+                    logger.info(\"Stress detected by {}: {}\", stressMonitor.getClass().getName(), stressMonitor.getStressDetectionInfo());\n+                    isCurrentlyUnderStress = true;\n+                    tracer.stressDetected();\n+                    break;\n+                }\n+            } catch (Exception e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void checkIfStressRelieved() {\n+        boolean stressRelieved = true;\n+        for (StressMonitor stressMonitor : stressMonitors) {\n+            try {\n+                stressRelieved &= stressMonitor.isStressRelieved();\n+            } catch (Exception e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Failed to poll \" + stressMonitor.getClass().getName(), e);\n+                }\n+            }\n+        }\n+        if (stressRelieved) {\n+            logger.info(\"All registered stress monitors indicate that the stress has been relieved\");\n+            isCurrentlyUnderStress = false;\n+            tracer.stressRelieved();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODE1MQ==", "bodyText": "Can we make this a TimeDuration option which calculates the number of measurements based on stress_monitoring_interval?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386428151", "createdAt": "2020-03-02T14:35:32Z", "author": {"login": "felixbarny"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -51,17 +53,99 @@\n     private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n         .key(\"stress_monitoring_interval\")\n         .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n         .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n         .description(\"The interval at which the agent polls the stress monitors. Must be at least `1s`.\")\n         .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"999ms\")))\n         .dynamic(false)\n         .buildWithDefault(TimeDuration.of(\"5s\"));\n \n+    private final ConfigurationOption<Double> gcStressThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_stress_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying heap stress.\\n\" +\n+            \"The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, \\n\" +\n+            \"the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured \\n\" +\n+            \"after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.95);\n+\n+    private final ConfigurationOption<Double> gcReliefThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_relief_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .\\n\" +\n+            \"If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. \\n\" +\n+            \"In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should \\n\" +\n+            \"be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.75);\n+\n+    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzY0MDQz", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-367764043", "createdAt": "2020-03-03T07:58:21Z", "commit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo1ODoyMVrOFw7Zmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODozOToyMlrOFw8c-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0OTE3OA==", "bodyText": "For consistency with other methods, would making this one throw Exception be a good idea ? as it's also invoked in a loop too, any failing LifecycleListener would make execution on other be skipped.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386849178", "createdAt": "2020-03-03T07:58:21Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/context/LifecycleListener.java", "diffHunk": "@@ -47,6 +47,34 @@\n      */\n     void start(ElasticApmTracer tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0OTc1NQ==", "bodyText": "any listener that throws an exception here will make other listeners to not be executed.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386849755", "createdAt": "2020-03-03T07:59:43Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MDMwMA==", "bodyText": "Naming, maybe onStressDetected would be more explicit, same for onStressRelieved below.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386850300", "createdAt": "2020-03-03T08:01:10Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        if (activeConfigOptionSet) {\n+            tracerState = TracerState.RUNNING;\n+            logger.info(\"Tracer switched to RUNNING state\");\n+        } else {\n+            pause();\n+        }\n+    }\n+\n+    public synchronized void stressDetected() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTQ3OQ==", "bodyText": "why do we have pause and resume as package-private ? if only for testing, doing it through stressDetected and stressRelieved methods above should be enough.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386851479", "createdAt": "2020-03-03T08:04:04Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -560,11 +584,84 @@ public void registerSpanListener(ActivationListener activationListener) {\n         return activationListeners;\n     }\n \n-    void registerLifecycleListeners(List<LifecycleListener> lifecycleListeners) {\n+    synchronized void start(List<LifecycleListener> lifecycleListeners) {\n         this.lifecycleListeners.addAll(lifecycleListeners);\n         for (LifecycleListener lifecycleListener : lifecycleListeners) {\n             lifecycleListener.start(this);\n         }\n+        if (activeConfigOptionSet) {\n+            tracerState = TracerState.RUNNING;\n+            logger.info(\"Tracer switched to RUNNING state\");\n+        } else {\n+            pause();\n+        }\n+    }\n+\n+    public synchronized void stressDetected() {\n+        currentlyUnderStress = true;\n+        pause();\n+    }\n+\n+    public synchronized void stressRelieved() {\n+        currentlyUnderStress = false;\n+        if (activeConfigOptionSet) {\n+            resume();\n+        }\n+    }\n+\n+    private synchronized void activeConfigChanged(boolean wasActive, boolean shouldBeActive) {\n+        // if changed from true to false then:\n+        //      if current state is RUNNING - pause the agent\n+        //      otherwise - ignore\n+        // if changed from false to true then:\n+        //      if current state is RUNNING or STOPPED - no effect\n+        //      if current state is PAUSED and currentlyUnderStress==false - then resume\n+        if (wasActive && !shouldBeActive && tracerState == TracerState.RUNNING) {\n+            pause();\n+        } else if (!wasActive && shouldBeActive && tracerState == TracerState.PAUSED && !currentlyUnderStress) {\n+            resume();\n+        }\n+        activeConfigOptionSet = shouldBeActive;\n+    }\n+\n+    synchronized void pause() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MjM5MA==", "bodyText": "Maybe add a small comment to explain why those variables are volatile and which object is used to synchronize access to them.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386852390", "createdAt": "2020-03-03T08:06:28Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -119,7 +120,11 @@ protected Boolean initialValue() {\n     private final MetricRegistry metricRegistry;\n     private Sampler sampler;\n     boolean assertionsEnabled = false;\n-    private static final WeakConcurrentMap<ClassLoader, String> serviceNameByClassLoader = new WeakConcurrentMap.WithInlinedExpunction<>();\n+    private long lastSpanMaxWarningTimestamp;\n+\n+    private volatile TracerState tracerState = TracerState.STOPPED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MzIyMg==", "bodyText": "When agent is in stopped state after being stopped, can we transition to any other state ?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386853222", "createdAt": "2020-03-03T08:08:33Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -646,4 +743,26 @@ private String getServiceName(@Nullable ClassLoader initiatingClassLoader) {\n     public void resetServiceNameOverrides() {\n         serviceNameByClassLoader.clear();\n     }\n+\n+    /**\n+     * An enumeration used to represent the current tracer state.\n+     */\n+    public enum TracerState {\n+        /**\n+         * Agent is in this state either before starting, or after being stopped.\n+         */\n+        STOPPED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NTI1OA==", "bodyText": "Is that a number of consecutive measurements ? if yes (I guess it's the case) might be relevant to make it explicit here.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386855258", "createdAt": "2020-03-03T08:13:43Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerConfiguration.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.circuitbreaker;\n+\n+import co.elastic.apm.agent.configuration.converter.TimeDuration;\n+import co.elastic.apm.agent.configuration.converter.TimeDurationValueConverter;\n+import org.stagemonitor.configuration.ConfigurationOption;\n+import org.stagemonitor.configuration.ConfigurationOptionProvider;\n+\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isInRange;\n+import static co.elastic.apm.agent.configuration.validation.RangeValidator.isNotInRange;\n+\n+public class CircuitBreakerConfiguration extends ConfigurationOptionProvider {\n+    public static final String CIRCUIT_BREAKER_CATEGORY = \"Circuit-Breaker\";\n+\n+    private final ConfigurationOption<Boolean> circuitBreakerEnabled = ConfigurationOption.booleanOption()\n+        .key(\"circuit_breaker_enabled\")\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"A boolean specifying whether the circuit breaker should be enabled or not. \\n\" +\n+            \"When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. \\n\" +\n+            \"If ANY of the monitors detects a stress indication, the agent will become inactive, as if the \\n\" +\n+            \"<<config-active>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. \\n\" +\n+            \"When inactive, the agent continues polling the same monitors in order to detect whether the stress state \\n\" +\n+            \"has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the \\n\" +\n+            \"agent will resume and become fully functional.\")\n+        .dynamic(true)\n+        .buildWithDefault(false);\n+\n+    private final ConfigurationOption<TimeDuration> stressMonitoringInterval = TimeDurationValueConverter.durationOption(\"s\")\n+        .key(\"stress_monitoring_interval\")\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .description(\"The interval at which the agent polls the stress monitors. Must be at least `1s`.\")\n+        .addValidator(isNotInRange(TimeDuration.of(\"0ms\"), TimeDuration.of(\"999ms\")))\n+        .dynamic(false)\n+        .buildWithDefault(TimeDuration.of(\"5s\"));\n+\n+    private final ConfigurationOption<Double> gcStressThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_stress_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying heap stress.\\n\" +\n+            \"The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, \\n\" +\n+            \"the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured \\n\" +\n+            \"after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.95);\n+\n+    private final ConfigurationOption<Double> gcReliefThreshold = ConfigurationOption.doubleOption()\n+        .key(\"stress_monitor_gc_relief_threshold\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .\\n\" +\n+            \"If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. \\n\" +\n+            \"In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should \\n\" +\n+            \"be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.\")\n+        .dynamic(true)\n+        .addValidator(isInRange(0d, 1d))\n+        .buildWithDefault(0.75);\n+\n+    private final ConfigurationOption<Integer> cpuConsecutiveMeasurements = ConfigurationOption.integerOption()\n+        .key(\"stress_monitor_cpu_num_measurements\")\n+        .configurationCategory(CIRCUIT_BREAKER_CATEGORY)\n+        .tags(\"added[1.14.0]\")\n+        .tags(\"performance\")\n+        .description(\"The number of measurements required in order to determine whether the system is \\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDMyNg==", "bodyText": "why do we need to do that ? can you elaborate a bit when this is required and how it helps ?\nFor example, do we need to wait another part of the application (like an application server startup) to execute before trying to use this code ?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386860326", "createdAt": "2020-03-03T08:26:11Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/util/JmxUtils.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * A utility to obtain JVM-specific MBean implementations, supporting HotSpot and J9.\n+ *\n+ * This implementation is based on io.micrometer.core.instrument.binder.system.ProcessorMetrics,\n+ * under Apache License 2.0\n+ */\n+public class JmxUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JmxUtils.class);\n+\n+    private static boolean initialized;\n+\n+    /**\n+     * List of public, exported interface class names from supported JVM implementations.\n+     */\n+    private static final List<String> OPERATING_SYSTEM_BEAN_CLASS_NAMES = Arrays.asList(\n+        // NOTE: THE ORDER IS IMPORTANT AS J9 CONTAINS THE SUN INTERFACE AS WELL\n+        \"com.ibm.lang.management.OperatingSystemMXBean\", // J9\n+        \"com.sun.management.OperatingSystemMXBean\" // HotSpot\n+    );\n+\n+    @Nullable\n+    private static Class<?> operatingSystemBeanClass;\n+\n+    @Nullable\n+    public synchronized static Method getOperatingSystemMBeanMethod(OperatingSystemMXBean operatingSystemBean, String methodName) {\n+        if (!initialized) {\n+            // lazy initialization - try loading the classes as late as possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTE4Nw==", "bodyText": "this will conflict with the changes I did in the JDBC PR, thus we need to not forget about this to be sure the right thing is merged afterwards.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386861187", "createdAt": "2020-03-03T08:28:06Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/AbstractServletTest.java", "diffHunk": "@@ -41,15 +49,30 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public abstract class AbstractServletTest {\n-    protected static final MockReporter reporter = new MockReporter();\n+    protected static MockReporter reporter;\n+    protected static ConfigurationRegistry config;\n+    protected static ElasticApmTracer tracer;\n+\n     @Nullable\n     private static Server server;\n     protected OkHttpClient httpClient;\n \n+    @BeforeAll\n+    static void setup() {\n+        reporter = new MockReporter();\n+        config = SpyConfiguration.createSpyConfig();\n+        tracer = new ElasticApmTracerBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NjI5MA==", "bodyText": "why we have todos left here ? should we implement them or leave an empty impl. ?", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386866290", "createdAt": "2020-03-03T08:39:09Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingFactory.java", "diffHunk": "@@ -58,6 +58,16 @@ public void start(ElasticApmTracer tracer) {\n         tracer.registerSpanListener(new ProfilingActivationListener(tracer, profiler));\n     }\n \n+    @Override\n+    public void pause() throws Exception {\n+        // todo - implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NjQyNg==", "bodyText": "same as previous.", "url": "https://github.com/elastic/apm-agent-java/pull/1040#discussion_r386866426", "createdAt": "2020-03-03T08:39:22Z", "author": {"login": "SylvainJuge"}, "path": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/SamplingProfiler.java", "diffHunk": "@@ -546,6 +546,16 @@ public void start(ElasticApmTracer tracer) {\n         scheduler.submit(this);\n     }\n \n+    @Override\n+    public void pause() throws Exception {\n+        // todo - implement\n+    }\n+\n+    @Override\n+    public void resume() throws Exception {\n+        // todo - implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a269e40752300de9951c7d61266dcf7c4de8c6c5"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82421b64b98f12e47e47c4f2dff4baaf088e1c52", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/82421b64b98f12e47e47c4f2dff4baaf088e1c52", "committedDate": "2020-03-03T08:54:46Z", "message": "Applying review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/87a269bd211f9fb8db2f8b2547f4a91c0fadee67", "committedDate": "2020-03-03T11:03:59Z", "message": "Applying more review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9d1f3a3517bcc31732bc3490a4778b9d728adb", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/5b9d1f3a3517bcc31732bc3490a4778b9d728adb", "committedDate": "2020-03-03T11:22:51Z", "message": "Merge remote-tracking branch 'upstream/master' into circuit-breaker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2794959bb01e5c1da36576e22437091dbbc5669a", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/2794959bb01e5c1da36576e22437091dbbc5669a", "committedDate": "2020-03-03T11:34:03Z", "message": "Avoid auto-indentation on CHANGELOG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071b68dd8b0ff484ec3d48d155fc45155e170646", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/071b68dd8b0ff484ec3d48d155fc45155e170646", "committedDate": "2020-03-03T11:35:25Z", "message": "Fix merge error"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8dbcf534ab7719112f693f365b6abb904b677320", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/8dbcf534ab7719112f693f365b6abb904b677320", "committedDate": "2020-03-03T11:30:41Z", "message": "Adding to CHANGELOG.asciidoc"}, "afterCommit": {"oid": "071b68dd8b0ff484ec3d48d155fc45155e170646", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/071b68dd8b0ff484ec3d48d155fc45155e170646", "committedDate": "2020-03-03T11:35:25Z", "message": "Fix merge error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39c3c1c609d3946c5cb0daf2b2b559019025ec06", "author": {"user": {"login": "eyalkoren", "name": null}}, "url": "https://github.com/elastic/apm-agent-java/commit/39c3c1c609d3946c5cb0daf2b2b559019025ec06", "committedDate": "2020-03-03T12:29:39Z", "message": "Removing todo from ApmConfigurationSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTM3NTA4", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-367937508", "createdAt": "2020-03-03T12:29:40Z", "commit": {"oid": "071b68dd8b0ff484ec3d48d155fc45155e170646"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTUyMDUz", "url": "https://github.com/elastic/apm-agent-java/pull/1040#pullrequestreview-367952053", "createdAt": "2020-03-03T12:53:04Z", "commit": {"oid": "39c3c1c609d3946c5cb0daf2b2b559019025ec06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4086, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}