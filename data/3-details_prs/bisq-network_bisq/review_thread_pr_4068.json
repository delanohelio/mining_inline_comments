{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjYzNTA5", "number": 4068, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNDozOVrODoxcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MDozNVrODoxnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc5Njg2OnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNDozOVrOF3hwOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNDozOVrOF3hwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTAxNg==", "bodyText": "As we had issues in the past concerning using no brackets for one line conditionals we decided to use always {}", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393769016", "createdAt": "2020-03-17T15:34:39Z", "author": {"login": "ripcurlx"}, "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDgyNTEwOnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MDozNVrOF3iCFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MTowMlrOF3iDdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzU5MQ==", "bodyText": "And there should be spaces before and after ==\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393773591", "createdAt": "2020-03-17T15:40:35Z", "author": {"login": "ripcurlx"}, "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3Mzk0MA==", "bodyText": "I'll have a look why Codacy is not checking for this.", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393773940", "createdAt": "2020-03-17T15:41:02Z", "author": {"login": "ripcurlx"}, "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzU5MQ=="}, "originalCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2564, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}