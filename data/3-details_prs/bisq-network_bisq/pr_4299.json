{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDcwODYw", "number": 4299, "title": "Add rpc method 'getfundingaddresses'", "bodyText": "This addresses task 1 in issue 4257.\nThis new gRPC Wallet service method displays the BTC wallet's list of receiving addresses.  The balance and number of confirmations for the most recent transaction is displayed to the right of each address.  Instead of returning a gRPC data structure to the client, the service method returns a formatted String.\nIf the BTC wallet has no unused addresses, one will be created and included in the returned list, and it can be used to fund the wallet.\nThe new method required injection of the BtcWalletService into CoreWalletsService, and the usual boilerplate changes to grpc.proto, CliMain, and GrpcWalletService.\nSome of the next PRs (for issue 4257) will require some common functionality within CoreWalletsService.  These additional changes were made:\n\na private, class level formatSatoshis function\na public getNumConfirmationsForMostRecentTransaction method\na public getAddressBalance method\na private getAddressEntry method\n\nA unit test that verifies a successful return status was added to cli/test.sh.\nThis PR should be reviewed/merged after PR 4296.", "createdAt": "2020-06-13T23:12:30Z", "url": "https://github.com/bisq-network/bisq/pull/4299", "merged": true, "mergeCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "closed": true, "closedAt": "2020-06-25T17:41:29Z", "author": {"login": "ghubstan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqnGPegH2gAyNDM0MDcwODYwOmIxMTQ2ZmRkMTJhZDg5ZTk0ZTM4YTg4NTNlMzE2Zjk2NDgyNGQ2N2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuw2XAgFqTQzNzYzOTUzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1146fdd12ad89e94e38a8853e316f964824d67c", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/b1146fdd12ad89e94e38a8853e316f964824d67c", "committedDate": "2020-06-12T18:24:01Z", "message": "Rename CoreWalletService -> CoreWalletsService\n\nThis change fixes the ambiguity in the original class name, which\nimplied it was a btc wallet service, not a bsq and btc wallets service."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec66b14986bb0a9f3369009aafc541add4e65f03", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/ec66b14986bb0a9f3369009aafc541add4e65f03", "committedDate": "2020-06-12T18:56:19Z", "message": "Add rpc wallet(s) protection tests\n\nThis commit includes the following changes:\n\n * New tests for methods `lockwallet`, `unlockwallet`,\n   `removewalletpassword`, and `setwalletpassword`.\n\n * New `getbalance` method error handing tests to verify\n   error message correctness when wallet is locked.\n\n * Update to `getversion` method test -- now expects `1.3.4`.\n\n * Check for new `[params]` column header in help text."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c96764fb3adaa25e8366d547be9d05e635f1bc", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/85c96764fb3adaa25e8366d547be9d05e635f1bc", "committedDate": "2020-06-13T22:59:45Z", "message": "Add rpc method 'getfundingaddresses'\n\nThis addresses task #1 in issue https://github.com/bisq-network/bisq/issues/4257.\n\nThis new gRPC WalletService method displays the BTC wallet's list of\nreceiving addresses.  The balance and number of confirmations\nfor the most recent transaction is displayed to the right of each\naddress.  Instead of returning a gRPC data structure to the client,\nthe service method returns a formatted String.\n\nIf the BTC wallet has no unused addresses, one will be created and\nincluded in the returned list, and it can be used to fund the wallet.\n\nThe new method required injection of the BtcWalletService into CoreWalletsService,\nand the usual boilerplate changes to grpc.proto, CliMain, and GrpcWalletService.\n\nSome of the next PRs (for #4257) will require some common functionality within\nCoreWalletsService, so these additional changes were included:\n\n  * a private, class level formatSatoshis function\n  * a public getNumConfirmationsForMostRecentTransaction method\n  * a public getAddressBalance method\n  * a private getAddressEntry method\n\nA unit test that verifies a successful return status was added to cli/test.sh."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/2e415de4adaf54a9f9c926fa4557af95e6fdfbe4", "committedDate": "2020-06-14T16:05:37Z", "message": "Replace duplicate code in getFundingAddresses\n\nCleaned up the method body and improved the returned string's\nformatting.  Also added a line for this method in the CLI help text."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzk1NDMz", "url": "https://github.com/bisq-network/bisq/pull/4299#pullrequestreview-431395433", "createdAt": "2020-06-16T11:07:12Z", "commit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNzoxMlrOGkWaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNzoxMlrOGkWaCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg==", "bodyText": "Checks of this type will probably be performed for most API endpoints. It would be nice to eventually see them moved into their own methods (checkThatWalletsAreAvailable(), etc.). Not requesting this change at this point.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440769032", "createdAt": "2020-06-16T11:07:12Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDM0MTMz", "url": "https://github.com/bisq-network/bisq/pull/4299#pullrequestreview-431434133", "createdAt": "2020-06-16T12:05:31Z", "commit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowNTozMVrOGkYLwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowNTozMVrOGkYLwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5ODE0NA==", "bodyText": "The Tuple3 feels unnecessary. Its main use seems to be to cache the balances, which are needed for checking if we need to generate a new address, otherwise we could get all that while formatting and a structure to hold these intermediary results wouldn't be necessary. Since the problem is basically caching, we can just do that explicitly by memoizing getAddressBalance:\nvar balances = CacheLoader.from(getAddressBalance);\n// Usage:\nvar someBalance = balances.load(someAddress);\n\nhttps://guava.dev/releases/20.0/api/docs/com/google/common/cache/CacheLoader.html\nThat will make the rest of the method simpler and shorter.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440798144", "createdAt": "2020-06-16T12:05:31Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");\n+\n+        // Create a new funding address if none exists.\n+        if (btcWalletService.getAvailableAddressEntries().size() == 0)\n+            btcWalletService.getFreshAddressEntry();\n+\n+        // Populate a list of Tuple3<AddressString, Balance, NumConfirmations>\n+        List<Tuple3<String, Long, Integer>> addrBalanceConfirms =\n+                btcWalletService.getAvailableAddressEntries().stream()\n+                        .map(a -> new Tuple3<>(a.getAddressString(),\n+                                getAddressBalance(a.getAddressString()),\n+                                getNumConfirmationsForMostRecentTransaction(a.getAddressString())))\n+                        .collect(Collectors.toList());\n+\n+        // Check to see if at least one of the existing addresses has a zero balance.\n+        boolean hasZeroBalance = false;\n+        for (Tuple3<String, Long, Integer> abc : addrBalanceConfirms) {\n+            if (abc.second == 0) {\n+                hasZeroBalance = true;\n+                break;\n+            }\n+        }\n+        if (!hasZeroBalance) {\n+            // None of the existing addresses have a zero balance, create a new address.\n+            addrBalanceConfirms.add(\n+                    new Tuple3<>(btcWalletService.getFreshAddressEntry().getAddressString(),\n+                            0L,\n+                            0));\n+        }\n+\n+        // Iterate the list of Tuple3<AddressString, Balance, NumConfirmations> objects\n+        // and build the formatted info string.\n+        StringBuilder addressInfoBuilder = new StringBuilder();\n+        addrBalanceConfirms.forEach(a -> {\n+            var btcBalance = formatSatoshis.apply(a.second);\n+            var numConfirmations = getNumConfirmationsForMostRecentTransaction(a.first);\n+            String addressInfo = \"\" + a.first\n+                    + \"  balance: \" + format(\"%13s\", btcBalance)\n+                    + ((a.second > 0) ? (\"  confirmations: \" + format(\"%6d\", numConfirmations)) : \"\")\n+                    + \"\\n\";\n+            addressInfoBuilder.append(addressInfo);\n+        });\n+\n+        return addressInfoBuilder.toString().trim();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTMyMjY3", "url": "https://github.com/bisq-network/bisq/pull/4299#pullrequestreview-434132267", "createdAt": "2020-06-19T14:42:43Z", "commit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjM5NTM3", "url": "https://github.com/bisq-network/bisq/pull/4299#pullrequestreview-437639537", "createdAt": "2020-06-25T16:01:25Z", "commit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3208, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}