{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDcwODYw", "number": 4299, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNzoxMlrOEF49Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowNTozMVrOEF6DVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjExNDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTowNzoxMlrOGkWaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1ODoxOFrOGkiVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg==", "bodyText": "Checks of this type will probably be performed for most API endpoints. It would be nice to eventually see them moved into their own methods (checkThatWalletsAreAvailable(), etc.). Not requesting this change at this point.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440769032", "createdAt": "2020-06-16T11:07:12Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NDQzOA==", "bodyText": "How about verifyEncryptedWalletIsUnlocked() , throwing the exception if the wallet is encrypted, but not temporarily unlocked by a call to unlockWallet(String password, long timeout) ?\n\"Available\" is taken;  it means the daemon is sufficiently warmed up and the btc & bsq wallets are not null. See walletsManager.areWalletsAvailable().\nGood call.  I'll create a new PR for this today.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440894438", "createdAt": "2020-06-16T14:27:43Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg=="}, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNDg2OA==", "bodyText": "What I see as a reusable and complex unit is not the predicate, but the pair of a predicate and the throwing of the exception. For example, checking if a wallet is locked and, if so, throwing an exception saying that it is locked. So the method I'm suggesting  would look like this:\nprivate void aGoodName() {\n  if (walletsManager.areWalletsEncrypted() && tempAesKey == null\n    throw new IllegalStateException(\"wallet is locked\");\n}\n\nDoes that make sense?", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440914868", "createdAt": "2020-06-16T14:54:05Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg=="}, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNDE0Mg==", "bodyText": "I'm preparing to test this now:\n   // Throws a RuntimeException if wallets are encrypted and locked.\n    private void verifyEncryptedWalletIsUnlocked() {\n        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n            throw new IllegalStateException(\"wallet is locked\");\n    }", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440924142", "createdAt": "2020-06-16T15:05:51Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg=="}, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NDM2OQ==", "bodyText": "Requested change is in PR 4312.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440964369", "createdAt": "2020-06-16T15:58:18Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2OTAzMg=="}, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjI5NDYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowNTozMVrOGkYLwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyMDo0MFrOGl88MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5ODE0NA==", "bodyText": "The Tuple3 feels unnecessary. Its main use seems to be to cache the balances, which are needed for checking if we need to generate a new address, otherwise we could get all that while formatting and a structure to hold these intermediary results wouldn't be necessary. Since the problem is basically caching, we can just do that explicitly by memoizing getAddressBalance:\nvar balances = CacheLoader.from(getAddressBalance);\n// Usage:\nvar someBalance = balances.load(someAddress);\n\nhttps://guava.dev/releases/20.0/api/docs/com/google/common/cache/CacheLoader.html\nThat will make the rest of the method simpler and shorter.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r440798144", "createdAt": "2020-06-16T12:05:31Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");\n+\n+        // Create a new funding address if none exists.\n+        if (btcWalletService.getAvailableAddressEntries().size() == 0)\n+            btcWalletService.getFreshAddressEntry();\n+\n+        // Populate a list of Tuple3<AddressString, Balance, NumConfirmations>\n+        List<Tuple3<String, Long, Integer>> addrBalanceConfirms =\n+                btcWalletService.getAvailableAddressEntries().stream()\n+                        .map(a -> new Tuple3<>(a.getAddressString(),\n+                                getAddressBalance(a.getAddressString()),\n+                                getNumConfirmationsForMostRecentTransaction(a.getAddressString())))\n+                        .collect(Collectors.toList());\n+\n+        // Check to see if at least one of the existing addresses has a zero balance.\n+        boolean hasZeroBalance = false;\n+        for (Tuple3<String, Long, Integer> abc : addrBalanceConfirms) {\n+            if (abc.second == 0) {\n+                hasZeroBalance = true;\n+                break;\n+            }\n+        }\n+        if (!hasZeroBalance) {\n+            // None of the existing addresses have a zero balance, create a new address.\n+            addrBalanceConfirms.add(\n+                    new Tuple3<>(btcWalletService.getFreshAddressEntry().getAddressString(),\n+                            0L,\n+                            0));\n+        }\n+\n+        // Iterate the list of Tuple3<AddressString, Balance, NumConfirmations> objects\n+        // and build the formatted info string.\n+        StringBuilder addressInfoBuilder = new StringBuilder();\n+        addrBalanceConfirms.forEach(a -> {\n+            var btcBalance = formatSatoshis.apply(a.second);\n+            var numConfirmations = getNumConfirmationsForMostRecentTransaction(a.first);\n+            String addressInfo = \"\" + a.first\n+                    + \"  balance: \" + format(\"%13s\", btcBalance)\n+                    + ((a.second > 0) ? (\"  confirmations: \" + format(\"%6d\", numConfirmations)) : \"\")\n+                    + \"\\n\";\n+            addressInfoBuilder.append(addressInfo);\n+        });\n+\n+        return addressInfoBuilder.toString().trim();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0ODk0NQ==", "bodyText": "Resolved in PR 4322.", "url": "https://github.com/bisq-network/bisq/pull/4299#discussion_r442448945", "createdAt": "2020-06-18T19:20:40Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreWalletsService.java", "diffHunk": "@@ -50,6 +75,68 @@ public long getAvailableBalance() {\n         return balance.getValue();\n     }\n \n+    public long getAddressBalance(String addressString) {\n+        Address address = getAddressEntry(addressString).getAddress();\n+        return btcWalletService.getBalanceForAddress(address).value;\n+    }\n+\n+    public String getFundingAddresses() {\n+        if (!walletsManager.areWalletsAvailable())\n+            throw new IllegalStateException(\"wallet is not yet available\");\n+\n+        if (walletsManager.areWalletsEncrypted() && tempAesKey == null)\n+            throw new IllegalStateException(\"wallet is locked\");\n+\n+        // Create a new funding address if none exists.\n+        if (btcWalletService.getAvailableAddressEntries().size() == 0)\n+            btcWalletService.getFreshAddressEntry();\n+\n+        // Populate a list of Tuple3<AddressString, Balance, NumConfirmations>\n+        List<Tuple3<String, Long, Integer>> addrBalanceConfirms =\n+                btcWalletService.getAvailableAddressEntries().stream()\n+                        .map(a -> new Tuple3<>(a.getAddressString(),\n+                                getAddressBalance(a.getAddressString()),\n+                                getNumConfirmationsForMostRecentTransaction(a.getAddressString())))\n+                        .collect(Collectors.toList());\n+\n+        // Check to see if at least one of the existing addresses has a zero balance.\n+        boolean hasZeroBalance = false;\n+        for (Tuple3<String, Long, Integer> abc : addrBalanceConfirms) {\n+            if (abc.second == 0) {\n+                hasZeroBalance = true;\n+                break;\n+            }\n+        }\n+        if (!hasZeroBalance) {\n+            // None of the existing addresses have a zero balance, create a new address.\n+            addrBalanceConfirms.add(\n+                    new Tuple3<>(btcWalletService.getFreshAddressEntry().getAddressString(),\n+                            0L,\n+                            0));\n+        }\n+\n+        // Iterate the list of Tuple3<AddressString, Balance, NumConfirmations> objects\n+        // and build the formatted info string.\n+        StringBuilder addressInfoBuilder = new StringBuilder();\n+        addrBalanceConfirms.forEach(a -> {\n+            var btcBalance = formatSatoshis.apply(a.second);\n+            var numConfirmations = getNumConfirmationsForMostRecentTransaction(a.first);\n+            String addressInfo = \"\" + a.first\n+                    + \"  balance: \" + format(\"%13s\", btcBalance)\n+                    + ((a.second > 0) ? (\"  confirmations: \" + format(\"%6d\", numConfirmations)) : \"\")\n+                    + \"\\n\";\n+            addressInfoBuilder.append(addressInfo);\n+        });\n+\n+        return addressInfoBuilder.toString().trim();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5ODE0NA=="}, "originalCommit": {"oid": "2e415de4adaf54a9f9c926fa4557af95e6fdfbe4"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2462, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}