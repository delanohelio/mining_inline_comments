{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjYzNTA5", "number": 4068, "title": "Sorting order of offers appropriately by min/max range", "bodyText": "Fixes #3818\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.  The sort was hard coded on the top end of the range which does not make sense when sorting in ascending order.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and volumeColumn.  When the sortType is changed we set the comparator to be the approprate property of the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.", "createdAt": "2020-03-16T14:08:07Z", "url": "https://github.com/bisq-network/bisq/pull/4068", "merged": true, "mergeCommit": {"oid": "d9b54224c03fcc383fa31783110e9ef40215a40d"}, "closed": true, "closedAt": "2020-03-18T13:42:59Z", "author": {"login": "jmacxx"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOUUs0ABqjMxMzQ4ODk3Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO3hxGgFqTM3Njg3MzQ5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf729bc3585ef145474f04c9ae5ad5a743ee9194", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/bf729bc3585ef145474f04c9ae5ad5a743ee9194", "committedDate": "2020-03-16T20:17:17Z", "message": "apply Codacy quality suggestion"}, "afterCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b91993fd23d6ebdacc64cf24e42858c036c7e84e", "committedDate": "2020-03-16T20:37:15Z", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and\nvolumeColumn. When the sortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTUwMjk1", "url": "https://github.com/bisq-network/bisq/pull/4068#pullrequestreview-376150295", "createdAt": "2020-03-17T15:34:38Z", "commit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNDozOVrOF3hwOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNDozOVrOF3hwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTAxNg==", "bodyText": "As we had issues in the past concerning using no brackets for one line conditionals we decided to use always {}", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393769016", "createdAt": "2020-03-17T15:34:39Z", "author": {"login": "ripcurlx"}, "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTU1OTMy", "url": "https://github.com/bisq-network/bisq/pull/4068#pullrequestreview-376155932", "createdAt": "2020-03-17T15:40:35Z", "commit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MDozNVrOF3iCFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MDozNVrOF3iCFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzU5MQ==", "bodyText": "And there should be spaces before and after ==\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393773591", "createdAt": "2020-03-17T15:40:35Z", "author": {"login": "ripcurlx"}, "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTYxODQ2", "url": "https://github.com/bisq-network/bisq/pull/4068#pullrequestreview-376161846", "createdAt": "2020-03-17T15:46:46Z", "commit": {"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "994183af618499c25e8049280f02a903a360cf76", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/994183af618499c25e8049280f02a903a360cf76", "committedDate": "2020-03-17T16:37:44Z", "message": "Update desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n\nCo-Authored-By: Christoph Atteneder <christoph.atteneder@gmail.com>"}, "afterCommit": {"oid": "52d6ea87755b6d53547f09a01974b12128fb755e", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/52d6ea87755b6d53547f09a01974b12128fb755e", "committedDate": "2020-03-17T17:02:20Z", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and\nvolumeColumn. When the sortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Njk0MTUz", "url": "https://github.com/bisq-network/bisq/pull/4068#pullrequestreview-376694153", "createdAt": "2020-03-18T09:33:12Z", "commit": {"oid": "52d6ea87755b6d53547f09a01974b12128fb755e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4dae4b6b1f773198b16299f10028603bbd96db5", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d4dae4b6b1f773198b16299f10028603bbd96db5", "committedDate": "2020-03-18T12:09:18Z", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount\nis shown as a range.  In OfferBookView::activate() we add a listener\nfor the sortTypeProperty on amountColumn and volumeColumn. When the\nsortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52d6ea87755b6d53547f09a01974b12128fb755e", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/52d6ea87755b6d53547f09a01974b12128fb755e", "committedDate": "2020-03-17T17:02:20Z", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and\nvolumeColumn. When the sortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818"}, "afterCommit": {"oid": "d4dae4b6b1f773198b16299f10028603bbd96db5", "author": {"user": {"login": "jmacxx", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d4dae4b6b1f773198b16299f10028603bbd96db5", "committedDate": "2020-03-18T12:09:18Z", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount\nis shown as a range.  In OfferBookView::activate() we add a listener\nfor the sortTypeProperty on amountColumn and volumeColumn. When the\nsortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODczNDkz", "url": "https://github.com/bisq-network/bisq/pull/4068#pullrequestreview-376873493", "createdAt": "2020-03-18T13:42:41Z", "commit": {"oid": "d4dae4b6b1f773198b16299f10028603bbd96db5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3357, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}