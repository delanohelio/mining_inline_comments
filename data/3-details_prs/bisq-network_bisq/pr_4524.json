{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzE2NzAx", "number": 4524, "title": "Add core support for registration of regtest dispute agents via API", "bodyText": "This PR does not support registering dispute agents on daemons running on the mainnet chain.\nThis PR replaces 4462.", "createdAt": "2020-09-14T15:49:34Z", "url": "https://github.com/bisq-network/bisq/pull/4524", "merged": true, "mergeCommit": {"oid": "b812a261cfca94873a07092ad73b75750a101ef9"}, "closed": true, "closedAt": "2020-09-16T14:33:19Z", "author": {"login": "ghubstan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIzbN7gH2gAyNDg2NzE2NzAxOjM1OTAzN2EzYmE5MzU4MjgyYjljZjZiYTY4NzY1NmE4MDlhNGE3OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJdVcCgFqTQ4OTY5MDA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "359037a3ba9358282b9cf6ba687656a809a4a78a", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/359037a3ba9358282b9cf6ba687656a809a4a78a", "committedDate": "2020-09-14T13:43:31Z", "message": "Move version service proto def to bottom of grpc.proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b60445873304e614be6d9ba20c9e86181f6cba", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/15b60445873304e614be6d9ba20c9e86181f6cba", "committedDate": "2020-09-14T13:44:19Z", "message": "Add dispute agents service proto def to grpc.proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf4f09181746759961f5404f241fa183dd6c5ec", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/bbf4f09181746759961f5404f241fa183dd6c5ec", "committedDate": "2020-09-14T14:04:10Z", "message": "Add core impl for registering dispute agents\n\nThis change supports registering mediators and refund agents on\ndaemons running on regest or testnet chains.  Registering\narbitrators is not supported."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3386b43e52de5a0eae01ac3612c63e422300d293", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/3386b43e52de5a0eae01ac3612c63e422300d293", "committedDate": "2020-09-14T14:39:36Z", "message": "Add GrpcDisputeAgentsService to GrpcServer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304047eacaae2f95760d3b336a9d2affcc8bc4be", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/304047eacaae2f95760d3b336a9d2affcc8bc4be", "committedDate": "2020-09-14T14:40:22Z", "message": "Create GrpcDisputeAgentsService stub"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTk3NTcz", "url": "https://github.com/bisq-network/bisq/pull/4524#pullrequestreview-489597573", "createdAt": "2020-09-16T12:59:31Z", "commit": {"oid": "304047eacaae2f95760d3b336a9d2affcc8bc4be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo1OTozMVrOHSvoCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzowNDoxMlrOHSv0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNjcxMw==", "bodyText": "Both of these work the same at the moment, but it would be correct to use the specific manager depending on case. Better make a disputeAgentManager and set to whichever type is being registered, or just move the specific registration code to their switch cases.", "url": "https://github.com/bisq-network/bisq/pull/4524#discussion_r489416713", "createdAt": "2020-09-16T12:59:31Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.api;\n+\n+import bisq.core.support.dispute.mediation.mediator.Mediator;\n+import bisq.core.support.dispute.mediation.mediator.MediatorManager;\n+import bisq.core.support.dispute.refund.refundagent.RefundAgent;\n+import bisq.core.support.dispute.refund.refundagent.RefundAgentManager;\n+\n+import bisq.network.p2p.NodeAddress;\n+import bisq.network.p2p.P2PService;\n+\n+import bisq.common.config.Config;\n+import bisq.common.crypto.KeyRing;\n+\n+import org.bitcoinj.core.ECKey;\n+\n+import javax.inject.Inject;\n+\n+import java.net.InetAddress;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+\n+@Slf4j\n+class CoreDisputeAgentsService {\n+\n+    private final Config config;\n+    private final KeyRing keyRing;\n+    private final MediatorManager mediatorManager;\n+    private final RefundAgentManager refundAgentManager;\n+    private final P2PService p2PService;\n+\n+    @Inject\n+    public CoreDisputeAgentsService(Config config,\n+                                    KeyRing keyRing,\n+                                    MediatorManager mediatorManager,\n+                                    RefundAgentManager refundAgentManager,\n+                                    P2PService p2PService) {\n+        this.config = config;\n+        this.keyRing = keyRing;\n+        this.mediatorManager = mediatorManager;\n+        this.refundAgentManager = refundAgentManager;\n+        this.p2PService = p2PService;\n+    }\n+\n+    public void registerDisputeAgent(String disputeAgentType, String registrationKey) {\n+        if (!p2PService.isBootstrapped())\n+            throw new IllegalStateException(\"p2p service is not bootstrapped yet\");\n+\n+        if (config.baseCurrencyNetwork.isMainnet()\n+                || config.baseCurrencyNetwork.isDaoBetaNet()\n+                || !config.useLocalhostForP2P)\n+            throw new IllegalStateException(\"dispute agents must be registered in a Bisq UI\");\n+\n+        if (!registrationKey.equals(DEV_PRIVILEGE_PRIV_KEY))\n+            throw new IllegalArgumentException(\"invalid registration key\");\n+\n+        switch (disputeAgentType) {\n+            case \"arbitrator\":\n+                throw new IllegalArgumentException(\"arbitrators must be registered in a Bisq UI\");\n+            case \"mediator\":\n+            case \"refundagent\":\n+                NodeAddress nodeAddress = new NodeAddress(\n+                        InetAddress.getLoopbackAddress().getHostAddress(), config.nodePort);\n+                List<String> languageCodes = Arrays.asList(\"de\", \"en\", \"es\", \"fr\");\n+                ECKey ecKey = mediatorManager.getRegistrationKey(registrationKey);\n+                String signature = mediatorManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304047eacaae2f95760d3b336a9d2affcc8bc4be"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxOTgzMg==", "bodyText": "This is some ugly indentation, seems it's what we have specified as our standard though, and codacy agrees.", "url": "https://github.com/bisq-network/bisq/pull/4524#discussion_r489419832", "createdAt": "2020-09-16T13:04:12Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.api;\n+\n+import bisq.core.support.dispute.mediation.mediator.Mediator;\n+import bisq.core.support.dispute.mediation.mediator.MediatorManager;\n+import bisq.core.support.dispute.refund.refundagent.RefundAgent;\n+import bisq.core.support.dispute.refund.refundagent.RefundAgentManager;\n+\n+import bisq.network.p2p.NodeAddress;\n+import bisq.network.p2p.P2PService;\n+\n+import bisq.common.config.Config;\n+import bisq.common.crypto.KeyRing;\n+\n+import org.bitcoinj.core.ECKey;\n+\n+import javax.inject.Inject;\n+\n+import java.net.InetAddress;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+\n+@Slf4j\n+class CoreDisputeAgentsService {\n+\n+    private final Config config;\n+    private final KeyRing keyRing;\n+    private final MediatorManager mediatorManager;\n+    private final RefundAgentManager refundAgentManager;\n+    private final P2PService p2PService;\n+\n+    @Inject\n+    public CoreDisputeAgentsService(Config config,\n+                                    KeyRing keyRing,\n+                                    MediatorManager mediatorManager,\n+                                    RefundAgentManager refundAgentManager,\n+                                    P2PService p2PService) {\n+        this.config = config;\n+        this.keyRing = keyRing;\n+        this.mediatorManager = mediatorManager;\n+        this.refundAgentManager = refundAgentManager;\n+        this.p2PService = p2PService;\n+    }\n+\n+    public void registerDisputeAgent(String disputeAgentType, String registrationKey) {\n+        if (!p2PService.isBootstrapped())\n+            throw new IllegalStateException(\"p2p service is not bootstrapped yet\");\n+\n+        if (config.baseCurrencyNetwork.isMainnet()\n+                || config.baseCurrencyNetwork.isDaoBetaNet()\n+                || !config.useLocalhostForP2P)\n+            throw new IllegalStateException(\"dispute agents must be registered in a Bisq UI\");\n+\n+        if (!registrationKey.equals(DEV_PRIVILEGE_PRIV_KEY))\n+            throw new IllegalArgumentException(\"invalid registration key\");\n+\n+        switch (disputeAgentType) {\n+            case \"arbitrator\":\n+                throw new IllegalArgumentException(\"arbitrators must be registered in a Bisq UI\");\n+            case \"mediator\":\n+            case \"refundagent\":\n+                NodeAddress nodeAddress = new NodeAddress(\n+                        InetAddress.getLoopbackAddress().getHostAddress(), config.nodePort);\n+                List<String> languageCodes = Arrays.asList(\"de\", \"en\", \"es\", \"fr\");\n+                ECKey ecKey = mediatorManager.getRegistrationKey(registrationKey);\n+                String signature = mediatorManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n+\n+                if (disputeAgentType.equals(\"mediator\"))\n+                    registerMediator(nodeAddress, languageCodes, ecKey, signature);\n+                else\n+                    registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n+\n+                return;\n+            default:\n+                throw new IllegalArgumentException(\"unknown dispute agent type \" + disputeAgentType);\n+        }\n+    }\n+\n+    private void registerMediator(NodeAddress nodeAddress,\n+                                  List<String> languageCodes,\n+                                  ECKey ecKey,\n+                                  String signature) {\n+        Mediator mediator = new Mediator(\n+                nodeAddress,\n+                keyRing.getPubKeyRing(),\n+                languageCodes,\n+                new Date().getTime(),\n+                ecKey.getPubKey(),\n+                signature,\n+                null,\n+                null,\n+                null\n+        );\n+        mediatorManager.addDisputeAgent(mediator, () -> {\n+        }, errorMessage -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304047eacaae2f95760d3b336a9d2affcc8bc4be"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57423f4fdb16a8720ff245c44ac1126bd0ba8079", "author": {"user": {"login": "ghubstan", "name": "Stan"}}, "url": "https://github.com/bisq-network/bisq/commit/57423f4fdb16a8720ff245c44ac1126bd0ba8079", "committedDate": "2020-09-16T14:14:30Z", "message": "Refactor to fix dispute agent mgr usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjkwMDc4", "url": "https://github.com/bisq-network/bisq/pull/4524#pullrequestreview-489690078", "createdAt": "2020-09-16T14:33:13Z", "commit": {"oid": "57423f4fdb16a8720ff245c44ac1126bd0ba8079"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3191, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}