{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjUyODQ5", "number": 4436, "title": "Bundle messages at broadcast", "bodyText": "We use BundleOfEnvelopes at the connection level to collect messages which are sent out with a short time interval. unfortunatelty that approach did not had much effect as it is per connection and per connection we rarely get jammed too much. This PR is applying the idea to the Broadcast class where we aggregate all messages for broadcast and send them as bundle every second to our connections.\nIf only 1 message arrived in that interval we do not wrap it into a BundleOfEnvelopes but send it directly.\nWe also improved the handling of a listener used for notifying about the stored in mailbox event. Previously we added a 3 sec. delay after we received the first successful broadcast. Now we trigger the event once we had at least 3 successful broadcasts.\nAs we have now mixed messages we had to change the handling of own messages. We treat the bundle with priority if at least one message was originated by ourself.\nThe notification of listeners handled is by message. To achieve that we use the BroadcastRequest value object.\nThere was a bug with the timeout delay where a value in seconds have been not converted to ms.\nWe also refactored the convoluted error handling.\nFor deploying that PR I recommend to start with 1 seed node and observe the statistics if it have led to lower number of sent messages compared to the current version.\nThe #4435 PR has added better logging for network statistics and is merged into that PR.", "createdAt": "2020-08-26T05:20:22Z", "url": "https://github.com/bisq-network/bisq/pull/4436", "merged": true, "mergeCommit": {"oid": "c551adb441cf7c9fc4b3e1003dedcb0cff3bc1d8"}, "closed": true, "closedAt": "2020-08-31T16:01:15Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdB7ifhAH2gAyNDczNjUyODQ5OmJhZGM4NzI1MzNiOWZlMDRiODlhMTM0OWU3MzU4NTk1ZGJlYzYzNGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEU8dIAFqTQ3ODczOTY2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "badc872533b9fe04b89a1349e7358595dbec634a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/badc872533b9fe04b89a1349e7358595dbec634a", "committedDate": "2020-08-24T05:13:14Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4932829fe82464aa35a2eb9d0ddbf0157c7647d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c4932829fe82464aa35a2eb9d0ddbf0157c7647d", "committedDate": "2020-08-24T05:37:14Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5433707fa254bc7aff8797a5660d923389bf4bf1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5433707fa254bc7aff8797a5660d923389bf4bf1", "committedDate": "2020-08-26T02:30:33Z", "message": "Bundle broadcast requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f407fda3a1e6e4808df521a4ae8e339d778903", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/06f407fda3a1e6e4808df521a4ae8e339d778903", "committedDate": "2020-08-26T02:31:06Z", "message": "Add todo and curly brackets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea50ce8f49427f7ce1399c7f7bc3048386898851", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ea50ce8f49427f7ce1399c7f7bc3048386898851", "committedDate": "2020-08-26T03:12:58Z", "message": "Merge branch 'improve-network-statistics' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8152d68aeaf417783c8da6f8678435c2dc352b3", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b8152d68aeaf417783c8da6f8678435c2dc352b3", "committedDate": "2020-08-26T03:42:48Z", "message": "Change BROADCAST_INTERVAL_MS to 2 sec."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04b6c2abea0c738a96d58a35cd10a84fdc445b0e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/04b6c2abea0c738a96d58a35cd10a84fdc445b0e", "committedDate": "2020-08-26T03:43:24Z", "message": "Don't wrap into BundleOfEnvelopes is only 1 message is used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8747da40f6665bbe3c8846af796aac742b61646f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8747da40f6665bbe3c8846af796aac742b61646f", "committedDate": "2020-08-26T03:46:40Z", "message": "Merge branch 'improve-network-statistics' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f67a46791b03b138a15af939dc0d261bfbbc71e9", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f67a46791b03b138a15af939dc0d261bfbbc71e9", "committedDate": "2020-08-26T03:49:12Z", "message": "LAST_ACTIVITY_AGE_MS should be millisec not sec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c56b35f9aca10bc327c870645bdc6c225452eb", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c6c56b35f9aca10bc327c870645bdc6c225452eb", "committedDate": "2020-08-26T03:50:36Z", "message": "Increase INTERVAL_SEC to 30-60 sec from 5-35 sec."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59a3adbc30e9e9461d72095d6f356dbeae7bf82", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d59a3adbc30e9e9461d72095d6f356dbeae7bf82", "committedDate": "2020-08-26T04:30:52Z", "message": "Add logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8da20acee4fb258cae88df6fae295c8ff25a045", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d8da20acee4fb258cae88df6fae295c8ff25a045", "committedDate": "2020-08-26T05:20:47Z", "message": "Remove TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef470031ea9874868ef98e1e500c8da316ea186", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/bef470031ea9874868ef98e1e500c8da316ea186", "committedDate": "2020-08-27T14:33:31Z", "message": "Merge branch 'improve-network-statistics' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1702f7a6d5fa6a9dcf4bf8dfed89adb59726a1d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b1702f7a6d5fa6a9dcf4bf8dfed89adb59726a1d", "committedDate": "2020-08-27T20:31:41Z", "message": "- Add shutdown handling to broadCaster.\nIt is important that we flush our queued requests\nat shutdown and wait until broadcast is completed as a maker need to\nremove his offers at shutdown.\n\n- Add handling for the case that there are very few connections (as in\ndev setup).\n\n- Make BundleOfEnvelopes extend BroadcastMessage\n\n- Add complete handler for broadCaster to shutdown in P2PService and\nwait with shutdown of other services until broadcaster is completed.\n- Remove case for repeated shutdown call on P2PService as it cannot\nhappen."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e780d49d55ab4897782f9f63471d7dbcf0660359", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e780d49d55ab4897782f9f63471d7dbcf0660359", "committedDate": "2020-08-27T20:43:33Z", "message": "Merge branch 'improve-network-statistics' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "627052755b137fb246568d9e3db8c175ef9b1046", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/627052755b137fb246568d9e3db8c175ef9b1046", "committedDate": "2020-08-27T20:47:51Z", "message": "Fix log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ff2df232f4b2ed229000e9eb93f72471f7710a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/21ff2df232f4b2ed229000e9eb93f72471f7710a", "committedDate": "2020-08-27T21:42:55Z", "message": "Remove dev logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8704e74f546eef66de5c26225cb382d4b2e5b6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0e8704e74f546eef66de5c26225cb382d4b2e5b6", "committedDate": "2020-08-27T21:50:45Z", "message": "Remove dev logs, remove unread property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a665e02d8b86ca812611fcfe50034d0a014deb", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/28a665e02d8b86ca812611fcfe50034d0a014deb", "committedDate": "2020-08-28T02:29:30Z", "message": "Satisfy annoying Codacy bot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c535ebbff0c1f0c5596f52d120411ceac58fdca9", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c535ebbff0c1f0c5596f52d120411ceac58fdca9", "committedDate": "2020-08-28T14:48:59Z", "message": "Merge branch 'improve-network-statistics' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be7877036929d3dc5bbda87d118dac1075551536", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/be7877036929d3dc5bbda87d118dac1075551536", "committedDate": "2020-08-29T18:04:42Z", "message": "Merge branch 'master_upstream' into bundle-msg-at-broadcast\n\n# Conflicts:\n#\tp2p/src/main/java/bisq/network/p2p/P2PService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "366fdb3a098a540b3a647d9b9082e056f43f4652", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/366fdb3a098a540b3a647d9b9082e056f43f4652", "committedDate": "2020-08-29T18:13:31Z", "message": "Merge remote-tracking branch 'origin/bundle-msg-at-broadcast' into bundle-msg-at-broadcast\n\n# Conflicts:\n#\tp2p/src/main/java/bisq/network/p2p/P2PService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0eea78a031a6f5f2629e0d22f83f702510cf2dc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b0eea78a031a6f5f2629e0d22f83f702510cf2dc", "committedDate": "2020-08-29T18:14:18Z", "message": "Remove unused properties (was added again from a merge failure)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6accd58fc98020734992cdd52a83d60c9d53b2f3", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6accd58fc98020734992cdd52a83d60c9d53b2f3", "committedDate": "2020-08-30T12:27:15Z", "message": "Merge branch 'master_upstream' into bundle-msg-at-broadcast\n\n# Conflicts:\n#\tp2p/src/main/java/bisq/network/p2p/P2PService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa97d39ab35d197dbf722c2efc339183fcf5ef2", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0aa97d39ab35d197dbf722c2efc339183fcf5ef2", "committedDate": "2020-08-30T12:28:02Z", "message": "Merge remote-tracking branch 'origin/bundle-msg-at-broadcast' into bundle-msg-at-broadcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d13ff8856ef4544b52ee4762739f217db972283", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8d13ff8856ef4544b52ee4762739f217db972283", "committedDate": "2020-08-30T15:02:19Z", "message": "Add comment about size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d212e654c70394820d6dba04671c16b33b87d4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/49d212e654c70394820d6dba04671c16b33b87d4", "committedDate": "2020-08-30T15:37:46Z", "message": "Fix tests.\n\nI don't know why the tests failed as I just added an overloaded method\nand it should not have any impact. There is also one exception which\nmakes it even more obscure. I guess its some test framework issue.\n\nSee comment at the exceptional handling\n// If we remove the last argument (isNull()) tests fail. No idea why as the broadcast method has an\n/ overloaded method with nullable listener. Seems a testframework issue as it should not matter if the\n// method with listener is called with null argument or the other method with no listener. We removed the\n// null value from all other calls but here we can't as it breaks the test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTk5Mzk0", "url": "https://github.com/bisq-network/bisq/pull/4436#pullrequestreview-478199394", "createdAt": "2020-08-30T12:37:33Z", "commit": {"oid": "b0eea78a031a6f5f2629e0d22f83f702510cf2dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjozODo0MVrOHJihQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjoxMDowNlrOHJj5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2NDgwMA==", "bodyText": "This is rather verbose, not sure it's a good idea to keep level at info.\nAfter running a mainnet client for a while this log is 40% of the total log lines.", "url": "https://github.com/bisq-network/bisq/pull/4436#discussion_r479764800", "createdAt": "2020-08-30T12:38:41Z", "author": {"login": "sqrrm"}, "path": "p2p/src/main/java/bisq/network/p2p/peers/Broadcaster.java", "diffHunk": "@@ -45,21 +61,63 @@ public Broadcaster(NetworkNode networkNode, PeerManager peerManager) {\n         this.peerManager = peerManager;\n     }\n \n-    public void shutDown() {\n-        broadcastHandlers.stream().forEach(BroadcastHandler::cancel);\n-        broadcastHandlers.clear();\n+    public void shutDown(Runnable resultHandler) {\n+        shutDownRequested = true;\n+        shutDownResultHandler = resultHandler;\n+        if (broadcastRequests.isEmpty()) {\n+            doShutDown();\n+        } else {\n+            // We set delay of broadcasts and timeout to very low values,\n+            // so we can expect that we get onCompleted called very fast and trigger the doShutDown from there.\n+            maybeBroadcastBundle();\n+        }\n+    }\n+\n+    private void doShutDown() {\n+        broadcastHandlers.forEach(BroadcastHandler::cancel);\n+        if (timer != null) {\n+            timer.stop();\n+        }\n+        shutDownResultHandler.run();\n     }\n \n \n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // API\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n-    public void broadcast(BroadcastMessage message, @Nullable NodeAddress sender,\n+    public void broadcast(BroadcastMessage message,\n+                          @Nullable NodeAddress sender) {\n+        broadcast(message, sender, null);\n+    }\n+\n+\n+    public void broadcast(BroadcastMessage message,\n+                          @Nullable NodeAddress sender,\n                           @Nullable BroadcastHandler.Listener listener) {\n-        BroadcastHandler broadcastHandler = new BroadcastHandler(networkNode, peerManager);\n-        broadcastHandler.broadcast(message, sender, this, listener);\n-        broadcastHandlers.add(broadcastHandler);\n+        broadcastRequests.add(new BroadcastRequest(message, sender, listener));\n+        // Keep that log on INFO for better debugging if the feature works as expected. Later it can\n+        // be remove or set to DEBUG\n+        log.info(\"Broadcast requested for {}. We queue it up for next bundled broadcast.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa97d39ab35d197dbf722c2efc339183fcf5ef2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4NzQxMw==", "bodyText": "These two cases could be combined to one block", "url": "https://github.com/bisq-network/bisq/pull/4436#discussion_r479787413", "createdAt": "2020-08-30T16:10:06Z", "author": {"login": "sqrrm"}, "path": "p2p/src/main/java/bisq/network/p2p/peers/BroadcastHandler.java", "diffHunk": "@@ -239,36 +185,145 @@ public void onAwakeFromStandby() {\n     // Private\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n-    private void cleanup() {\n-        stopped = true;\n-        peerManager.removeListener(this);\n-        if (timeoutTimer != null) {\n-            timeoutTimer.stop();\n-            timeoutTimer = null;\n-        }\n+    // Check if we have at least one message originated by ourselves\n+    private boolean requestsContainOwnMessage(List<Broadcaster.BroadcastRequest> broadcastRequests) {\n+        NodeAddress myAddress = networkNode.getNodeAddress();\n+        if (myAddress == null)\n+            return false;\n+\n+        return broadcastRequests.stream().anyMatch(e -> myAddress.equals(e.getSender()));\n     }\n \n-    private void onFault(String errorMessage) {\n-        onFault(errorMessage, true);\n+    private void setupTimeoutHandler(List<Broadcaster.BroadcastRequest> broadcastRequests,\n+                                     int delay,\n+                                     boolean shutDownRequested) {\n+        // In case of shutdown we try to complete fast and set a short 1 second timeout\n+        long baseTimeoutMs = shutDownRequested ? TimeUnit.SECONDS.toMillis(1) : BASE_TIMEOUT_MS;\n+        long timeoutDelay = baseTimeoutMs + delay * (numPeersForBroadcast + 1); // We added 1 in the loop\n+        timeoutTimer = UserThread.runAfter(() -> {\n+            if (stopped) {\n+                return;\n+            }\n+\n+            timeoutTriggered = true;\n+\n+            log.warn(\"Broadcast did not complete after {} sec.\\n\" +\n+                            \"numPeersForBroadcast={}\\n\" +\n+                            \"numOfCompletedBroadcasts={}\\n\" +\n+                            \"numOfFailedBroadcasts={}\",\n+                    timeoutDelay / 1000d,\n+                    numPeersForBroadcast,\n+                    numOfCompletedBroadcasts,\n+                    numOfFailedBroadcasts);\n+\n+            maybeNotifyListeners(broadcastRequests);\n+\n+            cleanup();\n+\n+        }, timeoutDelay, TimeUnit.MILLISECONDS);\n     }\n \n-    private void onFault(String errorMessage, boolean logWarning) {\n-        cleanup();\n+    // We exclude the requests containing a message we received from that connection\n+    // Also we filter out messages which requires a capability but peer does not support it.\n+    private List<Broadcaster.BroadcastRequest> getBroadcastRequestsForConnection(Connection connection,\n+                                                                                 List<Broadcaster.BroadcastRequest> broadcastRequests) {\n+        return broadcastRequests.stream()\n+                .filter(broadcastRequest -> !connection.getPeersNodeAddressOptional().isPresent() ||\n+                        !connection.getPeersNodeAddressOptional().get().equals(broadcastRequest.getSender()))\n+                .filter(broadcastRequest -> connection.noCapabilityRequiredOrCapabilityIsSupported(broadcastRequest.getMessage()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void sendToPeer(Connection connection, List<Broadcaster.BroadcastRequest> broadcastRequestsForConnection) {\n+        // Can be BundleOfEnvelopes or a single BroadcastMessage\n+        BroadcastMessage broadcastMessage = getMessage(broadcastRequestsForConnection);\n+        SettableFuture<Connection> future = networkNode.sendMessage(connection, broadcastMessage);\n+\n+        Futures.addCallback(future, new FutureCallback<>() {\n+            @Override\n+            public void onSuccess(Connection connection) {\n+                numOfCompletedBroadcasts++;\n+\n+                if (stopped) {\n+                    return;\n+                }\n+\n+                maybeNotifyListeners(broadcastRequestsForConnection);\n+                checkForCompletion();\n+            }\n+\n+            @Override\n+            public void onFailure(@NotNull Throwable throwable) {\n+                log.warn(\"Broadcast to {} failed. ErrorMessage={}\", connection.getPeersNodeAddressOptional(),\n+                        throwable.getMessage());\n+                numOfFailedBroadcasts++;\n+\n+                if (stopped) {\n+                    return;\n+                }\n \n-        if (logWarning)\n-            log.warn(errorMessage);\n-        else\n-            log.debug(errorMessage);\n+                maybeNotifyListeners(broadcastRequestsForConnection);\n+                checkForCompletion();\n+            }\n+        });\n+    }\n \n-        if (listener != null)\n-            listener.onBroadcastFailed(errorMessage);\n+    private BroadcastMessage getMessage(List<Broadcaster.BroadcastRequest> broadcastRequests) {\n+        if (broadcastRequests.size() == 1) {\n+            // If we only have 1 message we avoid the overhead of the BundleOfEnvelopes and send the message directly\n+            return broadcastRequests.get(0).getMessage();\n+        } else {\n+            return new BundleOfEnvelopes(broadcastRequests.stream()\n+                    .map(Broadcaster.BroadcastRequest::getMessage)\n+                    .collect(Collectors.toList()));\n+        }\n+    }\n \n-        if (listener != null && (numOfCompletedBroadcasts + numOfFailedBroadcasts == numPeers || stopped))\n-            listener.onBroadcastCompleted(message, numOfCompletedBroadcasts, numOfFailedBroadcasts);\n+    private void maybeNotifyListeners(List<Broadcaster.BroadcastRequest> broadcastRequests) {\n+        int numOfCompletedBroadcastsTarget = Math.max(1, Math.min(numPeersForBroadcast, 3));\n+        // We use equal checks to avoid duplicated listener calls as it would be the case with >= checks.\n+        if (numOfCompletedBroadcasts == numOfCompletedBroadcastsTarget) {\n+            // We have heard back from 3 peers (or all peers if numPeers is lower) so we consider the message was sufficiently broadcast.\n+            broadcastRequests.stream()\n+                    .filter(broadcastRequest -> broadcastRequest.getListener() != null)\n+                    .map(Broadcaster.BroadcastRequest::getListener)\n+                    .forEach(listener -> listener.onSufficientlyBroadcast(broadcastRequests));\n+        } else {\n+            // Number of open requests to peers is less than we need to reach numOfCompletedBroadcastsTarget.\n+            // Thus we never can reach required resilience as too many numOfFailedBroadcasts occurred.\n+            int openRequests = numPeersForBroadcast - numOfCompletedBroadcasts - numOfFailedBroadcasts;\n+            int maxPossibleSuccessCases = openRequests + numOfCompletedBroadcasts;\n+            // We subtract 1 as we want to have it called only once, with a < comparision we would trigger repeatedly.\n+            if (maxPossibleSuccessCases == numOfCompletedBroadcastsTarget - 1) {\n+                broadcastRequests.stream()\n+                        .filter(broadcastRequest -> broadcastRequest.getListener() != null)\n+                        .map(Broadcaster.BroadcastRequest::getListener)\n+                        .forEach(listener -> listener.onNotSufficientlyBroadcast(numOfCompletedBroadcasts, numOfFailedBroadcasts));\n+            } else if (timeoutTriggered && numOfCompletedBroadcasts < numOfCompletedBroadcastsTarget) {\n+                // We did not reach resilience level and timeout prevents to reach it later\n+                broadcastRequests.stream()\n+                        .filter(broadcastRequest -> broadcastRequest.getListener() != null)\n+                        .map(Broadcaster.BroadcastRequest::getListener)\n+                        .forEach(listener -> listener.onNotSufficientlyBroadcast(numOfCompletedBroadcasts, numOfFailedBroadcasts));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d212e654c70394820d6dba04671c16b33b87d4"}, "originalPosition": 428}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc802c861d707a642ffbad25771651f9619d880c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/bc802c861d707a642ffbad25771651f9619d880c", "committedDate": "2020-08-31T15:37:58Z", "message": "Change log level to avoid too verbose logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7951d5943d1f33ed1052eedb2a4f9f0234cc9d7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f7951d5943d1f33ed1052eedb2a4f9f0234cc9d7", "committedDate": "2020-08-31T15:38:46Z", "message": "Combine if/else branches. Improve comments and variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzI4MDM4", "url": "https://github.com/bisq-network/bisq/pull/4436#pullrequestreview-478728038", "createdAt": "2020-08-31T15:41:32Z", "commit": {"oid": "f7951d5943d1f33ed1052eedb2a4f9f0234cc9d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzM5NjY1", "url": "https://github.com/bisq-network/bisq/pull/4436#pullrequestreview-478739665", "createdAt": "2020-08-31T15:57:04Z", "commit": {"oid": "f7951d5943d1f33ed1052eedb2a4f9f0234cc9d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3143, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}