{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjc5Mjk0", "number": 4566, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1NToxOVrOEoAcUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0OToxMFrOEoYQWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzg1NzQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1NToyMFrOHY2mpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1OTozNlrOHZSl_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjUwMA==", "bodyText": "Why create multiple streams here, they are concatenated into one in the end anyway.\nNaming is also suspect, AVAILABLE is a keyword for a certain type of address, perhaps spendable would be better?\nSomething like\nvar spendable = Stream.concat...\nspendable = Stream.concat(spendable, ...\n...\nspendable.filter...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495822500", "createdAt": "2020-09-28T09:55:20Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -738,6 +734,15 @@ public Coin getSavingWalletBalance() {\n                 .sum());\n     }\n \n+    public Stream<AddressEntry> getAddressEntriesForAvailableBalanceStream() {\n+        Stream<AddressEntry> availableAndPayout = Stream.concat(getAddressEntries(AddressEntry.Context.TRADE_PAYOUT)\n+                .stream(), getFundedAvailableAddressEntries().stream());\n+        Stream<AddressEntry> available = Stream.concat(availableAndPayout,\n+                getAddressEntries(AddressEntry.Context.ARBITRATOR).stream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MDcwMw==", "bodyText": "AVAILABLE is if it has no role in the trade. Spendable would not cover that correctly as TRADE_PAYOUT is spendable as well. But better NOT_USED_IN_TRADE would be prob. more clear.  But as AddressEntry is a protobuf field I prefer to not change anything if not needed (though I guess rename would be ok).", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496280703", "createdAt": "2020-09-28T22:58:19Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -738,6 +734,15 @@ public Coin getSavingWalletBalance() {\n                 .sum());\n     }\n \n+    public Stream<AddressEntry> getAddressEntriesForAvailableBalanceStream() {\n+        Stream<AddressEntry> availableAndPayout = Stream.concat(getAddressEntries(AddressEntry.Context.TRADE_PAYOUT)\n+                .stream(), getFundedAvailableAddressEntries().stream());\n+        Stream<AddressEntry> available = Stream.concat(availableAndPayout,\n+                getAddressEntries(AddressEntry.Context.ARBITRATOR).stream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjUwMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MTA4Ng==", "bodyText": "Yes these stream concatenations are not nice. Its old code just moved from Trademanager, did not want to change too much... But to do a custom filter would be probably more clear here.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496281086", "createdAt": "2020-09-28T22:59:36Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -738,6 +734,15 @@ public Coin getSavingWalletBalance() {\n                 .sum());\n     }\n \n+    public Stream<AddressEntry> getAddressEntriesForAvailableBalanceStream() {\n+        Stream<AddressEntry> availableAndPayout = Stream.concat(getAddressEntries(AddressEntry.Context.TRADE_PAYOUT)\n+                .stream(), getFundedAvailableAddressEntries().stream());\n+        Stream<AddressEntry> available = Stream.concat(availableAndPayout,\n+                getAddressEntries(AddressEntry.Context.ARBITRATOR).stream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjUwMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzg3NzY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/proto/network/CoreNetworkProtoResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDowMDo0MVrOHY2y7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzowMDoxM1rOHZSm9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNTY0Ng==", "bodyText": "Would be nice to rename the protobuf class to TakeOfferRequest as well to conform with the rest of the code, this looks confusing.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495825646", "createdAt": "2020-09-28T10:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/proto/network/CoreNetworkProtoResolver.java", "diffHunk": "@@ -147,7 +147,7 @@ public NetworkEnvelope fromProto(protobuf.NetworkEnvelope proto) throws Protobuf\n                 case REFRESH_TRADE_STATE_REQUEST:\n                     return RefreshTradeStateRequest.fromProto(proto.getRefreshTradeStateRequest(), messageVersion);\n                 case INPUTS_FOR_DEPOSIT_TX_REQUEST:\n-                    return InputsForDepositTxRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);\n+                    return TakeOfferRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MTMzMw==", "bodyText": "Yes, agree. I would need to check out if renaming has any issues, I guess not but not 100% sure. If inheritence is used in PB it uses a key named after the class, so not sure if that is backward compatible...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496281333", "createdAt": "2020-09-28T23:00:13Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/proto/network/CoreNetworkProtoResolver.java", "diffHunk": "@@ -147,7 +147,7 @@ public NetworkEnvelope fromProto(protobuf.NetworkEnvelope proto) throws Protobuf\n                 case REFRESH_TRADE_STATE_REQUEST:\n                     return RefreshTradeStateRequest.fromProto(proto.getRefreshTradeStateRequest(), messageVersion);\n                 case INPUTS_FOR_DEPOSIT_TX_REQUEST:\n-                    return InputsForDepositTxRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);\n+                    return TakeOfferRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNTY0Ng=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDA4MDEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowMDo0MVrOHY4q2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzowMzo1MFrOHZSrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjM0NQ==", "bodyText": "I'm not following why this is done. A comment would likely clarify.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495856345", "createdAt": "2020-09-28T11:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "diffHunk": "@@ -250,213 +203,137 @@ public void readPersisted() {\n     }\n \n \n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // DecryptedDirectMessageListener\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public void onDirectMessage(DecryptedMessageWithPubKey message, NodeAddress peer) {\n+        NetworkEnvelope networkEnvelope = message.getNetworkEnvelope();\n+        if (networkEnvelope instanceof TakeOfferRequest) {\n+            handleTakeOfferRequest(peer, (TakeOfferRequest) networkEnvelope);\n+        }\n+    }\n+\n+    // The maker received a TakeOfferRequest\n+    private void handleTakeOfferRequest(NodeAddress peer, TakeOfferRequest takeOfferRequest) {\n+        log.info(\"Received TakeOfferRequest from {} with tradeId {} and uid {}\",\n+                peer, takeOfferRequest.getTradeId(), takeOfferRequest.getUid());\n+\n+        try {\n+            Validator.nonEmptyStringOf(takeOfferRequest.getTradeId());\n+        } catch (Throwable t) {\n+            log.warn(\"Invalid TakeOfferRequest \" + takeOfferRequest.toString());\n+            return;\n+        }\n+\n+        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(takeOfferRequest.getTradeId());\n+        if (!openOfferOptional.isPresent()) {\n+            return;\n+        }\n+\n+        OpenOffer openOffer = openOfferOptional.get();\n+        if (openOffer.getState() != OpenOffer.State.AVAILABLE) {\n+            return;\n+        }\n+\n+        Offer offer = openOffer.getOffer();\n+        openOfferManager.reserveOpenOffer(openOffer);\n+        Trade trade;\n+        if (offer.isBuyOffer()) {\n+            trade = new BuyerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        } else {\n+            trade = new SellerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        }\n+        TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);\n+        tradeProtocolByTradeId.put(trade.getId(), tradeProtocol);\n+        tradableList.add(trade);\n+        initTradeAndProtocol(trade, tradeProtocol);\n+\n+        ((MakerProtocol) tradeProtocol).handleTakeOfferRequest(takeOfferRequest, peer, errorMessage -> {\n+            if (takeOfferRequestErrorMessageHandler != null)\n+                takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);\n+        });\n+    }\n+\n+\n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // Lifecycle\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     public void onAllServicesInitialized() {\n-        if (p2PService.isBootstrapped())\n-            initPendingTrades();\n-        else\n+        if (p2PService.isBootstrapped()) {\n+            initPersistedTrades();\n+        } else {\n             p2PService.addP2PServiceListener(new BootstrapListener() {\n                 @Override\n                 public void onUpdatedDataReceived() {\n-                    // Get called after onMailboxMessageAdded from initial data request\n-                    // The mailbox message will be removed inside the tasks after they are processed successfully\n-                    initPendingTrades();\n+                    initPersistedTrades();\n                 }\n             });\n+        }\n \n-        tradableList.getList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n+        getTradesAsObservableList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n         onTradesChanged();\n \n-        getAddressEntriesForAvailableBalanceStream()\n+        btcWalletService.getAddressEntriesForAvailableBalanceStream()\n                 .filter(addressEntry -> addressEntry.getOfferId() != null)\n                 .forEach(addressEntry -> {\n                     log.warn(\"Swapping pending OFFER_FUNDING entries at startup. offerId={}\", addressEntry.getOfferId());\n                     btcWalletService.swapTradeEntryToAvailableEntry(addressEntry.getOfferId(), AddressEntry.Context.OFFER_FUNDING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MjUzNg==", "bodyText": "It was old code as well and I was wondering as well if its really needed. But did not want to risk to remove it or spend more time to think about the context. Not sure I can add a meaningful comment without starting to look more closely into it why it was added. I think it is a just a cleanup if address entries have not been swapped as intended in some error cases... We dont want that BitcoinJ creates too many addresses as it makes the wallet slower.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496282536", "createdAt": "2020-09-28T23:03:50Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "diffHunk": "@@ -250,213 +203,137 @@ public void readPersisted() {\n     }\n \n \n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // DecryptedDirectMessageListener\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public void onDirectMessage(DecryptedMessageWithPubKey message, NodeAddress peer) {\n+        NetworkEnvelope networkEnvelope = message.getNetworkEnvelope();\n+        if (networkEnvelope instanceof TakeOfferRequest) {\n+            handleTakeOfferRequest(peer, (TakeOfferRequest) networkEnvelope);\n+        }\n+    }\n+\n+    // The maker received a TakeOfferRequest\n+    private void handleTakeOfferRequest(NodeAddress peer, TakeOfferRequest takeOfferRequest) {\n+        log.info(\"Received TakeOfferRequest from {} with tradeId {} and uid {}\",\n+                peer, takeOfferRequest.getTradeId(), takeOfferRequest.getUid());\n+\n+        try {\n+            Validator.nonEmptyStringOf(takeOfferRequest.getTradeId());\n+        } catch (Throwable t) {\n+            log.warn(\"Invalid TakeOfferRequest \" + takeOfferRequest.toString());\n+            return;\n+        }\n+\n+        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(takeOfferRequest.getTradeId());\n+        if (!openOfferOptional.isPresent()) {\n+            return;\n+        }\n+\n+        OpenOffer openOffer = openOfferOptional.get();\n+        if (openOffer.getState() != OpenOffer.State.AVAILABLE) {\n+            return;\n+        }\n+\n+        Offer offer = openOffer.getOffer();\n+        openOfferManager.reserveOpenOffer(openOffer);\n+        Trade trade;\n+        if (offer.isBuyOffer()) {\n+            trade = new BuyerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        } else {\n+            trade = new SellerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        }\n+        TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);\n+        tradeProtocolByTradeId.put(trade.getId(), tradeProtocol);\n+        tradableList.add(trade);\n+        initTradeAndProtocol(trade, tradeProtocol);\n+\n+        ((MakerProtocol) tradeProtocol).handleTakeOfferRequest(takeOfferRequest, peer, errorMessage -> {\n+            if (takeOfferRequestErrorMessageHandler != null)\n+                takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);\n+        });\n+    }\n+\n+\n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // Lifecycle\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     public void onAllServicesInitialized() {\n-        if (p2PService.isBootstrapped())\n-            initPendingTrades();\n-        else\n+        if (p2PService.isBootstrapped()) {\n+            initPersistedTrades();\n+        } else {\n             p2PService.addP2PServiceListener(new BootstrapListener() {\n                 @Override\n                 public void onUpdatedDataReceived() {\n-                    // Get called after onMailboxMessageAdded from initial data request\n-                    // The mailbox message will be removed inside the tasks after they are processed successfully\n-                    initPendingTrades();\n+                    initPersistedTrades();\n                 }\n             });\n+        }\n \n-        tradableList.getList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n+        getTradesAsObservableList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n         onTradesChanged();\n \n-        getAddressEntriesForAvailableBalanceStream()\n+        btcWalletService.getAddressEntriesForAvailableBalanceStream()\n                 .filter(addressEntry -> addressEntry.getOfferId() != null)\n                 .forEach(addressEntry -> {\n                     log.warn(\"Swapping pending OFFER_FUNDING entries at startup. offerId={}\", addressEntry.getOfferId());\n                     btcWalletService.swapTradeEntryToAvailableEntry(addressEntry.getOfferId(), AddressEntry.Context.OFFER_FUNDING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjM0NQ=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM4Mjg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMzowM1rOHY7fqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzowNToxNFrOHZStbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjYzNA==", "bodyText": "Why change the copyright notice?", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495902634", "createdAt": "2020-09-28T12:33:03Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n  * License for more details.\n  *\n- * You should have received a copy of the GNU Affero General Public License\n+ * You should have with a copy of the GNU Affero General Public License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4Mjk4OQ==", "bodyText": "Ups, that was from some replace all, I guess. Will revert it.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496282989", "createdAt": "2020-09-28T23:05:14Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n  * License for more details.\n  *\n- * You should have received a copy of the GNU Affero General Public License\n+ * You should have with a copy of the GNU Affero General Public License", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjYzNA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDcwODI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0ODowMVrOHY-jFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzowODoxNlrOHZSw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjY2MA==", "bodyText": "Might want to return early to avoid large blocks", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495952660", "createdAt": "2020-09-28T13:48:01Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.taskrunner.Task;\n+\n+import java.text.MessageFormat;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.core.util.Validator.isTradeIdValid;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+// Main class. Contains the condition and setup, if condition is valid it will execute the\n+// taskRunner and the optional runnable.\n+public class FluentProtocol {\n+\n+\n+    interface Event {\n+        String name();\n+    }\n+\n+    private final TradeProtocol tradeProtocol;\n+    private Condition condition;\n+    private Setup setup;\n+    private Consumer<Condition.Result> resultHandler;\n+\n+    public FluentProtocol(TradeProtocol tradeProtocol) {\n+        this.tradeProtocol = tradeProtocol;\n+    }\n+\n+    protected FluentProtocol condition(Condition condition) {\n+        this.condition = condition;\n+        return this;\n+    }\n+\n+    protected FluentProtocol setup(Setup setup) {\n+        this.setup = setup;\n+        return this;\n+    }\n+\n+\n+    public FluentProtocol resultHandler(Consumer<Condition.Result> resultHandler) {\n+        this.resultHandler = resultHandler;\n+        return this;\n+    }\n+\n+    // Can be used before or after executeTasks\n+    public FluentProtocol run(Runnable runnable) {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            runnable.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+    public FluentProtocol executeTasks() {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4Mzg4Mw==", "bodyText": "Ok. Will change.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496283883", "createdAt": "2020-09-28T23:08:16Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.taskrunner.Task;\n+\n+import java.text.MessageFormat;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.core.util.Validator.isTradeIdValid;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+// Main class. Contains the condition and setup, if condition is valid it will execute the\n+// taskRunner and the optional runnable.\n+public class FluentProtocol {\n+\n+\n+    interface Event {\n+        String name();\n+    }\n+\n+    private final TradeProtocol tradeProtocol;\n+    private Condition condition;\n+    private Setup setup;\n+    private Consumer<Condition.Result> resultHandler;\n+\n+    public FluentProtocol(TradeProtocol tradeProtocol) {\n+        this.tradeProtocol = tradeProtocol;\n+    }\n+\n+    protected FluentProtocol condition(Condition condition) {\n+        this.condition = condition;\n+        return this;\n+    }\n+\n+    protected FluentProtocol setup(Setup setup) {\n+        this.setup = setup;\n+        return this;\n+    }\n+\n+\n+    public FluentProtocol resultHandler(Consumer<Condition.Result> resultHandler) {\n+        this.resultHandler = resultHandler;\n+        return this;\n+    }\n+\n+    // Can be used before or after executeTasks\n+    public FluentProtocol run(Runnable runnable) {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            runnable.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+    public FluentProtocol executeTasks() {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjY2MA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc1OTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1ODo0NVrOHY_CMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1ODo0NVrOHY_CMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MDYyNw==", "bodyText": "Could return early for non null taskRunner...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495960627", "createdAt": "2020-09-28T13:58:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.taskrunner.Task;\n+\n+import java.text.MessageFormat;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.core.util.Validator.isTradeIdValid;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+// Main class. Contains the condition and setup, if condition is valid it will execute the\n+// taskRunner and the optional runnable.\n+public class FluentProtocol {\n+\n+\n+    interface Event {\n+        String name();\n+    }\n+\n+    private final TradeProtocol tradeProtocol;\n+    private Condition condition;\n+    private Setup setup;\n+    private Consumer<Condition.Result> resultHandler;\n+\n+    public FluentProtocol(TradeProtocol tradeProtocol) {\n+        this.tradeProtocol = tradeProtocol;\n+    }\n+\n+    protected FluentProtocol condition(Condition condition) {\n+        this.condition = condition;\n+        return this;\n+    }\n+\n+    protected FluentProtocol setup(Setup setup) {\n+        this.setup = setup;\n+        return this;\n+    }\n+\n+\n+    public FluentProtocol resultHandler(Consumer<Condition.Result> resultHandler) {\n+        this.resultHandler = resultHandler;\n+        return this;\n+    }\n+\n+    // Can be used before or after executeTasks\n+    public FluentProtocol run(Runnable runnable) {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            runnable.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+    public FluentProtocol executeTasks() {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            if (setup.getTimeoutSec() > 0) {\n+                tradeProtocol.startTimeout(setup.getTimeoutSec());\n+            }\n+\n+            NodeAddress peer = condition.getPeer();\n+            if (peer != null) {\n+                tradeProtocol.processModel.setTempTradingPeerNodeAddress(peer);\n+            }\n+\n+            TradeMessage message = condition.getMessage();\n+            if (message != null) {\n+                tradeProtocol.processModel.setTradeMessage(message);\n+            }\n+\n+            TradeTaskRunner taskRunner = setup.getTaskRunner(message, condition.getEvent());\n+            taskRunner.addTasks(setup.getTasks());\n+            taskRunner.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Condition class\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Slf4j\n+    public static class Condition {\n+        enum Result {\n+            VALID(true),\n+            INVALID_PHASE,\n+            INVALID_STATE,\n+            INVALID_PRE_CONDITION,\n+            INVALID_TRADE_ID;\n+\n+            @Getter\n+            private boolean isValid;\n+            @Getter\n+            private String info;\n+\n+            Result() {\n+            }\n+\n+            Result(boolean isValid) {\n+                this.isValid = isValid;\n+            }\n+\n+            public Result info(String info) {\n+                this.info = info;\n+                return this;\n+            }\n+        }\n+\n+        private final Set<Trade.Phase> expectedPhases = new HashSet<>();\n+        private final Set<Trade.State> expectedStates = new HashSet<>();\n+        private final Set<Boolean> preConditions = new HashSet<>();\n+        private final Trade trade;\n+        @Nullable\n+        private Result result;\n+\n+        @Nullable\n+        @Getter\n+        private TradeMessage message;\n+        @Nullable\n+        @Getter\n+        private Event event;\n+        @Nullable\n+        @Getter\n+        private NodeAddress peer;\n+        @Nullable\n+        private Runnable preConditionFailedHandler;\n+\n+\n+        public Condition(Trade trade) {\n+            this.trade = trade;\n+        }\n+\n+        public Condition phase(Trade.Phase expectedPhase) {\n+            checkArgument(result == null);\n+            this.expectedPhases.add(expectedPhase);\n+            return this;\n+        }\n+\n+        public Condition anyPhase(Trade.Phase... expectedPhases) {\n+            checkArgument(result == null);\n+            this.expectedPhases.addAll(Set.of(expectedPhases));\n+            return this;\n+        }\n+\n+        public Condition state(Trade.State state) {\n+            checkArgument(result == null);\n+            this.expectedStates.add(state);\n+            return this;\n+        }\n+\n+        public Condition anyState(Trade.State... states) {\n+            checkArgument(result == null);\n+            this.expectedStates.addAll(Set.of(states));\n+            return this;\n+        }\n+\n+        public Condition with(TradeMessage message) {\n+            checkArgument(result == null);\n+            this.message = message;\n+            return this;\n+        }\n+\n+        public Condition with(Event event) {\n+            checkArgument(result == null);\n+            this.event = event;\n+            return this;\n+        }\n+\n+        public Condition from(NodeAddress peer) {\n+            checkArgument(result == null);\n+            this.peer = peer;\n+            return this;\n+        }\n+\n+        public Condition preCondition(boolean preCondition) {\n+            checkArgument(result == null);\n+            preConditions.add(preCondition);\n+            return this;\n+        }\n+\n+        public Condition preCondition(boolean preCondition, Runnable conditionFailedHandler) {\n+            checkArgument(result == null);\n+            preCondition(preCondition);\n+\n+            this.preConditionFailedHandler = conditionFailedHandler;\n+            return this;\n+        }\n+\n+        public Result getResult() {\n+            if (result == null) {\n+                boolean isTradeIdValid = message == null || isTradeIdValid(trade.getId(), message);\n+                if (!isTradeIdValid) {\n+                    String info = MessageFormat.format(\"TradeId does not match tradeId in message, TradeId={0}, tradeId in message={1}\",\n+                            trade.getId(), message.getTradeId());\n+                    result = Result.INVALID_TRADE_ID.info(info);\n+                    return result;\n+                }\n+\n+\n+                Result phaseValidationResult = getPhaseResult();\n+                if (!phaseValidationResult.isValid) {\n+                    result = phaseValidationResult;\n+                    return result;\n+                }\n+\n+                Result stateResult = getStateResult();\n+                if (!stateResult.isValid) {\n+                    result = stateResult;\n+                    return result;\n+                }\n+\n+                boolean allPreConditionsMet = preConditions.stream().allMatch(e -> e);\n+                if (!allPreConditionsMet) {\n+                    String info = MessageFormat.format(\"PreConditions not met. preConditions={0}, this={1}, tradeId={2}\",\n+                            preConditions, this, trade.getId());\n+                    result = Result.INVALID_PRE_CONDITION.info(info);\n+\n+                    if (preConditionFailedHandler != null) {\n+                        preConditionFailedHandler.run();\n+                    }\n+                    return result;\n+                }\n+\n+                result = Result.VALID;\n+            }\n+            return result;\n+        }\n+\n+        private Result getPhaseResult() {\n+            if (expectedPhases.isEmpty()) {\n+                return Result.VALID;\n+            }\n+\n+            boolean isPhaseValid = expectedPhases.stream().anyMatch(e -> e == trade.getPhase());\n+            String trigger = message != null ?\n+                    message.getClass().getSimpleName() :\n+                    event != null ?\n+                            event.name() + \" event\" :\n+                            \"\";\n+            if (isPhaseValid) {\n+                String info = MessageFormat.format(\"We received a {0} at phase {1} and state {2}, tradeId={3}\",\n+                        trigger,\n+                        trade.getPhase(),\n+                        trade.getState(),\n+                        trade.getId());\n+                log.info(info);\n+                return Result.VALID.info(info);\n+            } else {\n+                String info = MessageFormat.format(\"We received a {0} but we are are not in the expected phase. \" +\n+                                \"Expected phases={1}, Trade phase={2}, Trade state= {3}, tradeId={4}\",\n+                        trigger,\n+                        expectedPhases,\n+                        trade.getPhase(),\n+                        trade.getState(),\n+                        trade.getId());\n+                return Result.INVALID_PHASE.info(info);\n+            }\n+        }\n+\n+        private Result getStateResult() {\n+            if (expectedStates.isEmpty()) {\n+                return Result.VALID;\n+            }\n+\n+            boolean isStateValid = expectedStates.stream().anyMatch(e -> e == trade.getState());\n+            String trigger = message != null ?\n+                    message.getClass().getSimpleName() :\n+                    event != null ?\n+                            event.name() + \" event\" :\n+                            \"\";\n+            if (isStateValid) {\n+                String info = MessageFormat.format(\"We received a {0} at state {1}, tradeId={2}\",\n+                        trigger,\n+                        trade.getState(),\n+                        trade.getId());\n+                log.info(info);\n+                return Result.VALID.info(info);\n+            } else {\n+                String info = MessageFormat.format(\"We received a {0} but we are are not in the expected state. \" +\n+                                \"Expected states={1}, Trade state= {2}, tradeId={3}\",\n+                        trigger,\n+                        expectedStates,\n+                        trade.getState(),\n+                        trade.getId());\n+                return Result.INVALID_STATE.info(info);\n+            }\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Setup class\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Slf4j\n+    public static class Setup {\n+        private final TradeProtocol tradeProtocol;\n+        private final Trade trade;\n+        @Getter\n+        private Class<? extends Task<Trade>>[] tasks;\n+        @Getter\n+        private int timeoutSec;\n+        @Nullable\n+        private TradeTaskRunner taskRunner;\n+\n+        public Setup(TradeProtocol tradeProtocol, Trade trade) {\n+            this.tradeProtocol = tradeProtocol;\n+            this.trade = trade;\n+        }\n+\n+        @SafeVarargs\n+        public final Setup tasks(Class<? extends Task<Trade>>... tasks) {\n+            this.tasks = tasks;\n+            return this;\n+        }\n+\n+        public Setup withTimeout(int timeoutSec) {\n+            this.timeoutSec = timeoutSec;\n+            return this;\n+        }\n+\n+        public Setup using(TradeTaskRunner taskRunner) {\n+            this.taskRunner = taskRunner;\n+            return this;\n+        }\n+\n+        public TradeTaskRunner getTaskRunner(@Nullable TradeMessage message, @Nullable Event event) {\n+            if (taskRunner == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc5OTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsTakerProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDowNjo1MVrOHY_aUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDowNjo1MVrOHY_aUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NjgwMA==", "bodyText": "Changed copyright text", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495966800", "createdAt": "2020-09-28T14:06:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsTakerProtocol.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n  * License for more details.\n  *\n- * You should have received a copy of the GNU Affero General Public License\n+ * You should have with a copy of the GNU Affero General Public License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk1MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOTo1MFrOHZA3Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOTo1MFrOHZA3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDU4Nw==", "bodyText": "Should DEPOSIT_PUBLISHED really be expected? I thought deposit would only be published after this message was acked.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495990587", "createdAt": "2020-09-28T14:39:50Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk1NTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MDozMlrOHZA5UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MDozMlrOHZA5UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTEyMA==", "bodyText": "This log is quite odd, We with a...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495991120", "createdAt": "2020-09-28T14:40:32Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)\n+                .with(message)\n+                .from(peer)\n+                .preCondition(trade.getDepositTx() == null || trade.getDelayedPayoutTx() == null,\n+                        () -> {\n+                            log.warn(\"We with a DepositTxAndDelayedPayoutTxMessage but we have already processed the deposit and \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTA0NDcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1NTo1NFrOHZBupQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1NTo1NFrOHZBupQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNDc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496004773", "createdAt": "2020-09-28T14:55:54Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)\n+                .with(message)\n+                .from(peer)\n+                .preCondition(trade.getDepositTx() == null || trade.getDelayedPayoutTx() == null,\n+                        () -> {\n+                            log.warn(\"We with a DepositTxAndDelayedPayoutTxMessage but we have already processed the deposit and \" +\n+                                    \"delayed payout tx so we ignore the message. This can happen if the ACK message to the peer did not \" +\n+                                    \"arrive and the peer repeats sending us the message. We send another ACK msg.\");\n+                            stopTimeout();\n+                            sendAckMessage(message, true, null);\n+                            removeMailboxMessageAfterProcessing(message);\n+                        }))\n+                .setup(tasks(BuyerProcessDepositTxAndDelayedPayoutTxMessage.class,\n+                        BuyerVerifiesFinalDelayedPayoutTx.class,\n+                        PublishTradeStatistics.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    stopTimeout();\n+                                    handleTaskRunnerSuccess(message);\n+                                },\n+                                errorMessage -> handleTaskRunnerFault(message, errorMessage))))\n+                .run(() -> processModel.witnessDebugLog(trade))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // User interaction\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void onPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        BuyerEvent event = BuyerEvent.PAYMENT_SENT;\n+        expect(phase(Trade.Phase.DEPOSIT_CONFIRMED)\n+                .with(event)\n+                .preCondition(notDisputed()))\n+                .setup(tasks(ApplyFilter.class,\n+                        getVerifyPeersFeePaymentClass(),\n+                        BuyerSignPayoutTx.class,\n+                        BuyerSetupPayoutTxListener.class,\n+                        BuyerSendCounterCurrencyTransferStartedMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                (errorMessage) -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .run(() -> trade.setState(Trade.State.BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Incoming message Payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    protected void handle(PayoutTxPublishedMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.PAYOUT_PUBLISHED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(BuyerProcessPayoutTxPublishedMessage.class))\n+                .executeTasks();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTA2NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1ODozNFrOHZB60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1ODozNFrOHZB60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNzg5MQ==", "bodyText": "ARBITRATION generally refers to legacy arbitration in code. REFUND is what's been used everywhere for refund cases.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496007891", "createdAt": "2020-09-28T14:58:34Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.MediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.messages.MediatedPayoutTxSignatureMessage;\n+import bisq.core.trade.messages.PeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.ProcessPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.arbitration.PublishedDelayedPayoutTx;\n+import bisq.core.trade.protocol.tasks.arbitration.SendPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.mediation.BroadcastMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.FinalizeMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SetupMediatedPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.mediation.SignMediatedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.handlers.ErrorMessageHandler;\n+import bisq.common.handlers.ResultHandler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class DisputeProtocol extends TradeProtocol {\n+\n+    enum DisputeEvent implements FluentProtocol.Event {\n+        MEDIATION_RESULT_ACCEPTED,\n+        MEDIATION_RESULT_REJECTED,\n+        ARBITRATION_REQUESTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTEzMjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowNzoxNVrOHZCjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowNzoxNVrOHZCjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxODIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (message instanceof MediatedPayoutTxSignatureMessage) {\n          \n          \n            \n                        handle((MediatedPayoutTxSignatureMessage) message, peer);\n          \n          \n            \n                    } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n          \n          \n            \n                        handle((MediatedPayoutTxPublishedMessage) message, peer);\n          \n          \n            \n                    } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n          \n          \n            \n                        handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n          \n          \n            \n                    }\n          \n          \n            \n                    onTradeMessage(message, peer);", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496018211", "createdAt": "2020-09-28T15:07:15Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.MediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.messages.MediatedPayoutTxSignatureMessage;\n+import bisq.core.trade.messages.PeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.ProcessPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.arbitration.PublishedDelayedPayoutTx;\n+import bisq.core.trade.protocol.tasks.arbitration.SendPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.mediation.BroadcastMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.FinalizeMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SetupMediatedPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.mediation.SignMediatedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.handlers.ErrorMessageHandler;\n+import bisq.common.handlers.ResultHandler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class DisputeProtocol extends TradeProtocol {\n+\n+    enum DisputeEvent implements FluentProtocol.Event {\n+        MEDIATION_RESULT_ACCEPTED,\n+        MEDIATION_RESULT_REJECTED,\n+        ARBITRATION_REQUESTED\n+    }\n+\n+    public DisputeProtocol(Trade trade) {\n+        super(trade);\n+    }\n+\n+    protected boolean notDisputed() {\n+        return trade.getDisputeState() == Trade.DisputeState.NO_DISPUTE;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // User interaction: Trader accepts mediation result\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    // Trader has not yet received the peer's signature but has clicked the accept button.\n+    public void onAcceptMediationResult(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.MEDIATION_RESULT_ACCEPTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getProcessModel().getTradingPeer().getMediatedPayoutTxSignature() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"We have received already the signature from the peer.\"))\n+                .preCondition(trade.getPayoutTx() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"Payout tx is already published.\")))\n+                .setup(tasks(ApplyFilter.class,\n+                        SignMediatedPayoutTx.class,\n+                        SendMediatedPayoutSignatureMessage.class,\n+                        SetupMediatedPayoutTxListener.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+    // Trader has already received the peer's signature and has clicked the accept button as well.\n+    public void onFinalizeMediationResultPayout(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.MEDIATION_RESULT_ACCEPTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getPayoutTx() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"Payout tx is already published.\")))\n+                .setup(tasks(ApplyFilter.class,\n+                        SignMediatedPayoutTx.class,\n+                        FinalizeMediatedPayoutTx.class,\n+                        BroadcastMediatedPayoutTx.class,\n+                        SendMediatedPayoutTxPublishedMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Mediation: incoming message\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    protected void handle(MediatedPayoutTxSignatureMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessMediatedPayoutSignatureMessage.class))\n+                .executeTasks();\n+    }\n+\n+    protected void handle(MediatedPayoutTxPublishedMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessMediatedPayoutTxPublishedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Delayed payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void onPublishDelayedPayoutTx(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.ARBITRATION_REQUESTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getDelayedPayoutTx() != null))\n+                .setup(tasks(PublishedDelayedPayoutTx.class,\n+                        SendPeerPublishedDelayedPayoutTxMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Peer has published the delayed payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private void handle(PeerPublishedDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessPeerPublishedDelayedPayoutTxMessage.class))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Dispatcher\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    protected void onTradeMessage(TradeMessage message, NodeAddress peer) {\n+        if (message instanceof MediatedPayoutTxSignatureMessage) {\n+            handle((MediatedPayoutTxSignatureMessage) message, peer);\n+        } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n+            handle((MediatedPayoutTxPublishedMessage) message, peer);\n+        } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n+            handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n+        }\n+    }\n+\n+    @Override\n+    protected void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+        if (message instanceof MediatedPayoutTxSignatureMessage) {\n+            handle((MediatedPayoutTxSignatureMessage) message, peer);\n+        } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n+            handle((MediatedPayoutTxPublishedMessage) message, peer);\n+        } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n+            handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM2NzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/SendMailboxMessageTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0OToxNFrOHZEy1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0OToxNFrOHZEy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NDk5Ng==", "bodyText": "Could default these to {}", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496054996", "createdAt": "2020-09-28T15:49:14Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/SendMailboxMessageTask.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol.tasks;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+import bisq.network.p2p.SendMailboxMessageListener;\n+\n+import bisq.common.taskrunner.TaskRunner;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class SendMailboxMessageTask extends TradeTask {\n+    public SendMailboxMessageTask(TaskRunner<Trade> taskHandler, Trade trade) {\n+        super(taskHandler, trade);\n+    }\n+\n+    protected abstract TradeMessage getMessage(String id);\n+\n+    protected abstract void setStateSent();\n+\n+    protected abstract void setStateArrived();\n+\n+    protected abstract void setStateStoredInMailbox();\n+\n+    protected abstract void setStateFault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQ0NjMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/ProcessModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowNzo0OVrOHZFj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNzozMlrOHZsp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzU0Nw==", "bodyText": "This is not new in this PR, but would be better named getMyPaymentAccountPayload", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496067547", "createdAt": "2020-09-28T16:07:49Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/ProcessModel.java", "diffHunk": "@@ -305,59 +266,118 @@ public void setTakeOfferFeeTx(Transaction takeOfferFeeTx) {\n     public PaymentAccountPayload getPaymentAccountPayload(Trade trade) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwODA5Mg==", "bodyText": "ProcessModel always contains my data, if its peers data its in the tradingPeer model.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496708092", "createdAt": "2020-09-29T13:17:32Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/ProcessModel.java", "diffHunk": "@@ -305,59 +266,118 @@ public void setTakeOfferFeeTx(Transaction takeOfferFeeTx) {\n     public PaymentAccountPayload getPaymentAccountPayload(Trade trade) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzU0Nw=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQ0OTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/maker/MakerProcessesInputsForDepositTxRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowODo0NVrOHZFl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzowOToxNFrOHZSyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // message bu that cannot be changed due backward compatibility issues. It is a left over from the\n          \n          \n            \n                        // message but that cannot be changed due backward compatibility issues. It is a left over from the", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496068073", "createdAt": "2020-09-28T16:08:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/maker/MakerProcessesInputsForDepositTxRequest.java", "diffHunk": "@@ -43,44 +43,48 @@\n \n @Slf4j\n public class MakerProcessesInputsForDepositTxRequest extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public MakerProcessesInputsForDepositTxRequest(TaskRunner taskHandler, Trade trade) {\n+    public MakerProcessesInputsForDepositTxRequest(TaskRunner<Trade> taskHandler, Trade trade) {\n         super(taskHandler, trade);\n     }\n \n     @Override\n     protected void run() {\n         try {\n             runInterceptHook();\n-            log.debug(\"current trade state \" + trade.getState());\n-            InputsForDepositTxRequest inputsForDepositTxRequest = (InputsForDepositTxRequest) processModel.getTradeMessage();\n-            checkNotNull(inputsForDepositTxRequest);\n-            checkTradeId(processModel.getOfferId(), inputsForDepositTxRequest);\n+            TakeOfferRequest request = (TakeOfferRequest) processModel.getTradeMessage();\n+            checkNotNull(request);\n+            checkTradeId(processModel.getOfferId(), request);\n \n-            final TradingPeer tradingPeer = processModel.getTradingPeer();\n-            tradingPeer.setPaymentAccountPayload(checkNotNull(inputsForDepositTxRequest.getTakerPaymentAccountPayload()));\n-            tradingPeer.setRawTransactionInputs(checkNotNull(inputsForDepositTxRequest.getRawTransactionInputs()));\n-            checkArgument(inputsForDepositTxRequest.getRawTransactionInputs().size() > 0);\n+            TradingPeer tradingPeer = processModel.getTradingPeer();\n+            tradingPeer.setPaymentAccountPayload(checkNotNull(request.getTakerPaymentAccountPayload()));\n+            tradingPeer.setRawTransactionInputs(checkNotNull(request.getRawTransactionInputs()));\n+            checkArgument(request.getRawTransactionInputs().size() > 0);\n \n-            tradingPeer.setChangeOutputValue(inputsForDepositTxRequest.getChangeOutputValue());\n-            tradingPeer.setChangeOutputAddress(inputsForDepositTxRequest.getChangeOutputAddress());\n+            tradingPeer.setChangeOutputValue(request.getChangeOutputValue());\n+            tradingPeer.setChangeOutputAddress(request.getChangeOutputAddress());\n \n-            tradingPeer.setMultiSigPubKey(checkNotNull(inputsForDepositTxRequest.getTakerMultiSigPubKey()));\n-            tradingPeer.setPayoutAddressString(nonEmptyStringOf(inputsForDepositTxRequest.getTakerPayoutAddressString()));\n-            tradingPeer.setPubKeyRing(checkNotNull(inputsForDepositTxRequest.getTakerPubKeyRing()));\n+            tradingPeer.setMultiSigPubKey(checkNotNull(request.getTakerMultiSigPubKey()));\n+            tradingPeer.setPayoutAddressString(nonEmptyStringOf(request.getTakerPayoutAddressString()));\n+            tradingPeer.setPubKeyRing(checkNotNull(request.getTakerPubKeyRing()));\n \n-            tradingPeer.setAccountId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerAccountId()));\n-            trade.setTakerFeeTxId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerFeeTxId()));\n+            tradingPeer.setAccountId(nonEmptyStringOf(request.getTakerAccountId()));\n \n-            // Taker has to sign offerId (he cannot manipulate that - so we avoid to have a challenge protocol for passing the nonce we want to get signed)\n+            // We set the taker fee only in the processModel yet not in the trade as the tx was only created but not\n+            // published yet. Once it was published we move it to trade. The takerFeeTx should be sent in a later\n+            // message bu that cannot be changed due backward compatibility issues. It is a left over from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NDE5MA==", "bodyText": "Will fix it..", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496284190", "createdAt": "2020-09-28T23:09:14Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/maker/MakerProcessesInputsForDepositTxRequest.java", "diffHunk": "@@ -43,44 +43,48 @@\n \n @Slf4j\n public class MakerProcessesInputsForDepositTxRequest extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public MakerProcessesInputsForDepositTxRequest(TaskRunner taskHandler, Trade trade) {\n+    public MakerProcessesInputsForDepositTxRequest(TaskRunner<Trade> taskHandler, Trade trade) {\n         super(taskHandler, trade);\n     }\n \n     @Override\n     protected void run() {\n         try {\n             runInterceptHook();\n-            log.debug(\"current trade state \" + trade.getState());\n-            InputsForDepositTxRequest inputsForDepositTxRequest = (InputsForDepositTxRequest) processModel.getTradeMessage();\n-            checkNotNull(inputsForDepositTxRequest);\n-            checkTradeId(processModel.getOfferId(), inputsForDepositTxRequest);\n+            TakeOfferRequest request = (TakeOfferRequest) processModel.getTradeMessage();\n+            checkNotNull(request);\n+            checkTradeId(processModel.getOfferId(), request);\n \n-            final TradingPeer tradingPeer = processModel.getTradingPeer();\n-            tradingPeer.setPaymentAccountPayload(checkNotNull(inputsForDepositTxRequest.getTakerPaymentAccountPayload()));\n-            tradingPeer.setRawTransactionInputs(checkNotNull(inputsForDepositTxRequest.getRawTransactionInputs()));\n-            checkArgument(inputsForDepositTxRequest.getRawTransactionInputs().size() > 0);\n+            TradingPeer tradingPeer = processModel.getTradingPeer();\n+            tradingPeer.setPaymentAccountPayload(checkNotNull(request.getTakerPaymentAccountPayload()));\n+            tradingPeer.setRawTransactionInputs(checkNotNull(request.getRawTransactionInputs()));\n+            checkArgument(request.getRawTransactionInputs().size() > 0);\n \n-            tradingPeer.setChangeOutputValue(inputsForDepositTxRequest.getChangeOutputValue());\n-            tradingPeer.setChangeOutputAddress(inputsForDepositTxRequest.getChangeOutputAddress());\n+            tradingPeer.setChangeOutputValue(request.getChangeOutputValue());\n+            tradingPeer.setChangeOutputAddress(request.getChangeOutputAddress());\n \n-            tradingPeer.setMultiSigPubKey(checkNotNull(inputsForDepositTxRequest.getTakerMultiSigPubKey()));\n-            tradingPeer.setPayoutAddressString(nonEmptyStringOf(inputsForDepositTxRequest.getTakerPayoutAddressString()));\n-            tradingPeer.setPubKeyRing(checkNotNull(inputsForDepositTxRequest.getTakerPubKeyRing()));\n+            tradingPeer.setMultiSigPubKey(checkNotNull(request.getTakerMultiSigPubKey()));\n+            tradingPeer.setPayoutAddressString(nonEmptyStringOf(request.getTakerPayoutAddressString()));\n+            tradingPeer.setPubKeyRing(checkNotNull(request.getTakerPubKeyRing()));\n \n-            tradingPeer.setAccountId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerAccountId()));\n-            trade.setTakerFeeTxId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerFeeTxId()));\n+            tradingPeer.setAccountId(nonEmptyStringOf(request.getTakerAccountId()));\n \n-            // Taker has to sign offerId (he cannot manipulate that - so we avoid to have a challenge protocol for passing the nonce we want to get signed)\n+            // We set the taker fee only in the processModel yet not in the trade as the tx was only created but not\n+            // published yet. Once it was published we move it to trade. The takerFeeTx should be sent in a later\n+            // message bu that cannot be changed due backward compatibility issues. It is a left over from the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODA3Mw=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQ4NzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoxNzozMFrOHZF8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzoxMDowMFrOHZSzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MzgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * buyer does not has the delayed payout tx and would not be able to open arbitration.\n          \n          \n            \n             * buyer does not have the delayed payout tx and would not be able to open arbitration.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496073838", "createdAt": "2020-09-28T16:17:30Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NDQxOA==", "bodyText": "Will fix it.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496284418", "createdAt": "2020-09-28T23:10:00Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MzgzOA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTUwMDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoyMDo1MVrOHZGEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzoxOTo0MVrOHZS-OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTkzMA==", "bodyText": "This is about 4 minutes until fail, I think that's too long, 5 resend attempts would be better in my opinion", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496075930", "createdAt": "2020-09-28T16:20:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {\n+    private static final int MAX_RESEND_ATTEMPTS = 7;\n+    private int delayInSec = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NzI4OA==", "bodyText": "If the peer had some network issues 1-2 minutes might be good. It is for extremely rare cases anyway and costs for sender are minimal, beside that he waits longer, but still better then a failed trade. But not super strong opinion either, just think we should be more on the safe side...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496287288", "createdAt": "2020-09-28T23:19:41Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {\n+    private static final int MAX_RESEND_ATTEMPTS = 7;\n+    private int delayInSec = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTkzMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTUwNzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoyMjozMVrOHZGI5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMzo0OFrOHZtZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA==", "bodyText": "This resend type class has a lot of duplicate code from BuyerSendCounterCurrencyTransferStartedMessage, could probably use a common base class, or helper class.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496077030", "createdAt": "2020-09-28T16:22:31Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTUxNA==", "bodyText": "The SendMailboxMessageTask base class is already handling most. The exta code for resend has some differences so the same part is not worth IMO to extract to another superclass. If you compate both classes you see that there are small differences.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496285514", "createdAt": "2020-09-28T23:13:46Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MTM0Ng==", "bodyText": "I get that a superclass might not fit well, but I think a helper class to encapsulate the resend code could help clean up the code, and perhaps there other cases where it would be useful.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496581346", "createdAt": "2020-09-29T09:40:07Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMDE0Nw==", "bodyText": "I think in that case its not worth it as there are small differences and would not make the code better readable if important parts are delegated to another class. If you like you can try it out and send me a patch, but I did a file compare and did not had the impression avoiding some code duplication justifies the higher complexity of distributed code. A part is already in the base class...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496710147", "createdAt": "2020-09-29T13:20:25Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMDE5Nw==", "bodyText": "Then I'll drop it. Main reason was to encapsulate the logic to not have to think about it twice. If we do one more resend message it will likely be worth it.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496720197", "createdAt": "2020-09-29T13:33:48Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA=="}, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzU5OTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTowNDoyMFrOHZaKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTowNDoyMFrOHZaKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwNTE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take that offer because you have taken it already earlier. \\\n          \n          \n            \n              It might be that the take offer attempt ended up in a failed trade.\n          \n          \n            \n            offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take this offer because you already took it earlier. \\\n          \n          \n            \n              It could be that your previous take-offer attempt resulted in a failed trade.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496405169", "createdAt": "2020-09-29T05:04:20Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -408,7 +408,8 @@ offerbook.warning.tradeLimitNotMatching=Your payment account has been created {0\n   Your trade limit is: {1}\\n\\\n   The min. trade amount of the offer is: {2}.\\n\\n\\\n   You cannot take that offer at the moment. Once your account is older than 2 months this restriction gets removed.\n-\n+offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take that offer because you have taken it already earlier. \\\n+  It might be that the take offer attempt ended up in a failed trade.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzYxOTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTowOToyNFrOHZaYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTowOToyNFrOHZaYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwODcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n          \n          \n            \n              developers at 'https://bisq.community' or the Keybase channel for further assistance.\\n\\n\\\n          \n          \n            \n              Error message: {0}\n          \n          \n            \n            portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the fiat or altcoin payment. Contact Bisq \\\n          \n          \n            \n              developers on Keybase (https://keybase.io/team/bisq) or on the \\\n          \n          \n            \n              forum (https://bisq.community) for further assistance.\\n\\n\\\n          \n          \n            \n              Error message: {0}\n          \n      \n    \n    \n  \n\nLowercased letters and added Keybase URL.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496408703", "createdAt": "2020-09-29T05:09:24Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -560,9 +561,10 @@ portfolio.tab.history=History\n portfolio.tab.failed=Failed\n portfolio.tab.editOpenOffer=Edit offer\n \n-portfolio.pending.invalidDelayedPayoutTx=Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n-  developers at 'https://bisq.community' or the Keybase channel.\\n\\n\\\n-  {0}\n+portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n+  Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n+  developers at 'https://bisq.community' or the Keybase channel for further assistance.\\n\\n\\\n+  Error message: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzYyMzkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMDoyMVrOHZabVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMDoyMVrOHZabVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwOTQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              trade to the failed trades.\n          \n          \n            \n              trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496409429", "createdAt": "2020-09-29T05:10:21Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -830,10 +832,10 @@ portfolio.pending.timeLockNotOver=You have to wait until \u2248{0} ({1} more blocks\n portfolio.pending.error.depositTxNull=The deposit transaction is null. You cannot open a dispute \\\n   without a valid deposit transaction. Please go to \\\"Settings/Network info\\\" and do a SPV resync.\\n\\n\\\n   For further help please contact the Bisq support channel at the Bisq Keybase team.\n-portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. The trade gets moved to the \\\n-  failed trades section.\n-portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. The trade gets \\\n-   moved to the failed trades section.\n+portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. You can move the \\\n+  trade to the failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzYyNDQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMDozMFrOHZabvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMDozMFrOHZabvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwOTUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              trade to the failed trades.\n          \n          \n            \n              trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496409535", "createdAt": "2020-09-29T05:10:30Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -830,10 +832,10 @@ portfolio.pending.timeLockNotOver=You have to wait until \u2248{0} ({1} more blocks\n portfolio.pending.error.depositTxNull=The deposit transaction is null. You cannot open a dispute \\\n   without a valid deposit transaction. Please go to \\\"Settings/Network info\\\" and do a SPV resync.\\n\\n\\\n   For further help please contact the Bisq support channel at the Bisq Keybase team.\n-portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. The trade gets moved to the \\\n-  failed trades section.\n-portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. The trade gets \\\n-   moved to the failed trades section.\n+portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. You can move the \\\n+  trade to the failed trades.\n+portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. You can move the \\\n+  trade to the failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzYzODQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMzo1OVrOHZalnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMzo1OVrOHZalnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxMjA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked and no trade fee has been paid. \\\n          \n          \n            \n              You can move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496412063", "createdAt": "2020-09-29T05:13:59Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzY0NTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxNTozM1rOHZaqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxNTozM1rOHZaqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxMzI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up. \\\n          \n          \n            \n              Your offer is still available for other traders so you have not lost the maker fee. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked. \\\n          \n          \n            \n              Your offer is still available to other traders, so you have not lost the maker fee. \\\n          \n          \n            \n              You can move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496413243", "createdAt": "2020-09-29T05:15:33Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzY1NjE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxODowNFrOHZaxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxODowNFrOHZaxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxNTA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n          \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n            portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2-of-2 multisig transaction) is missing.\\n\\n\\\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked but your trade fee has been paid. \\\n          \n          \n            \n              You can make a request to be reimbursed the trade fee here: https://github.com/bisq-network/support/issues. \\n\\n\\\n          \n          \n            \n              Feel free to move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496415052", "createdAt": "2020-09-29T05:18:04Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzY3ODUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToyMzozNlrOHZbBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToyMzozNlrOHZbBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxOTE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n          \n          \n            \n              Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n          \n          \n            \n              send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n          \n          \n            \n              The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n          \n          \n            \n              back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing, \\\n          \n          \n            \n              but funds have been locked in the deposit transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the fiat or altcoin payment to the BTC seller, because without the delayed payout tx, arbitration \\\n          \n          \n            \n              cannot be opened. Instead, open a mediation ticket with Cmd/Ctrl+o. \\\n          \n          \n            \n              The mediator should suggest that both peers each get back the the full amount of their security deposits \\\n          \n          \n            \n              (with seller receiving full trade amount back as well). \\\n          \n          \n            \n              This way, there is no security risk, and only trade fees are lost. \\n\\n\\\n          \n          \n            \n              You can request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496419151", "createdAt": "2020-09-29T05:23:36Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzczODA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTozOTowMlrOHZbp9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTozOTowMlrOHZbp9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQyOTU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n          \n          \n            \n              Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n          \n          \n            \n              also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n          \n          \n            \n              You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n          \n          \n            \n              In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n          \n          \n            \n              your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing \\\n          \n          \n            \n              but funds have been locked in the deposit transaction.\\n\\n\\\n          \n          \n            \n              If the buyer is also missing the delayed payout transaction, they will be instructed to NOT send the payment and open \\\n          \n          \n            \n              a mediation ticket instead. You should also open a mediation ticket with Cmd/Ctrl+o. \\n\\n\\\n          \n          \n            \n              If the buyer has not sent payment yet, the mediator should suggest that both peers each get back the full amount of \\\n          \n          \n            \n              their security deposits (with seller receiving full trade amount back as well). \\\n          \n          \n            \n              Otherwise the trade amount should go to the buyer. \\n\\n\\\n          \n          \n            \n              You can request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496429558", "createdAt": "2020-09-29T05:39:02Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc0NzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0Mzo0OFrOHZbvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0Mzo0OFrOHZbvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n          \n          \n            \n              Error: {0}\\n\\n\\\n          \n          \n            \n              This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n          \n          \n            \n              ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n          \n          \n            \n              have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n          \n          \n            \n              getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.errorMsgSet=There was an error during trade protocol execution.\\n\\n\\\n          \n          \n            \n              Error: {0}\\n\\n\\\n          \n          \n            \n              It might be that this error is not critical, and the trade can be completed normally. If you are unsure, open a mediation \\\n          \n          \n            \n              ticket to get advice from Bisq mediators. \\n\\n\\\n          \n          \n            \n              If the error was critical and the trade cannot be completed, you might have lost your trade fee. \\\n          \n          \n            \n              Request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431002", "createdAt": "2020-09-29T05:43:48Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc0OTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0NDozNFrOHZbweg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0NDozNFrOHZbweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTIyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n          \n          \n            \n              getting reimbursed the lost trade fee.\n          \n          \n            \n              have lost your trade fee. If so, you can request a reimbursement for lost trade fees here: \\\n          \n          \n            \n              https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431226", "createdAt": "2020-09-29T05:44:34Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc1MjkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0NjowM1rOHZbyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0NjowM1rOHZbyUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n          \n          \n            \n              trades screen any time.\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move a failed trade back to the open \\\n          \n          \n            \n              trades screen any time.\n          \n      \n    \n    \n  \n\nI assumed this is what intended message is\u2014please make sure it's correct.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431697", "createdAt": "2020-09-29T05:46:03Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc1Njc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODowN1rOHZb0iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODowN1rOHZb0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n          \n          \n            \n              really sure. It might prevent options to resolve the problem.\\n\\n\\\n          \n          \n            \n              Do you want to move the trade to failed trades?\\n\\n\\\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n          \n          \n            \n              The trade transactions have been published and funds are locked. Only move the trade to failed trades if you are \\\n          \n          \n            \n              really sure. It might prevent options to resolve the problem.\\n\\n\\\n          \n          \n            \n              Do you want to move the trade to failed trades?\\n\\n\\\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move a failed trade back to the open \\", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432267", "createdAt": "2020-09-29T05:48:07Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc1NzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODoyNFrOHZb05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODoyNFrOHZb05A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjM1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade\n          \n          \n            \n            portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of this trade", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432356", "createdAt": "2020-09-29T05:48:24Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.moveTradeToFailedIcon.tooltip=Move trade to failed trades\n+portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc1Nzg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODozN1rOHZb1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0ODozN1rOHZb1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.failed.revertToPending.popup=Do you want to move the trade to open trades?\n          \n          \n            \n            portfolio.failed.revertToPending.popup=Do you want to move this trade to open trades?", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432420", "createdAt": "2020-09-29T05:48:37Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.moveTradeToFailedIcon.tooltip=Move trade to failed trades\n+portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade\n+portfolio.failed.revertToPending.popup=Do you want to move the trade to open trades?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc1ODk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/i18n/displayStrings.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0OToxMFrOHZb11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0OToxMFrOHZb11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transaction ID\n          \n          \n            \n            txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with this transaction ID", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432599", "createdAt": "2020-09-29T05:49:10Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -2974,7 +3027,8 @@ addressTextField.openWallet.failed=Opening a default Bitcoin wallet application\n peerInfoIcon.tooltip={0}\\nTag: {1}\n \n txIdTextField.copyIcon.tooltip=Copy transaction ID to clipboard\n-txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transactions ID\n+txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transaction ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2365, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}