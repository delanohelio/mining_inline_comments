{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTIwODUz", "number": 5001, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTo1Njo0N1rOFJKp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODowMTo1NlrOFJLNsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTU2MDcyOnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/PriceUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTo1Njo0N1rOILdcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNzoyMjozNFrOILd4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NzU4MA==", "bodyText": "I instinctively need to ask if  PriceUtil could be moved to core.  I see dependencies on ChatView.log and ui validators, but much of the util logic could be made available to the api.", "url": "https://github.com/bisq-network/bisq/pull/5001#discussion_r548887580", "createdAt": "2020-12-25T15:56:47Z", "author": {"login": "ghubstan"}, "path": "desktop/src/main/java/bisq/desktop/main/PriceUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36802dc49661ebe3669d5145644bdeb4ed01781"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NDg4Mg==", "bodyText": "Yes I was thinking the same... was just to lazy to separate pure domain code with formatting stuff which is using desktop scope classes... But yes we should refactor that.", "url": "https://github.com/bisq-network/bisq/pull/5001#discussion_r548894882", "createdAt": "2020-12-25T17:22:34Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/PriceUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NzU4MA=="}, "originalCommit": {"oid": "b36802dc49661ebe3669d5145644bdeb4ed01781"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTY1MjM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/offer/PriceEventHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxODowMTo1NlrOILeEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo1MToyNVrOILw1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Nzk3NQ==", "bodyText": "Minor detail... placement of colons are not consistent (the last one).\nAnd you sure you wanted to use semi-colons to delimit key value pairs?  Is that consistent with other error log statements?", "url": "https://github.com/bisq-network/bisq/pull/5001#discussion_r548897975", "createdAt": "2020-12-25T18:01:56Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/offer/PriceEventHandler.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.offer;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.Price;\n+import bisq.core.provider.price.MarketPrice;\n+import bisq.core.provider.price.PriceFeedService;\n+\n+import bisq.common.util.MathUtils;\n+\n+import org.bitcoinj.utils.Fiat;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import javafx.collections.ListChangeListener;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.common.util.MathUtils.roundDoubleToLong;\n+import static bisq.common.util.MathUtils.scaleUpByPowerOf10;\n+\n+@Slf4j\n+@Singleton\n+public class PriceEventHandler {\n+    private final OpenOfferManager openOfferManager;\n+    private final PriceFeedService priceFeedService;\n+    private final Map<String, Set<OpenOffer>> openOffersByCurrency = new HashMap<>();\n+\n+    @Inject\n+    public PriceEventHandler(OpenOfferManager openOfferManager, PriceFeedService priceFeedService) {\n+        this.openOfferManager = openOfferManager;\n+        this.priceFeedService = priceFeedService;\n+    }\n+\n+    public void onAllServicesInitialized() {\n+        openOfferManager.getObservableList().addListener((ListChangeListener<OpenOffer>) c -> {\n+            c.next();\n+            if (c.wasAdded()) {\n+                onAddedOpenOffers(c.getAddedSubList());\n+            }\n+            if (c.wasRemoved()) {\n+                onRemovedOpenOffers(c.getRemoved());\n+            }\n+        });\n+        onAddedOpenOffers(openOfferManager.getObservableList());\n+\n+        priceFeedService.updateCounterProperty().addListener((observable, oldValue, newValue) -> onPriceFeedChanged());\n+        onPriceFeedChanged();\n+    }\n+\n+    private void onPriceFeedChanged() {\n+        openOffersByCurrency.keySet().stream()\n+                .map(priceFeedService::getMarketPrice)\n+                .filter(Objects::nonNull)\n+                .filter(marketPrice -> openOffersByCurrency.containsKey(marketPrice.getCurrencyCode()))\n+                .forEach(marketPrice -> {\n+                    openOffersByCurrency.get(marketPrice.getCurrencyCode()).stream()\n+                            .filter(openOffer -> !openOffer.isDeactivated())\n+                            .forEach(openOffer -> checkPriceThreshold(marketPrice, openOffer));\n+                });\n+    }\n+\n+    private void checkPriceThreshold(bisq.core.provider.price.MarketPrice marketPrice, OpenOffer openOffer) {\n+        Price price = openOffer.getOffer().getPrice();\n+        if (price == null) {\n+            return;\n+        }\n+\n+        String currencyCode = openOffer.getOffer().getCurrencyCode();\n+        int smallestUnitExponent = CurrencyUtil.isCryptoCurrency(currencyCode) ?\n+                Altcoin.SMALLEST_UNIT_EXPONENT :\n+                Fiat.SMALLEST_UNIT_EXPONENT;\n+        long marketPriceAsLong = roundDoubleToLong(\n+                scaleUpByPowerOf10(marketPrice.getPrice(), smallestUnitExponent));\n+        long triggerPrice = openOffer.getTriggerPrice();\n+        if (triggerPrice > 0) {\n+            OfferPayload.Direction direction = openOffer.getOffer().getDirection();\n+            boolean triggered = direction == OfferPayload.Direction.BUY ?\n+                    marketPriceAsLong > triggerPrice :\n+                    marketPriceAsLong < triggerPrice;\n+            if (triggered) {\n+                log.error(\"Market price exceeded the trigger price of the open offer. \" +\n+                                \"We deactivate the open offer with ID {}. Currency: {}; offer direction: {}; \" +\n+                                \"Market price: {}; Upper price threshold : {}\",\n+                        openOffer.getOffer().getShortId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "229d013844948b39db9f647f1a341d29af79e470"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNTQyOQ==", "bodyText": "I think we have no style rule for that...", "url": "https://github.com/bisq-network/bisq/pull/5001#discussion_r549205429", "createdAt": "2020-12-28T03:51:25Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/offer/PriceEventHandler.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.offer;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.Price;\n+import bisq.core.provider.price.MarketPrice;\n+import bisq.core.provider.price.PriceFeedService;\n+\n+import bisq.common.util.MathUtils;\n+\n+import org.bitcoinj.utils.Fiat;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import javafx.collections.ListChangeListener;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.common.util.MathUtils.roundDoubleToLong;\n+import static bisq.common.util.MathUtils.scaleUpByPowerOf10;\n+\n+@Slf4j\n+@Singleton\n+public class PriceEventHandler {\n+    private final OpenOfferManager openOfferManager;\n+    private final PriceFeedService priceFeedService;\n+    private final Map<String, Set<OpenOffer>> openOffersByCurrency = new HashMap<>();\n+\n+    @Inject\n+    public PriceEventHandler(OpenOfferManager openOfferManager, PriceFeedService priceFeedService) {\n+        this.openOfferManager = openOfferManager;\n+        this.priceFeedService = priceFeedService;\n+    }\n+\n+    public void onAllServicesInitialized() {\n+        openOfferManager.getObservableList().addListener((ListChangeListener<OpenOffer>) c -> {\n+            c.next();\n+            if (c.wasAdded()) {\n+                onAddedOpenOffers(c.getAddedSubList());\n+            }\n+            if (c.wasRemoved()) {\n+                onRemovedOpenOffers(c.getRemoved());\n+            }\n+        });\n+        onAddedOpenOffers(openOfferManager.getObservableList());\n+\n+        priceFeedService.updateCounterProperty().addListener((observable, oldValue, newValue) -> onPriceFeedChanged());\n+        onPriceFeedChanged();\n+    }\n+\n+    private void onPriceFeedChanged() {\n+        openOffersByCurrency.keySet().stream()\n+                .map(priceFeedService::getMarketPrice)\n+                .filter(Objects::nonNull)\n+                .filter(marketPrice -> openOffersByCurrency.containsKey(marketPrice.getCurrencyCode()))\n+                .forEach(marketPrice -> {\n+                    openOffersByCurrency.get(marketPrice.getCurrencyCode()).stream()\n+                            .filter(openOffer -> !openOffer.isDeactivated())\n+                            .forEach(openOffer -> checkPriceThreshold(marketPrice, openOffer));\n+                });\n+    }\n+\n+    private void checkPriceThreshold(bisq.core.provider.price.MarketPrice marketPrice, OpenOffer openOffer) {\n+        Price price = openOffer.getOffer().getPrice();\n+        if (price == null) {\n+            return;\n+        }\n+\n+        String currencyCode = openOffer.getOffer().getCurrencyCode();\n+        int smallestUnitExponent = CurrencyUtil.isCryptoCurrency(currencyCode) ?\n+                Altcoin.SMALLEST_UNIT_EXPONENT :\n+                Fiat.SMALLEST_UNIT_EXPONENT;\n+        long marketPriceAsLong = roundDoubleToLong(\n+                scaleUpByPowerOf10(marketPrice.getPrice(), smallestUnitExponent));\n+        long triggerPrice = openOffer.getTriggerPrice();\n+        if (triggerPrice > 0) {\n+            OfferPayload.Direction direction = openOffer.getOffer().getDirection();\n+            boolean triggered = direction == OfferPayload.Direction.BUY ?\n+                    marketPriceAsLong > triggerPrice :\n+                    marketPriceAsLong < triggerPrice;\n+            if (triggered) {\n+                log.error(\"Market price exceeded the trigger price of the open offer. \" +\n+                                \"We deactivate the open offer with ID {}. Currency: {}; offer direction: {}; \" +\n+                                \"Market price: {}; Upper price threshold : {}\",\n+                        openOffer.getOffer().getShortId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Nzk3NQ=="}, "originalCommit": {"oid": "229d013844948b39db9f647f1a341d29af79e470"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2622, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}