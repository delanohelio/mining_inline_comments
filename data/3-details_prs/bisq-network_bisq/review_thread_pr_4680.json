{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Nzc3MTI4", "number": 4680, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozODoxMFrOExNbrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMjoxNlrOExSnVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDM1NzU3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/util/Utilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozODoxMFrOHnOO2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODozOTo1M1rOHnZgTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4OTY5MQ==", "bodyText": "Not our usual style, but I quite like this way.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510889691", "createdAt": "2020-10-23T13:38:10Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/util/Utilities.java", "diffHunk": "@@ -523,4 +525,11 @@ public static int byteArrayToInteger(byte[] bytes) {\n         return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n     }\n \n+    public static String readableFileSize(long size) {\n+        if (size <= 0) return \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDM4MA==", "bodyText": "Was copied from a web resource ;-)", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r511074380", "createdAt": "2020-10-23T18:39:53Z", "author": {"login": "chimp1984"}, "path": "common/src/main/java/bisq/common/util/Utilities.java", "diffHunk": "@@ -523,4 +525,11 @@ public static int byteArrayToInteger(byte[] bytes) {\n         return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n     }\n \n+    public static String readableFileSize(long size) {\n+        if (size <= 0) return \"0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4OTY5MQ=="}, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDM5Njk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo0Nzo0NFrOHnOm5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo0Nzo0NFrOHnOm5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5NTg0Ng==", "bodyText": "As always, prefer to return early instead of huge blocks.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510895846", "createdAt": "2020-10-23T13:47:44Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.network.p2p.inventory;\n+\n+import bisq.core.dao.monitoring.BlindVoteStateMonitoringService;\n+import bisq.core.dao.monitoring.DaoStateMonitoringService;\n+import bisq.core.dao.monitoring.ProposalStateMonitoringService;\n+import bisq.core.dao.monitoring.model.BlindVoteStateBlock;\n+import bisq.core.dao.monitoring.model.DaoStateBlock;\n+import bisq.core.dao.monitoring.model.ProposalStateBlock;\n+import bisq.core.dao.state.DaoStateService;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryRequest;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryResponse;\n+import bisq.core.network.p2p.inventory.model.InventoryItem;\n+\n+import bisq.network.p2p.network.Connection;\n+import bisq.network.p2p.network.MessageListener;\n+import bisq.network.p2p.network.NetworkNode;\n+import bisq.network.p2p.network.Statistic;\n+import bisq.network.p2p.peers.PeerManager;\n+import bisq.network.p2p.storage.P2PDataStorage;\n+import bisq.network.p2p.storage.payload.ProtectedStorageEntry;\n+\n+import bisq.common.app.Version;\n+import bisq.common.config.Config;\n+import bisq.common.proto.network.NetworkEnvelope;\n+import bisq.common.util.Profiler;\n+import bisq.common.util.Utilities;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.common.base.Enums;\n+import com.google.common.base.Optional;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class GetInventoryRequestHandler implements MessageListener {\n+    private final NetworkNode networkNode;\n+    private final PeerManager peerManager;\n+    private final P2PDataStorage p2PDataStorage;\n+    private final DaoStateService daoStateService;\n+    private final DaoStateMonitoringService daoStateMonitoringService;\n+    private final ProposalStateMonitoringService proposalStateMonitoringService;\n+    private final BlindVoteStateMonitoringService blindVoteStateMonitoringService;\n+    private final int maxConnections;\n+\n+    @Inject\n+    public GetInventoryRequestHandler(NetworkNode networkNode,\n+                                      PeerManager peerManager,\n+                                      P2PDataStorage p2PDataStorage,\n+                                      DaoStateService daoStateService,\n+                                      DaoStateMonitoringService daoStateMonitoringService,\n+                                      ProposalStateMonitoringService proposalStateMonitoringService,\n+                                      BlindVoteStateMonitoringService blindVoteStateMonitoringService,\n+                                      @Named(Config.MAX_CONNECTIONS) int maxConnections) {\n+        this.networkNode = networkNode;\n+        this.peerManager = peerManager;\n+        this.p2PDataStorage = p2PDataStorage;\n+        this.daoStateService = daoStateService;\n+        this.daoStateMonitoringService = daoStateMonitoringService;\n+        this.proposalStateMonitoringService = proposalStateMonitoringService;\n+        this.blindVoteStateMonitoringService = blindVoteStateMonitoringService;\n+        this.maxConnections = maxConnections;\n+\n+        this.networkNode.addMessageListener(this);\n+    }\n+\n+    @Override\n+    public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n+        if (networkEnvelope instanceof GetInventoryRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDQ1NDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDowMDo0MVrOHnPKBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDowMDo0MVrOHnPKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwNDgzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> {\n          \n          \n            \n                                    Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n          \n          \n            \n                                    if (optionalEnum.isPresent()) {\n          \n          \n            \n                                        InventoryItem key = optionalEnum.get();\n          \n          \n            \n                                        dataObjects.putIfAbsent(key, 0);\n          \n          \n            \n                                        int prev = dataObjects.get(key);\n          \n          \n            \n                                        dataObjects.put(key, prev + 1);\n          \n          \n            \n                                    }\n          \n          \n            \n                                });\n          \n          \n            \n                        p2PDataStorage.getMap().values().stream()\n          \n          \n            \n                                .map(ProtectedStorageEntry::getProtectedStoragePayload)\n          \n          \n            \n                                .filter(Objects::nonNull)\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> {\n          \n          \n            \n                                    Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n          \n          \n            \n                                    if (optionalEnum.isPresent()) {\n          \n          \n            \n                                        InventoryItem key = optionalEnum.get();\n          \n          \n            \n                                        dataObjects.putIfAbsent(key, 0);\n          \n          \n            \n                                        int prev = dataObjects.get(key);\n          \n          \n            \n                                        dataObjects.put(key, prev + 1);\n          \n          \n            \n                                    }\n          \n          \n            \n                                });\n          \n          \n            \n                        p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> addItem(dataObjects, className));\n          \n          \n            \n                        p2PDataStorage.getMap().values().stream()\n          \n          \n            \n                                .map(ProtectedStorageEntry::getProtectedStoragePayload)\n          \n          \n            \n                                .filter(Objects::nonNull)\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> addItem(dataObjects, className));\n          \n      \n    \n    \n  \n\nWith addItem()\n    private void addItem(Map<InventoryItem, Integer> dataObjects, String className) {\n        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n        if (optionalEnum.isPresent()) {\n            InventoryItem key = optionalEnum.get();\n            dataObjects.putIfAbsent(key, 0);\n            int prev = dataObjects.get(key);\n            dataObjects.put(key, prev + 1);\n        }\n    }", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510904836", "createdAt": "2020-10-23T14:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.network.p2p.inventory;\n+\n+import bisq.core.dao.monitoring.BlindVoteStateMonitoringService;\n+import bisq.core.dao.monitoring.DaoStateMonitoringService;\n+import bisq.core.dao.monitoring.ProposalStateMonitoringService;\n+import bisq.core.dao.monitoring.model.BlindVoteStateBlock;\n+import bisq.core.dao.monitoring.model.DaoStateBlock;\n+import bisq.core.dao.monitoring.model.ProposalStateBlock;\n+import bisq.core.dao.state.DaoStateService;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryRequest;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryResponse;\n+import bisq.core.network.p2p.inventory.model.InventoryItem;\n+\n+import bisq.network.p2p.network.Connection;\n+import bisq.network.p2p.network.MessageListener;\n+import bisq.network.p2p.network.NetworkNode;\n+import bisq.network.p2p.network.Statistic;\n+import bisq.network.p2p.peers.PeerManager;\n+import bisq.network.p2p.storage.P2PDataStorage;\n+import bisq.network.p2p.storage.payload.ProtectedStorageEntry;\n+\n+import bisq.common.app.Version;\n+import bisq.common.config.Config;\n+import bisq.common.proto.network.NetworkEnvelope;\n+import bisq.common.util.Profiler;\n+import bisq.common.util.Utilities;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.common.base.Enums;\n+import com.google.common.base.Optional;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class GetInventoryRequestHandler implements MessageListener {\n+    private final NetworkNode networkNode;\n+    private final PeerManager peerManager;\n+    private final P2PDataStorage p2PDataStorage;\n+    private final DaoStateService daoStateService;\n+    private final DaoStateMonitoringService daoStateMonitoringService;\n+    private final ProposalStateMonitoringService proposalStateMonitoringService;\n+    private final BlindVoteStateMonitoringService blindVoteStateMonitoringService;\n+    private final int maxConnections;\n+\n+    @Inject\n+    public GetInventoryRequestHandler(NetworkNode networkNode,\n+                                      PeerManager peerManager,\n+                                      P2PDataStorage p2PDataStorage,\n+                                      DaoStateService daoStateService,\n+                                      DaoStateMonitoringService daoStateMonitoringService,\n+                                      ProposalStateMonitoringService proposalStateMonitoringService,\n+                                      BlindVoteStateMonitoringService blindVoteStateMonitoringService,\n+                                      @Named(Config.MAX_CONNECTIONS) int maxConnections) {\n+        this.networkNode = networkNode;\n+        this.peerManager = peerManager;\n+        this.p2PDataStorage = p2PDataStorage;\n+        this.daoStateService = daoStateService;\n+        this.daoStateMonitoringService = daoStateMonitoringService;\n+        this.proposalStateMonitoringService = proposalStateMonitoringService;\n+        this.blindVoteStateMonitoringService = blindVoteStateMonitoringService;\n+        this.maxConnections = maxConnections;\n+\n+        this.networkNode.addMessageListener(this);\n+    }\n+\n+    @Override\n+    public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n+        if (networkEnvelope instanceof GetInventoryRequest) {\n+            // Data\n+            GetInventoryRequest getInventoryRequest = (GetInventoryRequest) networkEnvelope;\n+            Map<InventoryItem, Integer> dataObjects = new HashMap<>();\n+            p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n+                    .map(e -> e.getClass().getSimpleName())\n+                    .forEach(className -> {\n+                        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n+                        if (optionalEnum.isPresent()) {\n+                            InventoryItem key = optionalEnum.get();\n+                            dataObjects.putIfAbsent(key, 0);\n+                            int prev = dataObjects.get(key);\n+                            dataObjects.put(key, prev + 1);\n+                        }\n+                    });\n+            p2PDataStorage.getMap().values().stream()\n+                    .map(ProtectedStorageEntry::getProtectedStoragePayload)\n+                    .filter(Objects::nonNull)\n+                    .map(e -> e.getClass().getSimpleName())\n+                    .forEach(className -> {\n+                        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n+                        if (optionalEnum.isPresent()) {\n+                            InventoryItem key = optionalEnum.get();\n+                            dataObjects.putIfAbsent(key, 0);\n+                            int prev = dataObjects.get(key);\n+                            dataObjects.put(key, prev + 1);\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIwNjYyOnYy", "diffSide": "RIGHT", "path": "inventory/src/main/java/bisq/inventory/InventoryMonitorMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMjoxNlrOHnWdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMjoxNlrOHnWdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNDUxMA==", "bodyText": "This comment is lacking a bit when it comes to the punch line.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r511024510", "createdAt": "2020-10-23T17:12:16Z", "author": {"login": "sqrrm"}, "path": "inventory/src/main/java/bisq/inventory/InventoryMonitorMain.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.inventory;\n+\n+\n+import bisq.core.locale.Res;\n+\n+import bisq.common.UserThread;\n+import bisq.common.app.AsciiLogo;\n+import bisq.common.app.Log;\n+import bisq.common.app.Version;\n+import bisq.common.config.BaseCurrencyNetwork;\n+import bisq.common.util.Utilities;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+\n+\n+import sun.misc.Signal;\n+\n+@Slf4j\n+public class InventoryMonitorMain {\n+\n+    private static InventoryMonitor inventoryMonitor;\n+    private static boolean stopped;\n+\n+    // prog args for regtest: 10 1 BTC_REGTEST\n+    public static void main(String[] args) {\n+        // Default values\n+        int intervalSec = 300;\n+        boolean useLocalhostForP2P = false;\n+        BaseCurrencyNetwork network = BaseCurrencyNetwork.BTC_MAINNET;\n+        int port = 80;\n+\n+        if (args.length > 0) {\n+            intervalSec = Integer.parseInt(args[0]);\n+        }\n+        if (args.length > 1) {\n+            useLocalhostForP2P = args[1].equals(\"1\");\n+        }\n+        if (args.length > 2) {\n+            network = BaseCurrencyNetwork.valueOf(args[2]);\n+        }\n+        if (args.length > 3) {\n+            port = Integer.parseInt(args[3]);\n+        }\n+\n+        String appName = \"bisq-InventoryMonitor-\" + network + \"-\" + intervalSec;\n+        File appDir = new File(Utilities.getUserDataDir(), appName);\n+        if (!appDir.exists() && !appDir.mkdir()) {\n+            log.warn(\"make appDir failed\");\n+        }\n+        inventoryMonitor = new InventoryMonitor(appDir, useLocalhostForP2P, network, intervalSec, port);\n+\n+        setup(network, appDir);\n+    }\n+\n+    private static void setup(BaseCurrencyNetwork network, File appDir) {\n+        AsciiLogo.showAsciiLogo();\n+        String logPath = Paths.get(appDir.getPath(), \"bisq\").toString();\n+        Log.setup(logPath);\n+        Log.setLevel(Level.INFO);\n+        Version.setBaseCryptoNetworkId(network.ordinal());\n+\n+        Res.setup(); // Used for some formatting in the webserver\n+\n+        // We do not set any capabilities as we don't want to receive any network data beside our response.\n+        // We also do not use capabilities for the request/response messages as we only connect to seeds nodes and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2412, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}