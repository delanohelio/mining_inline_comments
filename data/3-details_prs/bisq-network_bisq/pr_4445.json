{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjM3ODQ3", "number": 4445, "title": "Use the index of a seed node address in the list of nodes at the", "bodyText": "Use the index of a seed node address in the list of nodes at the repository to determine the hour to restart.\nThis should avoid the riks that multiple seed nodes restart at the same time which can lead to data loss.", "createdAt": "2020-08-28T07:31:24Z", "url": "https://github.com/bisq-network/bisq/pull/4445", "merged": true, "mergeCommit": {"oid": "591d68a6fdbeaf056747d64d29d511efe3aed285"}, "closed": true, "closedAt": "2020-08-29T13:20:04Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDP51IgH2gAyNDc1MjM3ODQ3OmZhNWE1OGQ0MWEzNDNmZWQ1MmIxMWMzZDM2NDFlMjQwOTVhNzAzZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDW2YTgFqTQ3NzgyODM5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fa5a58d41a343fed52b11c3d3641e24095a703dc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fa5a58d41a343fed52b11c3d3641e24095a703dc", "committedDate": "2020-08-28T07:30:45Z", "message": "Use the index of a seed node address in the list of nodes at the\nrepository to determine the hour to restart."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c218b287557a47a21afbc02c7f7495ee859fe31b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c218b287557a47a21afbc02c7f7495ee859fe31b", "committedDate": "2020-08-28T12:39:23Z", "message": "Satistfy codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7", "committedDate": "2020-08-28T14:39:33Z", "message": "Improve logging of initial data requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODI4Mzk1", "url": "https://github.com/bisq-network/bisq/pull/4445#pullrequestreview-477828395", "createdAt": "2020-08-28T15:34:04Z", "commit": {"oid": "5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNDowNVrOHJLHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNDowNVrOHJLHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MTQwOQ==", "bodyText": "Why not use CHECK_SHUTDOWN_SEC here?", "url": "https://github.com/bisq-network/bisq/pull/4445#discussion_r479381409", "createdAt": "2020-08-28T15:34:05Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/misc/ExecutableForAppWithP2p.java", "diffHunk": "@@ -106,6 +115,62 @@ public void gracefulShutDown(ResultHandler resultHandler) {\n         }\n     }\n \n+    public void startShutDownInterval(GracefulShutDownHandler gracefulShutDownHandler) {\n+        List<NodeAddress> seedNodeAddresses = new ArrayList<>(injector.getInstance(SeedNodeRepository.class).getSeedNodeAddresses());\n+        seedNodeAddresses.sort(Comparator.comparing(NodeAddress::getFullAddress));\n+\n+        NodeAddress myAddress = injector.getInstance(P2PService.class).getNetworkNode().getNodeAddress();\n+        int myIndex = -1;\n+        for (int i = 0; i < seedNodeAddresses.size(); i++) {\n+            if (seedNodeAddresses.get(i).equals(myAddress)) {\n+                myIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (myIndex == -1) {\n+            log.warn(\"We did not find our node address in the seed nodes repository. \" +\n+                            \"We use a 24 hour delay after startup as shut down strategy.\" +\n+                            \"myAddress={}, seedNodeAddresses={}\",\n+                    myAddress, seedNodeAddresses);\n+\n+            UserThread.runPeriodically(() -> {\n+                if (System.currentTimeMillis() - startTime > SHUTDOWN_INTERVAL) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                                    \"Shut down as node was running longer as {} hours\" +\n+                                    \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\",\n+                            SHUTDOWN_INTERVAL / 3600000);\n+\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+\n+            }, CHECK_SHUTDOWN_SEC);\n+            return;\n+        }\n+\n+        // We interpret the value of myIndex as hour of day (0-23). That way we avoid the risk of a restart of\n+        // multiple nodes around the same time in case it would be not deterministic.\n+\n+        // We wrap our periodic check in a delay of 2 hours to avoid that we get\n+        // triggered multiple times after a restart while being in the same hour. It can be that we miss our target\n+        // hour during that delay but that is not considered problematic, the seed would just restart a bit longer than\n+        // 24 hours.\n+        int target = myIndex;\n+        UserThread.runAfter(() -> {\n+            // We check every hour if we are in the target hour.\n+            UserThread.runPeriodically(() -> {\n+                int currentHour = ZonedDateTime.ofInstant(Instant.now(), ZoneId.of(\"GMT0\")).getHour();\n+                if (currentHour == target) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                            \"Shut down node at hour {}\" +\n+                            \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\", target);\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+            }, TimeUnit.MINUTES.toSeconds(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3146, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}