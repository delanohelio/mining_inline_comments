{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzczMzI1", "number": 4711, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNzozNzo1MVrOE0EJzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNzozNzo1MVrOE0EJzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDI5NDUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/api/CoreTradesService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNzozNzo1MVrOHro3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxODo0Nzo0NFrOHrpREA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyMDI3OA==", "bodyText": "There is no guarantee that the Tradable is a Trade here, probably good to add a check for instanceof.", "url": "https://github.com/bisq-network/bisq/pull/4711#discussion_r515520278", "createdAt": "2020-10-31T17:37:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreTradesService.java", "diffHunk": "@@ -116,26 +137,109 @@ void confirmPaymentReceived(String tradeId) {\n         }\n     }\n \n-    @SuppressWarnings(\"unused\")\n     void keepFunds(String tradeId) {\n-        log.info(\"TODO\");\n+        verifyTradeIsNotClosed(tradeId);\n+        var trade = getOpenTrade(tradeId).orElseThrow(() ->\n+                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+        log.info(\"Keeping funds received from trade {}\", tradeId);\n+        tradeManager.onTradeCompleted(trade);\n     }\n \n-    @SuppressWarnings(\"unused\")\n-    void withdrawFunds(String tradeId, String address) {\n-        log.info(\"TODO\");\n+    void withdrawFunds(String tradeId, String toAddress) {\n+        // An encrypted wallet must be unlocked for this operation.\n+        verifyTradeIsNotClosed(tradeId);\n+        var trade = getOpenTrade(tradeId).orElseThrow(() ->\n+                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+\n+        verifyIsValidBTCAddress(toAddress);\n+\n+        var fromAddressEntry = btcWalletService.getOrCreateAddressEntry(trade.getId(), TRADE_PAYOUT);\n+        verifyFundsNotWithdrawn(fromAddressEntry);\n+\n+        var amount = trade.getPayoutAmount();\n+        var fee = getEstimatedTxFee(fromAddressEntry.getAddressString(), toAddress, amount);\n+        var receiverAmount = amount.subtract(fee);\n+\n+        log.info(format(\"Withdrawing funds received from trade %s:\"\n+                        + \"%n From %s%n To %s%n Amt %s%n Tx Fee %s%n Receiver Amt %s\",\n+                tradeId,\n+                fromAddressEntry.getAddressString(),\n+                toAddress,\n+                amount.toFriendlyString(),\n+                fee.toFriendlyString(),\n+                receiverAmount.toFriendlyString()));\n+\n+        tradeManager.onWithdrawRequest(\n+                toAddress,\n+                amount,\n+                fee,\n+                coreWalletsService.getKey(),\n+                trade,\n+                () -> {\n+                },\n+                (errorMessage, throwable) -> {\n+                    log.error(errorMessage, throwable);\n+                    throw new IllegalStateException(errorMessage, throwable);\n+                });\n     }\n \n     String getTradeRole(String tradeId) {\n         return tradeUtil.getRole(getTrade(tradeId));\n     }\n \n     Trade getTrade(String tradeId) {\n-        return tradeManager.getTradeById(tradeId).orElseThrow(() ->\n-                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+        return getOpenTrade(tradeId).orElseGet(() ->\n+                getClosedTrade(tradeId).orElseThrow(() ->\n+                        new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId))\n+                ));\n+    }\n+\n+    private Optional<Trade> getOpenTrade(String tradeId) {\n+        return tradeManager.getTradeById(tradeId);\n+    }\n+\n+    private Optional<Trade> getClosedTrade(String tradeId) {\n+        return closedTradableManager.getTradableById(tradeId).map(value -> (Trade) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3631a022f477cd2e9a00134be978c75a0ce3ec4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNjkyOA==", "bodyText": "Fixed in PR #4731, commit fcdfc68.", "url": "https://github.com/bisq-network/bisq/pull/4711#discussion_r515526928", "createdAt": "2020-10-31T18:47:44Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreTradesService.java", "diffHunk": "@@ -116,26 +137,109 @@ void confirmPaymentReceived(String tradeId) {\n         }\n     }\n \n-    @SuppressWarnings(\"unused\")\n     void keepFunds(String tradeId) {\n-        log.info(\"TODO\");\n+        verifyTradeIsNotClosed(tradeId);\n+        var trade = getOpenTrade(tradeId).orElseThrow(() ->\n+                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+        log.info(\"Keeping funds received from trade {}\", tradeId);\n+        tradeManager.onTradeCompleted(trade);\n     }\n \n-    @SuppressWarnings(\"unused\")\n-    void withdrawFunds(String tradeId, String address) {\n-        log.info(\"TODO\");\n+    void withdrawFunds(String tradeId, String toAddress) {\n+        // An encrypted wallet must be unlocked for this operation.\n+        verifyTradeIsNotClosed(tradeId);\n+        var trade = getOpenTrade(tradeId).orElseThrow(() ->\n+                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+\n+        verifyIsValidBTCAddress(toAddress);\n+\n+        var fromAddressEntry = btcWalletService.getOrCreateAddressEntry(trade.getId(), TRADE_PAYOUT);\n+        verifyFundsNotWithdrawn(fromAddressEntry);\n+\n+        var amount = trade.getPayoutAmount();\n+        var fee = getEstimatedTxFee(fromAddressEntry.getAddressString(), toAddress, amount);\n+        var receiverAmount = amount.subtract(fee);\n+\n+        log.info(format(\"Withdrawing funds received from trade %s:\"\n+                        + \"%n From %s%n To %s%n Amt %s%n Tx Fee %s%n Receiver Amt %s\",\n+                tradeId,\n+                fromAddressEntry.getAddressString(),\n+                toAddress,\n+                amount.toFriendlyString(),\n+                fee.toFriendlyString(),\n+                receiverAmount.toFriendlyString()));\n+\n+        tradeManager.onWithdrawRequest(\n+                toAddress,\n+                amount,\n+                fee,\n+                coreWalletsService.getKey(),\n+                trade,\n+                () -> {\n+                },\n+                (errorMessage, throwable) -> {\n+                    log.error(errorMessage, throwable);\n+                    throw new IllegalStateException(errorMessage, throwable);\n+                });\n     }\n \n     String getTradeRole(String tradeId) {\n         return tradeUtil.getRole(getTrade(tradeId));\n     }\n \n     Trade getTrade(String tradeId) {\n-        return tradeManager.getTradeById(tradeId).orElseThrow(() ->\n-                new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId)));\n+        return getOpenTrade(tradeId).orElseGet(() ->\n+                getClosedTrade(tradeId).orElseThrow(() ->\n+                        new IllegalArgumentException(format(\"trade with id '%s' not found\", tradeId))\n+                ));\n+    }\n+\n+    private Optional<Trade> getOpenTrade(String tradeId) {\n+        return tradeManager.getTradeById(tradeId);\n+    }\n+\n+    private Optional<Trade> getClosedTrade(String tradeId) {\n+        return closedTradableManager.getTradableById(tradeId).map(value -> (Trade) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyMDI3OA=="}, "originalCommit": {"oid": "a3631a022f477cd2e9a00134be978c75a0ce3ec4"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2679, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}