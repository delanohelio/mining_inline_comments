{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjM3ODQ3", "number": 4445, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNDowNVrOEdy7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNDowNVrOEdy7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njc4NjM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/misc/ExecutableForAppWithP2p.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNDowNVrOHJLHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1OTowNVrOHJRTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MTQwOQ==", "bodyText": "Why not use CHECK_SHUTDOWN_SEC here?", "url": "https://github.com/bisq-network/bisq/pull/4445#discussion_r479381409", "createdAt": "2020-08-28T15:34:05Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/misc/ExecutableForAppWithP2p.java", "diffHunk": "@@ -106,6 +115,62 @@ public void gracefulShutDown(ResultHandler resultHandler) {\n         }\n     }\n \n+    public void startShutDownInterval(GracefulShutDownHandler gracefulShutDownHandler) {\n+        List<NodeAddress> seedNodeAddresses = new ArrayList<>(injector.getInstance(SeedNodeRepository.class).getSeedNodeAddresses());\n+        seedNodeAddresses.sort(Comparator.comparing(NodeAddress::getFullAddress));\n+\n+        NodeAddress myAddress = injector.getInstance(P2PService.class).getNetworkNode().getNodeAddress();\n+        int myIndex = -1;\n+        for (int i = 0; i < seedNodeAddresses.size(); i++) {\n+            if (seedNodeAddresses.get(i).equals(myAddress)) {\n+                myIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (myIndex == -1) {\n+            log.warn(\"We did not find our node address in the seed nodes repository. \" +\n+                            \"We use a 24 hour delay after startup as shut down strategy.\" +\n+                            \"myAddress={}, seedNodeAddresses={}\",\n+                    myAddress, seedNodeAddresses);\n+\n+            UserThread.runPeriodically(() -> {\n+                if (System.currentTimeMillis() - startTime > SHUTDOWN_INTERVAL) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                                    \"Shut down as node was running longer as {} hours\" +\n+                                    \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\",\n+                            SHUTDOWN_INTERVAL / 3600000);\n+\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+\n+            }, CHECK_SHUTDOWN_SEC);\n+            return;\n+        }\n+\n+        // We interpret the value of myIndex as hour of day (0-23). That way we avoid the risk of a restart of\n+        // multiple nodes around the same time in case it would be not deterministic.\n+\n+        // We wrap our periodic check in a delay of 2 hours to avoid that we get\n+        // triggered multiple times after a restart while being in the same hour. It can be that we miss our target\n+        // hour during that delay but that is not considered problematic, the seed would just restart a bit longer than\n+        // 24 hours.\n+        int target = myIndex;\n+        UserThread.runAfter(() -> {\n+            // We check every hour if we are in the target hour.\n+            UserThread.runPeriodically(() -> {\n+                int currentHour = ZonedDateTime.ofInstant(Instant.now(), ZoneId.of(\"GMT0\")).getHour();\n+                if (currentHour == target) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                            \"Shut down node at hour {}\" +\n+                            \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\", target);\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+            }, TimeUnit.MINUTES.toSeconds(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MjczOA==", "bodyText": "CHECK_SHUTDOWN_SEC is 1 hour. That has risk that we miss the hour we are targeting. If one timer event is triggered just 1 sec. before our target hour and then due cpu load the next 1 hour scheduled call takes longer we would miss our target hour. E.g. once call at 13:59, next call at 15:01, 14:00 would be our target.\nWith 10 min. Its safe enough and does not cause performance costs. We could maybe go higher like 30 min as well...but prefer to keep it on the safe side.", "url": "https://github.com/bisq-network/bisq/pull/4445#discussion_r479482738", "createdAt": "2020-08-28T18:59:05Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/app/misc/ExecutableForAppWithP2p.java", "diffHunk": "@@ -106,6 +115,62 @@ public void gracefulShutDown(ResultHandler resultHandler) {\n         }\n     }\n \n+    public void startShutDownInterval(GracefulShutDownHandler gracefulShutDownHandler) {\n+        List<NodeAddress> seedNodeAddresses = new ArrayList<>(injector.getInstance(SeedNodeRepository.class).getSeedNodeAddresses());\n+        seedNodeAddresses.sort(Comparator.comparing(NodeAddress::getFullAddress));\n+\n+        NodeAddress myAddress = injector.getInstance(P2PService.class).getNetworkNode().getNodeAddress();\n+        int myIndex = -1;\n+        for (int i = 0; i < seedNodeAddresses.size(); i++) {\n+            if (seedNodeAddresses.get(i).equals(myAddress)) {\n+                myIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (myIndex == -1) {\n+            log.warn(\"We did not find our node address in the seed nodes repository. \" +\n+                            \"We use a 24 hour delay after startup as shut down strategy.\" +\n+                            \"myAddress={}, seedNodeAddresses={}\",\n+                    myAddress, seedNodeAddresses);\n+\n+            UserThread.runPeriodically(() -> {\n+                if (System.currentTimeMillis() - startTime > SHUTDOWN_INTERVAL) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                                    \"Shut down as node was running longer as {} hours\" +\n+                                    \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\",\n+                            SHUTDOWN_INTERVAL / 3600000);\n+\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+\n+            }, CHECK_SHUTDOWN_SEC);\n+            return;\n+        }\n+\n+        // We interpret the value of myIndex as hour of day (0-23). That way we avoid the risk of a restart of\n+        // multiple nodes around the same time in case it would be not deterministic.\n+\n+        // We wrap our periodic check in a delay of 2 hours to avoid that we get\n+        // triggered multiple times after a restart while being in the same hour. It can be that we miss our target\n+        // hour during that delay but that is not considered problematic, the seed would just restart a bit longer than\n+        // 24 hours.\n+        int target = myIndex;\n+        UserThread.runAfter(() -> {\n+            // We check every hour if we are in the target hour.\n+            UserThread.runPeriodically(() -> {\n+                int currentHour = ZonedDateTime.ofInstant(Instant.now(), ZoneId.of(\"GMT0\")).getHour();\n+                if (currentHour == target) {\n+                    log.warn(\"\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\" +\n+                            \"Shut down node at hour {}\" +\n+                            \"\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n\", target);\n+                    shutDown(gracefulShutDownHandler);\n+                }\n+            }, TimeUnit.MINUTES.toSeconds(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MTQwOQ=="}, "originalCommit": {"oid": "5f7cfd2dc8e2e1fd0991dae1f4812215e7a3a1d7"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2417, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}