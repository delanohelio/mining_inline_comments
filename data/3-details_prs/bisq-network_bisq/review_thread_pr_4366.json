{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDU2Mzg0", "number": 4366, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1NjoyOVrOENWI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1NjowOFrOEZZuvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI5NjUwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1NjoyOVrOGv-lQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1NjoyOVrOGv-lQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTYwMw==", "bodyText": "6GB MaxRAM gives me pause.\n\nWould ErgoHeapSizeLimit [0] be a more direct way to limit RAM usage? MaxRAM is meant to specify real RAM size (all available memory).\nIn the comment it says that we're increasing RAM allotment, so we're doing this because otherwise MaxRAM would be set to something lower?\nWhat if we're running this on a memory restricted environment (< 6GB RAM)?\nIs this to do with bisq using too much RAM in some cases? But wasn't that only relevant for long-running processes?\n\n[0] http://hg.openjdk.java.net/jdk9/jdk9/hotspot/file/b756e7a2ec33/src/share/vm/runtime/globals.hpp#l2034", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r452961603", "createdAt": "2020-07-10T16:56:29Z", "author": {"login": "dmos62"}, "path": "build.gradle", "diffHunk": "@@ -143,6 +144,16 @@ configure([project(':cli'),\n                     'DEFAULT_JVM_OPTS=\"\"', 'DEFAULT_JVM_OPTS=\"-XX:MaxRAM=4g\"')\n             }\n \n+            if (applicationName == 'apitest') {\n+                // Give apitest more MaxRAM, and pass the logback config file as a system\n+                // property to avoid chatty logback startup due to multiple logback.xml\n+                // files in the classpath (:daemon & :cli).\n+                def script = file(\"${rootProject.projectDir}/bisq-$applicationName\")\n+                script.text = script.text.replace(\n+                    'DEFAULT_JVM_OPTS=\"\"', 'DEFAULT_JVM_OPTS=\"-XX:MaxRAM=6g' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ1MDE4OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0ODozNlrOGwAGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMzozMzozMFrOGwM3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjUzNw==", "bodyText": "export LD_LIBRARY_PATH= doesn't seem to be necessary with my distribution of bitcoind. Also, config.bitcoinPath seems to expect to be pointed to the bin sub-directory of bitcoin-core's home (the one that contains the bitcoind executable). That's a bit unexpected. I think it's more intuitive for it to point to the executable directly, or alternatively to bitcoin-core's home directory.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r452986537", "createdAt": "2020-07-10T17:48:36Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.linux;\n+\n+import java.io.IOException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.apitest.linux.BashCommand.isAlive;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+\n+// Some cmds:\n+// bitcoin-cli -regtest generatetoaddress 1 \"2MyBq4jbtDF6CfKNrrQdp7qkRc8mKuCpKno\"\n+// bitcoin-cli -regtest getbalance\n+// note:  getbalance does not include immature coins (<100 blks deep)\n+// bitcoin-cli -regtest getbalances\n+// bitcoin-cli -regtest getrpcinfo\n+\n+@Slf4j\n+public class BitcoinDaemon extends AbstractLinuxProcess implements LinuxProcess {\n+\n+    public BitcoinDaemon(ApiTestConfig config) {\n+        super(\"bitcoind\", config);\n+    }\n+\n+    @Override\n+    public void start() throws InterruptedException, IOException {\n+        String bitcoindCmd = \"export LD_LIBRARY_PATH=\" + config.berkeleyDbLibPath + \";\"\n+                + \" \" + config.bitcoinPath + \"/bitcoind\"\n+                + \" -datadir=\" + config.bitcoinDatadir\n+                + \" -daemon\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NTUyNQ==", "bodyText": "You no longer need to configure a BerkeleyDb lib path if your bitcoin-core binary is statically linked to BerkeleyDb.  The berkeleyDbLibPath option now defaults to an empty string.  If not set, no export LD_LIBRARY_PATH will not be pre-pended to the bitcoind command.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453195525", "createdAt": "2020-07-11T13:33:30Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.linux;\n+\n+import java.io.IOException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.apitest.linux.BashCommand.isAlive;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+\n+// Some cmds:\n+// bitcoin-cli -regtest generatetoaddress 1 \"2MyBq4jbtDF6CfKNrrQdp7qkRc8mKuCpKno\"\n+// bitcoin-cli -regtest getbalance\n+// note:  getbalance does not include immature coins (<100 blks deep)\n+// bitcoin-cli -regtest getbalances\n+// bitcoin-cli -regtest getrpcinfo\n+\n+@Slf4j\n+public class BitcoinDaemon extends AbstractLinuxProcess implements LinuxProcess {\n+\n+    public BitcoinDaemon(ApiTestConfig config) {\n+        super(\"bitcoind\", config);\n+    }\n+\n+    @Override\n+    public void start() throws InterruptedException, IOException {\n+        String bitcoindCmd = \"export LD_LIBRARY_PATH=\" + config.berkeleyDbLibPath + \";\"\n+                + \" \" + config.bitcoinPath + \"/bitcoind\"\n+                + \" -datadir=\" + config.bitcoinDatadir\n+                + \" -daemon\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjUzNw=="}, "originalCommit": {"oid": "05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDMyMzAxOnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/config/BisqAppConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzozOToxOFrOGwy3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo0ODozOVrOGw9ZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxODM2NA==", "bodyText": "How do these MaxRAM settings relate to our discussion about similar settings in build.gradle?", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453818364", "createdAt": "2020-07-13T17:39:18Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/config/BisqAppConfig.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.config;\n+\n+import bisq.seednode.SeedNodeMain;\n+\n+import bisq.desktop.app.BisqAppMain;\n+\n+\n+\n+import bisq.daemon.app.BisqDaemonMain;\n+\n+/**\n+ Some non user configurable Bisq seednode, arb node, bob and alice daemon option values.\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dev-setup.md\">dev-setup.md</a>\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dao-setup.md\">dao-setup.md</a>\n+ */\n+@SuppressWarnings(\"unused\")\n+public enum BisqAppConfig {\n+\n+    seednode(\"bisq-BTC_REGTEST_Seed_2002\",\n+            \"bisq-seednode\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            SeedNodeMain.class.getName(),\n+            2002,\n+            5120,\n+            -1),\n+    arbdaemon(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            4444,\n+            5121,\n+            9997),\n+    arbdesktop(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=3g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            4444,\n+            5121,\n+            -1),\n+    alicedaemon(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            7777,\n+            5122,\n+            9998),\n+    alicedesktop(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            7777,\n+            5122,\n+            -1),\n+    bobdaemon(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            8888,\n+            5123,\n+            9999),\n+    bobdesktop(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            8888,\n+            5123,\n+            -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5c7679020670f0b4d28e77d93f7149e6fb4b9b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MDc3Ng==", "bodyText": "Limiting RAM for bisq-apitest was not necessary -- and removed from the bisq-apitest script -- because it is a headless app.  But we need to limit RAM for :desktop apps started by bisq-apitest, like we do for the Linux Bisq UI.\nAbove, you mentioned:\n\n\nIs this to do with bisq using too much RAM in some cases? But wasn't that only relevant for long-running processes?\n\n\nThe Bisq UI is using too much without this limit, especially when starting it on an empty datadir.  This is why BisqAppConfig has a larger limit for bobdesktop than bobdaemon.  It's not really necessary for daemons at this stage, but it might be useful for profiling long running tests in the future.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453990776", "createdAt": "2020-07-13T22:48:39Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/config/BisqAppConfig.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.config;\n+\n+import bisq.seednode.SeedNodeMain;\n+\n+import bisq.desktop.app.BisqAppMain;\n+\n+\n+\n+import bisq.daemon.app.BisqDaemonMain;\n+\n+/**\n+ Some non user configurable Bisq seednode, arb node, bob and alice daemon option values.\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dev-setup.md\">dev-setup.md</a>\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dao-setup.md\">dao-setup.md</a>\n+ */\n+@SuppressWarnings(\"unused\")\n+public enum BisqAppConfig {\n+\n+    seednode(\"bisq-BTC_REGTEST_Seed_2002\",\n+            \"bisq-seednode\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            SeedNodeMain.class.getName(),\n+            2002,\n+            5120,\n+            -1),\n+    arbdaemon(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            4444,\n+            5121,\n+            9997),\n+    arbdesktop(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=3g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            4444,\n+            5121,\n+            -1),\n+    alicedaemon(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            7777,\n+            5122,\n+            9998),\n+    alicedesktop(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            7777,\n+            5122,\n+            -1),\n+    bobdaemon(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            8888,\n+            5123,\n+            9999),\n+    bobdesktop(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            8888,\n+            5123,\n+            -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxODM2NA=="}, "originalCommit": {"oid": "4d5c7679020670f0b4d28e77d93f7149e6fb4b9b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQzNjU3OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/Scaffold.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDoxMlrOGx_E4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1ODo1MVrOGx_dgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Njg1MA==", "bodyText": "rpcport is configured in ApiTestConfig, but here it's hardcoded.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r455066850", "createdAt": "2020-07-15T13:50:12Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/Scaffold.java", "diffHunk": "@@ -0,0 +1,445 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest;\n+\n+import bisq.common.config.BisqHelpFormatter;\n+import bisq.common.storage.FileUtil;\n+import bisq.common.util.Utilities;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.apitest.config.BisqAppConfig.*;\n+import static java.lang.String.format;\n+import static java.lang.System.err;\n+import static java.lang.System.exit;\n+import static java.lang.System.out;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.Arrays.stream;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+import bisq.apitest.config.BisqAppConfig;\n+import bisq.apitest.linux.BashCommand;\n+import bisq.apitest.linux.BisqApp;\n+import bisq.apitest.linux.BitcoinDaemon;\n+\n+@Slf4j\n+public class Scaffold {\n+\n+    public static final int EXIT_SUCCESS = 0;\n+    public static final int EXIT_FAILURE = 1;\n+\n+    public final ApiTestConfig config;\n+\n+    @Nullable\n+    private SetupTask bitcoindTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bitcoindTaskFuture;\n+    @Nullable\n+    private SetupTask seedNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> seedNodeTaskFuture;\n+    @Nullable\n+    private SetupTask arbNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> arbNodeTaskFuture;\n+    @Nullable\n+    private SetupTask aliceNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> aliceNodeTaskFuture;\n+    @Nullable\n+    private SetupTask bobNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bobNodeTaskFuture;\n+\n+    private final ExecutorService executor;\n+\n+    /**\n+     * Constructor for passing comma delimited list of supporting apps to\n+     * ApiTestConfig, e.g., \"bitcoind,seednode,arbdaemon,alicedaemon,bobdaemon\".\n+     *\n+     * @param supportingApps String\n+     */\n+    public Scaffold(String supportingApps) {\n+        this(new ApiTestConfig(new String[]{\"--supportingApps\", supportingApps}));\n+    }\n+\n+    /**\n+     * Constructor for passing options accepted by ApiTestConfig.\n+     *\n+     * @param args String[]\n+     */\n+    public Scaffold(String[] args) {\n+        this(new ApiTestConfig(args));\n+    }\n+\n+    /**\n+     * Constructor for passing ApiTestConfig instance.\n+     *\n+     * @param config ApiTestConfig\n+     */\n+    public Scaffold(ApiTestConfig config) {\n+        verifyNotWindows();\n+        this.config = config;\n+        this.executor = Executors.newFixedThreadPool(config.supportingApps.size());\n+        if (config.helpRequested) {\n+            config.printHelp(out,\n+                    new BisqHelpFormatter(\n+                            \"Bisq ApiTest\",\n+                            \"bisq-apitest\",\n+                            \"0.1.0\"));\n+            exit(EXIT_SUCCESS);\n+        }\n+    }\n+\n+\n+    public Scaffold setUp() {\n+        try {\n+            installDaoSetupDirectories();\n+\n+            // Start each background process from an executor, then add a shutdown hook.\n+            CountDownLatch countdownLatch = new CountDownLatch(config.supportingApps.size());\n+            startBackgroundProcesses(executor, countdownLatch);\n+            installShutdownHook();\n+\n+            // Wait for all submitted startup tasks to decrement the count of the latch.\n+            Objects.requireNonNull(countdownLatch).await();\n+\n+            // Verify each startup task's future is done.\n+            verifyStartupCompleted();\n+\n+        } catch (Throwable ex) {\n+            err.println(\"Fault: An unexpected error occurred. \" +\n+                    \"Please file a report at https://bisq.network/issues\");\n+            ex.printStackTrace(err);\n+            exit(EXIT_FAILURE);\n+        }\n+        return this;\n+    }\n+\n+    public void tearDown() {\n+        if (!executor.isTerminated()) {\n+            try {\n+                log.info(\"Shutting down executor service ...\");\n+                executor.shutdownNow();\n+                executor.awaitTermination(config.supportingApps.size() * 2000, MILLISECONDS);\n+\n+                SetupTask[] orderedTasks = new SetupTask[]{\n+                        bobNodeTask, aliceNodeTask, arbNodeTask, seedNodeTask, bitcoindTask};\n+                stream(orderedTasks).filter(t -> t != null && t.getLinuxProcess() != null)\n+                        .forEachOrdered(t -> {\n+                            try {\n+                                t.getLinuxProcess().shutdown();\n+                                MILLISECONDS.sleep(1000);\n+                            } catch (IOException | InterruptedException ex) {\n+                                throw new IllegalStateException(ex);\n+                            }\n+                        });\n+\n+                log.info(\"Teardown complete\");\n+            } catch (Exception ex) {\n+                throw new IllegalStateException(ex);\n+            }\n+        }\n+    }\n+\n+    public void installDaoSetupDirectories() {\n+        cleanDaoSetupDirectories();\n+\n+        String srcResourcesDir = Paths.get(\"apitest\", \"src\", \"main\", \"resources\", \"dao-setup\").toFile().getAbsolutePath();\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        try {\n+            if (!new File(srcResourcesDir).exists())\n+                throw new FileNotFoundException(\n+                        format(\"Dao setup dir '%s' not found.  Run gradle :apitest:installDaoSetup\"\n+                                        + \" to download dao-setup.zip and extract contents to resources folder\",\n+                                srcResourcesDir));\n+\n+            BashCommand copyBitcoinRegtestDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/Bitcoin-regtest/regtest\"\n+                            + \" \" + config.bitcoinDatadir);\n+            if (copyBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bitcoin regtest dir\");\n+\n+            BashCommand copyAliceDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + alicedaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install alice data dir\");\n+\n+            BashCommand copyBobDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + bobdaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bob data dir\");\n+\n+            log.info(\"Installed dao-setup files into {}\", buildDataDir);\n+\n+            // Write a bitcoin.conf file with the correct path to the blocknotify script,\n+            // and save it to the build resource dir.\n+            installBitcoinConf();\n+\n+            // Copy the blocknotify script from the src resources dir to the\n+            // build resources dir.  Users may want to edit it sometimes,\n+            // when all default block notifcation ports are being used.\n+            installBitcoinBlocknotify();\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not install dao-setup files from \" + srcResourcesDir, ex);\n+        }\n+    }\n+\n+    private void cleanDaoSetupDirectories() {\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        log.info(\"Cleaning dao-setup data in {}\", buildDataDir);\n+\n+        try {\n+            BashCommand rmBobDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + bobdaemon.appName);\n+            if (rmBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete bob data dir\");\n+\n+            BashCommand rmAliceDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + alicedaemon.appName);\n+            if (rmAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete alice data dir\");\n+\n+            BashCommand rmArbNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + arbdaemon.appName);\n+            if (rmArbNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete arbitrator data dir\");\n+\n+            BashCommand rmSeedNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + seednode.appName);\n+            if (rmSeedNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete seednode data dir\");\n+\n+            BashCommand rmBitcoinRegtestDir = new BashCommand(\"rm -rf \" + config.bitcoinDatadir + \"/regtest\");\n+            if (rmBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not clean bitcoind regtest dir\");\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not clean dao-setup files from \" + buildDataDir, ex);\n+        }\n+    }\n+\n+    private void installBitcoinConf() {\n+        // We write out and install a bitcoin.conf file for regtest/dao mode because\n+        // the path to the blocknotify script is not known until runtime.\n+        String bitcoinConf = \"\\n\"\n+                + \"regtest=1\\n\"\n+                + \"[regtest]\\n\"\n+                + \"peerbloomfilters=1\\n\"\n+                + \"rpcport=18443\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aefc5cb1b669b7bbd35becafaa2e48c6643fec"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MzE1NQ==", "bodyText": "Oops.  Fixed it and two other hardcoded configs in commit cf3b545.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r455073155", "createdAt": "2020-07-15T13:58:51Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/Scaffold.java", "diffHunk": "@@ -0,0 +1,445 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest;\n+\n+import bisq.common.config.BisqHelpFormatter;\n+import bisq.common.storage.FileUtil;\n+import bisq.common.util.Utilities;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.apitest.config.BisqAppConfig.*;\n+import static java.lang.String.format;\n+import static java.lang.System.err;\n+import static java.lang.System.exit;\n+import static java.lang.System.out;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.Arrays.stream;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+import bisq.apitest.config.BisqAppConfig;\n+import bisq.apitest.linux.BashCommand;\n+import bisq.apitest.linux.BisqApp;\n+import bisq.apitest.linux.BitcoinDaemon;\n+\n+@Slf4j\n+public class Scaffold {\n+\n+    public static final int EXIT_SUCCESS = 0;\n+    public static final int EXIT_FAILURE = 1;\n+\n+    public final ApiTestConfig config;\n+\n+    @Nullable\n+    private SetupTask bitcoindTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bitcoindTaskFuture;\n+    @Nullable\n+    private SetupTask seedNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> seedNodeTaskFuture;\n+    @Nullable\n+    private SetupTask arbNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> arbNodeTaskFuture;\n+    @Nullable\n+    private SetupTask aliceNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> aliceNodeTaskFuture;\n+    @Nullable\n+    private SetupTask bobNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bobNodeTaskFuture;\n+\n+    private final ExecutorService executor;\n+\n+    /**\n+     * Constructor for passing comma delimited list of supporting apps to\n+     * ApiTestConfig, e.g., \"bitcoind,seednode,arbdaemon,alicedaemon,bobdaemon\".\n+     *\n+     * @param supportingApps String\n+     */\n+    public Scaffold(String supportingApps) {\n+        this(new ApiTestConfig(new String[]{\"--supportingApps\", supportingApps}));\n+    }\n+\n+    /**\n+     * Constructor for passing options accepted by ApiTestConfig.\n+     *\n+     * @param args String[]\n+     */\n+    public Scaffold(String[] args) {\n+        this(new ApiTestConfig(args));\n+    }\n+\n+    /**\n+     * Constructor for passing ApiTestConfig instance.\n+     *\n+     * @param config ApiTestConfig\n+     */\n+    public Scaffold(ApiTestConfig config) {\n+        verifyNotWindows();\n+        this.config = config;\n+        this.executor = Executors.newFixedThreadPool(config.supportingApps.size());\n+        if (config.helpRequested) {\n+            config.printHelp(out,\n+                    new BisqHelpFormatter(\n+                            \"Bisq ApiTest\",\n+                            \"bisq-apitest\",\n+                            \"0.1.0\"));\n+            exit(EXIT_SUCCESS);\n+        }\n+    }\n+\n+\n+    public Scaffold setUp() {\n+        try {\n+            installDaoSetupDirectories();\n+\n+            // Start each background process from an executor, then add a shutdown hook.\n+            CountDownLatch countdownLatch = new CountDownLatch(config.supportingApps.size());\n+            startBackgroundProcesses(executor, countdownLatch);\n+            installShutdownHook();\n+\n+            // Wait for all submitted startup tasks to decrement the count of the latch.\n+            Objects.requireNonNull(countdownLatch).await();\n+\n+            // Verify each startup task's future is done.\n+            verifyStartupCompleted();\n+\n+        } catch (Throwable ex) {\n+            err.println(\"Fault: An unexpected error occurred. \" +\n+                    \"Please file a report at https://bisq.network/issues\");\n+            ex.printStackTrace(err);\n+            exit(EXIT_FAILURE);\n+        }\n+        return this;\n+    }\n+\n+    public void tearDown() {\n+        if (!executor.isTerminated()) {\n+            try {\n+                log.info(\"Shutting down executor service ...\");\n+                executor.shutdownNow();\n+                executor.awaitTermination(config.supportingApps.size() * 2000, MILLISECONDS);\n+\n+                SetupTask[] orderedTasks = new SetupTask[]{\n+                        bobNodeTask, aliceNodeTask, arbNodeTask, seedNodeTask, bitcoindTask};\n+                stream(orderedTasks).filter(t -> t != null && t.getLinuxProcess() != null)\n+                        .forEachOrdered(t -> {\n+                            try {\n+                                t.getLinuxProcess().shutdown();\n+                                MILLISECONDS.sleep(1000);\n+                            } catch (IOException | InterruptedException ex) {\n+                                throw new IllegalStateException(ex);\n+                            }\n+                        });\n+\n+                log.info(\"Teardown complete\");\n+            } catch (Exception ex) {\n+                throw new IllegalStateException(ex);\n+            }\n+        }\n+    }\n+\n+    public void installDaoSetupDirectories() {\n+        cleanDaoSetupDirectories();\n+\n+        String srcResourcesDir = Paths.get(\"apitest\", \"src\", \"main\", \"resources\", \"dao-setup\").toFile().getAbsolutePath();\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        try {\n+            if (!new File(srcResourcesDir).exists())\n+                throw new FileNotFoundException(\n+                        format(\"Dao setup dir '%s' not found.  Run gradle :apitest:installDaoSetup\"\n+                                        + \" to download dao-setup.zip and extract contents to resources folder\",\n+                                srcResourcesDir));\n+\n+            BashCommand copyBitcoinRegtestDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/Bitcoin-regtest/regtest\"\n+                            + \" \" + config.bitcoinDatadir);\n+            if (copyBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bitcoin regtest dir\");\n+\n+            BashCommand copyAliceDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + alicedaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install alice data dir\");\n+\n+            BashCommand copyBobDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + bobdaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bob data dir\");\n+\n+            log.info(\"Installed dao-setup files into {}\", buildDataDir);\n+\n+            // Write a bitcoin.conf file with the correct path to the blocknotify script,\n+            // and save it to the build resource dir.\n+            installBitcoinConf();\n+\n+            // Copy the blocknotify script from the src resources dir to the\n+            // build resources dir.  Users may want to edit it sometimes,\n+            // when all default block notifcation ports are being used.\n+            installBitcoinBlocknotify();\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not install dao-setup files from \" + srcResourcesDir, ex);\n+        }\n+    }\n+\n+    private void cleanDaoSetupDirectories() {\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        log.info(\"Cleaning dao-setup data in {}\", buildDataDir);\n+\n+        try {\n+            BashCommand rmBobDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + bobdaemon.appName);\n+            if (rmBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete bob data dir\");\n+\n+            BashCommand rmAliceDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + alicedaemon.appName);\n+            if (rmAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete alice data dir\");\n+\n+            BashCommand rmArbNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + arbdaemon.appName);\n+            if (rmArbNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete arbitrator data dir\");\n+\n+            BashCommand rmSeedNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + seednode.appName);\n+            if (rmSeedNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete seednode data dir\");\n+\n+            BashCommand rmBitcoinRegtestDir = new BashCommand(\"rm -rf \" + config.bitcoinDatadir + \"/regtest\");\n+            if (rmBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not clean bitcoind regtest dir\");\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not clean dao-setup files from \" + buildDataDir, ex);\n+        }\n+    }\n+\n+    private void installBitcoinConf() {\n+        // We write out and install a bitcoin.conf file for regtest/dao mode because\n+        // the path to the blocknotify script is not known until runtime.\n+        String bitcoinConf = \"\\n\"\n+                + \"regtest=1\\n\"\n+                + \"[regtest]\\n\"\n+                + \"peerbloomfilters=1\\n\"\n+                + \"rpcport=18443\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Njg1MA=="}, "originalCommit": {"oid": "28aefc5cb1b669b7bbd35becafaa2e48c6643fec"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzQzODE4OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoxNzo1MFrOGzUzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToyODoyMlrOGzXcdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg==", "bodyText": "bitcoind has the blocknotify callback for this. Not really a problem now, but something to consider if the number of \"sleeps\" grows cumbersome.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456471422", "createdAt": "2020-07-17T14:17:50Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");\n+        bitcoinCli.sendToAddress(unusedAddress, btc);\n+\n+        bitcoinCli.generateBlocks(1);\n+        sleep(1500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687bcf1d8f65cc9a3878e2ad64746894d9e377ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5OTU3Ng==", "bodyText": "This will become a nuisance, but right now I don't know of another way to give :daemon some time to parse new blocks.  (The callback does not reach the :cli.)", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456499576", "createdAt": "2020-07-17T15:03:09Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");\n+        bitcoinCli.sendToAddress(unusedAddress, btc);\n+\n+        bitcoinCli.generateBlocks(1);\n+        sleep(1500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg=="}, "originalCommit": {"oid": "687bcf1d8f65cc9a3878e2ad64746894d9e377ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNDY3Nw==", "bodyText": "Oh right, we're waiting for :daemon, not bitcoind. :daemon will probably have a gRPC endpoint for getting notifications about funding events.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456514677", "createdAt": "2020-07-17T15:28:22Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");\n+        bitcoinCli.sendToAddress(unusedAddress, btc);\n+\n+        bitcoinCli.generateBlocks(1);\n+        sleep(1500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg=="}, "originalCommit": {"oid": "687bcf1d8f65cc9a3878e2ad64746894d9e377ac"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzQ5NDg3OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDozMjoyM1rOGzVWeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1MDo1MlrOG0UaYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA==", "bodyText": "The wallet being funded with 10 BTC is an implicit step in the setup, which feels wrong. Preferably it would be explicit. I couldn't track down where it happens. Comment?", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456480378", "createdAt": "2020-07-17T14:32:23Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class GetBalanceTest extends MethodTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+\n+            // Have to generate 1 regtest block for alice's wallet to show 10 BTC balance.\n+            bitcoinCli.generateBlocks(1);\n+\n+            // Give the alicedaemon time to parse the new block.\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testGetBalance() {\n+        var balance = grpcStubs.walletsService.getBalance(GetBalanceRequest.newBuilder().build()).getBalance();\n+        assertEquals(1000000000, balance);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4ODgwNw==", "bodyText": "It is an important part of the dao-setup for regtest/dev mode testing.     Bob & Alice are given initial BTC & BSQ balances and dummy payment accounts so they can trade without coders / testers having to go through the motions of funding wallets from bitcoin-cli -regest, setting up payment accounts, etc.  Having to do that would make manual  release testing even more time consuming that it already is.\nThere are more details here.\nEventually, we want to create and test the DAO setup environment, but I don't think that's in scope for quite awhile.  For now, we use the pre-fab dao-setup.zip -- what sets up the pre-funded wallets for Bob & Alice.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456588807", "createdAt": "2020-07-17T17:52:07Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class GetBalanceTest extends MethodTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+\n+            // Have to generate 1 regtest block for alice's wallet to show 10 BTC balance.\n+            bitcoinCli.generateBlocks(1);\n+\n+            // Give the alicedaemon time to parse the new block.\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testGetBalance() {\n+        var balance = grpcStubs.walletsService.getBalance(GetBalanceRequest.newBuilder().build()).getBalance();\n+        assertEquals(1000000000, balance);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3NTU1MA==", "bodyText": "Do you think it would make automated tests more time consuming as well. Feels dirty not starting with a clean slate. As an alternative, we could be diligent about commenting in the test suites what the initial state is.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456875550", "createdAt": "2020-07-19T07:56:00Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class GetBalanceTest extends MethodTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+\n+            // Have to generate 1 regtest block for alice's wallet to show 10 BTC balance.\n+            bitcoinCli.generateBlocks(1);\n+\n+            // Give the alicedaemon time to parse the new block.\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testGetBalance() {\n+        var balance = grpcStubs.walletsService.getBalance(GetBalanceRequest.newBuilder().build()).getBalance();\n+        assertEquals(1000000000, balance);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxMzU2OQ==", "bodyText": "I don't know what the cost would be until I could compare.  There would be a trade off because it would skip the dao-setup files refresh in @BeforeClass.\nI added a javadoc comment explaining why Bob & Alice have non-zero initial BTC & BSQ balances and a dummy payment account before tests start.  (See commit b4d3ea7.)", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r457513569", "createdAt": "2020-07-20T15:50:52Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class GetBalanceTest extends MethodTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+\n+            // Have to generate 1 regtest block for alice's wallet to show 10 BTC balance.\n+            bitcoinCli.generateBlocks(1);\n+\n+            // Give the alicedaemon time to parse the new block.\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testGetBalance() {\n+        var balance = grpcStubs.walletsService.getBalance(GetBalanceRequest.newBuilder().build()).getBalance();\n+        assertEquals(1000000000, balance);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzczNTI2OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTozMzo0NlrOGzXo0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1MzowMlrOGzcACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNzg0Mw==", "bodyText": "We could use the subtractfeefromamount parameter set to false to not have to calculate a fee.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456517843", "createdAt": "2020-07-17T15:33:46Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTMyMA==", "bodyText": "This is fixed in commit 5d7133a.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456589320", "createdAt": "2020-07-17T17:53:02Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNzg0Mw=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzgyNjA4OnYy", "diffSide": "RIGHT", "path": "apitest/src/main/resources/bitcoin.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo1OTo1MFrOGzYh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyODo0NFrOGzgR9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzMjQ1Mg==", "bodyText": "It might be worth it to not use a bitcoin.conf at all and pass all parameters inline, like this: https://gist.github.com/dmos62/20981dae799e2fc31b62dd443c44c7ae#file-tests-bats-L139\nSince your setup already works, this is low priority.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456532452", "createdAt": "2020-07-17T15:59:50Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/resources/bitcoin.conf", "diffHunk": "@@ -0,0 +1,16 @@\n+# This file is overwritten by ApiTestConfig.java at startup, to set the correct blocknotify script path.\n+regtest=1\n+\n+[regtest]\n+peerbloomfilters=1\n+rpcport=18443\n+\n+server=1\n+txindex=1\n+\n+# TODO migrate to rpcauth\n+rpcuser=apitest\n+rpcpassword=apitest\n+\n+# The blocknotify path will be defined and at runtime.\n+# blocknotify=bash ~/.bitcoin/blocknotify %", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1OTQ0NQ==", "bodyText": "Passing all bitcoind parameters inline is cleaner.  It's one less file the test harness has to write & install, and the bitcoind configuration is clearly visible in the 'apitest' logfile.   Fixed in commit f7d8c0e.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456659445", "createdAt": "2020-07-17T20:28:44Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/resources/bitcoin.conf", "diffHunk": "@@ -0,0 +1,16 @@\n+# This file is overwritten by ApiTestConfig.java at startup, to set the correct blocknotify script path.\n+regtest=1\n+\n+[regtest]\n+peerbloomfilters=1\n+rpcport=18443\n+\n+server=1\n+txindex=1\n+\n+# TODO migrate to rpcauth\n+rpcuser=apitest\n+rpcpassword=apitest\n+\n+# The blocknotify path will be defined and at runtime.\n+# blocknotify=bash ~/.bitcoin/blocknotify %", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzMjQ1Mg=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDc5NTQwOnYy", "diffSide": "RIGHT", "path": "apitest/src/main/resources/blocknotify", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoxODoxOVrOGzw-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTozOTozNFrOGzx0qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjg3NQ==", "bodyText": "Not requesting this change, but note that you probably can pass a blocknotify script to bitcoind inline, like this: https://gist.github.com/dmos62/20981dae799e2fc31b62dd443c44c7ae#file-tests-bats-L150 (untested).", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456932875", "createdAt": "2020-07-19T17:18:19Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/resources/blocknotify", "diffHunk": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+# Regtest ports start with 512*\n+\n+# To avoid pesky bitcoind io errors, do not specify ports Bisq is not listening to.\n+\n+# SeedNode listens on port 5120\n+echo $1 | nc -w 1 127.0.0.1 5120\n+\n+# Arb Node listens on port 5121\n+echo $1 | nc -w 1 127.0.0.1 5121\n+\n+# Alice Node listens on port 5122\n+echo $1 | nc -w 1 127.0.0.1 5122\n+\n+# Bob Node listens on port 5123\n+echo $1 | nc -w 1 127.0.0.1 5123\n+\n+# Some other node listens on port 5124, etc.\n+# echo $1 | nc -w 1 127.0.0.1 5124", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0Njg1OQ==", "bodyText": "I had thought of that;  we could pass an inline script for notifying only the ports being used by the scaffolding to avoid errors in the bitcoind log.  It's on the TODO list.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456946859", "createdAt": "2020-07-19T19:39:34Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/resources/blocknotify", "diffHunk": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+# Regtest ports start with 512*\n+\n+# To avoid pesky bitcoind io errors, do not specify ports Bisq is not listening to.\n+\n+# SeedNode listens on port 5120\n+echo $1 | nc -w 1 127.0.0.1 5120\n+\n+# Arb Node listens on port 5121\n+echo $1 | nc -w 1 127.0.0.1 5121\n+\n+# Alice Node listens on port 5122\n+echo $1 | nc -w 1 127.0.0.1 5122\n+\n+# Bob Node listens on port 5123\n+echo $1 | nc -w 1 127.0.0.1 5123\n+\n+# Some other node listens on port 5124, etc.\n+# echo $1 | nc -w 1 127.0.0.1 5124", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjg3NQ=="}, "originalCommit": {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjIyMTUyOnYy", "diffSide": "RIGHT", "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTo1Nzo0NlrOHAIQqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODo0NjowNFrOHCJuIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ==", "bodyText": "This change seems to change the behaviour of bitcoind in mainnet mode. Before 0.20.0 bitcoind had different default fallbackfees for mainnet and test modes (0 and 0.0002 respectively), which was then fixed by setting the defaults to 0 in all cases.\nBy setting fallbackfee=0.0002 we're setting it on all net modes. I can't tell if that's a problem.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r469897385", "createdAt": "2020-08-13T11:57:46Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -55,6 +55,7 @@ public void start() throws InterruptedException, IOException {\n                 + \" -txindex=1\"\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n+                + \" -fallbackfee=0.0002\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685839d3481e0cb0624673865c90f4503e41ab4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwMzM2NQ==", "bodyText": "Oh wait. This bitcoind will never run in mainnet, will it? Then the concern is that the apitest testing harness will have a different bitcoind environment than a production daemon would.\nAgain, I don't fully understand the significance of the fallbackfee option. It's used when the bitcoind can't estimate a \"floating fee\", right? And it only applies when sending funds from a wallet managed by the bitcoind instance, right? If both answers are yes, then I don't see this causing differences between prod and dev environments, but I'd like someone else to sanity check this too.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r469903365", "createdAt": "2020-08-13T12:09:04Z", "author": {"login": "dmos62"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -55,6 +55,7 @@ public void start() throws InterruptedException, IOException {\n                 + \" -txindex=1\"\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n+                + \" -fallbackfee=0.0002\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}, "originalCommit": {"oid": "685839d3481e0cb0624673865c90f4503e41ab4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNTE3NQ==", "bodyText": "This new fallbackfee setting would change the behaviour of bitcoind in mainnet mode -- from the default 0.00 to 0.0002.  But apitest cannot run on mainnet unless the code is hacked, and apitest should never run on mainnet -- it should never spend mainnet BTC, do a trade on mainnet, etc.\n\n\nThen the concern is that the apitest testing harness will have a different bitcoind environment than a production daemon would.\n\n\nYes, it does mean that the apitest harness will have a different bitcoind environment than a production daemon would, but that is what we want.  The bitcoin-core change (PR 16524) was to make the fallbackfee the same on all chains -- to fix bitcoin-core's inconsistency.  It was 0 (disabled) on mainnet, but 0.0002 for testnet/regtest chains.  Now (v0.20+), it is the same for all chains: 0 (disabled) by default for all chains.\nWe want bitcoin-core v0.20 (regtest) to behave like it did before the bitcoin-core PR 16524 change.\nIn the context of apitest, the fallbackfee affects the behaviour of the bitcoin-cli sendtoaddress command, where we use the subtractfeefromamount=false parameter.  (See FundWalletScenarioTest#testFundWallet())  This bitcoin-cli command errors if the fallbackfee is disabled on bitcoin-core v0.20.  Enabling it on bitcoind ensures this command behaves the same way it does on v0.19.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470025175", "createdAt": "2020-08-13T15:10:52Z", "author": {"login": "ghubstan"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -55,6 +55,7 @@ public void start() throws InterruptedException, IOException {\n                 + \" -txindex=1\"\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n+                + \" -fallbackfee=0.0002\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}, "originalCommit": {"oid": "685839d3481e0cb0624673865c90f4503e41ab4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODQ2Nw==", "bodyText": "I think this is reasonable. These tests should never be used to start a live bitcoind.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472018467", "createdAt": "2020-08-18T08:46:04Z", "author": {"login": "sqrrm"}, "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -55,6 +55,7 @@ public void start() throws InterruptedException, IOException {\n                 + \" -txindex=1\"\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n+                + \" -fallbackfee=0.0002\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}, "originalCommit": {"oid": "685839d3481e0cb0624673865c90f4503e41ab4f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzUyMzIzOnYy", "diffSide": "RIGHT", "path": "apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzowODo0NVrOHAUrxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoyMDoyMlrOHAVYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwMDkzMw==", "bodyText": "Typo? \"Could not generate ...\"?", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470100933", "createdAt": "2020-08-13T17:08:45Z", "author": {"login": "dmos62"}, "path": "apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java", "diffHunk": "@@ -40,9 +39,12 @@ public BitcoinCliHelper(ApiTestConfig config) {\n \n     public String getNewBtcAddress() {\n         try {\n-            String newAddress = new BitcoinCli(config, \"getnewaddress\").run().getOutput();\n-            assertNotNull(newAddress);\n-            return newAddress;\n+            BitcoinCli newAddress = new BitcoinCli(config, \"getnewaddress\").run();\n+\n+            if (newAddress.isError())\n+                fail(format(\"Could generate new bitcoin address:%n%s\", newAddress.getErrorMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176f0b2ad811462f6104520ca6563d75b3e9ea3c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDExMjM2Nw==", "bodyText": "Oops.  Fixed in commit 9637cc0.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470112367", "createdAt": "2020-08-13T17:20:22Z", "author": {"login": "ghubstan"}, "path": "apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java", "diffHunk": "@@ -40,9 +39,12 @@ public BitcoinCliHelper(ApiTestConfig config) {\n \n     public String getNewBtcAddress() {\n         try {\n-            String newAddress = new BitcoinCli(config, \"getnewaddress\").run().getOutput();\n-            assertNotNull(newAddress);\n-            return newAddress;\n+            BitcoinCli newAddress = new BitcoinCli(config, \"getnewaddress\").run();\n+\n+            if (newAddress.isError())\n+                fail(format(\"Could generate new bitcoin address:%n%s\", newAddress.getErrorMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwMDkzMw=="}, "originalCommit": {"oid": "176f0b2ad811462f6104520ca6563d75b3e9ea3c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY5MjM2OnYy", "diffSide": "RIGHT", "path": "apitest/src/test/java/bisq/apitest/method/MethodTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1MDowNlrOHCMC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo0MjoxMlrOHCVMYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472056530", "createdAt": "2020-08-18T09:50:06Z", "author": {"login": "sqrrm"}, "path": "apitest/src/test/java/bisq/apitest/method/MethodTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+import bisq.proto.grpc.GetFundingAddressesRequest;\n+import bisq.proto.grpc.LockWalletRequest;\n+import bisq.proto.grpc.RemoveWalletPasswordRequest;\n+import bisq.proto.grpc.SetWalletPasswordRequest;\n+import bisq.proto.grpc.UnlockWalletRequest;\n+\n+\n+\n+import bisq.apitest.ApiTestCase;\n+\n+public class MethodTest extends ApiTestCase {\n+\n+    // Convenience methods for building gRPC request objects\n+\n+    protected final GetBalanceRequest createBalanceRequest() {\n+        return GetBalanceRequest.newBuilder().build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String password) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String oldPassword, String newPassword) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(oldPassword).setNewPassword(newPassword).build();\n+    }\n+\n+    protected final RemoveWalletPasswordRequest createRemoveWalletPasswordRequest(String password) {\n+        return RemoveWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final UnlockWalletRequest createUnlockWalletRequest(String password, long timeout) {\n+        return UnlockWalletRequest.newBuilder().setPassword(password).setTimeout(timeout).build();\n+    }\n+\n+    protected final LockWalletRequest createLockWalletRequest() {\n+        return LockWalletRequest.newBuilder().build();\n+    }\n+\n+    protected final GetFundingAddressesRequest createGetFundingAddressesRequest() {\n+        return GetFundingAddressesRequest.newBuilder().build();\n+    }\n+\n+    // Convenience methods for calling frequently used & thoroughly tested gRPC services.\n+\n+    protected final long getBalance() {\n+        return grpcStubs.walletsService.getBalance(createBalanceRequest()).getBalance();\n+    }\n+\n+    protected final void unlockWallet(String password, long timeout) {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.unlockWallet(createUnlockWalletRequest(password, timeout));\n+    }\n+\n+    protected final void lockWallet() {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.lockWallet(createLockWalletRequest());\n+    }\n+\n+    protected final String getUnusedBtcAddress() {\n+        return grpcStubs.walletsService.getFundingAddresses(createGetFundingAddressesRequest())\n+                .getAddressBalanceInfoList()\n+                .stream()\n+                .filter(a -> a.getBalance() == 0 && a.getNumConfirmations() == 0)\n+                .findFirst()\n+                .get()\n+                .getAddress();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b081ad5f257aa644309ffa1c6625935943c5892"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNjQzMw==", "bodyText": "Extra while line removed in commit c3abd4e.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472206433", "createdAt": "2020-08-18T13:42:12Z", "author": {"login": "ghubstan"}, "path": "apitest/src/test/java/bisq/apitest/method/MethodTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+import bisq.proto.grpc.GetFundingAddressesRequest;\n+import bisq.proto.grpc.LockWalletRequest;\n+import bisq.proto.grpc.RemoveWalletPasswordRequest;\n+import bisq.proto.grpc.SetWalletPasswordRequest;\n+import bisq.proto.grpc.UnlockWalletRequest;\n+\n+\n+\n+import bisq.apitest.ApiTestCase;\n+\n+public class MethodTest extends ApiTestCase {\n+\n+    // Convenience methods for building gRPC request objects\n+\n+    protected final GetBalanceRequest createBalanceRequest() {\n+        return GetBalanceRequest.newBuilder().build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String password) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String oldPassword, String newPassword) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(oldPassword).setNewPassword(newPassword).build();\n+    }\n+\n+    protected final RemoveWalletPasswordRequest createRemoveWalletPasswordRequest(String password) {\n+        return RemoveWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final UnlockWalletRequest createUnlockWalletRequest(String password, long timeout) {\n+        return UnlockWalletRequest.newBuilder().setPassword(password).setTimeout(timeout).build();\n+    }\n+\n+    protected final LockWalletRequest createLockWalletRequest() {\n+        return LockWalletRequest.newBuilder().build();\n+    }\n+\n+    protected final GetFundingAddressesRequest createGetFundingAddressesRequest() {\n+        return GetFundingAddressesRequest.newBuilder().build();\n+    }\n+\n+    // Convenience methods for calling frequently used & thoroughly tested gRPC services.\n+\n+    protected final long getBalance() {\n+        return grpcStubs.walletsService.getBalance(createBalanceRequest()).getBalance();\n+    }\n+\n+    protected final void unlockWallet(String password, long timeout) {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.unlockWallet(createUnlockWalletRequest(password, timeout));\n+    }\n+\n+    protected final void lockWallet() {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.lockWallet(createLockWalletRequest());\n+    }\n+\n+    protected final String getUnusedBtcAddress() {\n+        return grpcStubs.walletsService.getFundingAddresses(createGetFundingAddressesRequest())\n+                .getAddressBalanceInfoList()\n+                .stream()\n+                .filter(a -> a.getBalance() == 0 && a.getNumConfirmations() == 0)\n+                .findFirst()\n+                .get()\n+                .getAddress();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjUzMA=="}, "originalCommit": {"oid": "8b081ad5f257aa644309ffa1c6625935943c5892"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDcxNDIxOnYy", "diffSide": "RIGHT", "path": "apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1NjowOFrOHCMQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo0MjoxOFrOHCVMrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472060011", "createdAt": "2020-08-18T09:56:08Z", "author": {"login": "sqrrm"}, "path": "apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package bisq.apitest.method;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.alicedaemon;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class WalletProtectionTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(alicedaemon.name());\n+            MILLISECONDS.sleep(2000);\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testSetWalletPassword() {\n+        var request = createSetWalletPasswordRequest(\"first-password\");\n+        grpcStubs.walletsService.setWalletPassword(request);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void testGetBalanceOnEncryptedWalletShouldThrowException() {\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(3)\n+    public void testUnlockWalletFor4Seconds() {\n+        var request = createUnlockWalletRequest(\"first-password\", 4);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        getBalance(); // should not throw 'wallet locked' exception\n+\n+        sleep(4500); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(4)\n+    public void testGetBalanceAfterUnlockTimeExpiryShouldThrowException() {\n+        var request = createUnlockWalletRequest(\"first-password\", 3);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        sleep(4000); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(5)\n+    public void testLockWalletBeforeUnlockTimeoutExpiry() {\n+        unlockWallet(\"first-password\", 60);\n+        var request = createLockWalletRequest();\n+        grpcStubs.walletsService.lockWallet(request);\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(6)\n+    public void testLockWalletWhenWalletAlreadyLockedShouldThrowException() {\n+        var request = createLockWalletRequest();\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs.walletsService.lockWallet(request));\n+        assertEquals(\"UNKNOWN: wallet is already locked\", exception.getMessage());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b081ad5f257aa644309ffa1c6625935943c5892"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNjUwOA==", "bodyText": "Extra while line removed in commit c3abd4e.", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472206508", "createdAt": "2020-08-18T13:42:18Z", "author": {"login": "ghubstan"}, "path": "apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package bisq.apitest.method;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.alicedaemon;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class WalletProtectionTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(alicedaemon.name());\n+            MILLISECONDS.sleep(2000);\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testSetWalletPassword() {\n+        var request = createSetWalletPasswordRequest(\"first-password\");\n+        grpcStubs.walletsService.setWalletPassword(request);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void testGetBalanceOnEncryptedWalletShouldThrowException() {\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(3)\n+    public void testUnlockWalletFor4Seconds() {\n+        var request = createUnlockWalletRequest(\"first-password\", 4);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        getBalance(); // should not throw 'wallet locked' exception\n+\n+        sleep(4500); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(4)\n+    public void testGetBalanceAfterUnlockTimeExpiryShouldThrowException() {\n+        var request = createUnlockWalletRequest(\"first-password\", 3);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        sleep(4000); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(5)\n+    public void testLockWalletBeforeUnlockTimeoutExpiry() {\n+        unlockWallet(\"first-password\", 60);\n+        var request = createLockWalletRequest();\n+        grpcStubs.walletsService.lockWallet(request);\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(6)\n+    public void testLockWalletWhenWalletAlreadyLockedShouldThrowException() {\n+        var request = createLockWalletRequest();\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs.walletsService.lockWallet(request));\n+        assertEquals(\"UNKNOWN: wallet is already locked\", exception.getMessage());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDAxMQ=="}, "originalCommit": {"oid": "8b081ad5f257aa644309ffa1c6625935943c5892"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2483, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}