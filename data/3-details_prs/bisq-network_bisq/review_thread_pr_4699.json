{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NTk1MTkw", "number": 4699, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0NTo1MFrOEzgj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzowNjo0NVrOEzg32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ2MzIwOnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0NTo1MFrOHqxS_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDozMjoxMlrOHrRsLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTkxOQ==", "bodyText": "I think a check for non null Trade would be good here.", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r514609919", "createdAt": "2020-10-29T22:45:50Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMDg5NQ==", "bodyText": "Fixes for these problems will go into a new 'reviewer's changes' PR based on the last branch in the chain.\nOK with you?", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r514620895", "createdAt": "2020-10-29T23:17:13Z", "author": {"login": "ghubstan"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTkxOQ=="}, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5MDY5NQ==", "bodyText": "Acceptable", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r514990695", "createdAt": "2020-10-30T10:09:19Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTkxOQ=="}, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MDY1NQ==", "bodyText": "Resolved in PR #4731, commit 0656c57.", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r515140655", "createdAt": "2020-10-30T14:32:12Z", "author": {"login": "ghubstan"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTkxOQ=="}, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ5MTY0OnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo1Njo0NVrOHqxjJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDozMjoyNFrOHrRsuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNDA1Mw==", "bodyText": "Also no check for null Trade", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r514614053", "createdAt": "2020-10-29T22:56:45Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());\n     }\n \n     public double getRemainingTradeDurationAsPercentage() {\n-        long maxPeriod = getMaxTradePeriod();\n-        long remaining = getRemainingTradeDuration();\n-        if (maxPeriod != 0) {\n-            return 1 - (double) remaining / (double) maxPeriod;\n-        } else\n-            return 0;\n+        return tradeUtil.getRemainingTradeDurationAsPercentage(dataModel.getTrade());\n     }\n \n     public String getDateForOpenDispute() {\n-        return DisplayUtils.formatDateTime(new Date(new Date().getTime() + getRemainingTradeDuration()));\n+        return DisplayUtils.formatDateTime(tradeUtil.getDateForOpenDispute(dataModel.getTrade()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MDc5Mw==", "bodyText": "Resolved in PR #4731, commit 0656c57.", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r515140793", "createdAt": "2020-10-30T14:32:24Z", "author": {"login": "ghubstan"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesViewModel.java", "diffHunk": "@@ -199,55 +205,30 @@ private void onMessageStateChanged(MessageState messageState) {\n     }\n \n     public String getPayoutAmount() {\n-        return dataModel.getTrade() != null ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount()) : \"\";\n+        return dataModel.getTrade() != null\n+                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())\n+                : \"\";\n     }\n \n     String getMarketLabel(PendingTradesListItem item) {\n-        if ((item == null))\n-            return \"\";\n-\n-        checkNotNull(item.getTrade().getOffer());\n-        checkNotNull(item.getTrade().getOffer().getCurrencyCode());\n-        return CurrencyUtil.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode());\n-    }\n-\n-    private long getMaxTradePeriod() {\n-        return dataModel.getOffer() != null ? dataModel.getOffer().getPaymentMethod().getMaxTradePeriod() : 0;\n-    }\n-\n-    @Nullable\n-    private Date getMaxTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getMaxTradePeriodDate() : null;\n-    }\n-\n-    @Nullable\n-    private Date getHalfTradePeriodDate() {\n-        return dataModel.getTrade() != null ? dataModel.getTrade().getHalfTradePeriodDate() : null;\n-    }\n-\n-    private long getRemainingTradeDuration() {\n-        return getMaxTradePeriodDate() != null ? getMaxTradePeriodDate().getTime() - new Date().getTime() : getMaxTradePeriod();\n+        return item == null ? \"\" : tradeUtil.getMarketDescription(item.getTrade());\n     }\n \n     public String getRemainingTradeDurationAsWords() {\n-        return FormattingUtils.formatDurationAsWords(Math.max(0, getRemainingTradeDuration()));\n+        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());\n     }\n \n     public double getRemainingTradeDurationAsPercentage() {\n-        long maxPeriod = getMaxTradePeriod();\n-        long remaining = getRemainingTradeDuration();\n-        if (maxPeriod != 0) {\n-            return 1 - (double) remaining / (double) maxPeriod;\n-        } else\n-            return 0;\n+        return tradeUtil.getRemainingTradeDurationAsPercentage(dataModel.getTrade());\n     }\n \n     public String getDateForOpenDispute() {\n-        return DisplayUtils.formatDateTime(new Date(new Date().getTime() + getRemainingTradeDuration()));\n+        return DisplayUtils.formatDateTime(tradeUtil.getDateForOpenDispute(dataModel.getTrade()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNDA1Mw=="}, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDUxNDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/TradeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzowNjo0NVrOHqxwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDozMzoyN1rOHrRvIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNzM4Ng==", "bodyText": "Prefer to return early, ie\nif (trade == null)\n    return;\n\nOffer offer = checkNotNull(trade.getOffer());\ncheckNotNull(offer.getPaymentMethod());\nreturn offer.getPaymentMethodNameWithCountryCode();", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r514617386", "createdAt": "2020-10-29T23:06:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/TradeUtil.java", "diffHunk": "@@ -108,4 +118,90 @@ public TradeUtil(BtcWalletService btcWalletService, KeyRing keyRing) {\n \n         return new Tuple2<>(multiSigAddress.getAddressString(), payoutAddress);\n     }\n+\n+    public long getRemainingTradeDuration(Trade trade) {\n+        return trade.getMaxTradePeriodDate() != null\n+                ? trade.getMaxTradePeriodDate().getTime() - new Date().getTime()\n+                : getMaxTradePeriod(trade);\n+    }\n+\n+    public long getMaxTradePeriod(Trade trade) {\n+        return trade.getOffer() != null\n+                ? trade.getOffer().getPaymentMethod().getMaxTradePeriod()\n+                : 0;\n+    }\n+\n+    public double getRemainingTradeDurationAsPercentage(Trade trade) {\n+        long maxPeriod = getMaxTradePeriod(trade);\n+        long remaining = getRemainingTradeDuration(trade);\n+        if (maxPeriod != 0) {\n+            return 1 - (double) remaining / (double) maxPeriod;\n+        } else\n+            return 0;\n+    }\n+\n+    public String getRemainingTradeDurationAsWords(Trade trade) {\n+        return formatDurationAsWords(Math.max(0, getRemainingTradeDuration(trade)));\n+    }\n+\n+    @Nullable\n+    public Date getHalfTradePeriodDate(Trade trade) {\n+        return trade != null ? trade.getHalfTradePeriodDate() : null;\n+    }\n+\n+    public Date getDateForOpenDispute(Trade trade) {\n+        return new Date(new Date().getTime() + getRemainingTradeDuration(trade));\n+    }\n+\n+    public String getMarketDescription(Trade trade) {\n+        if (trade == null)\n+            return \"\";\n+\n+        checkNotNull(trade.getOffer());\n+        checkNotNull(trade.getOffer().getCurrencyCode());\n+        return getCurrencyPair(trade.getOffer().getCurrencyCode());\n+    }\n+\n+    public String getPaymentMethodNameWithCountryCode(Trade trade) {\n+        String paymentMethodDescription = \"\";\n+        if (trade != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MTQwOA==", "bodyText": "Resolved in PR #4731, commit f764e9f.", "url": "https://github.com/bisq-network/bisq/pull/4699#discussion_r515141408", "createdAt": "2020-10-30T14:33:27Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/trade/TradeUtil.java", "diffHunk": "@@ -108,4 +118,90 @@ public TradeUtil(BtcWalletService btcWalletService, KeyRing keyRing) {\n \n         return new Tuple2<>(multiSigAddress.getAddressString(), payoutAddress);\n     }\n+\n+    public long getRemainingTradeDuration(Trade trade) {\n+        return trade.getMaxTradePeriodDate() != null\n+                ? trade.getMaxTradePeriodDate().getTime() - new Date().getTime()\n+                : getMaxTradePeriod(trade);\n+    }\n+\n+    public long getMaxTradePeriod(Trade trade) {\n+        return trade.getOffer() != null\n+                ? trade.getOffer().getPaymentMethod().getMaxTradePeriod()\n+                : 0;\n+    }\n+\n+    public double getRemainingTradeDurationAsPercentage(Trade trade) {\n+        long maxPeriod = getMaxTradePeriod(trade);\n+        long remaining = getRemainingTradeDuration(trade);\n+        if (maxPeriod != 0) {\n+            return 1 - (double) remaining / (double) maxPeriod;\n+        } else\n+            return 0;\n+    }\n+\n+    public String getRemainingTradeDurationAsWords(Trade trade) {\n+        return formatDurationAsWords(Math.max(0, getRemainingTradeDuration(trade)));\n+    }\n+\n+    @Nullable\n+    public Date getHalfTradePeriodDate(Trade trade) {\n+        return trade != null ? trade.getHalfTradePeriodDate() : null;\n+    }\n+\n+    public Date getDateForOpenDispute(Trade trade) {\n+        return new Date(new Date().getTime() + getRemainingTradeDuration(trade));\n+    }\n+\n+    public String getMarketDescription(Trade trade) {\n+        if (trade == null)\n+            return \"\";\n+\n+        checkNotNull(trade.getOffer());\n+        checkNotNull(trade.getOffer().getCurrencyCode());\n+        return getCurrencyPair(trade.getOffer().getCurrencyCode());\n+    }\n+\n+    public String getPaymentMethodNameWithCountryCode(Trade trade) {\n+        String paymentMethodDescription = \"\";\n+        if (trade != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNzM4Ng=="}, "originalCommit": {"oid": "24ba9215cd12f65605b23c2f5d53037258afd019"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2726, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}