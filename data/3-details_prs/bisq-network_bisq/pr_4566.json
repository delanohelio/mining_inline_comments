{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjc5Mjk0", "number": 4566, "title": "Trade protocol domain improvements", "bodyText": "To fix the issues with missing delayed payout tx I added a automatic re-send of the relevant message and changed the order of the tasks so that the deposit tx is not published if the message was not ACKed from the peer.\nAnother major change is to remove all automated handling of failed trades and show instead a warn icon in the open trades list. The user can then click on a button to move the trade to failed trades. A popup gives detail info about the failure and instructions. From failed trades there is also a button to move the trade back to pending trades.\nThe trade details window shows now always all 4 trade txs and if one is missing it sets the text color to red and shows a warn icon.\nUPDATE:\nThis PR also removes the refresh button for resending a message. It does instead an automated resend from the senders side until it gets an ACK message back, signaling that the message arrived.\nBeside that there have been fixed various edge case bugs.\nThis PR comes also with some major refactorings. The trade protocol got a new fluent interface so it is more readable.\nExample:\n public void onPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n        BuyerEvent event = BuyerEvent.PAYMENT_SENT;\n        expect(phase(Trade.Phase.DEPOSIT_CONFIRMED)\n                .with(event)\n                .preCondition(notDisputed()))\n                .setup(tasks(ApplyFilter.class,\n                        getVerifyPeersFeePaymentClass(),\n                        BuyerSignPayoutTx.class,\n                        BuyerSetupPayoutTxListener.class,\n                        BuyerSendCounterCurrencyTransferStartedMessage.class)\n                        .using(new TradeTaskRunner(trade,\n                                () -> {\n                                    resultHandler.handleResult();\n                                    handleTaskRunnerSuccess(event);\n                                },\n                                (errorMessage) -> {\n                                    errorMessageHandler.handleErrorMessage(errorMessage);\n                                    handleTaskRunnerFault(event, errorMessage);\n                                })))\n                .run(() -> trade.setState(Trade.State.BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED))\n                .executeTasks();\n    }\n\nFor testing error case there is a debug tool which let any selected task fail. With cmd+ z and devMode enabled it opens.\nAs the PR has tons of code changes it will require proper testing of all trade protocol and dispute related use cases, specially cases with the other peer being offline.\nI have tested quite a lot but have not tested backward compatibility yet. I am not aware that there should be any issue, but it should be tested as well.\nReview will be a bit challenging as there are so many changes, but I think a proper testing should be enough.\nHere are some screenshots:", "createdAt": "2020-09-27T06:46:25Z", "url": "https://github.com/bisq-network/bisq/pull/4566", "merged": true, "mergeCommit": {"oid": "418361afee91cd2c431cfe2a22003a643b521896"}, "closed": true, "closedAt": "2020-10-01T15:13:01Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 153, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMuKw5gH2gAyNDkzNjc5Mjk0OjQ1NmYxNmRkZjRiODg1MmFlODZmMDczOWMzNTIxODkxYmUzMGM1ZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOS5KPAFqTUwMDQ1Mjg3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "456f16ddf4b8852ae86f0739c3521891be30c5fa", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/456f16ddf4b8852ae86f0739c3521891be30c5fa", "committedDate": "2020-09-26T17:51:43Z", "message": "Remove handleTakeOfferRequest delegate method in maker trade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e16982b2b7eb249e97460aaa0fa2d8b39fe2490", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7e16982b2b7eb249e97460aaa0fa2d8b39fe2490", "committedDate": "2020-09-26T17:53:25Z", "message": "Remove onTakeOffer delegate method in taker trade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a661ce6ed52c3b4aa2cc0811a2768721a40e3354", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a661ce6ed52c3b4aa2cc0811a2768721a40e3354", "committedDate": "2020-09-26T17:55:23Z", "message": "Remove onPaymentStarted delegate method in buyer trade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c39a9b074f4684c43137e3c68d1e43804dfa484e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c39a9b074f4684c43137e3c68d1e43804dfa484e", "committedDate": "2020-09-26T17:56:42Z", "message": "Remove onPaymentReceived delegate method in seller trade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "143377b7e5c72f0a3fbf738aa6b656b55319356f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/143377b7e5c72f0a3fbf738aa6b656b55319356f", "committedDate": "2020-09-26T18:36:24Z", "message": "Make some fields in ProcessModel final.\nMake init methods more clear\n\nThere will be more refactoring commits in that area..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c242922b83190ba5009578387d537723a69734", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d6c242922b83190ba5009578387d537723a69734", "committedDate": "2020-09-26T20:52:09Z", "message": "Remove timeouts as it was not used before."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ac2d8e57ef486a736fe890e2cab45a728e4c6d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/27ac2d8e57ef486a736fe890e2cab45a728e4c6d", "committedDate": "2020-09-26T20:52:31Z", "message": "Remove never read field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74317636b007eb6dbca7c0dc7f25ee841fbc1da0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/74317636b007eb6dbca7c0dc7f25ee841fbc1da0", "committedDate": "2020-09-26T21:00:03Z", "message": "Apply code inspection suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ad72d0e4f522ca05fb33875a85e31950b40c31", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a9ad72d0e4f522ca05fb33875a85e31950b40c31", "committedDate": "2020-09-26T21:21:19Z", "message": "Remove offer at close to avoid that button stays active when taking the offer\n\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ce1ac92855913fb691767617adc404c9bd5987c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3ce1ac92855913fb691767617adc404c9bd5987c", "committedDate": "2020-09-26T22:36:41Z", "message": "Refactor: improve logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07bcf6c38f6d0a43a0b8fa414d8b22c069f8a8e7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/07bcf6c38f6d0a43a0b8fa414d8b22c069f8a8e7", "committedDate": "2020-09-26T22:36:57Z", "message": "Refactor: improve logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c6332d68df3b78ff8abbd40fb8b64a0f52dd662", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6c6332d68df3b78ff8abbd40fb8b64a0f52dd662", "committedDate": "2020-09-26T22:37:34Z", "message": "Allow also  Trade.Phase.PAYOUT_PUBLISHED in onPaymentReceived to support in failure situations to resend the msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5309f04b40cd6f1c3cf308194df2ea50b43be5f6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5309f04b40cd6f1c3cf308194df2ea50b43be5f6", "committedDate": "2020-09-26T23:33:25Z", "message": "DO not deactivate move to failed trades button. Use different text in popup if all txs are valid.\nFix icon style issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a30221ab5bbf7f56d30bcc65d060d868e8c2e4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f0a30221ab5bbf7f56d30bcc65d060d868e8c2e4", "committedDate": "2020-09-27T00:11:54Z", "message": "Fix bug with showing popup once arbitration has been started"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cabc5af2c630b5d58a9fffb6661cc297ddec768d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/cabc5af2c630b5d58a9fffb6661cc297ddec768d", "committedDate": "2020-09-27T00:36:07Z", "message": "Make processModel in Trade final and pass in constructor instead of in init method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a498273266ed7a0c0949ef79061b7401a73ff3", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/84a498273266ed7a0c0949ef79061b7401a73ff3", "committedDate": "2020-09-27T02:34:28Z", "message": "Remove TradeProtocol from Trade\n\nWe keep the TradeProtocol now in TradeManager in a hashmap.\nAs TradeProtocol constructors get called now earlier we need to add an onInitialized method which signals that the TradeProtocol is ready.\nThe processModel needs to get set the transient fields after construction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6deeecb8464918e48bbce3fca45443ca11621ba6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6deeecb8464918e48bbce3fca45443ca11621ba6", "committedDate": "2020-09-27T04:38:01Z", "message": "Move handling of mailbox messages from TradeManager to TradeProtocol\n\nMake removal of mailbox messages automated in TradeProtocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08591551b3a02ee9d5fbb8be995b2fb85fb6014", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d08591551b3a02ee9d5fbb8be995b2fb85fb6014", "committedDate": "2020-09-27T06:26:48Z", "message": "Add state listeners to warn icon columns to get correct state updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab30e546b04fdae1dd99df66a63ab73cb0f59a96", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ab30e546b04fdae1dd99df66a63ab73cb0f59a96", "committedDate": "2020-09-27T06:28:51Z", "message": "Merge branch 'master_upstream' into fix-delayed-payout-tx-issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a85c1ce56564a17347632f8d804ca88124803f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/28a85c1ce56564a17347632f8d804ca88124803f", "committedDate": "2020-09-27T07:04:35Z", "message": "Fix display strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2191693946a2919ac6c4af9e0eb7940f7e4dc0e1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2191693946a2919ac6c4af9e0eb7940f7e4dc0e1", "committedDate": "2020-09-27T07:13:39Z", "message": "Apply stupid Codacy rule\n\nhttps://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals\n\n```\nenum Color { BLACK, WHITE };\n\nColor nothing = null;\nif (nothing == Color.BLACK);      // runs fine\nif (nothing.equals(Color.BLACK)); // throws NullPointerException\n```\n```\nenum Color { BLACK, WHITE };\nenum Chiral { LEFT, RIGHT };\n\nif (Color.BLACK.equals(Chiral.LEFT)); // compiles fine\nif (Color.BLACK == Chiral.LEFT);      // DOESN'T COMPILE!!! Incompatible types!\n```\n\n\"To summarize, the arguments for using == on enum are:\n\n     It works.\n     It's faster.\n     It's safer at run-time.\n     It's safer at compile-time.\n\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b31f5b7b23915656bd5a3eeba9d67f9057eec97e", "committedDate": "2020-09-27T07:16:27Z", "message": "Another stupid codacy enforcement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzU5NDgz", "url": "https://github.com/bisq-network/bisq/pull/4566#pullrequestreview-497359483", "createdAt": "2020-09-28T09:55:19Z", "commit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1NToyMFrOHY2mpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoyMjozMVrOHZGI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjUwMA==", "bodyText": "Why create multiple streams here, they are concatenated into one in the end anyway.\nNaming is also suspect, AVAILABLE is a keyword for a certain type of address, perhaps spendable would be better?\nSomething like\nvar spendable = Stream.concat...\nspendable = Stream.concat(spendable, ...\n...\nspendable.filter...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495822500", "createdAt": "2020-09-28T09:55:20Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -738,6 +734,15 @@ public Coin getSavingWalletBalance() {\n                 .sum());\n     }\n \n+    public Stream<AddressEntry> getAddressEntriesForAvailableBalanceStream() {\n+        Stream<AddressEntry> availableAndPayout = Stream.concat(getAddressEntries(AddressEntry.Context.TRADE_PAYOUT)\n+                .stream(), getFundedAvailableAddressEntries().stream());\n+        Stream<AddressEntry> available = Stream.concat(availableAndPayout,\n+                getAddressEntries(AddressEntry.Context.ARBITRATOR).stream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNTY0Ng==", "bodyText": "Would be nice to rename the protobuf class to TakeOfferRequest as well to conform with the rest of the code, this looks confusing.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495825646", "createdAt": "2020-09-28T10:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/proto/network/CoreNetworkProtoResolver.java", "diffHunk": "@@ -147,7 +147,7 @@ public NetworkEnvelope fromProto(protobuf.NetworkEnvelope proto) throws Protobuf\n                 case REFRESH_TRADE_STATE_REQUEST:\n                     return RefreshTradeStateRequest.fromProto(proto.getRefreshTradeStateRequest(), messageVersion);\n                 case INPUTS_FOR_DEPOSIT_TX_REQUEST:\n-                    return InputsForDepositTxRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);\n+                    return TakeOfferRequest.fromProto(proto.getInputsForDepositTxRequest(), this, messageVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjM0NQ==", "bodyText": "I'm not following why this is done. A comment would likely clarify.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495856345", "createdAt": "2020-09-28T11:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "diffHunk": "@@ -250,213 +203,137 @@ public void readPersisted() {\n     }\n \n \n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // DecryptedDirectMessageListener\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public void onDirectMessage(DecryptedMessageWithPubKey message, NodeAddress peer) {\n+        NetworkEnvelope networkEnvelope = message.getNetworkEnvelope();\n+        if (networkEnvelope instanceof TakeOfferRequest) {\n+            handleTakeOfferRequest(peer, (TakeOfferRequest) networkEnvelope);\n+        }\n+    }\n+\n+    // The maker received a TakeOfferRequest\n+    private void handleTakeOfferRequest(NodeAddress peer, TakeOfferRequest takeOfferRequest) {\n+        log.info(\"Received TakeOfferRequest from {} with tradeId {} and uid {}\",\n+                peer, takeOfferRequest.getTradeId(), takeOfferRequest.getUid());\n+\n+        try {\n+            Validator.nonEmptyStringOf(takeOfferRequest.getTradeId());\n+        } catch (Throwable t) {\n+            log.warn(\"Invalid TakeOfferRequest \" + takeOfferRequest.toString());\n+            return;\n+        }\n+\n+        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(takeOfferRequest.getTradeId());\n+        if (!openOfferOptional.isPresent()) {\n+            return;\n+        }\n+\n+        OpenOffer openOffer = openOfferOptional.get();\n+        if (openOffer.getState() != OpenOffer.State.AVAILABLE) {\n+            return;\n+        }\n+\n+        Offer offer = openOffer.getOffer();\n+        openOfferManager.reserveOpenOffer(openOffer);\n+        Trade trade;\n+        if (offer.isBuyOffer()) {\n+            trade = new BuyerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        } else {\n+            trade = new SellerAsMakerTrade(offer,\n+                    Coin.valueOf(takeOfferRequest.getTxFee()),\n+                    Coin.valueOf(takeOfferRequest.getTakerFee()),\n+                    takeOfferRequest.isCurrencyForTakerFeeBtc(),\n+                    openOffer.getArbitratorNodeAddress(),\n+                    openOffer.getMediatorNodeAddress(),\n+                    openOffer.getRefundAgentNodeAddress(),\n+                    tradableListStorage,\n+                    btcWalletService,\n+                    getNewProcessModel(offer));\n+        }\n+        TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);\n+        tradeProtocolByTradeId.put(trade.getId(), tradeProtocol);\n+        tradableList.add(trade);\n+        initTradeAndProtocol(trade, tradeProtocol);\n+\n+        ((MakerProtocol) tradeProtocol).handleTakeOfferRequest(takeOfferRequest, peer, errorMessage -> {\n+            if (takeOfferRequestErrorMessageHandler != null)\n+                takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);\n+        });\n+    }\n+\n+\n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // Lifecycle\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     public void onAllServicesInitialized() {\n-        if (p2PService.isBootstrapped())\n-            initPendingTrades();\n-        else\n+        if (p2PService.isBootstrapped()) {\n+            initPersistedTrades();\n+        } else {\n             p2PService.addP2PServiceListener(new BootstrapListener() {\n                 @Override\n                 public void onUpdatedDataReceived() {\n-                    // Get called after onMailboxMessageAdded from initial data request\n-                    // The mailbox message will be removed inside the tasks after they are processed successfully\n-                    initPendingTrades();\n+                    initPersistedTrades();\n                 }\n             });\n+        }\n \n-        tradableList.getList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n+        getTradesAsObservableList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());\n         onTradesChanged();\n \n-        getAddressEntriesForAvailableBalanceStream()\n+        btcWalletService.getAddressEntriesForAvailableBalanceStream()\n                 .filter(addressEntry -> addressEntry.getOfferId() != null)\n                 .forEach(addressEntry -> {\n                     log.warn(\"Swapping pending OFFER_FUNDING entries at startup. offerId={}\", addressEntry.getOfferId());\n                     btcWalletService.swapTradeEntryToAvailableEntry(addressEntry.getOfferId(), AddressEntry.Context.OFFER_FUNDING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjYzNA==", "bodyText": "Why change the copyright notice?", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495902634", "createdAt": "2020-09-28T12:33:03Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n  * License for more details.\n  *\n- * You should have received a copy of the GNU Affero General Public License\n+ * You should have with a copy of the GNU Affero General Public License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjY2MA==", "bodyText": "Might want to return early to avoid large blocks", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495952660", "createdAt": "2020-09-28T13:48:01Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.taskrunner.Task;\n+\n+import java.text.MessageFormat;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.core.util.Validator.isTradeIdValid;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+// Main class. Contains the condition and setup, if condition is valid it will execute the\n+// taskRunner and the optional runnable.\n+public class FluentProtocol {\n+\n+\n+    interface Event {\n+        String name();\n+    }\n+\n+    private final TradeProtocol tradeProtocol;\n+    private Condition condition;\n+    private Setup setup;\n+    private Consumer<Condition.Result> resultHandler;\n+\n+    public FluentProtocol(TradeProtocol tradeProtocol) {\n+        this.tradeProtocol = tradeProtocol;\n+    }\n+\n+    protected FluentProtocol condition(Condition condition) {\n+        this.condition = condition;\n+        return this;\n+    }\n+\n+    protected FluentProtocol setup(Setup setup) {\n+        this.setup = setup;\n+        return this;\n+    }\n+\n+\n+    public FluentProtocol resultHandler(Consumer<Condition.Result> resultHandler) {\n+        this.resultHandler = resultHandler;\n+        return this;\n+    }\n+\n+    // Can be used before or after executeTasks\n+    public FluentProtocol run(Runnable runnable) {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            runnable.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+    public FluentProtocol executeTasks() {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MDYyNw==", "bodyText": "Could return early for non null taskRunner...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495960627", "createdAt": "2020-09-28T13:58:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/FluentProtocol.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.taskrunner.Task;\n+\n+import java.text.MessageFormat;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.core.util.Validator.isTradeIdValid;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+// Main class. Contains the condition and setup, if condition is valid it will execute the\n+// taskRunner and the optional runnable.\n+public class FluentProtocol {\n+\n+\n+    interface Event {\n+        String name();\n+    }\n+\n+    private final TradeProtocol tradeProtocol;\n+    private Condition condition;\n+    private Setup setup;\n+    private Consumer<Condition.Result> resultHandler;\n+\n+    public FluentProtocol(TradeProtocol tradeProtocol) {\n+        this.tradeProtocol = tradeProtocol;\n+    }\n+\n+    protected FluentProtocol condition(Condition condition) {\n+        this.condition = condition;\n+        return this;\n+    }\n+\n+    protected FluentProtocol setup(Setup setup) {\n+        this.setup = setup;\n+        return this;\n+    }\n+\n+\n+    public FluentProtocol resultHandler(Consumer<Condition.Result> resultHandler) {\n+        this.resultHandler = resultHandler;\n+        return this;\n+    }\n+\n+    // Can be used before or after executeTasks\n+    public FluentProtocol run(Runnable runnable) {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            runnable.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+    public FluentProtocol executeTasks() {\n+        Condition.Result result = condition.getResult();\n+        if (result.isValid) {\n+            if (setup.getTimeoutSec() > 0) {\n+                tradeProtocol.startTimeout(setup.getTimeoutSec());\n+            }\n+\n+            NodeAddress peer = condition.getPeer();\n+            if (peer != null) {\n+                tradeProtocol.processModel.setTempTradingPeerNodeAddress(peer);\n+            }\n+\n+            TradeMessage message = condition.getMessage();\n+            if (message != null) {\n+                tradeProtocol.processModel.setTradeMessage(message);\n+            }\n+\n+            TradeTaskRunner taskRunner = setup.getTaskRunner(message, condition.getEvent());\n+            taskRunner.addTasks(setup.getTasks());\n+            taskRunner.run();\n+        } else if (resultHandler != null) {\n+            resultHandler.accept(result);\n+        }\n+        return this;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Condition class\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Slf4j\n+    public static class Condition {\n+        enum Result {\n+            VALID(true),\n+            INVALID_PHASE,\n+            INVALID_STATE,\n+            INVALID_PRE_CONDITION,\n+            INVALID_TRADE_ID;\n+\n+            @Getter\n+            private boolean isValid;\n+            @Getter\n+            private String info;\n+\n+            Result() {\n+            }\n+\n+            Result(boolean isValid) {\n+                this.isValid = isValid;\n+            }\n+\n+            public Result info(String info) {\n+                this.info = info;\n+                return this;\n+            }\n+        }\n+\n+        private final Set<Trade.Phase> expectedPhases = new HashSet<>();\n+        private final Set<Trade.State> expectedStates = new HashSet<>();\n+        private final Set<Boolean> preConditions = new HashSet<>();\n+        private final Trade trade;\n+        @Nullable\n+        private Result result;\n+\n+        @Nullable\n+        @Getter\n+        private TradeMessage message;\n+        @Nullable\n+        @Getter\n+        private Event event;\n+        @Nullable\n+        @Getter\n+        private NodeAddress peer;\n+        @Nullable\n+        private Runnable preConditionFailedHandler;\n+\n+\n+        public Condition(Trade trade) {\n+            this.trade = trade;\n+        }\n+\n+        public Condition phase(Trade.Phase expectedPhase) {\n+            checkArgument(result == null);\n+            this.expectedPhases.add(expectedPhase);\n+            return this;\n+        }\n+\n+        public Condition anyPhase(Trade.Phase... expectedPhases) {\n+            checkArgument(result == null);\n+            this.expectedPhases.addAll(Set.of(expectedPhases));\n+            return this;\n+        }\n+\n+        public Condition state(Trade.State state) {\n+            checkArgument(result == null);\n+            this.expectedStates.add(state);\n+            return this;\n+        }\n+\n+        public Condition anyState(Trade.State... states) {\n+            checkArgument(result == null);\n+            this.expectedStates.addAll(Set.of(states));\n+            return this;\n+        }\n+\n+        public Condition with(TradeMessage message) {\n+            checkArgument(result == null);\n+            this.message = message;\n+            return this;\n+        }\n+\n+        public Condition with(Event event) {\n+            checkArgument(result == null);\n+            this.event = event;\n+            return this;\n+        }\n+\n+        public Condition from(NodeAddress peer) {\n+            checkArgument(result == null);\n+            this.peer = peer;\n+            return this;\n+        }\n+\n+        public Condition preCondition(boolean preCondition) {\n+            checkArgument(result == null);\n+            preConditions.add(preCondition);\n+            return this;\n+        }\n+\n+        public Condition preCondition(boolean preCondition, Runnable conditionFailedHandler) {\n+            checkArgument(result == null);\n+            preCondition(preCondition);\n+\n+            this.preConditionFailedHandler = conditionFailedHandler;\n+            return this;\n+        }\n+\n+        public Result getResult() {\n+            if (result == null) {\n+                boolean isTradeIdValid = message == null || isTradeIdValid(trade.getId(), message);\n+                if (!isTradeIdValid) {\n+                    String info = MessageFormat.format(\"TradeId does not match tradeId in message, TradeId={0}, tradeId in message={1}\",\n+                            trade.getId(), message.getTradeId());\n+                    result = Result.INVALID_TRADE_ID.info(info);\n+                    return result;\n+                }\n+\n+\n+                Result phaseValidationResult = getPhaseResult();\n+                if (!phaseValidationResult.isValid) {\n+                    result = phaseValidationResult;\n+                    return result;\n+                }\n+\n+                Result stateResult = getStateResult();\n+                if (!stateResult.isValid) {\n+                    result = stateResult;\n+                    return result;\n+                }\n+\n+                boolean allPreConditionsMet = preConditions.stream().allMatch(e -> e);\n+                if (!allPreConditionsMet) {\n+                    String info = MessageFormat.format(\"PreConditions not met. preConditions={0}, this={1}, tradeId={2}\",\n+                            preConditions, this, trade.getId());\n+                    result = Result.INVALID_PRE_CONDITION.info(info);\n+\n+                    if (preConditionFailedHandler != null) {\n+                        preConditionFailedHandler.run();\n+                    }\n+                    return result;\n+                }\n+\n+                result = Result.VALID;\n+            }\n+            return result;\n+        }\n+\n+        private Result getPhaseResult() {\n+            if (expectedPhases.isEmpty()) {\n+                return Result.VALID;\n+            }\n+\n+            boolean isPhaseValid = expectedPhases.stream().anyMatch(e -> e == trade.getPhase());\n+            String trigger = message != null ?\n+                    message.getClass().getSimpleName() :\n+                    event != null ?\n+                            event.name() + \" event\" :\n+                            \"\";\n+            if (isPhaseValid) {\n+                String info = MessageFormat.format(\"We received a {0} at phase {1} and state {2}, tradeId={3}\",\n+                        trigger,\n+                        trade.getPhase(),\n+                        trade.getState(),\n+                        trade.getId());\n+                log.info(info);\n+                return Result.VALID.info(info);\n+            } else {\n+                String info = MessageFormat.format(\"We received a {0} but we are are not in the expected phase. \" +\n+                                \"Expected phases={1}, Trade phase={2}, Trade state= {3}, tradeId={4}\",\n+                        trigger,\n+                        expectedPhases,\n+                        trade.getPhase(),\n+                        trade.getState(),\n+                        trade.getId());\n+                return Result.INVALID_PHASE.info(info);\n+            }\n+        }\n+\n+        private Result getStateResult() {\n+            if (expectedStates.isEmpty()) {\n+                return Result.VALID;\n+            }\n+\n+            boolean isStateValid = expectedStates.stream().anyMatch(e -> e == trade.getState());\n+            String trigger = message != null ?\n+                    message.getClass().getSimpleName() :\n+                    event != null ?\n+                            event.name() + \" event\" :\n+                            \"\";\n+            if (isStateValid) {\n+                String info = MessageFormat.format(\"We received a {0} at state {1}, tradeId={2}\",\n+                        trigger,\n+                        trade.getState(),\n+                        trade.getId());\n+                log.info(info);\n+                return Result.VALID.info(info);\n+            } else {\n+                String info = MessageFormat.format(\"We received a {0} but we are are not in the expected state. \" +\n+                                \"Expected states={1}, Trade state= {2}, tradeId={3}\",\n+                        trigger,\n+                        expectedStates,\n+                        trade.getState(),\n+                        trade.getId());\n+                return Result.INVALID_STATE.info(info);\n+            }\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Setup class\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Slf4j\n+    public static class Setup {\n+        private final TradeProtocol tradeProtocol;\n+        private final Trade trade;\n+        @Getter\n+        private Class<? extends Task<Trade>>[] tasks;\n+        @Getter\n+        private int timeoutSec;\n+        @Nullable\n+        private TradeTaskRunner taskRunner;\n+\n+        public Setup(TradeProtocol tradeProtocol, Trade trade) {\n+            this.tradeProtocol = tradeProtocol;\n+            this.trade = trade;\n+        }\n+\n+        @SafeVarargs\n+        public final Setup tasks(Class<? extends Task<Trade>>... tasks) {\n+            this.tasks = tasks;\n+            return this;\n+        }\n+\n+        public Setup withTimeout(int timeoutSec) {\n+            this.timeoutSec = timeoutSec;\n+            return this;\n+        }\n+\n+        public Setup using(TradeTaskRunner taskRunner) {\n+            this.taskRunner = taskRunner;\n+            return this;\n+        }\n+\n+        public TradeTaskRunner getTaskRunner(@Nullable TradeMessage message, @Nullable Event event) {\n+            if (taskRunner == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NjgwMA==", "bodyText": "Changed copyright text", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495966800", "createdAt": "2020-09-28T14:06:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsTakerProtocol.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n  * License for more details.\n  *\n- * You should have received a copy of the GNU Affero General Public License\n+ * You should have with a copy of the GNU Affero General Public License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDU4Nw==", "bodyText": "Should DEPOSIT_PUBLISHED really be expected? I thought deposit would only be published after this message was acked.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495990587", "createdAt": "2020-09-28T14:39:50Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTEyMA==", "bodyText": "This log is quite odd, We with a...", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r495991120", "createdAt": "2020-09-28T14:40:32Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)\n+                .with(message)\n+                .from(peer)\n+                .preCondition(trade.getDepositTx() == null || trade.getDelayedPayoutTx() == null,\n+                        () -> {\n+                            log.warn(\"We with a DepositTxAndDelayedPayoutTxMessage but we have already processed the deposit and \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNDc3Mw==", "bodyText": "Suggested change", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496004773", "createdAt": "2020-09-28T14:55:54Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerProtocol.java", "diffHunk": "@@ -17,9 +17,176 @@\n \n package bisq.core.trade.protocol;\n \n+import bisq.core.trade.BuyerTrade;\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.DelayedPayoutTxSignatureRequest;\n+import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.PayoutTxPublishedMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.PublishTradeStatistics;\n+import bisq.core.trade.protocol.tasks.TradeTask;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessDepositTxAndDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerProcessPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSendCounterCurrencyTransferStartedMessage;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupDepositTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSetupPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerSignPayoutTx;\n+import bisq.core.trade.protocol.tasks.buyer.BuyerVerifiesFinalDelayedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n import bisq.common.handlers.ErrorMessageHandler;\n import bisq.common.handlers.ResultHandler;\n \n-public interface BuyerProtocol {\n-    void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler);\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class BuyerProtocol extends DisputeProtocol {\n+    enum BuyerEvent implements FluentProtocol.Event {\n+        STARTUP,\n+        PAYMENT_SENT\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public BuyerProtocol(BuyerTrade trade) {\n+        super(trade);\n+    }\n+\n+    @Override\n+    protected void onInitialized() {\n+        super.onInitialized();\n+        // We get called the constructor with any possible state and phase. As we don't want to log an error for such\n+        // cases we use the alternative 'given' method instead of 'expect'.\n+        given(phase(Trade.Phase.TAKER_FEE_PUBLISHED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupDepositTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSetupPayoutTxListener.class))\n+                .executeTasks();\n+\n+        given(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.FIAT_RECEIVED)\n+                .anyState(Trade.State.BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG,\n+                        Trade.State.BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG)\n+                .with(BuyerEvent.STARTUP))\n+                .setup(tasks(BuyerSendCounterCurrencyTransferStartedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    @Override\n+    public void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+\n+        if (message instanceof DepositTxAndDelayedPayoutTxMessage) {\n+            handle((DepositTxAndDelayedPayoutTxMessage) message, peer);\n+        } else if (message instanceof PayoutTxPublishedMessage) {\n+            handle((PayoutTxPublishedMessage) message, peer);\n+        }\n+    }\n+\n+    protected abstract void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer);\n+\n+    // The DepositTxAndDelayedPayoutTxMessage is a mailbox message as earlier we use only the deposit tx which can\n+    // be also with from the network once published.\n+    // Now we send the delayed payout tx as well and with that this message is mandatory for continuing the protocol.\n+    // We do not support mailbox message handling during the take offer process as it is expected that both peers\n+    // are online.\n+    // For backward compatibility and extra resilience we still keep DepositTxAndDelayedPayoutTxMessage as a\n+    // mailbox message but the stored in mailbox case is not expected and the seller would try to send the message again\n+    // in the hope to reach the buyer directly.\n+    protected void handle(DepositTxAndDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.TAKER_FEE_PUBLISHED, Trade.Phase.DEPOSIT_PUBLISHED)\n+                .with(message)\n+                .from(peer)\n+                .preCondition(trade.getDepositTx() == null || trade.getDelayedPayoutTx() == null,\n+                        () -> {\n+                            log.warn(\"We with a DepositTxAndDelayedPayoutTxMessage but we have already processed the deposit and \" +\n+                                    \"delayed payout tx so we ignore the message. This can happen if the ACK message to the peer did not \" +\n+                                    \"arrive and the peer repeats sending us the message. We send another ACK msg.\");\n+                            stopTimeout();\n+                            sendAckMessage(message, true, null);\n+                            removeMailboxMessageAfterProcessing(message);\n+                        }))\n+                .setup(tasks(BuyerProcessDepositTxAndDelayedPayoutTxMessage.class,\n+                        BuyerVerifiesFinalDelayedPayoutTx.class,\n+                        PublishTradeStatistics.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    stopTimeout();\n+                                    handleTaskRunnerSuccess(message);\n+                                },\n+                                errorMessage -> handleTaskRunnerFault(message, errorMessage))))\n+                .run(() -> processModel.witnessDebugLog(trade))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // User interaction\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void onPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        BuyerEvent event = BuyerEvent.PAYMENT_SENT;\n+        expect(phase(Trade.Phase.DEPOSIT_CONFIRMED)\n+                .with(event)\n+                .preCondition(notDisputed()))\n+                .setup(tasks(ApplyFilter.class,\n+                        getVerifyPeersFeePaymentClass(),\n+                        BuyerSignPayoutTx.class,\n+                        BuyerSetupPayoutTxListener.class,\n+                        BuyerSendCounterCurrencyTransferStartedMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                (errorMessage) -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .run(() -> trade.setState(Trade.State.BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Incoming message Payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    protected void handle(PayoutTxPublishedMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.FIAT_SENT, Trade.Phase.PAYOUT_PUBLISHED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(BuyerProcessPayoutTxPublishedMessage.class))\n+                .executeTasks();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNzg5MQ==", "bodyText": "ARBITRATION generally refers to legacy arbitration in code. REFUND is what's been used everywhere for refund cases.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496007891", "createdAt": "2020-09-28T14:58:34Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.MediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.messages.MediatedPayoutTxSignatureMessage;\n+import bisq.core.trade.messages.PeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.ProcessPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.arbitration.PublishedDelayedPayoutTx;\n+import bisq.core.trade.protocol.tasks.arbitration.SendPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.mediation.BroadcastMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.FinalizeMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SetupMediatedPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.mediation.SignMediatedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.handlers.ErrorMessageHandler;\n+import bisq.common.handlers.ResultHandler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class DisputeProtocol extends TradeProtocol {\n+\n+    enum DisputeEvent implements FluentProtocol.Event {\n+        MEDIATION_RESULT_ACCEPTED,\n+        MEDIATION_RESULT_REJECTED,\n+        ARBITRATION_REQUESTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxODIxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (message instanceof MediatedPayoutTxSignatureMessage) {\n          \n          \n            \n                        handle((MediatedPayoutTxSignatureMessage) message, peer);\n          \n          \n            \n                    } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n          \n          \n            \n                        handle((MediatedPayoutTxPublishedMessage) message, peer);\n          \n          \n            \n                    } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n          \n          \n            \n                        handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n          \n          \n            \n                    }\n          \n          \n            \n                    onTradeMessage(message, peer);", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496018211", "createdAt": "2020-09-28T15:07:15Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/DisputeProtocol.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.MediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.messages.MediatedPayoutTxSignatureMessage;\n+import bisq.core.trade.messages.PeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.ApplyFilter;\n+import bisq.core.trade.protocol.tasks.ProcessPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.arbitration.PublishedDelayedPayoutTx;\n+import bisq.core.trade.protocol.tasks.arbitration.SendPeerPublishedDelayedPayoutTxMessage;\n+import bisq.core.trade.protocol.tasks.mediation.BroadcastMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.FinalizeMediatedPayoutTx;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.ProcessMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutSignatureMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SendMediatedPayoutTxPublishedMessage;\n+import bisq.core.trade.protocol.tasks.mediation.SetupMediatedPayoutTxListener;\n+import bisq.core.trade.protocol.tasks.mediation.SignMediatedPayoutTx;\n+\n+import bisq.network.p2p.NodeAddress;\n+\n+import bisq.common.handlers.ErrorMessageHandler;\n+import bisq.common.handlers.ResultHandler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class DisputeProtocol extends TradeProtocol {\n+\n+    enum DisputeEvent implements FluentProtocol.Event {\n+        MEDIATION_RESULT_ACCEPTED,\n+        MEDIATION_RESULT_REJECTED,\n+        ARBITRATION_REQUESTED\n+    }\n+\n+    public DisputeProtocol(Trade trade) {\n+        super(trade);\n+    }\n+\n+    protected boolean notDisputed() {\n+        return trade.getDisputeState() == Trade.DisputeState.NO_DISPUTE;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // User interaction: Trader accepts mediation result\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    // Trader has not yet received the peer's signature but has clicked the accept button.\n+    public void onAcceptMediationResult(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.MEDIATION_RESULT_ACCEPTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getProcessModel().getTradingPeer().getMediatedPayoutTxSignature() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"We have received already the signature from the peer.\"))\n+                .preCondition(trade.getPayoutTx() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"Payout tx is already published.\")))\n+                .setup(tasks(ApplyFilter.class,\n+                        SignMediatedPayoutTx.class,\n+                        SendMediatedPayoutSignatureMessage.class,\n+                        SetupMediatedPayoutTxListener.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+    // Trader has already received the peer's signature and has clicked the accept button as well.\n+    public void onFinalizeMediationResultPayout(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.MEDIATION_RESULT_ACCEPTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getPayoutTx() == null,\n+                        () -> errorMessageHandler.handleErrorMessage(\"Payout tx is already published.\")))\n+                .setup(tasks(ApplyFilter.class,\n+                        SignMediatedPayoutTx.class,\n+                        FinalizeMediatedPayoutTx.class,\n+                        BroadcastMediatedPayoutTx.class,\n+                        SendMediatedPayoutTxPublishedMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Mediation: incoming message\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    protected void handle(MediatedPayoutTxSignatureMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessMediatedPayoutSignatureMessage.class))\n+                .executeTasks();\n+    }\n+\n+    protected void handle(MediatedPayoutTxPublishedMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessMediatedPayoutTxPublishedMessage.class))\n+                .executeTasks();\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Delayed payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void onPublishDelayedPayoutTx(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n+        DisputeEvent event = DisputeEvent.ARBITRATION_REQUESTED;\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(event)\n+                .preCondition(trade.getDelayedPayoutTx() != null))\n+                .setup(tasks(PublishedDelayedPayoutTx.class,\n+                        SendPeerPublishedDelayedPayoutTxMessage.class)\n+                        .using(new TradeTaskRunner(trade,\n+                                () -> {\n+                                    resultHandler.handleResult();\n+                                    handleTaskRunnerSuccess(event);\n+                                },\n+                                errorMessage -> {\n+                                    errorMessageHandler.handleErrorMessage(errorMessage);\n+                                    handleTaskRunnerFault(event, errorMessage);\n+                                })))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Peer has published the delayed payout tx\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private void handle(PeerPublishedDelayedPayoutTxMessage message, NodeAddress peer) {\n+        expect(anyPhase(Trade.Phase.DEPOSIT_CONFIRMED,\n+                Trade.Phase.FIAT_SENT,\n+                Trade.Phase.FIAT_RECEIVED)\n+                .with(message)\n+                .from(peer))\n+                .setup(tasks(ProcessPeerPublishedDelayedPayoutTxMessage.class))\n+                .executeTasks();\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Dispatcher\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    protected void onTradeMessage(TradeMessage message, NodeAddress peer) {\n+        if (message instanceof MediatedPayoutTxSignatureMessage) {\n+            handle((MediatedPayoutTxSignatureMessage) message, peer);\n+        } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n+            handle((MediatedPayoutTxPublishedMessage) message, peer);\n+        } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n+            handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n+        }\n+    }\n+\n+    @Override\n+    protected void onMailboxMessage(TradeMessage message, NodeAddress peer) {\n+        super.onMailboxMessage(message, peer);\n+        if (message instanceof MediatedPayoutTxSignatureMessage) {\n+            handle((MediatedPayoutTxSignatureMessage) message, peer);\n+        } else if (message instanceof MediatedPayoutTxPublishedMessage) {\n+            handle((MediatedPayoutTxPublishedMessage) message, peer);\n+        } else if (message instanceof PeerPublishedDelayedPayoutTxMessage) {\n+            handle((PeerPublishedDelayedPayoutTxMessage) message, peer);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NDk5Ng==", "bodyText": "Could default these to {}", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496054996", "createdAt": "2020-09-28T15:49:14Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/SendMailboxMessageTask.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.protocol.tasks;\n+\n+import bisq.core.trade.Trade;\n+import bisq.core.trade.messages.TradeMessage;\n+\n+import bisq.network.p2p.NodeAddress;\n+import bisq.network.p2p.SendMailboxMessageListener;\n+\n+import bisq.common.taskrunner.TaskRunner;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class SendMailboxMessageTask extends TradeTask {\n+    public SendMailboxMessageTask(TaskRunner<Trade> taskHandler, Trade trade) {\n+        super(taskHandler, trade);\n+    }\n+\n+    protected abstract TradeMessage getMessage(String id);\n+\n+    protected abstract void setStateSent();\n+\n+    protected abstract void setStateArrived();\n+\n+    protected abstract void setStateStoredInMailbox();\n+\n+    protected abstract void setStateFault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzU0Nw==", "bodyText": "This is not new in this PR, but would be better named getMyPaymentAccountPayload", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496067547", "createdAt": "2020-09-28T16:07:49Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/ProcessModel.java", "diffHunk": "@@ -305,59 +266,118 @@ public void setTakeOfferFeeTx(Transaction takeOfferFeeTx) {\n     public PaymentAccountPayload getPaymentAccountPayload(Trade trade) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // message bu that cannot be changed due backward compatibility issues. It is a left over from the\n          \n          \n            \n                        // message but that cannot be changed due backward compatibility issues. It is a left over from the", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496068073", "createdAt": "2020-09-28T16:08:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/maker/MakerProcessesInputsForDepositTxRequest.java", "diffHunk": "@@ -43,44 +43,48 @@\n \n @Slf4j\n public class MakerProcessesInputsForDepositTxRequest extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public MakerProcessesInputsForDepositTxRequest(TaskRunner taskHandler, Trade trade) {\n+    public MakerProcessesInputsForDepositTxRequest(TaskRunner<Trade> taskHandler, Trade trade) {\n         super(taskHandler, trade);\n     }\n \n     @Override\n     protected void run() {\n         try {\n             runInterceptHook();\n-            log.debug(\"current trade state \" + trade.getState());\n-            InputsForDepositTxRequest inputsForDepositTxRequest = (InputsForDepositTxRequest) processModel.getTradeMessage();\n-            checkNotNull(inputsForDepositTxRequest);\n-            checkTradeId(processModel.getOfferId(), inputsForDepositTxRequest);\n+            TakeOfferRequest request = (TakeOfferRequest) processModel.getTradeMessage();\n+            checkNotNull(request);\n+            checkTradeId(processModel.getOfferId(), request);\n \n-            final TradingPeer tradingPeer = processModel.getTradingPeer();\n-            tradingPeer.setPaymentAccountPayload(checkNotNull(inputsForDepositTxRequest.getTakerPaymentAccountPayload()));\n-            tradingPeer.setRawTransactionInputs(checkNotNull(inputsForDepositTxRequest.getRawTransactionInputs()));\n-            checkArgument(inputsForDepositTxRequest.getRawTransactionInputs().size() > 0);\n+            TradingPeer tradingPeer = processModel.getTradingPeer();\n+            tradingPeer.setPaymentAccountPayload(checkNotNull(request.getTakerPaymentAccountPayload()));\n+            tradingPeer.setRawTransactionInputs(checkNotNull(request.getRawTransactionInputs()));\n+            checkArgument(request.getRawTransactionInputs().size() > 0);\n \n-            tradingPeer.setChangeOutputValue(inputsForDepositTxRequest.getChangeOutputValue());\n-            tradingPeer.setChangeOutputAddress(inputsForDepositTxRequest.getChangeOutputAddress());\n+            tradingPeer.setChangeOutputValue(request.getChangeOutputValue());\n+            tradingPeer.setChangeOutputAddress(request.getChangeOutputAddress());\n \n-            tradingPeer.setMultiSigPubKey(checkNotNull(inputsForDepositTxRequest.getTakerMultiSigPubKey()));\n-            tradingPeer.setPayoutAddressString(nonEmptyStringOf(inputsForDepositTxRequest.getTakerPayoutAddressString()));\n-            tradingPeer.setPubKeyRing(checkNotNull(inputsForDepositTxRequest.getTakerPubKeyRing()));\n+            tradingPeer.setMultiSigPubKey(checkNotNull(request.getTakerMultiSigPubKey()));\n+            tradingPeer.setPayoutAddressString(nonEmptyStringOf(request.getTakerPayoutAddressString()));\n+            tradingPeer.setPubKeyRing(checkNotNull(request.getTakerPubKeyRing()));\n \n-            tradingPeer.setAccountId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerAccountId()));\n-            trade.setTakerFeeTxId(nonEmptyStringOf(inputsForDepositTxRequest.getTakerFeeTxId()));\n+            tradingPeer.setAccountId(nonEmptyStringOf(request.getTakerAccountId()));\n \n-            // Taker has to sign offerId (he cannot manipulate that - so we avoid to have a challenge protocol for passing the nonce we want to get signed)\n+            // We set the taker fee only in the processModel yet not in the trade as the tx was only created but not\n+            // published yet. Once it was published we move it to trade. The takerFeeTx should be sent in a later\n+            // message bu that cannot be changed due backward compatibility issues. It is a left over from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MzgzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * buyer does not has the delayed payout tx and would not be able to open arbitration.\n          \n          \n            \n             * buyer does not have the delayed payout tx and would not be able to open arbitration.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496073838", "createdAt": "2020-09-28T16:17:30Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTkzMA==", "bodyText": "This is about 4 minutes until fail, I think that's too long, 5 resend attempts would be better in my opinion", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496075930", "createdAt": "2020-09-28T16:20:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {\n+    private static final int MAX_RESEND_ATTEMPTS = 7;\n+    private int delayInSec = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzAzMA==", "bodyText": "This resend type class has a lot of duplicate code from BuyerSendCounterCurrencyTransferStartedMessage, could probably use a common base class, or helper class.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496077030", "createdAt": "2020-09-28T16:22:31Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/seller/SellerSendsDepositTxAndDelayedPayoutTxMessage.java", "diffHunk": "@@ -17,85 +17,164 @@\n \n package bisq.core.trade.protocol.tasks.seller;\n \n+import bisq.core.network.MessageState;\n import bisq.core.trade.Trade;\n import bisq.core.trade.messages.DepositTxAndDelayedPayoutTxMessage;\n-import bisq.core.trade.protocol.tasks.TradeTask;\n-\n-import bisq.network.p2p.NodeAddress;\n-import bisq.network.p2p.SendMailboxMessageListener;\n+import bisq.core.trade.messages.TradeMessage;\n+import bisq.core.trade.protocol.tasks.SendMailboxMessageTask;\n \n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n import bisq.common.taskrunner.TaskRunner;\n \n-import org.bitcoinj.core.Transaction;\n+import javafx.beans.value.ChangeListener;\n \n-import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+/**\n+ * We send the buyer the deposit and delayed payout tx. We wait to receive a ACK message back and resend the message\n+ * in case that does not happen in 4 seconds or if the message was stored in mailbox or failed. We keep repeating that\n+ * with doubling the interval each time and until the MAX_RESEND_ATTEMPTS is reached. If never successful we fail and\n+ * do not continue the protocol with publishing the deposit tx. That way we avoid that a deposit tx is published but the\n+ * buyer does not has the delayed payout tx and would not be able to open arbitration.\n+ */\n @Slf4j\n-public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends TradeTask {\n-    @SuppressWarnings({\"unused\"})\n-    public SellerSendsDepositTxAndDelayedPayoutTxMessage(TaskRunner taskHandler, Trade trade) {\n+public class SellerSendsDepositTxAndDelayedPayoutTxMessage extends SendMailboxMessageTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b31f5b7b23915656bd5a3eeba9d67f9057eec97e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad83183cbaa9ca13906c66216ff0b90f8d2dd8fd", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ad83183cbaa9ca13906c66216ff0b90f8d2dd8fd", "committedDate": "2020-09-28T23:05:09Z", "message": "Revert copyright text from un-intended change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec13cd2768dc609e2759375273208a873fbddde", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/eec13cd2768dc609e2759375273208a873fbddde", "committedDate": "2020-09-28T23:08:07Z", "message": "Refactor: Return early if not valid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0258205211f76133063141a8e61d0cca4bd1d843", "committedDate": "2020-09-28T23:10:42Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ab4c7222671190b436aa54de7b792fd2d4060f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e8ab4c7222671190b436aa54de7b792fd2d4060f", "committedDate": "2020-09-29T01:46:34Z", "message": "Merge branch 'master_upstream' into fix-delayed-payout-tx-issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDk3NjY5", "url": "https://github.com/bisq-network/bisq/pull/4566#pullrequestreview-498097669", "createdAt": "2020-09-29T05:04:20Z", "commit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTowNDoyMFrOHZaKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTo0OToxMFrOHZb11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwNTE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take that offer because you have taken it already earlier. \\\n          \n          \n            \n              It might be that the take offer attempt ended up in a failed trade.\n          \n          \n            \n            offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take this offer because you already took it earlier. \\\n          \n          \n            \n              It could be that your previous take-offer attempt resulted in a failed trade.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496405169", "createdAt": "2020-09-29T05:04:20Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -408,7 +408,8 @@ offerbook.warning.tradeLimitNotMatching=Your payment account has been created {0\n   Your trade limit is: {1}\\n\\\n   The min. trade amount of the offer is: {2}.\\n\\n\\\n   You cannot take that offer at the moment. Once your account is older than 2 months this restriction gets removed.\n-\n+offerbook.warning.offerWasAlreadyUsedInTrade=You cannot take that offer because you have taken it already earlier. \\\n+  It might be that the take offer attempt ended up in a failed trade.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwODcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n          \n          \n            \n              developers at 'https://bisq.community' or the Keybase channel for further assistance.\\n\\n\\\n          \n          \n            \n              Error message: {0}\n          \n          \n            \n            portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the fiat or altcoin payment. Contact Bisq \\\n          \n          \n            \n              developers on Keybase (https://keybase.io/team/bisq) or on the \\\n          \n          \n            \n              forum (https://bisq.community) for further assistance.\\n\\n\\\n          \n          \n            \n              Error message: {0}\n          \n      \n    \n    \n  \n\nLowercased letters and added Keybase URL.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496408703", "createdAt": "2020-09-29T05:09:24Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -560,9 +561,10 @@ portfolio.tab.history=History\n portfolio.tab.failed=Failed\n portfolio.tab.editOpenOffer=Edit offer\n \n-portfolio.pending.invalidDelayedPayoutTx=Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n-  developers at 'https://bisq.community' or the Keybase channel.\\n\\n\\\n-  {0}\n+portfolio.pending.invalidDelayedPayoutTx=There is an issue with a missing or invalid transaction.\\n\\n\\\n+  Please do NOT send the Altcoin or Fiat payment but contact the Bisq \\\n+  developers at 'https://bisq.community' or the Keybase channel for further assistance.\\n\\n\\\n+  Error message: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwOTQyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              trade to the failed trades.\n          \n          \n            \n              trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496409429", "createdAt": "2020-09-29T05:10:21Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -830,10 +832,10 @@ portfolio.pending.timeLockNotOver=You have to wait until \u2248{0} ({1} more blocks\n portfolio.pending.error.depositTxNull=The deposit transaction is null. You cannot open a dispute \\\n   without a valid deposit transaction. Please go to \\\"Settings/Network info\\\" and do a SPV resync.\\n\\n\\\n   For further help please contact the Bisq support channel at the Bisq Keybase team.\n-portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. The trade gets moved to the \\\n-  failed trades section.\n-portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. The trade gets \\\n-   moved to the failed trades section.\n+portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. You can move the \\\n+  trade to the failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwOTUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              trade to the failed trades.\n          \n          \n            \n              trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496409535", "createdAt": "2020-09-29T05:10:30Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -830,10 +832,10 @@ portfolio.pending.timeLockNotOver=You have to wait until \u2248{0} ({1} more blocks\n portfolio.pending.error.depositTxNull=The deposit transaction is null. You cannot open a dispute \\\n   without a valid deposit transaction. Please go to \\\"Settings/Network info\\\" and do a SPV resync.\\n\\n\\\n   For further help please contact the Bisq support channel at the Bisq Keybase team.\n-portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. The trade gets moved to the \\\n-  failed trades section.\n-portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. The trade gets \\\n-   moved to the failed trades section.\n+portfolio.pending.mediationResult.error.depositTxNull=The deposit transaction is null. You can move the \\\n+  trade to the failed trades.\n+portfolio.pending.mediationResult.error.delayedPayoutTxNull=The delayed payout transaction is null. You can move the \\\n+  trade to the failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxMjA2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked and no trade fee has been paid. \\\n          \n          \n            \n              You can move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496412063", "createdAt": "2020-09-29T05:13:59Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxMzI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up. \\\n          \n          \n            \n              Your offer is still available for other traders so you have not lost the maker fee. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked. \\\n          \n          \n            \n              Your offer is still available to other traders, so you have not lost the maker fee. \\\n          \n          \n            \n              You can move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496413243", "createdAt": "2020-09-29T05:15:33Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxNTA1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n          \n          \n            \n              Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n          \n          \n            \n              You can move the trade to failed trades.\n          \n          \n            \n            portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2-of-2 multisig transaction) is missing.\\n\\n\\\n          \n          \n            \n              Without this tx, the trade cannot be completed. No funds have been locked but your trade fee has been paid. \\\n          \n          \n            \n              You can make a request to be reimbursed the trade fee here: https://github.com/bisq-network/support/issues. \\n\\n\\\n          \n          \n            \n              Feel free to move this trade to failed trades.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496415052", "createdAt": "2020-09-29T05:18:04Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxOTE1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n          \n          \n            \n              Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n          \n          \n            \n              send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n          \n          \n            \n              The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n          \n          \n            \n              back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing, \\\n          \n          \n            \n              but funds have been locked in the deposit transaction.\\n\\n\\\n          \n          \n            \n              Please do NOT send the fiat or altcoin payment to the BTC seller, because without the delayed payout tx, arbitration \\\n          \n          \n            \n              cannot be opened. Instead, open a mediation ticket with Cmd/Ctrl+o. \\\n          \n          \n            \n              The mediator should suggest that both peers each get back the the full amount of their security deposits \\\n          \n          \n            \n              (with seller receiving full trade amount back as well). \\\n          \n          \n            \n              This way, there is no security risk, and only trade fees are lost. \\n\\n\\\n          \n          \n            \n              You can request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496419151", "createdAt": "2020-09-29T05:23:36Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQyOTU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n          \n          \n            \n              Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n          \n          \n            \n              also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n          \n          \n            \n              You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n          \n          \n            \n              In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n          \n          \n            \n              your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n          \n          \n            \n              You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing \\\n          \n          \n            \n              but funds have been locked in the deposit transaction.\\n\\n\\\n          \n          \n            \n              If the buyer is also missing the delayed payout transaction, they will be instructed to NOT send the payment and open \\\n          \n          \n            \n              a mediation ticket instead. You should also open a mediation ticket with Cmd/Ctrl+o. \\n\\n\\\n          \n          \n            \n              If the buyer has not sent payment yet, the mediator should suggest that both peers each get back the full amount of \\\n          \n          \n            \n              their security deposits (with seller receiving full trade amount back as well). \\\n          \n          \n            \n              Otherwise the trade amount should go to the buyer. \\n\\n\\\n          \n          \n            \n              You can request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496429558", "createdAt": "2020-09-29T05:39:02Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTAwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n          \n          \n            \n              Error: {0}\\n\\n\\\n          \n          \n            \n              This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n          \n          \n            \n              ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n          \n          \n            \n              have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n          \n          \n            \n              getting reimbursed the lost trade fee.\n          \n          \n            \n            portfolio.pending.failedTrade.errorMsgSet=There was an error during trade protocol execution.\\n\\n\\\n          \n          \n            \n              Error: {0}\\n\\n\\\n          \n          \n            \n              It might be that this error is not critical, and the trade can be completed normally. If you are unsure, open a mediation \\\n          \n          \n            \n              ticket to get advice from Bisq mediators. \\n\\n\\\n          \n          \n            \n              If the error was critical and the trade cannot be completed, you might have lost your trade fee. \\\n          \n          \n            \n              Request a reimbursement for lost trade fees here: https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431002", "createdAt": "2020-09-29T05:43:48Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n          \n          \n            \n              getting reimbursed the lost trade fee.\n          \n          \n            \n              have lost your trade fee. If so, you can request a reimbursement for lost trade fees here: \\\n          \n          \n            \n              https://github.com/bisq-network/support/issues.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431226", "createdAt": "2020-09-29T05:44:34Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMTY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n          \n          \n            \n              trades screen any time.\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move a failed trade back to the open \\\n          \n          \n            \n              trades screen any time.\n          \n      \n    \n    \n  \n\nI assumed this is what intended message is\u2014please make sure it's correct.", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496431697", "createdAt": "2020-09-29T05:46:03Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n          \n          \n            \n              really sure. It might prevent options to resolve the problem.\\n\\n\\\n          \n          \n            \n              Do you want to move the trade to failed trades?\\n\\n\\\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n          \n          \n            \n              The trade transactions have been published and funds are locked. Only move the trade to failed trades if you are \\\n          \n          \n            \n              really sure. It might prevent options to resolve the problem.\\n\\n\\\n          \n          \n            \n              Do you want to move the trade to failed trades?\\n\\n\\\n          \n          \n            \n              You cannot open mediation or arbitration from the failed trades view, but you can move a failed trade back to the open \\", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432267", "createdAt": "2020-09-29T05:48:07Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjM1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade\n          \n          \n            \n            portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of this trade", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432356", "createdAt": "2020-09-29T05:48:24Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.moveTradeToFailedIcon.tooltip=Move trade to failed trades\n+portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjQyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            portfolio.failed.revertToPending.popup=Do you want to move the trade to open trades?\n          \n          \n            \n            portfolio.failed.revertToPending.popup=Do you want to move this trade to open trades?", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432420", "createdAt": "2020-09-29T05:48:37Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -903,6 +905,56 @@ portfolio.pending.mediationResult.popup.selfAccepted.lockTimeOver=You have accep\n portfolio.pending.mediationResult.popup.openArbitration=Reject and request arbitration\n portfolio.pending.mediationResult.popup.alreadyAccepted=You've already accepted\n \n+portfolio.pending.failedTrade.taker.missingTakerFeeTx=The taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up and no trade fee has been paid. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.maker.missingTakerFeeTx=The peer's taker fee transaction is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up. \\\n+  Your offer is still available for other traders so you have not lost the maker fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.missingDepositTx=The deposit transaction (the 2of2 Multisig transaction) is missing.\\n\\n\\\n+  Without that the trade cannot be completed. No funds have been locked up but your trade fee has been paid. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee. \\\n+  You can move the trade to failed trades.\n+portfolio.pending.failedTrade.buyer.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction and you must not \\\n+  send the fiat or altcoin payment to the BTC seller. Open a mediation ticket by clicking cmd+o (or ctrl+o). \\\n+  The mediator should make a suggested payout so that the seller receives their trade amount back and both traders get \\\n+  back their security deposit. That way there is no security risk and only the trade fee is lost. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.seller.existingDepositTxButMissingDelayedPayoutTx=The delayed payout transaction is missing.\\n\\n\\\n+  Without that arbitration cannot be opened. The funds have been locked up in the deposit transaction. If the buyer is \\\n+  also missing the delayed payout transaction he is instructed to not send the payment but open a mediation ticket. \\\n+  You should open a mediation ticket as well by clicking cmd+o (or ctrl+o). \\\n+  In case that the buyer has not sent the payment the mediator should make a suggested payout so that you receive \\\n+  your trade amount back and both traders get back their security deposit. Otherwise the trade amount should go to the buyer. \\\n+  You can request at https://github.com/bisq-network/support/issues for getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.errorMsgSet=There have been an error during the trade protocol execution.\\n\\n\\\n+  Error: {0}\\n\\n\\\n+  This error might not be critical and the trade could be completed normally. If you are unsure you can open a mediation \\\n+  ticket to get advice from the Bisq mediators. If the error was critical and the trade cannot be completed you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.missingContract=The trade contract is not set.\\n\\n\\\n+  The trade cannot be completed and you might \\\n+  have lost your trade fee. If so, you can request at https://github.com/bisq-network/support/issues for \\\n+  getting reimbursed the lost trade fee.\n+portfolio.pending.failedTrade.info.popup=The trade protocol encountered some problems.\\n\\n{0}\n+portfolio.pending.failedTrade.txChainInvalid.moveToFailed=The trade protocol encountered a serious problem.\\n\\n{0}\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.txChainValid.moveToFailed=The trade protocol encountered some problems.\\n\\n{0}\\n\\n\\\n+  The trade transactions have been published and funds are locked up. Only move the trade to failed trades if you are \\\n+  really sure. It might prevent options to resolve the problem.\\n\\n\\\n+  Do you want to move the trade to failed trades?\\n\\n\\\n+  You cannot open mediation or arbitration from the failed trades view, but you can move it back to the open \\\n+  trades screen any time.\n+portfolio.pending.failedTrade.moveTradeToFailedIcon.tooltip=Move trade to failed trades\n+portfolio.pending.failedTrade.warningIcon.tooltip=Click to open details about the issues of that trade\n+portfolio.failed.revertToPending.popup=Do you want to move the trade to open trades?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzMjU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transaction ID\n          \n          \n            \n            txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with this transaction ID", "url": "https://github.com/bisq-network/bisq/pull/4566#discussion_r496432599", "createdAt": "2020-09-29T05:49:10Z", "author": {"login": "m52go"}, "path": "core/src/main/resources/i18n/displayStrings.properties", "diffHunk": "@@ -2974,7 +3027,8 @@ addressTextField.openWallet.failed=Opening a default Bitcoin wallet application\n peerInfoIcon.tooltip={0}\\nTag: {1}\n \n txIdTextField.copyIcon.tooltip=Copy transaction ID to clipboard\n-txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transactions ID\n+txIdTextField.blockExplorerIcon.tooltip=Open a blockchain explorer with that transaction ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0258205211f76133063141a8e61d0cca4bd1d843"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6be21fa86c89d27669f9efa45bf5f28d473a6259", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6be21fa86c89d27669f9efa45bf5f28d473a6259", "committedDate": "2020-09-29T06:02:11Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285003743da60c29931df7ba4660722a2fb67bae", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/285003743da60c29931df7ba4660722a2fb67bae", "committedDate": "2020-09-29T06:02:49Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c448b1b58d69f02d653e8faa73c9512de42657c6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c448b1b58d69f02d653e8faa73c9512de42657c6", "committedDate": "2020-09-29T06:03:01Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e2a2e0b0d49b562436162881b4280f042c62f8", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/08e2a2e0b0d49b562436162881b4280f042c62f8", "committedDate": "2020-09-29T06:03:18Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126f99668dbb52b56b0e19ab9bb808a5a99fbff4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/126f99668dbb52b56b0e19ab9bb808a5a99fbff4", "committedDate": "2020-09-29T06:03:30Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cc62ed602dd326aafa19c783ae394b0a3ec035", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e3cc62ed602dd326aafa19c783ae394b0a3ec035", "committedDate": "2020-09-29T06:03:41Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc15c7dfa7e45cc62f42bab38dd5e09f4085b5ed", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/dc15c7dfa7e45cc62f42bab38dd5e09f4085b5ed", "committedDate": "2020-09-29T06:03:53Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fef02e6f1e058a3d8bf8a833e9e638341d1cf74", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1fef02e6f1e058a3d8bf8a833e9e638341d1cf74", "committedDate": "2020-09-29T06:04:04Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2ccf249b20f96e99b0101817bf1f474c3ede79", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4e2ccf249b20f96e99b0101817bf1f474c3ede79", "committedDate": "2020-09-29T06:04:17Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92902102ec7f62913d3a728b09c28c6000f6d489", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/92902102ec7f62913d3a728b09c28c6000f6d489", "committedDate": "2020-09-29T06:04:27Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ae1bddfa27de7eae964f3eeb7a982d55327a5e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/77ae1bddfa27de7eae964f3eeb7a982d55327a5e", "committedDate": "2020-09-29T06:04:45Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c114b44e828a684c68e2ea8cf7e4a948b356f3c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6c114b44e828a684c68e2ea8cf7e4a948b356f3c", "committedDate": "2020-09-29T06:05:21Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d3e5230e5364861cf34f2ecf3a8e1c95279bb0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c3d3e5230e5364861cf34f2ecf3a8e1c95279bb0", "committedDate": "2020-09-29T06:05:46Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf368c449f74bcb0f690078f74dde92b763cc44", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9cf368c449f74bcb0f690078f74dde92b763cc44", "committedDate": "2020-09-29T06:06:09Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e071d5e02574081e95c420456cb49f78de735f51", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e071d5e02574081e95c420456cb49f78de735f51", "committedDate": "2020-09-29T06:06:28Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e64cd6b59c6a46614400f63d8ecc1ebbb96dca", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/25e64cd6b59c6a46614400f63d8ecc1ebbb96dca", "committedDate": "2020-09-29T06:06:44Z", "message": "Update core/src/main/resources/i18n/displayStrings.properties\n\nCo-authored-by: m52go <mfiver@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d7e53882ee67a22c8d1ee92e8de6487c8e533d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e9d7e53882ee67a22c8d1ee92e8de6487c8e533d", "committedDate": "2020-09-29T06:07:42Z", "message": "Merge branch 'fix-delayed-payout-tx-issues' of https://github.com/chimp1984/bisq into fix-delayed-payout-tx-issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e1155eeaaac9bb9a3a21e81e7db1284af72dc0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/24e1155eeaaac9bb9a3a21e81e7db1284af72dc0", "committedDate": "2020-09-30T18:44:15Z", "message": "Set peers pubkey at constructor instead of onInitialized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e847cd95b433035055d7cd1c79019393672aec4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7e847cd95b433035055d7cd1c79019393672aec4", "committedDate": "2020-09-30T18:45:27Z", "message": "Only check pubKey for trade messages. Before we got it called for instance when the mediator sent the dispute-opened-by-peer msg, causing an error as its mediators key not peers key.\nWe need to check first for the message type and then apply the check."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44ba62c77c7e522d918526d56de20bca54deaff", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a44ba62c77c7e522d918526d56de20bca54deaff", "committedDate": "2020-10-01T05:06:03Z", "message": "Merge branch 'fix-delayed-payout-tx-issues' of https://github.com/chimp1984/bisq into fix-delayed-payout-tx-issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb41a1984b716b5b2d247c216aa9abefa0ccc28a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fb41a1984b716b5b2d247c216aa9abefa0ccc28a", "committedDate": "2020-10-01T14:24:46Z", "message": "Merge branch 'master_upstream' into fix-delayed-payout-tx-issues\n\n# Conflicts:\n#\tcore/src/main/java/bisq/core/trade/TradeManager.java\n#\tdesktop/src/main/java/bisq/desktop/main/overlays/windows/TradeDetailsWindow.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af9e133a4c1db65e06ad0307c9037e3449dcbd7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0af9e133a4c1db65e06ad0307c9037e3449dcbd7", "committedDate": "2020-10-01T14:42:33Z", "message": "Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3cacd867f7ca8d9a5b1bc42d3afc9bff961f5c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8a3cacd867f7ca8d9a5b1bc42d3afc9bff961f5c", "committedDate": "2020-10-01T14:45:19Z", "message": "Revert renaming from InputsForDepositTxRequest to TakeOfferRequest\n\nPrefer to keep it in sync with protobuf entry."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fce06832d25fed88180658e837539ec61e26fb0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9fce06832d25fed88180658e837539ec61e26fb0", "committedDate": "2020-10-01T14:46:11Z", "message": "Rename baseCurrencyNetworkParameters to networkParameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDUyODc5", "url": "https://github.com/bisq-network/bisq/pull/4566#pullrequestreview-500452879", "createdAt": "2020-10-01T15:12:54Z", "commit": {"oid": "9fce06832d25fed88180658e837539ec61e26fb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a26893f052dbdbaa24cb9108be6615683df1d8", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/66a26893f052dbdbaa24cb9108be6615683df1d8", "committedDate": "2020-09-21T23:55:49Z", "message": "Always show deposit and delayed payout tx in trade details window. If null it shows N/A"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "690104e6eac57d73a1623051cfe692e5b871ffa0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/690104e6eac57d73a1623051cfe692e5b871ffa0", "committedDate": "2020-09-21T23:56:58Z", "message": "Show popup on MissingDelayedPayoutTxException. Update display string of popup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944a77d6954ef73eac4e7b24ce6f8a46c7628db2", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/944a77d6954ef73eac4e7b24ce6f8a46c7628db2", "committedDate": "2020-09-22T00:09:14Z", "message": "Refactor:\n- Rename getFundsNeededForTradeAsLong to getFundsNeededForTrade\n- Use checkNotNull instead of if/else check\n- Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d7b2897fc6698d16a48ebd5890fa8324041aaa4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4d7b2897fc6698d16a48ebd5890fa8324041aaa4", "committedDate": "2020-09-22T00:11:07Z", "message": "Refactor:\n- Use `TaskRunner<Trade> taskHandler` instead of `TaskRunner taskHandler`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d56312ccd1152c10d11346344fbf71f427b97a0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3d56312ccd1152c10d11346344fbf71f427b97a0", "committedDate": "2020-09-22T00:11:44Z", "message": "Refactor:\n- Remove '@SuppressWarnings({\"unused\"})'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a835343776c42beb81ef727863e105e0d92a85c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6a835343776c42beb81ef727863e105e0d92a85c", "committedDate": "2020-09-22T00:29:15Z", "message": "Cleanups. Small functional change by removing wrapping into arraylist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87c2ddf20015920780ab6850ffcaafe146bc83ac", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/87c2ddf20015920780ab6850ffcaafe146bc83ac", "committedDate": "2020-09-22T00:48:01Z", "message": "Remove Nullable annotations. arbitratorNodeAddress is not null and accountAgeWitnessSignatureOfOfferId\nwas added in v 0.6 so is with todays versions also not null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a25dcf29faf112407dce450a2059ad180078cac1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a25dcf29faf112407dce450a2059ad180078cac1", "committedDate": "2020-09-22T00:48:35Z", "message": "Refactor: Rename sig to accountAgeWitnessSignatureOfOfferId to make context more clear"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19afb449d5d42e40abdb38c93857ad8cf4ebcc9f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/19afb449d5d42e40abdb38c93857ad8cf4ebcc9f", "committedDate": "2020-09-22T00:49:36Z", "message": "Refactor: rename inputsForDepositTxRequest to request\nRemove final\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88135713e5bb00413cb1e6857b1320702830ccf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c88135713e5bb00413cb1e6857b1320702830ccf", "committedDate": "2020-09-22T01:01:24Z", "message": "Revert removal of Nullable. arbitratorNodeAddress is null (confused it with acceptedArbitratorNodeAddresses)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525360c3ce671d8549b9664761922103cbc207ef", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/525360c3ce671d8549b9664761922103cbc207ef", "committedDate": "2020-09-22T01:02:50Z", "message": "Use ApplyFilter at start at take offer process.\nMake paymentAccountPayload nullable\nSet TempTradingPeerNodeAddress with value from trade.getTradingPeerNodeAddress()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3864efe9aa21a391cca268567fee35d57cb4a0c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a3864efe9aa21a391cca268567fee35d57cb4a0c", "committedDate": "2020-09-22T01:10:16Z", "message": "Refactor: Remove final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3269e8c6f0482afa3b0aac83991fbbf0c407879e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3269e8c6f0482afa3b0aac83991fbbf0c407879e", "committedDate": "2020-09-22T01:11:06Z", "message": "Remove check that account age signature can be null. Such old versions are not supported anymore.\nCleanups."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7af57a43a5a6af5ee0d55e5f405508aaf27945", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3a7af57a43a5a6af5ee0d55e5f405508aaf27945", "committedDate": "2020-09-22T01:18:47Z", "message": "Refactoring: cleanups, add more checkNotNull tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8ddbd4ae0abe6cc8ed58cd2d3dc8865db619fd", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/dc8ddbd4ae0abe6cc8ed58cd2d3dc8865db619fd", "committedDate": "2020-09-22T01:31:22Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c2fbfb1d526f42fda52658b3eea64334c75701", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/03c2fbfb1d526f42fda52658b3eea64334c75701", "committedDate": "2020-09-22T01:45:52Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02355704ba7aea844576fbdfd1e7047d5ecc97a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e02355704ba7aea844576fbdfd1e7047d5ecc97a", "committedDate": "2020-09-22T02:53:45Z", "message": "Unsubscribe before state is set to avoid duplicate calls\n\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5705d8e67ad68cc78a47266ce121d2af7061e15a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5705d8e67ad68cc78a47266ce121d2af7061e15a", "committedDate": "2020-09-22T03:01:30Z", "message": "Refactoring: rename inputsForDepositTxResponse , add more checkNotNull checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8a3318f673ccf78b811dd04e28f442a9b27c47b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a8a3318f673ccf78b811dd04e28f442a9b27c47b", "committedDate": "2020-09-22T03:07:51Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53526e3c20c7b380e5177979a3e813d639ac59a7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/53526e3c20c7b380e5177979a3e813d639ac59a7", "committedDate": "2020-09-22T03:08:24Z", "message": "Remove repeated TakerVerifyMakerAccount and TakerVerifyMakerFeePayment from taker protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a725227ff30bf8e9083d113b7d902bb7edfe819f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a725227ff30bf8e9083d113b7d902bb7edfe819f", "committedDate": "2020-09-22T03:20:08Z", "message": "Refactor: set string at success handlers correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa5feebc14ac1d0192f218fd9fc68704b3f98e6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2aa5feebc14ac1d0192f218fd9fc68704b3f98e6", "committedDate": "2020-09-22T03:23:01Z", "message": "Move stopTimeout to second message handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9966f9a9a880a7bfba193f567a1186f0dfc0355e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9966f9a9a880a7bfba193f567a1186f0dfc0355e", "committedDate": "2020-09-22T03:25:48Z", "message": "Move contractHash creation to TakerVerifyAndSignContract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdde4b552cb4ff859bde968356e122edfd136ee6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fdde4b552cb4ff859bde968356e122edfd136ee6", "committedDate": "2020-09-22T03:29:13Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e960e1208470c6b76d15615d6abbd102bcecdbaf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e960e1208470c6b76d15615d6abbd102bcecdbaf", "committedDate": "2020-09-22T03:58:13Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17baf18844ac75cc4abb21289a8f3f71cb94af1b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/17baf18844ac75cc4abb21289a8f3f71cb94af1b", "committedDate": "2020-09-22T04:01:33Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "853dac75441ad5690931658f9dbe66ccdd21b2bf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/853dac75441ad5690931658f9dbe66ccdd21b2bf", "committedDate": "2020-09-22T04:04:45Z", "message": "Remove empty task runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f36ae8928e1558be75d0825175faa9561179532", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0f36ae8928e1558be75d0825175faa9561179532", "committedDate": "2020-09-22T04:17:50Z", "message": "Refactoring: cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "538db2f36f6da33055773065ef8189c412134a21", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/538db2f36f6da33055773065ef8189c412134a21", "committedDate": "2020-09-22T04:26:51Z", "message": "Move contractHash creation to MakerCreateAndSignContract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971cd57984768bf38e3187754f877e0a8302d190", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/971cd57984768bf38e3187754f877e0a8302d190", "committedDate": "2020-09-22T04:34:07Z", "message": "Refactoring: cleanups, rename cleanupTradableOnFault"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c816acf645a3e49fc367d7e7435fc5d4535bae", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/33c816acf645a3e49fc367d7e7435fc5d4535bae", "committedDate": "2020-09-22T04:41:24Z", "message": "Move SellerPublishesDepositTx after SellerSendsDepositTxAndDelayedPayoutTxMessage\n\nThis should help to avoid that the buyer does not get the delayed payout tx.\nIf a timeout at deposit tx broadcast would prevent that it get out, the peer has at least both transactions.\nThe timeout could be Bisq internal but the tx gets in reality published. With the previous code we would get interrupted at\nSellerPublishesDepositTx and then the SellerSendsDepositTxAndDelayedPayoutTxMessage would never get executed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "527f1537a9e9525fcdc92b2931e5bd64f8965669", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/527f1537a9e9525fcdc92b2931e5bd64f8965669", "committedDate": "2020-09-22T05:32:28Z", "message": "Add listener on BuyerSendCounterCurrencyTransferStartedMessage to resend msg case it has not arrived\nAdd signed witness to PayoutTxPublishedMessage\nRemove usage of RefreshTradeStateRequest but leave it for backward compatibility\nMove removeMailboxMessageAfterProcessing calls in finally branch\nRename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b747cc32385123fde4cbfbdc83ff62f879c7f9f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2b747cc32385123fde4cbfbdc83ff62f879c7f9f", "committedDate": "2020-09-22T23:48:47Z", "message": "Don't return null if name is null by try to use UNDEFINED. Only if that is not present we return null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13e1a3edbfa82326cddc5e7a9b208fbc161e806", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b13e1a3edbfa82326cddc5e7a9b208fbc161e806", "committedDate": "2020-09-22T23:50:45Z", "message": "Resend DepositTxAndDelayedPayoutTxMessage at\nSellerSendsDepositTxAndDelayedPayoutTxMessage if no ACK received\n\nAdd checks for valid trade state transitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96221317e2f474d53dddd946649b020be0ed2668", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/96221317e2f474d53dddd946649b020be0ed2668", "committedDate": "2020-09-23T00:01:51Z", "message": "Change order of tasks\n\nCall BuyerSetupPayoutTxListener before BuyerSendCounterCurrencyTransferStartedMessage\nWe will change BuyerSendCounterCurrencyTransferStartedMessage so that it\ndoes not complete until the message has been ACKed by the peer.\nIt is more transparent to leave the task uncompleted and if it is the last task we dont have issues.\nThe caller would not get the result handler called though until all is completed. But the result handler in the UI was anyway empty."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e0c51875e98645ffcf94a2bb905951a4e5e6f5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c7e0c51875e98645ffcf94a2bb905951a4e5e6f5", "committedDate": "2020-09-23T00:34:14Z", "message": "Use same model as in SellerSendsDepositTxAndDelayedPayoutTxMessage\n\nReason: the other model was already tested quite a lot and seems to work correctly.\nWe gain a lot of resiliance with min. costs (repeated mailbox messages - as they are the same\nthey will not cause higher number of msg, just a bit more traffic)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b7307e07fbb687e989414ddd38f72f3901f1bab", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4b7307e07fbb687e989414ddd38f72f3901f1bab", "committedDate": "2020-09-23T00:35:01Z", "message": "Add checks for state at handle CounterCurrencyTransferStartedMessage\nAdd ApplyFilter task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce5ebadeac03d34175d46029be46d0854d2899f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8ce5ebadeac03d34175d46029be46d0854d2899f", "committedDate": "2020-09-23T00:35:24Z", "message": "Refactoring: rename, cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1abe6adac6a269e8e050f8baa363afc4c16002e1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1abe6adac6a269e8e050f8baa363afc4c16002e1", "committedDate": "2020-09-23T00:40:15Z", "message": "Remove empty tasks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f8f30a8b3e37c55c1d028b01152121c1a5906d4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5f8f30a8b3e37c55c1d028b01152121c1a5906d4", "committedDate": "2020-09-23T00:53:19Z", "message": "Add BuyerSendCounterCurrencyTransferStartedMessage as second optional task instead of starting a new task runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48241af31660efdf699df17273cbbb20a3e6ed8f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/48241af31660efdf699df17273cbbb20a3e6ed8f", "committedDate": "2020-09-23T01:18:59Z", "message": "Change isTradeInPhase APi to fluent interface with ifInPhase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c6f0ac9b20c81b6975bc44df79d2069de4d9196", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7c6f0ac9b20c81b6975bc44df79d2069de4d9196", "committedDate": "2020-09-23T02:09:09Z", "message": "Use ifInPhase APi for testing expected phase(s)\nAdd ifInPhase method to allow alternative phases. We can have parallel branches how we reach a new state, e.g. receiving the tx from network or receiving it from the peer. no guarantee which will happen first.\n\nAllow phase transition to skip a future phase as we have phases only relevant for one role. This is not good for treading it as a state machine state, we need to redesign the state/phase handling..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa2225b652684e354df0ad2fb615c94ccd1fc17", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6fa2225b652684e354df0ad2fb615c94ccd1fc17", "committedDate": "2020-09-23T06:48:02Z", "message": "Use fluent interface for checking state and conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa45650b625103adbb4a300c853b6762bb8cdb4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0fa45650b625103adbb4a300c853b6762bb8cdb4", "committedDate": "2020-09-23T13:27:09Z", "message": "Merge branch 'dispute-agent-branch' into wip-merge-tradeprot\n\n# Conflicts:\n#\tcore/src/main/java/bisq/core/trade/DelayedPayoutTxValidation.java\n#\tcore/src/main/java/bisq/core/trade/protocol/tasks/buyer/BuyerVerifiesFinalDelayedPayoutTx.java\n#\tdesktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesDataModel.java\n#\tdesktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/buyer/BuyerStep1View.java\n#\tdesktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/buyer/BuyerStep2View.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de008457cb22cbfc91f345b3ade976d776dd6890", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/de008457cb22cbfc91f345b3ade976d776dd6890", "committedDate": "2020-09-23T13:28:04Z", "message": "Remove empty file (from merge)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b53312af9ca102a46532baee7b331c00a8d9de2", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2b53312af9ca102a46532baee7b331c00a8d9de2", "committedDate": "2020-09-23T17:07:38Z", "message": "Various improvements\n\n- Add time outs per request/response cycle.\n- Use custom timeouts\n- Stop timeout if condition not met\n- Allow multiple condition calls (all need to be true)\n- Move  processModel.setTradeMessage(tradeMessage); and processModel.setTempTradingPeerNodeAddress(peerNodeAddress); calls to FluentProcess\n- Add Validator.isTradeIdValid method\n- Replace Validator.checkTradeId(processModel.getOfferId(), tradeMessage); by isTradeIdValid in FluentProcess\n- Add DisputeEvent\n- Derive info string from message or event at handleTaskRunnerSuccess\n- Add from method\n- Add withTimeout method\n- Add BuyerEvent.STARTUP\n- Rename onMessage to on\n- Rename onEvent to on\n- Rename tradeMesage to message\n- Rename sener/peerNodeAddress to peer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f80d1b1ea1037c6e2c828eb9444ce00733f7c45", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3f80d1b1ea1037c6e2c828eb9444ce00733f7c45", "committedDate": "2020-09-23T17:13:07Z", "message": "Refactor: Rename condition to preCondition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d91e44c9ab757e4379f8c30913677bc9eb06898e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d91e44c9ab757e4379f8c30913677bc9eb06898e", "committedDate": "2020-09-23T17:14:18Z", "message": "Refactor: Rename from to expectedPhase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf07f623fe4674827a6094487678ccb3f89db72", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/faf07f623fe4674827a6094487678ccb3f89db72", "committedDate": "2020-09-23T17:14:40Z", "message": "Refactor: Rename fromAny to expectedPhases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9505179bed6e80c4bbdbf9aeddf3202efffa5d33", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9505179bed6e80c4bbdbf9aeddf3202efffa5d33", "committedDate": "2020-09-23T17:49:42Z", "message": "Use FluentProcess for boilerplate code (WIP - some custom code is commented out atm, will be fixed in follow up commits)\n\nAdd setTaskRunner method\nAdd addTasks method\nAdd run method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968a6df550c0cdfe7504c624944162b1c4c2303f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/968a6df550c0cdfe7504c624944162b1c4c2303f", "committedDate": "2020-09-23T17:50:22Z", "message": "Refactor: Rename run to runTasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54d625e564be952ff88a03070a33638d1c44ca8f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/54d625e564be952ff88a03070a33638d1c44ca8f", "committedDate": "2020-09-23T18:08:26Z", "message": "Add run method to accept runnable which is execute before run tasks\nAdd isValid method in FluentProcess\nAdd more logs if invalid\nAdd toString\n\nRefactor:\n- Remove custom trade fields and use trade from base class instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbd6cdfa8189a58f74518505209da447801f57e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/cdbd6cdfa8189a58f74518505209da447801f57e", "committedDate": "2020-09-23T21:21:29Z", "message": "Redesigned fluent API again...\n\nMove code duplication to Buyer protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e59b5b3cf52cef9b55907ada048943ce065dac14", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e59b5b3cf52cef9b55907ada048943ce065dac14", "committedDate": "2020-09-23T22:20:10Z", "message": "Change BuyerProtocol from interface to abstract class\n\nMove all common code of buyer protocol classes to BuyerProtocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e0ec4d2ebe3097bb63894c91e3426080a5739c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a2e0ec4d2ebe3097bb63894c91e3426080a5739c", "committedDate": "2020-09-24T00:26:49Z", "message": "Change SellerProtocol from interface to abstract class\n\nMove all common code of seller protocol classes to SellerProtocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99afe23de62979c2460df6accc5c61dda234a629", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/99afe23de62979c2460df6accc5c61dda234a629", "committedDate": "2020-09-24T00:29:29Z", "message": "Refactor: Rename takeAvailableOffer to onTakeOffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8847f4b13d735cc31d53f59ea6f7312ed416a345", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8847f4b13d735cc31d53f59ea6f7312ed416a345", "committedDate": "2020-09-24T00:35:19Z", "message": "Refactor: Rename createTrade to getNewTrade\nMove some code to caller method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9644920a52da179ad79380c91cedc34b42d988f6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9644920a52da179ad79380c91cedc34b42d988f6", "committedDate": "2020-09-24T00:52:24Z", "message": "Refactor: Move mediation code to new class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f059f08b273589d252d5e6ab21d108bef81c42bd", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f059f08b273589d252d5e6ab21d108bef81c42bd", "committedDate": "2020-09-24T00:56:41Z", "message": "Refactor: Rearrange methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03023567a8b1d7f1981d3028d4b7d5740329b429", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/03023567a8b1d7f1981d3028d4b7d5740329b429", "committedDate": "2020-09-24T03:24:45Z", "message": "Fix potential bug with peers pub key check. Use new isPubKeyValid method to avoid code duplication.\nBefore we did not apply messages if the peers key was null which can be the case at protocol start for maker side (takers key is not set yet). Makers key is in offer and available from the start.\n\nFix incorrect setPubKeyRing call in BuyerAsTakerProtocol and BuyerProtocol. Only taker can set it from offer. This bug was introduce in past commits of this branch.\n\nMove FluentProtocol to own class file\nClose open offer in task instead at state listener\nRemove state listener\nRemove default timeout as not used anymore\nAdd onWithdrawCompleted method to clean up when trade completed\nRearrange code in TradeProtocol\nRename doHandleDecryptedMessage to onTradeMessage\nRename doApplyMailboxTradeMessage to onMailboxMessage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6eefef1ae13dafed8fb965bd6c2426d4008d27b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f6eefef1ae13dafed8fb965bd6c2426d4008d27b", "committedDate": "2020-09-25T00:47:12Z", "message": "Remove handling of failed trades. If a trade is in an invalid state (tx missing) or has an error message set we show in the pending trades view a red trash icon for moving the trade to failed trades.\nThe info icon next to the trade ID is then a warning icon (should be red but css is not my best friend) and if opening trade details window we also color the missing txs red with a warn icon and tooltip.\nWhen clicking the trash button a popup is displayed with detail info.\nAt failed trades there is a \"undo\" icon for reverting the trade back to pending (if user wants to open mediation, etc).\n\nAll the automatic handling of the failed trades and popups are removed as it never worked well and just confused users...\n\nIn next commits we will add more instructions what a user should/can do for diff. error cases.\n\nTradeManger:\n- Remove all the failed checks at initPendingTrade.\n- Remove tradesWithoutDepositTx\n- Remove tradesForStatistics as it was never read\n- Remove cleanUpAddressEntries\n- Rename addTradeToClosedTrades to onTradeCompleted\n\nTxIdTextField accepts a null for tx ID and shows then red colored N/A and a warning icon.\nHyperlinkWithIcon exposed the icon to be accessible for style change.\nDebugWindow was updated for one variation of the trade protocol (other is missing still).\nTrade detail window show now always all 4 mandatory txs.\nBeside that this commit has some cleanups and null pointer fixes (when testing error scenarios i got those NP)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4944346230fa3abbf9700732f6e68a3f4955db8", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b4944346230fa3abbf9700732f6e68a3f4955db8", "committedDate": "2020-09-25T02:07:40Z", "message": "Add warn icon next to trash icon. Show popup with info about the problem and instructions.\nSet trash button disabled if the tx chain is valid to avoid that users move to failed while trade is valid to be completed.\n\nContract: Add isMyRoleMaker method\nTrade: Add hasErrorMessage and isTxChainInvalid methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7167e2a8bdc69d33701a24373d98fdcaae026ef3", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7167e2a8bdc69d33701a24373d98fdcaae026ef3", "committedDate": "2020-09-25T02:10:02Z", "message": "Add check if trade has been paid out for button disable state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f614f4f4c54b1336a03186cafeef33a7357551f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6f614f4f4c54b1336a03186cafeef33a7357551f", "committedDate": "2020-09-25T05:19:43Z", "message": "Set takerFeeTxId and depositTx in trade only once they are published. Before that we keep it temporary in the processModel.\nThe buyer receives the takerFeeTxId with the frist message, but at the moment it is not published. To reflect that he also keeps it in the process model and\nat the next message when the fee tx is published he sets it in the Trade.\n\nRemove\n`checkArgument(!walletService.getAddressEntry(id, AddressEntry.Context.MULTI_SIG).isPresent(),\n                     \"addressEntry must not be set here.\");\n`\nas it causes failure if a taker takes same offer after certain error conditions again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1df52790b28e892139f579be951b1e3c7b16825", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f1df52790b28e892139f579be951b1e3c7b16825", "committedDate": "2020-09-25T05:20:17Z", "message": "improve trade details window"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b958c7519b6982eb06c525cc03883c8ad46b9765", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b958c7519b6982eb06c525cc03883c8ad46b9765", "committedDate": "2020-09-25T19:17:04Z", "message": "Add MakerRemovesOpenOffer task.\nRemoves offer once the taker fee was published. So we ensure that maker fee is not lost if an error happens before that."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10bedee803f49391b510890f638818b5dd0471c4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/10bedee803f49391b510890f638818b5dd0471c4", "committedDate": "2020-09-25T20:03:28Z", "message": "Merge branch 'dispute-agent-branch' into fix-delayed-payout-tx-issues\n\n# Conflicts:\n#\tcore/src/main/java/bisq/core/trade/protocol/tasks/buyer/BuyerSetupDepositTxListener.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568dcdaad4c71ccaeb522fe81ce8d79d670f7fc6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/568dcdaad4c71ccaeb522fe81ce8d79d670f7fc6", "committedDate": "2020-09-25T20:32:49Z", "message": "Update tasks in debugview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95cb3b271008f68ff6558450fb4c6e7ceb11668d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/95cb3b271008f68ff6558450fb4c6e7ceb11668d", "committedDate": "2020-09-25T22:06:13Z", "message": "Fix deposit tx setters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3987f9cd5ad26148b64ad60b8d8bf451ce8f9e44", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3987f9cd5ad26148b64ad60b8d8bf451ce8f9e44", "committedDate": "2020-09-25T23:16:50Z", "message": "Fix incorrect getDepositTx calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dceba6d35030286eeb977be834dd670abb9f07c3", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/dceba6d35030286eeb977be834dd670abb9f07c3", "committedDate": "2020-09-26T01:09:31Z", "message": "Bug fix: we created a new address entry which causes bugs in case a user takes an offer again which failed in an early preparation state before."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98dec09c18801a2bbbbaad94c7bcbddc076b4c50", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/98dec09c18801a2bbbbaad94c7bcbddc076b4c50", "committedDate": "2020-09-26T02:10:20Z", "message": "Rename given method to expect to make it more clear that it is mandatory that the condition is met. Also added a protocol error handler if the condition is not met.\nFor more tolerant usage we added the given method, which does not log errors and does not call a error handler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc633f39fb9aac0b07e2c38caca3ec3c81793bb", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3cc633f39fb9aac0b07e2c38caca3ec3c81793bb", "committedDate": "2020-09-26T02:30:19Z", "message": "Add check if trade was already taken in the past. If so show a popup at take offer screen.\n\nWe could deactivate such offers as well but as it is only for exceptional cases I think this way is good enough (would be more effort otherwise)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612ecd3a6a7bb9dc4b6fb133a4917bdcde2fb44b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/612ecd3a6a7bb9dc4b6fb133a4917bdcde2fb44b", "committedDate": "2020-09-26T02:32:27Z", "message": "Rename onFiatPaymentReceived to onPaymentReceived"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a002fb33a5c01ae98c5489f434feb2767f38f188", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a002fb33a5c01ae98c5489f434feb2767f38f188", "committedDate": "2020-09-26T02:33:53Z", "message": "Rename onFiatPaymentStarted to onPaymentStarted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7023b2acf50fe2883969e9e56211e60f8d9977e0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7023b2acf50fe2883969e9e56211e60f8d9977e0", "committedDate": "2020-09-26T02:35:34Z", "message": "Remove onPaymentReceived method from TradeManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f4cb8e85801dfbe9407db54ae68f43fad9167e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a5f4cb8e85801dfbe9407db54ae68f43fad9167e", "committedDate": "2020-09-26T02:38:06Z", "message": "Refactor: use getTradableList instead of tradableList.getList()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af9cb3dfeb43ea890943830434e4917d5895759", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6af9cb3dfeb43ea890943830434e4917d5895759", "committedDate": "2020-09-26T02:38:49Z", "message": "Refactor: rename getTradableList to getTradesAsObservableList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d312ae1bada12baaf3e073cd264a64fd8af7208", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5d312ae1bada12baaf3e073cd264a64fd8af7208", "committedDate": "2020-09-26T02:43:56Z", "message": "Refactor: add TODOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86569b1b2d7699bdb38714d9235590da7852df86", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/86569b1b2d7699bdb38714d9235590da7852df86", "committedDate": "2020-09-26T02:58:32Z", "message": "Apply fluent protocol to MediationProtocol\n\nRename acceptMediationResult to onAcceptMediationResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc753bde4a8856089962065983cdf20e3293cf6", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2fc753bde4a8856089962065983cdf20e3293cf6", "committedDate": "2020-09-26T03:02:43Z", "message": "Rename InputsForDepositTxRequest to TakeOfferRequest\n\nThe protobuf file is not renamed. This breaks our convention to keep both the same but I think the added clarity for the trade protocol justifies the exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82749cee70cb4c0fb8841f3090108f31ed0c6cf1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/82749cee70cb4c0fb8841f3090108f31ed0c6cf1", "committedDate": "2020-09-26T03:15:40Z", "message": "Refactor:\n - Rename handlePayDepositRequest to handleTakeOfferRequest\n - Add initTrade method without the redundant params\n - Use early returns in handleTakeOfferRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07fe30ac30b92e8fd3a61471065c84b59283319", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a07fe30ac30b92e8fd3a61471065c84b59283319", "committedDate": "2020-09-26T03:16:25Z", "message": "Refactor: Move method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96ec87b50afaf8b60279133cff22e88acdaa3be4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/96ec87b50afaf8b60279133cff22e88acdaa3be4", "committedDate": "2020-09-26T03:27:19Z", "message": "Refactor: let TradeManager implement DecryptedDirectMessageListener, DecryptedMailboxListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d40ca580c937deb79d83396e821212f9ecfc8d1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4d40ca580c937deb79d83396e821212f9ecfc8d1", "committedDate": "2020-09-26T03:28:31Z", "message": "Refactor: Remove handleTakeOfferRequest method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "346d793d87bfc6551d704440ef6836402ef2658f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/346d793d87bfc6551d704440ef6836402ef2658f", "committedDate": "2020-09-26T03:29:52Z", "message": "Refactor: Remove onOfferRemovedFromRemoteOfferBook method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "246d1e3ddfe561f78f95472a041f44665645e936", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/246d1e3ddfe561f78f95472a041f44665645e936", "committedDate": "2020-09-26T03:31:08Z", "message": "Refactor: Remove onCancelAvailabilityRequest method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c824f140cc32fab42ea94a5b6cec477aba65f2c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1c824f140cc32fab42ea94a5b6cec477aba65f2c", "committedDate": "2020-09-26T03:37:54Z", "message": "Refactor: Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b758431dd4739cd2c37c2686efc50e4a756975", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/35b758431dd4739cd2c37c2686efc50e4a756975", "committedDate": "2020-09-26T03:50:42Z", "message": "Refactor: Move methods, rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b81db5a60113a8fc855fd9367fd6edaf109fdb4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0b81db5a60113a8fc855fd9367fd6edaf109fdb4", "committedDate": "2020-09-26T03:52:54Z", "message": "Refactor: return early"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3fe7ad6d52aa2b892026f07391a58b43fba38d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9f3fe7ad6d52aa2b892026f07391a58b43fba38d", "committedDate": "2020-09-26T03:56:00Z", "message": "Refactor: Move getAddressEntriesForAvailableBalanceStream to btcWalletService\nRename WithdrawalView.walletService to btcWalletService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561abd7a499e5a45bfffe9a86bd22a054c86da0c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/561abd7a499e5a45bfffe9a86bd22a054c86da0c", "committedDate": "2020-09-26T04:07:16Z", "message": "Refactor: Move publishDelayedPayoutTx from TradeManager to MediationProtocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fded97fb9c6ca5277f04c426f59f3eb56503b5ac", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fded97fb9c6ca5277f04c426f59f3eb56503b5ac", "committedDate": "2020-09-26T04:55:45Z", "message": "Refactor: Use task runner for peer publish delayed payout tx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191b031f385e6d0f2fc6f16c7793c5fe5d28c8f8", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/191b031f385e6d0f2fc6f16c7793c5fe5d28c8f8", "committedDate": "2020-09-26T04:56:58Z", "message": "Refactor: Rename MediationProtocol to DisputeProtocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e5cdada5d2a90e8ee01a3765cae5b306cf730de", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9e5cdada5d2a90e8ee01a3765cae5b306cf730de", "committedDate": "2020-09-26T17:14:10Z", "message": "Remove precondition as trade was added at that moment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61d04284e1574e5ea94941544b6eab3c13142ec", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e61d04284e1574e5ea94941544b6eab3c13142ec", "committedDate": "2020-09-26T17:24:57Z", "message": "Add ProcessModelServiceProvider to provide all the domain services to process model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4af92f8624ab5cf402bb10c0195d5fc2ec055d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0c4af92f8624ab5cf402bb10c0195d5fc2ec055d", "committedDate": "2020-09-26T17:28:38Z", "message": "Refactor: rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a71e2173fc02091fca0d9e11b809375fc2a058", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/62a71e2173fc02091fca0d9e11b809375fc2a058", "committedDate": "2020-09-26T17:28:52Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb4bff41de3d7f9aa40c26e1cf3f87e532fc9ed", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2bb4bff41de3d7f9aa40c26e1cf3f87e532fc9ed", "committedDate": "2020-09-26T17:40:09Z", "message": "Refactor: move method, remove unneeded stream call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766b1e2e1e8bf86c9e8df104a3b56807d0a73e40", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/766b1e2e1e8bf86c9e8df104a3b56807d0a73e40", "committedDate": "2020-09-26T17:42:17Z", "message": "Add check to not add a duplicate address entry with same offer ID and context.\nIn debugging trade protocol and taking same offer I could generate problems where the multisig entry was twice but with diff. keys, so take offer failed. I remember the error log to have seen in the past and I assume this was a rare bug we encountered when users took again the same offer which failed with an uncritical state earlier."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}