{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTc1NTkx", "number": 4851, "title": "Improve getBlocks request handling", "bodyText": "", "createdAt": "2020-11-26T16:24:27Z", "url": "https://github.com/bisq-network/bisq/pull/4851", "merged": true, "mergeCommit": {"oid": "9cc3f687c022304fbf620c37a0e5ab7009601975"}, "closed": true, "closedAt": "2020-12-29T12:55:41Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdg_YuLAFqTU0MDQwNDk3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdq6PUkgFqTU1OTUxOTQwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDA0OTcw", "url": "https://github.com/bisq-network/bisq/pull/4851#pullrequestreview-540404970", "createdAt": "2020-11-28T17:13:50Z", "commit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDAzNDg0", "url": "https://github.com/bisq-network/bisq/pull/4851#pullrequestreview-545003484", "createdAt": "2020-12-04T14:26:14Z", "commit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDoyNjoxNFrOH_TK_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowNjo0N1rOH_U6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjQ0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        if (blockDownloadListener == null) {\n          \n          \n            \n                            blockDownloadListener = (observable, oldValue, newValue) -> {\n          \n          \n            \n                                if ((double) newValue == 1) {\n          \n          \n            \n                                    setupWalletBestBlockListener();\n          \n          \n            \n                                    UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n          \n          \n            \n                                }\n          \n          \n            \n                            };\n          \n          \n            \n                            walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } else if (blockDownloadListener == null) {\n          \n          \n            \n                        blockDownloadListener = (observable, oldValue, newValue) -> {\n          \n          \n            \n                            if ((double) newValue == 1) {\n          \n          \n            \n                                setupWalletBestBlockListener();\n          \n          \n            \n                                UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n          \n          \n            \n                    }", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536136447", "createdAt": "2020-12-04T14:26:14Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -87,7 +95,24 @@ public void start() {\n \n         liteNodeNetworkService.start();\n \n-        bsqWalletService.addNewBestBlockListener(block -> {\n+        // We wait until the wallet is synced before using it trigger requests\n+        if (walletsSetup.isDownloadComplete()) {\n+            setupWalletBestBlockListener();\n+        } else {\n+            if (blockDownloadListener == null) {\n+                blockDownloadListener = (observable, oldValue, newValue) -> {\n+                    if ((double) newValue == 1) {\n+                        setupWalletBestBlockListener();\n+                        UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n+                    }\n+                };\n+                walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzM4Nw==", "bodyText": "Why error log level?", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536137387", "createdAt": "2020-12-04T14:27:33Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -97,20 +122,20 @@ public void start() {\n                 checkForBlockReceivedTimer.stop();\n             }\n \n-            int height = block.getHeight();\n-            log.info(\"New block at height {} from bsqWalletService\", height);\n+            int btcWalletHeight = btcBlock.getHeight();\n+            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODYxOQ==", "bodyText": "Timeout unit should be sec, is this a test artefact together with the error log level?", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536138619", "createdAt": "2020-12-04T14:29:14Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -97,20 +122,20 @@ public void start() {\n                 checkForBlockReceivedTimer.stop();\n             }\n \n-            int height = block.getHeight();\n-            log.info(\"New block at height {} from bsqWalletService\", height);\n+            int btcWalletHeight = btcBlock.getHeight();\n+            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n \n             // We expect to receive the new BSQ block from the network shortly after BitcoinJ has been aware of it.\n             // If we don't receive it we request it manually from seed nodes\n             checkForBlockReceivedTimer = UserThread.runAfter(() -> {\n-                int chainHeight = daoStateService.getChainHeight();\n-                if (chainHeight < height) {\n+                int daoChainHeight = daoStateService.getChainHeight();\n+                if (daoChainHeight < btcWalletHeight) {\n                     log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BicoinJ. \" +\n                                     \"We request from our seed nodes missing blocks from block height {}.\",\n-                            CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, chainHeight + 1);\n-                    liteNodeNetworkService.requestBlocks(chainHeight + 1);\n+                            CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, daoChainHeight + 1);\n+                    liteNodeNetworkService.requestBlocks(daoChainHeight + 1);\n                 }\n-            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC);\n+            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MDkwMQ==", "bodyText": "That's quite a bit of logging but perhaps ok since it's once per received block", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536140901", "createdAt": "2020-12-04T14:32:29Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -229,11 +257,12 @@ private void runDelayedBatchProcessing(List<RawBlock> blocks, Runnable resultHan\n     // We received a new block\n     private void onNewBlockReceived(RawBlock block) {\n         int blockHeight = block.getHeight();\n-        log.debug(\"onNewBlockReceived: block at height {}, hash={}\", blockHeight, block.getHash());\n+        log.info(\"onNewBlockReceived: block at height {}, hash={}. Our DAO chainHeight={}\", blockHeight, block.getHash(), chainTipHeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1Njk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            \"Might be caused by an previous networkNode.sendMessage.onFailure.\");\n          \n          \n            \n                                            \"Might be caused by a previous networkNode.sendMessage.onFailure.\");", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536156944", "createdAt": "2020-12-04T14:55:23Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -108,56 +108,55 @@ public void cancel() {\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     public void requestBlocks() {\n-        if (!stopped) {\n-            GetBlocksRequest getBlocksRequest = new GetBlocksRequest(startBlockHeight, nonce, networkNode.getNodeAddress());\n-            log.debug(\"getBlocksRequest \" + getBlocksRequest);\n-            if (timeoutTimer == null) {\n-                timeoutTimer = UserThread.runAfter(() -> {  // setup before sending to avoid race conditions\n-                            if (!stopped) {\n-                                String errorMessage = \"A timeout occurred when sending getBlocksRequest:\" + getBlocksRequest +\n-                                        \" on peersNodeAddress:\" + nodeAddress;\n-                                log.debug(errorMessage + \" / RequestDataHandler=\" + RequestBlocksHandler.this);\n-                                handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_TIMEOUT);\n-                            } else {\n-                                log.trace(\"We have stopped already. We ignore that timeoutTimer.run call. \" +\n-                                        \"Might be caused by an previous networkNode.sendMessage.onFailure.\");\n-                            }\n-                        },\n-                        TIMEOUT);\n-            }\n+        if (stopped) {\n+            log.warn(\"We have stopped already. We ignore that requestData call.\");\n+            return;\n+        }\n \n-            log.info(\"We request blocks from peer {} from block height {}.\", nodeAddress, getBlocksRequest.getFromBlockHeight());\n-            networkNode.addMessageListener(this);\n-            SettableFuture<Connection> future = networkNode.sendMessage(nodeAddress, getBlocksRequest);\n-            Futures.addCallback(future, new FutureCallback<>() {\n-                @Override\n-                public void onSuccess(Connection connection) {\n-                    if (!stopped) {\n-                        log.info(\"Sending of GetBlocksRequest message to peer {} succeeded.\", nodeAddress.getFullAddress());\n-                    } else {\n-                        log.trace(\"We have stopped already. We ignore that networkNode.sendMessage.onSuccess call.\" +\n-                                \"Might be caused by a previous timeout.\");\n-                    }\n-                }\n+        GetBlocksRequest getBlocksRequest = new GetBlocksRequest(startBlockHeight, nonce, networkNode.getNodeAddress());\n \n-                @Override\n-                public void onFailure(@NotNull Throwable throwable) {\n+        if (timeoutTimer != null) {\n+            log.warn(\"We had a timer already running and stop it.\");\n+            timeoutTimer.stop();\n+        }\n+        timeoutTimer = UserThread.runAfter(() -> {  // setup before sending to avoid race conditions\n                     if (!stopped) {\n-                        String errorMessage = \"Sending getBlocksRequest to \" + nodeAddress +\n-                                \" failed. That is expected if the peer is offline.\\n\\t\" +\n-                                \"getBlocksRequest=\" + getBlocksRequest + \".\" +\n-                                \"\\n\\tException=\" + throwable.getMessage();\n-                        log.error(errorMessage);\n-                        handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_FAILURE);\n+                        String errorMessage = \"A timeout occurred when sending getBlocksRequest:\" + getBlocksRequest +\n+                                \" on peersNodeAddress:\" + nodeAddress;\n+                        log.debug(\"{} / RequestDataHandler={}\", errorMessage, RequestBlocksHandler.this);\n+                        handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_TIMEOUT);\n                     } else {\n-                        log.trace(\"We have stopped already. We ignore that networkNode.sendMessage.onFailure call. \" +\n-                                \"Might be caused by a previous timeout.\");\n+                        log.warn(\"We have stopped already. We ignore that timeoutTimer.run call. \" +\n+                                \"Might be caused by an previous networkNode.sendMessage.onFailure.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (networkEnvelope instanceof GetBlocksResponse) {\n          \n          \n            \n                    if (!(networkEnvelope instanceof GetBlocksResponse)) return; // Also need to remove other brace", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536159701", "createdAt": "2020-12-04T14:59:12Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -168,31 +167,36 @@ public void onFailure(@NotNull Throwable throwable) {\n     @Override\n     public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n         if (networkEnvelope instanceof GetBlocksResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NDg4Mg==", "bodyText": "Doesn't timeoutTimer need to be stopped here like before?\n        stopTimeoutTimer();", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536164882", "createdAt": "2020-12-04T15:06:47Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -168,31 +167,36 @@ public void onFailure(@NotNull Throwable throwable) {\n     @Override\n     public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n         if (networkEnvelope instanceof GetBlocksResponse) {\n-            if (connection.getPeersNodeAddressOptional().isPresent() && connection.getPeersNodeAddressOptional().get().equals(nodeAddress)) {\n-                if (!stopped) {\n-                    GetBlocksResponse getBlocksResponse = (GetBlocksResponse) networkEnvelope;\n-                    if (getBlocksResponse.getRequestNonce() == nonce) {\n-                        stopTimeoutTimer();\n-                        checkArgument(connection.getPeersNodeAddressOptional().isPresent(),\n-                                \"RequestDataHandler.onMessage: connection.getPeersNodeAddressOptional() must be present \" +\n-                                        \"at that moment\");\n-                        cleanup();\n-                        log.info(\"We received from peer {} a BlocksResponse with {} blocks\",\n-                                nodeAddress.getFullAddress(), getBlocksResponse.getBlocks().size());\n-                        listener.onComplete(getBlocksResponse);\n-                    } else {\n-                        log.warn(\"Nonce not matching. That can happen rarely if we get a response after a canceled \" +\n-                                        \"handshake (timeout causes connection close but peer might have sent a msg before \" +\n-                                        \"connection was closed).\\n\\t\" +\n-                                        \"We drop that message. nonce={} / requestNonce={}\",\n-                                nonce, getBlocksResponse.getRequestNonce());\n-                    }\n-                } else {\n-                    log.warn(\"We have stopped already. We ignore that onDataRequest call.\");\n-                }\n-            } else {\n-                log.warn(\"We got a message from ourselves. That should never happen.\");\n+            if (stopped) {\n+                log.warn(\"We have stopped already. We ignore that onDataRequest call.\");\n+                return;\n+            }\n+\n+            Optional<NodeAddress> optionalNodeAddress = connection.getPeersNodeAddressOptional();\n+            if (!optionalNodeAddress.isPresent()) {\n+                log.warn(\"Peers node address is not present, that is not expected.\");\n+                // We do not return here as in case the connection has been created from the peers side we might not\n+                // have the address set. As we check the nonce later we do not care that much for the check if the\n+                // connection address is the same as the one we used.\n+            } else if (!optionalNodeAddress.get().equals(nodeAddress)) {\n+                log.warn(\"Peers node address is the same we requested. We ignore that message.\");\n+                return;\n             }\n+\n+            GetBlocksResponse getBlocksResponse = (GetBlocksResponse) networkEnvelope;\n+            if (getBlocksResponse.getRequestNonce() != nonce) {\n+                log.warn(\"Nonce not matching. That can happen rarely if we get a response after a canceled \" +\n+                                \"handshake (timeout causes connection close but peer might have sent a msg before \" +\n+                                \"connection was closed).\\n\\t\" +\n+                                \"We drop that message. nonce={} / requestNonce={}\",\n+                        nonce, getBlocksResponse.getRequestNonce());\n+                return;\n+            }\n+\n+            cleanup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babce8a9f4ba401e33fc331c0a34c821c13d361"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a05e5bf0d5c5a84678ff032e987ea5997300af9", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4a05e5bf0d5c5a84678ff032e987ea5997300af9", "committedDate": "2020-12-28T17:24:35Z", "message": "Improve getBlocks request handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5363c8d5058c6bd25d9d1ca835520970d6e12a66", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5363c8d5058c6bd25d9d1ca835520970d6e12a66", "committedDate": "2020-12-28T17:24:35Z", "message": "Remove cancel,cleanup and stop method. Use terminate instead.\nFix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e39477fca94b5fd8b87b034f0977b8e0a31bd96", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5e39477fca94b5fd8b87b034f0977b8e0a31bd96", "committedDate": "2020-12-28T17:24:35Z", "message": "Refactor: Use terminate instead of cancel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0be451a13647b2ed2f682037257e3eb9725b9b12", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0be451a13647b2ed2f682037257e3eb9725b9b12", "committedDate": "2020-12-28T17:24:35Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357c980390bbd5739ddaaa24eca77b923a943be5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/357c980390bbd5739ddaaa24eca77b923a943be5", "committedDate": "2020-12-28T17:24:35Z", "message": "Fix leftovers from debugging.\nUse else if\nFix typo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb9ddb17afaab27d994c38349da266558c058ea5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/cb9ddb17afaab27d994c38349da266558c058ea5", "committedDate": "2020-12-04T15:57:02Z", "message": "Fix leftovers from debugging.\nUse else if\nFix typo"}, "afterCommit": {"oid": "357c980390bbd5739ddaaa24eca77b923a943be5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/357c980390bbd5739ddaaa24eca77b923a943be5", "committedDate": "2020-12-28T17:24:35Z", "message": "Fix leftovers from debugging.\nUse else if\nFix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe44a343d0d627cf567d8a657880f2108b62104a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fe44a343d0d627cf567d8a657880f2108b62104a", "committedDate": "2020-12-28T18:17:06Z", "message": "Remove \"hack\" for removal of blockDownloadListener\nRename params\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "768541664bdfd3f45f101ca2bb4fdc497fb74ed9", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/768541664bdfd3f45f101ca2bb4fdc497fb74ed9", "committedDate": "2020-12-28T18:18:19Z", "message": "Use stream API\nAdd checks to tryWithNewSeedNode method\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc8905634a2225678f8ad3966f3772ce9feeb02", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1fc8905634a2225678f8ad3966f3772ce9feeb02", "committedDate": "2020-12-28T18:18:45Z", "message": "Improve logs\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862b12fe035d27c551b17d510e68eefa062d5528", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/862b12fe035d27c551b17d510e68eefa062d5528", "committedDate": "2020-12-28T18:34:50Z", "message": "Apply code inspection\nCleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MjYyNjQy", "url": "https://github.com/bisq-network/bisq/pull/4851#pullrequestreview-559262642", "createdAt": "2020-12-28T18:51:34Z", "commit": {"oid": "862b12fe035d27c551b17d510e68eefa062d5528"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTE5NDAx", "url": "https://github.com/bisq-network/bisq/pull/4851#pullrequestreview-559519401", "createdAt": "2020-12-29T12:53:17Z", "commit": {"oid": "862b12fe035d27c551b17d510e68eefa062d5528"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3445, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}