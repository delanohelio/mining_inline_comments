{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDMwOTI2", "number": 4315, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNTozMFrOEGOv9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo1ODo1MFrOEWePwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTY4NTY3OnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNTozMFrOGk5WfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNTozMFrOGk5WfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTU2NA==", "bodyText": "Please wrap comments at 90 characters per bisq-network/style#5.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341564", "createdAt": "2020-06-17T07:35:30Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTY4ODE3OnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNjoxMVrOGk5YCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNjoxMVrOGk5YCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTk2MQ==", "bodyText": "Use ex for exception variable names. (e is also used widely throughout the codebase; ex is preferred).", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341961", "createdAt": "2020-06-17T07:36:11Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());\n+                    }\n+                });\n+\n+        // Filter the supported altcoins (currency pair format is ALT-BTC)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.counter.equals(Currency.BTC))\n+                .filter(cp -> supportedCryptoCurrencies.contains(cp.base.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.base.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTY5MjIxOnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNzoxM1rOGk5agQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNzoxM1rOGk5agQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjU5Mw==", "bodyText": "Please wrap code at 120 chars per bisq-network/style#3.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441342593", "createdAt": "2020-06-17T07:37:13Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTcwNTQ2OnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0MTowMlrOGk5i5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0MTowMlrOGk5i5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NDc0MQ==", "bodyText": "Prefer modelling this as guard logic, e.g.:\nif (exchangeRateList.isEmpty())\n    // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n    return;\n\nif (exchangeRateList.size() == 1) {\n    // If a single provider has rates for this currency, then aggregate = rate from that provider\n    aggregateExchangeRate = exchangeRateList.get(0);\n}\nelse {\n    // If multiple providers have rates for this currency, then aggregate = average of the rates\n    // ...\n}\naggregateExchangeRates.put(aggregateExchangeRate.getCurrency(), aggregateExchangeRate);\nSee also bisq-network/style#12", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441344741", "createdAt": "2020-06-17T07:41:02Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java", "diffHunk": "@@ -53,26 +60,88 @@ public ExchangeRateService(List<ExchangeRateProvider> providers) {\n \n     public Map<String, Object> getAllMarketPrices() {\n         Map<String, Object> metadata = new LinkedHashMap<>();\n-        Map<String, ExchangeRate> allExchangeRates = new LinkedHashMap<>();\n+        Map<String, ExchangeRate> aggregateExchangeRates = getAggregateExchangeRates();\n \n         providers.forEach(p -> {\n             Set<ExchangeRate> exchangeRates = p.get();\n+\n+            // Specific metadata fields for specific providers are expected by the client, mostly for historical reasons\n+            // Therefore, add metadata fields for all known providers\n+            // Rates are encapsulated in the \"data\" map below\n             metadata.putAll(getMetadata(p, exchangeRates));\n-            exchangeRates.forEach(e ->\n-                allExchangeRates.put(e.getCurrency(), e)\n-            );\n         });\n \n         return new LinkedHashMap<String, Object>() {{\n             putAll(metadata);\n             // Use a sorted list by currency code to make comparision of json data between different\n             // price nodes easier\n-            List<ExchangeRate> values = new ArrayList<>(allExchangeRates.values());\n+            List<ExchangeRate> values = new ArrayList<>(aggregateExchangeRates.values());\n             values.sort(Comparator.comparing(ExchangeRate::getCurrency));\n             put(\"data\", values);\n         }};\n     }\n \n+    /**\n+     * For each currency, create an aggregate {@link ExchangeRate} based on the currency's rates from all providers.\n+     * If multiple providers have rates for the currency, then aggregate price = average of retrieved prices.\n+     * If a single provider has rates for the currency, then aggregate price = the rate from that provider.\n+     *\n+     * @return Aggregate {@link ExchangeRate}s based on info from all providers, indexed by currency code\n+     */\n+    private Map<String, ExchangeRate> getAggregateExchangeRates() {\n+        Map<String, ExchangeRate> aggregateExchangeRates = new HashMap<>();\n+\n+        // Query all known providers and collect all exchange rates, grouped by currency code\n+        Map<String, List<ExchangeRate>> currencyCodeToExchangeRates = getCurrencyCodeToExchangeRates();\n+\n+        // For each currency code, calculate aggregate rate\n+        currencyCodeToExchangeRates.forEach((currencyCode, exchangeRateList) -> {\n+            ExchangeRate aggregateExchangeRate;\n+            if (exchangeRateList.size() == 1) {\n+                // If a single provider has rates for this currency, then aggregate = rate from that provider\n+                aggregateExchangeRate = exchangeRateList.get(0);\n+            }\n+            else if (exchangeRateList.size() > 1) {\n+                // If multiple providers have rates for this currency, then aggregate = average of the rates\n+                OptionalDouble opt = exchangeRateList.stream().mapToDouble(ExchangeRate::getPrice).average();\n+                double priceAvg = opt.orElseThrow(IllegalStateException::new); // List size > 1, so opt is always set\n+\n+                aggregateExchangeRate = new ExchangeRate(\n+                        currencyCode,\n+                        BigDecimal.valueOf(priceAvg),\n+                        new Date(), // timestamp = time when avg is calculated\n+                        \"Bisq-Aggregate\");\n+            }\n+            else {\n+                // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n+               return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTcxNjY4OnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/providers/Binance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0NDoyMlrOGk5qRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0NDoyMlrOGk5qRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NjYyOQ==", "bodyText": "Now that we are always querying all ExchangeRateProviders and averaging the results, the @Order annotation is no longer needed. As per the Javadoc in ExchangeRateProvider, this annotation was used to ensure precedence, but that becomes moot now. I'd recommend removing it, and updating the aforementioned Javadoc to avoid confusion.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441346629", "createdAt": "2020-06-17T07:44:22Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/providers/Binance.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.price.spot.providers;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import org.knowm.xchange.binance.BinanceExchange;\n+\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+\n+import java.util.Set;\n+\n+@Component\n+@Order(5)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTczMDg4OnYy", "diffSide": "RIGHT", "path": "pricenode/src/main/java/bisq/price/spot/providers/Poloniex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNlrOGk5zLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNlrOGk5zLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODkwOQ==", "bodyText": "Prefer package-private visibility whenever possible, i.e. please remove the public modifier here and in all other ExchangeRateProvider implementations. The bisq.spot.providers package is expressly designed such that all member classes are package-private; they need not and should not be referenced from any other package.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441348909", "createdAt": "2020-06-17T07:48:16Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/providers/Poloniex.java", "diffHunk": "@@ -19,76 +19,28 @@\n \n import bisq.price.spot.ExchangeRate;\n import bisq.price.spot.ExchangeRateProvider;\n-import bisq.price.util.Altcoins;\n \n-import org.knowm.xchange.currency.Currency;\n-import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexMarketData;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexTicker;\n+import org.knowm.xchange.poloniex.PoloniexExchange;\n \n-import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.annotation.Order;\n-import org.springframework.http.RequestEntity;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.client.RestTemplate;\n-import org.springframework.web.util.UriComponentsBuilder;\n \n import java.time.Duration;\n \n-import java.util.Date;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n @Component\n @Order(4)\n-class Poloniex extends ExchangeRateProvider {\n-\n-    private final RestTemplate restTemplate = new RestTemplate();\n+public class Poloniex extends ExchangeRateProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTczNzYxOnYy", "diffSide": "RIGHT", "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo1MDowMFrOGk53Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo1MTo1M1rOGk57aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ==", "bodyText": "Prefer AbstractExchangeTest for naming consistency and please mark the class as abstract to better signal that it is not in fact a concrete / executable test.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441349939", "createdAt": "2020-06-17T07:50:00Z", "author": {"login": "cbeams"}, "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package bisq.price;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.locale.TradeCurrency;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+public class ExchangeTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MTAxNw==", "bodyText": "Actually, prefer AbstractExchangeRateProviderTest for clarity, as what is being tested are indeed ExchangeRateProvider implementations.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441351017", "createdAt": "2020-06-17T07:51:53Z", "author": {"login": "cbeams"}, "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package bisq.price;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.locale.TradeCurrency;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+public class ExchangeTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ=="}, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDkyMDI2OnYy", "diffSide": "RIGHT", "path": "pricenode/install_pricenode_debian.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowNTo1MFrOG8di3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowNTo1MFrOG8di3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MTgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sudo -H -i -u \"${ROOT_USER}\" apt-get install -y openjdk-11-jdk\n          \n          \n            \n            sudo -H -i -u \"${ROOT_USER}\" apt-get install -qq -y openjdk-11-jdk", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r466051804", "createdAt": "2020-08-05T23:05:50Z", "author": {"login": "wiz"}, "path": "pricenode/install_pricenode_debian.sh", "diffHunk": "@@ -60,8 +60,8 @@ echo \"[*] Cloning Bisq repo\"\n sudo -H -i -u \"${BISQ_USER}\" git config --global advice.detachedHead false\n sudo -H -i -u \"${BISQ_USER}\" git clone --branch \"${BISQ_REPO_TAG}\" \"${BISQ_REPO_URL}\" \"${BISQ_HOME}/${BISQ_REPO_NAME}\"\n \n-echo \"[*] Installing OpenJDK 10.0.2 from Bisq repo\"\n-sudo -H -i -u \"${ROOT_USER}\" \"${BISQ_HOME}/${BISQ_REPO_NAME}/scripts/install_java.sh\"\n+echo \"[*] Installing OpenJDK 11\"\n+sudo -H -i -u \"${ROOT_USER}\" apt-get install -y openjdk-11-jdk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTk5NjgxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo1ODo1MFrOG9zGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNTozOTowOVrOG90gfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MzQ2MA==", "bodyText": "New import, haven't seen any mention of this in the discussion. Anything new carries a risk, and perhaps more so when upgrading versions as the project in question already knows it's being used by bisq. In this case this is for price nodes so bisq wallets are not affected, lowering the risk.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r467453460", "createdAt": "2020-08-08T10:58:50Z", "author": {"login": "sqrrm"}, "path": "build.gradle", "diffHunk": "@@ -57,7 +57,7 @@ configure(subprojects) {\n         junitVersion = '4.12'\n         jupiterVersion = '5.3.2'\n         kotlinVersion = '1.3.41'\n-        knowmXchangeVersion = '4.3.3'\n+        knowmXchangeVersion = '4.4.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NjYwNA==", "bodyText": "This is the library that abstract away the different exchange integrations. Since we want to have the most up-to-date integration possible (e.g. broadest set of exchanges, support for most recent exchange API versions, etc) it makes sense to use the latest version of this lib.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r467476604", "createdAt": "2020-08-08T15:39:09Z", "author": {"login": "cd2357"}, "path": "build.gradle", "diffHunk": "@@ -57,7 +57,7 @@ configure(subprojects) {\n         junitVersion = '4.12'\n         jupiterVersion = '5.3.2'\n         kotlinVersion = '1.3.41'\n-        knowmXchangeVersion = '4.3.3'\n+        knowmXchangeVersion = '4.4.2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MzQ2MA=="}, "originalCommit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2474, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}