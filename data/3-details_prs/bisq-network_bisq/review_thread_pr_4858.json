{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mjc0NjI2", "number": 4858, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0NDozOFrOE_PhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1MDowNVrOE_Pq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQ5OTY0OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/CurrencyFormat.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0NDozOFrOH81-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxNjozMlrOH8-G9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MDkwMw==", "bodyText": "I don't understand what's going on here.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533560903", "createdAt": "2020-12-01T16:44:38Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/CurrencyFormat.java", "diffHunk": "@@ -50,6 +53,23 @@ public static String formatBsq(long sats) {\n         return BSQ_FORMAT.format(BigDecimal.valueOf(sats).divide(BSQ_SATOSHI_DIVISOR));\n     }\n \n+    public static String formatTxFeeRate(TxFeeRateInfo txFeeRateInfo) {\n+        String stdTxFeeRate = formatTxFeeRate(txFeeRateInfo.getStdTxFeeRate());\n+        String customTxFeeRate = txFeeRateInfo.getCustomTxFeeRate() < 0\n+                ? formatTxFeeRate(txFeeRateInfo.getCustomTxFeeRate())\n+                : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NjQ4MQ==", "bodyText": "To clear this up, I should probably add a boolean useCustomWithdrawalTxFee field to TxFeeRateInfo.  This would be set from the Preference#useCustomWithdrawalTxFee value.     (Remember that Preferences is not visible to the CLI, and these *Info proto wrappers are for passing the minimum data needed from server to CLI.)\nThis confusion is caused by not having that field.  When txFeeRateInfo.getCustomTxFeeRate() == -1, the custom tx fee rate preference is ignored in the CLI.  In core, it means the preference.useCustomWithdrawalTxFee == false.\nIn pseudo English, it means\nString customTxFeeRate = (if are we using the fee service's tx fee rate)\n                ? (format the custom tx fee rate)\n                : null;\n\n\nAdding a boolean useCustomWithdrawalTxFee field to TxFeeRateInfo would fix this.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533576481", "createdAt": "2020-12-01T17:05:45Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/CurrencyFormat.java", "diffHunk": "@@ -50,6 +53,23 @@ public static String formatBsq(long sats) {\n         return BSQ_FORMAT.format(BigDecimal.valueOf(sats).divide(BSQ_SATOSHI_DIVISOR));\n     }\n \n+    public static String formatTxFeeRate(TxFeeRateInfo txFeeRateInfo) {\n+        String stdTxFeeRate = formatTxFeeRate(txFeeRateInfo.getStdTxFeeRate());\n+        String customTxFeeRate = txFeeRateInfo.getCustomTxFeeRate() < 0\n+                ? formatTxFeeRate(txFeeRateInfo.getCustomTxFeeRate())\n+                : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MDkwMw=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NDE5OA==", "bodyText": "Fixed in commit faf030f.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533694198", "createdAt": "2020-12-01T20:16:32Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/CurrencyFormat.java", "diffHunk": "@@ -50,6 +53,23 @@ public static String formatBsq(long sats) {\n         return BSQ_FORMAT.format(BigDecimal.valueOf(sats).divide(BSQ_SATOSHI_DIVISOR));\n     }\n \n+    public static String formatTxFeeRate(TxFeeRateInfo txFeeRateInfo) {\n+        String stdTxFeeRate = formatTxFeeRate(txFeeRateInfo.getStdTxFeeRate());\n+        String customTxFeeRate = txFeeRateInfo.getCustomTxFeeRate() < 0\n+                ? formatTxFeeRate(txFeeRateInfo.getCustomTxFeeRate())\n+                : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MDkwMw=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzUxNTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0Nzo1OFrOH82IJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDoxNzoxN1rOH9FIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzQzMA==", "bodyText": "Is it really a good idea to block here? As discussed before, could we use a callback to avoid blocking?", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533563430", "createdAt": "2020-12-01T16:47:58Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5NDE2MA==", "bodyText": "I'm not sure what the difference would be between future.get() and using a callback.   The wait for a response has to happen somewhere before GrpcWalletsService returns the gRPC reply.\nDo you think FeeService#requestFees should be refactored to take a callback parameter?  Were you and chimp wanting to  refactor FeeService#requestFees?  Or should that be left alone, and make adjustments only in the api?\nAnother way would be to deal with the result handling is do it in the GrpcWalletsService.  I try to keep those boilerplate Grpc*Service classes as small as possible, but sometimes dealing with async calls in that layer is unavoidable.\nIf we are concerned about blocking forever, we could block with a timeout:\nfeeRequestFuture.get(5, SECONDS);  // Block until async fee request is complete.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533594160", "createdAt": "2020-12-01T17:31:34Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzQzMA=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzcyOQ==", "bodyText": "I was thinking something like, in CoreWalletService\n    TxFeeRateInfo getTxFeeRate(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {\n            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n            Futures.addCallback(feeRequestFuture, new FutureCallback<>() {\n\n                @Override\n                public void onSuccess(@Nullable Object result) {\n                    resultHandler.handleResult();\n                }\n\n                @Override\n                public void onFailure(Throwable t) {\n                    errorMessageHandler.handleErrorMessage(t.getMessage());\n                }\n            }, MoreExecutors.directExecutor());\n    }\n\nwhere the resultHandler is doing the gRPC reply, something like\n    @Override\n    public void getTxFeeRate(GetTxFeeRateRequest req,\n                             StreamObserver<GetTxFeeRateReply> responseObserver) {\n        ResultHandler resultHandler = () -> {\n            var reply = GetTxFeeRateReply.newBuilder()\n                    .setTxFeeRateInfo(txFeeRateInfo.toProtoMessage())\n                    .build();\n            responseObserver.onNext(reply);\n            responseObserver.onCompleted();\n        };\n        coreApi.getTxFeeRate(resultHandler, errorHandler);\n    }\n\nBad code, just to illustrate the idea.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533723729", "createdAt": "2020-12-01T21:11:12Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzQzMA=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNTkzNg==", "bodyText": "This is exactly [erhmmm... similar] what I'm doing, will test soon...", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533725936", "createdAt": "2020-12-01T21:15:25Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzQzMA=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwOTMwMQ==", "bodyText": "Commit 987d893 is a solution to the blocking problem.  I don't pass an error handler to keep it simple, and not do that before I understand how it would help here.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533809301", "createdAt": "2020-12-02T00:17:17Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzQzMA=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzUyNDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1MDowNVrOH82ONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxMjowN1rOH8_8Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2NDk4Mw==", "bodyText": "We also don't want to create txs with fees < 1 sat/b, but perhaps that doesn't have to be checked here.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533564983", "createdAt": "2020-12-01T16:50:05Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new IllegalStateException(\"could not request fees from fee service.\", e);\n+        }\n+\n+        Coin stdTxFeeRate = feeService.getTxFeePerVbyte();\n+        Coin customTxFeeRate = preferences.isUseCustomWithdrawalTxFee()\n+                ? Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes())\n+                : Coin.NEGATIVE_SATOSHI;\n+\n+        return new TxFeeRateInfo(stdTxFeeRate.value, customTxFeeRate.value);\n+    }\n+\n+    TxFeeRateInfo setTxFeeRatePreference(long txFeeRate) {\n+        if (txFeeRate <= 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5ODY2NA==", "bodyText": "Doing this check here makes the CLI's error msg stylistically consistent with others.\nThis brings up a general issue that is going to need quite a bit of work in the API:  displaying validation error messages coming from the server's core, in the CLI.    But for now, getting all the v1 methods working for correct parameters is the short term priority.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533598664", "createdAt": "2020-12-01T17:38:20Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new IllegalStateException(\"could not request fees from fee service.\", e);\n+        }\n+\n+        Coin stdTxFeeRate = feeService.getTxFeePerVbyte();\n+        Coin customTxFeeRate = preferences.isUseCustomWithdrawalTxFee()\n+                ? Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes())\n+                : Coin.NEGATIVE_SATOSHI;\n+\n+        return new TxFeeRateInfo(stdTxFeeRate.value, customTxFeeRate.value);\n+    }\n+\n+    TxFeeRateInfo setTxFeeRatePreference(long txFeeRate) {\n+        if (txFeeRate <= 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2NDk4Mw=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNDIzNA==", "bodyText": "Agreed, not an issue for now, good to think of how to handle it though as you say.", "url": "https://github.com/bisq-network/bisq/pull/4858#discussion_r533724234", "createdAt": "2020-12-01T21:12:07Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreWalletsService.java", "diffHunk": "@@ -185,6 +196,37 @@ void sendBsq(String address,\n         }\n     }\n \n+    TxFeeRateInfo getTxFeeRate() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new IllegalStateException(\"could not request fees from fee service.\", e);\n+        }\n+\n+        Coin stdTxFeeRate = feeService.getTxFeePerVbyte();\n+        Coin customTxFeeRate = preferences.isUseCustomWithdrawalTxFee()\n+                ? Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes())\n+                : Coin.NEGATIVE_SATOSHI;\n+\n+        return new TxFeeRateInfo(stdTxFeeRate.value, customTxFeeRate.value);\n+    }\n+\n+    TxFeeRateInfo setTxFeeRatePreference(long txFeeRate) {\n+        if (txFeeRate <= 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2NDk4Mw=="}, "originalCommit": {"oid": "0b0f9f112056c6956b5112e31fd7dcf12a8701da"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2639, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}