{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDc5Mzc1", "number": 5000, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMToyNDoxMVrOFMt-dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowNzozNlrOFQ7CdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODgwNTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMToyNDoxMVrOIQl8PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjoxNTowMVrOIVmtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI2OTc1Nw==", "bodyText": "Wouldn't it be better to add that to the constructor so the TxInput is immutable?", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r554269757", "createdAt": "2021-01-09T01:24:11Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,14 +254,18 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));\n                     if (pubKeyAsHex == null) {\n                         log.debug(\"pubKeyAsHex is not set as we received a not supported sigScript. \" +\n                                         \"txId={}, asm={}, txInWitness={}\",\n                                 rawDtoTx.getTxId(), rawInput.getScriptSig().getAsm(), rawInput.getTxInWitness());\n                     }\n-                    return new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    var txInput = new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    txInput.isSegwit = rawInput.getTxInWitness() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e14ee6db3c3e239bf388e6c300b04845c219f41"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyNTE4Mw==", "bodyText": "(No longer applicable)", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r559525183", "createdAt": "2021-01-18T12:15:01Z", "author": {"login": "stejbac"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,14 +254,18 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));\n                     if (pubKeyAsHex == null) {\n                         log.debug(\"pubKeyAsHex is not set as we received a not supported sigScript. \" +\n                                         \"txId={}, asm={}, txInWitness={}\",\n                                 rawDtoTx.getTxId(), rawInput.getScriptSig().getAsm(), rawInput.getTxInWitness());\n                     }\n-                    return new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    var txInput = new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    txInput.isSegwit = rawInput.getTxInWitness() != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI2OTc1Nw=="}, "originalCommit": {"oid": "5e14ee6db3c3e239bf388e6c300b04845c219f41"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxOTQxMzA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQxOToyOTowM1rOIVHpIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjoxODoyOVrOIVm0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAxNjIyNQ==", "bodyText": "Wouldn't it be better to use a block height at which we activate the support for segwit inputs. It is technically a hard fork which would become activated at that block height.\nThat should also cover the past tx(s) with a segwit input.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r559016225", "createdAt": "2021-01-16T19:29:03Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,8 +254,10 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc739d5f189386fcea32b57b47f97eff074da24"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyNzE2MQ==", "bodyText": "Yes, perhaps that would be better. I'll push a change to do that shortly, as well as no longer excluding all but the first segwit input pubkey (to be on the safe side and consistent with the original pubkey extraction for P2PKH inputs).", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r559527161", "createdAt": "2021-01-18T12:18:29Z", "author": {"login": "stejbac"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,8 +254,10 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAxNjIyNQ=="}, "originalCommit": {"oid": "fdc739d5f189386fcea32b57b47f97eff074da24"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjg4ODIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/dao/node/full/rpc/dto/RawBlock.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowNzozNlrOIXC8Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDozNjoyMlrOIXvrHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNjMzMQ==", "bodyText": "The name overload of full/RawBlock and full/rpc/dto/RawBlock is a bit confusing.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r561036331", "createdAt": "2021-01-20T15:07:36Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/full/rpc/dto/RawBlock.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.dao.node.full.rpc.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.List;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true, value = \"ntx\")\n+@JsonPropertyOrder({\"hash\", \"confirmations\", \"strippedsize\", \"size\", \"weight\", \"height\", \"version\", \"versionHex\",\n+        \"merkleroot\", \"tx\", \"time\", \"mediantime\", \"nonce\", \"bits\", \"difficulty\", \"chainwork\", \"nTx\",\n+        \"previousblockhash\", \"nextblockhash\"})\n+public class RawBlock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcyMzY1MA==", "bodyText": "I just took the names from the very similar DTO classes defined in the original btcd-cli4j library. Perhaps I could rename them from Raw... to DtoBlock, DtoTransaction, etc.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r561723650", "createdAt": "2021-01-21T09:29:47Z", "author": {"login": "stejbac"}, "path": "core/src/main/java/bisq/core/dao/node/full/rpc/dto/RawBlock.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.dao.node.full.rpc.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.List;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true, value = \"ntx\")\n+@JsonPropertyOrder({\"hash\", \"confirmations\", \"strippedsize\", \"size\", \"weight\", \"height\", \"version\", \"versionHex\",\n+        \"merkleroot\", \"tx\", \"time\", \"mediantime\", \"nonce\", \"bits\", \"difficulty\", \"chainwork\", \"nTx\",\n+        \"previousblockhash\", \"nextblockhash\"})\n+public class RawBlock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNjMzMQ=="}, "originalCommit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc2OTI0NQ==", "bodyText": "Yeah, I think that would make it clearer, adding a dto prefix or infix for each of the dto classes would make it clear what's going on. It is mostly clear as the variable names you've used include dto, but even better if the class names themselves also adhered to that pattern.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r561769245", "createdAt": "2021-01-21T10:36:22Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/full/rpc/dto/RawBlock.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.dao.node.full.rpc.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.List;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true, value = \"ntx\")\n+@JsonPropertyOrder({\"hash\", \"confirmations\", \"strippedsize\", \"size\", \"weight\", \"height\", \"version\", \"versionHex\",\n+        \"merkleroot\", \"tx\", \"time\", \"mediantime\", \"nonce\", \"bits\", \"difficulty\", \"chainwork\", \"nTx\",\n+        \"previousblockhash\", \"nextblockhash\"})\n+public class RawBlock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNjMzMQ=="}, "originalCommit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2620, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}