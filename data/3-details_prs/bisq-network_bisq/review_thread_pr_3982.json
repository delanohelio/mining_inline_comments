{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MzQxNTg3", "number": 3982, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjo1ODo1M1rODghVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxNjo1NFrODjbM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDI3MjAwOnYy", "diffSide": "LEFT", "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjo1ODo1M1rOFqxQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjo1NDoxNFrOFuqYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5MTYwMQ==", "bodyText": "Removed redundant LocalBitcoinNode call, because Preferences.getUseTorForBitcoinJ makes the same call and it has the same effect.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380391601", "createdAt": "2020-02-17T22:58:53Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -559,7 +576,7 @@ else if (displayTorNetworkSettingsHandler != null)\n \n         // We only init wallet service here if not using Tor for bitcoinj.\n         // When using Tor, wallet init must be deferred until Tor is ready.\n-        if (!preferences.getUseTorForBitcoinJ() || localBitcoinNode.isDetected()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2OTA5MA==", "bodyText": "If localBitcoinNode.willUse() == true and config.useTorForBtcOptionSetExplicitly == true the new code will behave differently than before. So I don't think we should remove this from here.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384369090", "createdAt": "2020-02-26T09:29:00Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -559,7 +576,7 @@ else if (displayTorNetworkSettingsHandler != null)\n \n         // We only init wallet service here if not using Tor for bitcoinj.\n         // When using Tor, wallet init must be deferred until Tor is ready.\n-        if (!preferences.getUseTorForBitcoinJ() || localBitcoinNode.isDetected()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5MTYwMQ=="}, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3MzEwMg==", "bodyText": "You're right, I missed that. Thanks! My concern here is that this line decides whether to \"initiate wallet\" at this time, which implies that Tor will not be used. Ideally Preferences.getUseTorForBitcoinJ() would be a full authority on whether or not we're using Tor, but here it's only one half of the condition. So I can restore initial logic, but ideally I'd like to restructure this. I'll see what I can do.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384473102", "createdAt": "2020-02-26T12:54:14Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -559,7 +576,7 @@ else if (displayTorNetworkSettingsHandler != null)\n \n         // We only init wallet service here if not using Tor for bitcoinj.\n         // When using Tor, wallet init must be deferred until Tor is ready.\n-        if (!preferences.getUseTorForBitcoinJ() || localBitcoinNode.isDetected()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5MTYwMQ=="}, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDI3NTI5OnYy", "diffSide": "LEFT", "path": "desktop/src/main/java/bisq/desktop/main/MainViewModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzowMToyN1rOFqxSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzowMToyN1rOFqxSmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5MjA5MQ==", "bodyText": "Apart from the .isDetected() -> .isUsable.get() line, these are just formatting changes.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380392091", "createdAt": "2020-02-17T23:01:27Z", "author": {"login": "dmos62"}, "path": "desktop/src/main/java/bisq/desktop/main/MainViewModel.java", "diffHunk": "@@ -441,10 +451,12 @@ private void setupBtcNumPeersWatcher() {\n                 checkNumberOfBtcPeersTimer = UserThread.runAfter(() -> {\n                     // check again numPeers\n                     if (walletsSetup.numPeersProperty().get() == 0) {\n-                        if (localBitcoinNode.isDetected())\n-                            getWalletServiceErrorMsg().set(Res.get(\"mainView.networkWarning.localhostBitcoinLost\", Res.getBaseCurrencyName().toLowerCase()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDI3NjI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/user/Preferences.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzowMjoxOVrOFqxTMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzowMjoxOVrOFqxTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5MjI0Mw==", "bodyText": "This is the bug I mentioned.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380392243", "createdAt": "2020-02-17T23:02:19Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/user/Preferences.java", "diffHunk": "@@ -736,11 +736,24 @@ public boolean showAgain(String key) {\n     }\n \n     public boolean getUseTorForBitcoinJ() {\n-        // We override the useTorForBitcoinJ and set it to false if we detected a localhost node or if we are not on mainnet,\n+        // We override the useTorForBitcoinJ and set it to false if we found a usable localhost node or if we are not on mainnet,\n         // unless the useTorForBtc parameter is explicitly provided.\n         // On testnet there are very few Bitcoin tor nodes and we don't provide tor nodes.\n+\n+        // TODO bug. Non-critical, apparently.\n+        // Sometimes this method, which queries LocalBitcoinNode for whether or not there's a\n+        // usable local Bitcoin node, is called before LocalBitcoinNode has performed its\n+        // checks. This was noticed when LocalBitcoinNode was refactored to return\n+        // Optional<Boolean> istead of boolean, an empty Optional signifying that the relevant\n+        // check has not yet been performed.\n+        //\n+        // To keep the method's behaviour unchanged, until a fix is implemented, we use\n+        // Optional.orElse(false). Here 'false' normally means that the checks were performed\n+        // and a suitable local Bitcoin node wasn't found.\n+        var usableLocalNodePresent = localBitcoinNode.isUsable().orElse(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjAzMTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoxNDoyN1rOFrB0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoxNTo0MlrOFrB3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Mjk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ;\n          \n          \n            \n                            // No action", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380662961", "createdAt": "2020-02-18T13:14:27Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -229,6 +231,7 @@ public void onSuccess(Peer peer) {\n                 peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n             }\n             public void onFailure(Throwable thr) {\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daa1b0b20b02c13daf58036a41486087b8328e07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2MzYxNw==", "bodyText": "I think a comment might work, codacy is complaining about the lone semicolon, which does look odd.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380663617", "createdAt": "2020-02-18T13:15:42Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -229,6 +231,7 @@ public void onSuccess(Peer peer) {\n                 peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n             }\n             public void onFailure(Throwable thr) {\n+                ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Mjk2MQ=="}, "originalCommit": {"oid": "daa1b0b20b02c13daf58036a41486087b8328e07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAyNDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxOTo1N1rOFrLUZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzowMDo0NVrOFtHE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODUzNQ==", "bodyText": "Since localBitcoinNode.isDetectedButMisconfigured() is an optional it would be prudent to check that it's present here. Although it might be certain for now that it's never null the characteristics of an optional is that it should be able to handle the null state.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380818535", "createdAt": "2020-02-18T17:19:57Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -482,14 +482,31 @@ private void maybeShowTac() {\n         }\n     }\n \n-    private void detectLocalBitcoinNode(Runnable nextStep) {\n+    private void maybeCheckLocalBitcoinNode(Runnable nextStep) {\n         BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n-        if (config.ignoreLocalBtcNode || baseCurrencyNetwork.isDaoRegTest() || baseCurrencyNetwork.isDaoTestNet()) {\n+\n+        var shouldIgnoreLocalNode =\n+            config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+        if (shouldIgnoreLocalNode) {\n             nextStep.run();\n             return;\n         }\n \n-        localBitcoinNode.detectAndRun(nextStep);\n+        // Results of the check don't have to be passed to nextStep,\n+        // because they're cached in LocalBitcoinNode and dependent routines query it themselves.\n+        localBitcoinNode.checkUsable();\n+\n+        // Here we only want to provide the user with a choice (in a popup) in case a local node is\n+        // detected, but badly configured.\n+        var detectedButMisconfigured = localBitcoinNode.isDetectedButMisconfigured().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NjIwNA==", "bodyText": "I took your suggestion about getting rid of most of the Optional.get()s in other places, but in my opinion here a check would be superfluous, because it's easy to see that getting an empty Optional is impossible here with the current implementation of LocalBitcoinNode (.checkUsable() on the previous line guarantees that). That said if it were to change, all the calls would have to be reconsidered anyway, right?", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382846204", "createdAt": "2020-02-21T23:00:45Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -482,14 +482,31 @@ private void maybeShowTac() {\n         }\n     }\n \n-    private void detectLocalBitcoinNode(Runnable nextStep) {\n+    private void maybeCheckLocalBitcoinNode(Runnable nextStep) {\n         BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n-        if (config.ignoreLocalBtcNode || baseCurrencyNetwork.isDaoRegTest() || baseCurrencyNetwork.isDaoTestNet()) {\n+\n+        var shouldIgnoreLocalNode =\n+            config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+        if (shouldIgnoreLocalNode) {\n             nextStep.run();\n             return;\n         }\n \n-        localBitcoinNode.detectAndRun(nextStep);\n+        // Results of the check don't have to be passed to nextStep,\n+        // because they're cached in LocalBitcoinNode and dependent routines query it themselves.\n+        localBitcoinNode.checkUsable();\n+\n+        // Here we only want to provide the user with a choice (in a popup) in case a local node is\n+        // detected, but badly configured.\n+        var detectedButMisconfigured = localBitcoinNode.isDetectedButMisconfigured().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODUzNQ=="}, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA0MjI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyNDo1NVrOFrLfVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyNDo1NVrOFrLfVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMTMzMw==", "bodyText": "Same here with the usage of Optional without checking isPresent().", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380821333", "createdAt": "2020-02-18T17:24:55Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -862,7 +879,7 @@ private void maybeShowSecurityRecommendation() {\n     }\n \n     private void maybeShowLocalhostRunningInfo() {\n-        maybeTriggerDisplayHandler(\"bitcoinLocalhostNode\", displayLocalhostHandler, localBitcoinNode.isDetected());\n+        maybeTriggerDisplayHandler(\"bitcoinLocalhostNode\", displayLocalhostHandler, localBitcoinNode.isUsable().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzExNDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NTozNFrOFrMLfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowNjowMlrOFrpWNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjYzNg==", "bodyText": "So much space in this method...", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380832636", "createdAt": "2020-02-18T17:45:34Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,272 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMDUxNg==", "bodyText": "Yes, please apply same formatting advice here as I mentioned above on lines 65\u201367. And apply it consistently to any other similar changes in this PR as well. The general rule in effect here is to keep things on one line up to the 120-char right margin.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r381310516", "createdAt": "2020-02-19T14:06:02Z", "author": {"login": "cbeams"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,272 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjYzNg=="}, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzI1MTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoyNjo0MVrOFrNfag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoyNjo0MVrOFrNfag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NDEyMg==", "bodyText": "Same with the checks for Optional.isPresent().", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r380854122", "createdAt": "2020-02-18T18:26:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,272 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        var context = new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /**\n+     * Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or not.\n+        // The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /**\n+     * Initiates detection and configuration checks. The results are cached so that the public\n+     * methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895da416fbe4c75acdaebe9f9f22e534edf09d1"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDE0OTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowMzoxNFrOFrpPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowMzoxNFrOFrpPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwODg1Nw==", "bodyText": "To follow convention, formatting here should be:\nprivate static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r381308857", "createdAt": "2020-02-19T14:03:14Z", "author": {"login": "cbeams"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,275 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dea3d3edf28f9dc6e3474b648c0b0f9f74487f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDE2NjE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowNzozOFrOFrpaFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowNzozOFrOFrpaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTUxMA==", "bodyText": "Nit: unnecessary newline here, and this need not be a (/**) Javadoc comment as it's on a private method and will never be published. Wrap comments at 90-char right margin, thanks.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r381311510", "createdAt": "2020-02-19T14:07:38Z", "author": {"login": "cbeams"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,275 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ.\n+        // We don't keep a reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /**\n+     * Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dea3d3edf28f9dc6e3474b648c0b0f9f74487f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDE2OTIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDowODoyNlrOFrpb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNzoxNzoxN1rOFtMCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTk4NQ==", "bodyText": "Local variables should be camelCase.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r381311985", "createdAt": "2020-02-19T14:08:26Z", "author": {"login": "cbeams"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,275 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ.\n+        // We don't keep a reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /**\n+     * Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or not.\n+        // The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dea3d3edf28f9dc6e3474b648c0b0f9f74487f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MTc3MA==", "bodyText": "Do you feel strongly about this? These are constants, in the semantic sense, that I encapsulated in a single method with the code that uses them, and formating them as such helps single them out. I didn't want to separate them out to top-level static variables, because they're part of a small port from upstream BitcoinJ and I wanted to keep it completely separate from the rest of the class.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382851770", "createdAt": "2020-02-21T23:24:41Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,275 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ.\n+        // We don't keep a reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /**\n+     * Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or not.\n+        // The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTk4NQ=="}, "originalCommit": {"oid": "e6dea3d3edf28f9dc6e3474b648c0b0f9f74487f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzM3Mg==", "bodyText": "In my opinion this kind of containment is good. Camel case local variables would not be appropriate, but making them local seems right considering the situation.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382927372", "createdAt": "2020-02-22T17:17:17Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +49,275 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n+     * Creates an NioClient that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+\n+    private static NioClient createClient(\n+            Peer peer, int port, int connectionTimeout\n+    ) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /**\n+     * Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n      */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+\n+    private static Peer createLocalPeer(\n+            int port\n+    ) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ.\n+        // We don't keep a reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /**\n+     * Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or not.\n+        // The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTk4NQ=="}, "originalCommit": {"oid": "e6dea3d3edf28f9dc6e3474b648c0b0f9f74487f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OToyNVrOFtNTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OToyNVrOFtNTKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODEzNw==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948137", "createdAt": "2020-02-22T22:59:25Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo0MVrOFtNTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo0MVrOFtNTMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE0NA==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948144", "createdAt": "2020-02-22T22:59:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo0NlrOFtNTMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo0NlrOFtNTMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE0Ng==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948146", "createdAt": "2020-02-22T22:59:46Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo1MlrOFtNTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMjo1OTo1MlrOFtNTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE1MQ==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948151", "createdAt": "2020-02-22T22:59:52Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDoxMFrOFtNTUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDoxMFrOFtNTUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE3Nw==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948177", "createdAt": "2020-02-22T23:00:10Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDoxOFrOFtNTVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDoxOFrOFtNTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE4Mw==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948183", "createdAt": "2020-02-22T23:00:18Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDozMFrOFtNTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDozMFrOFtNTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE4Nw==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948187", "createdAt": "2020-02-22T23:00:30Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDozOVrOFtNTYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMDozOVrOFtNTYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODE5Mg==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948192", "createdAt": "2020-02-22T23:00:39Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMToyMlrOFtNTjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMToyMlrOFtNTjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODIzOA==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948238", "createdAt": "2020-02-22T23:01:22Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMTo0MVrOFtNTqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMTo0MVrOFtNTqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODI2NA==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948264", "createdAt": "2020-02-22T23:01:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMTo1N1rOFtNTtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMTo1N1rOFtNTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODI3Ng==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948276", "createdAt": "2020-02-22T23:01:57Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjoxNlrOFtNTvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjoxNlrOFtNTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODI4NA==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948284", "createdAt": "2020-02-22T23:02:16Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjozMFrOFtNTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwNzozNDo1MFrOFtOxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODI5NQ==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948295", "createdAt": "2020-02-22T23:02:30Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MjM2NA==", "bodyText": "Here rationale is to separate the creation of the future from the parts that use it. The next three parts of the method operate on this future.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382972364", "createdAt": "2020-02-23T07:34:50Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODI5NQ=="}, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjo0NVrOFtNT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjo0NVrOFtNT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODMwNQ==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948305", "createdAt": "2020-02-22T23:02:45Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);\n+                        }\n+                    }\n+                };\n+\n+        // Cancel peerVersionMessageFuture if connection failed\n+        peer.addDisconnectedEventListener(cancelIfConnectionFails);\n+\n+        return peerVersionMessageFuture;\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns an optional that, in case it is not empty, shows whether or not the\n+     * local node was fit for usage at the time the checks were performed called,\n+     * meaning it's been detected and its configuration satisfied our checks; or, in\n+     * the case that it is empty, it signifies that the checks have not yet completed.\n      */\n-    public boolean isDetected() {\n+    public Optional<Boolean> isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns an Optional<Boolean> that, when not empty, tells you whether the local node\n+     * was detected, but misconfigured.\n+     */\n+    public Optional<Boolean> isDetectedButMisconfigured() {\n+        return isDetected().flatMap(goodDetect ->\n+                isWellConfigured().map(goodConfig ->\n+                        goodDetect && !goodConfig\n+                ));\n+    }\n+\n+    /**\n+     * Returns an optional, which is empty in case detection has not yet completed, or\n+     * which contains a Boolean, in case detection has been performed, which signifies\n+     * whether or not a Bitcoin node was running on localhost at the time the checks were\n+     * performed. No further monitoring is performed, so if the node goes up or down in\n+     * the meantime, this method will continue to return its original value. See\n+     * {@code MainViewModel#setupBtcNumPeersWatcher} to understand how disconnection and\n+     * reconnection of the local Bitcoin node is actually handled.\n+     */\n+    public Optional<Boolean> isDetected() {\n         return detected;\n     }\n+\n+    /**\n+     * Returns an optional whose emptiness signifies whether or not configuration checks\n+     * have been performed, and its Boolean contents whether the local node's\n+     * configuration satisfied our checks at the time they were performed. We check if the\n+     * local node is not pruning and has bloom filters enabled.\n+     */\n+    public Optional<Boolean> isWellConfigured() {\n+        return wellConfigured;\n+    }\n+\n+    /**\n+     * A \"safe\" variant, which, in case LocalBitcoinNode checks were\n+     * not performed, reverts to legacy behaviour and logs an error message. See\n+     * {@code LocalBitcoinNode#handleUnsafeQuery}.\n+     */\n+    public boolean safeIsUsable() {\n+        return handleUnsafeQuery(isUsable());\n+    }\n+\n+    private boolean handleUnsafeQuery(Optional<Boolean> opt) {\n+        return opt.orElseGet(() -> {\n+            /* Returning false when checks haven't been performed yet is what the behaviour\n+             * was before we switched to using Optionals. More specifically, the only query\n+             * method at the time, isDetected(), would return false in such a case. We are\n+             * relatively confident that the previous behaviour doesn't cause fatal bugs,\n+             * so, in case LocalBitcoinNode is queried too early, we revert to it, instead\n+             * of letting Optional.empty().get() throw an exception. The advantage over\n+             * plain booleans then is that we can log the below error message (with\n+             * stacktrace).\n+             */\n+            var whenChecksNotFinished = false;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjo1MVrOFtNT1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMjo1MVrOFtNT1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODMwOQ==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948309", "createdAt": "2020-02-22T23:02:51Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -25,39 +54,321 @@\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n     private final int port;\n-    private boolean detected = false;\n+    private Optional<Boolean> detected = Optional.empty();\n+    private Optional<Boolean> wellConfigured = Optional.empty();\n \n     @Inject\n     public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n         this.port = port;\n     }\n \n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n+     * Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, isWellConfigured don't trigger a recheck.\n+     */\n+    public boolean checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+        // We know that the Optional/s will be populated by the end of the checks.\n+        return isUsable().get();\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = Optional.of(false);\n+            wellConfigured = Optional.of(false);\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = Optional.of(true);\n             log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = Optional.of(true);\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = Optional.of(false);\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n         } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n         }\n-        callback.run();\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);\n+                        }\n+                    }\n+                };\n+\n+        // Cancel peerVersionMessageFuture if connection failed\n+        peer.addDisconnectedEventListener(cancelIfConnectionFails);\n+\n+        return peerVersionMessageFuture;\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns an optional that, in case it is not empty, shows whether or not the\n+     * local node was fit for usage at the time the checks were performed called,\n+     * meaning it's been detected and its configuration satisfied our checks; or, in\n+     * the case that it is empty, it signifies that the checks have not yet completed.\n      */\n-    public boolean isDetected() {\n+    public Optional<Boolean> isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns an Optional<Boolean> that, when not empty, tells you whether the local node\n+     * was detected, but misconfigured.\n+     */\n+    public Optional<Boolean> isDetectedButMisconfigured() {\n+        return isDetected().flatMap(goodDetect ->\n+                isWellConfigured().map(goodConfig ->\n+                        goodDetect && !goodConfig\n+                ));\n+    }\n+\n+    /**\n+     * Returns an optional, which is empty in case detection has not yet completed, or\n+     * which contains a Boolean, in case detection has been performed, which signifies\n+     * whether or not a Bitcoin node was running on localhost at the time the checks were\n+     * performed. No further monitoring is performed, so if the node goes up or down in\n+     * the meantime, this method will continue to return its original value. See\n+     * {@code MainViewModel#setupBtcNumPeersWatcher} to understand how disconnection and\n+     * reconnection of the local Bitcoin node is actually handled.\n+     */\n+    public Optional<Boolean> isDetected() {\n         return detected;\n     }\n+\n+    /**\n+     * Returns an optional whose emptiness signifies whether or not configuration checks\n+     * have been performed, and its Boolean contents whether the local node's\n+     * configuration satisfied our checks at the time they were performed. We check if the\n+     * local node is not pruning and has bloom filters enabled.\n+     */\n+    public Optional<Boolean> isWellConfigured() {\n+        return wellConfigured;\n+    }\n+\n+    /**\n+     * A \"safe\" variant, which, in case LocalBitcoinNode checks were\n+     * not performed, reverts to legacy behaviour and logs an error message. See\n+     * {@code LocalBitcoinNode#handleUnsafeQuery}.\n+     */\n+    public boolean safeIsUsable() {\n+        return handleUnsafeQuery(isUsable());\n+    }\n+\n+    private boolean handleUnsafeQuery(Optional<Boolean> opt) {\n+        return opt.orElseGet(() -> {\n+            /* Returning false when checks haven't been performed yet is what the behaviour\n+             * was before we switched to using Optionals. More specifically, the only query\n+             * method at the time, isDetected(), would return false in such a case. We are\n+             * relatively confident that the previous behaviour doesn't cause fatal bugs,\n+             * so, in case LocalBitcoinNode is queried too early, we revert to it, instead\n+             * of letting Optional.empty().get() throw an exception. The advantage over\n+             * plain booleans then is that we can log the below error message (with\n+             * stacktrace).\n+             */\n+            var whenChecksNotFinished = false;\n+\n+            var throwable = new Throwable(\"LocalBitcoinNode was queried before it was ready\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 382}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk0NTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/user/Preferences.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMzowM1rOFtNT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzowMzowM1rOFtNT3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0ODMxNw==", "bodyText": "Blank line", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r382948317", "createdAt": "2020-02-22T23:03:03Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/user/Preferences.java", "diffHunk": "@@ -736,11 +736,20 @@ public boolean showAgain(String key) {\n     }\n \n     public boolean getUseTorForBitcoinJ() {\n-        // We override the useTorForBitcoinJ and set it to false if we detected a localhost node or if we are not on mainnet,\n+        // We override the useTorForBitcoinJ and set it to false if we found a usable localhost node or if we are not on mainnet,\n         // unless the useTorForBtc parameter is explicitly provided.\n         // On testnet there are very few Bitcoin tor nodes and we don't provide tor nodes.\n+\n+        // TODO bug. Non-critical, apparently.\n+        // Sometimes this method, which queries LocalBitcoinNode for whether or not there's a\n+        // usable local Bitcoin node, is called before LocalBitcoinNode has performed its\n+        // checks. This was noticed when LocalBitcoinNode was refactored to return\n+        // Optional<Boolean> istead of boolean, an empty Optional signifying that the relevant\n+        // check has not yet been performed.\n+        var usableLocalNodePresent = localBitcoinNode.safeIsUsable();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848836adc83ef5393d0af821d81c3fe63ea80f7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDI1NTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToyMjo1OVrOFuj0Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToyMjo1OVrOFuj0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2NTY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        displayLocalNodeMisconfigurationHandler.accept(nextStep);\n          \n          \n            \n                        if (displayLocalNodeMisconfigurationHandler != null) {\n          \n          \n            \n                            displayLocalNodeMisconfigurationHandler.accept(nextStep);\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nAdd a check to prevent possible NullPointerException.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384365655", "createdAt": "2020-02-26T09:22:59Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/app/BisqSetup.java", "diffHunk": "@@ -482,14 +482,21 @@ private void maybeShowTac() {\n         }\n     }\n \n-    private void detectLocalBitcoinNode(Runnable nextStep) {\n-        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n-        if (config.ignoreLocalBtcNode || baseCurrencyNetwork.isDaoRegTest() || baseCurrencyNetwork.isDaoTestNet()) {\n+    private void maybeCheckLocalBitcoinNode(Runnable nextStep) {\n+        if (localBitcoinNode.willIgnore()) {\n             nextStep.run();\n             return;\n         }\n \n-        localBitcoinNode.detectAndRun(nextStep);\n+        // Here we only want to provide the user with a choice (in a popup) in case a\n+        // local node is detected, but badly configured.\n+        var detectedButMisconfigured = localBitcoinNode.isDetectedButMisconfigured();\n+        if (detectedButMisconfigured) {\n+            displayLocalNodeMisconfigurationHandler.accept(nextStep);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQwMDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowMTo0MFrOFulNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowMTo0MFrOFulNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM4ODQ0MA==", "bodyText": "Using it like that the placeholder will never be filled. Maybe something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n          \n          \n            \n                        log.error(\"Local bitcoin node handshake attempt was unexpectedly interrupted\", ex);", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384388440", "createdAt": "2020-02-26T10:01:40Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQwMzc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowMjozNlrOFulPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowMjozNlrOFulPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM4ODkzNg==", "bodyText": "Using it like that the placeholder will never be filled. Maybe something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n          \n          \n            \n                        log.error(\"Local bitcoin node handshake attempt was unexpectedly interrupted\", ex);", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384388936", "createdAt": "2020-02-26T10:02:36Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQwOTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNDowOVrOFulS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNDowOVrOFulS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM4OTg0OA==", "bodyText": "Not sure if that makes it so much more readable than simply:\nreturn new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384389848", "createdAt": "2020-02-26T10:04:09Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQxNTUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNTo0N1rOFulWhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNTo0N1rOFulWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MDc4OA==", "bodyText": "Same here:\nreturn new NioClient(serverAddress, peer, connectionTimeout);", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384390788", "createdAt": "2020-02-26T10:05:47Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQyMzY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNzo1N1rOFulbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowNzo1N1rOFulbig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MjA3NA==", "bodyText": "I know that you do this because you use Vim, but everyone with a more sophisticated editor has this parameter information next to the null value in the constructor instantiation", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384392074", "createdAt": "2020-02-26T10:07:57Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQzMjAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMDoyNVrOFulgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMDoyNVrOFulgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MzQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Level silence(Class klass) {\n          \n          \n            \n                private static Level silence(Class<?> klass) {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384393404", "createdAt": "2020-02-26T10:10:25Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQzMzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMDo0OVrOFulhpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMDo0OVrOFulhpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MzYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n          \n          \n            \n                private static void restoreLoggerLevel(Class<?> klass, Level originalLevel) {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384393638", "createdAt": "2020-02-26T10:10:49Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQzNDcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMTowN1rOFuliVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMTowN1rOFuliVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MzgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n          \n          \n            \n                private static ch.qos.logback.classic.Logger getLogger(Class<?> klass) {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384393813", "createdAt": "2020-02-26T10:11:07Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQzNzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMTo0N1rOFuljzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMTo0N1rOFuljzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NDE5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n          \n          \n            \n                    FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<>() {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384394190", "createdAt": "2020-02-26T10:11:47Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQzOTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMjozMFrOFullXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxMjozMFrOFullXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NDU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        public void onFailure(Throwable thr) {\n          \n          \n            \n                        public void onFailure(@NotNull Throwable thr) {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384394591", "createdAt": "2020-02-26T10:12:30Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ1NDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxNjozOFrOFuluZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxNjozOFrOFuluZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NjkwMw==", "bodyText": "Can be replaced with:\n(disconnectedPeer, peerCount) -> {", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384396903", "createdAt": "2020-02-26T10:16:38Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ1ODc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxNzo1MlrOFulwxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxNzo1MlrOFulwxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NzUxMA==", "bodyText": "That would need also to change this to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    var peerVersionMessage = peer.getPeerVersionMessage();\n          \n          \n            \n                                    var peerVersionMessage = disconnectedPeer.getPeerVersionMessage();\n          \n      \n    \n    \n  \n\nto prevent scope issues with the other peer passed as parameter. This makes it also easier to distinguish that they are different peers.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384397510", "createdAt": "2020-02-26T10:17:52Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 375}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ2NDMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxOToyNlrOFul0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowOTo1OFrOFu4bOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODM1MA==", "bodyText": "Here again: This is something that helps only someone not using code editors like IntelliJ.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384398350", "createdAt": "2020-02-26T10:19:26Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODAxNg==", "bodyText": "Is this a win/lose situation where we have to adopt to the majority? It does help me, as I'm not using IntelliJ. Does it disturb IntelliJ users?", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384478016", "createdAt": "2020-02-26T13:03:56Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODM1MA=="}, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4ODc4OQ==", "bodyText": "I've commited this and other IDE-related changes, since Github back-and-forths can be slow, but I'd like an answer to this.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384488789", "createdAt": "2020-02-26T13:25:11Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODM1MA=="}, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTk2NA==", "bodyText": "I agree with @ripcurlx here. In general I think the code should try to stick to the current style of the project. I did not choose this style but I follow it to make it easier for everyone to read the code. If everyone were to follow their own preferred style it would make the code much less readable.\nThis kind of extra variable comes as a surprise here since it's not following the common style and it makes me wonder why it's done in this particular way, as if it has some significance.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384685964", "createdAt": "2020-02-26T18:38:06Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODM1MA=="}, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMzI5MA==", "bodyText": "@sqrrm the reason why I use these is to not have \"anonymous\" values in calls. Example: buildHouse(false) v. buildHouse(withRoof).", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384703290", "createdAt": "2020-02-26T19:09:58Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",\n+                    port);\n+            client = createClient(peer, port, CONNECTION_TIMEOUT);\n+        } catch (IOException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        ListenableFuture<VersionMessage> peerVersionMessageFuture = getVersionMessage(peer);\n+\n+        Optional<VersionMessage> optionalPeerVersionMessage;\n+\n+        // block for VersionMessage or cancellation (in case of connection failure)\n+        try {\n+            var peerVersionMessage = peerVersionMessageFuture.get();\n+            optionalPeerVersionMessage = Optional.of(peerVersionMessage);\n+        } catch (ExecutionException | InterruptedException | CancellationException ex) {\n+            optionalPeerVersionMessage = Optional.empty();\n+        }\n+\n+        peer.close();\n+        client.closeConnection();\n+\n+        restoreLoggerLevel(NioClient.class, originalNioClientLoggerLevel);\n+        restoreLoggerLevel(NioClientManager.class, originalNioClientManagerLoggerLevel);\n+\n+        return optionalPeerVersionMessage;\n+    }\n+\n+    /* Creates a Peer that is expected to only be used to coerce a VersionMessage out of a\n+     * local Bitcoin node and be closed right after.\n+     */\n+    private static Peer createLocalPeer(int port) throws UnknownHostException {\n+        // TODO: what's the effect of NetworkParameters on handshake?\n+        // i.e. is it fine to just always use MainNetParams?\n+        var networkParameters = new MainNetParams();\n+\n+        // We must construct a BitcoinJ Context before using BitcoinJ. We don't keep a\n+        // reference, because it's automatically kept in a thread local storage.\n+        new Context(networkParameters);\n+\n+        var ourVersionMessage = new VersionMessage(networkParameters, 0);\n+\n+        var localPeerAddress = new PeerAddress(InetAddress.getLocalHost(), port);\n+\n+        AbstractBlockChain blockchain = null;\n+\n+        var peer = new Peer(networkParameters, ourVersionMessage, localPeerAddress, blockchain);\n+        return peer;\n+    }\n+\n+    /* Creates an NioClient that is expected to only be used to coerce a VersionMessage\n+     * out of a local Bitcoin node and be closed right after.\n+     */\n+    private static NioClient createClient(Peer peer, int port, int connectionTimeout) throws IOException {\n+        InetSocketAddress serverAddress =\n+                new InetSocketAddress(InetAddress.getLocalHost(), port);\n+\n+        // This initiates the handshake procedure, which, if successful, will complete\n+        // the peerVersionMessageFuture, or be cancelled, in case of failure.\n+        NioClient client = new NioClient(serverAddress, peer, connectionTimeout);\n+\n+        return client;\n+    }\n+\n+    private static Level silence(Class klass) {\n+        var logger = getLogger(klass);\n+        var originalLevel = logger.getLevel();\n+        logger.setLevel(Level.OFF);\n+        return originalLevel;\n+    }\n+\n+    private static void restoreLoggerLevel(Class klass, Level originalLevel) {\n+        getLogger(klass).setLevel(originalLevel);\n+    }\n+\n+    private static ch.qos.logback.classic.Logger getLogger(Class klass) {\n+        return (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(klass);\n+    }\n+\n+    private ListenableFuture<VersionMessage> getVersionMessage(Peer peer) {\n+        SettableFuture<VersionMessage> peerVersionMessageFuture = SettableFuture.create();\n+\n+        var versionHandshakeDone = peer.getVersionHandshakeFuture();\n+        FutureCallback<Peer> fetchPeerVersionMessage = new FutureCallback<Peer>() {\n+            public void onSuccess(Peer peer) {\n+                peerVersionMessageFuture.set(peer.getPeerVersionMessage());\n+            }\n+            public void onFailure(Throwable thr) {\n+                // No action\n+            }\n+        };\n+        Futures.addCallback(\n+                versionHandshakeDone,\n+                fetchPeerVersionMessage\n+        );\n+\n+        PeerDisconnectedEventListener cancelIfConnectionFails =\n+                new PeerDisconnectedEventListener() {\n+                    public void onPeerDisconnected(Peer peer, int peerCount) {\n+                        var peerVersionMessageAlreadyReceived =\n+                                peerVersionMessageFuture.isDone();\n+                        if (peerVersionMessageAlreadyReceived) {\n+                            // This method is called whether or not the handshake was\n+                            // successful. In case it was successful, we don't want to do\n+                            // anything here.\n+                            return;\n+                        }\n+                        // In some cases Peer will self-disconnect after receiving\n+                        // node's VersionMessage, but before completing the handshake.\n+                        // In such a case, we want to retrieve the VersionMessage.\n+                        var peerVersionMessage = peer.getPeerVersionMessage();\n+                        if (peerVersionMessage != null) {\n+                            log.info(\"Handshake attempt was interrupted;\"\n+                                    + \" however, the local node's version message was coerced.\");\n+                            peerVersionMessageFuture.set(peerVersionMessage);\n+                        } else {\n+                            log.info(\"Handshake attempt did not result in a version message exchange.\");\n+                            var mayInterruptWhileRunning = true;\n+                            peerVersionMessageFuture.cancel(mayInterruptWhileRunning);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODM1MA=="}, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 383}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ2ODMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMDo0MVrOFul2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMDo0MVrOFul2ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        || baseCurrencyNetwork.isDaoRegTest()\n          \n          \n            \n                            || baseCurrencyNetwork.isDaoRegTest()", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384399011", "createdAt": "2020-02-26T10:20:41Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ2ODc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMDo0OVrOFul27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMDo0OVrOFul27Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        || baseCurrencyNetwork.isDaoTestNet();\n          \n          \n            \n                            || baseCurrencyNetwork.isDaoTestNet();", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384399085", "createdAt": "2020-02-26T10:20:49Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ3MTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMToyNVrOFul4Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMToyNVrOFul4Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \" or the connection was prematurely closed\"\n          \n          \n            \n                                        + \" or the connection was prematurely closed\"", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384399430", "createdAt": "2020-02-26T10:21:25Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ3MTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMTozN1rOFul4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMTozN1rOFul4tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \" (before a version messages could be coerced)\",\n          \n          \n            \n                                        + \" (before a version messages could be coerced)\",", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384399543", "createdAt": "2020-02-26T10:21:37Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ3MzIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMjowM1rOFul5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMjowM1rOFul5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"Bitcoin node (which may or may not be running) on port {}.\",\n          \n          \n            \n                                        + \"Bitcoin node (which may or may not be running) on port {}.\",", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r384399768", "createdAt": "2020-02-26T10:22:03Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/btc/nodes/LocalBitcoinNode.java", "diffHunk": "@@ -24,40 +53,321 @@\n     private static final Logger log = LoggerFactory.getLogger(LocalBitcoinNode.class);\n     private static final int CONNECTION_TIMEOUT = 5000;\n \n+    private final Config config;\n+\n     private final int port;\n-    private boolean detected = false;\n+\n+    private Boolean detected;\n+    private Boolean wellConfigured;\n \n     @Inject\n-    public LocalBitcoinNode(@Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+    public LocalBitcoinNode(Config config, @Named(LOCAL_BITCOIN_NODE_PORT) int port) {\n+        this.config = config;\n         this.port = port;\n     }\n \n     /**\n-     * Detect whether a Bitcoin node is running on localhost by attempting to connect\n-     * to the node's port and run the given callback regardless of whether the connection\n-     * was successful. If the connection is successful, subsequent calls to\n-     * {@link #isDetected()} will return {@code true}.\n-     * @param callback code to run after detecting whether the node is running\n-     */\n-    public void detectAndRun(Runnable callback) {\n-        try (Socket socket = new Socket()) {\n-            socket.connect(new InetSocketAddress(\"127.0.0.1\", port), CONNECTION_TIMEOUT);\n-            log.info(\"Local Bitcoin node detected on port {}\", port);\n-            detected = true;\n-        } catch (IOException ex) {\n-            log.info(\"No local Bitcoin node detected on port {}.\", port);\n-        }\n-        callback.run();\n+     * Returns whether Bisq will use a local Bitcoin node. Meaning a usable node was found\n+     * and conditions under which we would ignore it are not met. If we're ignoring the\n+     * local node, a call to this method will not trigger an unnecessary detection\n+     * attempt.\n+     */\n+    public boolean willUse() {\n+        return !willIgnore() && isUsable();\n+    }\n+\n+    /**\n+     * Returns whether Bisq will ignore a local Bitcoin node even if it is usable.\n+     */\n+    public boolean willIgnore() {\n+        BaseCurrencyNetwork baseCurrencyNetwork = config.baseCurrencyNetwork;\n+\n+        // For dao testnet (server side regtest) we disable the use of local bitcoin node to\n+        // avoid confusion if local btc node is not synced with our dao testnet master node.\n+        // Note: above comment was previously in WalletConfig::createPeerGroup.\n+\n+        return config.ignoreLocalBtcNode\n+            || baseCurrencyNetwork.isDaoRegTest()\n+            || baseCurrencyNetwork.isDaoTestNet();\n+    }\n+\n+    /**\n+     * Returns whether or not a local Bitcion node was detected and was well configured\n+     * at the time the checks were performed. All checks are triggered in case they have\n+     * not been performed.\n+     */\n+    public boolean isUsable() {\n+        // If a node is found to be well configured, it implies that it was also detected,\n+        // so this is query is enough to show if the relevant checks were performed and if\n+        // their results are positive.\n+        return isWellConfigured();\n+    }\n+\n+    /**\n+     * Returns whether the local node was detected, but misconfigured. Combination of\n+     * methods isDetected and isWellConfigured.\n+     */\n+    public boolean isDetectedButMisconfigured() {\n+        return isDetected() && !isWellConfigured();\n     }\n \n     /**\n-     * Returns whether or not a Bitcoin node was running on localhost at the time\n-     * {@link #detectAndRun(Runnable)} was called. No further monitoring is performed, so\n-     * if the node goes up or down in the meantime, this method will continue to return\n-     * its original value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand\n-     * how disconnection and reconnection of the local Bitcoin node is actually handled.\n+     * Returns whether a local Bitcoin node was detected. All checks are triggered in case\n+     * they have not been performed. No further monitoring is performed, so if the node\n+     * goes up or down in the meantime, this method will continue to return its original\n+     * value. See {@code MainViewModel#setupBtcNumPeersWatcher} to understand how\n+     * disconnection and reconnection of the local Bitcoin node is actually handled.\n      */\n     public boolean isDetected() {\n+        if (detected == null) {\n+            performChecks();\n+        }\n         return detected;\n     }\n+\n+    /**\n+     * Returns whether the local node's configuration satisfied our checks at the time\n+     * they were performed. All checks are triggered in case they have not been performed.\n+     * We check if the local node is not pruning and has bloom filters enabled.\n+     */\n+    public boolean isWellConfigured() {\n+        if (wellConfigured == null) {\n+            performChecks();\n+        }\n+        return wellConfigured;\n+    }\n+\n+    /* Performs checks that the query methods might be interested in.\n+     */\n+    private void performChecks() {\n+        checkUsable();\n+    }\n+\n+    /* Initiates detection and configuration checks. The results are cached so that the\n+     * public methods isUsable, isDetected, etc. don't trigger a recheck.\n+     */\n+    private void checkUsable() {\n+        var optionalVersionMessage = attemptHandshakeForVersionMessage();\n+        handleHandshakeAttempt(optionalVersionMessage);\n+    }\n+\n+    private void handleHandshakeAttempt(Optional<VersionMessage> optionalVersionMessage) {\n+        if (!optionalVersionMessage.isPresent()) {\n+            detected = false;\n+            wellConfigured = false;\n+            log.info(\"No local Bitcoin node detected on port {},\"\n+                    + \" or the connection was prematurely closed\"\n+                    + \" (before a version messages could be coerced)\",\n+                    port);\n+        } else {\n+            detected = true;\n+            log.info(\"Local Bitcoin node detected on port {}\", port);\n+\n+            var versionMessage = optionalVersionMessage.get();\n+            var configurationCheckResult = checkWellConfigured(versionMessage);\n+\n+            if (configurationCheckResult) {\n+                wellConfigured = true;\n+                log.info(\"Local Bitcoin node found to be well configured\"\n+                        + \" (not pruning and allows bloom filters)\");\n+            } else {\n+                wellConfigured = false;\n+                log.info(\"Local Bitcoin node badly configured\"\n+                        + \" (it is pruning and/or bloom filters are disabled)\");\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWellConfigured(VersionMessage versionMessage) {\n+        var notPruning = versionMessage.hasBlockChain();\n+        var supportsAndAllowsBloomFilters =\n+                isBloomFilteringSupportedAndEnabled(versionMessage);\n+        return notPruning && supportsAndAllowsBloomFilters;\n+    }\n+\n+    /* Method backported from upstream bitcoinj: at the time of writing, our version is\n+     * not BIP111-aware.\n+     * Source routines and data can be found in Bitcoinj under:\n+     * core/src/main/java/org/bitcoinj/core/VersionMessage.java\n+     * and\n+     * core/src/main/java/org/bitcoinj/core/NetworkParameters.java\n+     */\n+    private static boolean isBloomFilteringSupportedAndEnabled(VersionMessage versionMessage) {\n+        // A service bit that denotes whether the peer supports BIP37 bloom filters or\n+        // not. The service bit is defined in BIP111.\n+        int NODE_BLOOM = 1 << 2;\n+\n+        int BLOOM_FILTERS_BIP37_PROTOCOL_VERSION = 70000;\n+        var whenBloomFiltersWereIntroduced = BLOOM_FILTERS_BIP37_PROTOCOL_VERSION;\n+\n+        int BLOOM_FILTERS_BIP111_PROTOCOL_VERSION = 70011;\n+        var whenBloomFiltersWereDisabledByDefault = BLOOM_FILTERS_BIP111_PROTOCOL_VERSION;\n+\n+        int clientVersion = versionMessage.clientVersion;\n+        long localServices = versionMessage.localServices;\n+\n+        if (clientVersion >= whenBloomFiltersWereIntroduced\n+                && clientVersion < whenBloomFiltersWereDisabledByDefault)\n+            return true;\n+        return (localServices & NODE_BLOOM) == NODE_BLOOM;\n+    }\n+\n+    /* Performs a blocking Bitcoin protocol handshake, which includes exchanging version\n+     * messages and acks. Its purpose is to check if a local Bitcoin node is running,\n+     * and, if it is, check its advertised configuration. The returned Optional is empty,\n+     * if a local peer wasn't found, or if handshake failed for some reason. This method\n+     * could be noticably simplified, by turning connection failure callback into a\n+     * future and using a first-future-to-complete type of construct, but I couldn't find\n+     * a ready-made implementation.\n+     */\n+    private Optional<VersionMessage> attemptHandshakeForVersionMessage() {\n+        Peer peer;\n+        try {\n+            peer = createLocalPeer(port);\n+        } catch (UnknownHostException ex) {\n+            log.error(\"Local bitcoin node handshake attempt unexpectedly threw: {}\", ex);\n+            return Optional.empty();\n+        }\n+\n+        /* We temporarily silence BitcoinJ NioClient's and NioClientManager's loggers,\n+         * because when a local Bitcoin node is not found they pollute console output\n+         * with \"connection refused\" error messages.\n+         */\n+        var originalNioClientLoggerLevel = silence(NioClient.class);\n+        var originalNioClientManagerLoggerLevel = silence(NioClientManager.class);\n+\n+        NioClient client;\n+\n+        try {\n+            log.info(\"Initiating attempt to connect to and handshake with a local \"\n+                    + \"Bitcoin node (which may or may not be running) on port {}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a57ecddfc41b1d0219155df9fac2e9fa6780181"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcyNDQzOnYy", "diffSide": "LEFT", "path": "core/src/main/java/bisq/core/app/misc/ModuleForAppWithP2p.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxNjo1NFrOFvObEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxNjo1NFrOFvObEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzY5OA==", "bodyText": "Good catch, thanks @dmos62.", "url": "https://github.com/bisq-network/bisq/pull/3982#discussion_r385063698", "createdAt": "2020-02-27T11:16:54Z", "author": {"login": "cbeams"}, "path": "core/src/main/java/bisq/core/app/misc/ModuleForAppWithP2p.java", "diffHunk": "@@ -50,7 +50,6 @@\n import java.io.File;\n \n import static bisq.common.config.Config.*;\n-import static bisq.core.btc.nodes.LocalBitcoinNode.LOCAL_BITCOIN_NODE_PORT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e4515f53116c0fbec27e4ecee0eaaf9313ef4c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2530, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}