{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Nzc3MTI4", "number": 4680, "title": "Add inventory monitor module", "bodyText": "This adds a new module containing the new inventory monitor project.\nIt is running since a few weeks under http://46.101.179.224/ and some of the seeds have updated to that branch already.\nIt is the implementation of bisq-network/projects#45\n@jmacxx is working on a webapp which should finally replace the simple http server used atm.\nIt will still need fine tuning of the deviation alert/warning thresholds but it is already pretty useful and helps to detect seed node issues.\nMost of the code is only relevant to the monitor project and seed nodes, so it carries very low risk for normal users.", "createdAt": "2020-10-21T18:28:14Z", "url": "https://github.com/bisq-network/bisq/pull/4680", "merged": true, "mergeCommit": {"oid": "93a3188659ac7726a99c877c02d3d50c446faa18"}, "closed": true, "closedAt": "2020-10-23T17:26:54Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUy_2fgBqjM5MDU3MjY3MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVZ_iIAFqTUxNTg2NjU2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6973a1f0a93c1f9ca9c881122da446a7ad564c82", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6973a1f0a93c1f9ca9c881122da446a7ad564c82", "committedDate": "2020-10-21T18:14:12Z", "message": "Add numAllConnectionsLostEvents"}, "afterCommit": {"oid": "5fcab37f58580363659fcab395c544ab62ba15c7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5fcab37f58580363659fcab395c544ab62ba15c7", "committedDate": "2020-10-21T20:00:28Z", "message": "Add numAllConnectionsLostEvents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5943845891e8e82f6215248c791dc328c247782e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5943845891e8e82f6215248c791dc328c247782e", "committedDate": "2020-10-23T05:13:52Z", "message": "Map shutdown call from sig int handler to userThread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0f981ad1d5828304b7a22372095baff22a4e808", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c0f981ad1d5828304b7a22372095baff22a4e808", "committedDate": "2020-10-23T05:30:29Z", "message": "Fix incorrect shutdown behaviour\n\nDelay the boolean property setter as otherwise our listener might never\nget triggered if property is set synchronously before listener registration.\nRemove shutdown thread.\nCancel future in case tor is not created yet."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bf30b98c6a0db31b8d1f8991f79fce82b114af", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/87bf30b98c6a0db31b8d1f8991f79fce82b114af", "committedDate": "2020-10-23T06:14:29Z", "message": "Remove torSetup.cleanupTorFiles() call.\n\nThis has caused the slow tor startup of about 20-30 sec. Without that it is about 5 sec."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329249845f59cc1d4595300eb6dc8839c8011b8e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/329249845f59cc1d4595300eb6dc8839c8011b8e", "committedDate": "2020-10-23T06:17:32Z", "message": "Extract method for filling seed nodes from property file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b693e295d9e7cb778ceda283dd215e6d0f2a9d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/55b693e295d9e7cb778ceda283dd215e6d0f2a9d", "committedDate": "2020-10-23T06:17:32Z", "message": "Make config nullable and extract methods where config is used and apply default value in case config is not set."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3521619e0362da330d52335bdc126e9295870241", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3521619e0362da330d52335bdc126e9295870241", "committedDate": "2020-10-23T06:17:32Z", "message": "Add inventory module\n\nSimple monitor dumping json files with data result and request/response time to disk. Can be used by a simple web server to show state of seed nodes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dab1860861b8f9388a1e3c433d779a29a6e5e31", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9dab1860861b8f9388a1e3c433d779a29a6e5e31", "committedDate": "2020-10-23T06:17:32Z", "message": "Move inventory package to core as we want to include other domain data as well like DAO state\n\nAdd more data to inventory map and change type of value to String."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca7fe94c06189608ba23ad943b1740807232aedc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ca7fe94c06189608ba23ad943b1740807232aedc", "committedDate": "2020-10-23T06:17:32Z", "message": "Add signature to request to limit the feature to requests from trusted nodes (monitor)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088f539fec4a54193bcb6744d5016a7247ebb24e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/088f539fec4a54193bcb6744d5016a7247ebb24e", "committedDate": "2020-10-23T06:17:32Z", "message": "Add readableFileSize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ce8ce37a19d74aea8597dfa55e59cd96720534", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d9ce8ce37a19d74aea8597dfa55e59cd96720534", "committedDate": "2020-10-23T06:17:33Z", "message": "Add readSeedNodePropertyFile method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821fa39a7e13cc9f0bf1c065c6428d00c9c7e248", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/821fa39a7e13cc9f0bf1c065c6428d00c9c7e248", "committedDate": "2020-10-23T06:17:33Z", "message": "Add sparkjava dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21bd85c48821d3152670bf670768973718e4ae2d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/21bd85c48821d3152670bf670768973718e4ae2d", "committedDate": "2020-10-23T06:17:33Z", "message": "Remove signature from GetInventoryRequest (as monitor is public it does not make sense to limit requests).\nAdd html output and webserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa812ba7f16aff621985c33c67a0c2d75fb3093d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/aa812ba7f16aff621985c33c67a0c2d75fb3093d", "committedDate": "2020-10-23T06:17:33Z", "message": "Add shadow plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b846979ecddab7e4d7754c87dbec357ed57cb122", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b846979ecddab7e4d7754c87dbec357ed57cb122", "committedDate": "2020-10-23T06:17:33Z", "message": "Make RequestInfo public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752208b3ca673737df717d01920d9bdabe7a2287", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/752208b3ca673737df717d01920d9bdabe7a2287", "committedDate": "2020-10-23T06:17:33Z", "message": "Add InventoryItem enum\nAdd average and color codes to html\nAdd maxConnections\nAdd DeviationSeverity enum\nAdd custom seed node file\nUse InventoryItem as key in inventory map instead of string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b83083aded4ff457ccdf3220a88e22ac870e3df", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1b83083aded4ff457ccdf3220a88e22ac870e3df", "committedDate": "2020-10-23T06:17:33Z", "message": "Add nodes from mike\nVarious improvements..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7768e58b980775dd28532648c83335a194cfb17c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7768e58b980775dd28532648c83335a194cfb17c", "committedDate": "2020-10-23T06:17:33Z", "message": "Shut down connection after response received\n\nVarious improvements..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4e85d7caa0114b03239dc0f8ab2c44e47f0b8f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ec4e85d7caa0114b03239dc0f8ab2c44e47f0b8f", "committedDate": "2020-10-23T06:17:33Z", "message": "Add network node shutdown\nRearrange request info fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c779306ff1058d9dfb1b55ebe58cd2df92a8066", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1c779306ff1058d9dfb1b55ebe58cd2df92a8066", "committedDate": "2020-10-23T06:17:34Z", "message": "Add more warn/alert checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08b24ece017dc3714d7506589b8b78327ed9cd5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d08b24ece017dc3714d7506589b8b78327ed9cd5", "committedDate": "2020-10-23T06:17:34Z", "message": "Add triggers for maxConnections and numConnections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb48fe72f226ea35b849df8330cdb786697228a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5fb48fe72f226ea35b849df8330cdb786697228a", "committedDate": "2020-10-23T06:17:34Z", "message": "Fix error handling\nAdd all seeds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c156eb5bf573058e57cd333eca56d27cb7ea80f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8c156eb5bf573058e57cd333eca56d27cb7ea80f", "committedDate": "2020-10-23T06:17:34Z", "message": "Add peakNumConnections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bdc5abe34a75ae9d037c84b462cbfb09307c08e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5bdc5abe34a75ae9d037c84b462cbfb09307c08e", "committedDate": "2020-10-23T06:17:34Z", "message": "Add numAllConnectionsLostEvents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4eb1407741af52f2b502e11c228991b1e32088", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0c4eb1407741af52f2b502e11c228991b1e32088", "committedDate": "2020-10-23T06:17:34Z", "message": "Only log and increase numAllConnectionsLostEvents if we have not called shutDown\nWe also do not call listeners in that case as some listeners have some restart routines\non that event which is not what we want at shut down"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f1fdf3c0a54cc5251268c9d300aadae46da65d29", "committedDate": "2020-10-23T06:17:34Z", "message": "Improve deviation model"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4031b201d8fce5b034742178412c9a76d3e4f2c0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4031b201d8fce5b034742178412c9a76d3e4f2c0", "committedDate": "2020-10-23T04:46:13Z", "message": "Improve deviation model"}, "afterCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f1fdf3c0a54cc5251268c9d300aadae46da65d29", "committedDate": "2020-10-23T06:17:34Z", "message": "Improve deviation model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b44f1646d50973af82b8027d498df3ec45a3dc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f7b44f1646d50973af82b8027d498df3ec45a3dc", "committedDate": "2020-10-23T16:02:47Z", "message": "Improve logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1Njc0NDgx", "url": "https://github.com/bisq-network/bisq/pull/4680#pullrequestreview-515674481", "createdAt": "2020-10-23T13:38:10Z", "commit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozODoxMFrOHnOO2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMjoxNlrOHnWdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4OTY5MQ==", "bodyText": "Not our usual style, but I quite like this way.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510889691", "createdAt": "2020-10-23T13:38:10Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/util/Utilities.java", "diffHunk": "@@ -523,4 +525,11 @@ public static int byteArrayToInteger(byte[] bytes) {\n         return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n     }\n \n+    public static String readableFileSize(long size) {\n+        if (size <= 0) return \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5NTg0Ng==", "bodyText": "As always, prefer to return early instead of huge blocks.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510895846", "createdAt": "2020-10-23T13:47:44Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.network.p2p.inventory;\n+\n+import bisq.core.dao.monitoring.BlindVoteStateMonitoringService;\n+import bisq.core.dao.monitoring.DaoStateMonitoringService;\n+import bisq.core.dao.monitoring.ProposalStateMonitoringService;\n+import bisq.core.dao.monitoring.model.BlindVoteStateBlock;\n+import bisq.core.dao.monitoring.model.DaoStateBlock;\n+import bisq.core.dao.monitoring.model.ProposalStateBlock;\n+import bisq.core.dao.state.DaoStateService;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryRequest;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryResponse;\n+import bisq.core.network.p2p.inventory.model.InventoryItem;\n+\n+import bisq.network.p2p.network.Connection;\n+import bisq.network.p2p.network.MessageListener;\n+import bisq.network.p2p.network.NetworkNode;\n+import bisq.network.p2p.network.Statistic;\n+import bisq.network.p2p.peers.PeerManager;\n+import bisq.network.p2p.storage.P2PDataStorage;\n+import bisq.network.p2p.storage.payload.ProtectedStorageEntry;\n+\n+import bisq.common.app.Version;\n+import bisq.common.config.Config;\n+import bisq.common.proto.network.NetworkEnvelope;\n+import bisq.common.util.Profiler;\n+import bisq.common.util.Utilities;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.common.base.Enums;\n+import com.google.common.base.Optional;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class GetInventoryRequestHandler implements MessageListener {\n+    private final NetworkNode networkNode;\n+    private final PeerManager peerManager;\n+    private final P2PDataStorage p2PDataStorage;\n+    private final DaoStateService daoStateService;\n+    private final DaoStateMonitoringService daoStateMonitoringService;\n+    private final ProposalStateMonitoringService proposalStateMonitoringService;\n+    private final BlindVoteStateMonitoringService blindVoteStateMonitoringService;\n+    private final int maxConnections;\n+\n+    @Inject\n+    public GetInventoryRequestHandler(NetworkNode networkNode,\n+                                      PeerManager peerManager,\n+                                      P2PDataStorage p2PDataStorage,\n+                                      DaoStateService daoStateService,\n+                                      DaoStateMonitoringService daoStateMonitoringService,\n+                                      ProposalStateMonitoringService proposalStateMonitoringService,\n+                                      BlindVoteStateMonitoringService blindVoteStateMonitoringService,\n+                                      @Named(Config.MAX_CONNECTIONS) int maxConnections) {\n+        this.networkNode = networkNode;\n+        this.peerManager = peerManager;\n+        this.p2PDataStorage = p2PDataStorage;\n+        this.daoStateService = daoStateService;\n+        this.daoStateMonitoringService = daoStateMonitoringService;\n+        this.proposalStateMonitoringService = proposalStateMonitoringService;\n+        this.blindVoteStateMonitoringService = blindVoteStateMonitoringService;\n+        this.maxConnections = maxConnections;\n+\n+        this.networkNode.addMessageListener(this);\n+    }\n+\n+    @Override\n+    public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n+        if (networkEnvelope instanceof GetInventoryRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwNDgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> {\n          \n          \n            \n                                    Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n          \n          \n            \n                                    if (optionalEnum.isPresent()) {\n          \n          \n            \n                                        InventoryItem key = optionalEnum.get();\n          \n          \n            \n                                        dataObjects.putIfAbsent(key, 0);\n          \n          \n            \n                                        int prev = dataObjects.get(key);\n          \n          \n            \n                                        dataObjects.put(key, prev + 1);\n          \n          \n            \n                                    }\n          \n          \n            \n                                });\n          \n          \n            \n                        p2PDataStorage.getMap().values().stream()\n          \n          \n            \n                                .map(ProtectedStorageEntry::getProtectedStoragePayload)\n          \n          \n            \n                                .filter(Objects::nonNull)\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> {\n          \n          \n            \n                                    Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n          \n          \n            \n                                    if (optionalEnum.isPresent()) {\n          \n          \n            \n                                        InventoryItem key = optionalEnum.get();\n          \n          \n            \n                                        dataObjects.putIfAbsent(key, 0);\n          \n          \n            \n                                        int prev = dataObjects.get(key);\n          \n          \n            \n                                        dataObjects.put(key, prev + 1);\n          \n          \n            \n                                    }\n          \n          \n            \n                                });\n          \n          \n            \n                        p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> addItem(dataObjects, className));\n          \n          \n            \n                        p2PDataStorage.getMap().values().stream()\n          \n          \n            \n                                .map(ProtectedStorageEntry::getProtectedStoragePayload)\n          \n          \n            \n                                .filter(Objects::nonNull)\n          \n          \n            \n                                .map(e -> e.getClass().getSimpleName())\n          \n          \n            \n                                .forEach(className -> addItem(dataObjects, className));\n          \n      \n    \n    \n  \n\nWith addItem()\n    private void addItem(Map<InventoryItem, Integer> dataObjects, String className) {\n        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n        if (optionalEnum.isPresent()) {\n            InventoryItem key = optionalEnum.get();\n            dataObjects.putIfAbsent(key, 0);\n            int prev = dataObjects.get(key);\n            dataObjects.put(key, prev + 1);\n        }\n    }", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r510904836", "createdAt": "2020-10-23T14:00:41Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/network/p2p/inventory/GetInventoryRequestHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.network.p2p.inventory;\n+\n+import bisq.core.dao.monitoring.BlindVoteStateMonitoringService;\n+import bisq.core.dao.monitoring.DaoStateMonitoringService;\n+import bisq.core.dao.monitoring.ProposalStateMonitoringService;\n+import bisq.core.dao.monitoring.model.BlindVoteStateBlock;\n+import bisq.core.dao.monitoring.model.DaoStateBlock;\n+import bisq.core.dao.monitoring.model.ProposalStateBlock;\n+import bisq.core.dao.state.DaoStateService;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryRequest;\n+import bisq.core.network.p2p.inventory.messages.GetInventoryResponse;\n+import bisq.core.network.p2p.inventory.model.InventoryItem;\n+\n+import bisq.network.p2p.network.Connection;\n+import bisq.network.p2p.network.MessageListener;\n+import bisq.network.p2p.network.NetworkNode;\n+import bisq.network.p2p.network.Statistic;\n+import bisq.network.p2p.peers.PeerManager;\n+import bisq.network.p2p.storage.P2PDataStorage;\n+import bisq.network.p2p.storage.payload.ProtectedStorageEntry;\n+\n+import bisq.common.app.Version;\n+import bisq.common.config.Config;\n+import bisq.common.proto.network.NetworkEnvelope;\n+import bisq.common.util.Profiler;\n+import bisq.common.util.Utilities;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.common.base.Enums;\n+import com.google.common.base.Optional;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class GetInventoryRequestHandler implements MessageListener {\n+    private final NetworkNode networkNode;\n+    private final PeerManager peerManager;\n+    private final P2PDataStorage p2PDataStorage;\n+    private final DaoStateService daoStateService;\n+    private final DaoStateMonitoringService daoStateMonitoringService;\n+    private final ProposalStateMonitoringService proposalStateMonitoringService;\n+    private final BlindVoteStateMonitoringService blindVoteStateMonitoringService;\n+    private final int maxConnections;\n+\n+    @Inject\n+    public GetInventoryRequestHandler(NetworkNode networkNode,\n+                                      PeerManager peerManager,\n+                                      P2PDataStorage p2PDataStorage,\n+                                      DaoStateService daoStateService,\n+                                      DaoStateMonitoringService daoStateMonitoringService,\n+                                      ProposalStateMonitoringService proposalStateMonitoringService,\n+                                      BlindVoteStateMonitoringService blindVoteStateMonitoringService,\n+                                      @Named(Config.MAX_CONNECTIONS) int maxConnections) {\n+        this.networkNode = networkNode;\n+        this.peerManager = peerManager;\n+        this.p2PDataStorage = p2PDataStorage;\n+        this.daoStateService = daoStateService;\n+        this.daoStateMonitoringService = daoStateMonitoringService;\n+        this.proposalStateMonitoringService = proposalStateMonitoringService;\n+        this.blindVoteStateMonitoringService = blindVoteStateMonitoringService;\n+        this.maxConnections = maxConnections;\n+\n+        this.networkNode.addMessageListener(this);\n+    }\n+\n+    @Override\n+    public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n+        if (networkEnvelope instanceof GetInventoryRequest) {\n+            // Data\n+            GetInventoryRequest getInventoryRequest = (GetInventoryRequest) networkEnvelope;\n+            Map<InventoryItem, Integer> dataObjects = new HashMap<>();\n+            p2PDataStorage.getMapForDataResponse(getInventoryRequest.getVersion()).values().stream()\n+                    .map(e -> e.getClass().getSimpleName())\n+                    .forEach(className -> {\n+                        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n+                        if (optionalEnum.isPresent()) {\n+                            InventoryItem key = optionalEnum.get();\n+                            dataObjects.putIfAbsent(key, 0);\n+                            int prev = dataObjects.get(key);\n+                            dataObjects.put(key, prev + 1);\n+                        }\n+                    });\n+            p2PDataStorage.getMap().values().stream()\n+                    .map(ProtectedStorageEntry::getProtectedStoragePayload)\n+                    .filter(Objects::nonNull)\n+                    .map(e -> e.getClass().getSimpleName())\n+                    .forEach(className -> {\n+                        Optional<InventoryItem> optionalEnum = Enums.getIfPresent(InventoryItem.class, className);\n+                        if (optionalEnum.isPresent()) {\n+                            InventoryItem key = optionalEnum.get();\n+                            dataObjects.putIfAbsent(key, 0);\n+                            int prev = dataObjects.get(key);\n+                            dataObjects.put(key, prev + 1);\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNDUxMA==", "bodyText": "This comment is lacking a bit when it comes to the punch line.", "url": "https://github.com/bisq-network/bisq/pull/4680#discussion_r511024510", "createdAt": "2020-10-23T17:12:16Z", "author": {"login": "sqrrm"}, "path": "inventory/src/main/java/bisq/inventory/InventoryMonitorMain.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.inventory;\n+\n+\n+import bisq.core.locale.Res;\n+\n+import bisq.common.UserThread;\n+import bisq.common.app.AsciiLogo;\n+import bisq.common.app.Log;\n+import bisq.common.app.Version;\n+import bisq.common.config.BaseCurrencyNetwork;\n+import bisq.common.util.Utilities;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+\n+\n+import sun.misc.Signal;\n+\n+@Slf4j\n+public class InventoryMonitorMain {\n+\n+    private static InventoryMonitor inventoryMonitor;\n+    private static boolean stopped;\n+\n+    // prog args for regtest: 10 1 BTC_REGTEST\n+    public static void main(String[] args) {\n+        // Default values\n+        int intervalSec = 300;\n+        boolean useLocalhostForP2P = false;\n+        BaseCurrencyNetwork network = BaseCurrencyNetwork.BTC_MAINNET;\n+        int port = 80;\n+\n+        if (args.length > 0) {\n+            intervalSec = Integer.parseInt(args[0]);\n+        }\n+        if (args.length > 1) {\n+            useLocalhostForP2P = args[1].equals(\"1\");\n+        }\n+        if (args.length > 2) {\n+            network = BaseCurrencyNetwork.valueOf(args[2]);\n+        }\n+        if (args.length > 3) {\n+            port = Integer.parseInt(args[3]);\n+        }\n+\n+        String appName = \"bisq-InventoryMonitor-\" + network + \"-\" + intervalSec;\n+        File appDir = new File(Utilities.getUserDataDir(), appName);\n+        if (!appDir.exists() && !appDir.mkdir()) {\n+            log.warn(\"make appDir failed\");\n+        }\n+        inventoryMonitor = new InventoryMonitor(appDir, useLocalhostForP2P, network, intervalSec, port);\n+\n+        setup(network, appDir);\n+    }\n+\n+    private static void setup(BaseCurrencyNetwork network, File appDir) {\n+        AsciiLogo.showAsciiLogo();\n+        String logPath = Paths.get(appDir.getPath(), \"bisq\").toString();\n+        Log.setup(logPath);\n+        Log.setLevel(Level.INFO);\n+        Version.setBaseCryptoNetworkId(network.ordinal());\n+\n+        Res.setup(); // Used for some formatting in the webserver\n+\n+        // We do not set any capabilities as we don't want to receive any network data beside our response.\n+        // We also do not use capabilities for the request/response messages as we only connect to seeds nodes and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fdf3c0a54cc5251268c9d300aadae46da65d29"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODY2NTYz", "url": "https://github.com/bisq-network/bisq/pull/4680#pullrequestreview-515866563", "createdAt": "2020-10-23T17:26:40Z", "commit": {"oid": "f7b44f1646d50973af82b8027d498df3ec45a3dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3137, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}