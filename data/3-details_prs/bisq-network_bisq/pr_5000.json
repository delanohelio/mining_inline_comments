{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDc5Mzc1", "number": 5000, "title": "Implement Segwit for BSQ", "bodyText": "This PR attempts to add support for native Segwit (p2wpkh) BSQ addresses.\nThe btcd-cli4j Json-RPC interface for bitcoind (which is used by DAO full nodes) is replaced, as that code appears to be unmaintained for about 5 years and only maintained compatibility up to bitcoind-0.10.3. In particular, it does not support the extra Segwit fields in the getblock Json responses returned to the Java client, including the txinwitness field of the raw tx inputs. These are needed to fill in the TxInput.pubKey fields of the inputs of each BSQ tx that makes up the DAO state, used in turn to validate staked merit (from issuance txs) and messages signed for a proof-of-burn tx. Thus the RPC client needs upgrading for us to support compensation and proof-of-burn txs with native Segwit BSQ inputs.\nA new, home-grown RPC client is provided using the jsonrpc4j library. Additionally, a simple home-grown socket daemon is provided to receive block hashes sent by the blocknotify script run by bitcoind, replacing the btcd-cli4j version.\n\nTODO: Improve the RPC client startup logic - should send a ping or getnetworkinfo message to bitcoind & check the version. [edit: now done]\nTODO: Fix a consensus issue caused by failure of RpcService.java to account for at least one spurious fully native Segwit BSQ tx (d1f45e55be6101b1b75e6bf9fc5e5341c6ab420647be7555863bbbddd84e92f3) which appeared in block 660384, dated 2020-12-07 (thus missing a TxInput.pubKey field in the DAO state). I'm not sure yet if there are any other consensus issues. [edit: now done]\nTODO: Actually implement and enable the native segwit BSQ keychain and make sure there are no issues.\n[edit: should be finished - created a separate PR #5109 for the changes]", "createdAt": "2020-12-24T23:12:10Z", "url": "https://github.com/bisq-network/bisq/pull/5000", "merged": true, "mergeCommit": {"oid": "0fd7efd80f92d86b7611db59ed1dbc711347c1ec"}, "closed": true, "closedAt": "2021-03-22T11:01:16Z", "author": {"login": "stejbac"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABduePxkABqjQxODcwOTExMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeFmYZZgFqTYxNzM5MTI2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e14ee6db3c3e239bf388e6c300b04845c219f41", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/5e14ee6db3c3e239bf388e6c300b04845c219f41", "committedDate": "2021-01-08T21:37:55Z", "message": "Make special case for irregular tx with segwit BSQ inputs\n\nSelectively disable pubkey extraction from segwit inputs of a particular\ntx at block height 660384 (2020-12-07), which spends spuriously created\nsegwit BSQ (later burned), to prevent a change in the DAO state hashes\nfrom that point.\n\n(Since a tx with a given ID can only appear on one chain, a fixed global\nexclusion list of IDs should not cause any issues on testnet/regtest\nversus mainnet. This is simpler than conditioning by block height.)"}, "afterCommit": {"oid": "5611905fe1058bb9c3a54fe3c0c8db662b811301", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/5611905fe1058bb9c3a54fe3c0c8db662b811301", "committedDate": "2021-01-09T14:29:00Z", "message": "Make special case for irregular tx with segwit BSQ inputs\n\nSelectively disable pubkey extraction from segwit inputs of a particular\ntx at block height 660384 (2020-12-07), which spends spuriously created\nsegwit BSQ (later burned), to prevent a change in the DAO state hashes\nfrom that point.\n\n(Since a tx with a given ID can only appear on one chain, a fixed global\nexclusion list of IDs should not cause any issues on testnet/regtest\nversus mainnet. This is simpler than conditioning by block height.)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1b68da71013c9d1fa39338d83a342c7b8521035", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/e1b68da71013c9d1fa39338d83a342c7b8521035", "committedDate": "2021-01-09T18:48:41Z", "message": "Add Bitcoin Core version & health check to RpcService\n\nMake a 'getnetworkinfo' RPC call to bitcoind immediately upon startup,\nto check that the node is up (and throw a ConnectException to ensure\nthat the user is presented with an appropriate warning popup otherwise).\nLog a warning if the node version is outside the 0.18.0 - 0.20.1 range.\n\nAdditionally, call 'getbestblockhash' to check that the chain tip is not\nstale (> 6 hours old). As part of this, make sure the 'getblock' RPC\ncall works correctly with verbosity < 2, by fixing JSON deserialisation\nof the response when the block or txs are in summary (hex string) form.\n\n(These version & health checks are almost identical to the ones done by\nthe original btcd-cli4j library during RPC client startup.)"}, "afterCommit": {"oid": "d92867bd932cee73268de35bf1903b81e6bad6cf", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/d92867bd932cee73268de35bf1903b81e6bad6cf", "committedDate": "2021-01-12T08:26:57Z", "message": "Add Bitcoin Core version & health check to RpcService\n\nMake a 'getnetworkinfo' RPC call to bitcoind immediately upon startup,\nto check that the node is up (and throw a ConnectException to ensure\nthat the user is presented with an appropriate warning popup otherwise).\nLog a warning if the node version is outside the 0.18.0 - 0.20.1 range.\n\nAdditionally, call 'getbestblockhash' to check that the chain tip is not\nstale (> 6 hours old). As part of this, make sure the 'getblock' RPC\ncall works correctly with verbosity < 2, by fixing JSON deserialisation\nof the response when the block or txs are in summary (hex string) form.\n\n(These version & health checks are almost identical to the ones done by\nthe original btcd-cli4j library during RPC client startup.)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjY5OTk5", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-564669999", "createdAt": "2021-01-09T01:24:11Z", "commit": {"oid": "5e14ee6db3c3e239bf388e6c300b04845c219f41"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMToyNDoxMVrOIQl8PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQxOToyOTowM1rOIVHpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI2OTc1Nw==", "bodyText": "Wouldn't it be better to add that to the constructor so the TxInput is immutable?", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r554269757", "createdAt": "2021-01-09T01:24:11Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,14 +254,18 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));\n                     if (pubKeyAsHex == null) {\n                         log.debug(\"pubKeyAsHex is not set as we received a not supported sigScript. \" +\n                                         \"txId={}, asm={}, txInWitness={}\",\n                                 rawDtoTx.getTxId(), rawInput.getScriptSig().getAsm(), rawInput.getTxInWitness());\n                     }\n-                    return new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    var txInput = new TxInput(rawInput.getTxId(), rawInput.getVOut(), pubKeyAsHex);\n+                    txInput.isSegwit = rawInput.getTxInWitness() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e14ee6db3c3e239bf388e6c300b04845c219f41"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAxNjIyNQ==", "bodyText": "Wouldn't it be better to use a block height at which we activate the support for segwit inputs. It is technically a hard fork which would become activated at that block height.\nThat should also cover the past tx(s) with a segwit input.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r559016225", "createdAt": "2021-01-16T19:29:03Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/dao/node/full/RpcService.java", "diffHunk": "@@ -246,8 +254,10 @@ private static RawTx getTxFromRawTransaction(RawTransaction rawDtoTx,\n                     // To maintain backwards compatibility when serializing and hashing the DAO state,\n                     // segwit pubKeys are only extracted for the first input, as this will always be a\n                     // BSQ input. Later inputs might be segwit BTC, which would have had a null pubKey\n-                    // recorded in the DAO state prior to the segwit upgrade of the RPC client.\n-                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0));\n+                    // recorded in the DAO state prior to the segwit upgrade of the RPC client. Spurious\n+                    // segwit BSQ inputs in txs mined prior to the upgrade also require exclusion.\n+                    String pubKeyAsHex = extractPubKeyAsHex(rawInput, rawInput == rawDtoTx.getVIn().get(0) &&\n+                            !BSQ_TXS_DISALLOWING_SEGWIT_PUB_KEYS.contains(txId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc739d5f189386fcea32b57b47f97eff074da24"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNzk1ODg4", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-571795888", "createdAt": "2021-01-20T01:19:27Z", "commit": {"oid": "81ad2048c9d7bafcec2d74ed33e8fdf4dcc7eaff"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNzk2OTQ1", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-571796945", "createdAt": "2021-01-20T01:21:53Z", "commit": {"oid": "81ad2048c9d7bafcec2d74ed33e8fdf4dcc7eaff"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMzE4MTI4", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-572318128", "createdAt": "2021-01-20T15:07:35Z", "commit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowNzozNlrOIXC8Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowNzozNlrOIXC8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNjMzMQ==", "bodyText": "The name overload of full/RawBlock and full/rpc/dto/RawBlock is a bit confusing.", "url": "https://github.com/bisq-network/bisq/pull/5000#discussion_r561036331", "createdAt": "2021-01-20T15:07:36Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/node/full/rpc/dto/RawBlock.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.dao.node.full.rpc.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.List;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true, value = \"ntx\")\n+@JsonPropertyOrder({\"hash\", \"confirmations\", \"strippedsize\", \"size\", \"weight\", \"height\", \"version\", \"versionHex\",\n+        \"merkleroot\", \"tx\", \"time\", \"mediantime\", \"nonce\", \"bits\", \"difficulty\", \"chainwork\", \"nTx\",\n+        \"previousblockhash\", \"nextblockhash\"})\n+public class RawBlock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5990fcf9e7b4dc212c8293d765b0642807159927", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/5990fcf9e7b4dc212c8293d765b0642807159927", "committedDate": "2021-01-21T10:08:15Z", "message": "Bring ScryptType enum up to date with latest bitcoind\n\nAdd 'witness_v1_taproot' script type to the enum and proto.pb, so that\nit doesn't cause any problems when Taproot is activated and the new\nscript type starts showing up in RPC getBlock(..) responses (including\npossibly BSQ transactions).\n\nAlso change the Java enum order (which shouldn't cause any problems as\nthe ordinal isn't used directly in hashCode calculations) and add the\nmissing 'witness_unknown' enum value to pb.proto to bring it in sync."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe4953f63305161327478c5f2a290f18cd3a2d5", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/dbe4953f63305161327478c5f2a290f18cd3a2d5", "committedDate": "2021-01-21T10:08:22Z", "message": "Add replacement bitcoind RPC client using jsonrpc4j\n\nCreate a new 'BitcoindClient' interface and a corresponding builder, to\nreplace the old 'com.neemre.btcdcli4j.core.client.BtcdClientImpl' class\nfrom the btcdcli4j library. This is instantiated by jsonrpc4j using a\ndynamic proxy. It provides only a cut down version of the bitcoind RPC\nAPI, exposing the methods 'getblock', 'getblockcount' & 'getblockhash',\nas they are the only ones currently being used by RpcService.\n\nAdd corresponding Jackson-annotated DTO classes to model the JSON\nstructures returned by bitcoind, very similar to the classes provided by\nbtcdcli4j. Note that we use Double instead of BigDecimal to represent\nfractional fields (difficulties + coin amounts in BTC), as they have\nmore consistent Jackson (de)serialisation and appear to be able to\nfaithfully round-trip numeric fields produced by bitcoind. Also note\nthat doubles can faithfully represent any valid decimal BTC amount (that\nis, with 8 d.p. of precision) up to 21 million.\n\nFor now, keep the old BtcdClientImpl instance used by RpcService in\nplace, as the btcdcli4j block notification daemon is dependent upon it\nand would also need to be replaced.\n\nAlso add unit tests for BitcoindClient which test against sample regtest\nresponses, using a mock HttpURLConnection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c7eaf1f207c976532cd1c911a92b3eb7f3e55e", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/b7c7eaf1f207c976532cd1c911a92b3eb7f3e55e", "committedDate": "2021-01-21T10:08:22Z", "message": "Add replacement bitcoind block notification daemon\n\nProvide a new 'BitcoindDaemon' block notification socket server, to\nreplace 'com.neemre.btcdcli4j.daemon.BtcdDaemonImpl'. This starts a\nsingle service thread to listen for raw block hashes on localhost port\n512*, sent by the specified 'blocknotify' shell/batch script, delegating\nto a pool of worker threads to run the supplied BlockListener handler.\nUnlike the original BtcdDaemonImpl class, a call to the 'getblock' RPC\nmethod is not made automatically to supply a complete block to the\nhandler, instead requiring a separate, manual BitcoindClient.getBlock\ninvocation from within RpcService.\n\nAlso provide unit tests using a mock ServerSocket + Socket.\n\nTODO: Use the new Bitcoind(Client|Daemon) implementations in RpcService,\n in place of btcdcli4j Btcd(Client|Daemon)Impl & remove the old library."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863392bc740e05bdb086caec26d312f4b0a1d04d", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/863392bc740e05bdb086caec26d312f4b0a1d04d", "committedDate": "2021-01-21T10:08:22Z", "message": "Factor out executor shutdown logic into new Utilities method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f34231abb6be12867e185a28f921b7202a767ce3", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/f34231abb6be12867e185a28f921b7202a767ce3", "committedDate": "2021-01-21T10:08:23Z", "message": "Factor out failure callback logic into new Utilities method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4470af8edbe867fe13ac264ebb3953f3160ccc2b", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/4470af8edbe867fe13ac264ebb3953f3160ccc2b", "committedDate": "2021-01-21T10:08:23Z", "message": "Add missing copyright headers to new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7863965655378180e3139d8586bc8a7f725b4e", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/ac7863965655378180e3139d8586bc8a7f725b4e", "committedDate": "2021-01-21T10:08:24Z", "message": "Improve exception handling in BitcoindDaemon\n\nWrap any exception that occurs during socket IO or within the supplied\nBlockListener with a new 'BlockNotificationException'. This brings the\nexception handling more in line with that of the old BtcdDaemonImpl and\nmakes it easier to match them downstream in FullNode.handleError."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8104301b52a75a9048276119bab6e682f88365a4", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/8104301b52a75a9048276119bab6e682f88365a4", "committedDate": "2021-01-21T10:10:28Z", "message": "Use new Bitcoind(Client|Daemon) & remove btcd-cli4j\n\nMigrate RpcService over to the new block notification daemon and RPC\nclient based on jsonrpc4j. Drop in own DTO classes in place of the ones\ndefined by btcd-cli4j and rename requestBtcBlock & addNewBtcBlockHandler\nto requestDtoBlock & addNewDtoBlockHandler respectively.\n\nAlso remove now redundant filtering from the logback config and update\ngrade-witness."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca42c0cd1948530c3bc2d7952ef5fa42c009d43", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/6ca42c0cd1948530c3bc2d7952ef5fa42c009d43", "committedDate": "2021-01-21T10:10:29Z", "message": "Enable extraction of segwit pubkeys from raw tx inputs\n\nFactor out a new RpcService.extractPubKeyAsHex method, to take public\nkeys from the inputs of the raw transactions returned by the RPC client,\nwhen building TxInput objects to incorporate into the DAO state. Enhance\nthe method to additionally support segwit (P2WPKH & P2SH-P2WPKH) inputs\n(but only the first input for backwards compatibility - see code\ncomment). Also fix a bug when handling non-SIGHASH_ALL input signatures.\n\nThis will allow segwit BSQ to be used in proof-of-burn and issuance txs,\nwhich need a public key associated with the tx to establish ownership of\nit, when signing messages with a proof-of-burn or staking merit awarded\nfrom a compensation issuance, respectively.\n\nAlso add unit tests for the factored-out method and add a missing RawTx\ntoString() method, to aid debugging the TxInput fields within the\nprocessed block returned by RpcService."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b46e3a404e7f46bab99a0c9bd4a4a2ac471b2a", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/93b46e3a404e7f46bab99a0c9bd4a4a2ac471b2a", "committedDate": "2021-01-21T10:10:29Z", "message": "Fix Codacy issues & deduplicate code in RpcService\n\nFactor out shared construction logic to a new 'getBlockFromRawDtoBlock'\nmethod in RpcService. Also add some 'NOPMD' comments in an attempt to\nsuppress unfixable Codacy warnings about qualified imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796097abbc70c219eec9042915cc318989effe82", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/796097abbc70c219eec9042915cc318989effe82", "committedDate": "2021-01-21T10:10:30Z", "message": "Fix data race in BitcoindDaemonTest\n\nPrevent intermittent test failures, caused by a race between checking\nwhether the mock socket is closed upon accepting a new connection and\nsetting 'socketClosed' to true during shutdown. Waiting to accept and\nthen checking the flag needs to be done in a synchronized block."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a850adadb6e87d2f4828c9884a70ee1a90961b59", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/a850adadb6e87d2f4828c9884a70ee1a90961b59", "committedDate": "2021-01-21T10:10:30Z", "message": "Make special case for irregular tx with segwit BSQ inputs\n\nSelectively disable pubkey extraction from segwit inputs of a particular\ntx at block height 660384 (2020-12-07), which spends spuriously created\nsegwit BSQ (later burned), to prevent a change in the DAO state hashes\nfrom that point.\n\n(Since a tx with a given ID can only appear on one chain, a fixed global\nexclusion list of IDs should not cause any issues on testnet/regtest\nversus mainnet. This is simpler than conditioning by block height.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d595cac47751b0a1e8039a4009c06845c2c2dc74", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/d595cac47751b0a1e8039a4009c06845c2c2dc74", "committedDate": "2021-01-21T10:10:31Z", "message": "Add getNetworkInfo & getBestBlockHash RPC client methods\n\nProvide a 'NetworkInfo' DTO class (with associated nested DTO classes),\nreturned by the 'getnetworkinfo' RPC method call to bitcoind. This will\nbe used during startup of RpcService to determine if Bitcoin Core is\navailable and which version it is using. Add a unit test to round-trip a\nsample NetworkInfo JSON response.\n\nAlso add the missing 'getbestblockhash' RPC method, which will be needed\nby RpcService to determine the Bitcoin Core node health."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0711bfccef643b63ef57c4a4897d730375d10e", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/4b0711bfccef643b63ef57c4a4897d730375d10e", "committedDate": "2021-01-21T10:10:31Z", "message": "Add Bitcoin Core version & health check to RpcService\n\nMake a 'getnetworkinfo' RPC call to bitcoind immediately upon startup,\nto check that the node is up (and throw a ConnectException to ensure\nthat the user is presented with an appropriate warning popup otherwise).\nLog a warning if the node version is outside the 0.18.0 - 0.20.1 range.\n\nAdditionally, call 'getbestblockhash' to check that the chain tip is not\nstale (> 6 hours old). As part of this, make sure the 'getblock' RPC\ncall works correctly with verbosity < 2, by fixing JSON deserialisation\nof the response when the block or txs are in summary (hex string) form.\n\n(These version & health checks are almost identical to the ones done by\nthe original btcd-cli4j library during RPC client startup.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1abf4c5d968cbbd55fa306608ef01aa2aac0df69", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/1abf4c5d968cbbd55fa306608ef01aa2aac0df69", "committedDate": "2021-01-21T10:10:31Z", "message": "Exclude segwit pubkeys by block height instead of a blacklist\n\nSince extraction of segwit pubkeys technically represents a hard fork,\nactivate it by block height in the same way as the fork defined in\nTxOutputParser, instead of relying on the absence of premature segwit\nBSQ inputs outside of a blacklist. This also means we no longer need to\nexclude all but the first tx input from segwit pubkey extraction to\nmaintain backwards compatibility, which is a little safer and consistent\nwith the original behaviour of extracting every available P2PKH pubkey.\n\nProvisionally activate this (2nd) DAO hard fork at block height 672646,\nwhich should be 6 weeks from now, just under 5 weeks from the planned\n1.5.5 release on 2021/01/27. (Block 1906689 for testnet - 2 weeks from\nnow assuming an average block time of 10 minutes, but it's erratic.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b086326445fbc89c0ae0bb2399af69318e93b8", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/a8b086326445fbc89c0ae0bb2399af69318e93b8", "committedDate": "2021-01-21T10:10:32Z", "message": "Ensure RPC client works with Bitcoin Core 0.21.0\n\nAdd missing 'connections_(in|out)' JSON properties to NetworkInfo that\ncame with the recent 0.21.0 release of Bitcoin Core. Also ensure that\nunrecognised JSON properties are ignored, so that future changes to the\nRPC API are less likely to break our client.\n\nAlso, for the benefit of the tests, change the JSON property order of\nRawInput to better match observed 'getblock' responses. (It appears that\nin 0.21.0, extra \"txinwitness\" fields have started appearing in coinbase\ninputs, which may be a bug.)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0c03e96287b6c37e72ef991c8581392a1375108", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/a0c03e96287b6c37e72ef991c8581392a1375108", "committedDate": "2021-01-20T10:05:50Z", "message": "Merge branch 'master' into implement-segwit-for-bsq"}, "afterCommit": {"oid": "3409617a2b464ecd36c8545e345fbc52fa08e0f2", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/3409617a2b464ecd36c8545e345fbc52fa08e0f2", "committedDate": "2021-01-21T10:44:38Z", "message": "Rename rpc.dto.RawX to RawDtoX to avoid confusion\n\nAvoid name clashes between the Json RPC client DTOs & the corresponding\nraw (un-parsed) DAO state entities."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0aa76e4405827cf9586d36991418f4e37465a8f", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/e0aa76e4405827cf9586d36991418f4e37465a8f", "committedDate": "2021-01-21T11:14:56Z", "message": "Rename rpc.dto.RawX to RawDtoX to avoid confusion\n\nAvoid name clashes between the Json RPC client DTOs & the corresponding\nraw (un-parsed) DAO state entities. Also prepend the other DTO classes\nwith 'Dto' for consistency."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3409617a2b464ecd36c8545e345fbc52fa08e0f2", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/3409617a2b464ecd36c8545e345fbc52fa08e0f2", "committedDate": "2021-01-21T10:44:38Z", "message": "Rename rpc.dto.RawX to RawDtoX to avoid confusion\n\nAvoid name clashes between the Json RPC client DTOs & the corresponding\nraw (un-parsed) DAO state entities."}, "afterCommit": {"oid": "e0aa76e4405827cf9586d36991418f4e37465a8f", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/e0aa76e4405827cf9586d36991418f4e37465a8f", "committedDate": "2021-01-21T11:14:56Z", "message": "Rename rpc.dto.RawX to RawDtoX to avoid confusion\n\nAvoid name clashes between the Json RPC client DTOs & the corresponding\nraw (un-parsed) DAO state entities. Also prepend the other DTO classes\nwith 'Dto' for consistency."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ad6bf6370a086c7d719ab0dbcfd84bcf0d4988", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/b4ad6bf6370a086c7d719ab0dbcfd84bcf0d4988", "committedDate": "2021-02-04T07:51:38Z", "message": "Upgrade jsonrpc4j & Jackson; simplify BitcoindClient\n\nChange jsonrpc4j version from 1.5.3 to 1.6.0.bisq.1, forked to the Bisq\nrepo from the recent 1.6.0 release. The forked version changes the class\n'com.googlecode.jsonrpc4j.HttpException' to be public, instead of (prob.\nmistakenly) package private, so we can avoid using reflection to catch\nit and re-throw as a 'bisq.network.http.HttpException'. Remove the now\nunused constructors from the latter.\n\nAs part of this, upgrade Jackson to the latest stable (2.12.1) release,\nsince jsonrpc4j now depends on a newer version than the previous 2.8.10."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzODIwNDM4", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-583820438", "createdAt": "2021-02-04T21:17:26Z", "commit": {"oid": "b4ad6bf6370a086c7d719ab0dbcfd84bcf0d4988"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ea293595d2d77e6a818ad519ba4fb1b94f4b6c", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/05ea293595d2d77e6a818ad519ba4fb1b94f4b6c", "committedDate": "2021-03-20T21:39:26Z", "message": "Activate Segwit DAO hard fork 4 weeks after v1.6.0 release\n\nPush back the (2nd) DAO hard fork activation block height to 680300,\nwhich is 4 weeks after the planned 1.6.0 release around 2021/03/25.\n(Also push back the testnet block activation height to 1943000 - 2 weeks\nfrom now assuming an average block time of 10 minutes.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f21379160b7b9c001f061aac9c2917bdeabc8750", "author": {"user": {"login": "stejbac", "name": "Steven Barclay"}}, "url": "https://github.com/bisq-network/bisq/commit/f21379160b7b9c001f061aac9c2917bdeabc8750", "committedDate": "2021-03-20T23:18:49Z", "message": "Merge branch 'release/v1.6.0' into implement-segwit-for-bsq"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MzkxMjY3", "url": "https://github.com/bisq-network/bisq/pull/5000#pullrequestreview-617391267", "createdAt": "2021-03-22T11:01:03Z", "commit": {"oid": "f21379160b7b9c001f061aac9c2917bdeabc8750"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}