{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDA2MDg0", "number": 4953, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzoyOToyOFrOFGchjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0NDoxMVrOFGcyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzAzMTE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzoyOToyOFrOIHduSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDo0MDo1M1rOIHfaWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzkzMQ==", "bodyText": "The name is a bit off for a map, just signedWitnessSetCache would be more natural.", "url": "https://github.com/bisq-network/bisq/pull/4953#discussion_r544697931", "createdAt": "2020-12-16T23:29:28Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "diffHunk": "@@ -75,10 +76,15 @@\n     private final ArbitratorManager arbitratorManager;\n     private final User user;\n \n-    @Getter\n     private final Map<P2PDataStorage.ByteArray, SignedWitness> signedWitnessMap = new HashMap<>();\n+\n+    // The getSignedWitnessSet is called very often and is a bit expensive. We cache the result in that map but we\n+    // remove the cache entry if we get a matching SignedWitness added to the signedWitnessMap.\n+    private final Map<P2PDataStorage.ByteArray, Set<SignedWitness>> getSignedWitnessSetCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2273e663db4712651e2022b6a73607e6cd78975"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNTU5Mw==", "bodyText": "Agree...", "url": "https://github.com/bisq-network/bisq/pull/4953#discussion_r544725593", "createdAt": "2020-12-17T00:40:53Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "diffHunk": "@@ -75,10 +76,15 @@\n     private final ArbitratorManager arbitratorManager;\n     private final User user;\n \n-    @Getter\n     private final Map<P2PDataStorage.ByteArray, SignedWitness> signedWitnessMap = new HashMap<>();\n+\n+    // The getSignedWitnessSet is called very often and is a bit expensive. We cache the result in that map but we\n+    // remove the cache entry if we get a matching SignedWitness added to the signedWitnessMap.\n+    private final Map<P2PDataStorage.ByteArray, Set<SignedWitness>> getSignedWitnessSetCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzkzMQ=="}, "originalCommit": {"oid": "f2273e663db4712651e2022b6a73607e6cd78975"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzA2NDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0MDo0OVrOIHeAOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDo0MjozNlrOIHfc-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMjUyMg==", "bodyText": "This looks redundant, it's removing the same item from the cache again. hash is calculated as new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash()) when following the calls to signedWitness.", "url": "https://github.com/bisq-network/bisq/pull/4953#discussion_r544702522", "createdAt": "2020-12-16T23:40:49Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "diffHunk": "@@ -487,8 +509,18 @@ private boolean verifyDate(SignedWitness signedWitness, long childSignedWitnessD\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     @VisibleForTesting\n-    void addToMap(SignedWitness signedWitness) {\n-        signedWitnessMap.putIfAbsent(signedWitness.getHashAsByteArray(), signedWitness);\n+    public void addToMap(SignedWitness signedWitness) {\n+        P2PDataStorage.ByteArray hash = signedWitness.getHashAsByteArray();\n+        signedWitnessMap.putIfAbsent(hash, signedWitness);\n+\n+        // We remove the entry with that hash in case we have cached it, so at the next getSignedWitnessSet\n+        // call we use the updated signedWitnessMap to re-fill our cache.\n+        getSignedWitnessSetCache.remove(new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash()));\n+\n+        // Not sure if that is needed as well, tests did succeed in both cases, but seems to be more safe to remove\n+        // potential entries with hash as well. A removed item in getSignedWitnessSetCache carries no risk, though a\n+        // remaining item would.\n+        getSignedWitnessSetCache.remove(hash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2273e663db4712651e2022b6a73607e6cd78975"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNjI2Nw==", "bodyText": "I have not looked closely but I took it from the getSignedWitnessSet methods where signedWitness.getHashAsByteArray() got compared with new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash()). Have not looked deeper into the domain if those 2 data are the same actually. If so, yes that second remove is pointless.", "url": "https://github.com/bisq-network/bisq/pull/4953#discussion_r544726267", "createdAt": "2020-12-17T00:42:36Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "diffHunk": "@@ -487,8 +509,18 @@ private boolean verifyDate(SignedWitness signedWitness, long childSignedWitnessD\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     @VisibleForTesting\n-    void addToMap(SignedWitness signedWitness) {\n-        signedWitnessMap.putIfAbsent(signedWitness.getHashAsByteArray(), signedWitness);\n+    public void addToMap(SignedWitness signedWitness) {\n+        P2PDataStorage.ByteArray hash = signedWitness.getHashAsByteArray();\n+        signedWitnessMap.putIfAbsent(hash, signedWitness);\n+\n+        // We remove the entry with that hash in case we have cached it, so at the next getSignedWitnessSet\n+        // call we use the updated signedWitnessMap to re-fill our cache.\n+        getSignedWitnessSetCache.remove(new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash()));\n+\n+        // Not sure if that is needed as well, tests did succeed in both cases, but seems to be more safe to remove\n+        // potential entries with hash as well. A removed item in getSignedWitnessSetCache carries no risk, though a\n+        // remaining item would.\n+        getSignedWitnessSetCache.remove(hash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMjUyMg=="}, "originalCommit": {"oid": "f2273e663db4712651e2022b6a73607e6cd78975"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzA3Mzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0NDoxMVrOIHeFjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0NDoxMVrOIHeFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMzg4Nw==", "bodyText": "This seems redundant, same reason as earlier comment", "url": "https://github.com/bisq-network/bisq/pull/4953#discussion_r544703887", "createdAt": "2020-12-16T23:44:11Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/account/sign/SignedWitnessService.java", "diffHunk": "@@ -501,7 +533,22 @@ private void publishSignedWitness(SignedWitness signedWitness) {\n     }\n \n     private void doRepublishAllSignedWitnesses() {\n-        signedWitnessMap.forEach((e, signedWitness) -> p2PService.addPersistableNetworkPayload(signedWitness, true));\n+        getSignedWitnessMapValues()\n+                .forEach(signedWitness -> p2PService.addPersistableNetworkPayload(signedWitness, true));\n+    }\n+\n+    @VisibleForTesting\n+    public void removeSignedWitness(SignedWitness signedWitness) {\n+        P2PDataStorage.ByteArray hash = signedWitness.getHashAsByteArray();\n+        signedWitnessMap.remove(hash);\n+\n+        // Need to remove the entry matching signedWitness.getAccountAgeWitnessHash() (test would fail otherwise)\n+        getSignedWitnessSetCache.remove(new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash()));\n+\n+        // Not sure if that is needed as well, tests did succeed in both cases, but seems to be more safe to remove\n+        // potential entries with hash as well. A removed item in getSignedWitnessSetCache carries no risk, though a\n+        // remaining item would.\n+        getSignedWitnessSetCache.remove(hash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2273e663db4712651e2022b6a73607e6cd78975"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2656, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}