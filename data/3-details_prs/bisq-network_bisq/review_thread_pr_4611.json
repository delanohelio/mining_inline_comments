{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjU1MTc2", "number": 4611, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjowMDoxMVrOEsBKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjowMjo0OFrOEsBNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTkxODI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjowMDoxMVrOHfGvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1NDo0NlrOHfNY5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3ODQxNQ==", "bodyText": "Date is not excluded from Json serialization. I think that's correct though since only seller is publishing.\nI think this comment is wrong.", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502378415", "createdAt": "2020-10-09T12:00:11Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;\n+    // As only seller is publishing it is the sellers trade date\n+    private final long date;\n+\n+    // Old converted trade stat objects might not have it set\n+    @Nullable\n+    @JsonExclude\n+    private String mediator;\n+    @Nullable\n+    @JsonExclude\n+    private String refundAgent;\n+\n+    // todo should we add referrerId as well? get added to extra map atm but not used so far\n+\n+    // Hash get set in constructor from json of all the other data fields (with hash = null).\n+    @JsonExclude\n+    private final byte[] hash;\n+    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility\n+    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new\n+    // field in a class would break that hash and therefore break the storage mechanism.\n+    @Nullable\n+    @JsonExclude\n+    private final Map<String, String> extraDataMap;\n+\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                extraDataMap,\n+                null);\n+    }\n+\n+    // Used from conversion method where we use the hash of the TradeStatistics2 objects to avoid duplicate entries\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable byte[] hash) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                null,\n+                hash);\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // PROTO BUFFER\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @VisibleForTesting\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            @Nullable String mediator,\n+                            @Nullable String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap,\n+                            @Nullable byte[] hash) {\n+        this.currency = currency;\n+        this.price = price;\n+        this.amount = amount;\n+        String tempPaymentMethod;\n+        try {\n+            tempPaymentMethod = String.valueOf(PaymentMethodMapper.valueOf(paymentMethod).ordinal());\n+        } catch (Throwable t) {\n+            tempPaymentMethod = paymentMethod;\n+        }\n+        this.paymentMethod = tempPaymentMethod;\n+        this.date = date;\n+        this.mediator = mediator;\n+        this.refundAgent = refundAgent;\n+        this.extraDataMap = ExtraDataMapValidator.getValidatedExtraDataMap(extraDataMap);\n+\n+        this.hash = hash == null ? createHash() : hash;\n+    }\n+\n+    public byte[] createHash() {\n+        // We create hash from all fields excluding hash itself. We use json as simple data serialisation.\n+        // TradeDate is different for both peers so we ignore it for hash. ExtraDataMap is ignored as well as at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MTk3Mw==", "bodyText": "Yes will change the comment.", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502481973", "createdAt": "2020-10-09T14:48:41Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;\n+    // As only seller is publishing it is the sellers trade date\n+    private final long date;\n+\n+    // Old converted trade stat objects might not have it set\n+    @Nullable\n+    @JsonExclude\n+    private String mediator;\n+    @Nullable\n+    @JsonExclude\n+    private String refundAgent;\n+\n+    // todo should we add referrerId as well? get added to extra map atm but not used so far\n+\n+    // Hash get set in constructor from json of all the other data fields (with hash = null).\n+    @JsonExclude\n+    private final byte[] hash;\n+    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility\n+    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new\n+    // field in a class would break that hash and therefore break the storage mechanism.\n+    @Nullable\n+    @JsonExclude\n+    private final Map<String, String> extraDataMap;\n+\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                extraDataMap,\n+                null);\n+    }\n+\n+    // Used from conversion method where we use the hash of the TradeStatistics2 objects to avoid duplicate entries\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable byte[] hash) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                null,\n+                hash);\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // PROTO BUFFER\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @VisibleForTesting\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            @Nullable String mediator,\n+                            @Nullable String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap,\n+                            @Nullable byte[] hash) {\n+        this.currency = currency;\n+        this.price = price;\n+        this.amount = amount;\n+        String tempPaymentMethod;\n+        try {\n+            tempPaymentMethod = String.valueOf(PaymentMethodMapper.valueOf(paymentMethod).ordinal());\n+        } catch (Throwable t) {\n+            tempPaymentMethod = paymentMethod;\n+        }\n+        this.paymentMethod = tempPaymentMethod;\n+        this.date = date;\n+        this.mediator = mediator;\n+        this.refundAgent = refundAgent;\n+        this.extraDataMap = ExtraDataMapValidator.getValidatedExtraDataMap(extraDataMap);\n+\n+        this.hash = hash == null ? createHash() : hash;\n+    }\n+\n+    public byte[] createHash() {\n+        // We create hash from all fields excluding hash itself. We use json as simple data serialisation.\n+        // TradeDate is different for both peers so we ignore it for hash. ExtraDataMap is ignored as well as at", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3ODQxNQ=="}, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NzI3MA==", "bodyText": "Will add if there is any new bugfix PR...", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502487270", "createdAt": "2020-10-09T14:54:46Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;\n+    // As only seller is publishing it is the sellers trade date\n+    private final long date;\n+\n+    // Old converted trade stat objects might not have it set\n+    @Nullable\n+    @JsonExclude\n+    private String mediator;\n+    @Nullable\n+    @JsonExclude\n+    private String refundAgent;\n+\n+    // todo should we add referrerId as well? get added to extra map atm but not used so far\n+\n+    // Hash get set in constructor from json of all the other data fields (with hash = null).\n+    @JsonExclude\n+    private final byte[] hash;\n+    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility\n+    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new\n+    // field in a class would break that hash and therefore break the storage mechanism.\n+    @Nullable\n+    @JsonExclude\n+    private final Map<String, String> extraDataMap;\n+\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                extraDataMap,\n+                null);\n+    }\n+\n+    // Used from conversion method where we use the hash of the TradeStatistics2 objects to avoid duplicate entries\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            String mediator,\n+                            String refundAgent,\n+                            @Nullable byte[] hash) {\n+        this(currency,\n+                price,\n+                amount,\n+                paymentMethod,\n+                date,\n+                mediator,\n+                refundAgent,\n+                null,\n+                hash);\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // PROTO BUFFER\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @VisibleForTesting\n+    public TradeStatistics3(String currency,\n+                            long price,\n+                            long amount,\n+                            String paymentMethod,\n+                            long date,\n+                            @Nullable String mediator,\n+                            @Nullable String refundAgent,\n+                            @Nullable Map<String, String> extraDataMap,\n+                            @Nullable byte[] hash) {\n+        this.currency = currency;\n+        this.price = price;\n+        this.amount = amount;\n+        String tempPaymentMethod;\n+        try {\n+            tempPaymentMethod = String.valueOf(PaymentMethodMapper.valueOf(paymentMethod).ordinal());\n+        } catch (Throwable t) {\n+            tempPaymentMethod = paymentMethod;\n+        }\n+        this.paymentMethod = tempPaymentMethod;\n+        this.date = date;\n+        this.mediator = mediator;\n+        this.refundAgent = refundAgent;\n+        this.extraDataMap = ExtraDataMapValidator.getValidatedExtraDataMap(extraDataMap);\n+\n+        this.hash = hash == null ? createHash() : hash;\n+    }\n+\n+    public byte[] createHash() {\n+        // We create hash from all fields excluding hash itself. We use json as simple data serialisation.\n+        // TradeDate is different for both peers so we ignore it for hash. ExtraDataMap is ignored as well as at", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3ODQxNQ=="}, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTkyNjc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjowMjo0OFrOHfG0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1MjoyMVrOHfNRgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3OTY5Nw==", "bodyText": "Why not save this as a long? Could set first element as UNKNOWN for clients that haven't upgraded after a new method is added.", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502379697", "createdAt": "2020-10-09T12:02:48Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NDE4MQ==", "bodyText": "Because its more flexible for future changes. If we add a new method and a not updated user gets that data it will now show the string even the payment method is not included yet, otherwise it would show Unknown.", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502484181", "createdAt": "2020-10-09T14:51:02Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3OTY5Nw=="}, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NTM3Ng==", "bodyText": "As we store only the ordinal as string, its from data size same...only when paymentMethod is stored as full string we get a bit more data.", "url": "https://github.com/bisq-network/bisq/pull/4611#discussion_r502485376", "createdAt": "2020-10-09T14:52:21Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/statistics/TradeStatistics3.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.trade.statistics;\n+\n+import bisq.core.monetary.Altcoin;\n+import bisq.core.monetary.AltcoinExchangeRate;\n+import bisq.core.monetary.Price;\n+import bisq.core.monetary.Volume;\n+import bisq.core.offer.OfferUtil;\n+\n+import bisq.network.p2p.storage.payload.CapabilityRequiringPayload;\n+import bisq.network.p2p.storage.payload.PersistableNetworkPayload;\n+import bisq.network.p2p.storage.payload.ProcessOncePersistableNetworkPayload;\n+\n+import bisq.common.app.Capabilities;\n+import bisq.common.app.Capability;\n+import bisq.common.crypto.Hash;\n+import bisq.common.proto.ProtoUtil;\n+import bisq.common.util.CollectionUtils;\n+import bisq.common.util.ExtraDataMapValidator;\n+import bisq.common.util.JsonExclude;\n+import bisq.common.util.Utilities;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.bitcoinj.core.Coin;\n+import org.bitcoinj.utils.ExchangeRate;\n+import org.bitcoinj.utils.Fiat;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * This new trade statistics class uses only the bare minimum of data.\n+ * Data size is about 50 bytes in average\n+ */\n+@Slf4j\n+@Getter\n+public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,\n+        CapabilityRequiringPayload {\n+\n+    // This enum must not change the order as we use the ordinal for storage to reduce data size.\n+    // The payment method string can be quite long and would consume 15% more space.\n+    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not\n+    // recognized.\n+    private enum PaymentMethodMapper {\n+        OK_PAY,\n+        CASH_APP,\n+        VENMO,\n+        AUSTRALIA_PAYID, // seems there is a dev trade\n+        UPHOLD,\n+        MONEY_BEAM,\n+        POPMONEY,\n+        REVOLUT,\n+        PERFECT_MONEY,\n+        SEPA,\n+        SEPA_INSTANT,\n+        FASTER_PAYMENTS,\n+        NATIONAL_BANK,\n+        JAPAN_BANK,\n+        SAME_BANK,\n+        SPECIFIC_BANKS,\n+        SWISH,\n+        ALI_PAY,\n+        WECHAT_PAY,\n+        CLEAR_X_CHANGE,\n+        CHASE_QUICK_PAY,\n+        INTERAC_E_TRANSFER,\n+        US_POSTAL_MONEY_ORDER,\n+        CASH_DEPOSIT,\n+        MONEY_GRAM,\n+        WESTERN_UNION,\n+        HAL_CASH,\n+        F2F,\n+        BLOCK_CHAINS,\n+        PROMPT_PAY,\n+        ADVANCED_CASH,\n+        BLOCK_CHAINS_INSTANT\n+    }\n+\n+    private final String currency;\n+    private final long price;\n+    private final long amount;\n+    private final String paymentMethod;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3OTY5Nw=="}, "originalCommit": {"oid": "39c8ade5ef30ac28fe3b465674ea74c3f7efcc98"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2392, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}