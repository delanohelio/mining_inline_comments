{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDEwNjM2", "number": 4409, "title": "Optimize AssetService", "bodyText": "Previous version had several performance issues:\n\nWe kept tradeStatistics in a lookup map in memory (about 40 MB)\nWe built up the StatefulAssets even if it was not used/needed.\nBuilding the StatefulAssets was an expensive call.\nAssetTradeActivityCheck was only used for printing out statistics and\ncalled on startup causing performance cost.\n\nOptimized version:\n\nWe call build the StatefulAssets only on demand (user activates\nview). Method call takes now 22 ms.\nWe create a optimized lookup map with a tuple of the data we need\nand keep it as local variable.\nWe removed AssetTradeActivityCheck.\n\nThanks to the profiling reporting from:\nbisq-network/proposals#199", "createdAt": "2020-08-12T21:12:20Z", "url": "https://github.com/bisq-network/bisq/pull/4409", "merged": true, "mergeCommit": {"oid": "b512e31553822fb9f73e564f19c966a08f6ccbd0"}, "closed": true, "closedAt": "2020-08-22T12:56:34Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-SD3ZAH2gAyNDY3MDEwNjM2OjU1YjA3MGY5NTU2OTc3YWE2ZWM0ZWJmODc4NDk4YTAzYjQ0ZjJmMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBY92JAFqTQ3MjkyNDM4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55b070f9556977aa6ec4ebf878498a03b44f2f0f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/55b070f9556977aa6ec4ebf878498a03b44f2f0f", "committedDate": "2020-08-12T21:11:54Z", "message": "Optimize AssetService\n\nPrevious version had several performance issues:\n- We kept tradeStatistics in a lookup map in memory (about 40 MB)\n- We built up the StatefulAssets even if it was not used/needed.\nBuilding the StatefulAssets was an expensive call.\n- AssetTradeActivityCheck was only used for printing out statistics and\ncalled on startup causing performance cost.\n\nOptimized version:\n- We call build the StatefulAssets only on demand (user activates\nview). Method call takes now 22 ms.\n- We create a optimized lookup map with a tuple of the data we need\nand keep it as local variable.\n- We removed AssetTradeActivityCheck.\n\nThanks to the profiling reporting from:\nhttps://github.com/bisq-network/proposals/issues/199"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ce9f423e7b4510974c5f37592d09eca9d85cbc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a9ce9f423e7b4510974c5f37592d09eca9d85cbc", "committedDate": "2020-08-12T21:25:56Z", "message": "Bow to Codacy robot\n\nPrivate constructors are OK if injection is used.\nEmpty methods are also ok if requires for interface..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjM4NzIz", "url": "https://github.com/bisq-network/bisq/pull/4409#pullrequestreview-472638723", "createdAt": "2020-08-21T16:44:22Z", "commit": {"oid": "a9ce9f423e7b4510974c5f37592d09eca9d85cbc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMToxOVrOHE0oAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNTozM1rOHE0vYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODU2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                // Get the trade volume from lookupDate until current date", "url": "https://github.com/bisq-network/bisq/pull/4409#discussion_r474818561", "createdAt": "2020-08-21T17:01:19Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/dao/governance/asset/AssetService.java", "diffHunk": "@@ -144,52 +117,137 @@ public void addListeners() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"EmptyMethod\"})\n     public void start() {\n-        statefulAssets.clear();\n-        statefulAssets.addAll(CurrencyUtil.getSortedAssetStream()\n-                .filter(asset -> !asset.getTickerSymbol().equals(\"BSQ\"))\n-                .map(StatefulAsset::new)\n-                .collect(Collectors.toList()));\n     }\n \n-    private void updateList() {\n-        if (tradeStatsByTickerSymbol == null)\n-            return;\n-\n-        statefulAssets.forEach(statefulAsset -> {\n-            AssetState assetState;\n-            if (wasAssetRemovedByVoting(statefulAsset.getTickerSymbol())) {\n-                assetState = AssetState.REMOVED_BY_VOTING;\n-            } else {\n-                statefulAsset.setFeePayments(getFeePayments(statefulAsset));\n-\n-                long lookBackPeriodInDays = getLookBackPeriodInDays(statefulAsset);\n-                statefulAsset.setLookBackPeriodInDays(lookBackPeriodInDays);\n-                long tradeVolume = getTradeVolume(statefulAsset, lookBackPeriodInDays);\n-                statefulAsset.setTradeVolume(tradeVolume);\n-                if (isInTrialPeriod(statefulAsset)) {\n-                    assetState = AssetState.IN_TRIAL_PERIOD;\n-                } else if (tradeVolume >= minVolumeInBtc) {\n-                    assetState = AssetState.ACTIVELY_TRADED;\n-                } else {\n-                    assetState = AssetState.DE_LISTED;\n-                }\n-            }\n-            statefulAsset.setAssetState(assetState);\n-        });\n \n-        updateFlag.set(updateFlag.get() + 1);\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // DaoStateListener\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public void onParseBlockCompleteAfterBatchProcessing(Block block) {\n+        int chainHeight = daoStateService.getChainHeight();\n+        bsqFeePerDay = daoStateService.getParamValueAsCoin(Param.ASSET_LISTING_FEE_PER_DAY, chainHeight).value;\n+        minVolumeInBtc = daoStateService.getParamValueAsCoin(Param.ASSET_MIN_VOLUME, chainHeight).value;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // API\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public List<StatefulAsset> getStatefulAssets() {\n+        if (lazyLoadedStatefulAssets.isEmpty()) {\n+            lazyLoadedStatefulAssets.addAll(CurrencyUtil.getSortedAssetStream()\n+                    .filter(asset -> !asset.getTickerSymbol().equals(\"BSQ\"))\n+                    .map(StatefulAsset::new)\n+                    .collect(Collectors.toList()));\n+        }\n+        return lazyLoadedStatefulAssets;\n     }\n \n-    private Map<String, List<TradeStatistics2>> getTradeStatsByTickerSymbol() {\n-        Map<String, List<TradeStatistics2>> map = new HashMap<>();\n+    // Call takes bout 22 ms. Should be only called on demand (e.g. view is showing the data)\n+    public void updateAssetStates() {\n+        // For performance optimisation we map the trade stats to a temporary lookup map and convert it to a custom\n+        // TradeAmountDateTuple object holding only the data we need.\n+        Map<String, List<TradeAmountDateTuple>> lookupMap = new HashMap<>();\n         tradeStatisticsManager.getObservableTradeStatisticsSet().stream()\n                 .filter(e -> CurrencyUtil.isCryptoCurrency(e.getBaseCurrency()))\n                 .forEach(e -> {\n-                    map.putIfAbsent(e.getBaseCurrency(), new ArrayList<>());\n-                    map.get(e.getBaseCurrency()).add(e);\n+                    lookupMap.putIfAbsent(e.getBaseCurrency(), new ArrayList<>());\n+                    lookupMap.get(e.getBaseCurrency()).add(new TradeAmountDateTuple(e.getTradeAmount().getValue(), e.getTradeDate().getTime()));\n+                });\n+\n+        getStatefulAssets().stream()\n+                .filter(e -> AssetState.REMOVED_BY_VOTING != e.getAssetState()) // if once set to REMOVED_BY_VOTING we ignore it for further processing\n+                .forEach(statefulAsset -> {\n+                    AssetState assetState;\n+                    String tickerSymbol = statefulAsset.getTickerSymbol();\n+                    if (wasAssetRemovedByVoting(tickerSymbol)) {\n+                        assetState = AssetState.REMOVED_BY_VOTING;\n+                    } else {\n+                        statefulAsset.setFeePayments(getFeePayments(statefulAsset));\n+                        long lookBackPeriodInDays = getLookBackPeriodInDays(statefulAsset);\n+                        statefulAsset.setLookBackPeriodInDays(lookBackPeriodInDays);\n+                        long lookupDate = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(lookBackPeriodInDays);\n+                        long tradeVolume = getTradeVolume(lookupDate, lookupMap.get(tickerSymbol));\n+                        statefulAsset.setTradeVolume(tradeVolume);\n+                        if (isInTrialPeriod(statefulAsset)) {\n+                            assetState = AssetState.IN_TRIAL_PERIOD;\n+                        } else if (tradeVolume >= minVolumeInBtc) {\n+                            assetState = AssetState.ACTIVELY_TRADED;\n+                        } else {\n+                            assetState = AssetState.DE_LISTED;\n+                        }\n+                    }\n+                    statefulAsset.setAssetState(assetState);\n                 });\n-        return map;\n+\n+        lookupMap.clear();\n+    }\n+\n+    public boolean isActive(String tickerSymbol) {\n+        return DevEnv.isDaoActivated() ? findAsset(tickerSymbol).map(StatefulAsset::isActive).orElse(false) : true;\n+    }\n+\n+    public Transaction payFee(StatefulAsset statefulAsset,\n+                              long listingFee) throws InsufficientMoneyException, TxException {\n+        checkArgument(!statefulAsset.wasRemovedByVoting(), \"Asset must not have been removed\");\n+        checkArgument(listingFee >= getFeePerDay().value, \"Fee must not be less then listing fee for 1 day.\");\n+        checkArgument(listingFee % 100 == 0, \"Fee must be a multiple of 1 BSQ (100 satoshi).\");\n+        try {\n+            // We create a prepared Bsq Tx for the listing fee.\n+            Transaction preparedBurnFeeTx = bsqWalletService.getPreparedBurnFeeTxForAssetListing(Coin.valueOf(listingFee));\n+            byte[] hash = AssetConsensus.getHash(statefulAsset);\n+            byte[] opReturnData = AssetConsensus.getOpReturnData(hash);\n+            // We add the BTC inputs for the miner fee.\n+            Transaction txWithBtcFee = btcWalletService.completePreparedBurnBsqTx(preparedBurnFeeTx, opReturnData);\n+            // We sign the BSQ inputs of the final tx.\n+            Transaction transaction = bsqWalletService.signTx(txWithBtcFee);\n+            log.info(\"Asset listing fee tx: \" + transaction);\n+            return transaction;\n+        } catch (WalletException | TransactionVerificationException e) {\n+            throw new TxException(e);\n+        }\n+    }\n+\n+    public Coin getFeePerDay() {\n+        return AssetConsensus.getFeePerDay(daoStateService, daoStateService.getChainHeight());\n+    }\n+\n+    public void publishTransaction(Transaction transaction, ResultHandler resultHandler,\n+                                   ErrorMessageHandler errorMessageHandler) {\n+        walletsManager.publishAndCommitBsqTx(transaction, TxType.ASSET_LISTING_FEE, new TxBroadcaster.Callback() {\n+            @Override\n+            public void onSuccess(Transaction transaction) {\n+                log.info(\"Asset listing fee tx has been published. TxId={}\", transaction.getHashAsString());\n+                resultHandler.handleResult();\n+            }\n+\n+            @Override\n+            public void onFailure(TxBroadcastException exception) {\n+                errorMessageHandler.handleErrorMessage(exception.getMessage());\n+            }\n+        });\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Private\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce9f423e7b4510974c5f37592d09eca9d85cbc"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDQ1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.error(\"updateList\");", "url": "https://github.com/bisq-network/bisq/pull/4409#discussion_r474820450", "createdAt": "2020-08-21T17:05:33Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/dao/burnbsq/assetfee/AssetFeeView.java", "diffHunk": "@@ -261,17 +287,20 @@ private long getDays() {\n         return getListingFee().value / assetService.getFeePerDay().value;\n     }\n \n+    // We only update on new BSQ blocks and at view activation. We do not update at each trade statistics change as\n+    // that would cause too much CPU load. The assetService.updateAssetStates() call takes about 22 ms.\n     private void updateList() {\n+        log.error(\"updateList\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce9f423e7b4510974c5f37592d09eca9d85cbc"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64dc529f4861912bf411d0aaff1bb90640dc361f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/64dc529f4861912bf411d0aaff1bb90640dc361f", "committedDate": "2020-08-22T01:57:54Z", "message": "Update core/src/main/java/bisq/core/dao/governance/asset/AssetService.java\n\nCo-authored-by: sqrrm <sqrrm@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67312a5b665c5a4283bc65543add695b2a9c1ddc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/67312a5b665c5a4283bc65543add695b2a9c1ddc", "committedDate": "2020-08-22T01:58:12Z", "message": "Update desktop/src/main/java/bisq/desktop/main/dao/burnbsq/assetfee/AssetFeeView.java\n\nCo-authored-by: sqrrm <sqrrm@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTI0Mzg2", "url": "https://github.com/bisq-network/bisq/pull/4409#pullrequestreview-472924386", "createdAt": "2020-08-22T12:56:26Z", "commit": {"oid": "67312a5b665c5a4283bc65543add695b2a9c1ddc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3248, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}