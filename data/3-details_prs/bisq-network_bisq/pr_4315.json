{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDMwOTI2", "number": 4315, "title": "PriceNode: Add support for multiple ExchangeRateProviders", "bodyText": "Extend ExchangeRateService in pricenode to add basic support for multiple providers per currency.\nWhen the service detects that multiple providers have exchange rates for the same currency, it automatically aggregates (averages) these rates into a single ExchangeRate.\nThe client thus receives a single ExchangeRate per currency, regardless of the number of providers which gathered exchange rates for it (be it a single provider, or multiple). This ensures compatibility with previous and existing clients.\nThe purpose of this WIP is to test and review whether:\n\nthis approach to support multiple ExchangeRateProviders is viable\nthe client transparently handles both normal and aggregate rates \"as is\" (so without any client modifications)\nthe pricenode correctly handles multiple providers (multi-threading, caching of rates, calculation of aggregate price, etc)\nthere are any fundamental showstoppers with this approach (risks, incompatibilities, etc)\n\nAddresses bisq-network/projects#35\n\n(Update 21.07.2020: Add overview of supported currencies + providers)\nSupported Currencies and Exchange Providers\nIn this PR, rates for the following currencies are retrieved from the following exchange providers:\nTable 1: Fiat currencies and corresponding exchange providers supported by this PR\nAED=[BITPAY, COINGECKO]\nAFN=[BITPAY]\nALL=[BITPAY]\nAMD=[BITPAY]\nANG=[BITPAY]\nAOA=[BITPAY]\nARS=[BITPAY, COINGECKO, COINPAPRIKA]\nAUD=[BITPAY, BTCMARKETS, COINGECKO, COINPAPRIKA, IndependentReserve, KRAKEN, QUOINE]\nAWG=[BITPAY]\nAZN=[BITPAY]\nBAM=[BITPAY]\nBBD=[BITPAY]\nBDT=[BITPAY, COINGECKO]\nBGN=[BITPAY]\nBHD=[BITPAY, COINGECKO]\nBIF=[BITPAY]\nBMD=[BITPAY, COINGECKO]\nBND=[BITPAY]\nBOB=[BITPAY, COINPAPRIKA]\nBRL=[BITPAY, COINGECKO, COINPAPRIKA, MercadoBitcoin]\nBSD=[BITPAY]\nBTN=[BITPAY]\nBWP=[BITPAY]\nBYN=[BITPAY]\nBZD=[BITPAY]\nCAD=[BITPAY, COINGECKO, COINPAPRIKA, KRAKEN]\nCDF=[BITPAY]\nCHF=[BITPAY, COINGECKO, COINPAPRIKA, KRAKEN]\nCLP=[BITPAY, COINGECKO, COINPAPRIKA]\nCNY=[BITPAY, COINGECKO, COINPAPRIKA]\nCOP=[BITPAY, COINPAPRIKA]\nCRC=[BITPAY]\nCUP=[BITPAY]\nCVE=[BITPAY]\nCZK=[BITPAY, COINGECKO, Coinmate, COINPAPRIKA]\nDJF=[BITPAY]\nDKK=[BITPAY, COINGECKO, COINPAPRIKA]\nDOP=[BITPAY]\nDZD=[BITPAY]\nEGP=[BITPAY]\nETB=[BITPAY]\nEUR=[BITPAY, BINANCE, BITSTAMP, BITBAY, BITFINEX, CexIO, COINGECKO, Coinmate, COINPAPRIKA, EXMO, KRAKEN, QUOINE]\nFJD=[BITPAY]\nFKP=[BITPAY]\nGBP=[BITPAY, BINANCE, BITSTAMP, BITBAY, BITFINEX, CexIO, COINGECKO, COINPAPRIKA, KRAKEN]\nGEL=[BITPAY]\nGHS=[BITPAY]\nGIP=[BITPAY]\nGMD=[BITPAY]\nGNF=[BITPAY]\nGTQ=[BITPAY]\nGYD=[BITPAY]\nHKD=[BITPAY, COINGECKO, COINPAPRIKA, QUOINE]\nHNL=[BITPAY]\nHRK=[BITPAY]\nHTG=[BITPAY]\nHUF=[BITPAY, COINGECKO, COINPAPRIKA]\nIDR=[BITPAY, COINGECKO, COINPAPRIKA, LUNO]\nILS=[BITPAY, COINGECKO, COINPAPRIKA]\nINR=[BITPAY, COINGECKO, COINPAPRIKA]\nIQD=[BITPAY]\nIRR=[BITPAY]\nISK=[BITPAY, COINPAPRIKA]\nJMD=[BITPAY]\nJOD=[BITPAY]\nJPY=[BITPAY, BITFINEX, BITFLYER, COINGECKO, COINPAPRIKA, KRAKEN, QUOINE]\nKES=[BITPAY]\nKGS=[BITPAY]\nKHR=[BITPAY]\nKMF=[BITPAY]\nKPW=[BITPAY]\nKRW=[BITPAY, COINGECKO, COINONE, COINPAPRIKA]\nKWD=[BITPAY, COINGECKO]\nKYD=[BITPAY]\nKZT=[BITPAY]\nLAK=[BITPAY]\nLBP=[BITPAY]\nLKR=[BITPAY, COINGECKO]\nLRD=[BITPAY]\nLSL=[BITPAY]\nLYD=[BITPAY]\nMAD=[BITPAY]\nMDL=[BITPAY]\nMGA=[BITPAY]\nMKD=[BITPAY]\nMMK=[BITPAY, COINGECKO]\nMNT=[BITPAY]\nMOP=[BITPAY]\nMRU=[BITPAY]\nMUR=[BITPAY]\nMVR=[BITPAY]\nMWK=[BITPAY]\nMXN=[BITPAY, COINGECKO, COINPAPRIKA]\nMYR=[BITPAY, COINGECKO, COINPAPRIKA, LUNO]\nMZN=[BITPAY]\nNAD=[BITPAY]\nNGN=[BITPAY, BINANCE, COINPAPRIKA, LUNO]\nNIO=[BITPAY]\nNOK=[BITPAY, COINGECKO, COINPAPRIKA]\nNPR=[BITPAY]\nNZD=[BITPAY, COINGECKO, COINPAPRIKA, IndependentReserve]\nOMR=[BITPAY]\nPAB=[BITPAY]\nPEN=[BITPAY, COINPAPRIKA]\nPGK=[BITPAY]\nPHP=[BITPAY, COINGECKO, COINPAPRIKA]\nPKR=[BITPAY, COINGECKO, COINPAPRIKA]\nPLN=[BITPAY, BITBAY, COINGECKO, COINPAPRIKA, EXMO]\nPYG=[BITPAY]\nQAR=[BITPAY]\nRON=[BITPAY]\nRSD=[BITPAY]\nRUB=[BITPAY, BINANCE, CexIO, COINGECKO, COINPAPRIKA, EXMO]\nRWF=[BITPAY]\nSAR=[BITPAY, COINGECKO]\nSBD=[BITPAY]\nSCR=[BITPAY]\nSDG=[BITPAY]\nSEK=[BITPAY, COINGECKO, COINPAPRIKA]\nSGD=[BITPAY, COINGECKO, COINPAPRIKA, QUOINE]\nSHP=[BITPAY]\nSLL=[BITPAY]\nSOS=[BITPAY]\nSRD=[BITPAY]\nSTN=[BITPAY]\nSVC=[BITPAY]\nSYP=[BITPAY]\nSZL=[BITPAY]\nTHB=[BITPAY, COINGECKO, COINPAPRIKA]\nTJS=[BITPAY]\nTMT=[BITPAY]\nTND=[BITPAY]\nTOP=[BITPAY]\nTRY=[BITPAY, BINANCE, COINGECKO, COINPAPRIKA, PARIBU]\nTTD=[BITPAY]\nTWD=[BITPAY, COINGECKO, COINPAPRIKA]\nTZS=[BITPAY]\nUAH=[BITPAY, BINANCE, COINGECKO, COINPAPRIKA, EXMO]\nUGX=[BITPAY]\nUSD=[BITPAY, BITSTAMP, BITBAY, BITFINEX, CexIO, COINGECKO, COINPAPRIKA, EXMO, HITBTC, IndependentReserve, KRAKEN, QUOINE]\nUYU=[BITPAY]\nUZS=[BITPAY]\nVES=[BITPAY]\nVND=[BITPAY, COINGECKO, COINPAPRIKA]\nVUV=[BITPAY]\nWST=[BITPAY]\nXAF=[BITPAY]\nXCD=[BITPAY]\nXOF=[BITPAY]\nXPF=[BITPAY]\nYER=[BITPAY]\nZAR=[BITPAY, BINANCE, COINGECKO, COINPAPRIKA, LUNO]\nZMW=[BITPAY]\nZWL=[BITPAY]\n\nTable 2: Altcoins and corresponding exchange providers supported by this PR\nAEON=[HITBTC]\nBEAM=[BINANCE]\nBTM=[HITBTC, HUOBI]\nDAI=[BINANCE, BITFINEX]\nDASH=[BINANCE, BITBAY, CexIO, Coinmate, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nDCR=[BINANCE, HITBTC, HUOBI, POLO]\nDOGE=[BINANCE, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nEMC=[HITBTC]\nETC=[BINANCE, BITFINEX, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nETH=[BITPAY, BINANCE, BITSTAMP, BITBAY, BITFINEX, BITFLYER, BTCMARKETS, CexIO, COINGECKO, Coinmate, EXMO, HITBTC, HUOBI, KRAKEN, POLO, QUOINE]\nFAIR=[HUOBI]\nGRIN=[HITBTC]\nLTC=[BINANCE, BITSTAMP, BITBAY, BITFINEX, BTCMARKETS, CexIO, COINGECKO, Coinmate, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nNAV=[BINANCE, HITBTC]\nPART=[HITBTC]\nPIVX=[BINANCE]\nUSDC=[BITPAY]\nXMR=[BINANCE, BITFINEX, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nXRC=[HITBTC]\nXZC=[BINANCE, HITBTC, HUOBI]\nZEC=[BINANCE, BITFINEX, EXMO, HITBTC, HUOBI, KRAKEN, POLO]\nZEN=[BINANCE, HITBTC, HUOBI]\n\n\n(Update 23.07.2020: Simplify and consolidate test overview)\nTesting Approach\nTests should specifically check two things:\n\nTrack 1: API compatibility with existing Bisq clients\nTrack 2: Consistency in the reported prices, across different instances\n\nTable 3: Overview of areas to test\n\nClick to show...\n\n\n\n\nTrack 1:New Pricenode is compatible with existing Bisq clients\nTrack 2:Pricenode price feeds are reliable / usable in Bisq trades\n\n\n\n\nContext\nBisq clients query the /getAllMarketPrices API on the pricenodes (implemented by ExchangeRateController.getAllMarketPrices()) to retrieve the currency exchange rates.For the current Bisq clients to be compatible with the pricenode code in this PR, the new pricenode should use the same data structure as current pricenodes when returning price data.\nOffer.PRICE_TOLERANCE defines the maximum acceptable price difference between the maker and taker in a trade to be 1%. If maker/taker local prices differ by more than that, the trade will throw an exception and will not be created.\n\n\nReason why this matters\nThis PR is only usable if existing Bisq clients in the wild can use them as pricenodes.\nDifferent pricenode instances running the PR code could face different circumstances that can influence their price feeds. For example, intermittent connectivity to one or more of the exchanges, etc. If the maker and taker use pricenodes that return prices which are more than 1% apart, trades in Bisq cannot be created.\n\n\nTesting: General approach\nStart Bisq clients that use pricenodes based on this PR. If prices are successfully retrieved, test is successful.Perform a few regtest trades in different configurations. If trades successful, then test is considered successful.\nCheck prices reported by different pricenodes, at different times, under different conditions. If prices are within <1% of each other, test is successful.\n\n\nTest cases\nSee Tests 1-4 below\nSee Test 0 below\n\n\n\n\nUseful Pricenode Instance Types\nA few specific types of pricenodes can help more easily achieve or simulate the different conditions we need for the tests.\nThese pricenode types are ONLY used to simplify tests, they don't matter for the actual roll-out.\nTable 4: Suggested types of test pricenode instances\n\nClick to show...\n\n\n\n\nPricenode-PR-1m\nPricenode-PR-3m\nPricenode-PR-1m-up5pc\n\n\n\n\nDescription / Purpose(Why is such a pricenode useful for tests? What does it simulate?)\nSimulates a vanilla pricenode, based on this PR\nSimulates a pricenode based on this PR, but which has intermittent connectivity to some/all of the exchanges. The higher polling rate simulates that exchanges are only occasionally polled successfuly to retrieve fresh price data\nSimulates a pricenode based on this PR, but which returns artificially inflated rates (+5%). Can be used to test how a maker/taker setup behaves, should they have massively different prices for the traded currency. Since this situation is not expected to occur (and does not occur normally), this type of pricenode helps to simulate it.\n\n\nPolling rate(How often each exchange provider will poll the exchange)\n1 min\n3 mins\n1 min\n\n\nModifications(Adjustments on top of the PR code, to make the instance suitable for tests)\nDisable BitcoinAverage\nDisable BitcoinAverage\nDisable BitcoinAverageArtificially inflate returned rates by +5%\n\n\nBranch(Test branch containing the modifications mentioned above)\npricenode-test-setup-1m\npricenode-test-setup-3m\npricenode-test-setup-1m-up5pc\n\n\nHow to install(For testers who want to setup their own instance. Auto-install script tested with debian 10.)\nShow...curl -s https://raw.githubusercontent.com/cd2357/bisq/pricenode-test-setup-1m/pricenode/install_pricenode_debian.sh | sudo bash\nShow...curl -s https://raw.githubusercontent.com/cd2357/bisq/pricenode-test-setup-3m/pricenode/install_pricenode_debian.sh | sudo bash\nShow...curl -s https://raw.githubusercontent.com/cd2357/bisq/pricenode-test-setup-1m-up5pc/pricenode/install_pricenode_debian.sh | sudo bash\n\n\nCurrent live test instances(Existing live instances, for test purposes. Warning: no uptime guarantees, best-effort availability)\nmifoy7xvoeoyvtoi.onion (Pricenode-PR-1m-A)lzlxdqzj6t7dxjha.onion (Pricenode-PR-1m-B)\njzfd6tanhnc65fhh.onion (Pricenode-PR-3m-A)p3s7gpl42iq67llv.onion (Pricenode-PR-3m-B)\nii6vfecmp7cf6gky.onion (Pricenode-PR-1m-up5%)\n\n\n\n\nTest Cases\nTest 0\nGoal / Scenario\nThis test checks that prices differ by less than 1% across different pricenode instances, in normal situations.\nPrerequisites\n\nMake sure you have bash, torsocks, curl and jq installed\nCreate a local script compare-pricenode-rates.sh and populate it with the following content:\n\nSnippet 1: Content of Test 0 script\nShow Snippet 1...\n#!/bin/bash\n\n# Define pricenodes\n\n# Base pricenode\npricenodes[0]=\"http://mifoy7xvoeoyvtoi.onion/getAllMarketPrices\"\npricenodeLabels[0]=\"Pricenode-PR-1m-A\"\n\npricenodes[1]=\"http://lzlxdqzj6t7dxjha.onion/getAllMarketPrices\"\npricenodeLabels[1]=\"Pricenode-PR-1m-B\"\n\npricenodes[2]=\"http://jzfd6tanhnc65fhh.onion/getAllMarketPrices\"\npricenodeLabels[2]=\"Pricenode-PR-3m-A\"\n\npricenodes[3]=\"http://p3s7gpl42iq67llv.onion/getAllMarketPrices\"\npricenodeLabels[3]=\"Pricenode-PR-3m-B\"\n\npricenodes[4]=\"http://ii6vfecmp7cf6gky.onion/getAllMarketPrices\"\npricenodeLabels[4]=\"Pricenode-PR-1m-up5%\"\n\n# One of the current pricenodes, as of v1.3.6\n# Chose @alexej996's pricenode from ProvidersRepository.DEFAULT_NODES\npricenodes[5]=\"http://62nvujg5iou3vu3i.onion/getAllMarketPrices\"\npricenodeLabels[5]=\"Pricenode-v1.3.6\"\n\nSTART_RED_TEXT=\"\\x1b[31m\"\nEND_RED_TEXT=\"\\x1b[0m\"\n\n# Define structure that holds retrieved prices\npriceData=()\n\nfor index in \"${!pricenodes[@]}\"\ndo\n\tpricenode=\"${pricenodes[$index]}\"\n\n\t# Get all prices (except for the Coinmarketcap and BitcoinAverage hardcoded prices of 0)\n\tvariable=$(torsocks curl $pricenode | jq '.data[] | select( (.currencyCode != \"NON_EXISTING_SYMBOL\") and (.currencyCode != \"NON_EXISTING_SYMBOL_BA\") )')\n\n\t# Add to priceData array\n\tpriceData[$index]=\"$variable\"\ndone\n\n# n = 7 + 20 + x*30 = 27 + x*30 (where x = number of non-reference pricenodes)\n# 7 means: the Currency Code column\n# 20 means: 19 (for the reference pricenode label) + 1 character for the column separator \"|\"\n# 30 means: 29 (for the non-reference pricenode label) + 1 character for the column separator \"|\"\n# For x = 4 --> n = 27 + 4*30 = 27 + 120 = 147\n# For x = 5 --> n = 27 + 5*30 = 27 + 150 = 177\ndashes=$(printf \"%0.s-\" {1..177})\n\n# Print horizontal dashes (begin table header)\nprintf \"%s\\n\" \"$dashes\"\n\n# Print table header labels\nprintf \"%-7s\" \"Code\"\nfor index in \"${!pricenodeLabels[@]}\"; do\n\tpricenodeLabel=\"${pricenodeLabels[$index]}\"\n\n\tif [ \"$index\" -eq \"0\" ]; then\n\n\t\tprintf \"|%19s\" \"$pricenodeLabel\"\n\n\telse\n\n\t\tprintf \"|%29s\" \"$pricenodeLabel\"\n\n\tfi\ndone\nprintf \"\\n\" \"\"\n\n# Print horizontal dashes (end table header)\nprintf \"%s\\n\" \"$dashes\"\n\n\n# For each currencyCode (cc) in the base pricenodes[0] (the base pricenode),\n# retrieve and compare prices from ALL listed pricenodes\nfor cc in $(echo \"${priceData[0]}\" | jq '.currencyCode'); do\n\n\t# First column: print curency code\n\tprintf \"%-7s\" $cc\n\n\t# base price = price of this currency in the base pricenode\n\t# It is also the price relative to which we calculate price deltas in the other table columns\n\tbasePrice=$(echo \"${priceData[0]}\" | jq 'select(.currencyCode == '$cc') | .price')\n\n\tfor index in \"${!priceData[@]}\"; do\n\n\t\tpriceDataX=\"${priceData[$index]}\"\n\n\t\tprice=$(echo \"$priceDataX\" | jq 'select(.currencyCode == '$cc') | .price')\n\t\tprovider=$(echo \"$priceDataX\" | jq 'select(.currencyCode == '$cc') | .provider')\n\n\t\tif [ -z \"$price\" ]; then\n\t\t\tcontinue\n\t\tfi\n\n\n\t\tif [ \"$index\" -eq \"0\" ]; then\n\n\t\t\t# if this is the base pricenode (index == 0), then print the price with no delta\n\t\t\t# 2nd column: print price (from base provider)\n\t\t\tprintf '|%19.8f' $price\n\n\t\telse\n\t\t\t# If this is NOT the base pricenode,\n\t\t\t# delta = difference in percentage, from this pricenode's price to the base pricenode\n   \t\t\tdelta=$(jq -n \"($price - $basePrice) * 100 / $basePrice\" )\n\n\t\t\t# Check if price delta is bigger than 1% (or lower than -1)\n\t\t\t# Use jq for arithmetic operations, since bash only has rudimentary support for basic integer ops\n\t\t\tif [ $(jq -n \"$delta < -1 or $delta > 1\") == 'true' ]; then\n\n\t\t\t\t# 2nd/3rd/etc column (for non-base pricenode, with delta > 1%) : print price and highlight delta in red\n\t\t\t\tprintf \"|%19.8f $START_RED_TEXT(%+6.2f%%)$END_RED_TEXT\" $price $delta\n\n\t\t\telse\n\n\t\t\t\t# 2nd/3rd/etc column (for non-base pricenode, with delta <=1%) : print price and delta\n\t\t\t\tprintf \"|%19.8f (%+6.2f%%)\" $price $delta\n\n\t\t\tfi\n\n\t\tfi\n\n\tdone\n\n\tprintf '\\n'\ndone\n\n\nMake the script executable\n\nchmod +x compare-pricenode-rates.sh\n\n\n\nSteps\n\nExecute the script\n\n./compare-pricenode-rates.sh\nThis will query the prices from several test live pricenode instances, based on this PR\n\n\nCheck if the displayed deltas are between -1.00% and 1.00%\n\nThe deltas for the column Pricenode-PR-1m-up5pc are expected to be roughly around 5%\n\n\n\nHere is a sample output of the script:\nSnippet 2: Sample output for Test 0 script\n\nClick to show...\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCode   |  Pricenode-PR-1m-A|            Pricenode-PR-1m-B|            Pricenode-PR-3m-A|            Pricenode-PR-3m-B|         Pricenode-PR-1m-up5%|             Pricenode-v1.3.6\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\"AED\"  |     40002.75300000|     40002.75300000 ( +0.00%)|     40003.17350000 ( +0.00%)|     40002.75300000 ( +0.00%)|     42002.89065000 ( +5.00%)|     40181.04000000 ( +0.45%)\n\"AEON\" |         0.00003166|         0.00003166 ( +0.00%)|         0.00003166 ( +0.00%)|         0.00003166 ( +0.00%)|         0.00003324 ( +5.00%)\n\"AFN\"  |    836578.68000000|    836578.68000000 ( +0.00%)|    836578.68000000 ( +0.00%)|    836578.68000000 ( +0.00%)|    878407.61400000 ( +5.00%)|    840159.06000000 ( +0.43%)\n\"ALL\"  |   1150840.25000000|   1150840.25000000 ( +0.00%)|   1150840.25000000 ( +0.00%)|   1150840.25000000 ( +0.00%)|   1208382.26250000 ( +5.00%)|   1154945.14000000 ( +0.36%)\n\"AMD\"  |   5246221.88000000|   5246221.88000000 ( +0.00%)|   5246221.88000000 ( +0.00%)|   5246221.88000000 ( +0.00%)|   5508532.97400000 ( +5.00%)|   5268674.62000000 ( +0.43%)\n\"ANG\"  |     19551.29000000|     19551.29000000 ( +0.00%)|     19551.29000000 ( +0.00%)|     19551.29000000 ( +0.00%)|     20528.85450000 ( +5.00%)|     19634.96000000 ( +0.43%)\n\"AOA\"  |   6119224.04000000|   6119224.04000000 ( +0.00%)|   6119224.04000000 ( +0.00%)|   6119224.04000000 ( +0.00%)|   6425185.24200000 ( +5.00%)|   6145413.05000000 ( +0.43%)\n\"ARS\"  |    785560.84184636|    785560.84184636 ( +0.00%)|    786390.72081288 ( +0.11%)|    786402.27614622 ( +0.11%)|    825722.38995353 ( +5.11%)|    789307.51000000 ( +0.48%)\n\"AUD\"  |     15250.41907538|     15250.41907538 ( +0.00%)|     15256.54993051 ( +0.04%)|     15257.39564479 ( +0.05%)|     16020.26542703 ( +5.05%)|     15295.03000000 ( +0.29%)\n\"AWG\"  |     19607.31000000|     19607.31000000 ( +0.00%)|     19607.31000000 ( +0.00%)|     19607.31000000 ( +0.00%)|     20587.67550000 ( +5.00%)|     19691.23000000 ( +0.43%)\n\"AZN\"  |     18545.25000000|     18545.25000000 ( +0.00%)|     18545.25000000 ( +0.00%)|     18545.25000000 ( +0.00%)|     19472.51250000 ( +5.00%)|     18624.62000000 ( +0.43%)\n\"BAM\"  |     18148.00000000|     18148.00000000 ( +0.00%)|     18148.00000000 ( +0.00%)|     18148.00000000 ( +0.00%)|     19055.40000000 ( +5.00%)|     18225.67000000 ( +0.43%)\n\"BBD\"  |     21785.90000000|     21785.90000000 ( +0.00%)|     21785.90000000 ( +0.00%)|     21785.90000000 ( +0.00%)|     22875.19500000 ( +5.00%)|     21879.14000000 ( +0.43%)\n\"BDT\"  |    923414.85600000|    923414.85600000 ( +0.00%)|    923424.56200000 ( +0.00%)|    923414.85600000 ( +0.00%)|    969585.59880000 ( +5.00%)|    927517.76000000 ( +0.44%)\n\"BEAM\" |         0.00003710|         0.00003710 ( +0.00%)|         0.00003700 ( -0.27%)|         0.00003710 ( +0.00%)|         0.00003895 ( +5.00%)\n\"BGN\"  |     18145.68000000|     18145.68000000 ( +0.00%)|     18145.68000000 ( +0.00%)|     18145.68000000 ( +0.00%)|     19052.96400000 ( +5.00%)|     18218.48000000 ( +0.40%)\n\"BHD\"  |      4102.25100000|      4102.25100000 ( +0.00%)|      4102.29400000 ( +0.00%)|      4102.25100000 ( +0.00%)|      4307.36355000 ( +5.00%)|      4120.43000000 ( +0.44%)\n\"BIF\"  |  20996162.67000000|  20996162.67000000 ( +0.00%)|  20996162.67000000 ( +0.00%)|  20996162.67000000 ( +0.00%)|  22045970.80350000 ( +5.00%)|  21086021.88000000 ( +0.43%)\n\"BMD\"  |     10891.17800000|     10891.17800000 ( +0.00%)|     10891.29250000 ( +0.00%)|     10891.17800000 ( +0.00%)|     11435.73690000 ( +5.00%)|     10939.57000000 ( +0.44%)\n\"BND\"  |     15021.14000000|     15021.14000000 ( +0.00%)|     15021.14000000 ( +0.00%)|     15021.14000000 ( +0.00%)|     15772.19700000 ( +5.00%)|     15085.43000000 ( +0.43%)\n\"BOB\"  |     75180.43619251|     75180.43619251 ( +0.00%)|     75301.21307466 ( +0.16%)|     75301.21307466 ( +0.16%)|     79066.27372839 ( +5.17%)|     75529.82000000 ( +0.46%)\n\"BRL\"  |     56003.42102960|     56013.40102960 ( +0.02%)|     56038.90797542 ( +0.06%)|     56048.41397542 ( +0.08%)|     58850.83467420 ( +5.08%)|     55860.03000000 ( -0.26%)\n\"BSD\"  |     10892.95000000|     10892.95000000 ( +0.00%)|     10892.95000000 ( +0.00%)|     10892.95000000 ( +0.00%)|     11437.59750000 ( +5.00%)|     10939.57000000 ( +0.43%)\n\"BTM\"  |         0.00000868|         0.00000867 ( -0.05%)|         0.00000869 ( +0.11%)|         0.00000868 ( +0.00%)|         0.00000911 ( +5.00%)\n\"BTN\"  |    814949.23000000|    814949.23000000 ( +0.00%)|    814949.23000000 ( +0.00%)|    814949.23000000 ( +0.00%)|    855696.69150000 ( +5.00%)|    818437.04000000 ( +0.43%)\n\"BWP\"  |    124550.12000000|    124550.12000000 ( +0.00%)|    124550.12000000 ( +0.00%)|    124550.12000000 ( +0.00%)|    130777.62600000 ( +5.00%)|    125083.17000000 ( +0.43%)\n\"BYN\"  |     26302.27000000|     26302.27000000 ( +0.00%)|     26302.27000000 ( +0.00%)|     26302.27000000 ( +0.00%)|     27617.38350000 ( +5.00%)|     26414.84000000 ( +0.43%)\n\"BZD\"  |     21954.60000000|     21954.60000000 ( +0.00%)|     21954.60000000 ( +0.00%)|     21954.60000000 ( +0.00%)|     23052.33000000 ( +5.00%)|     22048.56000000 ( +0.43%)\n\"CAD\"  |     14551.33804798|     14551.33804798 ( +0.00%)|     14532.10911445 ( -0.13%)|     14564.97161445 ( +0.09%)|     15291.17269518 ( +5.08%)|     14549.57000000 ( -0.01%)\n\"CDF\"  |  21404648.32000000|  21404648.32000000 ( +0.00%)|  21404648.32000000 ( +0.00%)|  21404648.32000000 ( +0.00%)|  22474880.73600000 ( +5.00%)|  21496255.77000000 ( +0.43%)\n\"CHF\"  |      9994.88941745|      9994.88941745 ( +0.00%)|     10005.24181468 ( +0.10%)|     10002.91331468 ( +0.08%)|     10503.05898042 ( +5.08%)|     10035.75000000 ( +0.41%)\n\"CLP\"  |   8336711.44552104|   8336711.44552104 ( +0.00%)|   8346424.40040044 ( +0.12%)|   8345642.25940044 ( +0.11%)|   8762924.37237046 ( +5.11%)|   8377522.99000000 ( +0.49%)\n\"CNY\"  |     76232.50052341|     76232.50052341 ( +0.00%)|     76314.67843299 ( +0.11%)|     76314.14409966 ( +0.11%)|     80129.85130464 ( +5.11%)|     76585.74000000 ( +0.46%)\n\"COP\"  |  40326234.55820105|  40326234.55820105 ( +0.00%)|  40391422.01141513 ( +0.16%)|  40391422.01141513 ( +0.16%)|  42410993.11198589 ( +5.17%)|  40766418.37000000 ( +1.09%)\n\"CRC\"  |   6334449.25000000|   6334449.25000000 ( +0.00%)|   6334449.25000000 ( +0.00%)|   6334449.25000000 ( +0.00%)|   6651171.71250000 ( +5.00%)|   6361559.38000000 ( +0.43%)\n\"CUP\"  |    280493.48000000|    280493.48000000 ( +0.00%)|    280493.48000000 ( +0.00%)|    280493.48000000 ( +0.00%)|    294518.15400000 ( +5.00%)|    281693.94000000 ( +0.43%)\n\"CVE\"  |   1028022.23000000|   1028022.23000000 ( +0.00%)|   1028022.23000000 ( +0.00%)|   1028022.23000000 ( +0.00%)|   1079423.34150000 ( +5.00%)|   1032421.95000000 ( +0.43%)\n\"CZK\"  |    243973.97812490|    243973.97812490 ( +0.00%)|    244171.88025222 ( +0.08%)|    244169.91650222 ( +0.08%)|    256378.41232733 ( +5.08%)|    243412.00000000 ( -0.23%)\n\"DAI\"  |         0.00009326|         0.00009326 ( +0.00%)|         0.00009371 ( +0.48%)|         0.00009371 ( +0.48%)|         0.00009792 ( +5.00%)\n\"DASH\" |         0.00722625|         0.00722614 ( -0.00%)|         0.00723000 ( +0.05%)|         0.00722895 ( +0.04%)|         0.00758756 ( +5.00%)|         0.00727949 ( +0.74%)\n\"DCR\"  |         0.00140889|         0.00140889 ( +0.00%)|         0.00141063 ( +0.12%)|         0.00141014 ( +0.09%)|         0.00147933 ( +5.00%)|         0.00141224 ( +0.24%)\n\"DJF\"  |   1938945.24000000|   1938945.24000000 ( +0.00%)|   1938945.24000000 ( +0.00%)|   1938945.24000000 ( +0.00%)|   2035892.50200000 ( +5.00%)|   1947243.53000000 ( +0.43%)\n\"DKK\"  |     69124.90699594|     69124.90699594 ( +0.00%)|     69193.58258838 ( +0.10%)|     69198.89858838 ( +0.11%)|     72658.84351780 ( +5.11%)|     69407.80000000 ( +0.41%)\n\"DOGE\" |         0.00000029|         0.00000029 ( +0.03%)|         0.00000029 ( +0.01%)|         0.00000029 ( +0.00%)|         0.00000031 ( +5.00%)|         0.00000029 ( -1.49%)\n\"DOP\"  |    637782.27000000|    637782.27000000 ( +0.00%)|    637782.27000000 ( +0.00%)|    637782.27000000 ( +0.00%)|    669671.38350000 ( +5.00%)|    640511.84000000 ( +0.43%)\n\"DZD\"  |   1392827.15000000|   1392827.15000000 ( +0.00%)|   1392827.15000000 ( +0.00%)|   1392827.15000000 ( +0.00%)|   1462468.50750000 ( +5.00%)|   1398410.82000000 ( +0.40%)\n\"EGP\"  |    174045.62000000|    174045.62000000 ( +0.00%)|    174045.62000000 ( +0.00%)|    174045.62000000 ( +0.00%)|    182747.90100000 ( +5.00%)|    174854.81000000 ( +0.46%)\n\"EMC\"  |         0.00000561|         0.00000561 ( +0.00%)|         0.00000561 ( +0.00%)|         0.00000561 ( +0.00%)|         0.00000589 ( +5.00%)\n\"ETB\"  |    383704.19000000|    383704.19000000 ( +0.00%)|    383704.19000000 ( +0.00%)|    383704.19000000 ( +0.00%)|    402889.39950000 ( +5.00%)|    385619.86000000 ( +0.50%)\n\"ETC\"  |         0.00065594|         0.00065594 ( +0.00%)|         0.00065596 ( +0.00%)|         0.00065609 ( +0.02%)|         0.00068874 ( +5.00%)|         0.00065644 ( +0.08%)\n\"ETH\"  |         0.02902069|         0.02901775 ( -0.01%)|         0.02902128 ( +0.00%)|         0.02902363 ( +0.01%)|         0.03046897 ( +4.99%)|         0.02894501 ( -0.26%)\n\"EUR\"  |      9326.87000714|      9329.28917381 ( +0.03%)|      9325.68233727 ( -0.01%)|      9329.09608727 ( +0.02%)|      9796.90364163 ( +5.04%)|      9350.47000000 ( +0.25%)\n\"FAIR\" |         0.00000019|         0.00000019 ( +0.00%)|         0.00000019 ( +0.00%)|         0.00000019 ( +0.00%)|         0.00000020 ( +5.00%)\n\"FJD\"  |     23174.75000000|     23174.75000000 ( +0.00%)|     23174.75000000 ( +0.00%)|     23174.75000000 ( +0.00%)|     24333.48750000 ( +5.00%)|     23366.92000000 ( +0.83%)\n\"FKP\"  |      8418.49000000|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8839.41450000 ( +5.00%)|      8448.62000000 ( +0.36%)\n\"GBP\"  |      8460.83625155|      8463.39321053 ( +0.03%)|      8454.09880665 ( -0.08%)|      8460.31844430 ( -0.01%)|      8889.45881365 ( +5.07%)|      8476.89000000 ( +0.19%)\n\"GEL\"  |     33659.22000000|     33659.22000000 ( +0.00%)|     33659.22000000 ( +0.00%)|     33659.22000000 ( +0.00%)|     35342.18100000 ( +5.00%)|     33803.27000000 ( +0.43%)\n\"GHS\"  |     63070.19000000|     63070.19000000 ( +0.00%)|     63070.19000000 ( +0.00%)|     63070.19000000 ( +0.00%)|     66223.69950000 ( +5.00%)|     63340.11000000 ( +0.43%)\n\"GIP\"  |      8418.49000000|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8839.41450000 ( +5.00%)|      8448.62000000 ( +0.36%)\n\"GMD\"  |    564363.78000000|    564363.78000000 ( +0.00%)|    564363.78000000 ( +0.00%)|    564363.78000000 ( +0.00%)|    592581.96900000 ( +5.00%)|    566779.14000000 ( +0.43%)\n\"GNF\"  | 104735721.94000000| 104735721.94000000 ( +0.00%)| 104735721.94000000 ( +0.00%)| 104735721.94000000 ( +0.00%)| 109972508.03700000 ( +5.00%)| 105183969.08000000 ( +0.43%)\n\"GRIN\" |         0.00005477|         0.00005477 ( +0.00%)|         0.00005477 ( +0.00%)|         0.00005477 ( +0.00%)|         0.00005751 ( +5.00%)\n\"GTQ\"  |     83867.31000000|     83867.31000000 ( +0.00%)|     83867.31000000 ( +0.00%)|     83867.31000000 ( +0.00%)|     88060.67550000 ( +5.00%)|     84226.25000000 ( +0.43%)\n\"GYD\"  |   2277302.12000000|   2277302.12000000 ( +0.00%)|   2277302.12000000 ( +0.00%)|   2277302.12000000 ( +0.00%)|   2391167.22600000 ( +5.00%)|   2287048.50000000 ( +0.43%)\n\"HKD\"  |     84555.06592274|     84555.06592274 ( +0.00%)|     84623.29831523 ( +0.08%)|     84622.85456523 ( +0.08%)|     88853.99729349 ( +5.08%)|     84785.50000000 ( +0.27%)\n\"HNL\"  |    271615.73000000|    271615.73000000 ( +0.00%)|    271615.73000000 ( +0.00%)|    271615.73000000 ( +0.00%)|    285196.51650000 ( +5.00%)|    272668.79000000 ( +0.39%)\n\"HRK\"  |     69747.56000000|     69747.56000000 ( +0.00%)|     69747.56000000 ( +0.00%)|     69747.56000000 ( +0.00%)|     73234.93800000 ( +5.00%)|     70013.25000000 ( +0.38%)\n\"HTG\"  |   1209748.46000000|   1209748.46000000 ( +0.00%)|   1209748.46000000 ( +0.00%)|   1209748.46000000 ( +0.00%)|   1270235.88300000 ( +5.00%)|   1214925.93000000 ( +0.43%)\n\"HUF\"  |   3223107.32943980|   3223107.32943980 ( +0.00%)|   3226354.88342511 ( +0.10%)|   3226557.33975844 ( +0.11%)|   3387885.20674636 ( +5.11%)|   3236285.92000000 ( +0.41%)\n\"IDR\"  | 158914492.12672377| 158914492.12672377 ( +0.00%)| 159032581.04399110 ( +0.07%)| 159041955.35224110 ( +0.08%)| 166994053.11985317 ( +5.08%)| 159157131.68000000 ( +0.15%)\n\"ILS\"  |     37164.10771638|     37164.10771638 ( +0.00%)|     37204.17044290 ( +0.11%)|     37203.90977624 ( +0.11%)|     39064.10526505 ( +5.11%)|     36238.50000000 ( -2.49%)\n\"INR\"  |    815114.63455575|    815114.63455575 ( +0.00%)|    815956.89844875 ( +0.10%)|    815987.53878208 ( +0.11%)|    856786.91572118 ( +5.11%)|    818827.94000000 ( +0.46%)\n\"IQD\"  |  12962611.45000000|  12962611.45000000 ( +0.00%)|  12962611.45000000 ( +0.00%)|  12962611.45000000 ( +0.00%)|  13610742.02250000 ( +5.00%)|  13018088.74000000 ( +0.43%)\n\"IRR\"  | 458647693.43000000| 458647693.43000000 ( +0.00%)| 458647693.43000000 ( +0.00%)| 458647693.43000000 ( +0.00%)| 481580078.10150003 ( +5.00%)| 460610610.31000000 ( +0.43%)\n\"ISK\"  |   1472732.80182033|   1472732.80182033 ( +0.00%)|   1475097.86250079 ( +0.16%)|   1475097.86250079 ( +0.16%)|   1548852.75562583 ( +5.17%)|   1479029.91000000 ( +0.43%)\n\"JMD\"  |   1601099.14000000|   1601099.14000000 ( +0.00%)|   1601099.14000000 ( +0.00%)|   1601099.14000000 ( +0.00%)|   1681154.09700000 ( +5.00%)|   1607951.51000000 ( +0.43%)\n\"JOD\"  |      7723.10000000|      7723.10000000 ( +0.00%)|      7723.10000000 ( +0.00%)|      7723.10000000 ( +0.00%)|      8109.25500000 ( +5.00%)|      7756.16000000 ( +0.43%)\n\"JPY\"  |   1151334.77828006|   1151756.77828000 ( +0.04%)|   1152317.29071760 ( +0.09%)|   1151971.10709967 ( +0.06%)|   1209863.09580348 ( +5.08%)|   1153066.84000000 ( +0.15%)\n\"KES\"  |   1174151.17000000|   1174151.17000000 ( +0.00%)|   1174151.17000000 ( +0.00%)|   1174151.17000000 ( +0.00%)|   1232858.72850000 ( +5.00%)|   1179066.89000000 ( +0.42%)\n\"KGS\"  |    839262.49000000|    839262.49000000 ( +0.00%)|    839262.49000000 ( +0.00%)|    839262.49000000 ( +0.00%)|    881225.61450000 ( +5.00%)|    843231.77000000 ( +0.47%)\n\"KHR\"  |  44671991.23000000|  44671991.23000000 ( +0.00%)|  44671991.23000000 ( +0.00%)|  44671991.23000000 ( +0.00%)|  46905590.79150000 ( +5.00%)|  44852238.51000000 ( +0.40%)\n\"KMF\"  |   4572863.97000000|   4572863.97000000 ( +0.00%)|   4572863.97000000 ( +0.00%)|   4572863.97000000 ( +0.00%)|   4801507.16850000 ( +5.00%)|   4592434.88000000 ( +0.43%)\n\"KPW\"  |   9803655.72000000|   9803655.72000000 ( +0.00%)|   9803655.72000000 ( +0.00%)|   9803655.72000000 ( +0.00%)|  10293838.50600000 ( +5.00%)|   9845613.33000000 ( +0.43%)\n\"KRW\"  |  13011981.92402978|  13011981.92402978 ( +0.00%)|  13023072.23446963 ( +0.09%)|  13022462.70546963 ( +0.08%)|  13673585.84074311 ( +5.08%)|  13108723.08000000 ( +0.74%)\n\"KWD\"  |      3331.65150000|      3331.65150000 ( +0.00%)|      3331.68650000 ( +0.00%)|      3331.65150000 ( +0.00%)|      3498.23407500 ( +5.00%)|      3345.87000000 ( +0.43%)\n\"KYD\"  |      9076.92000000|      9076.92000000 ( +0.00%)|      9076.92000000 ( +0.00%)|      9076.92000000 ( +0.00%)|      9530.76600000 ( +5.00%)|      9115.77000000 ( +0.43%)\n\"KZT\"  |   4523335.25000000|   4523335.25000000 ( +0.00%)|   4523335.25000000 ( +0.00%)|   4523335.25000000 ( +0.00%)|   4749502.01250000 ( +5.00%)|   4542694.18000000 ( +0.43%)\n\"LAK\"  |  98744599.00000000|  98744599.00000000 ( +0.00%)|  98744599.00000000 ( +0.00%)|  98744599.00000000 ( +0.00%)| 103681828.95000000 ( +5.00%)|  99167205.38000000 ( +0.43%)\n\"LBP\"  |  16475033.84000000|  16475033.84000000 ( +0.00%)|  16475033.84000000 ( +0.00%)|  16475033.84000000 ( +0.00%)|  17298785.53200000 ( +5.00%)|  16584388.68000000 ( +0.66%)\n\"LKR\"  |   2022479.66750000|   2022479.66750000 ( +0.00%)|   2022500.92550000 ( +0.00%)|   2022479.66750000 ( +0.00%)|   2123603.65087500 ( +5.00%)|   2031465.93000000 ( +0.44%)\n\"LRD\"  |   2170420.81000000|   2170420.81000000 ( +0.00%)|   2170420.81000000 ( +0.00%)|   2170420.81000000 ( +0.00%)|   2278941.85050000 ( +5.00%)|   2179709.76000000 ( +0.43%)\n\"LSL\"  |    180387.27000000|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    189406.63350000 ( +5.00%)|    181159.29000000 ( +0.43%)\n\"LTC\"  |         0.00520197|         0.00520252 ( +0.01%)|         0.00520473 ( +0.05%)|         0.00520228 ( +0.01%)|         0.00546206 ( +5.00%)|         0.00521081 ( +0.17%)\n\"LYD\"  |     15141.20000000|     15141.20000000 ( +0.00%)|     15141.20000000 ( +0.00%)|     15141.20000000 ( +0.00%)|     15898.26000000 ( +5.00%)|     15206.00000000 ( +0.43%)\n\"MAD\"  |    102066.95000000|    102066.95000000 ( +0.00%)|    102066.95000000 ( +0.00%)|    102066.95000000 ( +0.00%)|    107170.29750000 ( +5.00%)|    102520.18000000 ( +0.44%)\n\"MDL\"  |    182111.76000000|    182111.76000000 ( +0.00%)|    182111.76000000 ( +0.00%)|    182111.76000000 ( +0.00%)|    191217.34800000 ( +5.00%)|    182891.16000000 ( +0.43%)\n\"MGA\"  |  41529374.93000000|  41529374.93000000 ( +0.00%)|  41529374.93000000 ( +0.00%)|  41529374.93000000 ( +0.00%)|  43605843.67650000 ( +5.00%)|  41679763.10000000 ( +0.36%)\n\"MKD\"  |    571721.12000000|    571721.12000000 ( +0.00%)|    571721.12000000 ( +0.00%)|    571721.12000000 ( +0.00%)|    600307.17600000 ( +5.00%)|    574167.97000000 ( +0.43%)\n\"MMK\"  |  14815106.87200000|  14815106.87200000 ( +0.00%)|  14815262.59200000 ( +0.00%)|  14815106.87200000 ( +0.00%)|  15555862.21560000 ( +5.00%)|  14880933.23000000 ( +0.44%)\n\"MNT\"  |  30983738.11000000|  30983738.11000000 ( +0.00%)|  30983738.11000000 ( +0.00%)|  30983738.11000000 ( +0.00%)|  32532925.01550000 ( +5.00%)|  31114731.17000000 ( +0.42%)\n\"MOP\"  |     86943.37000000|     86943.37000000 ( +0.00%)|     86943.37000000 ( +0.00%)|     86943.37000000 ( +0.00%)|     91290.53850000 ( +5.00%)|     87315.47000000 ( +0.43%)\n\"MRU\"  |    410991.03000000|    410991.03000000 ( +0.00%)|    410991.03000000 ( +0.00%)|    410991.03000000 ( +0.00%)|    431540.58150000 ( +5.00%)\n\"MUR\"  |    437351.97000000|    437351.97000000 ( +0.00%)|    437351.97000000 ( +0.00%)|    437351.97000000 ( +0.00%)|    459219.56850000 ( +5.00%)|    439114.38000000 ( +0.40%)\n\"MVR\"  |    167751.44000000|    167751.44000000 ( +0.00%)|    167751.44000000 ( +0.00%)|    167751.44000000 ( +0.00%)|    176139.01200000 ( +5.00%)|    168469.38000000 ( +0.43%)\n\"MWK\"  |   8033551.22000000|   8033551.22000000 ( +0.00%)|   8033551.22000000 ( +0.00%)|   8033551.22000000 ( +0.00%)|   8435228.78100000 ( +5.00%)|   8067933.15000000 ( +0.43%)\n\"MXN\"  |    238749.38376607|    238749.38376607 ( +0.00%)|    239010.07404824 ( +0.11%)|    239004.95271491 ( +0.11%)|    250955.20035065 ( +5.11%)|    238737.44000000 ( -0.01%)\n\"MYR\"  |     46222.79720864|     46222.79720864 ( +0.00%)|     46260.22656651 ( +0.08%)|     46259.98306651 ( +0.08%)|     48572.98221984 ( +5.08%)|     46001.00000000 ( -0.48%)\n\"MZN\"  |    769859.17000000|    769859.17000000 ( +0.00%)|    769859.17000000 ( +0.00%)|    769859.17000000 ( +0.00%)|    808352.12850000 ( +5.00%)|    773154.00000000 ( +0.43%)\n\"NAD\"  |    180387.27000000|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    189406.63350000 ( +5.00%)|    181159.29000000 ( +0.43%)\n\"NAV\"  |         0.00001141|         0.00001141 ( +0.00%)|         0.00001141 ( +0.00%)|         0.00001141 ( +0.00%)|         0.00001199 ( +5.00%)\n\"NGN\"  |   4637347.02849490|   4641630.27849490 ( +0.09%)|   4632751.55117233 ( -0.10%)|   4639104.55117233 ( +0.04%)|   4873333.29123095 ( +5.09%)|   4239083.52000000 ( -8.59%)\n\"NIO\"  |    376678.24000000|    376678.24000000 ( +0.00%)|    376678.24000000 ( +0.00%)|    376678.24000000 ( +0.00%)|    395512.15200000 ( +5.00%)|    378618.53000000 ( +0.52%)\n\"NOK\"  |     99196.66071913|     99196.66071913 ( +0.00%)|     99283.49738014 ( +0.09%)|     99302.80938014 ( +0.11%)|    104267.94984915 ( +5.11%)|     99572.74000000 ( +0.38%)\n\"NPR\"  |   1303897.33000000|   1303897.33000000 ( +0.00%)|   1303897.33000000 ( +0.00%)|   1303897.33000000 ( +0.00%)|   1369092.19650000 ( +5.00%)|   1309477.74000000 ( +0.43%)\n\"NZD\"  |     16389.07967228|     16389.07967228 ( +0.00%)|     16400.48701996 ( +0.07%)|     16402.21426996 ( +0.08%)|     17222.32498346 ( +5.08%)|     16477.13000000 ( +0.54%)\n\"OMR\"  |      4193.62000000|      4193.62000000 ( +0.00%)|      4193.62000000 ( +0.00%)|      4193.62000000 ( +0.00%)|      4403.30100000 ( +5.00%)|      4211.02000000 ( +0.41%)\n\"PAB\"  |     10892.95000000|     10892.95000000 ( +0.00%)|     10892.95000000 ( +0.00%)|     10892.95000000 ( +0.00%)|     11437.59750000 ( +5.00%)|     10939.57000000 ( +0.43%)\n\"PART\" |         0.00006887|         0.00006887 ( +0.00%)|         0.00006887 ( +0.00%)|         0.00006887 ( +0.00%)|         0.00007231 ( +5.00%)\n\"PEN\"  |     38280.16013105|     38280.16013105 ( +0.00%)|     38341.65695877 ( +0.16%)|     38341.65695877 ( +0.16%)|     40258.73980671 ( +5.17%)|     38458.06000000 ( +0.46%)\n\"PGK\"  |     38356.80000000|     38356.80000000 ( +0.00%)|     38356.80000000 ( +0.00%)|     38356.80000000 ( +0.00%)|     40274.64000000 ( +5.00%)|     38507.29000000 ( +0.39%)\n\"PHP\"  |    535479.72458717|    535479.72458717 ( +0.00%)|    535950.48694844 ( +0.09%)|    536053.03028177 ( +0.11%)|    562855.68179586 ( +5.11%)|    537789.28000000 ( +0.43%)\n\"PIVX\" |         0.00004025|         0.00004025 ( +0.00%)|         0.00004025 ( +0.00%)|         0.00004025 ( +0.00%)|         0.00004226 ( +5.00%)\n\"PKR\"  |   1812311.32698277|   1812311.32698277 ( +0.00%)|   1814265.17415460 ( +0.11%)|   1814252.47282127 ( +0.11%)|   1904965.09646233 ( +5.11%)|   1820891.49000000 ( +0.47%)\n\"PLN\"  |     38462.18555291|     38464.24955291 ( +0.01%)|     38502.52790935 ( +0.10%)|     38475.64890935 ( +0.04%)|     40412.93225481 ( +5.07%)|     39700.00000000 ( +3.22%)\n\"PYG\"  |  75525093.57000000|  75525093.57000000 ( +0.00%)|  75525093.57000000 ( +0.00%)|  75525093.57000000 ( +0.00%)|  79301348.24849999 ( +5.00%)|  75848325.28000000 ( +0.43%)\n\"QAR\"  |     39658.51000000|     39658.51000000 ( +0.00%)|     39658.51000000 ( +0.00%)|     39658.51000000 ( +0.00%)|     41641.43550000 ( +5.00%)|     39828.24000000 ( +0.43%)\n\"RON\"  |     44922.53000000|     44922.53000000 ( +0.00%)|     44922.53000000 ( +0.00%)|     44922.53000000 ( +0.00%)|     47168.65650000 ( +5.00%)|     45044.77000000 ( +0.27%)\n\"RSD\"  |   1093325.47000000|   1093325.47000000 ( +0.00%)|   1093325.47000000 ( +0.00%)|   1093325.47000000 ( +0.00%)|   1147991.74350000 ( +5.00%)|   1096910.72000000 ( +0.33%)\n\"RUB\"  |    785163.63511583|    785029.12011583 ( -0.02%)|    784890.37257308 ( -0.03%)|    784944.63007308 ( -0.03%)|    824854.13157674 ( +5.06%)|    773132.57000000 ( -1.53%)\n\"RWF\"  |  10375535.64000000|  10375535.64000000 ( +0.00%)|  10375535.64000000 ( +0.00%)|  10375535.64000000 ( +0.00%)|  10894312.42200000 ( +5.00%)|  10419940.77000000 ( +0.43%)\n\"SAR\"  |     40851.73100000|     40851.73100000 ( +0.00%)|     40852.16000000 ( +0.00%)|     40851.73100000 ( +0.00%)|     42894.31755000 ( +5.00%)|     41033.65000000 ( +0.45%)\n\"SBD\"  |     90198.15000000|     90198.15000000 ( +0.00%)|     90198.15000000 ( +0.00%)|     90198.15000000 ( +0.00%)|     94708.05750000 ( +5.00%)|     90434.38000000 ( +0.26%)\n\"SCR\"  |    192358.65000000|    192358.65000000 ( +0.00%)|    192358.65000000 ( +0.00%)|    192358.65000000 ( +0.00%)|    201976.58250000 ( +5.00%)|    193156.53000000 ( +0.41%)\n\"SDG\"  |    602380.18000000|    602380.18000000 ( +0.00%)|    602380.18000000 ( +0.00%)|    602380.18000000 ( +0.00%)|    632499.18900000 ( +5.00%)|    604958.24000000 ( +0.43%)\n\"SEK\"  |     95463.86517788|     95463.86517788 ( +0.00%)|     95556.01621862 ( +0.10%)|     95565.99655195 ( +0.11%)|    100344.29637955 ( +5.11%)|     95000.00000000 ( -0.49%)\n\"SGD\"  |     15016.65674036|     15016.65674036 ( +0.00%)|     15028.10255016 ( +0.08%)|     15028.71255016 ( +0.08%)|     15780.14817766 ( +5.08%)|     15108.00000000 ( +0.61%)\n\"SHP\"  |      8418.49000000|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8418.49000000 ( +0.00%)|      8839.41450000 ( +5.00%)|      8448.62000000 ( +0.36%)\n\"SLL\"  | 106287969.96000000| 106287969.96000000 ( +0.00%)| 106287969.96000000 ( +0.00%)| 106287969.96000000 ( +0.00%)| 111602368.45800000 ( +5.00%)| 106742859.86000000 ( +0.43%)\n\"SOS\"  |   6372376.22000000|   6372376.22000000 ( +0.00%)|   6372376.22000000 ( +0.00%)|   6372376.22000000 ( +0.00%)|   6690995.03100000 ( +5.00%)|   6399648.66000000 ( +0.43%)\n\"SRD\"  |     81239.63000000|     81239.63000000 ( +0.00%)|     81239.63000000 ( +0.00%)|     81239.63000000 ( +0.00%)|     85301.61150000 ( +5.00%)|     81587.32000000 ( +0.43%)\n\"STN\"  |    228751.97000000|    228751.97000000 ( +0.00%)|    228751.97000000 ( +0.00%)|    228751.97000000 ( +0.00%)|    240189.56850000 ( +5.00%)\n\"SVC\"  |     95306.71000000|     95306.71000000 ( +0.00%)|     95306.71000000 ( +0.00%)|     95306.71000000 ( +0.00%)|    100072.04550000 ( +5.00%)|     95714.60000000 ( +0.43%)\n\"SYP\"  |   5578888.27000000|   5578888.27000000 ( +0.00%)|   5578888.27000000 ( +0.00%)|   5578888.27000000 ( +0.00%)|   5857832.68350000 ( +5.00%)|   5602059.61000000 ( +0.42%)\n\"SZL\"  |    180387.27000000|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    180387.27000000 ( +0.00%)|    189406.63350000 ( +5.00%)|    181159.29000000 ( +0.43%)\n\"THB\"  |    342669.66074014|    342669.66074014 ( +0.00%)|    343002.73305792 ( +0.10%)|    343036.63005792 ( +0.11%)|    360188.46156082 ( +5.11%)|    344235.46000000 ( +0.46%)\n\"TJS\"  |    112319.59000000|    112319.59000000 ( +0.00%)|    112319.59000000 ( +0.00%)|    112319.59000000 ( +0.00%)|    117935.56950000 ( +5.00%)|    112800.29000000 ( +0.43%)\n\"TMT\"  |     38234.26000000|     38234.26000000 ( +0.00%)|     38234.26000000 ( +0.00%)|     38234.26000000 ( +0.00%)|     40145.97300000 ( +5.00%)|     38397.89000000 ( +0.43%)\n\"TND\"  |     30119.01000000|     30119.01000000 ( +0.00%)|     30119.01000000 ( +0.00%)|     30119.01000000 ( +0.00%)|     31624.96050000 ( +5.00%)|     30247.91000000 ( +0.43%)\n\"TOP\"  |     24726.67000000|     24726.67000000 ( +0.00%)|     24726.67000000 ( +0.00%)|     24726.67000000 ( +0.00%)|     25963.00350000 ( +5.00%)|     24832.50000000 ( +0.43%)\n\"TRY\"  |     75883.33789843|     75883.33789843 ( +0.00%)|     75842.53747346 ( -0.05%)|     75912.60427346 ( +0.04%)|     79730.70448713 ( +5.07%)|     76512.66000000 ( +0.83%)\n\"TTD\"  |     73661.11000000|     73661.11000000 ( +0.00%)|     73661.11000000 ( +0.00%)|     73661.11000000 ( +0.00%)|     77344.16550000 ( +5.00%)|     73976.36000000 ( +0.43%)\n\"TWD\"  |    319237.54958844|    319237.54958844 ( +0.00%)|    319581.72978243 ( +0.11%)|    319579.49211576 ( +0.11%)|    335558.46672155 ( +5.11%)|    320759.14000000 ( +0.48%)\n\"TZS\"  |  25326110.61000000|  25326110.61000000 ( +0.00%)|  25326110.61000000 ( +0.00%)|  25326110.61000000 ( +0.00%)|  26592416.14050000 ( +5.00%)|  25434501.10000000 ( +0.43%)\n\"UAH\"  |    301403.44422875|    301316.34822875 ( -0.03%)|    301511.44203539 ( +0.04%)|    301597.26963539 ( +0.06%)|    316677.13311716 ( +5.07%)|    303029.82000000 ( +0.54%)\n\"UGX\"  |  40223480.28000000|  40223480.28000000 ( +0.00%)|  40223480.28000000 ( +0.00%)|  40223480.28000000 ( +0.00%)|  42234654.29400000 ( +5.00%)|  40395628.42000000 ( +0.43%)\n\"USD\"  |     10858.60474464|     10859.39057798 ( +0.01%)|     10857.05683682 ( -0.01%)|     10861.43608682 ( +0.03%)|     11407.03489116 ( +5.05%)|     10952.36000000 ( +0.86%)\n\"USDC\" |         0.00009180|         0.00009180 ( +0.00%)|         0.00009180 ( +0.00%)|         0.00009180 ( +0.00%)|         0.00009639 ( +5.00%)\n\"UYU\"  |    461922.07000000|    461922.07000000 ( +0.00%)|    461922.07000000 ( +0.00%)|    461922.07000000 ( +0.00%)|    485018.17350000 ( +5.00%)|    463606.38000000 ( +0.36%)\n\"UZS\"  | 111217027.67000000| 111217027.67000000 ( +0.00%)| 111217027.67000000 ( +0.00%)| 111217027.67000000 ( +0.00%)| 116777879.05350001 ( +5.00%)| 111693013.45000000 ( +0.43%)\n\"VES\"  |2666027922.40000000|2666027922.40000000 ( +0.00%)|2666027922.40000000 ( +0.00%)|2666027922.40000000 ( +0.00%)|2799329318.52000000 ( +5.00%)|2677437968.21000000 ( +0.43%)\n\"VND\"  | 252689786.01935992| 252689786.01935992 ( +0.00%)| 252946960.26364875 ( +0.10%)| 252960241.38531540 ( +0.11%)| 265608253.45458117 ( +5.11%)| 253728389.83000000 ( +0.41%)\n\"VUV\"  |   1252122.54000000|   1252122.54000000 ( +0.00%)|   1252122.54000000 ( +0.00%)|   1252122.54000000 ( +0.00%)|   1314728.66700000 ( +5.00%)|   1258082.05000000 ( +0.48%)\n\"WST\"  |     28683.85000000|     28683.85000000 ( +0.00%)|     28683.85000000 ( +0.00%)|     28683.85000000 ( +0.00%)|     30118.04250000 ( +5.00%)|     28824.73000000 ( +0.49%)\n\"XAF\"  |   6095529.32000000|   6095529.32000000 ( +0.00%)|   6095529.32000000 ( +0.00%)|   6095529.32000000 ( +0.00%)|   6400305.78600000 ( +5.00%)|   6116889.96000000 ( +0.35%)\n\"XCD\"  |     29438.74000000|     29438.74000000 ( +0.00%)|     29438.74000000 ( +0.00%)|     29438.74000000 ( +0.00%)|     30910.67700000 ( +5.00%)|     29564.74000000 ( +0.43%)\n\"XMR\"  |         0.00748821|         0.00748876 ( +0.01%)|         0.00749621 ( +0.11%)|         0.00749039 ( +0.03%)|         0.00786320 ( +5.01%)|         0.00748999 ( +0.02%)\n\"XOF\"  |   6095529.32000000|   6095529.32000000 ( +0.00%)|   6095529.32000000 ( +0.00%)|   6095529.32000000 ( +0.00%)|   6400305.78600000 ( +5.00%)|   6116889.96000000 ( +0.35%)\n\"XPF\"  |   1108899.11000000|   1108899.11000000 ( +0.00%)|   1108899.11000000 ( +0.00%)|   1108899.11000000 ( +0.00%)|   1164344.06550000 ( +5.00%)|   1112785.04000000 ( +0.35%)\n\"XRC\"  |         0.00038990|         0.00038990 ( +0.00%)|         0.00038990 ( +0.00%)|         0.00038990 ( +0.00%)|         0.00040939 ( +5.00%)\n\"XZC\"  |         0.00050490|         0.00050457 ( -0.07%)|         0.00050460 ( -0.06%)|         0.00050460 ( -0.06%)|         0.00053014 ( +5.00%)\n\"YER\"  |   2726506.16000000|   2726506.16000000 ( +0.00%)|   2726506.16000000 ( +0.00%)|   2726506.16000000 ( +0.00%)|   2862831.46800000 ( +5.00%)|   2738175.04000000 ( +0.43%)\n\"ZAR\"  |    184222.77864286|    184222.77864286 ( +0.00%)|    184335.27170859 ( +0.06%)|    184338.21850859 ( +0.06%)|    193555.12943402 ( +5.07%)|    180480.58000000 ( -2.03%)\n\"ZEC\"  |         0.00653942|         0.00653890 ( -0.01%)|         0.00654290 ( +0.05%)|         0.00653756 ( -0.03%)|         0.00686652 ( +5.00%)|         0.00653492 ( -0.07%)\n\"ZEN\"  |         0.00076831|         0.00076800 ( -0.04%)|         0.00076925 ( +0.12%)|         0.00076835 ( +0.00%)|         0.00080673 ( +5.00%)\n\"ZMW\"  |    198503.53000000|    198503.53000000 ( +0.00%)|    198503.53000000 ( +0.00%)|    198503.53000000 ( +0.00%)|    208428.70650000 ( +5.00%)|    199353.08000000 ( +0.43%)\n\"ZWL\"  |   3507530.16000000|   3507530.16000000 ( +0.00%)|   3507530.16000000 ( +0.00%)|   3507530.16000000 ( +0.00%)|   3682906.66800000 ( +5.00%)|   3522541.66000000 ( +0.43%)\n\n\nSuccess criteria\nThe test is successful if, in the table outputted by the script, all the deltas in columns\n\nPricenode-PR-1m-A\nPricenode-PR-1m-B\nPricenode-PR-3m-A\nPricenode-PR-3m-B\n\nhave a value between -1.00% and 1.00%.\nTests 1-4\nGoals / Scenarios\n\n\n\nTest\nGoals\nScenario\nPricenodes used\n\n\n\n\nAll (1-4)\nExisting Bisq clients can retrieve pricenode data from pricenodes running this PR code\n\n\n\n\n1\nTrades are successful when using distinct, healthy pricenode instances\nMaker and Seller each use a separate pricenode instance running this PR's codeBoth instances are healthy, polling exchanges every 1 minute\nPricenode-PR-1m-APricenode-PR-1m-B\n\n\n2\nTrades are successful when one of the pricenodes used exhibits intermittent connectivity to exchanges\nMaker and Seller each use a separate pricenode instance running this PR's codeOne uses a healthy instance (polling every minute), the other uses an instance with intermittent connectivity to exchanges, which is simulated by a 3 minute polling interval\nPricenode-PR-1m-APricenode-PR-3m-A\n\n\n3\nTrades are successful when using distinct pricenodes, both of which exhibit intermittent connectivity to exchanges\nMaker and Seller each use a separate pricenode instance running this PR's codeBoth instances have intermittent connectivity to exchanges, which is simulated by a 3 minute polling interval\nPricenode-PR-3m-APricenode-PR-3m-B\n\n\n4\nTrades are PREVENTED from happening and fail gracefully, when price values differ by more than 1% between Maker and Taker, for any reason\nMaker and Seller each use a separate pricenode instance running this PR's codeOne instance is healthy (polling every minute), the other one also polls every minute but returns artificially inflated rates by +5%\nPricenode-PR-1m-APricenode-PR-1m-up5pc\n\n\n\nHow to execute\n\nFulfill prerequisites described below\nFor each of the tests (1-4)\n\nRun through all steps described below\n\n\nOptional: free up resources\n\nAfter running all tests, delete the temp-Bisq-PR-4315 folder to free up disk space\n\n\n\nPrerequisites\n\nMake sure you have at least 5GB free space\n\nWill be used by gradlew to build different artefacts\n\n\nMake sure you have bitcoind and bitcoin-cli installed\n\nThey should point to a recent installation of Bitcoin Core\n\n\nMake sure you have git and git-lfs installed\nCreate a temp folder which will contain all the data for these tests\n\nmkdir temp-Bisq-PR-4315\ncd temp-Bisq-PR-4315\n\n\nClone the latest Bisq code, which will be used to run the different clients and nodes necessary for the tests\n\ngit clone https://github.com/bisq-network/bisq.git\ncd bisq\n\n\nBuild the necessary artefacts for the tests\n\nIn the same folder, run make\n\n\nIn the same folder, create a script init_aliases.sh with the following content:\n\nSnippet 3: init_aliases.sh script for Tests 1-4\nClick to show Snippet 3...\n#!/bin/bash\n\nPRICENODE_PR_1M_A=\"mifoy7xvoeoyvtoi.onion\"\nPRICENODE_PR_1M_B=\"lzlxdqzj6t7dxjha.onion\"\nPRICENODE_PR_3M_A=\"jzfd6tanhnc65fhh.onion\"\nPRICENODE_PR_3M_B=\"p3s7gpl42iq67llv.onion\"\nPRICENODE_PR_1M_UP5PC=\"ii6vfecmp7cf6gky.onion\"\n\n\n### Common aliases for all tests\n\nalias start-seednode-1='./bisq-seednode \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5120 \\\n\t\t--nodePort=2002 \\\n\t\t--userDataDir=.localnet \\\n\t\t--appName=seednode'\n\nalias start-seednode-2='./bisq-seednode \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5121 \\\n\t\t--nodePort=3002 \\\n\t\t--userDataDir=.localnet \\\n\t\t--appName=seednode2'\n\nalias start-mediator='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=4444 \\\n\t\t--appDataDir=.localnet/mediator \\\n\t\t--appName=Mediator'\n\n\n### Aliases for Test 1\n\nalias start-alice-test-1='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_1M_A\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=5555 \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5122 \\\n\t\t--genesisBlockHeight=111 \\\n\t\t--genesisTxId=30af0050040befd8af25068cc697e418e09c2d8ebd8d411d2240591b9ec203cf \\\n\t\t--appDataDir=.localnet/alice \\\n\t\t--appName=\"Alice - Test 1\"'\n\nalias start-bob-test-1='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_1M_B\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=6666 \\\n\t\t--appDataDir=.localnet/bob \\\n\t\t--appName=\"Bob - Test 1\"'\n\n\n### Aliases for Test 2\n\nalias start-alice-test-2='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_1M_A\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=5555 \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5122 \\\n\t\t--genesisBlockHeight=111 \\\n\t\t--genesisTxId=30af0050040befd8af25068cc697e418e09c2d8ebd8d411d2240591b9ec203cf \\\n\t\t--appDataDir=.localnet/alice \\\n\t\t--appName=\"Alice - Test 2\"'\n\nalias start-bob-test-2='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_3M_A\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=6666 \\\n\t\t--appDataDir=.localnet/bob \\\n\t\t--appName=\"Bob - Test 2\"'\n\n\n### Aliases for Test 3\n\nalias start-alice-test-3='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_3M_A\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=5555 \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5122 \\\n\t\t--genesisBlockHeight=111 \\\n\t\t--genesisTxId=30af0050040befd8af25068cc697e418e09c2d8ebd8d411d2240591b9ec203cf \\\n\t\t--appDataDir=.localnet/alice \\\n\t\t--appName=\"Alice - Test 3\"'\n\nalias start-bob-test-3='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_3M_B\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=6666 \\\n\t\t--appDataDir=.localnet/bob \\\n\t\t--appName=\"Bob - Test 3\"'\n\n\n### Aliases for Test 4\n\nalias start-alice-test-4='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_1M_A\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=5555 \\\n\t\t--fullDaoNode=true \\\n\t\t--rpcUser=bisqdao \\\n\t\t--rpcPassword=bsq \\\n\t\t--rpcBlockNotificationPort=5122 \\\n\t\t--genesisBlockHeight=111 \\\n\t\t--genesisTxId=30af0050040befd8af25068cc697e418e09c2d8ebd8d411d2240591b9ec203cf \\\n\t\t--appDataDir=.localnet/alice \\\n\t\t--appName=\"Alice - Test 4\"'\n\nalias start-bob-test-4='./bisq-desktop \\\n\t\t--baseCurrencyNetwork=BTC_REGTEST \\\n\t\t--providers=\"$PRICENODE_PR_1M_UP5PC\" \\\n\t\t--seedNodes=\"$(cat .localnet/seednode/btc_regtest/tor/hiddenservice/hostname):2002,$(cat .localnet/seednode2/btc_regtest/tor/hiddenservice/hostname):3002\" \\\n\t\t--useLocalhostForP2P=false \\\n\t\t--useDevPrivilegeKeys=true \\\n\t\t--nodePort=6666 \\\n\t\t--appDataDir=.localnet/bob \\\n\t\t--appName=\"Bob - Test 4\"'\n\nSteps\nAll commands below are executed in the .../temp-Bisq-PR-4315/bisq folder.\n1. Start regtest bitcoin daemon\n\nIn a new terminal window:\n\nmake bitcoind\n\n\nThis will start a headless regtest bitcoind daemon\n\n2. Start 1st seednode\n\nIn a new terminal window:\n\nsource init_aliases.sh && start-seednode-1\n\n\nThis will start a headless Bisq instance (regtest seednode)\n\n3. Start 2nd seednode\n\nIn a new terminal window:\n\nsource init_aliases.sh && start-seednode-2\n\n\nThis will start another headless Bisq instance (regtest seednode)\n\n4. Start mediator\n\nIn a new terminal window:\n\nsource init_aliases.sh && start-mediator\n\n\nThis will open a Bisq window for mediation and arbitration\nRegister mediator agent\n\nIn this Bisq application window, go to Account\nPress Cmd+N or Ctrl+N (a popup will appear)\nClick Unlock\nClick Register\n\n\nRegister refund agent\n\nIn this Bisq application window, go to Account\nPress Cmd+D or Ctrl+D (a popup will appear)\nClick Unlock\nClick Register\n\n\n\n5. Start 1st trader (Alice)\n\nIn a new terminal window:\n\nsource init_aliases.sh && start-alice-test-X\n\nwhere X is the number of the test (e.g. 1, 2, 3 or 4)\nThe different values of X will cause different pricenodes to be used, as per each test scenario\n\n\n\n\nThis will open a Bisq window that can be used to simulate a trader (Alice)\n\n6. Start 2nd trader (Bob)\n\nIn a new terminal window:\n\nsource init_aliases.sh && start-bob-test-X\n\nwhere X is the number of the test (e.g. 1, 2, 3 or 4)\nThe different values of X will cause different pricenodes to be used, as per each test scenario\n\n\n\n\nThis will open a Bisq window that can be used to simulate another trader (Bob)\n\n7. Optional: If Alice and Bob wallets are empty, generate some regtest BTC for them\n\nIn a new terminal window:\n\nmake block\n\n\nThis will bring the balance of Alice' and Bob's Bisq wallets to 10 BTC each\n\n8. Perform a trade between Alice and Bob\n\nAlice: Create a Sell BTC (for USD) order\nBob: Find Alice's offer and take it\nAlice/Bob: Perform all steps of the trade, until trade complete\n\n9. Stop all test daemons and processes\n\nClose the 3 Bisq application windows (Mediator, Alice, Bob)\nInterrupt / close the 3 headless processes (bitcoind, seednode, seednode2)\n\nSuccess criteria\n\nFor tests 1-3\n\nIf the trade SUCCEEDED, then the test is successful\n\n\nFor test 4\n\nIf the trade FAILED GRACEFULLY (when Bob tried to take Alice's offer), then the test is successful\n\nfailed gracefully = Bob (the Taker) sees an error popup when attempting to take the trade, but after confirming the popup, Bob's Bisq application is still usable (application does not hang, does not close automatically, simply allows Bob to continue using it after error is acknowledged)\n\n\nBecause test 4 attempts to simulate an artificial price difference of 5% between the traders, which SHOULD result in a failure to trade\n\n\n\nTest 5\nGoal / Scenario\nThis test checks that a pricenode is still running and provides a price feed, in case any exchange API is suddenly unreachable or returns an unexpected HTTP error code.\nPrerequisites\n1. A running (test) pricenode\nSteps\n1. Choose a currency that is supported by a single provider\n\nFor example, ANG is only covered by Bitpay\n\n2. Ensure the pricenode is up and running\n\nCheck by accessing http://localhost:8080/getAllMarketPrices on the pricenode (if it returns a json, then it's up and running)\nCheck that the price feed json contains a price for ANG (as a child of the data array)\n\nThe elements are sorted alphabetically, so you can visually scroll through and find it\n\n\n\n3. Make that API endpoint completely unreachable from the pricenode\n\nIn the pricenode, edit the /etc/hosts file and add a line containing \ufeff\ufeff\ufeff\ufeff\ufeff\ufeff127.0.0.1  bitpay.com\n\n4. Monitor the pricende log until it shows failed connections to Bitpay\n\nsudo journalctl -u bisq-pricenode -e\nThis will show you the pricenode log in real time\nKeep it open until you see it reporting an error that it cannot connect to Bitpay\n\nAt most within 1-2 minutes, when Bitpay is polled again\n\n\n\n5. Open http://localhost:8080/getAllMarketPrices on the pricenode\n\nCheck that the price feed still contains a price for ANG\n\nSnippet 1: Sample log output indicating unreachable exchange API endpoint\n\nClick to show...\nAug 02 11:40:44 user bisq-pricenode[20859]: Aug-02 11:40:44.093 [Timer-24] WARN  b.p.s.p.Bitpay: refresh failed org.springframework.web.client.ResourceAccessException: I/O error on GET request for \"https://bitpay.com/rates\": Connection refused (Connection refused); nested exception is java.net.ConnectException: Connection refused (Connection refused)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:674)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:636)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:610)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.getTickers(Bitpay.java:92)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.doGet(Bitpay.java:62)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.doGet(Bitpay.java:45)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider.refresh(PriceProvider.java:78)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider.access$000(PriceProvider.java:31)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider$1.run(PriceProvider.java:64)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.util.TimerThread.mainLoop(Timer.java:556)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.util.TimerThread.run(Timer.java:506)\nAug 02 11:40:44 user bisq-pricenode[20859]: Caused by: java.net.ConnectException: Connection refused (Connection refused)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.Socket.connect(Socket.java:609)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:289)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:182)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:265)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:372)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1187)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:168)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.SimpleBufferingClientHttpRequest.executeInternal(SimpleBufferingClientHttpRequest.java:78)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:660)\nAug 02 11:40:44 user bisq-pricenode[20859]:         ... 10 common frames omitted\nAug 02 11:40:44 user bisq-pricenode[20859]: org.springframework.web.client.ResourceAccessException: I/O error on GET request for \"https://bitpay.com/rates\": Connection refused (Connection refused); nested exception is java.net.ConnectException: Connection refused (Connection refused)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:674)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:636)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:610)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.getTickers(Bitpay.java:92)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.doGet(Bitpay.java:62)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.spot.providers.Bitpay.doGet(Bitpay.java:45)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider.refresh(PriceProvider.java:78)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider.access$000(PriceProvider.java:31)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at bisq.price.PriceProvider$1.run(PriceProvider.java:64)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.util.TimerThread.mainLoop(Timer.java:556)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.util.TimerThread.run(Timer.java:506)\nAug 02 11:40:44 user bisq-pricenode[20859]: Caused by: java.net.ConnectException: Connection refused (Connection refused)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/java.net.Socket.connect(Socket.java:609)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:289)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:182)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:265)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:372)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1187)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:168)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.SimpleBufferingClientHttpRequest.executeInternal(SimpleBufferingClientHttpRequest.java:78)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53)\nAug 02 11:40:44 user bisq-pricenode[20859]:         at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:660)\nAug 02 11:40:44 user bisq-pricenode[20859]:         ... 10 common frames omitted\n\n\nSuccess criteria\nThe test is successful if in the last step, the pricenode\n\nstill returns a price feed (a json output)\nthe price feed still contains an element for ANG", "createdAt": "2020-06-16T19:46:47Z", "url": "https://github.com/bisq-network/bisq/pull/4315", "merged": true, "mergeCommit": {"oid": "06e533bb8190c02f1521cb8160a9a686b95d0710"}, "closed": true, "closedAt": "2020-08-17T12:44:17Z", "author": {"login": "cd2357"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr61sXABqjM0NTA2NDE0NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_xjFjgFqTQ2ODQxNjU2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92bc006fcba81941a711b00ceea5b2eff7ae6cad", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/92bc006fcba81941a711b00ceea5b2eff7ae6cad", "committedDate": "2020-06-16T19:23:31Z", "message": "Integrate initial set of ExchangeRateProviders\n\nAdd support for a few exchanges to demonstrate and test the pricenode\naggregate rates.\n\nThe chose exchanges were selected because they each provide a varied\nlist of fiat and altcoins, with a substantial overlap between them. This\n provides a robust initial set of datapoints and scenarios for aggregate\n  rates."}, "afterCommit": {"oid": "09845a97f1a9734927cc6cb763cf077646a330e3", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/09845a97f1a9734927cc6cb763cf077646a330e3", "committedDate": "2020-06-16T19:57:27Z", "message": "Integrate initial set of ExchangeRateProviders\n\nAdd support for a few exchanges to demonstrate and test the pricenode\naggregate rates.\n\nThe chose exchanges were selected because they each provide a varied\nlist of fiat and altcoins, with a substantial overlap between them. This\n provides a robust initial set of datapoints and scenarios for aggregate\n  rates."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTMzNzIy", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-432133722", "createdAt": "2020-06-17T07:35:29Z", "commit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNTozMFrOGk5WfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo1MTo1M1rOGk57aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTU2NA==", "bodyText": "Please wrap comments at 90 characters per bisq-network/style#5.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341564", "createdAt": "2020-06-17T07:35:30Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTk2MQ==", "bodyText": "Use ex for exception variable names. (e is also used widely throughout the codebase; ex is preferred).", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341961", "createdAt": "2020-06-17T07:36:11Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());\n+                    }\n+                });\n+\n+        // Filter the supported altcoins (currency pair format is ALT-BTC)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.counter.equals(Currency.BTC))\n+                .filter(cp -> supportedCryptoCurrencies.contains(cp.base.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.base.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjU5Mw==", "bodyText": "Please wrap code at 120 chars per bisq-network/style#3.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441342593", "createdAt": "2020-06-17T07:37:13Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NDc0MQ==", "bodyText": "Prefer modelling this as guard logic, e.g.:\nif (exchangeRateList.isEmpty())\n    // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n    return;\n\nif (exchangeRateList.size() == 1) {\n    // If a single provider has rates for this currency, then aggregate = rate from that provider\n    aggregateExchangeRate = exchangeRateList.get(0);\n}\nelse {\n    // If multiple providers have rates for this currency, then aggregate = average of the rates\n    // ...\n}\naggregateExchangeRates.put(aggregateExchangeRate.getCurrency(), aggregateExchangeRate);\nSee also bisq-network/style#12", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441344741", "createdAt": "2020-06-17T07:41:02Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java", "diffHunk": "@@ -53,26 +60,88 @@ public ExchangeRateService(List<ExchangeRateProvider> providers) {\n \n     public Map<String, Object> getAllMarketPrices() {\n         Map<String, Object> metadata = new LinkedHashMap<>();\n-        Map<String, ExchangeRate> allExchangeRates = new LinkedHashMap<>();\n+        Map<String, ExchangeRate> aggregateExchangeRates = getAggregateExchangeRates();\n \n         providers.forEach(p -> {\n             Set<ExchangeRate> exchangeRates = p.get();\n+\n+            // Specific metadata fields for specific providers are expected by the client, mostly for historical reasons\n+            // Therefore, add metadata fields for all known providers\n+            // Rates are encapsulated in the \"data\" map below\n             metadata.putAll(getMetadata(p, exchangeRates));\n-            exchangeRates.forEach(e ->\n-                allExchangeRates.put(e.getCurrency(), e)\n-            );\n         });\n \n         return new LinkedHashMap<String, Object>() {{\n             putAll(metadata);\n             // Use a sorted list by currency code to make comparision of json data between different\n             // price nodes easier\n-            List<ExchangeRate> values = new ArrayList<>(allExchangeRates.values());\n+            List<ExchangeRate> values = new ArrayList<>(aggregateExchangeRates.values());\n             values.sort(Comparator.comparing(ExchangeRate::getCurrency));\n             put(\"data\", values);\n         }};\n     }\n \n+    /**\n+     * For each currency, create an aggregate {@link ExchangeRate} based on the currency's rates from all providers.\n+     * If multiple providers have rates for the currency, then aggregate price = average of retrieved prices.\n+     * If a single provider has rates for the currency, then aggregate price = the rate from that provider.\n+     *\n+     * @return Aggregate {@link ExchangeRate}s based on info from all providers, indexed by currency code\n+     */\n+    private Map<String, ExchangeRate> getAggregateExchangeRates() {\n+        Map<String, ExchangeRate> aggregateExchangeRates = new HashMap<>();\n+\n+        // Query all known providers and collect all exchange rates, grouped by currency code\n+        Map<String, List<ExchangeRate>> currencyCodeToExchangeRates = getCurrencyCodeToExchangeRates();\n+\n+        // For each currency code, calculate aggregate rate\n+        currencyCodeToExchangeRates.forEach((currencyCode, exchangeRateList) -> {\n+            ExchangeRate aggregateExchangeRate;\n+            if (exchangeRateList.size() == 1) {\n+                // If a single provider has rates for this currency, then aggregate = rate from that provider\n+                aggregateExchangeRate = exchangeRateList.get(0);\n+            }\n+            else if (exchangeRateList.size() > 1) {\n+                // If multiple providers have rates for this currency, then aggregate = average of the rates\n+                OptionalDouble opt = exchangeRateList.stream().mapToDouble(ExchangeRate::getPrice).average();\n+                double priceAvg = opt.orElseThrow(IllegalStateException::new); // List size > 1, so opt is always set\n+\n+                aggregateExchangeRate = new ExchangeRate(\n+                        currencyCode,\n+                        BigDecimal.valueOf(priceAvg),\n+                        new Date(), // timestamp = time when avg is calculated\n+                        \"Bisq-Aggregate\");\n+            }\n+            else {\n+                // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n+               return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NjYyOQ==", "bodyText": "Now that we are always querying all ExchangeRateProviders and averaging the results, the @Order annotation is no longer needed. As per the Javadoc in ExchangeRateProvider, this annotation was used to ensure precedence, but that becomes moot now. I'd recommend removing it, and updating the aforementioned Javadoc to avoid confusion.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441346629", "createdAt": "2020-06-17T07:44:22Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/providers/Binance.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.price.spot.providers;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import org.knowm.xchange.binance.BinanceExchange;\n+\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+\n+import java.util.Set;\n+\n+@Component\n+@Order(5)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODkwOQ==", "bodyText": "Prefer package-private visibility whenever possible, i.e. please remove the public modifier here and in all other ExchangeRateProvider implementations. The bisq.spot.providers package is expressly designed such that all member classes are package-private; they need not and should not be referenced from any other package.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441348909", "createdAt": "2020-06-17T07:48:16Z", "author": {"login": "cbeams"}, "path": "pricenode/src/main/java/bisq/price/spot/providers/Poloniex.java", "diffHunk": "@@ -19,76 +19,28 @@\n \n import bisq.price.spot.ExchangeRate;\n import bisq.price.spot.ExchangeRateProvider;\n-import bisq.price.util.Altcoins;\n \n-import org.knowm.xchange.currency.Currency;\n-import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexMarketData;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexTicker;\n+import org.knowm.xchange.poloniex.PoloniexExchange;\n \n-import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.annotation.Order;\n-import org.springframework.http.RequestEntity;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.client.RestTemplate;\n-import org.springframework.web.util.UriComponentsBuilder;\n \n import java.time.Duration;\n \n-import java.util.Date;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n @Component\n @Order(4)\n-class Poloniex extends ExchangeRateProvider {\n-\n-    private final RestTemplate restTemplate = new RestTemplate();\n+public class Poloniex extends ExchangeRateProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ==", "bodyText": "Prefer AbstractExchangeTest for naming consistency and please mark the class as abstract to better signal that it is not in fact a concrete / executable test.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441349939", "createdAt": "2020-06-17T07:50:00Z", "author": {"login": "cbeams"}, "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package bisq.price;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.locale.TradeCurrency;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+public class ExchangeTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MTAxNw==", "bodyText": "Actually, prefer AbstractExchangeRateProviderTest for clarity, as what is being tested are indeed ExchangeRateProvider implementations.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441351017", "createdAt": "2020-06-17T07:51:53Z", "author": {"login": "cbeams"}, "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package bisq.price;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.locale.TradeCurrency;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+public class ExchangeTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ=="}, "originalCommit": {"oid": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "306bca7e4dba4c117a600076012f295e86a6d580", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/306bca7e4dba4c117a600076012f295e86a6d580", "committedDate": "2020-07-13T18:39:24Z", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests."}, "afterCommit": {"oid": "38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "committedDate": "2020-07-20T15:50:26Z", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2085b4bf0b22f13e74314551a716c618f946bad", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f2085b4bf0b22f13e74314551a716c618f946bad", "committedDate": "2020-07-20T16:14:37Z", "message": "Simplify validation in ExchangeRateServiceTest\n\nUpdate sanity check methods to allow for deeper and more comprehensive\nvalidations of the input data. Accept full ExchangeRateProviders in the\nmethod signatures, instead of just the provider prefix, to allow for\nmore complex sanity checks within those validation methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6501155805b2524d1b0a88fb167e01615df2885", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f6501155805b2524d1b0a88fb167e01615df2885", "committedDate": "2020-07-20T16:14:37Z", "message": "ExchangeRateService: Support aggregate rates\n\nAdd support for aggregate rates in the ExchangeRateService. If multiple\nExchangeRateProviders contain rates for the same currency, then these\nrates will be automatically aggregated (averaged) into one.\n\nThis allows the service to transparently scale to multiple providers for\n any specific currency.\n\nThe clients index the rates received from the pricenode by currency\ncode, which means they expect at most a single rate per currency. By\naggregating rates from multiple providers into one per currency, the\nExchangeRateService provides more accurate price data. At the same time,\nthe service API data structure remains intact, thus preserving backward\ncompatibility with all clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "671e80929ade3c6036daba548fef2cb6a323f98a", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/671e80929ade3c6036daba548fef2cb6a323f98a", "committedDate": "2020-07-20T16:14:37Z", "message": "Integrate initial set of ExchangeRateProviders\n\nAdd support for a few exchanges to demonstrate and test the pricenode\naggregate rates.\n\nThe chose exchanges were selected because they each provide a varied\nlist of fiat and altcoins, with a substantial overlap between them. This\n provides a robust initial set of datapoints and scenarios for aggregate\n  rates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6ef40e5e42a12b8f88e8b1713002ce927c87429", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c6ef40e5e42a12b8f88e8b1713002ce927c87429", "committedDate": "2020-07-20T16:14:37Z", "message": "Revert XChange version to keep jdk10 compatibility\n\nRevert from latest v5.0.0 to v4.2.2, since the newer version libraries\nare compiled with Java 11, so they cannot be used as part of the Bisq\nbuild process which still partially relies on Java 10."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "141ead0b2fc06af91e8484ad9407062f6b9f0fb3", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/141ead0b2fc06af91e8484ad9407062f6b9f0fb3", "committedDate": "2020-07-20T16:14:37Z", "message": "Wrap comments at 90 characters\n\nUpdate comments to reflect bisq-network/style#5 guideline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e314a9d24131e2985d52eb531589327807b0126", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3e314a9d24131e2985d52eb531589327807b0126", "committedDate": "2020-07-20T16:14:37Z", "message": "Rename exception variables to ex\n\nUpdate the name of exception variables to ex for\nconsistency and better readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cffddc9aecdf461ecd51573066582d5ea75c621", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5cffddc9aecdf461ecd51573066582d5ea75c621", "committedDate": "2020-07-20T16:14:37Z", "message": "Rewrite else-if clause\n\nSimplify if-else block to avoid redundant use of else-if\nin combination with an empty check and a return statement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020547e19bfc25938d4225c3552b166fe792f00f", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/020547e19bfc25938d4225c3552b166fe792f00f", "committedDate": "2020-07-20T16:14:37Z", "message": "Remove Order annotation from ExchangeRateProviders\n\nRemove Order annotation from rate providers, which was\nused in the case that multiple providers would retrieve\nrates for the same currency.\n\nThe ExchangeRateService now handles such scenarios, thus\neliminating the need for deciding provider precedence via\nthe Order annotation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a0a47a1e4113f0a569597293c9032243c56e42", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/75a0a47a1e4113f0a569597293c9032243c56e42", "committedDate": "2020-07-20T16:14:37Z", "message": "Mark new ExchangeRateProviders as package-private\n\nRemove public modifier in their class definitions to\npreserve their package-private scope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aceb7eef1513769d10acb304162ad339b418c372", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/aceb7eef1513769d10acb304162ad339b418c372", "committedDate": "2020-07-20T16:14:37Z", "message": "Renamed ExchangeRateProvider test class\n\nGive a more accurate name to the abstract test class\nwhich contains common methods used by all\nExchangeRateProvider tests, like BinanceTest or KrakenTest.\n\nMark this test class as abstract, to indicate that it\nshould not be run as a standalone test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329188db1d2e8f66efc575baf69b429cbe483a73", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/329188db1d2e8f66efc575baf69b429cbe483a73", "committedDate": "2020-07-20T16:14:38Z", "message": "Reduce number of exchange API calls when polling\n\nRetrieve the exchange rates in bulk, when possible. This reduces\nthe number of calls the pricenode makes to the exchange API from N =\n\"number of exchange rates to retrieve\" to N = 1.\n\nThe replaced approach, which made a separate call to the exchange API\nfor each exchange rate, was sometimes failing due to reaching API rate\nlimits."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc519179875d9458d26bf3bfa9b866758bc543d", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7fc519179875d9458d26bf3bfa9b866758bc543d", "committedDate": "2020-07-20T16:14:38Z", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "committedDate": "2020-07-20T15:50:26Z", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests."}, "afterCommit": {"oid": "7fc519179875d9458d26bf3bfa9b866758bc543d", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7fc519179875d9458d26bf3bfa9b866758bc543d", "committedDate": "2020-07-20T16:14:38Z", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8643a12f21426ee1d831b07bf721604ebd381ef6", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8643a12f21426ee1d831b07bf721604ebd381ef6", "committedDate": "2020-07-26T20:22:08Z", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies."}, "afterCommit": {"oid": "5d964b87e9422a229546427c5f94911d7cbba428", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5d964b87e9422a229546427c5f94911d7cbba428", "committedDate": "2020-07-27T10:22:45Z", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637378b58a09d53feb85f3a765eef2ac5bb73111", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/637378b58a09d53feb85f3a765eef2ac5bb73111", "committedDate": "2020-07-27T11:02:25Z", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d964b87e9422a229546427c5f94911d7cbba428", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5d964b87e9422a229546427c5f94911d7cbba428", "committedDate": "2020-07-27T10:22:45Z", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies."}, "afterCommit": {"oid": "637378b58a09d53feb85f3a765eef2ac5bb73111", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/637378b58a09d53feb85f3a765eef2ac5bb73111", "committedDate": "2020-07-27T11:02:25Z", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be2a5bbb4be8c1ee81824e62039443b18814c52", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9be2a5bbb4be8c1ee81824e62039443b18814c52", "committedDate": "2020-07-27T12:52:36Z", "message": "Integrate Bitpay exchange rate API\n\nAdd a Bitpay exchange rate provider and corresponding unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "399f65d404b44cbaff069817efb7fc9cfdc17d11", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/399f65d404b44cbaff069817efb7fc9cfdc17d11", "committedDate": "2020-07-27T12:53:03Z", "message": "Integrate CoinGecko API\n\nAdd CoinGecko ExchangeRateProvider and corresponding unit test."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8e0bd97bee882fad224903f81cebf315310e070", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b8e0bd97bee882fad224903f81cebf315310e070", "committedDate": "2020-07-27T11:22:53Z", "message": "Integrate Bitpay exchange rate API\n\nAdd a Bitpay exchange rate provider and corresponding unit test."}, "afterCommit": {"oid": "399f65d404b44cbaff069817efb7fc9cfdc17d11", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/399f65d404b44cbaff069817efb7fc9cfdc17d11", "committedDate": "2020-07-27T12:53:03Z", "message": "Integrate CoinGecko API\n\nAdd CoinGecko ExchangeRateProvider and corresponding unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a194420eddb1c44fa440e94589ca0c3b5992f47", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5a194420eddb1c44fa440e94589ca0c3b5992f47", "committedDate": "2020-07-27T14:17:38Z", "message": "Integrate Coinpaprika API\n\nAdd Coinpaprika ExchangeRateProvider and corresponding unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b362b4c8d28659ddcfde77a384cdbdf3924dbc58", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b362b4c8d28659ddcfde77a384cdbdf3924dbc58", "committedDate": "2020-07-27T16:53:13Z", "message": "Integrate Huobi exchange API\n\nAdd Huobi ExchangeRateProvider and corresponding unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "committedDate": "2020-07-27T16:55:11Z", "message": "Integrate Hitbtc exchange API\n\nAdd Hitbtc ExchangeRateProvider and corresponding unit test."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cd6a1b3ed3798ceccea5b49a848eee96263110e", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3cd6a1b3ed3798ceccea5b49a848eee96263110e", "committedDate": "2020-07-27T16:53:13Z", "message": "Integrate Hitbtc exchange API\n\nAdd Hitbtc ExchangeRateProvider and corresponding unit test."}, "afterCommit": {"oid": "efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "committedDate": "2020-07-27T16:55:11Z", "message": "Integrate Hitbtc exchange API\n\nAdd Hitbtc ExchangeRateProvider and corresponding unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d335441c337400b32a226cfae94053a5ce66fbb", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8d335441c337400b32a226cfae94053a5ce66fbb", "committedDate": "2020-07-28T19:10:25Z", "message": "Fix Bitpay and CoinGecko altcoin rates\n\nCorrectly interpret the alt conversion rate reported by the API. For\nalts, Bisq needs the Alt/BTC rate, whereas the API returns the BTC/Alt\none. Calculate the inverse of the reported values before storing them as\n Bisq internal datastructures (ExchangeRates)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3e84565277a651e6d0a5c6bc18ba5ac2df297b7", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d3e84565277a651e6d0a5c6bc18ba5ac2df297b7", "committedDate": "2020-07-28T18:46:39Z", "message": "Fix Bitpay and CoinGecko altcoin rates\n\nCorrectly interpret the alt conversion rate reported by the API. For\nalts, Bisq needs the Alt/BTC rate, whereas the API returns the BTC/Alt\none. Calculate the inverse of the reported values before storing them as\n Bisq internal datastructures (ExchangeRates)."}, "afterCommit": {"oid": "8d335441c337400b32a226cfae94053a5ce66fbb", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8d335441c337400b32a226cfae94053a5ce66fbb", "committedDate": "2020-07-28T19:10:25Z", "message": "Fix Bitpay and CoinGecko altcoin rates\n\nCorrectly interpret the alt conversion rate reported by the API. For\nalts, Bisq needs the Alt/BTC rate, whereas the API returns the BTC/Alt\none. Calculate the inverse of the reported values before storing them as\n Bisq internal datastructures (ExchangeRates)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc24e5606b4ccfd71af0be2266b87f227196457", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4dc24e5606b4ccfd71af0be2266b87f227196457", "committedDate": "2020-08-05T21:17:18Z", "message": "Disable BitcoinAverage\n\nDisable BitcoinAverage provider. Keep it registered as a provider to\nensure that the data structure returned by the pricenode to the Bisq\nclients contain the hardcoded \"btcAverageTs\" key."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82bbb2dafacc761d836f9b9496743647895261be", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/82bbb2dafacc761d836f9b9496743647895261be", "committedDate": "2020-08-05T21:20:14Z", "message": "Upgrade Tor to v3\n\nUse tor v3 addresses during a new pricenode setup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/36dbb2e943b47216c7a520c145404878f65a68cf", "committedDate": "2020-08-05T21:26:03Z", "message": "Upgrade Java to v11\n\nUse Java 11 to run the pricenode service, since v11 includes by\ndefault some root certificates needed when establishing SSH connections\nto some of the new API endpoints."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7134f869daa2e9147dd428d904d945bc4143a08", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d7134f869daa2e9147dd428d904d945bc4143a08", "committedDate": "2020-08-04T19:49:27Z", "message": "Disable BitcoinAverage\n\nDisable BitcoinAverage provider. Keep it registered as a provider to\nensure that the data structure returned by the pricenode to the Bisq\nclients contain the hardcoded \"btcAverageTs\" key."}, "afterCommit": {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/36dbb2e943b47216c7a520c145404878f65a68cf", "committedDate": "2020-08-05T21:26:03Z", "message": "Upgrade Java to v11\n\nUse Java 11 to run the pricenode service, since v11 includes by\ndefault some root certificates needed when establishing SSH connections\nto some of the new API endpoints."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDgxODcx", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-462081871", "createdAt": "2020-08-05T23:05:50Z", "commit": {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowNTo1MFrOG8di3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowNTo1MFrOG8di3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MTgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sudo -H -i -u \"${ROOT_USER}\" apt-get install -y openjdk-11-jdk\n          \n          \n            \n            sudo -H -i -u \"${ROOT_USER}\" apt-get install -qq -y openjdk-11-jdk", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r466051804", "createdAt": "2020-08-05T23:05:50Z", "author": {"login": "wiz"}, "path": "pricenode/install_pricenode_debian.sh", "diffHunk": "@@ -60,8 +60,8 @@ echo \"[*] Cloning Bisq repo\"\n sudo -H -i -u \"${BISQ_USER}\" git config --global advice.detachedHead false\n sudo -H -i -u \"${BISQ_USER}\" git clone --branch \"${BISQ_REPO_TAG}\" \"${BISQ_REPO_URL}\" \"${BISQ_HOME}/${BISQ_REPO_NAME}\"\n \n-echo \"[*] Installing OpenJDK 10.0.2 from Bisq repo\"\n-sudo -H -i -u \"${ROOT_USER}\" \"${BISQ_HOME}/${BISQ_REPO_NAME}/scripts/install_java.sh\"\n+echo \"[*] Installing OpenJDK 11\"\n+sudo -H -i -u \"${ROOT_USER}\" apt-get install -y openjdk-11-jdk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/11076e773dccb95f39a08d4ae5e218a677ae91bc", "committedDate": "2020-08-06T08:26:13Z", "message": "Set quiet flag for java install command\r\n\r\nReduce verbosity of install command to only errors\n\nCo-authored-by: wiz <j@wiz.biz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDUyMDE4", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-463452018", "createdAt": "2020-08-07T16:38:43Z", "commit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzk1OTM4", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-463795938", "createdAt": "2020-08-08T10:58:50Z", "commit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo1ODo1MFrOG9zGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo1ODo1MFrOG9zGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MzQ2MA==", "bodyText": "New import, haven't seen any mention of this in the discussion. Anything new carries a risk, and perhaps more so when upgrading versions as the project in question already knows it's being used by bisq. In this case this is for price nodes so bisq wallets are not affected, lowering the risk.", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r467453460", "createdAt": "2020-08-08T10:58:50Z", "author": {"login": "sqrrm"}, "path": "build.gradle", "diffHunk": "@@ -57,7 +57,7 @@ configure(subprojects) {\n         junitVersion = '4.12'\n         jupiterVersion = '5.3.2'\n         kotlinVersion = '1.3.41'\n-        knowmXchangeVersion = '4.3.3'\n+        knowmXchangeVersion = '4.4.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb5c0bb5350d13d0550b98471a1d0b7da506b05", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9fb5c0bb5350d13d0550b98471a1d0b7da506b05", "committedDate": "2020-08-08T13:24:08Z", "message": "Remove unused imports\n\nRemoved unused imports from pricenode classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2703848c2f36bb3448c4ba8fc6d6ad00e66cc6", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0c2703848c2f36bb3448c4ba8fc6d6ad00e66cc6", "committedDate": "2020-08-08T14:05:15Z", "message": "Apply Codacy style changes\n\nApply various changes in coding style, required by the Codacy check."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "committedDate": "2020-08-08T15:12:39Z", "message": "Improve exception handling to match Codacy rules\n\nRewrite a few generic parts of the code to be more specific in what they\n handle, or how they handle the resulting data structure."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "233af83a6fce9ced4c15684a6508c0de78691afb", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/233af83a6fce9ced4c15684a6508c0de78691afb", "committedDate": "2020-08-08T14:55:36Z", "message": "Improve exception handling to match Codacy rules\n\nRewrite a few generic parts of the code to be more specific in what they\n handle, or how they handle the resulting data structure."}, "afterCommit": {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "author": {"user": {"login": "cd2357", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "committedDate": "2020-08-08T15:12:39Z", "message": "Improve exception handling to match Codacy rules\n\nRewrite a few generic parts of the code to be more specific in what they\n handle, or how they handle the resulting data structure."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODU1ODYy", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-467855862", "createdAt": "2020-08-14T20:26:12Z", "commit": {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODYyMTg1", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-467862185", "createdAt": "2020-08-14T20:39:22Z", "commit": {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NDE2NTY1", "url": "https://github.com/bisq-network/bisq/pull/4315#pullrequestreview-468416565", "createdAt": "2020-08-17T12:26:59Z", "commit": {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3220, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}