{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDkyMDM5", "number": 4329, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzo0NzowMFrOEIEnbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNjo0MVrOEIFQRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODk5NjkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/grpc/CoreApi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzo0NzowMFrOGn0E4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzo0NzowMFrOGn0E4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwMDg2Nw==", "bodyText": "It took me a minute to realise that the difference between these methods is that one of them takes primitives and the other takes higher level abstractions. I'm leaving this comment as an annotation for myself.", "url": "https://github.com/bisq-network/bisq/pull/4329#discussion_r444400867", "createdAt": "2020-06-23T17:47:00Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreApi.java", "diffHunk": "@@ -48,35 +44,95 @@\n  */\n @Slf4j\n public class CoreApi {\n+\n+    private final CoreOffersService coreOffersService;\n     private final CorePaymentAccountsService paymentAccountsService;\n     private final CoreWalletsService walletsService;\n-    private final OfferBookService offerBookService;\n     private final TradeStatisticsManager tradeStatisticsManager;\n-    private final CreateOfferService createOfferService;\n-    private final OpenOfferManager openOfferManager;\n-    private final User user;\n \n     @Inject\n-    public CoreApi(CorePaymentAccountsService paymentAccountsService,\n+    public CoreApi(CoreOffersService coreOffersService,\n+                   CorePaymentAccountsService paymentAccountsService,\n                    CoreWalletsService walletsService,\n-                   OfferBookService offerBookService,\n-                   TradeStatisticsManager tradeStatisticsManager,\n-                   CreateOfferService createOfferService,\n-                   OpenOfferManager openOfferManager,\n-                   User user) {\n+                   TradeStatisticsManager tradeStatisticsManager) {\n+        this.coreOffersService = coreOffersService;\n         this.paymentAccountsService = paymentAccountsService;\n         this.walletsService = walletsService;\n-        this.offerBookService = offerBookService;\n         this.tradeStatisticsManager = tradeStatisticsManager;\n-        this.createOfferService = createOfferService;\n-        this.openOfferManager = openOfferManager;\n-        this.user = user;\n     }\n \n     public String getVersion() {\n         return Version.VERSION;\n     }\n \n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Offers\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public List<Offer> getOffers(String direction, String fiatCurrencyCode) {\n+        return coreOffersService.getOffers(direction, fiatCurrencyCode);\n+    }\n+\n+    public void createOffer(String currencyCode,\n+                            String directionAsString,\n+                            long priceAsLong,\n+                            boolean useMarketBasedPrice,\n+                            double marketPriceMargin,\n+                            long amountAsLong,\n+                            long minAmountAsLong,\n+                            double buyerSecurityDeposit,\n+                            String paymentAccountId,\n+                            TransactionResultHandler resultHandler) {\n+        coreOffersService.createOffer(currencyCode,\n+                directionAsString,\n+                priceAsLong,\n+                useMarketBasedPrice,\n+                marketPriceMargin,\n+                amountAsLong,\n+                minAmountAsLong,\n+                buyerSecurityDeposit,\n+                paymentAccountId,\n+                resultHandler);\n+    }\n+\n+    public void createOffer(String offerId,\n+                            String currencyCode,\n+                            OfferPayload.Direction direction,\n+                            Price price,\n+                            boolean useMarketBasedPrice,\n+                            double marketPriceMargin,\n+                            Coin amount,\n+                            Coin minAmount,\n+                            double buyerSecurityDeposit,\n+                            PaymentAccount paymentAccount,\n+                            boolean useSavingsWallet,\n+                            TransactionResultHandler resultHandler) {\n+        coreOffersService.createOffer(offerId,\n+                currencyCode,\n+                direction,\n+                price,\n+                useMarketBasedPrice,\n+                marketPriceMargin,\n+                amount,\n+                minAmount,\n+                buyerSecurityDeposit,\n+                paymentAccount,\n+                useSavingsWallet,\n+                resultHandler);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fddfacf8867ed139f0e594f2fb4adafe27e8c4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTA3NDQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODowODo1MVrOGn01-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxOToyMlrOGn5E9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMzQzNQ==", "bodyText": "Would like to see these predicates moved into descriptive intermediate variables for the sake of readability.\no -> {\n  var offerOfWantedDirection = !o.getDirection().name().equalsIgnoreCase(direction);\n  var offerInWantedCurrency = o.getOfferPayload().getCounterCurrencyCode().equalsIgnoreCase(fiatCurrencyCode);\n  return offerOfWantedDirection && offerInWantedCurrency;\n}", "url": "https://github.com/bisq-network/bisq/pull/4329#discussion_r444413435", "createdAt": "2020-06-23T18:08:51Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.grpc;\n+\n+import bisq.core.monetary.Price;\n+import bisq.core.offer.CreateOfferService;\n+import bisq.core.offer.Offer;\n+import bisq.core.offer.OfferBookService;\n+import bisq.core.offer.OfferPayload;\n+import bisq.core.offer.OpenOfferManager;\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.trade.handlers.TransactionResultHandler;\n+import bisq.core.user.User;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.core.offer.OfferPayload.Direction.BUY;\n+\n+@Slf4j\n+public class CoreOffersService {\n+\n+    private final CreateOfferService createOfferService;\n+    private final OfferBookService offerBookService;\n+    private final OpenOfferManager openOfferManager;\n+    private final User user;\n+\n+    @Inject\n+    public CoreOffersService(CreateOfferService createOfferService,\n+                             OfferBookService offerBookService,\n+                             OpenOfferManager openOfferManager,\n+                             User user) {\n+        this.createOfferService = createOfferService;\n+        this.offerBookService = offerBookService;\n+        this.openOfferManager = openOfferManager;\n+        this.user = user;\n+    }\n+\n+    public List<Offer> getOffers(String direction, String fiatCurrencyCode) {\n+        List<Offer> offers = offerBookService.getOffers().stream()\n+                .filter(o -> !o.getDirection().name().equalsIgnoreCase(direction)\n+                        && o.getOfferPayload().getCounterCurrencyCode().equalsIgnoreCase(fiatCurrencyCode))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fddfacf8867ed139f0e594f2fb4adafe27e8c4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MjgwNQ==", "bodyText": "Requested change is in commit 51d82b1.", "url": "https://github.com/bisq-network/bisq/pull/4329#discussion_r444482805", "createdAt": "2020-06-23T20:19:22Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.grpc;\n+\n+import bisq.core.monetary.Price;\n+import bisq.core.offer.CreateOfferService;\n+import bisq.core.offer.Offer;\n+import bisq.core.offer.OfferBookService;\n+import bisq.core.offer.OfferPayload;\n+import bisq.core.offer.OpenOfferManager;\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.trade.handlers.TransactionResultHandler;\n+import bisq.core.user.User;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.core.offer.OfferPayload.Direction.BUY;\n+\n+@Slf4j\n+public class CoreOffersService {\n+\n+    private final CreateOfferService createOfferService;\n+    private final OfferBookService offerBookService;\n+    private final OpenOfferManager openOfferManager;\n+    private final User user;\n+\n+    @Inject\n+    public CoreOffersService(CreateOfferService createOfferService,\n+                             OfferBookService offerBookService,\n+                             OpenOfferManager openOfferManager,\n+                             User user) {\n+        this.createOfferService = createOfferService;\n+        this.offerBookService = offerBookService;\n+        this.openOfferManager = openOfferManager;\n+        this.user = user;\n+    }\n+\n+    public List<Offer> getOffers(String direction, String fiatCurrencyCode) {\n+        List<Offer> offers = offerBookService.getOffers().stream()\n+                .filter(o -> !o.getDirection().name().equalsIgnoreCase(direction)\n+                        && o.getOfferPayload().getCounterCurrencyCode().equalsIgnoreCase(fiatCurrencyCode))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMzQzNQ=="}, "originalCommit": {"oid": "e1fddfacf8867ed139f0e594f2fb4adafe27e8c4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTEwMTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNjo0MVrOGn1GxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxOToyN1rOGn5FIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNzczMg==", "bodyText": "There is an inconsistency here. If we call with direction = sell, this will return offers with direction = buy. Not yet sure how to fix it.", "url": "https://github.com/bisq-network/bisq/pull/4329#discussion_r444417732", "createdAt": "2020-06-23T18:16:41Z", "author": {"login": "dmos62"}, "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.grpc;\n+\n+import bisq.core.monetary.Price;\n+import bisq.core.offer.CreateOfferService;\n+import bisq.core.offer.Offer;\n+import bisq.core.offer.OfferBookService;\n+import bisq.core.offer.OfferPayload;\n+import bisq.core.offer.OpenOfferManager;\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.trade.handlers.TransactionResultHandler;\n+import bisq.core.user.User;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.core.offer.OfferPayload.Direction.BUY;\n+\n+@Slf4j\n+public class CoreOffersService {\n+\n+    private final CreateOfferService createOfferService;\n+    private final OfferBookService offerBookService;\n+    private final OpenOfferManager openOfferManager;\n+    private final User user;\n+\n+    @Inject\n+    public CoreOffersService(CreateOfferService createOfferService,\n+                             OfferBookService offerBookService,\n+                             OpenOfferManager openOfferManager,\n+                             User user) {\n+        this.createOfferService = createOfferService;\n+        this.offerBookService = offerBookService;\n+        this.openOfferManager = openOfferManager;\n+        this.user = user;\n+    }\n+\n+    public List<Offer> getOffers(String direction, String fiatCurrencyCode) {\n+        List<Offer> offers = offerBookService.getOffers().stream()\n+                .filter(o -> !o.getDirection().name().equalsIgnoreCase(direction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fddfacf8867ed139f0e594f2fb4adafe27e8c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg0OA==", "bodyText": "Requested change is in commit 51d82b1.", "url": "https://github.com/bisq-network/bisq/pull/4329#discussion_r444482848", "createdAt": "2020-06-23T20:19:27Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/grpc/CoreOffersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.grpc;\n+\n+import bisq.core.monetary.Price;\n+import bisq.core.offer.CreateOfferService;\n+import bisq.core.offer.Offer;\n+import bisq.core.offer.OfferBookService;\n+import bisq.core.offer.OfferPayload;\n+import bisq.core.offer.OpenOfferManager;\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.trade.handlers.TransactionResultHandler;\n+import bisq.core.user.User;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.core.offer.OfferPayload.Direction.BUY;\n+\n+@Slf4j\n+public class CoreOffersService {\n+\n+    private final CreateOfferService createOfferService;\n+    private final OfferBookService offerBookService;\n+    private final OpenOfferManager openOfferManager;\n+    private final User user;\n+\n+    @Inject\n+    public CoreOffersService(CreateOfferService createOfferService,\n+                             OfferBookService offerBookService,\n+                             OpenOfferManager openOfferManager,\n+                             User user) {\n+        this.createOfferService = createOfferService;\n+        this.offerBookService = offerBookService;\n+        this.openOfferManager = openOfferManager;\n+        this.user = user;\n+    }\n+\n+    public List<Offer> getOffers(String direction, String fiatCurrencyCode) {\n+        List<Offer> offers = offerBookService.getOffers().stream()\n+                .filter(o -> !o.getDirection().name().equalsIgnoreCase(direction)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNzczMg=="}, "originalCommit": {"oid": "e1fddfacf8867ed139f0e594f2fb4adafe27e8c4"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2479, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}