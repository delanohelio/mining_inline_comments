{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODI2MjMw", "number": 4097, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMDo0NVrODsjt5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyOToyOVrODskJWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDQ5MTI0OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMDo0NVrOF9eL0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMDo0NVrOF9eL0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final OptionParser cmdParser;\n          \n          \n            \n                private final OptionParser parser;", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400002003", "createdAt": "2020-03-30T08:10:45Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUwNzU1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNDo0OVrOF9eVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjozMToxOVrOF-Tb0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new BisqCliMain(\"localhost\", 8888, args);\n          \n          \n            \n                    new BisqCliMain(\"localhost\", 9998, args);\n          \n      \n    \n    \n  \n\n8888 is a poor number as it's frequently used by other services. 9998 fits with bisq's p2p port of 9999 and follows suit with bitcoind's 8333 p2p port and 8332 rpc port. I realize you did not introduce this change and that it's somewhat out of scope for this PR, but please make it anyway.\n@freimair, please note that the choice of 9998 here overlaps with the same port used in monitor/src/main/java/bisq/monitor/metric/TorHiddenServiceStartupTime.java. Please consider changing that to something else if you see it being a conflict.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400004430", "createdAt": "2020-03-30T08:14:49Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1MzIyNQ==", "bodyText": "BisqGrpcServer now listens on port 9998.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400253225", "createdAt": "2020-03-30T14:49:56Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDQzMA=="}, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MDE3MQ==", "bodyText": "A reminder to @freimair, re TorHiddenServiceStartupTime\nint localPort = Integer.parseInt(configuration.getProperty(LOCAL_PORT, \"9998\"));\nint servicePort = Integer.parseInt(configuration.getProperty(SERVICE_PORT, \"9999\"));\n\nnow conflicts with the BisqGrpcServer listening port 9998 in this remove-read-stdin-loop branch (not merged).   I am sure I should not be changing server + listening ports in TorHiddenServiceStartupTime.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400260171", "createdAt": "2020-03-30T14:58:41Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDQzMA=="}, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3NDQ1MQ==", "bodyText": "I do not think so. the monitor is quite separate from everything else, plus, this is a default fallback value - it can and should be configured via the monitors properties file.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400874451", "createdAt": "2020-03-31T12:31:19Z", "author": {"login": "freimair"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDQzMA=="}, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUwOTUwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNToxOFrOF9eWeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNToxOFrOF9eWeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private BisqCliMain(String host, int port, String[] params) {\n          \n          \n            \n                private BisqCliMain(String host, int port, String[] args) {\n          \n      \n    \n    \n  \n\nFor consistency and conventionality.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400004729", "createdAt": "2020-03-30T08:15:18Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);\n     }\n \n-    private BisqCliMain(String host, int port) {\n+    private BisqCliMain(String host, int port, String[] params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUxMjQ4OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNjowMVrOF9eYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNjowMVrOF9eYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNTE4NA==", "bodyText": "Please remove this.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400005184", "createdAt": "2020-03-30T08:16:01Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);\n     }\n \n-    private BisqCliMain(String host, int port) {\n+    private BisqCliMain(String host, int port, String[] params) {\n         // Channels are secure by default (via SSL/TLS);  for the example disable TLS to avoid needing certificates.\n         this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n \n-        // Simple input scanner\n-        // TODO use some more sophisticated input processing with validation....\n-        try (Scanner scanner = new Scanner(in)) {\n-            while (true) {\n-                long startTs = currentTimeMillis();\n-\n-                String[] tokens = scanner.nextLine().split(\" \");\n-                if (tokens.length == 0) {\n-                    return;\n-                }\n-                String command = tokens[0];\n-                if (tokens.length > 1) {\n-                    List<String> params = new ArrayList<>(Arrays.asList(tokens));\n-                    params.remove(0);\n-                }\n-                String result;\n-\n-                switch (command) {\n-                    case \"getBalance\":\n-                        long satoshis = cmd.getBalance();\n-                        // TODO mimic bitcoin-cli?  Depends on an error code: Loading block index... Verifying blocks...\n-                        result = satoshis == -1 ? \"Server initializing...\" : cmd.prettyBalance.apply(satoshis);\n-                        break;\n-                    case \"getVersion\":\n-                        result = cmd.getVersion();\n-                        break;\n-                    case \"stop\":\n-                        result = \"Shut down client\";\n-                        try {\n-                            shutdown();\n-                        } catch (InterruptedException e) {\n-                            log.error(e.toString(), e);\n-                        }\n-                        break;\n-                    case \"stopServer\":\n-                        cmd.stopServer();\n-                        result = \"Server stopped\";\n-                        break;\n-                    default:\n-                        result = format(\"Unknown command '%s'\", command);\n-                }\n-\n-                // First response is rather slow (300 ms) but following responses are fast (3-5 ms).\n-                log.info(\"{}\\t{}\", result, cmd.responseTime.apply(startTs));\n-            }\n+        long startTs = currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUxNzU3OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNzozMlrOF9eblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNzozMlrOF9eblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNjAzNg==", "bodyText": "And this as well. There is no requirement at present to measure the response time, and output from a unix utility should not include anything other than the data requested, i.e. such that it can be piped to the next utility. This sort of output breaks that unix idiom. Again, I realize you did not introduce this. I'm just asking you to remove it and start thinking about things this way, making similar decisions as you go.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400006036", "createdAt": "2020-03-30T08:17:32Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/BisqCliMain.java", "diffHunk": "@@ -41,60 +45,28 @@\n \n     private final ManagedChannel channel;\n     private final CliCommand cmd;\n+    private final OptionParser cmdParser;\n \n     public static void main(String[] args) {\n-        new BisqCliMain(\"localhost\", 8888);\n+        new BisqCliMain(\"localhost\", 8888, args);\n     }\n \n-    private BisqCliMain(String host, int port) {\n+    private BisqCliMain(String host, int port, String[] params) {\n         // Channels are secure by default (via SSL/TLS);  for the example disable TLS to avoid needing certificates.\n         this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n \n-        // Simple input scanner\n-        // TODO use some more sophisticated input processing with validation....\n-        try (Scanner scanner = new Scanner(in)) {\n-            while (true) {\n-                long startTs = currentTimeMillis();\n-\n-                String[] tokens = scanner.nextLine().split(\" \");\n-                if (tokens.length == 0) {\n-                    return;\n-                }\n-                String command = tokens[0];\n-                if (tokens.length > 1) {\n-                    List<String> params = new ArrayList<>(Arrays.asList(tokens));\n-                    params.remove(0);\n-                }\n-                String result;\n-\n-                switch (command) {\n-                    case \"getBalance\":\n-                        long satoshis = cmd.getBalance();\n-                        // TODO mimic bitcoin-cli?  Depends on an error code: Loading block index... Verifying blocks...\n-                        result = satoshis == -1 ? \"Server initializing...\" : cmd.prettyBalance.apply(satoshis);\n-                        break;\n-                    case \"getVersion\":\n-                        result = cmd.getVersion();\n-                        break;\n-                    case \"stop\":\n-                        result = \"Shut down client\";\n-                        try {\n-                            shutdown();\n-                        } catch (InterruptedException e) {\n-                            log.error(e.toString(), e);\n-                        }\n-                        break;\n-                    case \"stopServer\":\n-                        cmd.stopServer();\n-                        result = \"Server stopped\";\n-                        break;\n-                    default:\n-                        result = format(\"Unknown command '%s'\", command);\n-                }\n-\n-                // First response is rather slow (300 ms) but following responses are fast (3-5 ms).\n-                log.info(\"{}\\t{}\", result, cmd.responseTime.apply(startTs));\n-            }\n+        long startTs = currentTimeMillis();\n+\n+        String command = parseCommand(params);\n+        String result = runCommand(command);\n+\n+        // First response is rather slow (300 ms) but following responses are fast (3-5 ms).\n+        // log.info(\"{}\\t{}\", result, cmd.responseTime.apply(startTs));\n+        out.println(result + \"\\t\" + cmd.responseTime.apply(startTs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU2MTUzOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/app/CommandParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyOToyOVrOF9e2yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyMjoyOVrOF90N4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzAwMQ==", "bodyText": "Please study the way help output is printed in BisqExecutable#execute and note the use of BisqHelpFormatter which we may want to reuse (we would need to move it in order to do so, don't worry about it now, just use the default help formatter implementation in the meantime).\nIn any case, when help is explicitly requested, it shouldn't be printed to stderr, but stdout.\nPlease also explicitly System.exit 0 or 1 accordingly. You'll see how this is done in BisqExecutable as well.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400013001", "createdAt": "2020-03-30T08:29:29Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/CommandParser.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package bisq.cli.app;\n+\n+import joptsimple.OptionParser;\n+\n+import static java.lang.System.err;\n+\n+final class CommandParser {\n+\n+    // Option name constants\n+    static final String HELP = \"help\";\n+    static final String GETBALANCE = \"getbalance\";\n+    static final String GETVERSION = \"getversion\";\n+    static final String STOPSERVER = \"stopserver\";\n+\n+    OptionParser configure() {\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+        parser.nonOptions(GETBALANCE).ofType(String.class).describedAs(\"get btc balance\");\n+        parser.nonOptions(GETVERSION).ofType(String.class).describedAs(\"get bisq version\");\n+        return parser;\n+    }\n+\n+    static void printUsage() {\n+        err.println(\"Usage:  bisq-cli getbalance | getversion\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU5Ng==", "bodyText": "Prints usage message to stdout, and uses EXIT_SUCCESS and EXIT_FAILURE arguments in System.exit().\nWhat's not done:  help formatting.  I need to discuss Bisq + joptsimple.HelpFormatter issues with @cbeams.  Right now, the only options passed to Cli are of type NonOptionArgumentSpec, which did not work as expected with joptsimple.HelpFormatter.  It looks like Bisq Config only uses ArgumentAcceptingOptionSpec options, which do work with joptsimple.HelpFormatter.  It did not seem correct to change non-option cli arguments to argument accepting options just to make them work with the joptsimple.HelpFormatter interface, which is why I checked in the simple 'print usage' print statement.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400246596", "createdAt": "2020-03-30T14:41:40Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/app/CommandParser.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package bisq.cli.app;\n+\n+import joptsimple.OptionParser;\n+\n+import static java.lang.System.err;\n+\n+final class CommandParser {\n+\n+    // Option name constants\n+    static final String HELP = \"help\";\n+    static final String GETBALANCE = \"getbalance\";\n+    static final String GETVERSION = \"getversion\";\n+    static final String STOPSERVER = \"stopserver\";\n+\n+    OptionParser configure() {\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+        parser.nonOptions(GETBALANCE).ofType(String.class).describedAs(\"get btc balance\");\n+        parser.nonOptions(GETVERSION).ofType(String.class).describedAs(\"get bisq version\");\n+        return parser;\n+    }\n+\n+    static void printUsage() {\n+        err.println(\"Usage:  bisq-cli getbalance | getversion\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzAwMQ=="}, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Mjk3Nw==", "bodyText": "Ok, that's fine then. We can come back to it later, thanks.", "url": "https://github.com/bisq-network/bisq/pull/4097#discussion_r400362977", "createdAt": "2020-03-30T17:22:29Z", "author": {"login": "cbeams"}, "path": "cli/src/main/java/bisq/cli/app/CommandParser.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package bisq.cli.app;\n+\n+import joptsimple.OptionParser;\n+\n+import static java.lang.System.err;\n+\n+final class CommandParser {\n+\n+    // Option name constants\n+    static final String HELP = \"help\";\n+    static final String GETBALANCE = \"getbalance\";\n+    static final String GETVERSION = \"getversion\";\n+    static final String STOPSERVER = \"stopserver\";\n+\n+    OptionParser configure() {\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+        parser.nonOptions(GETBALANCE).ofType(String.class).describedAs(\"get btc balance\");\n+        parser.nonOptions(GETVERSION).ofType(String.class).describedAs(\"get bisq version\");\n+        return parser;\n+    }\n+\n+    static void printUsage() {\n+        err.println(\"Usage:  bisq-cli getbalance | getversion\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMzAwMQ=="}, "originalCommit": {"oid": "94ee49c5afdc0262dc888e58b4fcf572975307cd"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}