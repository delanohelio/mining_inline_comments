{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMDYxNDMy", "number": 4889, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo0ODowMlrOFAggKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NDoxMVrOFAgu0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDc2ODQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo0ODowMlrOH-2HsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowMjowNVrOH-5IVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2MDQ2NQ==", "bodyText": "Could this be abused by sending a bad request, causing offers to be removed but guaranteed failed trade?", "url": "https://github.com/bisq-network/bisq/pull/4889#discussion_r535660465", "createdAt": "2020-12-03T21:48:02Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -100,8 +100,8 @@ protected void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer)\n                 .with(message)\n                 .from(peer))\n                 .setup(tasks(\n-                        BuyerProcessDelayedPayoutTxSignatureRequest.class,\n                         MakerRemovesOpenOffer.class,\n+                        BuyerProcessDelayedPayoutTxSignatureRequest.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5fc33ba48e48add4db494558511703785d5d3a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5Njc4OQ==", "bodyText": "Was thinking the same, but a taker could do it anyway at any point later as well. We could add some feature to restore offers which got closed from a trade failure by cloning  the offer and change the id. So that would render such an attack as ineffective.", "url": "https://github.com/bisq-network/bisq/pull/4889#discussion_r535696789", "createdAt": "2020-12-03T22:41:34Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -100,8 +100,8 @@ protected void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer)\n                 .with(message)\n                 .from(peer))\n                 .setup(tasks(\n-                        BuyerProcessDelayedPayoutTxSignatureRequest.class,\n                         MakerRemovesOpenOffer.class,\n+                        BuyerProcessDelayedPayoutTxSignatureRequest.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2MDQ2NQ=="}, "originalCommit": {"oid": "2d5fc33ba48e48add4db494558511703785d5d3a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwOTc4Mw==", "bodyText": "Yeah, it's an area that needs some more thought and this is not the real issue.", "url": "https://github.com/bisq-network/bisq/pull/4889#discussion_r535709783", "createdAt": "2020-12-03T23:02:05Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/protocol/BuyerAsMakerProtocol.java", "diffHunk": "@@ -100,8 +100,8 @@ protected void handle(DelayedPayoutTxSignatureRequest message, NodeAddress peer)\n                 .with(message)\n                 .from(peer))\n                 .setup(tasks(\n-                        BuyerProcessDelayedPayoutTxSignatureRequest.class,\n                         MakerRemovesOpenOffer.class,\n+                        BuyerProcessDelayedPayoutTxSignatureRequest.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2MDQ2NQ=="}, "originalCommit": {"oid": "2d5fc33ba48e48add4db494558511703785d5d3a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgwNTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NDoxMVrOH-2gZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo0MDowN1rOH-4SVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2Njc5MA==", "bodyText": "How would this happen? Collision of randomUUID?", "url": "https://github.com/bisq-network/bisq/pull/4889#discussion_r535666790", "createdAt": "2020-12-03T21:54:11Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "diffHunk": "@@ -269,10 +271,15 @@ private void handleTakeOfferRequest(NodeAddress peer, InputsForDepositTxRequest\n                     openOffer.getMediatorNodeAddress(),\n                     openOffer.getRefundAgentNodeAddress(),\n                     btcWalletService,\n-                    getNewProcessModel(offer));\n+                    getNewProcessModel(offer),\n+                    UUID.randomUUID().toString());\n         }\n         TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);\n-        tradeProtocolByTradeId.put(trade.getId(), tradeProtocol);\n+        TradeProtocol prev = tradeProtocolByTradeId.put(trade.getUid(), tradeProtocol);\n+        if (prev != null) {\n+            log.error(\"We had already an entry with uid {}\", trade.getUid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99ca0b6355405eb83d54ea604b4edf61013975"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5NTk1OA==", "bodyText": "If for some reason the same trade is entering those methods. Should not be possible but prefer to keep the log to detect it if there is still some bug.", "url": "https://github.com/bisq-network/bisq/pull/4889#discussion_r535695958", "createdAt": "2020-12-03T22:40:07Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/TradeManager.java", "diffHunk": "@@ -269,10 +271,15 @@ private void handleTakeOfferRequest(NodeAddress peer, InputsForDepositTxRequest\n                     openOffer.getMediatorNodeAddress(),\n                     openOffer.getRefundAgentNodeAddress(),\n                     btcWalletService,\n-                    getNewProcessModel(offer));\n+                    getNewProcessModel(offer),\n+                    UUID.randomUUID().toString());\n         }\n         TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);\n-        tradeProtocolByTradeId.put(trade.getId(), tradeProtocol);\n+        TradeProtocol prev = tradeProtocolByTradeId.put(trade.getUid(), tradeProtocol);\n+        if (prev != null) {\n+            log.error(\"We had already an entry with uid {}\", trade.getUid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2Njc5MA=="}, "originalCommit": {"oid": "8f99ca0b6355405eb83d54ea604b4edf61013975"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2642, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}