{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjAzNzI1", "number": 4592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo0NzoxOFrOEqTUHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0NTozMlrOEqWfzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzkyMDk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo0NzoxOFrOHcba1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozODozN1rOHcs8ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MTQxMw==", "bodyText": "Why is this check excluding allDomainServicesInitialized? I couldn't figure the use for this walletAndNetworkReady and it seems to be not used. Is there a plan for future usage or could it be removed?", "url": "https://github.com/bisq-network/bisq/pull/4592#discussion_r499571413", "createdAt": "2020-10-05T12:47:18Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.app;\n+\n+import bisq.core.btc.setup.WalletsSetup;\n+\n+import bisq.network.p2p.BootstrapListener;\n+import bisq.network.p2p.P2PService;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.fxmisc.easybind.EasyBind;\n+import org.fxmisc.easybind.monadic.MonadicBinding;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * We often need to wait until network and wallet is ready or other combination of startup states.\n+ * To avoid those repeated checks for the state or setting of listeners on different domains we provide here a\n+ * collection of useful states.\n+ */\n+@Slf4j\n+@Singleton\n+public class AppStartupState {\n+    // Do not convert to local field as there have been issues observed that the object got GC'ed.\n+    private final MonadicBinding<Boolean> p2pNetworkAndWalletInitialized;\n+\n+    private final BooleanProperty walletAndNetworkReady = new SimpleBooleanProperty();\n+    private final BooleanProperty allDomainServicesInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty applicationFullyInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty updatedDataReceived = new SimpleBooleanProperty();\n+    private final BooleanProperty isBlockDownloadComplete = new SimpleBooleanProperty();\n+    private final BooleanProperty hasSufficientPeersForBroadcast = new SimpleBooleanProperty();\n+\n+    @Inject\n+    public AppStartupState(WalletsSetup walletsSetup, P2PService p2PService) {\n+\n+        p2PService.addP2PServiceListener(new BootstrapListener() {\n+            @Override\n+            public void onUpdatedDataReceived() {\n+                updatedDataReceived.set(true);\n+            }\n+        });\n+\n+        walletsSetup.downloadPercentageProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.isDownloadComplete())\n+                isBlockDownloadComplete.set(true);\n+        });\n+\n+        walletsSetup.numPeersProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.hasSufficientPeersForBroadcast())\n+                hasSufficientPeersForBroadcast.set(true);\n+        });\n+\n+        p2pNetworkAndWalletInitialized = EasyBind.combine(updatedDataReceived,\n+                isBlockDownloadComplete,\n+                hasSufficientPeersForBroadcast,\n+                allDomainServicesInitialized,\n+                (a, b, c, d) -> {\n+                    if (a && b && c) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474c4138d2d9e3f05d522a7dffdf100b216d043a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1ODUzMw==", "bodyText": "So far not but in future PRs it will be used. The allDomainServicesInitialized might disappear over time or only be used were we need a ordered initialisation, but I think that need to be delegated to the domain where it is used as we did with DaoStartup class. The listeners dont know about the order, but most domains should be independent anyway, and if not it is a sign that there is a parent domain which need to do the initialisation of its children. Of if not there that we miss such a parent daomain.", "url": "https://github.com/bisq-network/bisq/pull/4592#discussion_r499858533", "createdAt": "2020-10-05T20:38:37Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.app;\n+\n+import bisq.core.btc.setup.WalletsSetup;\n+\n+import bisq.network.p2p.BootstrapListener;\n+import bisq.network.p2p.P2PService;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.fxmisc.easybind.EasyBind;\n+import org.fxmisc.easybind.monadic.MonadicBinding;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * We often need to wait until network and wallet is ready or other combination of startup states.\n+ * To avoid those repeated checks for the state or setting of listeners on different domains we provide here a\n+ * collection of useful states.\n+ */\n+@Slf4j\n+@Singleton\n+public class AppStartupState {\n+    // Do not convert to local field as there have been issues observed that the object got GC'ed.\n+    private final MonadicBinding<Boolean> p2pNetworkAndWalletInitialized;\n+\n+    private final BooleanProperty walletAndNetworkReady = new SimpleBooleanProperty();\n+    private final BooleanProperty allDomainServicesInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty applicationFullyInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty updatedDataReceived = new SimpleBooleanProperty();\n+    private final BooleanProperty isBlockDownloadComplete = new SimpleBooleanProperty();\n+    private final BooleanProperty hasSufficientPeersForBroadcast = new SimpleBooleanProperty();\n+\n+    @Inject\n+    public AppStartupState(WalletsSetup walletsSetup, P2PService p2PService) {\n+\n+        p2PService.addP2PServiceListener(new BootstrapListener() {\n+            @Override\n+            public void onUpdatedDataReceived() {\n+                updatedDataReceived.set(true);\n+            }\n+        });\n+\n+        walletsSetup.downloadPercentageProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.isDownloadComplete())\n+                isBlockDownloadComplete.set(true);\n+        });\n+\n+        walletsSetup.numPeersProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.hasSufficientPeersForBroadcast())\n+                hasSufficientPeersForBroadcast.set(true);\n+        });\n+\n+        p2pNetworkAndWalletInitialized = EasyBind.combine(updatedDataReceived,\n+                isBlockDownloadComplete,\n+                hasSufficientPeersForBroadcast,\n+                allDomainServicesInitialized,\n+                (a, b, c, d) -> {\n+                    if (a && b && c) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MTQxMw=="}, "originalCommit": {"oid": "474c4138d2d9e3f05d522a7dffdf100b216d043a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODQ0MjM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0NTozMlrOHcgcjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo0MDoyMVrOHcs_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1Mzc3NQ==", "bodyText": "These look unused. Am I missing something,", "url": "https://github.com/bisq-network/bisq/pull/4592#discussion_r499653775", "createdAt": "2020-10-05T14:45:32Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.app;\n+\n+import bisq.core.btc.setup.WalletsSetup;\n+\n+import bisq.network.p2p.BootstrapListener;\n+import bisq.network.p2p.P2PService;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.fxmisc.easybind.EasyBind;\n+import org.fxmisc.easybind.monadic.MonadicBinding;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * We often need to wait until network and wallet is ready or other combination of startup states.\n+ * To avoid those repeated checks for the state or setting of listeners on different domains we provide here a\n+ * collection of useful states.\n+ */\n+@Slf4j\n+@Singleton\n+public class AppStartupState {\n+    // Do not convert to local field as there have been issues observed that the object got GC'ed.\n+    private final MonadicBinding<Boolean> p2pNetworkAndWalletInitialized;\n+\n+    private final BooleanProperty walletAndNetworkReady = new SimpleBooleanProperty();\n+    private final BooleanProperty allDomainServicesInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty applicationFullyInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty updatedDataReceived = new SimpleBooleanProperty();\n+    private final BooleanProperty isBlockDownloadComplete = new SimpleBooleanProperty();\n+    private final BooleanProperty hasSufficientPeersForBroadcast = new SimpleBooleanProperty();\n+\n+    @Inject\n+    public AppStartupState(WalletsSetup walletsSetup, P2PService p2PService) {\n+\n+        p2PService.addP2PServiceListener(new BootstrapListener() {\n+            @Override\n+            public void onUpdatedDataReceived() {\n+                updatedDataReceived.set(true);\n+            }\n+        });\n+\n+        walletsSetup.downloadPercentageProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.isDownloadComplete())\n+                isBlockDownloadComplete.set(true);\n+        });\n+\n+        walletsSetup.numPeersProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.hasSufficientPeersForBroadcast())\n+                hasSufficientPeersForBroadcast.set(true);\n+        });\n+\n+        p2pNetworkAndWalletInitialized = EasyBind.combine(updatedDataReceived,\n+                isBlockDownloadComplete,\n+                hasSufficientPeersForBroadcast,\n+                allDomainServicesInitialized,\n+                (a, b, c, d) -> {\n+                    if (a && b && c) {\n+                        walletAndNetworkReady.set(true);\n+                    }\n+                    return a && b && c && d;\n+                });\n+        p2pNetworkAndWalletInitialized.subscribe((observable, oldValue, newValue) -> {\n+            if (newValue) {\n+                applicationFullyInitialized.set(true);\n+            }\n+        });\n+    }\n+\n+    public void onDomainServicesInitialized() {\n+        allDomainServicesInitialized.set(true);\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Getters\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public boolean isWalletAndNetworkReady() {\n+        return walletAndNetworkReady.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty walletAndNetworkReadyProperty() {\n+        return walletAndNetworkReady;\n+    }\n+\n+    public boolean isAllDomainServicesInitialized() {\n+        return allDomainServicesInitialized.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty allDomainServicesInitializedProperty() {\n+        return allDomainServicesInitialized;\n+    }\n+\n+    public boolean isApplicationFullyInitialized() {\n+        return applicationFullyInitialized.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty applicationFullyInitializedProperty() {\n+        return applicationFullyInitialized;\n+    }\n+\n+    public boolean isUpdatedDataReceived() {\n+        return updatedDataReceived.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty updatedDataReceivedProperty() {\n+        return updatedDataReceived;\n+    }\n+\n+    public boolean isIsBlockDownloadComplete() {\n+        return isBlockDownloadComplete.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty isBlockDownloadCompleteProperty() {\n+        return isBlockDownloadComplete;\n+    }\n+\n+    public boolean isHasSufficientPeersForBroadcast() {\n+        return hasSufficientPeersForBroadcast.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty hasSufficientPeersForBroadcastProperty() {\n+        return hasSufficientPeersForBroadcast;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474c4138d2d9e3f05d522a7dffdf100b216d043a"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1OTM5NQ==", "bodyText": "Yes, they are there for future usage. Some might not be needed, once we have refactored it completely we might remove some, but better to have it in place now so we can start migrating.\nAt the checks for when to start a domain specific init is duplicated in many places and often not correct. This PR should start to refactor those cases and avoid those issues.", "url": "https://github.com/bisq-network/bisq/pull/4592#discussion_r499859395", "createdAt": "2020-10-05T20:40:21Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/app/AppStartupState.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.app;\n+\n+import bisq.core.btc.setup.WalletsSetup;\n+\n+import bisq.network.p2p.BootstrapListener;\n+import bisq.network.p2p.P2PService;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.fxmisc.easybind.EasyBind;\n+import org.fxmisc.easybind.monadic.MonadicBinding;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * We often need to wait until network and wallet is ready or other combination of startup states.\n+ * To avoid those repeated checks for the state or setting of listeners on different domains we provide here a\n+ * collection of useful states.\n+ */\n+@Slf4j\n+@Singleton\n+public class AppStartupState {\n+    // Do not convert to local field as there have been issues observed that the object got GC'ed.\n+    private final MonadicBinding<Boolean> p2pNetworkAndWalletInitialized;\n+\n+    private final BooleanProperty walletAndNetworkReady = new SimpleBooleanProperty();\n+    private final BooleanProperty allDomainServicesInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty applicationFullyInitialized = new SimpleBooleanProperty();\n+    private final BooleanProperty updatedDataReceived = new SimpleBooleanProperty();\n+    private final BooleanProperty isBlockDownloadComplete = new SimpleBooleanProperty();\n+    private final BooleanProperty hasSufficientPeersForBroadcast = new SimpleBooleanProperty();\n+\n+    @Inject\n+    public AppStartupState(WalletsSetup walletsSetup, P2PService p2PService) {\n+\n+        p2PService.addP2PServiceListener(new BootstrapListener() {\n+            @Override\n+            public void onUpdatedDataReceived() {\n+                updatedDataReceived.set(true);\n+            }\n+        });\n+\n+        walletsSetup.downloadPercentageProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.isDownloadComplete())\n+                isBlockDownloadComplete.set(true);\n+        });\n+\n+        walletsSetup.numPeersProperty().addListener((observable, oldValue, newValue) -> {\n+            if (walletsSetup.hasSufficientPeersForBroadcast())\n+                hasSufficientPeersForBroadcast.set(true);\n+        });\n+\n+        p2pNetworkAndWalletInitialized = EasyBind.combine(updatedDataReceived,\n+                isBlockDownloadComplete,\n+                hasSufficientPeersForBroadcast,\n+                allDomainServicesInitialized,\n+                (a, b, c, d) -> {\n+                    if (a && b && c) {\n+                        walletAndNetworkReady.set(true);\n+                    }\n+                    return a && b && c && d;\n+                });\n+        p2pNetworkAndWalletInitialized.subscribe((observable, oldValue, newValue) -> {\n+            if (newValue) {\n+                applicationFullyInitialized.set(true);\n+            }\n+        });\n+    }\n+\n+    public void onDomainServicesInitialized() {\n+        allDomainServicesInitialized.set(true);\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Getters\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public boolean isWalletAndNetworkReady() {\n+        return walletAndNetworkReady.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty walletAndNetworkReadyProperty() {\n+        return walletAndNetworkReady;\n+    }\n+\n+    public boolean isAllDomainServicesInitialized() {\n+        return allDomainServicesInitialized.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty allDomainServicesInitializedProperty() {\n+        return allDomainServicesInitialized;\n+    }\n+\n+    public boolean isApplicationFullyInitialized() {\n+        return applicationFullyInitialized.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty applicationFullyInitializedProperty() {\n+        return applicationFullyInitialized;\n+    }\n+\n+    public boolean isUpdatedDataReceived() {\n+        return updatedDataReceived.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty updatedDataReceivedProperty() {\n+        return updatedDataReceived;\n+    }\n+\n+    public boolean isIsBlockDownloadComplete() {\n+        return isBlockDownloadComplete.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty isBlockDownloadCompleteProperty() {\n+        return isBlockDownloadComplete;\n+    }\n+\n+    public boolean isHasSufficientPeersForBroadcast() {\n+        return hasSufficientPeersForBroadcast.get();\n+    }\n+\n+    public ReadOnlyBooleanProperty hasSufficientPeersForBroadcastProperty() {\n+        return hasSufficientPeersForBroadcast;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1Mzc3NQ=="}, "originalCommit": {"oid": "474c4138d2d9e3f05d522a7dffdf100b216d043a"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2384, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}