{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDk1Mjg4", "number": 4559, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1Nzo1M1rOEpdlyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjowODo1MFrOEqA0IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTExODgwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1Nzo1M1rOHbJIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToxMzo1N1rOHb7yIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIzOA==", "bodyText": "Why put at i-1? Wouldn't it be more natural to use i?", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498223238", "createdAt": "2020-10-01T12:57:53Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTQ2MQ==", "bodyText": "I use negativeNumberParams.put(i - 1, ...) because i-1 is the index of the api method param, but args includes the method name too.\n args[0] = method name\n negativeNumberParams.get(0) = 1st parameter of method name ( i.e., args[1] )\n\nI added an explanation in commit e09b821", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498961461", "createdAt": "2020-10-02T17:43:28Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIzOA=="}, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNzY5NA==", "bodyText": "Wouldn't it be more natural to start the for loop at 1 then? Like for (int i = 1; i < args.length; i++) { since it's known that argument 0 is irrelevant and it would also make the code self explanatory.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499037694", "createdAt": "2020-10-02T20:33:48Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIzOA=="}, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MzA4OA==", "bodyText": "Yes -- commit  723fc8f.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499053088", "createdAt": "2020-10-02T21:13:57Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIzOA=="}, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTEzNjY0OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowMjoxNFrOHbJThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0Mzo0NVrOHb2MwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjA1NA==", "bodyText": "How about nonOptionArgsClone.set(idx, v);?", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498226054", "createdAt": "2020-10-01T13:02:14Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());\n+                args[i] = \"0\";  // Substitute a zero so the options parser won't barf.\n+            }\n+        }\n+        return args;\n+    }\n+\n+    List<String> restoreNegativeNumberOptions(List<String> nonOptionArgs) {\n+        // Put cached negative number params into a clone of the nonOptionArgs list.\n+        // This should be called after command line parsing.\n+        if (!negativeNumberParams.isEmpty()) {\n+            List<String> nonOptionArgsClone = new ArrayList<>(nonOptionArgs);\n+            negativeNumberParams.forEach((k, v) -> {\n+                int idx = k;\n+                nonOptionArgsClone.remove(idx);\n+                nonOptionArgsClone.add(idx, v);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTYwMA==", "bodyText": "Ugh.  Fixed in commit  23a677d", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498961600", "createdAt": "2020-10-02T17:43:45Z", "author": {"login": "ghubstan"}, "path": "cli/src/main/java/bisq/cli/NegativeNumberOptions.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.cli;\n+\n+import java.math.BigDecimal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static java.util.Arrays.stream;\n+\n+class NegativeNumberOptions {\n+\n+    private final Map<Integer, String> negativeNumberParams = new HashMap<>();\n+\n+    String[] removeNegativeNumberOptions(String[] args) {\n+        // Cache any negative number params that will be rejected by the parser.\n+        // This should be called before command line parsing.\n+        for (int i = 0; i < args.length; i++) {\n+            if (isNegativeNumber.test(args[i])) {\n+                String param = args[i];\n+                negativeNumberParams.put(i - 1, new BigDecimal(param).toString());\n+                args[i] = \"0\";  // Substitute a zero so the options parser won't barf.\n+            }\n+        }\n+        return args;\n+    }\n+\n+    List<String> restoreNegativeNumberOptions(List<String> nonOptionArgs) {\n+        // Put cached negative number params into a clone of the nonOptionArgs list.\n+        // This should be called after command line parsing.\n+        if (!negativeNumberParams.isEmpty()) {\n+            List<String> nonOptionArgsClone = new ArrayList<>(nonOptionArgs);\n+            negativeNumberParams.forEach((k, v) -> {\n+                int idx = k;\n+                nonOptionArgsClone.remove(idx);\n+                nonOptionArgsClone.add(idx, v);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjA1NA=="}, "originalCommit": {"oid": "adb175c21aed46d3f41da1d336bd9ecdfcdb2e4a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTE3Mjk4OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/bisq/cli/CliMain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoxMTowMFrOHbJptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo0Mjo1OFrOHbqjkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzMTczMg==", "bodyText": "Expected more than 8 options but only 8 expected options listed", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498231732", "createdAt": "2020-10-01T13:11:00Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/CliMain.java", "diffHunk": "@@ -169,8 +189,39 @@ public static void run(String[] args) {\n                     return;\n                 }\n                 case createoffer: {\n-                    // TODO\n-                    out.println(\"offer created\");\n+                    if (nonOptionArgs.size() < 9)\n+                        throw new IllegalArgumentException(\"incorrect parameter count,\"\n+                                + \" expecting buy | sell, payment acct id, currency code, amount, min amount,\"\n+                                + \" use-market-based-price, fixed-price | mkt-price-margin, security-deposit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7fe4b97bf6c2f439507695c97c33501015c98"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MDgzNA==", "bodyText": "I think this was fixed in a later commit", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498770834", "createdAt": "2020-10-02T11:42:58Z", "author": {"login": "sqrrm"}, "path": "cli/src/main/java/bisq/cli/CliMain.java", "diffHunk": "@@ -169,8 +189,39 @@ public static void run(String[] args) {\n                     return;\n                 }\n                 case createoffer: {\n-                    // TODO\n-                    out.println(\"offer created\");\n+                    if (nonOptionArgs.size() < 9)\n+                        throw new IllegalArgumentException(\"incorrect parameter count,\"\n+                                + \" expecting buy | sell, payment acct id, currency code, amount, min amount,\"\n+                                + \" use-market-based-price, fixed-price | mkt-price-margin, security-deposit\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzMTczMg=="}, "originalCommit": {"oid": "c8a7fe4b97bf6c2f439507695c97c33501015c98"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjQ3NTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTozNTo1MFrOHbqY4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxMjoyOFrOHb3AiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2ODA5Ng==", "bodyText": "I think we can ignore codacy on this one going forward as it's possible to merge even when it's complaining. Perhaps we could even configure codacy to ignore it.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498768096", "createdAt": "2020-10-02T11:35:50Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -100,6 +100,10 @@ void registerDisputeAgent(String disputeAgentTypeString, String registrationKey)\n                     signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n                     registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n                     return;\n+                default:\n+                    // Codacy requires default label in switch, Intellij does not.\n+                    //noinspection UnnecessaryReturnStatement\n+                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3761530b541519ef23d8d8edc48f53e4a61282b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3NDg1Nw==", "bodyText": "Unused default switch label deleted in 0332711.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498974857", "createdAt": "2020-10-02T18:12:28Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -100,6 +100,10 @@ void registerDisputeAgent(String disputeAgentTypeString, String registrationKey)\n                     signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n                     registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n                     return;\n+                default:\n+                    // Codacy requires default label in switch, Intellij does not.\n+                    //noinspection UnnecessaryReturnStatement\n+                    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2ODA5Ng=="}, "originalCommit": {"oid": "f3761530b541519ef23d8d8edc48f53e4a61282b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjQ5MTI3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo0MjoyMlrOHbqing==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowNzo0OFrOHb24pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MDU5MA==", "bodyText": "The UI might get a bit verbose on errors with this change.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498770590", "createdAt": "2020-10-02T11:42:22Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "diffHunk": "@@ -65,7 +67,7 @@ protected void failed(String message) {\n \n     protected void failed(Throwable t) {\n         log.error(errorMessage, t);\n-        taskHandler.handleErrorMessage(errorMessage);\n+        taskHandler.handleErrorMessage(format(\"%s: %s\", errorMessage, t.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe22c3cec4b3b6b2a00ee142ac48c37f04b663d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MjgzOQ==", "bodyText": "I reverted it, then pushed a change (631c3f4) -> taskHandler.handleErrorMessage(t.getMessage());, which is what I meant to do in the first place.  Now, the verbose msg in logged on the server, but just the exception msg is passed up to clients.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r498972839", "createdAt": "2020-10-02T18:07:48Z", "author": {"login": "ghubstan"}, "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "diffHunk": "@@ -65,7 +67,7 @@ protected void failed(String message) {\n \n     protected void failed(Throwable t) {\n         log.error(errorMessage, t);\n-        taskHandler.handleErrorMessage(errorMessage);\n+        taskHandler.handleErrorMessage(format(\"%s: %s\", errorMessage, t.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MDU5MA=="}, "originalCommit": {"oid": "cfe22c3cec4b3b6b2a00ee142ac48c37f04b663d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDEyNjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoyODoyNFrOHb6tqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTowMToxOFrOHb7gQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNTU2MA==", "bodyText": "For symmetry I would probably have a return here, or break in the MEDIATOR case. Not serious, but it makes more sense when similar cases are handled the same way. In this case one has to wonder why there is a return in one case and break in the next.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499035560", "createdAt": "2020-10-02T20:28:24Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -99,6 +99,7 @@ void registerDisputeAgent(String disputeAgentTypeString, String registrationKey)\n                     ecKey = refundAgentManager.getRegistrationKey(registrationKey);\n                     signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n                     registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1693a6cf4d1b7cb5f0380f63dad8d50cdc72157"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NTgwNg==", "bodyText": "I did not make sense to me, but codacy wanted a break (statement).   I'll change it to a return.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499045806", "createdAt": "2020-10-02T20:54:07Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -99,6 +99,7 @@ void registerDisputeAgent(String disputeAgentTypeString, String registrationKey)\n                     ecKey = refundAgentManager.getRegistrationKey(registrationKey);\n                     signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n                     registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n+                    break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNTU2MA=="}, "originalCommit": {"oid": "f1693a6cf4d1b7cb5f0380f63dad8d50cdc72157"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0ODUxMg==", "bodyText": "My two ducat's worth... I think Intellij's code inspector is more intelligent than codacy's.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499048512", "createdAt": "2020-10-02T21:01:18Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/api/CoreDisputeAgentsService.java", "diffHunk": "@@ -99,6 +99,7 @@ void registerDisputeAgent(String disputeAgentTypeString, String registrationKey)\n                     ecKey = refundAgentManager.getRegistrationKey(registrationKey);\n                     signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));\n                     registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);\n+                    break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNTU2MA=="}, "originalCommit": {"oid": "f1693a6cf4d1b7cb5f0380f63dad8d50cdc72157"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDg4OTkyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjowODo1MFrOHcBPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNTowMjozNFrOHcCA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MjQ5Mg==", "bodyText": "I would like to exclude this change from this PR. It would affect the UI notifications that depend on the errormessage being reasonable for display.\nGenerally refactoring is fine (although more care is needed now with the many big PRs coming in, to avoid conflicts) and behavioral changes are fine as long as the ramifications are taken into account, I feel that's lacking here.\nThat's the only issue I have left. The rest looks good.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499142492", "createdAt": "2020-10-03T12:08:50Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "diffHunk": "@@ -65,7 +65,7 @@ protected void failed(String message) {\n \n     protected void failed(Throwable t) {\n         log.error(errorMessage, t);\n-        taskHandler.handleErrorMessage(errorMessage);\n+        taskHandler.handleErrorMessage(t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631c3f4f12a5130bb2d16ba9b8f202da0c9ef096"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1NTE3NQ==", "bodyText": "I put Task.java back to the way it was before I made any changes to it. It now sends An error occurred at task: ValidateOffer up to the CLI, instead of the details of the error, i.e., Amount is larger than 1.00 BTC, but solving this is for another PR, with better analysis of how a solution affects the UI.", "url": "https://github.com/bisq-network/bisq/pull/4559#discussion_r499155175", "createdAt": "2020-10-03T15:02:34Z", "author": {"login": "ghubstan"}, "path": "common/src/main/java/bisq/common/taskrunner/Task.java", "diffHunk": "@@ -65,7 +65,7 @@ protected void failed(String message) {\n \n     protected void failed(Throwable t) {\n         log.error(errorMessage, t);\n-        taskHandler.handleErrorMessage(errorMessage);\n+        taskHandler.handleErrorMessage(t.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MjQ5Mg=="}, "originalCommit": {"oid": "631c3f4f12a5130bb2d16ba9b8f202da0c9ef096"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2348, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}