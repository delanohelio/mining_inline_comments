{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjA1NDY0", "number": 3888, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0NDozN1rODZKx3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0NjoyOVrODZK0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE3NTk4OnYy", "diffSide": "RIGHT", "path": "gradle/witness/gradle-witness.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0NDozN1rOFfaSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDozNjoxMVrOFfgSxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MDc4OA==", "bodyText": "Is this one needed at all?\nReading at https://github.com/mojohaus/animal-sniffer it sounds like this functionality is already provided with javac", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368480788", "createdAt": "2020-01-20T10:44:37Z", "author": {"login": "sqrrm"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,26 +55,54 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',\n         'javax.inject:javax.inject:91c77044a50c481636c32d916fd89c9118a72195390452c81065080f957de7ff',\n         'net.glxn:qrgen:c85d9d8512d91e8ad11fe56259a7825bd50ce0245447e236cf168d1b17591882',\n         'net.jcip:jcip-annotations:be5805392060c71474bf6c9a67a099471274d30b83eef84bfc4e0889a4f1dcc0',\n         'net.sf.jopt-simple:jopt-simple:6f45c00908265947c39221035250024f2caec9a15c1c8cf553ebeecee289f342',\n         'network.bisq.btcd-cli4j:btcd-cli4j-core:203156fc63dc1202774de9818e4f21149549f79b25d356b08bb0c784be40c0e8',\n         'network.bisq.btcd-cli4j:btcd-cli4j-daemon:0a2783a851add6e3d8ae899ade48c041b250bfac64b6a4c5f6380ebcdbbe6848',\n         'org.apache.commons:commons-compress:5f2df1e467825e4cac5996d44890c4201c000b43c0b23cffc0782d28a0beb9b0',\n-        'org.apache.commons:commons-lang3:734c8356420cc8e30c795d64fd1fcd5d44ea9d90342a2cc3262c5158fbc6d98b',\n-        'org.apache.httpcomponents:httpclient:db3d1b6c2d6a5e5ad47577ad61854e2f0e0936199b8e05eb541ed52349263135',\n-        'org.apache.httpcomponents:httpcore:d7f853dee87680b07293d30855b39b9eb56c1297bd16ff1cd6f19ddb8fa745fb',\n+        'org.apache.commons:commons-lang3:8ac96fc686512d777fca85e144f196cd7cfe0c0aec23127229497d1a38ff651c',\n+        'org.apache.httpcomponents:httpclient:6c7e3bb423d8c5574f28157fe42b4c38d6a3477bfa2954cfe5f330b14ecad8a9',\n+        'org.apache.httpcomponents:httpcore:d799522d579aac06b170603f8f080f6e3248dadc01f9652cdd7ea7bc318c21ce',\n         'org.bitcoinj:orchid:f836325cfa0466a011cb755c9b0fee6368487a2352eb45f4306ad9e4c18de080',\n         'org.bouncycastle:bcpg-jdk15on:de3355b821fc81dd32e1f3f560d5b3eca1c678fd2400011d0bfc69fb91bcde85',\n         'org.bouncycastle:bcprov-jdk15on:963e1ee14f808ffb99897d848ddcdb28fa91ddda867eb18d303e82728f878349',\n+        'org.codehaus.mojo:animal-sniffer-annotations:92654f493ecfec52082e76354f0ebf87648dc3d5cec2e3c3cdb947c016747a53',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c02ce57669a7eee6e01143a686eeba782d65968"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3OTI3MA==", "bodyText": "Removed in 1978868 2a66d11 (force pushed to fix build failure).", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368579270", "createdAt": "2020-01-20T14:36:11Z", "author": {"login": "cbeams"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,26 +55,54 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',\n         'javax.inject:javax.inject:91c77044a50c481636c32d916fd89c9118a72195390452c81065080f957de7ff',\n         'net.glxn:qrgen:c85d9d8512d91e8ad11fe56259a7825bd50ce0245447e236cf168d1b17591882',\n         'net.jcip:jcip-annotations:be5805392060c71474bf6c9a67a099471274d30b83eef84bfc4e0889a4f1dcc0',\n         'net.sf.jopt-simple:jopt-simple:6f45c00908265947c39221035250024f2caec9a15c1c8cf553ebeecee289f342',\n         'network.bisq.btcd-cli4j:btcd-cli4j-core:203156fc63dc1202774de9818e4f21149549f79b25d356b08bb0c784be40c0e8',\n         'network.bisq.btcd-cli4j:btcd-cli4j-daemon:0a2783a851add6e3d8ae899ade48c041b250bfac64b6a4c5f6380ebcdbbe6848',\n         'org.apache.commons:commons-compress:5f2df1e467825e4cac5996d44890c4201c000b43c0b23cffc0782d28a0beb9b0',\n-        'org.apache.commons:commons-lang3:734c8356420cc8e30c795d64fd1fcd5d44ea9d90342a2cc3262c5158fbc6d98b',\n-        'org.apache.httpcomponents:httpclient:db3d1b6c2d6a5e5ad47577ad61854e2f0e0936199b8e05eb541ed52349263135',\n-        'org.apache.httpcomponents:httpcore:d7f853dee87680b07293d30855b39b9eb56c1297bd16ff1cd6f19ddb8fa745fb',\n+        'org.apache.commons:commons-lang3:8ac96fc686512d777fca85e144f196cd7cfe0c0aec23127229497d1a38ff651c',\n+        'org.apache.httpcomponents:httpclient:6c7e3bb423d8c5574f28157fe42b4c38d6a3477bfa2954cfe5f330b14ecad8a9',\n+        'org.apache.httpcomponents:httpcore:d799522d579aac06b170603f8f080f6e3248dadc01f9652cdd7ea7bc318c21ce',\n         'org.bitcoinj:orchid:f836325cfa0466a011cb755c9b0fee6368487a2352eb45f4306ad9e4c18de080',\n         'org.bouncycastle:bcpg-jdk15on:de3355b821fc81dd32e1f3f560d5b3eca1c678fd2400011d0bfc69fb91bcde85',\n         'org.bouncycastle:bcprov-jdk15on:963e1ee14f808ffb99897d848ddcdb28fa91ddda867eb18d303e82728f878349',\n+        'org.codehaus.mojo:animal-sniffer-annotations:92654f493ecfec52082e76354f0ebf87648dc3d5cec2e3c3cdb947c016747a53',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MDc4OA=="}, "originalCommit": {"oid": "5c02ce57669a7eee6e01143a686eeba782d65968"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE3ODY4OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0NTozMlrOFfaTsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozMzo1NlrOFfc9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTIwMA==", "bodyText": "Somehow this command didn't work for me.", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368481200", "createdAt": "2020-01-20T10:45:32Z", "author": {"login": "ripcurlx"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595387c8e59a59e34fcf2818cfd220e083a4b75"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNDY4NA==", "bodyText": "I just checked it locally and it does work for me. That is, after I call the stopServer RPC from the client, no further commands can be issued from the client because indeed the server has been stopped.", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368524684", "createdAt": "2020-01-20T12:33:56Z", "author": {"login": "cbeams"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTIwMA=="}, "originalCommit": {"oid": "7595387c8e59a59e34fcf2818cfd220e083a4b75"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE4MTQ2OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0NjoyOVrOFfaVRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozNDo0M1rOFfc-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTYwNw==", "bodyText": "NIT: 0.12 should be at least 0.15 otherwise the security deposit is too low for our current setup", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368481607", "createdAt": "2020-01-20T10:46:29Z", "author": {"login": "ripcurlx"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7595387c8e59a59e34fcf2818cfd220e083a4b75"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNDk2MA==", "bodyText": "Fixed in d77ff10.", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368524960", "createdAt": "2020-01-20T12:34:43Z", "author": {"login": "cbeams"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTYwNw=="}, "originalCommit": {"oid": "7595387c8e59a59e34fcf2818cfd220e083a4b75"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2592, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}