{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODUyMTYw", "number": 4612, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0MzozOFrOEwisqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Mjo1MlrOEw1Daw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM1NTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0MzozOFrOHmLjBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo1NjoxNVrOHmjDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NzEyNg==", "bodyText": "Maybe better to use \"hashedMultiSigOutputIsLegacy\" to avoid the 2x negation. Makes it easier to read...", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509797126", "createdAt": "2020-10-21T23:43:38Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -957,7 +1013,15 @@ public Transaction traderSignAndFinalizeDisputedPayoutTx(byte[] depositTxSeriali\n \n         // take care of sorting!\n         Script redeemScript = get2of3MultiSigRedeemScript(buyerPubKey, sellerPubKey, arbitratorPubKey);\n-        Sha256Hash sigHash = payoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);\n+        Sha256Hash sigHash;\n+        boolean hashedMultiSigOutputIsSegwit = !ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb292843ae9ee2894c558c7bcebf7597fb569d80"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MjI0Mw==", "bodyText": "fixed.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510182243", "createdAt": "2020-10-22T13:56:15Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -957,7 +1013,15 @@ public Transaction traderSignAndFinalizeDisputedPayoutTx(byte[] depositTxSeriali\n \n         // take care of sorting!\n         Script redeemScript = get2of3MultiSigRedeemScript(buyerPubKey, sellerPubKey, arbitratorPubKey);\n-        Sha256Hash sigHash = payoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);\n+        Sha256Hash sigHash;\n+        boolean hashedMultiSigOutputIsSegwit = !ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NzEyNg=="}, "originalCommit": {"oid": "cb292843ae9ee2894c558c7bcebf7597fb569d80"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM2MzI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0NzowNFrOHmLnKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzoyMFrOHmj4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODE4NQ==", "bodyText": "duplicate \"the the\"", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509798185", "createdAt": "2020-10-21T23:47:04Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1181,6 +1181,11 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n+        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n+        // Since there is no way to check migration to bitcoinj 0.15,\n+        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n+        // Actually, given the serialized tx is used just as the connected tx of an input,\n+        // we don't need the the connected tx's witness data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa7e5d82bb98a5178daede7e665778421036c45"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5OTM1MQ==", "bodyText": "Isn't the input always from the users own wallet (not the peers input)? If so I don't understand the above comment. Then this code is only execute anyway if the user runs the new version and segwit could be used.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509799351", "createdAt": "2020-10-21T23:51:00Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1181,6 +1181,11 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n+        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n+        // Since there is no way to check migration to bitcoinj 0.15,\n+        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n+        // Actually, given the serialized tx is used just as the connected tx of an input,\n+        // we don't need the the connected tx's witness data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODE4NQ=="}, "originalCommit": {"oid": "dfa7e5d82bb98a5178daede7e665778421036c45"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MjM4NQ==", "bodyText": "duplicate \"the the\"\n\nfixed", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510182385", "createdAt": "2020-10-22T13:56:25Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1181,6 +1181,11 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n+        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n+        // Since there is no way to check migration to bitcoinj 0.15,\n+        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n+        // Actually, given the serialized tx is used just as the connected tx of an input,\n+        // we don't need the the connected tx's witness data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODE4NQ=="}, "originalCommit": {"oid": "dfa7e5d82bb98a5178daede7e665778421036c45"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NTE0MA==", "bodyText": "Isn't the input always from the users own wallet (not the peers input)? If so I don't understand the above comment. Then this code is only execute anyway if the user runs the new version and segwit could be used.\n\nWhen creating the deposit tx, traders will have a tx with an input from her wallet and an input from the counterparty.  Traders collaborate creating the deposit tx. They send RawTransactionInput over p2p. So, if you are trading with a node that was not upgraded to bitcoinj 0.15 and RawTransactionInput.parentTransaction is serialized with segwit data, the other node won't be able to parse RawTransactionInput.parentTransaction correctly.\nExtra comments:\n\nRawTransactionInput.parentTransaction could be replaced with RawTransactionInput.parentTransactionHash since the tx is only used to obtain its hash.\nSince we upgraded the trade protocol version, it is not possible to take a trade from a not-upgraded node, but better be on the safe side. This comment made probably more sense for the previous release.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510195140", "createdAt": "2020-10-22T14:12:21Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1181,6 +1181,11 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n+        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n+        // Since there is no way to check migration to bitcoinj 0.15,\n+        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n+        // Actually, given the serialized tx is used just as the connected tx of an input,\n+        // we don't need the the connected tx's witness data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODE4NQ=="}, "originalCommit": {"oid": "dfa7e5d82bb98a5178daede7e665778421036c45"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NTg4MA==", "bodyText": "I will update the comment to make it more clear.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510195880", "createdAt": "2020-10-22T14:13:20Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1181,6 +1181,11 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n+        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n+        // Since there is no way to check migration to bitcoinj 0.15,\n+        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n+        // Actually, given the serialized tx is used just as the connected tx of an input,\n+        // we don't need the the connected tx's witness data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODE4NQ=="}, "originalCommit": {"oid": "dfa7e5d82bb98a5178daede7e665778421036c45"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM3MzM4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/app/Version.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo1MjoxMVrOHmLtKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxODoxMVrOHmkHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5OTcyMw==", "bodyText": "We will be on 1.4.2 or more likely 1.5.0", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509799723", "createdAt": "2020-10-21T23:52:11Z", "author": {"login": "chimp1984"}, "path": "common/src/main/java/bisq/common/app/Version.java", "diffHunk": "@@ -92,10 +92,13 @@ private static int getSubVersion(String version, int index) {\n \n     // The version no. of the current protocol. The offer holds that version.\n     // A taker will check the version of the offers to see if his version is compatible.\n-    // Offers created with the old version will become invalid and have to be canceled.\n+    // For the switch to version 2, offers created with the old version will become invalid and have to be canceled.\n+    // For the switch to version 3, offers created with the old version can be migrated to version 3 just by opening\n+    // the Bisq app.\n     // VERSION = 0.5.0 -> TRADE_PROTOCOL_VERSION = 1\n     // Version 1.2.2 -> TRADE_PROTOCOL_VERSION = 2\n-    public static final int TRADE_PROTOCOL_VERSION = 2;\n+    // Version 1.4.1 -> TRADE_PROTOCOL_VERSION = 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aae2d25762e59c4583fd76baab50dd50989730d9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5OTc0Mw==", "bodyText": "fixed.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510199743", "createdAt": "2020-10-22T14:18:11Z", "author": {"login": "oscarguindzberg"}, "path": "common/src/main/java/bisq/common/app/Version.java", "diffHunk": "@@ -92,10 +92,13 @@ private static int getSubVersion(String version, int index) {\n \n     // The version no. of the current protocol. The offer holds that version.\n     // A taker will check the version of the offers to see if his version is compatible.\n-    // Offers created with the old version will become invalid and have to be canceled.\n+    // For the switch to version 2, offers created with the old version will become invalid and have to be canceled.\n+    // For the switch to version 3, offers created with the old version can be migrated to version 3 just by opening\n+    // the Bisq app.\n     // VERSION = 0.5.0 -> TRADE_PROTOCOL_VERSION = 1\n     // Version 1.2.2 -> TRADE_PROTOCOL_VERSION = 2\n-    public static final int TRADE_PROTOCOL_VERSION = 2;\n+    // Version 1.4.1 -> TRADE_PROTOCOL_VERSION = 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5OTcyMw=="}, "originalCommit": {"oid": "aae2d25762e59c4583fd76baab50dd50989730d9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ1MDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDozMTozMFrOHmMacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Mzo1OVrOHmoNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMTMxMg==", "bodyText": "Variable is redundant now. Also does not throw exception anymore", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509811312", "createdAt": "2020-10-22T00:31:30Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1193,10 +1196,6 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n \n     private byte[] getMakersScriptSigProgram(TransactionInput transactionInput) throws TransactionVerificationException {\n         byte[] scriptProgram = transactionInput.getScriptSig().getProgram();\n-        if (scriptProgram.length == 0) {\n-            throw new TransactionVerificationException(\"Inputs from maker not signed.\");\n-        }\n-\n         return scriptProgram;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f258dd6c9effc036ac4d4d3b14ec6ed13213f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwNTk0Mw==", "bodyText": "This all started with scriptProgram.length == 0 being valid for a segwit input.\nI just removed the method and moved its content to where it was being used, i.e. takerSignsDepositTx().\nSee takerSignsDepositTx():\n                byte[] makersScriptSigProgram = makersInput.getScriptSig().getProgram();\n                if (makersScriptSigProgram.length == 0 && TransactionWitness.EMPTY.equals(makersInput.getWitness())) {\n                    throw new TransactionVerificationException(\"Inputs from maker not signed.\");\n                }\n\nSee 7eb808d", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510205943", "createdAt": "2020-10-22T14:25:57Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1193,10 +1196,6 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n \n     private byte[] getMakersScriptSigProgram(TransactionInput transactionInput) throws TransactionVerificationException {\n         byte[] scriptProgram = transactionInput.getScriptSig().getProgram();\n-        if (scriptProgram.length == 0) {\n-            throw new TransactionVerificationException(\"Inputs from maker not signed.\");\n-        }\n-\n         return scriptProgram;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMTMxMg=="}, "originalCommit": {"oid": "9f4f258dd6c9effc036ac4d4d3b14ec6ed13213f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTY2MA==", "bodyText": "Yes, I saw. But now the method does not throw TransactionVerificationException anymore.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510231660", "createdAt": "2020-10-22T14:57:44Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1193,10 +1196,6 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n \n     private byte[] getMakersScriptSigProgram(TransactionInput transactionInput) throws TransactionVerificationException {\n         byte[] scriptProgram = transactionInput.getScriptSig().getProgram();\n-        if (scriptProgram.length == 0) {\n-            throw new TransactionVerificationException(\"Inputs from maker not signed.\");\n-        }\n-\n         return scriptProgram;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMTMxMg=="}, "originalCommit": {"oid": "9f4f258dd6c9effc036ac4d4d3b14ec6ed13213f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NjYzNQ==", "bodyText": "I saw you removed the method. Good so...", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510266635", "createdAt": "2020-10-22T15:43:59Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1193,10 +1196,6 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n \n     private byte[] getMakersScriptSigProgram(TransactionInput transactionInput) throws TransactionVerificationException {\n         byte[] scriptProgram = transactionInput.getScriptSig().getProgram();\n-        if (scriptProgram.length == 0) {\n-            throw new TransactionVerificationException(\"Inputs from maker not signed.\");\n-        }\n-\n         return scriptProgram;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMTMxMg=="}, "originalCommit": {"oid": "9f4f258dd6c9effc036ac4d4d3b14ec6ed13213f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ1NjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDozNDozNFrOHmMdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzoyMzowMlrOHmsOjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMjEzNQ==", "bodyText": "Is createP2PKHOutputScript correct? Would expect a segwit method...", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509812135", "createdAt": "2020-10-22T00:34:34Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1286,11 +1286,7 @@ private void signInput(Transaction transaction, TransactionInput input, int inpu\n                 input.setScriptSig(ScriptBuilder.createInputScript(txSig, sigKey));\n             }\n         } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n-            // TODO: Consider using this alternative way to build the scriptCode (taken from bitcoinj master)\n-            // Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey)\n-            Script scriptCode = new ScriptBuilder().data(\n-                    ScriptBuilder.createOutputScript(LegacyAddress.fromKey(transaction.getParams(), sigKey)).getProgram())\n-                    .build();\n+            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a657769945f946019fc974c8a06cf1431f1a1a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyMDc5OA==", "bodyText": "Yes, it is correct.\nI know it sounds weird.\nTo sign a P2WPKH input you have to serialize the tx with a specific format, hash it and then sign the hash.\nThat specific format includes something called the scriptCode which should be: OP_DUP OP_HASH160 pubKeyHash OP_EQUALVERIFY OP_CHECKSIG. That is the same script format used in P2PKH outputs.\nDetailed info: https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510220798", "createdAt": "2020-10-22T14:44:01Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1286,11 +1286,7 @@ private void signInput(Transaction transaction, TransactionInput input, int inpu\n                 input.setScriptSig(ScriptBuilder.createInputScript(txSig, sigKey));\n             }\n         } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n-            // TODO: Consider using this alternative way to build the scriptCode (taken from bitcoinj master)\n-            // Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey)\n-            Script scriptCode = new ScriptBuilder().data(\n-                    ScriptBuilder.createOutputScript(LegacyAddress.fromKey(transaction.getParams(), sigKey)).getProgram())\n-                    .build();\n+            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMjEzNQ=="}, "originalCommit": {"oid": "35a657769945f946019fc974c8a06cf1431f1a1a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjY2NA==", "bodyText": "Ok. Maybe a comment would be good with backgorund info.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510232664", "createdAt": "2020-10-22T14:58:59Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1286,11 +1286,7 @@ private void signInput(Transaction transaction, TransactionInput input, int inpu\n                 input.setScriptSig(ScriptBuilder.createInputScript(txSig, sigKey));\n             }\n         } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n-            // TODO: Consider using this alternative way to build the scriptCode (taken from bitcoinj master)\n-            // Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey)\n-            Script scriptCode = new ScriptBuilder().data(\n-                    ScriptBuilder.createOutputScript(LegacyAddress.fromKey(transaction.getParams(), sigKey)).getProgram())\n-                    .build();\n+            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMjEzNQ=="}, "originalCommit": {"oid": "35a657769945f946019fc974c8a06cf1431f1a1a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzMjU1OA==", "bodyText": "done.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510332558", "createdAt": "2020-10-22T17:23:02Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1286,11 +1286,7 @@ private void signInput(Transaction transaction, TransactionInput input, int inpu\n                 input.setScriptSig(ScriptBuilder.createInputScript(txSig, sigKey));\n             }\n         } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n-            // TODO: Consider using this alternative way to build the scriptCode (taken from bitcoinj master)\n-            // Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey)\n-            Script scriptCode = new ScriptBuilder().data(\n-                    ScriptBuilder.createOutputScript(LegacyAddress.fromKey(transaction.getParams(), sigKey)).getProgram())\n-                    .build();\n+            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMjEzNQ=="}, "originalCommit": {"oid": "35a657769945f946019fc974c8a06cf1431f1a1a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQ2MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/protocol/tasks/buyer/BuyerSignsDelayedPayoutTx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDozODo1OVrOHmMiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1NjoyNlrOHmmAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMzI4Mg==", "bodyText": "Why not take the input from preparedDelayedPayoutTx? If that is not possible, I would prefer to pass over the deposit tx to the signDelayedPayoutTx method and do the deail work in the TradeWalletService to keep the transaction domain more isolated there.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r509813282", "createdAt": "2020-10-22T00:38:59Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/buyer/BuyerSignsDelayedPayoutTx.java", "diffHunk": "@@ -46,7 +48,12 @@ protected void run() {\n             runInterceptHook();\n \n             Transaction preparedDelayedPayoutTx = checkNotNull(processModel.getPreparedDelayedPayoutTx());\n+\n             BtcWalletService btcWalletService = processModel.getBtcWalletService();\n+            NetworkParameters params = btcWalletService.getParams();\n+            Transaction preparedDepositTx = new Transaction(params, processModel.getPreparedDepositTx());\n+            Coin delayedPayoutTxInputValue = preparedDepositTx.getOutput(0).getValue();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb292843ae9ee2894c558c7bcebf7597fb569d80"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMDYzNA==", "bodyText": "In bitcoin (the protocol) inputs do not include the amount.\nIn bitcoinj (the library) you can connect a TransactionInput to its related TransactionOutput and then ask the TransactionInput its value. But it is only possible if you connected both of them.\nI moved the code to obtain the input value to TradeWalletService.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510230634", "createdAt": "2020-10-22T14:56:26Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/trade/protocol/tasks/buyer/BuyerSignsDelayedPayoutTx.java", "diffHunk": "@@ -46,7 +48,12 @@ protected void run() {\n             runInterceptHook();\n \n             Transaction preparedDelayedPayoutTx = checkNotNull(processModel.getPreparedDelayedPayoutTx());\n+\n             BtcWalletService btcWalletService = processModel.getBtcWalletService();\n+            NetworkParameters params = btcWalletService.getParams();\n+            Transaction preparedDepositTx = new Transaction(params, processModel.getPreparedDepositTx());\n+            Coin delayedPayoutTxInputValue = preparedDepositTx.getOutput(0).getValue();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMzI4Mg=="}, "originalCommit": {"oid": "cb292843ae9ee2894c558c7bcebf7597fb569d80"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM2MzMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Mjo1MlrOHmoJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNToxNFrOHmssEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTgxNg==", "bodyText": "getRawInputFromTransactionInput is used only by methods for creating the deposit tx. With the trade protocol update we do not have mixed cases of segwit/legacy here. Or do I miss something?", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510265816", "createdAt": "2020-10-22T15:42:52Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1183,11 +1183,8 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n-        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n-        // Since there is no way to check migration to bitcoinj 0.15,\n-        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n-        // Actually, given the serialized tx is used just as the connected tx of an input,\n-        // we don't need the connected tx's witness data.\n+        // bitcoinSerialize(false) is used just in case the serialized tx is parsed by a bisq node still using\n+        // bitcoinj 0.14. The serialized tx is just used to obtain its hash, so the witness data is not relevant.\n         return new RawTransactionInput(input.getOutpoint().getIndex(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea6f0899c235d5e4ed5bf67940be8ee746d177c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MDExMg==", "bodyText": "yes, you are right, just fixed the comment to explain that.", "url": "https://github.com/bisq-network/bisq/pull/4612#discussion_r510340112", "createdAt": "2020-10-22T17:35:14Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -1183,11 +1183,8 @@ private RawTransactionInput getRawInputFromTransactionInput(@NotNull Transaction\n                 \"input.getConnectedOutput().getParentTransaction() must not be null\");\n         checkNotNull(input.getValue(), \"input.getValue() must not be null\");\n \n-        // If we would be sure all bisq nodes migrated to bitcoinj 0.15, bitcoinSerialize(true) can be used.\n-        // Since there is no way to check migration to bitcoinj 0.15,\n-        // Config.SEGWIT_TRADE_PROTOCOL_ACTIVE could be checked instead.\n-        // Actually, given the serialized tx is used just as the connected tx of an input,\n-        // we don't need the connected tx's witness data.\n+        // bitcoinSerialize(false) is used just in case the serialized tx is parsed by a bisq node still using\n+        // bitcoinj 0.14. The serialized tx is just used to obtain its hash, so the witness data is not relevant.\n         return new RawTransactionInput(input.getOutpoint().getIndex(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTgxNg=="}, "originalCommit": {"oid": "fea6f0899c235d5e4ed5bf67940be8ee746d177c"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2395, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}