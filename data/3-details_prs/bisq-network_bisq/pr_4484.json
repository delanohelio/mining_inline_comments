{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDY2Njg4", "number": 4484, "title": "Scan disputes for accounts where same user used diff. real names.", "bodyText": "", "createdAt": "2020-09-05T06:41:29Z", "url": "https://github.com/bisq-network/bisq/pull/4484", "merged": true, "mergeCommit": {"oid": "c188284d0bcb2f89fdacb31b1d1439f25243460c"}, "closed": true, "closedAt": "2020-09-06T21:17:32Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFz-xrgH2gAyNDgwNDY2Njg4OjdjNzhlOTgxOTIwM2IzYzEwYzViMWFmODJmNzYzMTE1Yjk5ZDQzNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGVHzxgFqTQ4MzE1OTcyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7c78e9819203b3c10c5b1af82f763115b99d4355", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7c78e9819203b3c10c5b1af82f763115b99d4355", "committedDate": "2020-09-05T06:40:35Z", "message": "Scan disputes for accounts where same user used diff. real names.\nMight be fraudulent traders."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a65b150febd4d1fb2d86d7d94f2ec175ef36537", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5a65b150febd4d1fb2d86d7d94f2ec175ef36537", "committedDate": "2020-09-05T12:41:27Z", "message": "Remove unused var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a4bd7cd126cd6b90770b8d1bf80a033fc655ce0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4a4bd7cd126cd6b90770b8d1bf80a033fc655ce0", "committedDate": "2020-09-05T22:39:22Z", "message": "Add alert icon to list entries\n\nSupport agent can mark a suspicious dispute as resolved so it does not\nshow the alert icon anymore. In the full report a [ACK] got added to\nthat dispute."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "959009d6d66cdcf3cdd5fa5702cac6fe15330708", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/959009d6d66cdcf3cdd5fa5702cac6fe15330708", "committedDate": "2020-09-05T22:54:32Z", "message": "Remove unused method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTU5NzI1", "url": "https://github.com/bisq-network/bisq/pull/4484#pullrequestreview-483159725", "createdAt": "2020-09-06T17:17:21Z", "commit": {"oid": "7c78e9819203b3c10c5b1af82f763115b99d4355"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzoyNzowM1rOHNqzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzozMjoyMVrOHNq1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NDgxNA==", "bodyText": "Isn't this also known in the next if statement, could just set true and false instead of isBuyer when adding to map.", "url": "https://github.com/bisq-network/bisq/pull/4484#discussion_r484094814", "createdAt": "2020-09-06T17:27:03Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/support/dispute/agent/FraudDetection.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.support.dispute.agent;\n+\n+import bisq.core.locale.Res;\n+import bisq.core.payment.payload.PayloadWithHolderName;\n+import bisq.core.payment.payload.PaymentAccountPayload;\n+import bisq.core.support.dispute.Dispute;\n+import bisq.core.support.dispute.DisputeList;\n+import bisq.core.support.dispute.DisputeManager;\n+import bisq.core.trade.Contract;\n+\n+import bisq.common.crypto.Hash;\n+import bisq.common.crypto.PubKeyRing;\n+import bisq.common.util.Utilities;\n+\n+import javafx.collections.ListChangeListener;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.stream.Collectors;\n+\n+import lombok.Getter;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FraudDetection {\n+    public interface Listener {\n+        void onSuspiciousDisputeDetected();\n+    }\n+\n+    private final DisputeManager<? extends DisputeList<? extends DisputeList>> disputeManager;\n+    private Map<String, List<RealNameAccountInfo>> buyerRealNameAccountByAddressMap = new HashMap<>();\n+    private Map<String, List<RealNameAccountInfo>> sellerRealNameAccountByAddressMap = new HashMap<>();\n+    @Getter\n+    private Map<String, List<RealNameAccountInfo>> accountsUsingMultipleNames = new HashMap<>();\n+    private List<Listener> listeners = new CopyOnWriteArrayList<>();\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public FraudDetection(DisputeManager<? extends DisputeList<? extends DisputeList>> disputeManager) {\n+        this.disputeManager = disputeManager;\n+\n+        disputeManager.getDisputesAsObservableList().addListener((ListChangeListener<Dispute>) c -> {\n+            c.next();\n+            if (c.wasAdded()) {\n+                checkForMultipleHolderNames();\n+            }\n+        });\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // API\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void checkForMultipleHolderNames() {\n+        log.error(\"checkForMultipleHolderNames\");\n+        buildRealNameAccountMaps();\n+        detectUsageOfDifferentUserNames();\n+        log.error(\"hasSuspiciousDisputeDetected() \" + hasSuspiciousDisputeDetected());\n+    }\n+\n+    public boolean hasSuspiciousDisputeDetected() {\n+        return !accountsUsingMultipleNames.isEmpty();\n+    }\n+\n+    public String getAccountsUsingMultipleNamesAsString() {\n+        return accountsUsingMultipleNames.entrySet().stream()\n+                .map(entry -> {\n+                    String pubKeyHash = entry.getKey();\n+                    String accountInfo = entry.getValue().stream()\n+                            .map(info -> {\n+                                String tradeId = info.getDispute().getShortTradeId();\n+                                String holderName = info.getPayloadWithHolderName().getHolderName();\n+                                return \"    Account owner name: '\" + holderName +\n+                                        \"'; Trade ID: '\" + tradeId +\n+                                        \"'; Address: '\" + info.getAddress() +\n+                                        \"'; Payment method: '\" + Res.get(info.getPaymentAccountPayload().getPaymentMethodId()) +\n+                                        \"'; Role: \" + (info.isBuyer() ? \"'Buyer'\" : \"'Seller'\");\n+\n+                            })\n+                            .collect(Collectors.joining(\"\\n\"));\n+                    return \"Trader with multiple identities:\\n\" +\n+                            accountInfo;\n+                })\n+                .collect(Collectors.joining(\"\\n\\n\"));\n+    }\n+\n+    public void addListener(Listener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    public void removeListener(Listener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Private\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private void buildRealNameAccountMaps() {\n+        buyerRealNameAccountByAddressMap.clear();\n+        sellerRealNameAccountByAddressMap.clear();\n+        disputeManager.getDisputesAsObservableList()\n+                .forEach(dispute -> {\n+                    Contract contract = dispute.getContract();\n+                    PubKeyRing traderPubKeyRing = dispute.getTraderPubKeyRing();\n+                    String traderPubKeyHash = getTraderPuKeyHash(traderPubKeyRing);\n+                    String buyerPubKeyHash = getTraderPuKeyHash(contract.getBuyerPubKeyRing());\n+                    boolean isBuyer = contract.isMyRoleBuyer(traderPubKeyRing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c78e9819203b3c10c5b1af82f763115b99d4355"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NTI5MQ==", "bodyText": "Better to return early instead of big if blocks.", "url": "https://github.com/bisq-network/bisq/pull/4484#discussion_r484095291", "createdAt": "2020-09-06T17:32:21Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/support/dispute/agent/FraudDetection.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.core.support.dispute.agent;\n+\n+import bisq.core.locale.Res;\n+import bisq.core.payment.payload.PayloadWithHolderName;\n+import bisq.core.payment.payload.PaymentAccountPayload;\n+import bisq.core.support.dispute.Dispute;\n+import bisq.core.support.dispute.DisputeList;\n+import bisq.core.support.dispute.DisputeManager;\n+import bisq.core.trade.Contract;\n+\n+import bisq.common.crypto.Hash;\n+import bisq.common.crypto.PubKeyRing;\n+import bisq.common.util.Utilities;\n+\n+import javafx.collections.ListChangeListener;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.stream.Collectors;\n+\n+import lombok.Getter;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FraudDetection {\n+    public interface Listener {\n+        void onSuspiciousDisputeDetected();\n+    }\n+\n+    private final DisputeManager<? extends DisputeList<? extends DisputeList>> disputeManager;\n+    private Map<String, List<RealNameAccountInfo>> buyerRealNameAccountByAddressMap = new HashMap<>();\n+    private Map<String, List<RealNameAccountInfo>> sellerRealNameAccountByAddressMap = new HashMap<>();\n+    @Getter\n+    private Map<String, List<RealNameAccountInfo>> accountsUsingMultipleNames = new HashMap<>();\n+    private List<Listener> listeners = new CopyOnWriteArrayList<>();\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public FraudDetection(DisputeManager<? extends DisputeList<? extends DisputeList>> disputeManager) {\n+        this.disputeManager = disputeManager;\n+\n+        disputeManager.getDisputesAsObservableList().addListener((ListChangeListener<Dispute>) c -> {\n+            c.next();\n+            if (c.wasAdded()) {\n+                checkForMultipleHolderNames();\n+            }\n+        });\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // API\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void checkForMultipleHolderNames() {\n+        log.error(\"checkForMultipleHolderNames\");\n+        buildRealNameAccountMaps();\n+        detectUsageOfDifferentUserNames();\n+        log.error(\"hasSuspiciousDisputeDetected() \" + hasSuspiciousDisputeDetected());\n+    }\n+\n+    public boolean hasSuspiciousDisputeDetected() {\n+        return !accountsUsingMultipleNames.isEmpty();\n+    }\n+\n+    public String getAccountsUsingMultipleNamesAsString() {\n+        return accountsUsingMultipleNames.entrySet().stream()\n+                .map(entry -> {\n+                    String pubKeyHash = entry.getKey();\n+                    String accountInfo = entry.getValue().stream()\n+                            .map(info -> {\n+                                String tradeId = info.getDispute().getShortTradeId();\n+                                String holderName = info.getPayloadWithHolderName().getHolderName();\n+                                return \"    Account owner name: '\" + holderName +\n+                                        \"'; Trade ID: '\" + tradeId +\n+                                        \"'; Address: '\" + info.getAddress() +\n+                                        \"'; Payment method: '\" + Res.get(info.getPaymentAccountPayload().getPaymentMethodId()) +\n+                                        \"'; Role: \" + (info.isBuyer() ? \"'Buyer'\" : \"'Seller'\");\n+\n+                            })\n+                            .collect(Collectors.joining(\"\\n\"));\n+                    return \"Trader with multiple identities:\\n\" +\n+                            accountInfo;\n+                })\n+                .collect(Collectors.joining(\"\\n\\n\"));\n+    }\n+\n+    public void addListener(Listener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    public void removeListener(Listener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Private\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private void buildRealNameAccountMaps() {\n+        buyerRealNameAccountByAddressMap.clear();\n+        sellerRealNameAccountByAddressMap.clear();\n+        disputeManager.getDisputesAsObservableList()\n+                .forEach(dispute -> {\n+                    Contract contract = dispute.getContract();\n+                    PubKeyRing traderPubKeyRing = dispute.getTraderPubKeyRing();\n+                    String traderPubKeyHash = getTraderPuKeyHash(traderPubKeyRing);\n+                    String buyerPubKeyHash = getTraderPuKeyHash(contract.getBuyerPubKeyRing());\n+                    boolean isBuyer = contract.isMyRoleBuyer(traderPubKeyRing);\n+\n+                    if (buyerPubKeyHash.equals(traderPubKeyHash)) {\n+                        PaymentAccountPayload buyerPaymentAccountPayload = contract.getBuyerPaymentAccountPayload();\n+                        String buyersAddress = contract.getBuyerNodeAddress().getFullAddress();\n+                        addToMap(traderPubKeyHash, buyerRealNameAccountByAddressMap, buyerPaymentAccountPayload, buyersAddress, dispute, isBuyer);\n+                    } else {\n+                        PaymentAccountPayload sellerPaymentAccountPayload = contract.getSellerPaymentAccountPayload();\n+                        String sellerAddress = contract.getSellerNodeAddress().getFullAddress();\n+                        addToMap(traderPubKeyHash, sellerRealNameAccountByAddressMap, sellerPaymentAccountPayload, sellerAddress, dispute, isBuyer);\n+                    }\n+                });\n+    }\n+\n+    private String getTraderPuKeyHash(PubKeyRing pubKeyRing) {\n+        return Utilities.encodeToHex(Hash.getRipemd160hash(pubKeyRing.toProtoMessage().toByteArray()));\n+    }\n+\n+    private void addToMap(String pubKeyHash, Map<String, List<RealNameAccountInfo>> map,\n+                          PaymentAccountPayload paymentAccountPayload,\n+                          String address,\n+                          Dispute dispute,\n+                          boolean isBuyer) {\n+        if (paymentAccountPayload instanceof PayloadWithHolderName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c78e9819203b3c10c5b1af82f763115b99d4355"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3164, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}