{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMjc2MTM5", "number": 4481, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozODowN1rOEgm2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoyNjowMlrOEhsw3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2MzMyOnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozODowN1rOHNiYHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowNjowNFrOHNqr8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njc2NA==", "bodyText": "This will be done in the next statement anyway", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r483956764", "createdAt": "2020-09-05T14:38:07Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "diffHunk": "@@ -157,13 +154,19 @@ public void activate() {\n             }\n         });\n \n-        // we listen for updates on the trade autoConfirmResult field\n-        if (assetTxProofResultField != null) {\n-            trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+        if (useXmrTxProof) {\n+            proofResultListener = (observable, oldValue, newValue) -> {\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());\n+            };\n+\n+            // we listen for updates on the trade autoConfirmResult field\n+            if (assetTxProofResultField != null) {\n+                trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c87899c662fff2e678229c32fda3793645e9a7f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MjkxNA==", "bodyText": "Yes, true. I will add a commit with a more clean handling.", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r484092914", "createdAt": "2020-09-06T17:06:04Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "diffHunk": "@@ -157,13 +154,19 @@ public void activate() {\n             }\n         });\n \n-        // we listen for updates on the trade autoConfirmResult field\n-        if (assetTxProofResultField != null) {\n-            trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+        if (useXmrTxProof) {\n+            proofResultListener = (observable, oldValue, newValue) -> {\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());\n+            };\n+\n+            // we listen for updates on the trade autoConfirmResult field\n+            if (assetTxProofResultField != null) {\n+                trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njc2NA=="}, "originalCommit": {"oid": "c87899c662fff2e678229c32fda3793645e9a7f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2MzQzOnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDozODoxOVrOHNiYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowNjoyMVrOHNqsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            applyAssetTxProofResult(trade.getAssetTxProofResult());", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r483956780", "createdAt": "2020-09-05T14:38:19Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "diffHunk": "@@ -157,13 +154,19 @@ public void activate() {\n             }\n         });\n \n-        // we listen for updates on the trade autoConfirmResult field\n-        if (assetTxProofResultField != null) {\n-            trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+        if (useXmrTxProof) {\n+            proofResultListener = (observable, oldValue, newValue) -> {\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());\n+            };\n+\n+            // we listen for updates on the trade autoConfirmResult field\n+            if (assetTxProofResultField != null) {\n+                trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c87899c662fff2e678229c32fda3793645e9a7f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MjkzOQ==", "bodyText": "There is more to clean up. See new commit.", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r484092939", "createdAt": "2020-09-06T17:06:21Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/steps/seller/SellerStep3View.java", "diffHunk": "@@ -157,13 +154,19 @@ public void activate() {\n             }\n         });\n \n-        // we listen for updates on the trade autoConfirmResult field\n-        if (assetTxProofResultField != null) {\n-            trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+        if (useXmrTxProof) {\n+            proofResultListener = (observable, oldValue, newValue) -> {\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());\n+            };\n+\n+            // we listen for updates on the trade autoConfirmResult field\n+            if (assetTxProofResultField != null) {\n+                trade.getAssetTxProofResultUpdateProperty().addListener(proofResultListener);\n+                applyAssetTxProofResult(trade.getAssetTxProofResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njc4MA=="}, "originalCommit": {"oid": "c87899c662fff2e678229c32fda3793645e9a7f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI2OTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDo0NzoxNVrOHNia5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowOTo0MlrOHNqtHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzQ3Nw==", "bodyText": "This is kind of a mess, but seems correct.", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r483957477", "createdAt": "2020-09-05T14:47:15Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "diffHunk": "@@ -105,7 +110,34 @@ public static RevolutAccountPayload fromProto(protobuf.PaymentAccountPayload pro\n \n     @Override\n     public String getPaymentDetails() {\n-        return Res.get(paymentMethodId) + \" - \" + Res.getWithCol(\"payment.account.userName\") + \" \" + getUserName();\n+        Tuple2<String, String> tuple = getLabelValueTuple();\n+        return Res.get(paymentMethodId) + \" - \" + tuple.first + \": \" + tuple.second;\n+    }\n+\n+    private Tuple2<String, String> getLabelValueTuple() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3383dbbe3dc567956fe782ec826c82c2db6d9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MzIxNA==", "bodyText": "Yes, not great all those special cases. Could be done mor elegantly for sure but this feature ate already much more time as expected, so tried to get it fixes as quickly I could ;-)", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r484093214", "createdAt": "2020-09-06T17:09:42Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "diffHunk": "@@ -105,7 +110,34 @@ public static RevolutAccountPayload fromProto(protobuf.PaymentAccountPayload pro\n \n     @Override\n     public String getPaymentDetails() {\n-        return Res.get(paymentMethodId) + \" - \" + Res.getWithCol(\"payment.account.userName\") + \" \" + getUserName();\n+        Tuple2<String, String> tuple = getLabelValueTuple();\n+        return Res.get(paymentMethodId) + \" - \" + tuple.first + \": \" + tuple.second;\n+    }\n+\n+    private Tuple2<String, String> getLabelValueTuple() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzQ3Nw=="}, "originalCommit": {"oid": "97d3383dbbe3dc567956fe782ec826c82c2db6d9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjI3MDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxNDo0OTo1OFrOHNiboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowODoxNFrOHNqsmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzY2NA==", "bodyText": "Using var tuple really helps make the code cleaner and easier to read in cases like this. Although that's personal preference.", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r483957664", "createdAt": "2020-09-05T14:49:58Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "diffHunk": "@@ -105,7 +110,34 @@ public static RevolutAccountPayload fromProto(protobuf.PaymentAccountPayload pro\n \n     @Override\n     public String getPaymentDetails() {\n-        return Res.get(paymentMethodId) + \" - \" + Res.getWithCol(\"payment.account.userName\") + \" \" + getUserName();\n+        Tuple2<String, String> tuple = getLabelValueTuple();\n+        return Res.get(paymentMethodId) + \" - \" + tuple.first + \": \" + tuple.second;\n+    }\n+\n+    private Tuple2<String, String> getLabelValueTuple() {\n+        String label;\n+        String value;\n+        checkArgument(!userName.isEmpty() || hasOldAccountId(),\n+                \"Either username must be set or we have an old account with accountId\");\n+        if (!userName.isEmpty()) {\n+            label = Res.get(\"payment.account.userName\");\n+            value = userName;\n+\n+            if (hasOldAccountId()) {\n+                label += \"/\" + Res.get(\"payment.account.phoneNr\");\n+                value += \"/\" + accountId;\n+            }\n+        } else {\n+            label = Res.get(\"payment.account.phoneNr\");\n+            value = accountId;\n+        }\n+        return new Tuple2<>(label, value);\n+    }\n+\n+    public Tuple2<String, String> getRecipientsAccountData() {\n+        Tuple2<String, String> tuple = getLabelValueTuple();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3383dbbe3dc567956fe782ec826c82c2db6d9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MzA4MQ==", "bodyText": "I am not a fan of 'var', prefer to have the type information more explicit. I know in such a small context it does not make much difference, but in larger context it does.", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r484093081", "createdAt": "2020-09-06T17:08:14Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "diffHunk": "@@ -105,7 +110,34 @@ public static RevolutAccountPayload fromProto(protobuf.PaymentAccountPayload pro\n \n     @Override\n     public String getPaymentDetails() {\n-        return Res.get(paymentMethodId) + \" - \" + Res.getWithCol(\"payment.account.userName\") + \" \" + getUserName();\n+        Tuple2<String, String> tuple = getLabelValueTuple();\n+        return Res.get(paymentMethodId) + \" - \" + tuple.first + \": \" + tuple.second;\n+    }\n+\n+    private Tuple2<String, String> getLabelValueTuple() {\n+        String label;\n+        String value;\n+        checkArgument(!userName.isEmpty() || hasOldAccountId(),\n+                \"Either username must be set or we have an old account with accountId\");\n+        if (!userName.isEmpty()) {\n+            label = Res.get(\"payment.account.userName\");\n+            value = userName;\n+\n+            if (hasOldAccountId()) {\n+                label += \"/\" + Res.get(\"payment.account.phoneNr\");\n+                value += \"/\" + accountId;\n+            }\n+        } else {\n+            label = Res.get(\"payment.account.phoneNr\");\n+            value = accountId;\n+        }\n+        return new Tuple2<>(label, value);\n+    }\n+\n+    public Tuple2<String, String> getRecipientsAccountData() {\n+        Tuple2<String, String> tuple = getLabelValueTuple();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzY2NA=="}, "originalCommit": {"oid": "97d3383dbbe3dc567956fe782ec826c82c2db6d9"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzcxODcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoyNjowMlrOHPKB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoyNjowMlrOHPKB7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NTAyMA==", "bodyText": "I just tried to create a new Revolut account and saw that it doesn't behave as expected.\n\n\nThe problem is that it is checked at this place if the accountId is empty which will only work for the first character entered into the field e.g. B of Bobby this ends up with accountId set to B and userName set to Bobby", "url": "https://github.com/bisq-network/bisq/pull/4481#discussion_r485655020", "createdAt": "2020-09-09T14:26:02Z", "author": {"login": "ripcurlx"}, "path": "core/src/main/java/bisq/core/payment/payload/RevolutAccountPayload.java", "diffHunk": "@@ -116,23 +148,30 @@ public String getPaymentDetailsForTradePopup() {\n     @Override\n     public byte[] getAgeWitnessInputData() {\n         // getAgeWitnessInputData is called at new account creation when accountId is empty string.\n-        return super.getAgeWitnessInputData(accountId.getBytes(StandardCharsets.UTF_8));\n+        if (hasOldAccountId()) {\n+            // If the accountId was already in place (updated user who had used accountId for account age) we keep the\n+            // old accountId to not invalidate the existing account age witness.\n+            return super.getAgeWitnessInputData(accountId.getBytes(StandardCharsets.UTF_8));\n+\n+        } else {\n+            // If a new account was registered from version 1.3.8 or later we use the userName.\n+            return super.getAgeWitnessInputData(userName.getBytes(StandardCharsets.UTF_8));\n+        }\n     }\n \n-    public void setUserName(@Nullable String userName) {\n-        this.userName = userName;\n-        // We only set accountId to userName for new accounts. Existing accounts have accountId set with email\n-        // or phone nr. and we keep that to not break account signing.\n-        if (accountId.isEmpty()) {\n-            accountId = userName;\n-        }\n+    public boolean userNameNotSet() {\n+        return userName.isEmpty();\n     }\n \n-    public String getUserName() {\n-        return userName != null ? userName : accountId;\n+    public boolean hasOldAccountId() {\n+        return !accountId.equals(userName);\n     }\n \n-    public boolean userNameNotSet() {\n-        return userName == null;\n+    public void setUserName(String userName) {\n+        this.userName = userName;\n+        // We need to set accountId as pre v1.3.8 clients expect the accountId field\n+        if (accountId.isEmpty()) {\n+            accountId = userName;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3383dbbe3dc567956fe782ec826c82c2db6d9"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2431, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}