{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzE4NTU0", "number": 4525, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MTowOFrOEkFpXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MTowOFrOEkFpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc2NzAxOnYy", "diffSide": "RIGHT", "path": "apitest/src/test/java/bisq/apitest/method/RegisterDisputeAgentsTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MTowOFrOHS0NvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODo1NzoyNVrOHUtv0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MTkwMQ==", "bodyText": "Relying on string matching for tests makes them fragile. At a minimum we should probably add a note for strings that are used in this way.", "url": "https://github.com/bisq-network/bisq/pull/4525#discussion_r489491901", "createdAt": "2020-09-16T14:41:08Z", "author": {"login": "sqrrm"}, "path": "apitest/src/test/java/bisq/apitest/method/RegisterDisputeAgentsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.RegisterDisputeAgentRequest;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.arbdaemon;\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class RegisterDisputeAgentsTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,arbdaemon\");\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testRegisterArbitratorShouldThrowException() {\n+        var req =\n+                createRegisterDisputeAgentRequest(\"arbitrator\");\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs(arbdaemon).disputeAgentsService.registerDisputeAgent(req));\n+        assertEquals(\"INVALID_ARGUMENT: arbitrators must be registered in a Bisq UI\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8384dd80049a5e1f05212e78b15551eb2c3f81e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwODA0MA==", "bodyText": "I will fix this in another PR.", "url": "https://github.com/bisq-network/bisq/pull/4525#discussion_r489508040", "createdAt": "2020-09-16T15:01:38Z", "author": {"login": "ghubstan"}, "path": "apitest/src/test/java/bisq/apitest/method/RegisterDisputeAgentsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.RegisterDisputeAgentRequest;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.arbdaemon;\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class RegisterDisputeAgentsTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,arbdaemon\");\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testRegisterArbitratorShouldThrowException() {\n+        var req =\n+                createRegisterDisputeAgentRequest(\"arbitrator\");\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs(arbdaemon).disputeAgentsService.registerDisputeAgent(req));\n+        assertEquals(\"INVALID_ARGUMENT: arbitrators must be registered in a Bisq UI\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MTkwMQ=="}, "originalCommit": {"oid": "8384dd80049a5e1f05212e78b15551eb2c3f81e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwOTQwNQ==", "bodyText": "Yeah, I think this happens quite a bit in other tests as well iirc. Not urgent, but good to have a better solution for the future.", "url": "https://github.com/bisq-network/bisq/pull/4525#discussion_r489509405", "createdAt": "2020-09-16T15:03:25Z", "author": {"login": "sqrrm"}, "path": "apitest/src/test/java/bisq/apitest/method/RegisterDisputeAgentsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.RegisterDisputeAgentRequest;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.arbdaemon;\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class RegisterDisputeAgentsTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,arbdaemon\");\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testRegisterArbitratorShouldThrowException() {\n+        var req =\n+                createRegisterDisputeAgentRequest(\"arbitrator\");\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs(arbdaemon).disputeAgentsService.registerDisputeAgent(req));\n+        assertEquals(\"INVALID_ARGUMENT: arbitrators must be registered in a Bisq UI\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MTkwMQ=="}, "originalCommit": {"oid": "8384dd80049a5e1f05212e78b15551eb2c3f81e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ4MzA5MQ==", "bodyText": "This string matching problem has bitten me a few times, when I misspelled \"bitciond\" in some test case setups.\nPR 4540 fixes it.", "url": "https://github.com/bisq-network/bisq/pull/4525#discussion_r491483091", "createdAt": "2020-09-19T18:57:25Z", "author": {"login": "ghubstan"}, "path": "apitest/src/test/java/bisq/apitest/method/RegisterDisputeAgentsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.RegisterDisputeAgentRequest;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.arbdaemon;\n+import static bisq.common.app.DevEnv.DEV_PRIVILEGE_PRIV_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class RegisterDisputeAgentsTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,arbdaemon\");\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testRegisterArbitratorShouldThrowException() {\n+        var req =\n+                createRegisterDisputeAgentRequest(\"arbitrator\");\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs(arbdaemon).disputeAgentsService.registerDisputeAgent(req));\n+        assertEquals(\"INVALID_ARGUMENT: arbitrators must be registered in a Bisq UI\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MTkwMQ=="}, "originalCommit": {"oid": "8384dd80049a5e1f05212e78b15551eb2c3f81e1"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2449, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}