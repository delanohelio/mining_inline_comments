{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTEwNjE4", "number": 4025, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNDoyMVrODmIqIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNzozN1rODmIq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzE0MzM4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNDoyMVrOFzYeVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNDoyMVrOFzYeVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMjY3OQ==", "bodyText": "I find the method name a bit confusing as it is only synchronized in ThreadedPersistableEnvelope but here we use mapping to userThread. I would recommend using toPersistableMessage as stated above.", "url": "https://github.com/bisq-network/bisq/pull/4025#discussion_r389422679", "createdAt": "2020-03-09T00:24:21Z", "author": {"login": "ManfredKarrer"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "diffHunk": "@@ -18,9 +18,23 @@\n package bisq.common.proto.persistable;\n \n import bisq.common.Envelope;\n+import bisq.common.UserThread;\n+\n+import com.google.protobuf.Message;\n+\n+import com.google.common.util.concurrent.Futures;\n+\n+import java.util.concurrent.FutureTask;\n \n /**\n  * Interface for the outside envelope object persisted to disk.\n  */\n public interface PersistableEnvelope extends Envelope {\n+\n+    default Message toProtoMessageSynchronized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6487f92d84257d80b4b6795c53ab7380378f7e18"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzE0NTQxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNzozN1rOFzYfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyNzozN1rOFzYfbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMjk1Ng==", "bodyText": "Maybe its better to use a specific interface here as well like in ThreadedPersistableEnvelope? Might make it more explicit that we alter the basic non-thread-safe but fast behaviour. We could use then toPersistableMessage as method name for all 3 cases and the interface marks which style is actually used. Would make it also a bit more distinct from the generic toProtoMessage method and shows its only relevant for persisting an envelope.", "url": "https://github.com/bisq-network/bisq/pull/4025#discussion_r389422956", "createdAt": "2020-03-09T00:27:37Z", "author": {"login": "ManfredKarrer"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "diffHunk": "@@ -18,9 +18,23 @@\n package bisq.common.proto.persistable;\n \n import bisq.common.Envelope;\n+import bisq.common.UserThread;\n+\n+import com.google.protobuf.Message;\n+\n+import com.google.common.util.concurrent.Futures;\n+\n+import java.util.concurrent.FutureTask;\n \n /**\n  * Interface for the outside envelope object persisted to disk.\n  */\n public interface PersistableEnvelope extends Envelope {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6487f92d84257d80b4b6795c53ab7380378f7e18"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2543, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}