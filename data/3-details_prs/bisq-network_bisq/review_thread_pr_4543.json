{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDIxNzkx", "number": 4543, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowNDoxNlrOEnAm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozMTo0NVrOEnZqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzM5ODU5OnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesDataModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowNDoxNlrOHXXMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo0NDo1OVrOHYCFSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTI4Ng==", "bodyText": "This should be warning level log, error better used for unexpected code paths.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494259286", "createdAt": "2020-09-24T12:04:16Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesDataModel.java", "diffHunk": "@@ -536,6 +538,25 @@ private void doOpenDispute(boolean isSupportTicket, Transaction depositTx) {\n         // In case we re-open a dispute we allow Trade.DisputeState.REFUND_REQUESTED\n         useRefundAgent = disputeState == Trade.DisputeState.MEDIATION_CLOSED || disputeState == Trade.DisputeState.REFUND_REQUESTED;\n \n+        AtomicReference<String> donationAddressString = new AtomicReference<>(\"\");\n+        Transaction delayedPayoutTx = trade.getDelayedPayoutTx();\n+        try {\n+            DelayedPayoutTxValidation.validatePayoutTx(trade,\n+                    delayedPayoutTx,\n+                    daoFacade,\n+                    btcWalletService,\n+                    donationAddressString::set);\n+        } catch (DelayedPayoutTxValidation.DonationAddressException |\n+                DelayedPayoutTxValidation.InvalidTxException |\n+                DelayedPayoutTxValidation.InvalidLockTimeException |\n+                DelayedPayoutTxValidation.MissingDelayedPayoutTxException |\n+                DelayedPayoutTxValidation.AmountMismatchException e) {\n+            // The peer sent us an invalid donation address. We do not return here as we don't want to break\n+            // mediation/arbitration and log only the issue. The dispute agent will run validation as well and will get\n+            // a popup displayed to react.\n+            log.error(\"Donation address invalid. {}\", e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f1cbbd00ec77ee6d8dc18bd07ea3552cb359037"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2MTk5Mg==", "bodyText": "Agree.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494961992", "createdAt": "2020-09-25T12:44:59Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/portfolio/pendingtrades/PendingTradesDataModel.java", "diffHunk": "@@ -536,6 +538,25 @@ private void doOpenDispute(boolean isSupportTicket, Transaction depositTx) {\n         // In case we re-open a dispute we allow Trade.DisputeState.REFUND_REQUESTED\n         useRefundAgent = disputeState == Trade.DisputeState.MEDIATION_CLOSED || disputeState == Trade.DisputeState.REFUND_REQUESTED;\n \n+        AtomicReference<String> donationAddressString = new AtomicReference<>(\"\");\n+        Transaction delayedPayoutTx = trade.getDelayedPayoutTx();\n+        try {\n+            DelayedPayoutTxValidation.validatePayoutTx(trade,\n+                    delayedPayoutTx,\n+                    daoFacade,\n+                    btcWalletService,\n+                    donationAddressString::set);\n+        } catch (DelayedPayoutTxValidation.DonationAddressException |\n+                DelayedPayoutTxValidation.InvalidTxException |\n+                DelayedPayoutTxValidation.InvalidLockTimeException |\n+                DelayedPayoutTxValidation.MissingDelayedPayoutTxException |\n+                DelayedPayoutTxValidation.AmountMismatchException e) {\n+            // The peer sent us an invalid donation address. We do not return here as we don't want to break\n+            // mediation/arbitration and log only the issue. The dispute agent will run validation as well and will get\n+            // a popup displayed to react.\n+            log.error(\"Donation address invalid. {}\", e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTI4Ng=="}, "originalCommit": {"oid": "4f1cbbd00ec77ee6d8dc18bd07ea3552cb359037"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQyMzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/trade/DelayedPayoutTxValidation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxMDo1M1rOHXXbNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo1Mjo0MFrOHYCV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MzA5Mw==", "bodyText": "I'm thinking we should phase out the older addresses and reject them if used for new trades.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494263093", "createdAt": "2020-09-24T12:10:53Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/DelayedPayoutTxValidation.java", "diffHunk": "@@ -83,26 +80,33 @@\n         }\n     }\n \n-    public static boolean isValidDonationAddress(Dispute dispute, DaoFacade daoFacade) {\n-        String addressAsString = dispute.getDonationAddressOfDelayedPayoutTx();\n+    public static void validateDonationAddress(String addressAsString, DaoFacade daoFacade)\n+            throws DonationAddressException {\n \n-        // Old clients don't have it set yet. Can be removed after a forced update\n         if (addressAsString == null) {\n-            return true;\n+            return;\n         }\n \n-        // We use all past addresses from DAO param changes as the dispute case might have been opened later and the\n-        // DAO param changed in the meantime.\n+        // We support any of the past addresses as well as in case the peer has not enabled the DAO or is out of sync we\n+        // do not want to break validation.\n         Set<String> allPastParamValues = daoFacade.getAllPastParamValues(Param.RECIPIENT_BTC_ADDRESS);\n \n-        if (allPastParamValues.contains(addressAsString)) {\n-            return true;\n-        }\n+        // If Dao is deactivated we need to add the default address as getAllPastParamValues will not return us any.\n+        allPastParamValues.add(Param.RECIPIENT_BTC_ADDRESS.getDefaultValue());\n+\n+        // If Dao is deactivated we need to add the past addresses used as well.\n+        // This list need to be updated once a new address gets defined.\n+        allPastParamValues.add(\"3EtUWqsGThPtjwUczw27YCo6EWvQdaPUyp\"); // burning man 2019\n+        allPastParamValues.add(\"3A8Zc1XioE2HRzYfbb5P8iemCS72M6vRJV\"); // burningman2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48abbf575531f9e26fe00072ce48a1dd3c3bd8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2MzQ5Nw==", "bodyText": "There are still too many trades with those. I don't know exactly why that happens but could partially reproduce it with quick test with some out of sync DAO state. I think letting them fail is a bit harsh.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494963497", "createdAt": "2020-09-25T12:47:44Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/trade/DelayedPayoutTxValidation.java", "diffHunk": "@@ -83,26 +80,33 @@\n         }\n     }\n \n-    public static boolean isValidDonationAddress(Dispute dispute, DaoFacade daoFacade) {\n-        String addressAsString = dispute.getDonationAddressOfDelayedPayoutTx();\n+    public static void validateDonationAddress(String addressAsString, DaoFacade daoFacade)\n+            throws DonationAddressException {\n \n-        // Old clients don't have it set yet. Can be removed after a forced update\n         if (addressAsString == null) {\n-            return true;\n+            return;\n         }\n \n-        // We use all past addresses from DAO param changes as the dispute case might have been opened later and the\n-        // DAO param changed in the meantime.\n+        // We support any of the past addresses as well as in case the peer has not enabled the DAO or is out of sync we\n+        // do not want to break validation.\n         Set<String> allPastParamValues = daoFacade.getAllPastParamValues(Param.RECIPIENT_BTC_ADDRESS);\n \n-        if (allPastParamValues.contains(addressAsString)) {\n-            return true;\n-        }\n+        // If Dao is deactivated we need to add the default address as getAllPastParamValues will not return us any.\n+        allPastParamValues.add(Param.RECIPIENT_BTC_ADDRESS.getDefaultValue());\n+\n+        // If Dao is deactivated we need to add the past addresses used as well.\n+        // This list need to be updated once a new address gets defined.\n+        allPastParamValues.add(\"3EtUWqsGThPtjwUczw27YCo6EWvQdaPUyp\"); // burning man 2019\n+        allPastParamValues.add(\"3A8Zc1XioE2HRzYfbb5P8iemCS72M6vRJV\"); // burningman2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MzA5Mw=="}, "originalCommit": {"oid": "c48abbf575531f9e26fe00072ce48a1dd3c3bd8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NjIzNg==", "bodyText": "I think it's fair. An easy fix is to download a new version and disable the dao.\nWe don't have a good way to phase out those old addresses, but they are essentially phased out on the DAO side, but traders still use them. It's almost a year later so I think phasing it out is not that bad.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494966236", "createdAt": "2020-09-25T12:52:40Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/trade/DelayedPayoutTxValidation.java", "diffHunk": "@@ -83,26 +80,33 @@\n         }\n     }\n \n-    public static boolean isValidDonationAddress(Dispute dispute, DaoFacade daoFacade) {\n-        String addressAsString = dispute.getDonationAddressOfDelayedPayoutTx();\n+    public static void validateDonationAddress(String addressAsString, DaoFacade daoFacade)\n+            throws DonationAddressException {\n \n-        // Old clients don't have it set yet. Can be removed after a forced update\n         if (addressAsString == null) {\n-            return true;\n+            return;\n         }\n \n-        // We use all past addresses from DAO param changes as the dispute case might have been opened later and the\n-        // DAO param changed in the meantime.\n+        // We support any of the past addresses as well as in case the peer has not enabled the DAO or is out of sync we\n+        // do not want to break validation.\n         Set<String> allPastParamValues = daoFacade.getAllPastParamValues(Param.RECIPIENT_BTC_ADDRESS);\n \n-        if (allPastParamValues.contains(addressAsString)) {\n-            return true;\n-        }\n+        // If Dao is deactivated we need to add the default address as getAllPastParamValues will not return us any.\n+        allPastParamValues.add(Param.RECIPIENT_BTC_ADDRESS.getDefaultValue());\n+\n+        // If Dao is deactivated we need to add the past addresses used as well.\n+        // This list need to be updated once a new address gets defined.\n+        allPastParamValues.add(\"3EtUWqsGThPtjwUczw27YCo6EWvQdaPUyp\"); // burning man 2019\n+        allPastParamValues.add(\"3A8Zc1XioE2HRzYfbb5P8iemCS72M6vRJV\"); // burningman2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MzA5Mw=="}, "originalCommit": {"oid": "c48abbf575531f9e26fe00072ce48a1dd3c3bd8b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzUwNDE0OnYy", "diffSide": "RIGHT", "path": "desktop/src/main/java/bisq/desktop/main/support/dispute/DisputeView.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozMTo0NVrOHX-NKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo1MzozMlrOHYCXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5ODQ3NA==", "bodyText": "Wouldn't it be better to automatically check the signature and add the result to the dispute graphics somewhere? Also, the refundagent gets this message when a user opens a refund case, this message doesn't verify since there is a header from the user included\nSystem message: Mediator's dispute summary:\nMediator's node address: localhost:3600\n\nWithout that header the it would verify. Perhaps we should also make that message autoverify by adding a ----HEADER---- and ----END HEADER---- separator?\nAnother, probably separate issue, the popup from double clicking a chat message cannot be closed nicely (this might be an old thing though), never tried double clicking the messages in the chat.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494898474", "createdAt": "2020-09-25T10:31:45Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/support/dispute/DisputeView.java", "diffHunk": "@@ -222,6 +263,12 @@ public void initialize() {\n             showFullReport();\n         });\n \n+        sigCheckButton = new AutoTooltipButton(Res.get(\"support.sigCheck.button\"));\n+        HBox.setHgrow(sigCheckButton, Priority.NEVER);\n+        sigCheckButton.setOnAction(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81bea14af2145c39473a2cd3aa929b9afcbb357c"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NDQ4MA==", "bodyText": "The signature is not intended as check for the traders/arbitrator as that is anyway part of the p2p messaging (each msg gets checked if it is signed correctly by the sender). It is only intended for DAO voters.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494964480", "createdAt": "2020-09-25T12:49:36Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/support/dispute/DisputeView.java", "diffHunk": "@@ -222,6 +263,12 @@ public void initialize() {\n             showFullReport();\n         });\n \n+        sigCheckButton = new AutoTooltipButton(Res.get(\"support.sigCheck.button\"));\n+        HBox.setHgrow(sigCheckButton, Priority.NEVER);\n+        sigCheckButton.setOnAction(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5ODQ3NA=="}, "originalCommit": {"oid": "81bea14af2145c39473a2cd3aa929b9afcbb357c"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NTIwOQ==", "bodyText": "\"Another, probably separate issue, the popup from double clicking a chat message cannot be closed nicely (this might be an old thing though), never tried double clicking the messages in the chat.\" -> can you make an issue for that. I want not to extend that PR further, already too much ;-)", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494965209", "createdAt": "2020-09-25T12:50:56Z", "author": {"login": "chimp1984"}, "path": "desktop/src/main/java/bisq/desktop/main/support/dispute/DisputeView.java", "diffHunk": "@@ -222,6 +263,12 @@ public void initialize() {\n             showFullReport();\n         });\n \n+        sigCheckButton = new AutoTooltipButton(Res.get(\"support.sigCheck.button\"));\n+        HBox.setHgrow(sigCheckButton, Priority.NEVER);\n+        sigCheckButton.setOnAction(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5ODQ3NA=="}, "originalCommit": {"oid": "81bea14af2145c39473a2cd3aa929b9afcbb357c"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NjY4MA==", "bodyText": "Indeed, will look at that separately.", "url": "https://github.com/bisq-network/bisq/pull/4543#discussion_r494966680", "createdAt": "2020-09-25T12:53:32Z", "author": {"login": "sqrrm"}, "path": "desktop/src/main/java/bisq/desktop/main/support/dispute/DisputeView.java", "diffHunk": "@@ -222,6 +263,12 @@ public void initialize() {\n             showFullReport();\n         });\n \n+        sigCheckButton = new AutoTooltipButton(Res.get(\"support.sigCheck.button\"));\n+        HBox.setHgrow(sigCheckButton, Priority.NEVER);\n+        sigCheckButton.setOnAction(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5ODQ3NA=="}, "originalCommit": {"oid": "81bea14af2145c39473a2cd3aa929b9afcbb357c"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}