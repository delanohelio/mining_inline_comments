{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDY0MzMx", "number": 4692, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzo1Nzo1MVrOExlKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzo1Nzo1MVrOExlKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI0NTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/offer/takeoffer/TakeOfferModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzo1Nzo1MVrOHnzVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxODo0NlrOHqvF8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NzYyNQ==", "bodyText": "I assume that method is only used by API so far. But to make it usable for GUI app as well a blocking request is not possible as it would block the UI thread. Is there a strong reason why you need to do it blocking and not via a callback/result handler design?", "url": "https://github.com/bisq-network/bisq/pull/4692#discussion_r511497625", "createdAt": "2020-10-24T17:57:51Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/offer/takeoffer/TakeOfferModel.java", "diffHunk": "@@ -141,12 +160,19 @@ private void calculateTxFees() {\n         // Payout tx: 371 bytes\n         // Disputed payout tx: 408 bytes\n \n-        // Request actual fees:\n-        log.info(\"Start requestTxFee: txFeeFromFeeService={}\", txFeeFromFeeService);\n-        feeService.requestFees(() -> {\n-            txFeePerByteFromFeeService = feeService.getTxFeePerByte();\n-            txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n-        });\n+        txFeePerByteFromFeeService = getTxFeePerByte();\n+        txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n+        log.info(\"{} txFeePerByte = {}\", feeService.getClass().getSimpleName(), txFeePerByteFromFeeService);\n+    }\n+\n+    private Coin getTxFeePerByte() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb65de6d2e1497eb8eaf86404fc3285729aba87c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MzA4MA==", "bodyText": "My bad, thought this was already used by UI. Would be better to handle this with callbacks. That way it should be usable by both API and UI eventually.", "url": "https://github.com/bisq-network/bisq/pull/4692#discussion_r513083080", "createdAt": "2020-10-27T23:02:53Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/offer/takeoffer/TakeOfferModel.java", "diffHunk": "@@ -141,12 +160,19 @@ private void calculateTxFees() {\n         // Payout tx: 371 bytes\n         // Disputed payout tx: 408 bytes\n \n-        // Request actual fees:\n-        log.info(\"Start requestTxFee: txFeeFromFeeService={}\", txFeeFromFeeService);\n-        feeService.requestFees(() -> {\n-            txFeePerByteFromFeeService = feeService.getTxFeePerByte();\n-            txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n-        });\n+        txFeePerByteFromFeeService = getTxFeePerByte();\n+        txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n+        log.info(\"{} txFeePerByte = {}\", feeService.getClass().getSimpleName(), txFeePerByteFromFeeService);\n+    }\n+\n+    private Coin getTxFeePerByte() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NzYyNQ=="}, "originalCommit": {"oid": "cb65de6d2e1497eb8eaf86404fc3285729aba87c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NjkwMw==", "bodyText": "If I understand correctly (@sqrrm), you want this TakeOfferModel snippet changed to using a callback instead of a CompletableFuture.\nDo you mind if I make this change in a later PR?  I am working on a chain of 15 pr/branches, and this is branch #1 in the chain.", "url": "https://github.com/bisq-network/bisq/pull/4692#discussion_r513086903", "createdAt": "2020-10-27T23:14:39Z", "author": {"login": "ghubstan"}, "path": "core/src/main/java/bisq/core/offer/takeoffer/TakeOfferModel.java", "diffHunk": "@@ -141,12 +160,19 @@ private void calculateTxFees() {\n         // Payout tx: 371 bytes\n         // Disputed payout tx: 408 bytes\n \n-        // Request actual fees:\n-        log.info(\"Start requestTxFee: txFeeFromFeeService={}\", txFeeFromFeeService);\n-        feeService.requestFees(() -> {\n-            txFeePerByteFromFeeService = feeService.getTxFeePerByte();\n-            txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n-        });\n+        txFeePerByteFromFeeService = getTxFeePerByte();\n+        txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n+        log.info(\"{} txFeePerByte = {}\", feeService.getClass().getSimpleName(), txFeePerByteFromFeeService);\n+    }\n+\n+    private Coin getTxFeePerByte() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NzYyNQ=="}, "originalCommit": {"oid": "cb65de6d2e1497eb8eaf86404fc3285729aba87c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MzgxMA==", "bodyText": "Yeah, can be done in a later PR. Having it block is still more correct than before and since this is only used by API for now, it's not a problem to merge.", "url": "https://github.com/bisq-network/bisq/pull/4692#discussion_r514573810", "createdAt": "2020-10-29T21:18:46Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/offer/takeoffer/TakeOfferModel.java", "diffHunk": "@@ -141,12 +160,19 @@ private void calculateTxFees() {\n         // Payout tx: 371 bytes\n         // Disputed payout tx: 408 bytes\n \n-        // Request actual fees:\n-        log.info(\"Start requestTxFee: txFeeFromFeeService={}\", txFeeFromFeeService);\n-        feeService.requestFees(() -> {\n-            txFeePerByteFromFeeService = feeService.getTxFeePerByte();\n-            txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n-        });\n+        txFeePerByteFromFeeService = getTxFeePerByte();\n+        txFeeFromFeeService = offerUtil.getTxFeeBySize(txFeePerByteFromFeeService, feeTxSize);\n+        log.info(\"{} txFeePerByte = {}\", feeService.getClass().getSimpleName(), txFeePerByteFromFeeService);\n+    }\n+\n+    private Coin getTxFeePerByte() {\n+        try {\n+            CompletableFuture<Void> feeRequestFuture = CompletableFuture.runAsync(feeService::requestFees);\n+            feeRequestFuture.get();  // Block until async fee request is complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NzYyNQ=="}, "originalCommit": {"oid": "cb65de6d2e1497eb8eaf86404fc3285729aba87c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}