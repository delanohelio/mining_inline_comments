{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjIzNzcx", "number": 3889, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1NDo0M1rODZJyVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1MDoyNVrODZcvHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzAxMzM1OnYy", "diffSide": "RIGHT", "path": "gradle/witness/gradle-witness.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1NDo0M1rOFfYxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1NToyMlrOFfak5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NjA4MA==", "bodyText": "@cbeams As we decided to be as restrictive as possible with new dependencies: Could you please point out why they are necessary (especially for the non-google libs)? Although they are required for the GRPC API I think it is good practice to have some documentation (even if it is just a comment in the PR) every time we add new dependencies to the project.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368456080", "createdAt": "2020-01-20T09:54:43Z", "author": {"login": "ripcurlx"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,34 +55,61 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MTQ1OA==", "bodyText": "Good catch. Some of these and a number of other dependencies are removed in a commit that currently exists only in my fork's grpc-api branch. These changes were made as part of further refactorings of @chimp1984's original PoC, and it was an oversight that I didn't include them here. It will require some rework of that commit to do so, but is probably worth it to make sure we don't ship a release that includes these deps, even if they will be removed soon thereafter. I'll push that additional commit as soon as possible. Though note that I'll probably push it against the grpc-poc branch (PR #3888), as it's really part of that change as opposed to this one.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368471458", "createdAt": "2020-01-20T10:25:03Z", "author": {"login": "cbeams"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,34 +55,61 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NjA4MA=="}, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3OTMzNA==", "bodyText": "Thanks! Really enjoyed the command line access already \ud83d\udc4d", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368479334", "createdAt": "2020-01-20T10:41:27Z", "author": {"login": "ripcurlx"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,34 +55,61 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NjA4MA=="}, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NTYwNQ==", "bodyText": "@cbeams agreed, makes most sense to push to #3888\nIf there are still new deps please leave a comment in that PR as to why they're reasonable to introduce. I think it will be worthwhile doing that going forward so we have some motivation to refer to.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368485605", "createdAt": "2020-01-20T10:55:22Z", "author": {"login": "sqrrm"}, "path": "gradle/witness/gradle-witness.gradle", "diffHunk": "@@ -46,34 +55,61 @@ dependencyVerification {\n         'com.nativelibs4java:bridj:101bcd9b6637e6bc16e56deb3daefba62b1f5e8e9e37e1b3e56e3b5860d659cf',\n         'com.squareup.okhttp:okhttp:b4c943138fcef2bcc9d2006b2250c4aabbedeafc5947ed7c0af7fd103ceb2707',\n         'com.squareup.okio:okio:114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266',\n-        'commons-codec:commons-codec:ad19d2601c3abf0b946b5c3a4113e226a8c1e3305e395b90013b78dd94a723ce',\n+        'commons-codec:commons-codec:e599d5318e97aa48f42136a2927e6dfa4e8881dff0e6c8e3109ddbbff51d7b7d',\n         'commons-io:commons-io:cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581',\n         'commons-logging:commons-logging:daddea1ea0be0f56978ab3006b8ac92834afeefbd9b7e4e6316fca57df0fa636',\n         'de.jensd:fontawesomefx-commons:5539bb3335ecb822dbf928546f57766eeb9f1516cc1417a064b5709629612149',\n         'de.jensd:fontawesomefx-materialdesignfont:dbad8dfdd1c85e298d5bbae25b2399aec9e85064db57b2427d10f3815aa98752',\n         'de.jensd:fontawesomefx:73bacc991a0a6f5cf0f911767c8db161e0949dbca61e8371eb4342e3da96887b',\n         'io.github.microutils:kotlin-logging:4992504fd3c6ecdf9ed10874b9508e758bb908af9e9d7af19a61e9afb6b7e27a',\n+        'io.grpc:grpc-alts:177aa1e578c10e274f8feedd6f555c2e7741c195a84f533f9a51fb82dbe8a596',\n+        'io.grpc:grpc-api:a269094009588213ab5386a6fb92426b8056a130b2653d3b4e59e971f2f1ef08',\n+        'io.grpc:grpc-auth:782ae07923d53b56f54326e7b32480b425eb3df71deb5a4a33bbfc6487e706a4',\n+        'io.grpc:grpc-context:f4c8f878c320f6fb56c1c14692618f6df8253314b556176e32727afbc5921a73',\n+        'io.grpc:grpc-core:d67fa113fd9cc45a02710f9c41dda9c15191448c14e9e96fcc21839a41345d4c',\n+        'io.grpc:grpc-grpclb:aaac0d6063204dfc52abc51af94f16b6cecfd582bb477ee1d232e42920bf49e3',\n+        'io.grpc:grpc-netty-shaded:9edfd45da473d2efbb5683fc3eaf1857e82d2148033d82dd558a7ac38731ea33',\n+        'io.grpc:grpc-netty:167e834788f6d4f7bd129bfb244d4e09d061a0e7165288378386ae871e3cfe51',\n+        'io.grpc:grpc-protobuf-lite:9ba9aaa3e6997a04c707793c25e3ec88c6bad86f8d6f6b8b7a1a0c33ea2429d8',\n+        'io.grpc:grpc-protobuf:454dae7e246dac25526ed5b795d97a5dafedd3cc2042cfc810f02051d7d3e3cb',\n+        'io.grpc:grpc-stub:1532e291c0e9fd8230a6416c8ebbd902d99c7e2760241ae638ea761aa3dd5f43',\n+        'io.netty:netty-buffer:7b0171a4e8bcd573e08d9f2bba053c67b557ab5012106a5982ccbae5743814c0',\n+        'io.netty:netty-codec-http2:8bac9625eb68635396eb0c13c9cc0b22bde7c83d0cd2dae3fe9b6f9cf929e372',\n+        'io.netty:netty-codec-http:eb349c0f1b249af7c7a8fbbd1c761d65d9bc230880cd8d37feab9e8278292625',\n+        'io.netty:netty-codec-socks:7f14b3a95ee9aa5a26f66af668690578a81a883683ac1c4ca9e9afdf4d4c7894',\n+        'io.netty:netty-codec:e96ced697fb7df589da7c20c995e01f75a9cb246be242bbc4cd3b4af424ff189',\n+        'io.netty:netty-common:3d0a918d78292eeca02a7bb2188daa4e5053b6e29b71e6308309033e121242b5',\n+        'io.netty:netty-handler-proxy:25f22da21c29ab0d3b6b889412351bcfc5f9ccd42e07d2d5513d5c4eb571f343',\n+        'io.netty:netty-handler:11eda86500c33b9d386719b5419f513fd9c097d13894f25dd0c75b610d636e03',\n+        'io.netty:netty-resolver:89768242b6b7cce9bd9f5945ad21d1b4bae515c6b1bf03a8af5d1899779cebc9',\n+        'io.netty:netty-tcnative-boringssl-static:0ea1a935a1023a88e99a4f9b1aba2e3ff2799d4d1994f4bff848f85b367d48ed',\n+        'io.netty:netty-transport:dfa817a156ea263aa9ad8364a2e226527665c9722aca40a7945f228c2c14f1da',\n+        'io.opencensus:opencensus-api:8e2cb0f6391d8eb0a1bcd01e7748883f0033b1941754f4ed3f19d2c3e4276fc8',\n+        'io.opencensus:opencensus-contrib-grpc-metrics:29fc79401082301542cab89d7054d2f0825f184492654c950020553ef4ff0ef8',\n+        'io.opencensus:opencensus-contrib-http-util:d62fd27175a842bde135f6f6b1d6f25d42e9bd59a87bc98709a4760fe399ee14',\n+        'io.perfmark:perfmark-api:b734ba2149712409a44eabdb799f64768578fee0defe1418bb108fe32ea43e1a',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NjA4MA=="}, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzEzMDg0OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMDoyNVrOFfZ31Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMzoxN1rOFfZ9Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDA2OQ==", "bodyText": "NIT: 0.12 should be at least 0.15 otherwise the security deposit is too low for our current setup", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474069", "createdAt": "2020-01-20T10:30:25Z", "author": {"login": "ripcurlx"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTQ5MA==", "bodyText": "Please add this comment to #3888.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368475490", "createdAt": "2020-01-20T10:33:17Z", "author": {"login": "cbeams"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDA2OQ=="}, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzEzMjM2OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMDo1OFrOFfZ4vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMTo1NVrOFfZ6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDMwMw==", "bodyText": "Somehow this command didn't work for me.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474303", "createdAt": "2020-01-20T10:30:58Z", "author": {"login": "ripcurlx"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDc3NQ==", "bodyText": "Please add this comment to #3888.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474775", "createdAt": "2020-01-20T10:31:55Z", "author": {"login": "cbeams"}, "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDMwMw=="}, "originalCommit": {"oid": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODQ5MDc0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxODoyOToxNlrOFfmgDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjoxODoxMVrOFf4A0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4MDk3NA==", "bodyText": "This goes against our style of not using exceptions as a part of the expected execution flow.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368680974", "createdAt": "2020-01-20T18:29:16Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2Nzg4OQ==", "bodyText": "Looks like this was removed at some point and I missed that.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368967889", "createdAt": "2020-01-21T12:18:11Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4MDk3NA=="}, "originalCommit": {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDExMjIwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0ODozNlrOFf1tJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0ODozNlrOFf1tJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMDA4NQ==", "bodyText": "Prefer braces...", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368930085", "createdAt": "2020-01-21T10:48:36Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDExMzIwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0ODo0OVrOFf1tsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0ODo0OVrOFf1tsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMDIyNA==", "bodyText": "...for all blocks.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368930224", "createdAt": "2020-01-21T10:48:49Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)\n+            if (configFileOpts.has(disallowedOpt))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDExODA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/bisq/common/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1MDoyNVrOFf1wzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1MDoyNVrOFf1wzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTAyMA==", "bodyText": "Prefer braces even for single, unbroken line blocks, but I don't think we have completely agreed on that one.", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368931020", "createdAt": "2020-01-21T10:50:25Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)\n+            if (configFileOpts.has(disallowedOpt))\n+                throw new IllegalArgumentException(\n+                        format(\"The '%s' option is disallowed in config files\", disallowedOpt.options().get(0)));\n+\n+        return Optional.of(configFileOpts);\n+    }\n+\n+    public String getDefaultAppName() {\n+        return defaultAppName;\n+    }\n+\n+    public File getDefaultUserDataDir() {\n+        if (Utilities.isWindows())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8"}, "originalPosition": 259}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2596, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}