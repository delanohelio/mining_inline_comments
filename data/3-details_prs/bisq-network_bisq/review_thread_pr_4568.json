{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDcwMTY0", "number": 4568, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMDo0OFrOEqajsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMDo1MFrOErxfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEwNzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMDo0OFrOHcm7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToyMTozM1rOHcuOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDAzOA==", "bodyText": "Is that never called from a trade protocol entry? e.g. the one for the multisig.", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r499760038", "createdAt": "2020-10-05T17:30:48Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -584,23 +584,13 @@ public AddressEntry getOrCreateAddressEntry(String offerId, AddressEntry.Context\n             if (emptyAvailableAddressEntry.isPresent()) {\n                 return addressEntryList.swapAvailableToAddressEntryWithOfferId(emptyAvailableAddressEntry.get(), context, offerId);\n             } else {\n-                AddressEntry entry = new AddressEntry(wallet.freshReceiveKey(), context, offerId);\n+                AddressEntry entry = new AddressEntry(wallet.freshReceiveKey(), context, offerId, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2416aecf7cadeef473bb610cfc9448daaa749d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3OTU1OA==", "bodyText": "It seems you commented on outdated code.", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r499879558", "createdAt": "2020-10-05T21:21:33Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/BtcWalletService.java", "diffHunk": "@@ -584,23 +584,13 @@ public AddressEntry getOrCreateAddressEntry(String offerId, AddressEntry.Context\n             if (emptyAvailableAddressEntry.isPresent()) {\n                 return addressEntryList.swapAvailableToAddressEntryWithOfferId(emptyAvailableAddressEntry.get(), context, offerId);\n             } else {\n-                AddressEntry entry = new AddressEntry(wallet.freshReceiveKey(), context, offerId);\n+                AddressEntry entry = new AddressEntry(wallet.freshReceiveKey(), context, offerId, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDAzOA=="}, "originalCommit": {"oid": "5f2416aecf7cadeef473bb610cfc9448daaa749d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEyODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNzowOVrOHcnIww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToxNzo1NVrOHcuH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MzM5NQ==", "bodyText": "Instead of depositTx.getInputs().size()-1) I would suggest to make a local var from the getTransactionInput(depositTx, getMakersScriptSigProgram(transactionInput), buyerInputs.get(i)) we add earlier so its more clear. Maybe even do the check before adding, technically no difference but somehow more clean if the input gets completely defined before added.", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r499763395", "createdAt": "2020-10-05T17:37:09Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -601,6 +603,9 @@ public Transaction takerSignsDepositTx(boolean takerIsSeller,\n             for (int i = 0; i < buyerInputs.size(); i++) {\n                 TransactionInput transactionInput = makersDepositTx.getInputs().get(i);\n                 depositTx.addInput(getTransactionInput(depositTx, getMakersScriptSigProgram(transactionInput), buyerInputs.get(i)));\n+                if (!TransactionWitness.EMPTY.equals(transactionInput.getWitness())) {\n+                    depositTx.getInput(depositTx.getInputs().size()-1).setWitness(transactionInput.getWitness());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c28ff3d28de4e2e621ec63c4826f6e034d2239f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTA0NQ==", "bodyText": "As we do not support now segwit in the trade process, is that change needed at all? I dont see a risk to have it there but maybe better to leave all that out until we start adding segwit support to the trade protocol? Not sure if you started already in more pleaces to add support which do not interfere (as we discussed it is our strategy to add as much as possible without activating segwit in trade protocol...), so if you have started that process already all find, otherwise if its a single change it would be maybe more clear to start after the release with that process...", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r499765045", "createdAt": "2020-10-05T17:40:19Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -601,6 +603,9 @@ public Transaction takerSignsDepositTx(boolean takerIsSeller,\n             for (int i = 0; i < buyerInputs.size(); i++) {\n                 TransactionInput transactionInput = makersDepositTx.getInputs().get(i);\n                 depositTx.addInput(getTransactionInput(depositTx, getMakersScriptSigProgram(transactionInput), buyerInputs.get(i)));\n+                if (!TransactionWitness.EMPTY.equals(transactionInput.getWitness())) {\n+                    depositTx.getInput(depositTx.getInputs().size()-1).setWitness(transactionInput.getWitness());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MzM5NQ=="}, "originalCommit": {"oid": "6c28ff3d28de4e2e621ec63c4826f6e034d2239f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3Nzg2MA==", "bodyText": "You seem to be right. In any case, it causes no harm.", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r499877860", "createdAt": "2020-10-05T21:17:55Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/wallet/TradeWalletService.java", "diffHunk": "@@ -601,6 +603,9 @@ public Transaction takerSignsDepositTx(boolean takerIsSeller,\n             for (int i = 0; i < buyerInputs.size(); i++) {\n                 TransactionInput transactionInput = makersDepositTx.getInputs().get(i);\n                 depositTx.addInput(getTransactionInput(depositTx, getMakersScriptSigProgram(transactionInput), buyerInputs.get(i)));\n+                if (!TransactionWitness.EMPTY.equals(transactionInput.getWitness())) {\n+                    depositTx.getInput(depositTx.getInputs().size()-1).setWitness(transactionInput.getWitness());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MzM5NQ=="}, "originalCommit": {"oid": "6c28ff3d28de4e2e621ec63c4826f6e034d2239f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzM1MDM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/bisq/core/btc/setup/WalletConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMDo1MFrOHeuscg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoyNzoxOVrOHevMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NDM3MA==", "bodyText": "I think we should add a if(newValue) to make it more clear/safe. As we change only once from false to true it would not matter but feels more correct.", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r501984370", "createdAt": "2020-10-08T20:10:50Z", "author": {"login": "chimp1984"}, "path": "core/src/main/java/bisq/core/btc/setup/WalletConfig.java", "diffHunk": "@@ -293,25 +301,34 @@ protected void startUp() throws Exception {\n             vPeerGroup.addWallet(vBsqWallet);\n             onSetupCompleted();\n \n-            Futures.addCallback((ListenableFuture<?>) vPeerGroup.startAsync(), new FutureCallback<Object>() {\n-                @Override\n-                public void onSuccess(@Nullable Object result) {\n-                    //completeExtensionInitiations(vPeerGroup);\n-                    DownloadProgressTracker tracker = downloadListener == null ? new DownloadProgressTracker() : downloadListener;\n-                    vPeerGroup.startBlockChainDownload(tracker);\n-                }\n-\n-                @Override\n-                public void onFailure(Throwable t) {\n-                    throw new RuntimeException(t);\n+            if (migratedWalletToSegwit.get()) {\n+                startPeerGroup();\n+            } else {\n+                migratedWalletToSegwit.addListener((observable, oldValue, newValue) -> startPeerGroup());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a747e83211492a8d10ef4ce59d3c4cab99074948"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MjQ4NA==", "bodyText": "Fixed 261e0ec", "url": "https://github.com/bisq-network/bisq/pull/4568#discussion_r501992484", "createdAt": "2020-10-08T20:27:19Z", "author": {"login": "oscarguindzberg"}, "path": "core/src/main/java/bisq/core/btc/setup/WalletConfig.java", "diffHunk": "@@ -293,25 +301,34 @@ protected void startUp() throws Exception {\n             vPeerGroup.addWallet(vBsqWallet);\n             onSetupCompleted();\n \n-            Futures.addCallback((ListenableFuture<?>) vPeerGroup.startAsync(), new FutureCallback<Object>() {\n-                @Override\n-                public void onSuccess(@Nullable Object result) {\n-                    //completeExtensionInitiations(vPeerGroup);\n-                    DownloadProgressTracker tracker = downloadListener == null ? new DownloadProgressTracker() : downloadListener;\n-                    vPeerGroup.startBlockChainDownload(tracker);\n-                }\n-\n-                @Override\n-                public void onFailure(Throwable t) {\n-                    throw new RuntimeException(t);\n+            if (migratedWalletToSegwit.get()) {\n+                startPeerGroup();\n+            } else {\n+                migratedWalletToSegwit.addListener((observable, oldValue, newValue) -> startPeerGroup());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NDM3MA=="}, "originalCommit": {"oid": "a747e83211492a8d10ef4ce59d3c4cab99074948"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2368, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}