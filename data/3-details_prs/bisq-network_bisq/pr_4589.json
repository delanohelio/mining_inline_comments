{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NjY2NTUy", "number": 4589, "title": "Persistence redesign", "bodyText": "Based on #4586\nReplaces #4527\nAttempt for a more clean commit history (still a lot). As merge was getting pretty difficult I decided to re-apply all changes again and compare with old PR code and with base of #4586. Hope no bugs entered by the challenging merge process.\nUpdate: As #4586 is now merged to master this PR got rebased on master.", "createdAt": "2020-10-02T04:06:15Z", "url": "https://github.com/bisq-network/bisq/pull/4589", "merged": true, "mergeCommit": {"oid": "fd65bcc4ec2804f4e2cf4f2ff0031d4436650e1e"}, "closed": true, "closedAt": "2020-10-04T21:29:15Z", "author": {"login": "chimp1984"}, "timelineItems": {"totalCount": 96, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOtKSCABqjM4MzU3NTcwODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPWEZmgFqTUwMTY2MTAxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f8014440567e2090c587d0c159715be615eed38", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6f8014440567e2090c587d0c159715be615eed38", "committedDate": "2020-10-02T21:43:41Z", "message": "Merge branch 'master_upstream' into persistence-redesign"}, "afterCommit": {"oid": "207d0989612c70dadb7d333cbedced06b9cf3548", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/207d0989612c70dadb7d333cbedced06b9cf3548", "committedDate": "2020-10-02T21:48:37Z", "message": "Fix rename mistakes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aff1f8665e4446179451d883cc2bda964ed6f16", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8aff1f8665e4446179451d883cc2bda964ed6f16", "committedDate": "2020-10-03T17:48:14Z", "message": "Refactor: Move FileUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23507102ddad8a842a252e61396c75f851308543", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/23507102ddad8a842a252e61396c75f851308543", "committedDate": "2020-10-03T17:48:14Z", "message": "Refactor: Move CorruptedDatabaseFilesHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda9d9eccf32804e62fa82c83f87da9c9b3ad419", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/cda9d9eccf32804e62fa82c83f87da9c9b3ad419", "committedDate": "2020-10-03T17:48:14Z", "message": "Refactor: Move other 2 classes to file package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "802dcad2fb4fab976f618bc94b5ca0ab9021d04a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/802dcad2fb4fab976f618bc94b5ca0ab9021d04a", "committedDate": "2020-10-03T17:48:14Z", "message": "Refactor: Rename CorruptedDatabaseFilesHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27e4dc24970204e04ced49ff87aff7f4f4c1b60", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d27e4dc24970204e04ced49ff87aff7f4f4c1b60", "committedDate": "2020-10-03T17:48:14Z", "message": "Refactor: Rename fields and methods, return early"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f6836f733bc571836ab6d981fa94887d10b434d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6f6836f733bc571836ab6d981fa94887d10b434d", "committedDate": "2020-10-03T17:48:15Z", "message": "Refactor: Add removeAndBackupFile method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b33bcfce2532e7d7bd579e8d733b10c955adca", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/85b33bcfce2532e7d7bd579e8d733b10c955adca", "committedDate": "2020-10-03T17:48:15Z", "message": "Remove awaitTermination\nRemove UserThread.execute on shutdown\nRename threadname"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c9c3cd7e4ae27e5c2446cf73b024e94756d756", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/92c9c3cd7e4ae27e5c2446cf73b024e94756d756", "committedDate": "2020-10-03T17:48:15Z", "message": "Add getDefaultStorageFileName method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "937c006d73ebb2cfeb590d54a908b3073eaf3c9a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/937c006d73ebb2cfeb590d54a908b3073eaf3c9a", "committedDate": "2020-10-03T17:48:15Z", "message": "Add PersistenceManager class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd0cc63e7cb0611fc68e1bbb5f5ac3156ac1e365", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fd0cc63e7cb0611fc68e1bbb5f5ac3156ac1e365", "committedDate": "2020-10-03T17:48:15Z", "message": "Refactor: use FileUtil.removeAndBackupFile instead of FileManager.removeAndBackupFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c245026eff44e5c0b582ebfaccf801c2c90b1581", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c245026eff44e5c0b582ebfaccf801c2c90b1581", "committedDate": "2020-10-03T17:48:15Z", "message": "Remove Storage and FileManager from logback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93f1108a776fa6d1e0478ec3eb1025350b6ddddf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/93f1108a776fa6d1e0478ec3eb1025350b6ddddf", "committedDate": "2020-10-03T17:48:15Z", "message": "Add PersistenceManager.flushAllDataToDisk to shutdown to write all pending data to disk\nUse new readAllPersisted method instead of setupPersistedDataHosts. Run read tasks in a thread in parallel.\n\nRead is only done at startup.\n\nRemove unused restart method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3ded6acfe9b6bca2f32ce5302fb697443e22f0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4f3ded6acfe9b6bca2f32ce5302fb697443e22f0", "committedDate": "2020-10-03T17:48:15Z", "message": "Use PersistenceManager instead of Storage for import/export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d9338615a48d30bd72efd31db186b7a629819c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/35d9338615a48d30bd72efd31db186b7a629819c", "committedDate": "2020-10-03T17:48:15Z", "message": "Remove UserThreadMappedPersistableList and use PersistableList instead\n\nWe will not need threading support anymore once we use the new persistenceManager as serialisation is done on the userThread."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3be8dd48bc4197d4ba50aac3e3d5f9ebbe13669", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d3be8dd48bc4197d4ba50aac3e3d5f9ebbe13669", "committedDate": "2020-10-03T17:48:16Z", "message": "Remove UserThreadMappedPersistableEnvelope and use PersistableEnvelope instead\n\nWe will not need threading support anymore once we use the new persistenceManager as serialisation is done on the userThread."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a348d5a0ffa37436782f28e4c6b6e3790dd1817", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3a348d5a0ffa37436782f28e4c6b6e3790dd1817", "committedDate": "2020-10-03T17:48:16Z", "message": "Remove ThreadedPersistableEnvelope and use PersistableEnvelope instead\n\nWe will not need threading support anymore once we use the new persistenceManager as serialisation is done on the userThread."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e55251bcff3cbb66615c4cdb14c144e119f0cf1", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2e55251bcff3cbb66615c4cdb14c144e119f0cf1", "committedDate": "2020-10-03T17:48:16Z", "message": "Use PersistenceManager for StoreService (not yet supported for subclasses)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b0ea9f13654506ef4e7c926d570f13a3959d8e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/92b0ea9f13654506ef4e7c926d570f13a3959d8e", "committedDate": "2020-10-03T17:48:16Z", "message": "Use PersistenceManager for MapStoreService (not yet supported for subclasses)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a1cd0ee2c4e5fd3ad5be20915a391b3fb94a890", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5a1cd0ee2c4e5fd3ad5be20915a391b3fb94a890", "committedDate": "2020-10-03T17:48:16Z", "message": "Use PersistableNetworkPayloadStore for AppendOnlyDataStoreService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f0f61943d196ba05cc7112a5a2f64e7f35d741", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e2f0f61943d196ba05cc7112a5a2f64e7f35d741", "committedDate": "2020-10-03T17:48:16Z", "message": "Update PersistableNetworkPayloadStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0682b991f7493470302a600463e478d25b9d9e0d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0682b991f7493470302a600463e478d25b9d9e0d", "committedDate": "2020-10-03T17:48:16Z", "message": "Update ProtectedDataStoreService\nUse AtomicReference instead of array, add final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94944393cf1f19a4f00c853627ba6f0ed31206bf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/94944393cf1f19a4f00c853627ba6f0ed31206bf", "committedDate": "2020-10-03T17:48:16Z", "message": "Use PersistenceManager in HistoricalDataStoreService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827775c32c46522f54d09683fed0e8978c9ad970", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/827775c32c46522f54d09683fed0e8978c9ad970", "committedDate": "2020-10-03T17:48:16Z", "message": "Add missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d89092ad33ab0e5e693f4b2d06d0fbdb4a4a0d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/34d89092ad33ab0e5e693f4b2d06d0fbdb4a4a0d", "committedDate": "2020-10-03T17:48:17Z", "message": "Add final at ResourceDataStoreService\nRemove clone from SequenceNumberMap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4acddac4aff705036a4566e772a774ef7b4ce46", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a4acddac4aff705036a4566e772a774ef7b4ce46", "committedDate": "2020-10-03T17:48:17Z", "message": "Apply generics and super class methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc77b5cab851cadbb51ce1fdbce368e25eeeb560", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/dc77b5cab851cadbb51ce1fdbce368e25eeeb560", "committedDate": "2020-10-03T17:48:17Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9a7aacf98a3f2858a4eaf4fe3ea7b5b8edabeac", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d9a7aacf98a3f2858a4eaf4fe3ea7b5b8edabeac", "committedDate": "2020-10-03T17:48:17Z", "message": "Update SignedWitness classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8781c80fb03aba6678a0ac4d67ba5848856f1db2", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8781c80fb03aba6678a0ac4d67ba5848856f1db2", "committedDate": "2020-10-03T17:48:17Z", "message": "Update AccountAgeWitnessStorage classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6211ef9fe1a071c7d892644b38baa5aa7e8d351", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e6211ef9fe1a071c7d892644b38baa5aa7e8d351", "committedDate": "2020-10-03T17:48:17Z", "message": "Update TempProposalStore and ProposalStore classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9190f17966fb559556e05de92d497512121a0d4a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9190f17966fb559556e05de92d497512121a0d4a", "committedDate": "2020-10-03T17:48:17Z", "message": "Update TradeStatistics2Storage classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "074ed6753bc2354c7eaf0aed17abf63a541c4d56", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/074ed6753bc2354c7eaf0aed17abf63a541c4d56", "committedDate": "2020-10-03T17:48:17Z", "message": "Remove lombok Delegate from PersistableList\nAdd final\nAdd setAll method\nRemove Iterable interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80e16a05ef3becffdb600582c412e1becf69a774", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/80e16a05ef3becffdb600582c412e1becf69a774", "committedDate": "2020-10-03T17:48:17Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308c970b68017934063a8b17bee0ab79da8fcb1e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/308c970b68017934063a8b17bee0ab79da8fcb1e", "committedDate": "2020-10-03T17:48:17Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878f64555cad934c178ded6458b0f39451bf5413", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/878f64555cad934c178ded6458b0f39451bf5413", "committedDate": "2020-10-03T17:48:18Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6cbf5e23089e5f760adb2612560f2eb233d073", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5d6cbf5e23089e5f760adb2612560f2eb233d073", "committedDate": "2020-10-03T17:48:18Z", "message": "Refactor: Move classes to new package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb99f77ef8bed5eeee2988fc677fdaf68c41d35", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0eb99f77ef8bed5eeee2988fc677fdaf68c41d35", "committedDate": "2020-10-03T17:48:18Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f38de30e913178586e5d6fb9a1c8bcbbb71fe17", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8f38de30e913178586e5d6fb9a1c8bcbbb71fe17", "committedDate": "2020-10-03T17:48:18Z", "message": "Use PersistableList as base class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "158b7a92f9d6d79d900736946d98098d37199be4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/158b7a92f9d6d79d900736946d98098d37199be4", "committedDate": "2020-10-03T17:48:18Z", "message": "Remove storage from dispute. We do persistence from outside now.\nImpl. PersistablePayload\nMake openingDate final and contr param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6b2a77d645c142807bb1a13597ef3ba079d4cd", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/8a6b2a77d645c142807bb1a13597ef3ba079d4cd", "committedDate": "2020-10-03T17:48:18Z", "message": "Use PersistenceManager. Make disputeList final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d91c268d07f8f9b25e348b740f1e69a5bb31db8", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2d91c268d07f8f9b25e348b740f1e69a5bb31db8", "committedDate": "2020-10-03T17:48:18Z", "message": "Remove storage and persist calls. Remove unused methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e91b09f7df3f8960bbc055696b6d0ff51579c2b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/1e91b09f7df3f8960bbc055696b6d0ff51579c2b", "committedDate": "2020-10-03T17:48:18Z", "message": "Remove persist method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63fe1c9dbd017f86275b025c577517f59c1635fb", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/63fe1c9dbd017f86275b025c577517f59c1635fb", "committedDate": "2020-10-03T17:48:18Z", "message": "Remove storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1857700232123aa820547a2a97560ef4493817", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/4f1857700232123aa820547a2a97560ef4493817", "committedDate": "2020-10-03T17:48:19Z", "message": "Extend PersistableList, remvoe storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6be9b0f6bc22b43bdced1af07780a4126312a59", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f6be9b0f6bc22b43bdced1af07780a4126312a59", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2582f58e0a0cf7cc4845f40fe6e4221496db46e0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/2582f58e0a0cf7cc4845f40fe6e4221496db46e0", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4165dc9af66ef27a5391146ec8dd573340487e7", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f4165dc9af66ef27a5391146ec8dd573340487e7", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3c869b5ad45414ef1794f76a63f1dc8c112c778", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c3c869b5ad45414ef1794f76a63f1dc8c112c778", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f460b4b0c5adc7d4e0fb3d178106b68769cb6e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d4f460b4b0c5adc7d4e0fb3d178106b68769cb6e", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406afa9dad20386ad8b9d311cf23f6b4bdcb5468", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/406afa9dad20386ad8b9d311cf23f6b4bdcb5468", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager. Add setAll method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae1cda7013c498cde24cc94bdee20f60fb860bf", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fae1cda7013c498cde24cc94bdee20f60fb860bf", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986f1bf33c7ce7bc5b68aa6ae90fdfdb28d0c27b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/986f1bf33c7ce7bc5b68aa6ae90fdfdb28d0c27b", "committedDate": "2020-10-03T17:48:19Z", "message": "Use PersistenceManager. We do not persist inside openOffer anymore but from outside"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c2cb894c0e7fa195d1554ddf90b75765579459", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/27c2cb894c0e7fa195d1554ddf90b75765579459", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ea742a47014a769171a6b2692e75c2840f2c53", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e0ea742a47014a769171a6b2692e75c2840f2c53", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e825613f5c163ac8beb6ae7dc3630e6403201bac", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e825613f5c163ac8beb6ae7dc3630e6403201bac", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac42008256255895d76d5e2eaf378fa42218f4f", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fac42008256255895d76d5e2eaf378fa42218f4f", "committedDate": "2020-10-03T17:48:20Z", "message": "Remove unused fields, apply new params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486e6f49858215876d8d383cf59bb8575dc5cd6b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/486e6f49858215876d8d383cf59bb8575dc5cd6b", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da13c35f233c21b5c074516a69bc224824a3515", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/9da13c35f233c21b5c074516a69bc224824a3515", "committedDate": "2020-10-03T17:48:20Z", "message": "Refactor: Rename persist to requestPersistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "482bc560363431c20fa065733dce1e93b97471a2", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/482bc560363431c20fa065733dce1e93b97471a2", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4c21b35cdb101d71c411cfb61e849a67e5c656", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fe4c21b35cdb101d71c411cfb61e849a67e5c656", "committedDate": "2020-10-03T17:48:20Z", "message": "Use PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197e871a7bc14b8858b7ea2af1ae0677886cd422", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/197e871a7bc14b8858b7ea2af1ae0677886cd422", "committedDate": "2020-10-03T17:48:20Z", "message": "Remove FileManager ans Storage. All is replaces not by PersistenceManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e10f28b7ef198a4559968222979f5a007babf4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/42e10f28b7ef198a4559968222979f5a007babf4", "committedDate": "2020-10-03T17:48:21Z", "message": "Apply generics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a797413c7e396cf69e86a6e9ce9892c28938cd29", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a797413c7e396cf69e86a6e9ce9892c28938cd29", "committedDate": "2020-10-03T17:48:21Z", "message": "Remove persist method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4611e177fdb0afdf1dc07149f75788aa6f5d8b", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/7b4611e177fdb0afdf1dc07149f75788aa6f5d8b", "committedDate": "2020-10-03T17:48:21Z", "message": "Add requestPersistence call\nCleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b901f358a74a679d80c5ab5afeea431a6a306988", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b901f358a74a679d80c5ab5afeea431a6a306988", "committedDate": "2020-10-03T17:48:21Z", "message": "Add missing persist calls. Add generics. Remove persist method. Add final."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "253c6c3336f0f8cbef38fa67119bdd553a069b17", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/253c6c3336f0f8cbef38fa67119bdd553a069b17", "committedDate": "2020-10-03T17:48:21Z", "message": "Remove unneeded param. Add requestPersistence calls. Cleanup removeTrade and addTrade methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0d26139760674a7dc83d4583146b8d8cabd2ea", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fa0d26139760674a7dc83d4583146b8d8cabd2ea", "committedDate": "2020-10-03T17:48:21Z", "message": "Fix remaining issues, cleanups, add persit calls, remove unused code,...\n\nSorry too tired to create another 20 commits..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "270e89a25a8f6ba861c877a2557bc63e7fd112fa", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/270e89a25a8f6ba861c877a2557bc63e7fd112fa", "committedDate": "2020-10-03T17:48:21Z", "message": "Fix wrong params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfda5b043a0c20cd9061ca676f05763ccff0477", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/ccfda5b043a0c20cd9061ca676f05763ccff0477", "committedDate": "2020-10-03T17:48:21Z", "message": "Cleanups, add generics, add final, remove unused code/comments/todos,"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f47ed20d8294f5c7cd6806a0ccb5f39ce3e0770", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/5f47ed20d8294f5c7cd6806a0ccb5f39ce3e0770", "committedDate": "2020-10-03T17:48:21Z", "message": "Use decrementAndGet instead of getAndDecrement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e242c54dab128aaa1a2605a00604f8bdb68db332", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e242c54dab128aaa1a2605a00604f8bdb68db332", "committedDate": "2020-10-03T17:48:22Z", "message": "Refactor: Rename getTradesAsObservableList to getObservableList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e88a810dd09575082e4fbca7f577eef58daba518", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e88a810dd09575082e4fbca7f577eef58daba518", "committedDate": "2020-10-03T17:48:22Z", "message": "Revert exit code to 1 as it was before. Not sure if there have been some scripts for seeds which expect an error code at shutdown for auto restart. I remotely remember there have been something..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c789650d0b90fc31a120eadc20e4c735dddf4ccc", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c789650d0b90fc31a120eadc20e4c735dddf4ccc", "committedDate": "2020-10-03T17:48:22Z", "message": "Move methods to base class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32238f2050a151b2ea545bea331d06270426cd1c", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/32238f2050a151b2ea545bea331d06270426cd1c", "committedDate": "2020-10-03T17:48:22Z", "message": "Rename getClosedTradables and getFailedTrades to getObservableList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b712445e34d3f4240612e2859ff24f26ff59f420", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/b712445e34d3f4240612e2859ff24f26ff59f420", "committedDate": "2020-10-03T17:48:22Z", "message": "Remove duplicate startApplication call. Remove checkCryptoSetup call and fields used only for that."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232fa8ddee2c1d9308061d0f133429f2db0cf5d5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/232fa8ddee2c1d9308061d0f133429f2db0cf5d5", "committedDate": "2020-10-03T17:48:22Z", "message": "Execute result handler on userThread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e9b054a047891fa03e72bf2d267c2d1a3d46a4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/10e9b054a047891fa03e72bf2d267c2d1a3d46a4", "committedDate": "2020-10-03T17:48:22Z", "message": "Rename writeCompleted to onWriteCompleted\nAdd comment\nUse decrementAndGet instead of getAndDecrement\n\nTested cases when there is an exception at write to disk, but as we call the result handler in the finally clause we get always called onWriteCompleted, so it cannot happen that we get stuck."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f64d53ca693b8400967ab6cc41a1dd0b1228d0", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/18f64d53ca693b8400967ab6cc41a1dd0b1228d0", "committedDate": "2020-10-03T17:48:22Z", "message": "Persist all Priority.HIGH stores at shutdown to be more safe that we did not miss any state update.\nPriority.HIGH stores are all those which contain private data. Others can be rebuilt from network data or are not critical like navigationPath."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "137b5e81d12936b9399ccc0888fcccebd3589b5e", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/137b5e81d12936b9399ccc0888fcccebd3589b5e", "committedDate": "2020-10-03T17:48:22Z", "message": "Enforce that clients set the priority. Remove the initialize methods which did not have priority as a param.\nMake initializePersistenceManager in StorageService abstract to enforce in concrete class to define priority.\n\nChange priorities for future renaming to a different meaning. instead of priority we want to describe the category: private data, public data,.... will come in next commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9db7c6808b822c4cc4675eabe9ffbc4b0fae253", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e9db7c6808b822c4cc4675eabe9ffbc4b0fae253", "committedDate": "2020-10-03T17:48:23Z", "message": "Rename Priority to Source. This should make it more clear what is the intention of the usage.\n\nRename:\nLOW to NETWORK\nMID to PRIVATE_LOW_PRIO\nHIGH to PRIVATE\n\nChange delay of MID/PRIVATE_LOW_PRIO from 30 min to 2 hours (we had different datastores before using it, now its only real low prio stores)\n\nAdd comment to each enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9cd58a3783f996eac06873e8529eb02a3ccdbe4", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c9cd58a3783f996eac06873e8529eb02a3ccdbe4", "committedDate": "2020-10-03T17:48:23Z", "message": "Fix rename mistakes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6693a03f96e45c3ecd98bb879d91c7274c971784", "committedDate": "2020-10-03T17:48:23Z", "message": "Fix test class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbaef268ffc1ef669c8e264ef65c8beccdea1bd5", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/fbaef268ffc1ef669c8e264ef65c8beccdea1bd5", "committedDate": "2020-10-02T22:04:32Z", "message": "Fix test class"}, "afterCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/6693a03f96e45c3ecd98bb879d91c7274c971784", "committedDate": "2020-10-03T17:48:23Z", "message": "Fix test class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTUwNTk2", "url": "https://github.com/bisq-network/bisq/pull/4589#pullrequestreview-501550596", "createdAt": "2020-10-03T14:37:05Z", "commit": {"oid": "fbaef268ffc1ef669c8e264ef65c8beccdea1bd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNDozNzowNVrOHcB5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNTozODoyOFrOHcIYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MzE2OA==", "bodyText": "To reduce confusion, how about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    openInstances.decrementAndGet();\n          \n          \n            \n                    if (openInstances.get() == 0) {\n          \n          \n            \n                    if (openInstances.decrementAndGet() == 0) {", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499153168", "createdAt": "2020-10-03T14:37:05Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/persistence/PersistenceManager.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.common.persistence;\n+\n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n+import bisq.common.app.DevEnv;\n+import bisq.common.config.Config;\n+import bisq.common.file.CorruptedStorageFileHandler;\n+import bisq.common.file.FileUtil;\n+import bisq.common.handlers.ResultHandler;\n+import bisq.common.proto.persistable.PersistableEnvelope;\n+import bisq.common.proto.persistable.PersistenceProtoResolver;\n+import bisq.common.util.Utilities;\n+\n+import com.google.inject.Inject;\n+\n+import javax.inject.Named;\n+\n+import java.nio.file.Path;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.common.util.Preconditions.checkDir;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Responsible for reading persisted data and writing it on disk. We read usually only at start-up and keep data in RAM.\n+ * We write all data which got a request for persistence at shut down at the very last moment when all other services\n+ * are shut down, so allowing changes to the data in the very last moment. For critical data we set {@link Source}\n+ * to HIGH which causes a timer to trigger a write to disk after 1 minute. We use that for not very frequently altered\n+ * data and data which cannot be recovered from the network.\n+ *\n+ * We decided to not use threading (as it was in previous versions) as the read operation happens only at start-up and\n+ * with the modified model that data is written at shut down we eliminate frequent and expensive disk I/O. Risks of\n+ * deadlock or data inconsistency and a more complex model have been a further argument for that model. In fact\n+ * previously we wasted a lot of resources as way too many threads have been created without doing actual work as well\n+ * the write operations got triggered way too often specially for the very frequent changes at SequenceNumberMap and\n+ * the very large DaoState (at dao blockchain sync that slowed down sync).\n+ *\n+ *\n+ * @param <T>   The type of the {@link PersistableEnvelope} to be written or read from disk\n+ */\n+@Slf4j\n+public class PersistenceManager<T extends PersistableEnvelope> {\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Static\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public static final Map<String, PersistenceManager<?>> ALL_PERSISTENCE_MANAGERS = new HashMap<>();\n+\n+    // We don't know from which thread we are called so we map back to user thread\n+    public static void flushAllDataToDisk(ResultHandler completeHandler) {\n+        log.info(\"Start flushAllDataToDisk at shutdown\");\n+        AtomicInteger openInstances = new AtomicInteger(ALL_PERSISTENCE_MANAGERS.size());\n+\n+        if (openInstances.get() == 0) {\n+            log.info(\"flushAllDataToDisk completed\");\n+            UserThread.execute(completeHandler::handleResult);\n+        }\n+\n+        new HashSet<>(ALL_PERSISTENCE_MANAGERS.values()).forEach(persistenceManager -> {\n+            // For Priority.HIGH data we want to write to disk in any case to be on the safe side if we might have missed\n+            // a requestPersistence call after an important state update. Those are usually rather small data stores.\n+            // Otherwise we only persist if requestPersistence was called since the last persist call.\n+            if (persistenceManager.source.flushAtShutDown || persistenceManager.persistenceRequested) {\n+                // We don't know from which thread we are called so we map back to user thread when calling persistNow\n+                UserThread.execute(() -> {\n+                    // We always get our completeHandler called even if exceptions happen. In case a file write fails\n+                    // we still call our shutdown and count down routine as the completeHandler is triggered in any case.\n+                    persistenceManager.persistNow(() ->\n+                            onWriteCompleted(completeHandler, openInstances, persistenceManager));\n+                });\n+            } else {\n+                onWriteCompleted(completeHandler, openInstances, persistenceManager);\n+            }\n+        });\n+    }\n+\n+    private static void onWriteCompleted(ResultHandler completeHandler,\n+                                         AtomicInteger openInstances,\n+                                         PersistenceManager<?> persistenceManager) {\n+        persistenceManager.shutdown();\n+        openInstances.decrementAndGet();\n+        if (openInstances.get() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbaef268ffc1ef669c8e264ef65c8beccdea1bd5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2NDk2Mg==", "bodyText": "Misspelled sourcce", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499164962", "createdAt": "2020-10-03T17:10:56Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/persistence/PersistenceManager.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.common.persistence;\n+\n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n+import bisq.common.app.DevEnv;\n+import bisq.common.config.Config;\n+import bisq.common.file.CorruptedStorageFileHandler;\n+import bisq.common.file.FileUtil;\n+import bisq.common.handlers.ResultHandler;\n+import bisq.common.proto.persistable.PersistableEnvelope;\n+import bisq.common.proto.persistable.PersistenceProtoResolver;\n+import bisq.common.util.Utilities;\n+\n+import com.google.inject.Inject;\n+\n+import javax.inject.Named;\n+\n+import java.nio.file.Path;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.common.util.Preconditions.checkDir;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Responsible for reading persisted data and writing it on disk. We read usually only at start-up and keep data in RAM.\n+ * We write all data which got a request for persistence at shut down at the very last moment when all other services\n+ * are shut down, so allowing changes to the data in the very last moment. For critical data we set {@link Source}\n+ * to HIGH which causes a timer to trigger a write to disk after 1 minute. We use that for not very frequently altered\n+ * data and data which cannot be recovered from the network.\n+ *\n+ * We decided to not use threading (as it was in previous versions) as the read operation happens only at start-up and\n+ * with the modified model that data is written at shut down we eliminate frequent and expensive disk I/O. Risks of\n+ * deadlock or data inconsistency and a more complex model have been a further argument for that model. In fact\n+ * previously we wasted a lot of resources as way too many threads have been created without doing actual work as well\n+ * the write operations got triggered way too often specially for the very frequent changes at SequenceNumberMap and\n+ * the very large DaoState (at dao blockchain sync that slowed down sync).\n+ *\n+ *\n+ * @param <T>   The type of the {@link PersistableEnvelope} to be written or read from disk\n+ */\n+@Slf4j\n+public class PersistenceManager<T extends PersistableEnvelope> {\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Static\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public static final Map<String, PersistenceManager<?>> ALL_PERSISTENCE_MANAGERS = new HashMap<>();\n+\n+    // We don't know from which thread we are called so we map back to user thread\n+    public static void flushAllDataToDisk(ResultHandler completeHandler) {\n+        log.info(\"Start flushAllDataToDisk at shutdown\");\n+        AtomicInteger openInstances = new AtomicInteger(ALL_PERSISTENCE_MANAGERS.size());\n+\n+        if (openInstances.get() == 0) {\n+            log.info(\"flushAllDataToDisk completed\");\n+            UserThread.execute(completeHandler::handleResult);\n+        }\n+\n+        new HashSet<>(ALL_PERSISTENCE_MANAGERS.values()).forEach(persistenceManager -> {\n+            // For Priority.HIGH data we want to write to disk in any case to be on the safe side if we might have missed\n+            // a requestPersistence call after an important state update. Those are usually rather small data stores.\n+            // Otherwise we only persist if requestPersistence was called since the last persist call.\n+            if (persistenceManager.source.flushAtShutDown || persistenceManager.persistenceRequested) {\n+                // We don't know from which thread we are called so we map back to user thread when calling persistNow\n+                UserThread.execute(() -> {\n+                    // We always get our completeHandler called even if exceptions happen. In case a file write fails\n+                    // we still call our shutdown and count down routine as the completeHandler is triggered in any case.\n+                    persistenceManager.persistNow(() ->\n+                            onWriteCompleted(completeHandler, openInstances, persistenceManager));\n+                });\n+            } else {\n+                onWriteCompleted(completeHandler, openInstances, persistenceManager);\n+            }\n+        });\n+    }\n+\n+    private static void onWriteCompleted(ResultHandler completeHandler,\n+                                         AtomicInteger openInstances,\n+                                         PersistenceManager<?> persistenceManager) {\n+        persistenceManager.shutdown();\n+        openInstances.decrementAndGet();\n+        if (openInstances.get() == 0) {\n+            log.info(\"flushAllDataToDisk completed\");\n+            UserThread.execute(completeHandler::handleResult);\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Enum\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public enum Source {\n+        // For data stores we received from the network and which could be rebuilt. We store only for avoiding too much network traffic.\n+        NETWORK(1, TimeUnit.HOURS.toSeconds(1), false),\n+\n+        // For data stores which are created from private local data. This data could only be rebuilt from backup files.\n+        PRIVATE(10, TimeUnit.SECONDS.toSeconds(30), true),\n+\n+        // For data stores which are created from private local data. Loss of that data would not have any critical consequences.\n+        PRIVATE_LOW_PRIO(4, TimeUnit.HOURS.toSeconds(2), false);\n+\n+\n+        @Getter\n+        private final int numMaxBackupFiles;\n+        @Getter\n+        private final long delayInSec;\n+        @Getter\n+        private final boolean flushAtShutDown;\n+\n+        Source(int numMaxBackupFiles, long delayInSec, boolean flushAtShutDown) {\n+            this.numMaxBackupFiles = numMaxBackupFiles;\n+            this.delayInSec = delayInSec;\n+            this.flushAtShutDown = flushAtShutDown;\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Class fields\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private final File dir;\n+    private final PersistenceProtoResolver persistenceProtoResolver;\n+    private final CorruptedStorageFileHandler corruptedStorageFileHandler;\n+    private File storageFile;\n+    private T persistable;\n+    private String fileName;\n+    private Source source = Source.PRIVATE_LOW_PRIO;\n+    private Path usedTempFilePath;\n+    private volatile boolean persistenceRequested;\n+    @Nullable\n+    private Timer timer;\n+    private ExecutorService writeToDiskExecutor;\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Inject\n+    public PersistenceManager(@Named(Config.STORAGE_DIR) File dir,\n+                              PersistenceProtoResolver persistenceProtoResolver,\n+                              CorruptedStorageFileHandler corruptedStorageFileHandler) {\n+        this.dir = checkDir(dir);\n+        this.persistenceProtoResolver = persistenceProtoResolver;\n+        this.corruptedStorageFileHandler = corruptedStorageFileHandler;\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // API\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void initialize(T persistable, Source sourcce) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbaef268ffc1ef669c8e264ef65c8beccdea1bd5"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjA3OQ==", "bodyText": "Why use runPeriodically() instead of runAfter()? The effect would be the same but now it seems the write is intended to happen periodically, but two lines later that we see that it's not.", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499182079", "createdAt": "2020-10-03T21:09:06Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/persistence/PersistenceManager.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.common.persistence;\n+\n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n+import bisq.common.app.DevEnv;\n+import bisq.common.config.Config;\n+import bisq.common.file.CorruptedStorageFileHandler;\n+import bisq.common.file.FileUtil;\n+import bisq.common.handlers.ResultHandler;\n+import bisq.common.proto.persistable.PersistableEnvelope;\n+import bisq.common.proto.persistable.PersistenceProtoResolver;\n+import bisq.common.util.Utilities;\n+\n+import com.google.inject.Inject;\n+\n+import javax.inject.Named;\n+\n+import java.nio.file.Path;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.common.util.Preconditions.checkDir;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Responsible for reading persisted data and writing it on disk. We read usually only at start-up and keep data in RAM.\n+ * We write all data which got a request for persistence at shut down at the very last moment when all other services\n+ * are shut down, so allowing changes to the data in the very last moment. For critical data we set {@link Source}\n+ * to HIGH which causes a timer to trigger a write to disk after 1 minute. We use that for not very frequently altered\n+ * data and data which cannot be recovered from the network.\n+ *\n+ * We decided to not use threading (as it was in previous versions) as the read operation happens only at start-up and\n+ * with the modified model that data is written at shut down we eliminate frequent and expensive disk I/O. Risks of\n+ * deadlock or data inconsistency and a more complex model have been a further argument for that model. In fact\n+ * previously we wasted a lot of resources as way too many threads have been created without doing actual work as well\n+ * the write operations got triggered way too often specially for the very frequent changes at SequenceNumberMap and\n+ * the very large DaoState (at dao blockchain sync that slowed down sync).\n+ *\n+ *\n+ * @param <T>   The type of the {@link PersistableEnvelope} to be written or read from disk\n+ */\n+@Slf4j\n+public class PersistenceManager<T extends PersistableEnvelope> {\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Static\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public static final Map<String, PersistenceManager<?>> ALL_PERSISTENCE_MANAGERS = new HashMap<>();\n+\n+    // We don't know from which thread we are called so we map back to user thread\n+    public static void flushAllDataToDisk(ResultHandler completeHandler) {\n+        log.info(\"Start flushAllDataToDisk at shutdown\");\n+        AtomicInteger openInstances = new AtomicInteger(ALL_PERSISTENCE_MANAGERS.size());\n+\n+        if (openInstances.get() == 0) {\n+            log.info(\"flushAllDataToDisk completed\");\n+            UserThread.execute(completeHandler::handleResult);\n+        }\n+\n+        new HashSet<>(ALL_PERSISTENCE_MANAGERS.values()).forEach(persistenceManager -> {\n+            // For Priority.HIGH data we want to write to disk in any case to be on the safe side if we might have missed\n+            // a requestPersistence call after an important state update. Those are usually rather small data stores.\n+            // Otherwise we only persist if requestPersistence was called since the last persist call.\n+            if (persistenceManager.source.flushAtShutDown || persistenceManager.persistenceRequested) {\n+                // We don't know from which thread we are called so we map back to user thread when calling persistNow\n+                UserThread.execute(() -> {\n+                    // We always get our completeHandler called even if exceptions happen. In case a file write fails\n+                    // we still call our shutdown and count down routine as the completeHandler is triggered in any case.\n+                    persistenceManager.persistNow(() ->\n+                            onWriteCompleted(completeHandler, openInstances, persistenceManager));\n+                });\n+            } else {\n+                onWriteCompleted(completeHandler, openInstances, persistenceManager);\n+            }\n+        });\n+    }\n+\n+    private static void onWriteCompleted(ResultHandler completeHandler,\n+                                         AtomicInteger openInstances,\n+                                         PersistenceManager<?> persistenceManager) {\n+        persistenceManager.shutdown();\n+        openInstances.decrementAndGet();\n+        if (openInstances.get() == 0) {\n+            log.info(\"flushAllDataToDisk completed\");\n+            UserThread.execute(completeHandler::handleResult);\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Enum\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public enum Source {\n+        // For data stores we received from the network and which could be rebuilt. We store only for avoiding too much network traffic.\n+        NETWORK(1, TimeUnit.HOURS.toSeconds(1), false),\n+\n+        // For data stores which are created from private local data. This data could only be rebuilt from backup files.\n+        PRIVATE(10, TimeUnit.SECONDS.toSeconds(30), true),\n+\n+        // For data stores which are created from private local data. Loss of that data would not have any critical consequences.\n+        PRIVATE_LOW_PRIO(4, TimeUnit.HOURS.toSeconds(2), false);\n+\n+\n+        @Getter\n+        private final int numMaxBackupFiles;\n+        @Getter\n+        private final long delayInSec;\n+        @Getter\n+        private final boolean flushAtShutDown;\n+\n+        Source(int numMaxBackupFiles, long delayInSec, boolean flushAtShutDown) {\n+            this.numMaxBackupFiles = numMaxBackupFiles;\n+            this.delayInSec = delayInSec;\n+            this.flushAtShutDown = flushAtShutDown;\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Class fields\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    private final File dir;\n+    private final PersistenceProtoResolver persistenceProtoResolver;\n+    private final CorruptedStorageFileHandler corruptedStorageFileHandler;\n+    private File storageFile;\n+    private T persistable;\n+    private String fileName;\n+    private Source source = Source.PRIVATE_LOW_PRIO;\n+    private Path usedTempFilePath;\n+    private volatile boolean persistenceRequested;\n+    @Nullable\n+    private Timer timer;\n+    private ExecutorService writeToDiskExecutor;\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Constructor\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Inject\n+    public PersistenceManager(@Named(Config.STORAGE_DIR) File dir,\n+                              PersistenceProtoResolver persistenceProtoResolver,\n+                              CorruptedStorageFileHandler corruptedStorageFileHandler) {\n+        this.dir = checkDir(dir);\n+        this.persistenceProtoResolver = persistenceProtoResolver;\n+        this.corruptedStorageFileHandler = corruptedStorageFileHandler;\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // API\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void initialize(T persistable, Source sourcce) {\n+        this.initialize(persistable, persistable.getDefaultStorageFileName(), sourcce);\n+    }\n+\n+    public void initialize(T persistable, String fileName, Source sourcce) {\n+        this.persistable = persistable;\n+        this.fileName = fileName;\n+        this.source = sourcce;\n+        storageFile = new File(dir, fileName);\n+        ALL_PERSISTENCE_MANAGERS.put(fileName, this);\n+    }\n+\n+    public void shutdown() {\n+        ALL_PERSISTENCE_MANAGERS.remove(fileName);\n+\n+        if (timer != null) {\n+            timer.stop();\n+        }\n+\n+        if (writeToDiskExecutor != null) {\n+            writeToDiskExecutor.shutdown();\n+        }\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Reading file\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Nullable\n+    public T getPersisted() {\n+        return getPersisted(checkNotNull(fileName));\n+    }\n+\n+    //TODO use threading here instead in the clients\n+    // We get called at startup either by readAllPersisted or readFromResources. Both are wrapped in a thread so we\n+    // are not on the user thread.\n+    @Nullable\n+    public T getPersisted(String fileName) {\n+        File storageFile = new File(dir, fileName);\n+        if (!storageFile.exists()) {\n+            return null;\n+        }\n+\n+        long ts = System.currentTimeMillis();\n+        try (FileInputStream fileInputStream = new FileInputStream(storageFile)) {\n+            protobuf.PersistableEnvelope proto = protobuf.PersistableEnvelope.parseDelimitedFrom(fileInputStream);\n+            //noinspection unchecked\n+            T persistableEnvelope = (T) persistenceProtoResolver.fromProto(proto);\n+            log.info(\"Reading {} completed in {} ms\", fileName, System.currentTimeMillis() - ts);\n+            return persistableEnvelope;\n+        } catch (Throwable t) {\n+            log.error(\"Reading {} failed with {}.\", fileName, t.getMessage());\n+            try {\n+                // We keep a backup which might be used for recovery\n+                FileUtil.removeAndBackupFile(dir, storageFile, fileName, \"backup_of_corrupted_data\");\n+                DevEnv.logErrorAndThrowIfDevMode(t.toString());\n+            } catch (IOException e1) {\n+                e1.printStackTrace();\n+                log.error(e1.getMessage());\n+                // We swallow Exception if backup fails\n+            }\n+            if (corruptedStorageFileHandler != null) {\n+                corruptedStorageFileHandler.addFile(storageFile.getName());\n+            }\n+        }\n+        return null;\n+    }\n+\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+    // Write file to disk\n+    ///////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public void requestPersistence() {\n+        persistenceRequested = true;\n+\n+        // We write to disk with a delay to avoid frequent write operations. Depending on the priority those delays\n+        // can be rather long.\n+        if (timer == null) {\n+            timer = UserThread.runPeriodically(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODU1Mw==", "bodyText": "This does not look safe. I think list should be an ObservableList since it's required by this interface. It's first initiated to an ArrayList (line 39) but I assume all implementations of PersistableList passes an ObservableList as the constructor argument.", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499258553", "createdAt": "2020-10-04T15:29:28Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableList.java", "diffHunk": "@@ -17,43 +17,85 @@\n \n package bisq.common.proto.persistable;\n \n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n-import lombok.experimental.Delegate;\n \n @EqualsAndHashCode\n-public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope, Iterable<T> {\n-    @Delegate(excludes = ExcludesDelegateMethods.class)\n+public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope {\n+\n     @Getter\n-    @Setter\n-    private List<T> list;\n+    public final List<T> list = createList();\n+\n+    protected List<T> createList() {\n+        return new ArrayList<>();\n+    }\n \n     public PersistableList() {\n-        list = new ArrayList<>();\n     }\n \n     public PersistableList(List<T> list) {\n-        this.list = list;\n+        setAll(list);\n+    }\n+\n+    public void addListener(ListChangeListener<T> listener) {\n+        ((ObservableList<T>) getList()).addListener(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODg4MA==", "bodyText": "Naming the generic tradable is confusing, item is more neutral", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499258880", "createdAt": "2020-10-04T15:32:40Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableList.java", "diffHunk": "@@ -17,43 +17,85 @@\n \n package bisq.common.proto.persistable;\n \n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n-import lombok.experimental.Delegate;\n \n @EqualsAndHashCode\n-public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope, Iterable<T> {\n-    @Delegate(excludes = ExcludesDelegateMethods.class)\n+public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope {\n+\n     @Getter\n-    @Setter\n-    private List<T> list;\n+    public final List<T> list = createList();\n+\n+    protected List<T> createList() {\n+        return new ArrayList<>();\n+    }\n \n     public PersistableList() {\n-        list = new ArrayList<>();\n     }\n \n     public PersistableList(List<T> list) {\n-        this.list = list;\n+        setAll(list);\n+    }\n+\n+    public void addListener(ListChangeListener<T> listener) {\n+        ((ObservableList<T>) getList()).addListener(listener);\n+    }\n+\n+    public void removeListener(ListChangeListener<T> listener) {\n+        ((ObservableList<T>) getList()).removeListener(listener);\n+    }\n+\n+    public ObservableList<T> getObservableList() {\n+        return (ObservableList<T>) getList();\n+    }\n+\n+    public void setAll(Collection<T> collection) {\n+        this.list.clear();\n+        this.list.addAll(collection);\n+    }\n+\n+    public boolean add(T item) {\n+        if (!list.contains(item)) {\n+            list.add(item);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean remove(T tradable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODkxNw==", "bodyText": "Rather use a uniform naming for the generic, like item", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499258917", "createdAt": "2020-10-04T15:33:05Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableList.java", "diffHunk": "@@ -17,43 +17,85 @@\n \n package bisq.common.proto.persistable;\n \n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n-import lombok.experimental.Delegate;\n \n @EqualsAndHashCode\n-public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope, Iterable<T> {\n-    @Delegate(excludes = ExcludesDelegateMethods.class)\n+public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope {\n+\n     @Getter\n-    @Setter\n-    private List<T> list;\n+    public final List<T> list = createList();\n+\n+    protected List<T> createList() {\n+        return new ArrayList<>();\n+    }\n \n     public PersistableList() {\n-        list = new ArrayList<>();\n     }\n \n     public PersistableList(List<T> list) {\n-        this.list = list;\n+        setAll(list);\n+    }\n+\n+    public void addListener(ListChangeListener<T> listener) {\n+        ((ObservableList<T>) getList()).addListener(listener);\n+    }\n+\n+    public void removeListener(ListChangeListener<T> listener) {\n+        ((ObservableList<T>) getList()).removeListener(listener);\n+    }\n+\n+    public ObservableList<T> getObservableList() {\n+        return (ObservableList<T>) getList();\n+    }\n+\n+    public void setAll(Collection<T> collection) {\n+        this.list.clear();\n+        this.list.addAll(collection);\n+    }\n+\n+    public boolean add(T item) {\n+        if (!list.contains(item)) {\n+            list.add(item);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean remove(T tradable) {\n+        return list.remove(tradable);\n     }\n \n-    // this.stream() does not compile for unknown reasons, so add that manual delegate method\n     public Stream<T> stream() {\n         return list.stream();\n     }\n \n-    private interface ExcludesDelegateMethods<T> {\n-        Stream<T> stream();\n+    public int size() {\n+        return list.size();\n+    }\n+\n+    public boolean contains(T thing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1OTQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Subclassed might configure classes with the injector here\n          \n          \n            \n                    // Subclasses might configure classes with the injector here", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499259492", "createdAt": "2020-10-04T15:38:28Z", "author": {"login": "sqrrm"}, "path": "core/src/main/java/bisq/core/app/BisqExecutable.java", "diffHunk": "@@ -148,21 +153,30 @@ protected Injector getInjector() {\n     }\n \n     protected void applyInjector() {\n-        setupPersistedDataHosts(injector);\n+        // Subclassed might configure classes with the injector here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6693a03f96e45c3ecd98bb879d91c7274c971784"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a612405d9d6af726be014df0fd48ca24c0f8944d", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/a612405d9d6af726be014df0fd48ca24c0f8944d", "committedDate": "2020-10-04T17:49:02Z", "message": "Update common/src/main/java/bisq/common/persistence/PersistenceManager.java\n\nCo-authored-by: sqrrm <sqrrm@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b31dc9ff3484204b4784f354ab1ca7cdba6a9b9", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/3b31dc9ff3484204b4784f354ab1ca7cdba6a9b9", "committedDate": "2020-10-04T17:53:20Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc0cfc9a50c76ef06b15825cec8e54af20844ef", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/0cc0cfc9a50c76ef06b15825cec8e54af20844ef", "committedDate": "2020-10-04T17:54:27Z", "message": "Use runAfter instead of runPeriodically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c2464fbcbfaa0d5f760a2a56f01f1f925e186a", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f7c2464fbcbfaa0d5f760a2a56f01f1f925e186a", "committedDate": "2020-10-04T18:16:49Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f33aa16deb5c4dada2883d24dfd5d7867a4e21", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/f9f33aa16deb5c4dada2883d24dfd5d7867a4e21", "committedDate": "2020-10-04T18:18:25Z", "message": "Add PersistableListAsObservable\nRemove ObservableList methods from PersistableList\nLet DisputeList and TradableList extend PersistableListAsObservable\nFix param names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjQ3MDE5", "url": "https://github.com/bisq-network/bisq/pull/4589#pullrequestreview-501647019", "createdAt": "2020-10-04T18:20:38Z", "commit": {"oid": "f9f33aa16deb5c4dada2883d24dfd5d7867a4e21"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18b24332256ab8cb6be11fd37f35160a4851f33", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/d18b24332256ab8cb6be11fd37f35160a4851f33", "committedDate": "2020-10-04T18:34:28Z", "message": "Do not use persistNow for snapshots but requestPersistence\n\nThis avoids frequent write at dao sync and better performance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjU2MzAy", "url": "https://github.com/bisq-network/bisq/pull/4589#pullrequestreview-501656302", "createdAt": "2020-10-04T20:22:21Z", "commit": {"oid": "3b31dc9ff3484204b4784f354ab1ca7cdba6a9b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMDoyMjoyMVrOHcJ8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMDoyMjoyMVrOHcJ8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4NTA5Mg==", "bodyText": "The typo continues...", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499285092", "createdAt": "2020-10-04T20:22:21Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/persistence/PersistenceManager.java", "diffHunk": "@@ -184,8 +184,8 @@ public PersistenceManager(@Named(Config.STORAGE_DIR) File dir,\n     // API\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n-    public void initialize(T persistable, Source sourcce) {\n-        this.initialize(persistable, persistable.getDefaultStorageFileName(), sourcce);\n+    public void initialize(T persistable, Source source) {\n+        this.initialize(persistable, persistable.getDefaultStorageFileName(), source);\n     }\n \n     public void initialize(T persistable, String fileName, Source sourcce) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b31dc9ff3484204b4784f354ab1ca7cdba6a9b9"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjU2NDc3", "url": "https://github.com/bisq-network/bisq/pull/4589#pullrequestreview-501656477", "createdAt": "2020-10-04T20:24:43Z", "commit": {"oid": "f9f33aa16deb5c4dada2883d24dfd5d7867a4e21"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMDoyNDo0M1rOHcJ9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMDoyNDo0M1rOHcJ9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4NTI4MQ==", "bodyText": "Should take ObservableList<T>", "url": "https://github.com/bisq-network/bisq/pull/4589#discussion_r499285281", "createdAt": "2020-10-04T20:24:43Z", "author": {"login": "sqrrm"}, "path": "common/src/main/java/bisq/common/proto/persistable/PersistableListAsObservable.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.common.proto.persistable;\n+\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+\n+import java.util.List;\n+\n+public abstract class PersistableListAsObservable<T extends PersistablePayload> extends PersistableList<T> {\n+\n+    public PersistableListAsObservable() {\n+    }\n+\n+    protected PersistableListAsObservable(List<T> list) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f33aa16deb5c4dada2883d24dfd5d7867a4e21"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c797317c0dad7202b31756fe09c09c9c26ce9122", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/c797317c0dad7202b31756fe09c09c9c26ce9122", "committedDate": "2020-10-04T21:05:43Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e179ee4e32a6621df0d085a0bf1d41cd49664728", "author": {"user": {"login": "chimp1984", "name": null}}, "url": "https://github.com/bisq-network/bisq/commit/e179ee4e32a6621df0d085a0bf1d41cd49664728", "committedDate": "2020-10-04T21:13:45Z", "message": "Use Collection for constructor which is called from the fromProto methods.\nWe do not set the collection as list but we fill the list created via the createList method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjYxMDE1", "url": "https://github.com/bisq-network/bisq/pull/4589#pullrequestreview-501661015", "createdAt": "2020-10-04T21:28:49Z", "commit": {"oid": "e179ee4e32a6621df0d085a0bf1d41cd49664728"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3094, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}