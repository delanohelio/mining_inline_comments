{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODczNDA3", "number": 644, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMDoxMFrOEh12sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjo1M1rOEtuuXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIwODE2OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMDoxMFrOHPYlOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMDoxMFrOHPYlOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5MzQzNQ==", "bodyText": "Just curious.\nCan you use helm to install this as used in EKS.\nhelm repo add nvdp https://nvidia.github.io/k8s-device-plugin &&\nhelm repo update &&\nhelm install \\\n    --version=0.6.0 \\\n    --generate-name \\\n    nvdp/nvidia-device-plugin", "url": "https://github.com/pytorch/serve/pull/644#discussion_r485893435", "createdAt": "2020-09-09T20:10:10Z", "author": {"login": "dhanainme"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,259 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### \u4e00\u3001Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/zh-cn/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+`az login`\n+\n+`az account set -s your-subscription-ID`\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/zh-cn/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+`az group create --name myResourceGroup --location eastus`\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+`az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1`\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+`az aks install-cli`\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+`az aks get-credentials --resource-group myResourceGroup --name myAKSCluster`\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+`kubectl apply -f nvidia-device-plugin-ds.yaml`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIxNDk5OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/pod.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMjoyM1rOHPYpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMjoyM1rOHPYpSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NDQ3NQ==", "bodyText": "Please consider moving all the yaml template files to a template folder.\nAlso consider renaming pod.yaml to something more contextual", "url": "https://github.com/pytorch/serve/pull/644#discussion_r485894475", "createdAt": "2020-09-09T20:12:23Z", "author": {"login": "dhanainme"}, "path": "kubernetes/AKS/pod.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+apiVersion: v1\n+kind: Pod\n+metadata:\n+  name: model-store-pod\n+spec:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIyNzAyOnYy", "diffSide": "RIGHT", "path": "kubernetes/EKS/config.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxNjoyMVrOHPYw2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxNjoyMVrOHPYw2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NjQwOQ==", "bodyText": "This file could be shared between EKS & AKS.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r485896409", "createdAt": "2020-09-09T20:16:21Z", "author": {"login": "dhanainme"}, "path": "kubernetes/EKS/config.properties", "diffHunk": "@@ -0,0 +1,8 @@\n+inference_address=http://0.0.0.0:8080\n+management_address=http://0.0.0.0:8081\n+NUM_WORKERS=1\n+number_of_gpu=1\n+number_of_netty_threads=32\n+job_queue_size=1000\n+model_store=/home/model-server/shared/model-store\n+model_snapshot={\"name\":\"startup.cfg\",\"modelCount\":2,\"models\":{\"squeezenet1_1\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"squeezenet1_1.mar\",\"minWorkers\":3,\"maxWorkers\":3,\"batchSize\":1,\"maxBatchDelay\":100,\"responseTimeout\":120}},\"mnist\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"mnist.mar\",\"minWorkers\":5,\"maxWorkers\":5,\"batchSize\":1,\"maxBatchDelay\":200,\"responseTimeout\":60}}}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI1MzI2OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/pvc.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNDozOFrOHPZBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNDozOFrOHPZBLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMDU5MQ==", "bodyText": "Can you please help me with some info on how storage classes work in AKS.  For EKS i had to install a driver and make the storageClass to a shared volume. How does default map to a shared volume.\nDid find some similar ideas in - https://docs.microsoft.com/en-us/azure/aks/concepts-storage (AzureFiles). Wondering how these would be used.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r485900591", "createdAt": "2020-09-09T20:24:38Z", "author": {"login": "dhanainme"}, "path": "kubernetes/AKS/pvc.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+kind: PersistentVolumeClaim\n+apiVersion: v1\n+metadata:\n+  name: model-store-claim\n+spec:\n+  storageClassName: default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI1OTU4OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjozMVrOHPZFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjozMVrOHPZFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTU3Mw==", "bodyText": "Were you able to test this for a multi node / pod deployment.\nWith a single node we many not be able to test if the shared volume is being used.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r485901573", "createdAt": "2020-09-09T20:26:31Z", "author": {"login": "dhanainme"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,259 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### \u4e00\u3001Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/zh-cn/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+`az login`\n+\n+`az account set -s your-subscription-ID`\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/zh-cn/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+`az group create --name myResourceGroup --location eastus`\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+`az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1`\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+`az aks install-cli`\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/zh-cn/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+`az aks get-credentials --resource-group myResourceGroup --name myAKSCluster`\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+`kubectl apply -f nvidia-device-plugin-ds.yaml`\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 1.6 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### \u4e8c\u3001Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+`git clone https://github.com/pytorch/serve.git`\n+\n+`cd serve/kubernetes/MicrosoftAzure`\n+\n+#### 2.2 Create PersistentVolume\n+\n+`kubectl apply -f pvc.yaml`\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+`kubectl get pvc,pv`\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.3 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+`kubectl apply -f pod.yaml`\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+`kubectl get po`\n+\n+Your output should look similar to\n+\n+NAME                               READY   STATUS    RESTARTS   AGE\n+model-store-pod                    1/1     Running   0          39s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg4NjMxOnYy", "diffSide": "RIGHT", "path": "kubernetes/EKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyNjo1NVrOHW_sxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyNjo1NVrOHW_sxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NDM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              cd kubernetes/\n          \n          \n            \n              cd kubernetes/EKS", "url": "https://github.com/pytorch/serve/pull/644#discussion_r493874372", "createdAt": "2020-09-23T20:26:55Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/EKS/README.md", "diffHunk": "@@ -0,0 +1,814 @@\n+* ## Torchserve on Kubernetes\n+\n+  ## Overview\n+\n+  This page demonstrates a Torchserve deployment in Kubernetes using Helm Charts. It uses the DockerHub Torchserve Image for the pods and a PersistentVolume for storing config / model files.\n+\n+  ![EKS Overview](images/overview.png)\n+\n+  In the following sections we would \n+  * Create a EKS Cluster for deploying Torchserve\n+  * Create a PersistentVolume backed by EFS to store models and config\n+  * Use Helm charts to deploy Torchserve\n+\n+  All these steps scripts are written for AWS EKS with Ubuntu 18.04 for deployment, but could be easily adopted for Kubernetes offering from other vendors.\n+\n+  ## Prerequisites\n+\n+  We would need the following tools to be installed to setup the K8S Torchserve cluster.\n+\n+  * AWS CLI - [Installation](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html)\n+  * eksctl - [Installation](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)\n+  * kubectl - [Installation](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n+  * helm - [Installation](https://helm.sh/docs/intro/install/)\n+  * jq  - For JSON parsing in CLI\n+\n+  \n+\n+  ```bash\n+  sudo apt-get update\n+  \n+  # Install AWS CLI & Set Credentials\n+  curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n+  unzip awscliv2.zip\n+  sudo ./aws/install\n+  \n+  # Verify your aws cli installation\n+  aws --version\n+  \n+  # Setup your AWS credentials / region\n+  export AWS_ACCESS_KEY_ID=\n+  export AWS_SECRET_ACCESS_KEY=\n+  export AWS_DEFAULT_REGION=\n+  \n+  \n+  # Install eksctl\n+  curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\n+  sudo mv /tmp/eksctl /usr/local/bin\n+  \n+  # Verify your eksctl installation\n+  eksctl version\n+  \n+  # Install kubectl\n+  curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\n+  chmod +x ./kubectl\n+  sudo mv ./kubectl /usr/local/bin/kubectl\n+  \n+  # Verify your kubectl installation\n+  kubectl version --client\n+  \n+  # Install helm\n+  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+  chmod 700 get_helm.sh\n+  ./get_helm.sh\n+  \n+  \n+  # Install jq\n+  sudo apt-get install jq\n+  \n+  # Clone TS\n+  git clone https://github.com/pytorch/serve/\n+  cd kubernetes/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abccc6fc8d0c953885b5d510263ed1984783e1bc"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTExMjQ4OnYy", "diffSide": "RIGHT", "path": "kubernetes/EKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozNzoyOVrOHXB3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozNzoyOVrOHXB3Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              You should be able to a Security Group in your AWS Console with Inbound Rules to a NFS (Port 2049)\n          \n          \n            \n              You should be able to see a Security Group in your AWS Console with Inbound Rules to a NFS (Port 2049)", "url": "https://github.com/pytorch/serve/pull/644#discussion_r493909838", "createdAt": "2020-09-23T21:37:29Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/EKS/README.md", "diffHunk": "@@ -0,0 +1,814 @@\n+* ## Torchserve on Kubernetes\n+\n+  ## Overview\n+\n+  This page demonstrates a Torchserve deployment in Kubernetes using Helm Charts. It uses the DockerHub Torchserve Image for the pods and a PersistentVolume for storing config / model files.\n+\n+  ![EKS Overview](images/overview.png)\n+\n+  In the following sections we would \n+  * Create a EKS Cluster for deploying Torchserve\n+  * Create a PersistentVolume backed by EFS to store models and config\n+  * Use Helm charts to deploy Torchserve\n+\n+  All these steps scripts are written for AWS EKS with Ubuntu 18.04 for deployment, but could be easily adopted for Kubernetes offering from other vendors.\n+\n+  ## Prerequisites\n+\n+  We would need the following tools to be installed to setup the K8S Torchserve cluster.\n+\n+  * AWS CLI - [Installation](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html)\n+  * eksctl - [Installation](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)\n+  * kubectl - [Installation](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n+  * helm - [Installation](https://helm.sh/docs/intro/install/)\n+  * jq  - For JSON parsing in CLI\n+\n+  \n+\n+  ```bash\n+  sudo apt-get update\n+  \n+  # Install AWS CLI & Set Credentials\n+  curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n+  unzip awscliv2.zip\n+  sudo ./aws/install\n+  \n+  # Verify your aws cli installation\n+  aws --version\n+  \n+  # Setup your AWS credentials / region\n+  export AWS_ACCESS_KEY_ID=\n+  export AWS_SECRET_ACCESS_KEY=\n+  export AWS_DEFAULT_REGION=\n+  \n+  \n+  # Install eksctl\n+  curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\n+  sudo mv /tmp/eksctl /usr/local/bin\n+  \n+  # Verify your eksctl installation\n+  eksctl version\n+  \n+  # Install kubectl\n+  curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\n+  chmod +x ./kubectl\n+  sudo mv ./kubectl /usr/local/bin/kubectl\n+  \n+  # Verify your kubectl installation\n+  kubectl version --client\n+  \n+  # Install helm\n+  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+  chmod 700 get_helm.sh\n+  ./get_helm.sh\n+  \n+  \n+  # Install jq\n+  sudo apt-get install jq\n+  \n+  # Clone TS\n+  git clone https://github.com/pytorch/serve/\n+  cd kubernetes/\n+  ```\n+\n+  \n+\n+  ## EKS Cluster setup\n+\n+  In this section we decribe creating a EKS Kubernetes cluster with GPU nodes. If you have an existing EKS / Kubernetes cluster you may skip this section and skip ahead to PersistentVolume preparation. \n+\n+  Ensure you have your installed all required dependices & configured AWS CLI from the previous steps  appropriate permissions. The following steps would,\n+\n+  * Create a EKS cluster\n+  * Install all the required driver for NVIDIA GPU.\n+\n+\n+  ### Creating a EKS cluster\n+\n+  **EKS Optimized AMI Subscription**\n+\n+  First subscribe to EKS-optimized AMI with GPU Support in the AWS Marketplace. Subscribe [here](https://aws.amazon.com/marketplace/pp/B07GRHFXGM). These hosts would be used for the EKS Node Group. \n+\n+  More details about these AMIs and configuring can be found [here](https://github.com/awslabs/amazon-eks-ami) and [here](https://eksctl.io/usage/custom-ami-support/)\n+\n+  **Create a EKS Cluster**\n+\n+\n+  To create a cluster run the following command. \n+\n+  First update the `templates/eks_cluster.yaml` with \n+\n+  ```yaml\n+  apiVersion: eksctl.io/v1alpha5\n+  kind: ClusterConfig\n+  \n+  metadata:\n+    name: \"TorchserveCluster\"\n+    region: \"us-west-2\" # Update AWS Region\n+  \n+  nodeGroups:\n+    - name: ng-1\n+      instanceType: g4dn.xlarge # Update Node Type\n+      desiredCapacity: 3 # Update Node count\n+  ```\n+\n+  \n+\n+  Then run the following command\n+\n+  ```eksctl create cluster -f templates/eks_cluster.yaml```\n+\n+  \n+\n+  Your output should look similar to \n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ eksctl create cluster -f templates/eks_cluster.yaml\n+  [\u2139]  eksctl version 0.24.0\n+  [\u2139]  using region us-west-2\n+  [\u2139]  setting availability zones to [us-west-2c us-west-2b us-west-2a]\n+  [\u2139]  subnets for us-west-2c - public:192.168.0.0/19 private:192.168.96.0/19\n+  [\u2139]  subnets for us-west-2b - public:192.168.32.0/19 private:192.168.128.0/19\n+  [\u2139]  subnets for us-west-2a - public:192.168.64.0/19 private:192.168.160.0/19\n+  [\u2139]  nodegroup \"ng-1\" will use \"ami-0b6e3586ae536bd40\" [AmazonLinux2/1.16]\n+  [\u2139]  using Kubernetes version 1.16\n+  [\u2139]  creating EKS cluster \"TorchserveCluster\" in \"us-west-2\" region with un-managed nodes\n+  [\u2139]  1 nodegroup (ng-1) was included (based on the include/exclude rules)\n+  [\u2139]  will create a CloudFormation stack for cluster itself and 1 nodegroup stack(s)\n+  [\u2139]  will create a CloudFormation stack for cluster itself and 0 managed nodegroup stack(s)\n+  [\u2139]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-west-2 --cluster=TorchserveCluster'\n+  [\u2139]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster \"TorchserveCluster\" in \"us-west-2\"\n+  [\u2139]  2 sequential tasks: { create cluster control plane \"TorchserveCluster\", 2 sequential sub-tasks: { update CloudWatch logging configuration, create nodegroup \"ng-1\" } }\n+  [\u2139]  building cluster stack \"eksctl-TorchserveCluster-cluster\"\n+  [\u2139]  deploying stack \"eksctl-TorchserveCluster-cluster\"\n+  [\u2714]  configured CloudWatch logging for cluster \"TorchserveCluster\" in \"us-west-2\" (enabled types: api, audit, authenticator, controllerManager, scheduler & no types disabled)\n+  [\u2139]  building nodegroup stack \"eksctl-TorchserveCluster-nodegroup-ng-1\"\n+  [\u2139]  --nodes-min=1 was set automatically for nodegroup ng-1\n+  [\u2139]  --nodes-max=1 was set automatically for nodegroup ng-1\n+  [\u2139]  deploying stack \"eksctl-TorchserveCluster-nodegroup-ng-1\"\n+  [\u2139]  waiting for the control plane availability...\n+  [\u2714]  saved kubeconfig as \"/home/ubuntu/.kube/config\"\n+  [\u2139]  no tasks\n+  [\u2714]  all EKS cluster resources for \"TorchserveCluster\" have been created\n+  [\u2139]  adding identity \"arn:aws:iam::ACCOUNT_ID:role/eksctl-TorchserveCluster-nodegrou-NodeInstanceRole\" to auth ConfigMap\n+  [\u2139]  nodegroup \"ng-1\" has 0 node(s)\n+  [\u2139]  waiting for at least 1 node(s) to become ready in \"ng-1\"\n+  [\u2139]  nodegroup \"ng-1\" has 1 node(s)\n+  [\u2139]  node \"ip-instance_id.us-west-2.compute.internal\" is ready\n+  [\u2139]  as you are using a GPU optimized instance type you will need to install NVIDIA Kubernetes device plugin.\n+  [\u2139]  \t see the following page for instructions: https://github.com/NVIDIA/k8s-device-plugin\n+  [\u2139]  kubectl command should work with \"/home/ubuntu/.kube/config\", try 'kubectl get nodes'\n+  [\u2714]  EKS cluster \"TorchserveCluster\" in \"us-west-2\" region is ready\n+  ```\n+\n+  \n+\n+  This would create a EKS cluster named **TorchserveCluster**. This step would takes a considetable amount time to create EKS clusters. You would be able to track the progress in your cloudformation console. If you run in to any error inspect the events tab of the Cloud Formation UI.\n+\n+  \n+\n+  ![EKS Overview](images/eks_cfn.png)\n+\n+  \n+\n+  Verify that the cluster has been created with the following commands \n+\n+  ```bash\n+  eksctl get  clusters\n+  kubectl get service,po,daemonset,pv,pvc --all-namespaces\n+  ```\n+\n+  Your output should look similar to,\n+\n+  ```bash\n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ eksctl get  clusters\n+  NAME\t\t\tREGION\n+  TorchserveCluster\tus-west-2\n+  \n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ kubectl get service,po,daemonset,pv,pvc --all-namespaces\n+  NAMESPACE     NAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE\n+  default       service/kubernetes   ClusterIP   10.100.0.1    <none>        443/TCP         27m\n+  kube-system   service/kube-dns     ClusterIP   10.100.0.10   <none>        53/UDP,53/TCP   27m\n+  \n+  NAMESPACE     NAME                           READY   STATUS    RESTARTS   AGE\n+  kube-system   pod/aws-node-2flf5             1/1     Running   0          19m\n+  kube-system   pod/coredns-55c5fcd78f-2h7s4   1/1     Running   0          27m\n+  kube-system   pod/coredns-55c5fcd78f-pm6n5   1/1     Running   0          27m\n+  kube-system   pod/kube-proxy-pp8t2           1/1     Running   0          19m\n+  \n+  NAMESPACE     NAME                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\n+  kube-system   daemonset.apps/aws-node     1         1         1       1            1           <none>          27m\n+  kube-system   daemonset.apps/kube-proxy   1         1         1       1            1           <none>          27m\n+  \n+  ```\n+\n+  \n+\n+  **NVIDIA Plugin**\n+\n+  The NVIDIA device plugin for Kubernetes is a Daemonset that allows you to run GPU enabled containers. The instructions for installing the plugin can be found [here](https://github.com/NVIDIA/k8s-device-plugin#installing-via-helm-installfrom-the-nvidia-device-plugin-helm-repository)\n+\n+  ```bash\n+  helm repo add nvdp https://nvidia.github.io/k8s-device-plugin\n+  helm repo update\n+  helm install \\\n+      --version=0.6.0 \\\n+      --generate-name \\\n+      nvdp/nvidia-device-plugin\n+  ```\n+\n+  To verify that the plugin has been installed execute the following command \n+\n+  ```bash\n+  helm list\n+  ```\n+\n+  Your output should look similar to\n+\n+  ```bash\n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ helm list\n+  NAME                           \tNAMESPACE\tREVISION\tUPDATED                                \tSTATUS  \tCHART                     \tAPP VERSION\n+  nvidia-device-plugin-1595917413\tdefault  \t1       \t2020-07-28 06:23:34.522975795 +0000 UTC\tdeployed\tnvidia-device-plugin-0.6.0\t0.6.0\n+  ```\n+\n+  \n+\n+  ## Setup PersistentVolume backed by EFS\n+\n+  Torchserve Helm Chart needs a PersistentVolume with a PVC label `model-store-claim` prepared with a specific folder structure shown below. This PersistentVolume contains the snapshot & model files which are shared between multiple pods of the torchserve deployment.\n+\n+      model-server/\n+      \u251c\u2500\u2500 config\n+      \u2502   \u2514\u2500\u2500 config.properties\n+      \u2514\u2500\u2500 model-store\n+          \u251c\u2500\u2500 mnist.mar\n+          \u2514\u2500\u2500 squeezenet1_1.mar\n+\n+\n+  **Create EFS Volume for the EKS Cluster**\n+\n+  This section describes steps to prepare a EFS backed PersistentVolume that would be used by the TS Helm Chart. To prepare a EFS volume as a shareifjccgiced model / config store we have to create a EFS file system, Security Group, Ingress rule, Mount Targets to enable EFS communicate across NAT of the EKS cluster. \n+\n+  The heavy lifting for these steps is performed by ``setup_efs.sh`` script. To run the script, Update the following variables in `setup_efs.sh`\n+\n+  ```bash\n+  CLUSTER_NAME=TorchserveCluster # EKS TS Cluser Name\n+  MOUNT_TARGET_GROUP_NAME=\"eks-efs-group\"\n+  ```\n+\n+  Then run `source ./setup_efs.sh`. This would also set all the env variables which might be used for deletion at a later time\n+\n+  The output of the script should look similar to,\n+\n+  \n+\n+  ```bash\n+  Configuring TorchserveCluster\n+  Obtaining VPC ID for TorchserveCluster\n+  Obtained VPC ID - vpc-fff\n+  Obtaining CIDR BLOCK for vpc-fff\n+  Obtained CIDR BLOCK - 192.168.0.0/16\n+  Creating Security Group\n+  Created Security Group - sg-fff\n+  Configuring Security Group Ingress\n+  Creating EFS Fils System\n+  Created EFS - fs-ff\n+  {\n+      \"FileSystems\": [\n+          {\n+              \"OwnerId\": \"XXXX\",\n+              \"CreationToken\": \"4ae307b6-62aa-44dd-909e-eebe0d0b19f3\",\n+              \"FileSystemId\": \"fs-88983c8d\",\n+              \"FileSystemArn\": \"arn:aws:elasticfilesystem:us-west-2:ff:file-system/fs-ff\",\n+              \"CreationTime\": \"2020-07-29T08:03:33+00:00\",\n+              \"LifeCycleState\": \"creating\",\n+              \"NumberOfMountTargets\": 0,\n+              \"SizeInBytes\": {\n+                  \"Value\": 0,\n+                  \"ValueInIA\": 0,\n+                  \"ValueInStandard\": 0\n+              },\n+              \"PerformanceMode\": \"generalPurpose\",\n+              \"Encrypted\": false,\n+              \"ThroughputMode\": \"bursting\",\n+              \"Tags\": []\n+          }\n+      ]\n+  }\n+  Waiting 30s for before procedding\n+  Obtaining Subnets\n+  Obtained Subnets - subnet-ff\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.58.19\",\n+      \"NetworkInterfaceId\": \"eni-01ce1fd11df545226\",\n+      \"AvailabilityZoneId\": \"usw2-az1\",\n+      \"AvailabilityZoneName\": \"us-west-2b\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.5.7\",\n+      \"NetworkInterfaceId\": \"eni-03db930b204de6ab2\",\n+      \"AvailabilityZoneId\": \"usw2-az3\",\n+      \"AvailabilityZoneName\": \"us-west-2c\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.73.152\",\n+      \"NetworkInterfaceId\": \"eni-0a31830833bf6b030\",\n+      \"AvailabilityZoneId\": \"usw2-az2\",\n+      \"AvailabilityZoneName\": \"us-west-2a\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  EFS File System ID - YOUR-EFS-ID\n+  EFS File System DNS Name - YOUR-EFS-ID.efs..amazonaws.com\n+  Succesfully created EFS & Mountpoints\n+  ```\n+\n+  \n+\n+  Upon completion of the script it would emit a EFS volume DNS Name similar to `fs-ab1cd.efs.us-west-2.amazonaws.com` where `fs-ab1cd` is the EFS filesystem id.\n+\n+  \n+\n+  You should be able to a Security Group in your AWS Console with Inbound Rules to a NFS (Port 2049)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abccc6fc8d0c953885b5d510263ed1984783e1bc"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTMzMTM1OnYy", "diffSide": "RIGHT", "path": "kubernetes/EKS/.helmignore", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNTozNlrOHZ-ObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0MzowMlrOHaRH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5NTk0OQ==", "bodyText": "Now that we have a common directory in Helm to share some files, let's remove these files that are no longer needed:\n\nEKS/.helmignore (not needed since our values.yaml now lives in /Helm)\nEKS/Chart.yaml (same as above)\nEKS/templates/torchserve.yaml (same as above)", "url": "https://github.com/pytorch/serve/pull/644#discussion_r496995949", "createdAt": "2020-09-29T19:35:36Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/EKS/.helmignore", "diffHunk": "@@ -0,0 +1,5 @@\n+../templates/eks_cluster.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5445cde2a73cad0da5f83fe6043fb68306fd16"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI3Mzc2Mw==", "bodyText": "@jeremiahschung Is this file, EKS/values.yaml,  still needed?", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497273763", "createdAt": "2020-09-30T06:37:58Z", "author": {"login": "MengMeng96"}, "path": "kubernetes/EKS/.helmignore", "diffHunk": "@@ -0,0 +1,5 @@\n+../templates/eks_cluster.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5NTk0OQ=="}, "originalCommit": {"oid": "ef5445cde2a73cad0da5f83fe6043fb68306fd16"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNTU5Ng==", "bodyText": "Good catch! EKS/values.yaml is replaced by Helm/values.yaml so we can remove it as well.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497305596", "createdAt": "2020-09-30T07:43:02Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/EKS/.helmignore", "diffHunk": "@@ -0,0 +1,5 @@\n+../templates/eks_cluster.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5NTk0OQ=="}, "originalCommit": {"oid": "ef5445cde2a73cad0da5f83fe6043fb68306fd16"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTMzNjY5OnYy", "diffSide": "RIGHT", "path": "kubernetes/EKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzoxMVrOHZ-R7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzoxMVrOHZ-R7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5Njg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              To install Torchserve run ```helm install ts .```  \n          \n          \n            \n              To install Torchserve, move to the Helm folder ```cd ../Helm``` and run ```helm install ts .```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r496996844", "createdAt": "2020-09-29T19:37:11Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/EKS/README.md", "diffHunk": "@@ -0,0 +1,814 @@\n+* ## Torchserve on Kubernetes\n+\n+  ## Overview\n+\n+  This page demonstrates a Torchserve deployment in Kubernetes using Helm Charts. It uses the DockerHub Torchserve Image for the pods and a PersistentVolume for storing config / model files.\n+\n+  ![EKS Overview](images/overview.png)\n+\n+  In the following sections we would \n+  * Create a EKS Cluster for deploying Torchserve\n+  * Create a PersistentVolume backed by EFS to store models and config\n+  * Use Helm charts to deploy Torchserve\n+\n+  All these steps scripts are written for AWS EKS with Ubuntu 18.04 for deployment, but could be easily adopted for Kubernetes offering from other vendors.\n+\n+  ## Prerequisites\n+\n+  We would need the following tools to be installed to setup the K8S Torchserve cluster.\n+\n+  * AWS CLI - [Installation](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html)\n+  * eksctl - [Installation](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)\n+  * kubectl - [Installation](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n+  * helm - [Installation](https://helm.sh/docs/intro/install/)\n+  * jq  - For JSON parsing in CLI\n+\n+  \n+\n+  ```bash\n+  sudo apt-get update\n+  \n+  # Install AWS CLI & Set Credentials\n+  curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n+  unzip awscliv2.zip\n+  sudo ./aws/install\n+  \n+  # Verify your aws cli installation\n+  aws --version\n+  \n+  # Setup your AWS credentials / region\n+  export AWS_ACCESS_KEY_ID=\n+  export AWS_SECRET_ACCESS_KEY=\n+  export AWS_DEFAULT_REGION=\n+  \n+  \n+  # Install eksctl\n+  curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\n+  sudo mv /tmp/eksctl /usr/local/bin\n+  \n+  # Verify your eksctl installation\n+  eksctl version\n+  \n+  # Install kubectl\n+  curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\n+  chmod +x ./kubectl\n+  sudo mv ./kubectl /usr/local/bin/kubectl\n+  \n+  # Verify your kubectl installation\n+  kubectl version --client\n+  \n+  # Install helm\n+  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+  chmod 700 get_helm.sh\n+  ./get_helm.sh\n+  \n+  \n+  # Install jq\n+  sudo apt-get install jq\n+  \n+  # Clone TS\n+  git clone https://github.com/pytorch/serve/\n+  cd kubernetes/EKS\n+  ```\n+\n+  \n+\n+  ## EKS Cluster setup\n+\n+  In this section we decribe creating a EKS Kubernetes cluster with GPU nodes. If you have an existing EKS / Kubernetes cluster you may skip this section and skip ahead to PersistentVolume preparation. \n+\n+  Ensure you have your installed all required dependices & configured AWS CLI from the previous steps  appropriate permissions. The following steps would,\n+\n+  * Create a EKS cluster\n+  * Install all the required driver for NVIDIA GPU.\n+\n+\n+  ### Creating a EKS cluster\n+\n+  **EKS Optimized AMI Subscription**\n+\n+  First subscribe to EKS-optimized AMI with GPU Support in the AWS Marketplace. Subscribe [here](https://aws.amazon.com/marketplace/pp/B07GRHFXGM). These hosts would be used for the EKS Node Group. \n+\n+  More details about these AMIs and configuring can be found [here](https://github.com/awslabs/amazon-eks-ami) and [here](https://eksctl.io/usage/custom-ami-support/)\n+\n+  **Create a EKS Cluster**\n+\n+\n+  To create a cluster run the following command. \n+\n+  First update the `templates/eks_cluster.yaml` with \n+\n+  ```yaml\n+  apiVersion: eksctl.io/v1alpha5\n+  kind: ClusterConfig\n+  \n+  metadata:\n+    name: \"TorchserveCluster\"\n+    region: \"us-west-2\" # Update AWS Region\n+  \n+  nodeGroups:\n+    - name: ng-1\n+      instanceType: g4dn.xlarge # Update Node Type\n+      desiredCapacity: 3 # Update Node count\n+  ```\n+\n+  \n+\n+  Then run the following command\n+\n+  ```eksctl create cluster -f templates/eks_cluster.yaml```\n+\n+  \n+\n+  Your output should look similar to \n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ eksctl create cluster -f templates/eks_cluster.yaml\n+  [\u2139]  eksctl version 0.24.0\n+  [\u2139]  using region us-west-2\n+  [\u2139]  setting availability zones to [us-west-2c us-west-2b us-west-2a]\n+  [\u2139]  subnets for us-west-2c - public:192.168.0.0/19 private:192.168.96.0/19\n+  [\u2139]  subnets for us-west-2b - public:192.168.32.0/19 private:192.168.128.0/19\n+  [\u2139]  subnets for us-west-2a - public:192.168.64.0/19 private:192.168.160.0/19\n+  [\u2139]  nodegroup \"ng-1\" will use \"ami-0b6e3586ae536bd40\" [AmazonLinux2/1.16]\n+  [\u2139]  using Kubernetes version 1.16\n+  [\u2139]  creating EKS cluster \"TorchserveCluster\" in \"us-west-2\" region with un-managed nodes\n+  [\u2139]  1 nodegroup (ng-1) was included (based on the include/exclude rules)\n+  [\u2139]  will create a CloudFormation stack for cluster itself and 1 nodegroup stack(s)\n+  [\u2139]  will create a CloudFormation stack for cluster itself and 0 managed nodegroup stack(s)\n+  [\u2139]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-west-2 --cluster=TorchserveCluster'\n+  [\u2139]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster \"TorchserveCluster\" in \"us-west-2\"\n+  [\u2139]  2 sequential tasks: { create cluster control plane \"TorchserveCluster\", 2 sequential sub-tasks: { update CloudWatch logging configuration, create nodegroup \"ng-1\" } }\n+  [\u2139]  building cluster stack \"eksctl-TorchserveCluster-cluster\"\n+  [\u2139]  deploying stack \"eksctl-TorchserveCluster-cluster\"\n+  [\u2714]  configured CloudWatch logging for cluster \"TorchserveCluster\" in \"us-west-2\" (enabled types: api, audit, authenticator, controllerManager, scheduler & no types disabled)\n+  [\u2139]  building nodegroup stack \"eksctl-TorchserveCluster-nodegroup-ng-1\"\n+  [\u2139]  --nodes-min=1 was set automatically for nodegroup ng-1\n+  [\u2139]  --nodes-max=1 was set automatically for nodegroup ng-1\n+  [\u2139]  deploying stack \"eksctl-TorchserveCluster-nodegroup-ng-1\"\n+  [\u2139]  waiting for the control plane availability...\n+  [\u2714]  saved kubeconfig as \"/home/ubuntu/.kube/config\"\n+  [\u2139]  no tasks\n+  [\u2714]  all EKS cluster resources for \"TorchserveCluster\" have been created\n+  [\u2139]  adding identity \"arn:aws:iam::ACCOUNT_ID:role/eksctl-TorchserveCluster-nodegrou-NodeInstanceRole\" to auth ConfigMap\n+  [\u2139]  nodegroup \"ng-1\" has 0 node(s)\n+  [\u2139]  waiting for at least 1 node(s) to become ready in \"ng-1\"\n+  [\u2139]  nodegroup \"ng-1\" has 1 node(s)\n+  [\u2139]  node \"ip-instance_id.us-west-2.compute.internal\" is ready\n+  [\u2139]  as you are using a GPU optimized instance type you will need to install NVIDIA Kubernetes device plugin.\n+  [\u2139]  \t see the following page for instructions: https://github.com/NVIDIA/k8s-device-plugin\n+  [\u2139]  kubectl command should work with \"/home/ubuntu/.kube/config\", try 'kubectl get nodes'\n+  [\u2714]  EKS cluster \"TorchserveCluster\" in \"us-west-2\" region is ready\n+  ```\n+\n+  \n+\n+  This would create a EKS cluster named **TorchserveCluster**. This step would takes a considetable amount time to create EKS clusters. You would be able to track the progress in your cloudformation console. If you run in to any error inspect the events tab of the Cloud Formation UI.\n+\n+  \n+\n+  ![EKS Overview](images/eks_cfn.png)\n+\n+  \n+\n+  Verify that the cluster has been created with the following commands \n+\n+  ```bash\n+  eksctl get  clusters\n+  kubectl get service,po,daemonset,pv,pvc --all-namespaces\n+  ```\n+\n+  Your output should look similar to,\n+\n+  ```bash\n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ eksctl get  clusters\n+  NAME\t\t\tREGION\n+  TorchserveCluster\tus-west-2\n+  \n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ kubectl get service,po,daemonset,pv,pvc --all-namespaces\n+  NAMESPACE     NAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE\n+  default       service/kubernetes   ClusterIP   10.100.0.1    <none>        443/TCP         27m\n+  kube-system   service/kube-dns     ClusterIP   10.100.0.10   <none>        53/UDP,53/TCP   27m\n+  \n+  NAMESPACE     NAME                           READY   STATUS    RESTARTS   AGE\n+  kube-system   pod/aws-node-2flf5             1/1     Running   0          19m\n+  kube-system   pod/coredns-55c5fcd78f-2h7s4   1/1     Running   0          27m\n+  kube-system   pod/coredns-55c5fcd78f-pm6n5   1/1     Running   0          27m\n+  kube-system   pod/kube-proxy-pp8t2           1/1     Running   0          19m\n+  \n+  NAMESPACE     NAME                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\n+  kube-system   daemonset.apps/aws-node     1         1         1       1            1           <none>          27m\n+  kube-system   daemonset.apps/kube-proxy   1         1         1       1            1           <none>          27m\n+  \n+  ```\n+\n+  \n+\n+  **NVIDIA Plugin**\n+\n+  The NVIDIA device plugin for Kubernetes is a Daemonset that allows you to run GPU enabled containers. The instructions for installing the plugin can be found [here](https://github.com/NVIDIA/k8s-device-plugin#installing-via-helm-installfrom-the-nvidia-device-plugin-helm-repository)\n+\n+  ```bash\n+  helm repo add nvdp https://nvidia.github.io/k8s-device-plugin\n+  helm repo update\n+  helm install \\\n+      --version=0.6.0 \\\n+      --generate-name \\\n+      nvdp/nvidia-device-plugin\n+  ```\n+\n+  To verify that the plugin has been installed execute the following command \n+\n+  ```bash\n+  helm list\n+  ```\n+\n+  Your output should look similar to\n+\n+  ```bash\n+  ubuntu@ip-172-31-55-101:~/serve/kubernetes$ helm list\n+  NAME                           \tNAMESPACE\tREVISION\tUPDATED                                \tSTATUS  \tCHART                     \tAPP VERSION\n+  nvidia-device-plugin-1595917413\tdefault  \t1       \t2020-07-28 06:23:34.522975795 +0000 UTC\tdeployed\tnvidia-device-plugin-0.6.0\t0.6.0\n+  ```\n+\n+  \n+\n+  ## Setup PersistentVolume backed by EFS\n+\n+  Torchserve Helm Chart needs a PersistentVolume with a PVC label `model-store-claim` prepared with a specific folder structure shown below. This PersistentVolume contains the snapshot & model files which are shared between multiple pods of the torchserve deployment.\n+\n+      model-server/\n+      \u251c\u2500\u2500 config\n+      \u2502   \u2514\u2500\u2500 config.properties\n+      \u2514\u2500\u2500 model-store\n+          \u251c\u2500\u2500 mnist.mar\n+          \u2514\u2500\u2500 squeezenet1_1.mar\n+\n+\n+  **Create EFS Volume for the EKS Cluster**\n+\n+  This section describes steps to prepare a EFS backed PersistentVolume that would be used by the TS Helm Chart. To prepare a EFS volume as a shareifjccgiced model / config store we have to create a EFS file system, Security Group, Ingress rule, Mount Targets to enable EFS communicate across NAT of the EKS cluster. \n+\n+  The heavy lifting for these steps is performed by ``setup_efs.sh`` script. To run the script, Update the following variables in `setup_efs.sh`\n+\n+  ```bash\n+  CLUSTER_NAME=TorchserveCluster # EKS TS Cluser Name\n+  MOUNT_TARGET_GROUP_NAME=\"eks-efs-group\"\n+  ```\n+\n+  Then run `source ./setup_efs.sh`. This would also set all the env variables which might be used for deletion at a later time\n+\n+  The output of the script should look similar to,\n+\n+  \n+\n+  ```bash\n+  Configuring TorchserveCluster\n+  Obtaining VPC ID for TorchserveCluster\n+  Obtained VPC ID - vpc-fff\n+  Obtaining CIDR BLOCK for vpc-fff\n+  Obtained CIDR BLOCK - 192.168.0.0/16\n+  Creating Security Group\n+  Created Security Group - sg-fff\n+  Configuring Security Group Ingress\n+  Creating EFS Fils System\n+  Created EFS - fs-ff\n+  {\n+      \"FileSystems\": [\n+          {\n+              \"OwnerId\": \"XXXX\",\n+              \"CreationToken\": \"4ae307b6-62aa-44dd-909e-eebe0d0b19f3\",\n+              \"FileSystemId\": \"fs-88983c8d\",\n+              \"FileSystemArn\": \"arn:aws:elasticfilesystem:us-west-2:ff:file-system/fs-ff\",\n+              \"CreationTime\": \"2020-07-29T08:03:33+00:00\",\n+              \"LifeCycleState\": \"creating\",\n+              \"NumberOfMountTargets\": 0,\n+              \"SizeInBytes\": {\n+                  \"Value\": 0,\n+                  \"ValueInIA\": 0,\n+                  \"ValueInStandard\": 0\n+              },\n+              \"PerformanceMode\": \"generalPurpose\",\n+              \"Encrypted\": false,\n+              \"ThroughputMode\": \"bursting\",\n+              \"Tags\": []\n+          }\n+      ]\n+  }\n+  Waiting 30s for before procedding\n+  Obtaining Subnets\n+  Obtained Subnets - subnet-ff\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.58.19\",\n+      \"NetworkInterfaceId\": \"eni-01ce1fd11df545226\",\n+      \"AvailabilityZoneId\": \"usw2-az1\",\n+      \"AvailabilityZoneName\": \"us-west-2b\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.5.7\",\n+      \"NetworkInterfaceId\": \"eni-03db930b204de6ab2\",\n+      \"AvailabilityZoneId\": \"usw2-az3\",\n+      \"AvailabilityZoneName\": \"us-west-2c\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  Creating EFS Mount Target in subnet-ff\n+  {\n+      \"OwnerId\": \"XXXX\",\n+      \"MountTargetId\": \"fsmt-ff\",\n+      \"FileSystemId\": \"fs-ff\",\n+      \"SubnetId\": \"subnet-ff\",\n+      \"LifeCycleState\": \"creating\",\n+      \"IpAddress\": \"192.168.73.152\",\n+      \"NetworkInterfaceId\": \"eni-0a31830833bf6b030\",\n+      \"AvailabilityZoneId\": \"usw2-az2\",\n+      \"AvailabilityZoneName\": \"us-west-2a\",\n+      \"VpcId\": \"vpc-ff\"\n+  }\n+  EFS File System ID - YOUR-EFS-ID\n+  EFS File System DNS Name - YOUR-EFS-ID.efs..amazonaws.com\n+  Succesfully created EFS & Mountpoints\n+  ```\n+\n+  \n+\n+  Upon completion of the script it would emit a EFS volume DNS Name similar to `fs-ab1cd.efs.us-west-2.amazonaws.com` where `fs-ab1cd` is the EFS filesystem id.\n+\n+  \n+\n+  You should be able to see a Security Group in your AWS Console with Inbound Rules to a NFS (Port 2049)\n+\n+  \n+\n+  ![security_group](images/security_group.png)\n+\n+  \n+\n+  You should also find Mount Points in your EFS console for every region where there is a Node in the Node Group.\n+\n+  \n+\n+  ![](images/efs_mount.png)\n+\n+  \n+\n+  \n+\n+  **Prepare PersistentVolume for Deployment**\n+\n+  We use the [ELF Provisioner Helm Chart](https://github.com/helm/charts/tree/master/stable/efs-provisioner) to create a PersistentVolume backed by EFS. Run the following command to set this up.\n+\n+  ```bash\n+  helm repo add stable https://kubernetes-charts.storage.googleapis.com\n+  helm install stable/efs-provisioner --set efsProvisioner.efsFileSystemId=YOUR-EFS-FS-ID --set efsProvisioner.awsRegion=us-west-2 --set efsProvisioner.reclaimPolicy=Retain --generate-name\n+  ```\n+\n+  \n+\n+  you should get an output similar to \n+\n+  \n+\n+  ```bash\n+  NAME: efs-provisioner-1596010253\n+  LAST DEPLOYED: Wed Jul 29 08:10:56 2020\n+  NAMESPACE: default\n+  STATUS: deployed\n+  REVISION: 1\n+  TEST SUITE: None\n+  NOTES:\n+  You can provision an EFS-backed persistent volume with a persistent volume claim like below:\n+  \n+  kind: PersistentVolumeClaim\n+  apiVersion: v1\n+  metadata:\n+    name: my-efs-vol-1\n+    annotations:\n+      volume.beta.kubernetes.io/storage-class: aws-efs\n+  spec:\n+    storageClassName: aws-efs\n+    accessModes:\n+      - ReadWriteMany\n+    resources:\n+      requests:\n+        storage: 1Mi\n+  \n+  ```\n+\n+  \n+\n+  Verify that your EFS Provisioner installation is succesfull by invoking ```kubectl get pods```. Your output should look similar to,\n+\n+  \n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ kubectl get pods\n+  NAME                                          READY   STATUS    RESTARTS   AGE\n+  efs-provisioner-1596010253-6c459f95bb-v68bm   1/1     Running   0          109s\n+  ```\n+\n+ Update `templates/efs_pv_claim.yaml` - `resources.request.storage` with the size of your PVC claim based on the size of the models you plan to use.  Now run, ```kubectl apply -f templates/efs_pv_claim.yaml```. This would also create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files in the same folder structure described above. \n+\n+  \n+\n+  Your output should look similar to,\n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ kubectl apply -f templates/efs_pv_claim.yaml\n+  persistentvolumeclaim/model-store-claim created\n+  pod/model-store-pod created\n+  ```\n+\n+  \n+\n+  Verify that the PVC / Pod is created  by excuting.   ```kubectl get service,po,daemonset,pv,pvc --all-namespaces``` \n+\n+  You should see\n+\n+  * ```Running``` status for ```pod/model-store-pod```  \n+  * ```Bound``` status for ```default/model-store-claim``` and ```persistentvolumeclaim/model-store-claim```\n+\n+  \n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ kubectl get service,po,daemonset,pv,pvc --all-namespaces\n+  NAMESPACE     NAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE\n+  default       service/kubernetes   ClusterIP   10.100.0.1    <none>        443/TCP         107m\n+  kube-system   service/kube-dns     ClusterIP   10.100.0.10   <none>        53/UDP,53/TCP   107m\n+  \n+  NAMESPACE     NAME                                              READY   STATUS    RESTARTS   AGE\n+  default       pod/efs-provisioner-1596010253-6c459f95bb-v68bm   1/1     Running   0          4m49s\n+  default       pod/model-store-pod                               1/1     Running   0          8s\n+  kube-system   pod/aws-node-xx8kp                                1/1     Running   0          99m\n+  kube-system   pod/coredns-5c97f79574-tchfg                      1/1     Running   0          107m\n+  kube-system   pod/coredns-5c97f79574-thzqw                      1/1     Running   0          106m\n+  kube-system   pod/kube-proxy-4l8mw                              1/1     Running   0          99m\n+  kube-system   pod/nvidia-device-plugin-daemonset-dbhgq          1/1     Running   0          94m\n+  \n+  NAMESPACE     NAME                                            DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\n+  kube-system   daemonset.apps/aws-node                         1         1         1       1            1           <none>          107m\n+  kube-system   daemonset.apps/kube-proxy                       1         1         1       1            1           <none>          107m\n+  kube-system   daemonset.apps/nvidia-device-plugin-daemonset   1         1         1       1            1           <none>          94m\n+  \n+  NAMESPACE   NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS   REASON   AGE\n+              persistentvolume/pvc-baf0bd37-2084-4a08-8a3c-4f77843b4736   1Gi        RWX            Delete           Bound    default/model-store-claim   aws-efs                 8s\n+  \n+  NAMESPACE   NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+  default     persistentvolumeclaim/model-store-claim   Bound    pvc-baf0bd37-2084-4a08-8a3c-4f77843b4736   1Gi        RWX            aws-efs        8s\n+  ```\n+\n+  \n+\n+  Now edit the TS config file `config.properties` that would be used for the deployment. Any changes to this config should also have corresponding changes in Torchserve Helm Chart that we install in the next section. This config would be used by every torchserve instance in worker pods.\n+\n+  \n+\n+  The default config starts **squeezenet1_1** and **mnist** from the model zoo with 3, 5 workers.\n+\n+  \n+\n+  ```yaml\n+  inference_address=http://0.0.0.0:8080\n+  management_address=http://0.0.0.0:8081\n+  NUM_WORKERS=1\n+  number_of_gpu=1\n+  number_of_netty_threads=32\n+  job_queue_size=1000\n+  model_store=/home/model-server/shared/model-store\n+  model_snapshot={\"name\":\"startup.cfg\",\"modelCount\":2,\"models\":{\"squeezenet1_1\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"squeezenet1_1.mar\",\"minWorkers\":3,\"maxWorkers\":3,\"batchSize\":1,\"maxBatchDelay\":100,\"responseTimeout\":120}},\"mnist\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"mnist.mar\",\"minWorkers\":5,\"maxWorkers\":5,\"batchSize\":1,\"maxBatchDelay\":200,\"responseTimeout\":60}}}}\n+  ```\n+\n+  \n+\n+  Now copy the files over to PersistentVolume using the following commands.\n+\n+  \n+\n+  ```bash\n+  wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+  wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+  \n+  kubectl exec --tty pod/model-store-pod -- mkdir /pv/model-store/\n+  kubectl cp squeezenet1_1.mar model-store-pod:/pv/model-store/squeezenet1_1.mar\n+  kubectl cp mnist.mar model-store-pod:/pv/model-store/mnist.mar\n+  \n+  \n+  kubectl exec --tty pod/model-store-pod -- mkdir /pv/config/\n+  kubectl cp config.properties model-store-pod:/pv/config/config.properties\n+  ```\n+\n+  \n+\n+  Verify that the files have been copied by executing ```kubectl exec --tty pod/model-store-pod -- find /pv/``` . You should get an output similar to,\n+\n+  \n+\n+  ```bash\n+  ubuntu@ip-172-31-50-36:~/serve/kubernetes$ kubectl exec --tty pod/model-store-pod -- find /pv/\n+  /pv/\n+  /pv/config\n+  /pv/config/config.properties\n+  /pv/model-store\n+  /pv/model-store/squeezenet1_1.mar\n+  /pv/model-store/mnist.mar\n+  ```\n+\n+  \n+\n+  Finally terminate the pod - `kubectl delete pod/model-store-pod`.\n+\n+  \n+\n+  ## Deploy TorchServe using Helm Charts\n+\n+  \n+  The following table describes all the parameters for the Helm Chart.\n+\n+  | Parameter          | Description              | Default                         |\n+  | ------------------ | ------------------------ | ------------------------------- |\n+  | `image`            | Torchserve Serving image | `pytorch/torchserve:latest-gpu` |\n+  | `management-port`  | TS Inference port        | `8080`                          |\n+  | `inference-port`   | TS Management port       | `8081`                          |\n+  | `replicas`         | K8S deployment replicas  | `1`                             |\n+  | `model-store`      | EFS mountpath            | `/home/model-server/shared/`    |\n+  | `persistence.size` | Storage size to request  | `1Gi`                           |\n+  | `n_gpu`            | Number of GPU in a TS Pod| `1`                             |\n+  | `n_cpu`            | Number of CPU in a TS Pod| `1`                             |\n+  | `memory_limit`     | TS Pod memory limit      | `4Gi`                           |\n+  | `memory_request`   | TS Pod memory request    | `1Gi`                           |\n+\n+\n+  Edit the values in `values.yaml` with the right parameters.  Somethings to consider,\n+  \n+  * Set torchserve_image to the `pytorch/torchserve:latest` if your nodes are CPU.\n+  * Set `persistence.size` based on the size of your models.\n+  * The value of `replicas` should be less than number of Nodes in the Node group.\n+  * `n_gpu` would be exposed to TS container by docker. This should be set to `number_of_gpu` in `config.properties` above.\n+  * `n_gpu` & `n_cpu` values are used on a per pod level and not in the entire cluster level\n+\n+  ```yaml\n+  # Default values for torchserve helm chart.\n+  \n+  torchserve_image: pytorch/torchserve:latest-gpu\n+  \n+  namespace: torchserve\n+  \n+  torchserve:\n+    management_port: 8081\n+    inference_port: 8080\n+    pvd_mount: /home/model-server/shared/\n+    n_gpu: 1\n+    n_cpu: 1\n+    memory_limit: 4Gi\n+    memory_request: 1Gi\n+  \n+  deployment:\n+    replicas: 1 # Changes this to number of node in Node Group\n+  \n+  persitant_volume:\n+    size: 1Gi\n+  ```\n+\n+\n+  To install Torchserve run ```helm install ts .```  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5445cde2a73cad0da5f83fe6043fb68306fd16"}, "originalPosition": 585}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTYzNDQyOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/templates/AKS_pv_claim.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoxOTo1M1rOHanzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMzoxNlrOHe_SbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzI2Mw==", "bodyText": "NIT: Please use a descriptive name", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497677263", "createdAt": "2020-09-30T17:19:53Z", "author": {"login": "maaquib"}, "path": "kubernetes/AKS/templates/AKS_pv_claim.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+kind: PersistentVolumeClaim\n+apiVersion: v1\n+metadata:\n+  name: model-store-claim\n+spec:\n+  storageClassName: my-azurefile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjIzNw==", "bodyText": "The name of the storageclass has been changed to \"persistent-volume-azurefile\". The name of the PersistentVolumeClaim is the same as that in EKS/templates/efs_pv_claim.yaml, is it necessary to change it?", "url": "https://github.com/pytorch/serve/pull/644#discussion_r502256237", "createdAt": "2020-10-09T08:03:16Z", "author": {"login": "MengMeng96"}, "path": "kubernetes/AKS/templates/AKS_pv_claim.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+kind: PersistentVolumeClaim\n+apiVersion: v1\n+metadata:\n+  name: model-store-claim\n+spec:\n+  storageClassName: my-azurefile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzI2Mw=="}, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTYzNjUxOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/templates/Azure_file_sc.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMDoyNlrOHan1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMDozNlrOHe_M3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzU4Ng==", "bodyText": "NIT: Please use a descriptive name", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497677586", "createdAt": "2020-09-30T17:20:26Z", "author": {"login": "maaquib"}, "path": "kubernetes/AKS/templates/Azure_file_sc.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1\n+metadata:\n+  name: my-azurefile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NDgxMw==", "bodyText": "Thanks for your comment. The name of the storageclass has been changed to \"persistent-volume-azurefile\"", "url": "https://github.com/pytorch/serve/pull/644#discussion_r502254813", "createdAt": "2020-10-09T08:00:36Z", "author": {"login": "MengMeng96"}, "path": "kubernetes/AKS/templates/Azure_file_sc.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1\n+metadata:\n+  name: my-azurefile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzU4Ng=="}, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY0NjQ5OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzoxM1rOHan7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzoxM1rOHan7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### 1\u3001Create an AKS cluster\n          \n          \n            \n            ### 1 Create an AKS cluster", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497679237", "createdAt": "2020-09-30T17:23:13Z", "author": {"login": "maaquib"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1\u3001Create an AKS cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY0ODIxOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzo1MlrOHan8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzo1MlrOHan8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### 2\u3001Deploy TorchServe on AKS\n          \n          \n            \n            ### 2 Deploy TorchServe on AKS", "url": "https://github.com/pytorch/serve/pull/644#discussion_r497679553", "createdAt": "2020-09-30T17:23:52Z", "author": {"login": "maaquib"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1\u3001Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 1.6 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2\u3001Deploy TorchServe on AKS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzMzY3OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMTowOFrOHb8saw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMTowOFrOHb8saw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```kubectl apply -f templates/model-store-pod.yaml```\n          \n          \n            \n            ```kubectl apply -f templates/model_store_pod.yaml```\n          \n      \n    \n    \n  \n\nThe checked in yaml file uses underscores instead", "url": "https://github.com/pytorch/serve/pull/644#discussion_r499068011", "createdAt": "2020-10-02T22:01:08Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 1.6 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2\u3001Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.3 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.4 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model-store-pod.yaml```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e26377161ffd511d7e8b0fe47daf9de71fb2c0"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzNTkzOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMjoyOVrOHb8t3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzo1ODo1OVrOHe_JdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODM4Mw==", "bodyText": "We don't have the .yaml file yet in this step because we clone the repo in step 2.1. Can we change the order so that the repo is cloned earlier or the NVidia plugin is applied later?", "url": "https://github.com/pytorch/serve/pull/644#discussion_r499068383", "createdAt": "2020-10-02T22:02:29Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f nvidia-device-plugin-ds.yaml```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e26377161ffd511d7e8b0fe47daf9de71fb2c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1Mzk0MA==", "bodyText": "Thanks for your comments. The order of AKS/README.md has been changed.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r502253940", "createdAt": "2020-10-09T07:58:59Z", "author": {"login": "MengMeng96"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f nvidia-device-plugin-ds.yaml```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODM4Mw=="}, "originalCommit": {"oid": "00e26377161ffd511d7e8b0fe47daf9de71fb2c0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzc5NTIyOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo1MDo1OVrOHhrqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo1MDo1OVrOHhrqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4MDQ1Mw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            `kubectl get pods` should show something similar to:", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505080453", "createdAt": "2020-10-14T23:50:59Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg0MzI3OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowMzo1NFrOHhsKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowMzo1NFrOHhsKsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4ODY5MQ==", "bodyText": "nit: Since the EKS document puts log results in boxes, let's do the same to keep the docs consistent.\n(Note: I'm unable to actually suggest the change because of how markdown works)\nNAME                  READY  STATUS  RESTARTS  AGE\nnvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505088691", "createdAt": "2020-10-15T00:03:54Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg0NDUwOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowNDoyM1rOHhsLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowNDoyM1rOHhsLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4ODg2NQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            persistentvolumeclaim/model-store-claim created\n          \n          \n            \n            ```persistentvolumeclaim/model-store-claim created```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505088865", "createdAt": "2020-10-15T00:04:23Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg0NzI2OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowNTo1MFrOHhsNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowNTo1MFrOHhsNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTI4Mg==", "bodyText": "nit: wrap in a box with ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505089282", "createdAt": "2020-10-15T00:05:50Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg1MjE0OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowODozMVrOHhsP6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowODozMVrOHhsP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MDAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            pod/model-store-pod created\n          \n          \n            \n            ```pod/model-store-pod created```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505090026", "createdAt": "2020-10-15T00:08:31Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg1NTE1OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowOTo1NFrOHhsRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDowOTo1NFrOHhsRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MDQ1OA==", "bodyText": "nit: wrap in box with ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505090458", "createdAt": "2020-10-15T00:09:54Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg1NzkxOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxMToyMlrOHhsTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxMToyMlrOHhsTIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MDg1MA==", "bodyText": "torchserve pod not created yet in this step\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NAME                                   READY   STATUS    RESTARTS   AGE\n          \n          \n            \n            model-store-pod                        1/1     Running   0          143m\n          \n          \n            \n            nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n          \n          \n            \n            torchserve-576df559ff-tww7q            1/1     Running   0          141m\n          \n          \n            \n            NAME                                   READY   STATUS    RESTARTS   AGE\n          \n          \n            \n            model-store-pod                        1/1     Running   0          143m\n          \n          \n            \n            nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505090850", "createdAt": "2020-10-15T00:11:22Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2MDEzOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxMjozMVrOHhsUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxMjozMVrOHhsUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MTE5MQ==", "bodyText": "Use new pytorch.org URLs for mar files\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n          \n          \n            \n            wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n          \n          \n            \n            wget https://torchserve.pytorch.org/mar_files/squeezenet1_1.mar\n          \n          \n            \n            wget https://torchserve.pytorch.org/mar_files/mnist.mar", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505091191", "createdAt": "2020-10-15T00:12:31Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2MzY1OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNDoyNVrOHhsWgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNDoyNVrOHhsWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MTcxNA==", "bodyText": "nit: wrap in ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505091714", "createdAt": "2020-10-15T00:14:25Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2NTYwOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNToxMlrOHhsXhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNToxMlrOHhsXhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MTk3Mg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Enter the Helm directory and install TorchServe using Helm Charts\n          \n          \n            \n            Enter the Helm directory and install TorchServe using Helm Charts.", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505091972", "createdAt": "2020-10-15T00:15:12Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2NjM2OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNTozM1rOHhsX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNTozM1rOHhsX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MjA4MQ==", "bodyText": "wrap in ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505092081", "createdAt": "2020-10-15T00:15:33Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts\n+```cd ../Helm```\n+\n+```helm install ts .```\n+\n+Your output should look similar to\n+\n+NAME: ts\n+LAST DEPLOYED: Thu Aug 20 02:07:38 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2ODUxOnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjozNVrOHhsZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjozNVrOHhsZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MjM5OQ==", "bodyText": "wrap in ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505092399", "createdAt": "2020-10-15T00:16:35Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts\n+```cd ../Helm```\n+\n+```helm install ts .```\n+\n+Your output should look similar to\n+\n+NAME: ts\n+LAST DEPLOYED: Thu Aug 20 02:07:38 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+\n+#### 2.8 Check the status of TorchServe\n+\n+```kubectl get po```\n+\n+The installation will take a few minutes. Output like this means the installation is not completed yet.\n+\n+NAME                               READY   STATUS              RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        0/1     ContainerCreating   0          6s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2ODc0OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjo0MlrOHhsZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjo0MlrOHhsZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MjQzNw==", "bodyText": "wrap in ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505092437", "createdAt": "2020-10-15T00:16:42Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts\n+```cd ../Helm```\n+\n+```helm install ts .```\n+\n+Your output should look similar to\n+\n+NAME: ts\n+LAST DEPLOYED: Thu Aug 20 02:07:38 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+\n+#### 2.8 Check the status of TorchServe\n+\n+```kubectl get po```\n+\n+The installation will take a few minutes. Output like this means the installation is not completed yet.\n+\n+NAME                               READY   STATUS              RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        0/1     ContainerCreating   0          6s\n+\n+Output like this means the installation is completed.\n+\n+NAME                               READY   STATUS    RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        1/1     Running   0          2m36s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg2OTA5OnYy", "diffSide": "RIGHT", "path": "kubernetes/AKS/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjo1M1rOHhsZlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoxNjo1M1rOHhsZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5MjUwMA==", "bodyText": "wrap in ```", "url": "https://github.com/pytorch/serve/pull/644#discussion_r505092500", "createdAt": "2020-10-15T00:16:53Z", "author": {"login": "jeremiahschung"}, "path": "kubernetes/AKS/README.md", "diffHunk": "@@ -0,0 +1,262 @@\n+## TorchServe on Azure Kubernetes Service (AKS)\n+\n+### 1 Create an AKS cluster\n+\n+This quickstart requires that you are running the Azure CLI version 2.0.64 or later. Run `az --version` to find the version. If you need to install or upgrade, see [Install Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli).\n+\n+#### 1.1 Set Azure account information\n+\n+```az login``` \n+\n+```az account set -s your-subscription-ID```\n+\n+#### 1.2 Create a resource group\n+\n+An Azure resource group is a logical group in which Azure resources are deployed and managed. When you create a resource group, you are asked to specify a location. This location is where resource group metadata is stored, it is also where your resources run in Azure if you don't specify another region during resource creation. Create a resource group using the [az group create](https://docs.microsoft.com/en-us/cli/azure/group#az-group-create) command.\n+\n+The following example creates a resource group named *myResourceGroup* in the *eastus* location.\n+\n+```az group create --name myResourceGroup --location eastus```\n+\n+#### 1.3 Create AKS cluster\n+\n+Use the [az aks create](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-create) command to create an AKS cluster. The following example creates a cluster named *myAKSCluster* with one node. This will take several minutes to complete.\n+\n+```az aks create  --resource-group myResourceGroup  --name myAKSCluster --node-vm-size Standard_NC6   --node-count 1```\n+\n+#### 1.4 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [az aks install-cli](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli) command:\n+\n+```az aks install-cli```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [az aks get-credentials](https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```az aks get-credentials --resource-group myResourceGroup --name myAKSCluster```\n+\n+#### 1.5 Install helm\n+\n+```\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on AKS\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```git clone https://github.com/pytorch/serve.git```\n+\n+```cd serve/kubernetes/AKS```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```kubectl apply -f templates/nvidia-device-plugin-ds.yaml```\n+\n+NAME                  READY  STATUS  RESTARTS  AGE\n+\n+nvidia-device-plugin-daemonset-7lvxd  1/1   Running  0     42s\n+\n+#### 2.3 Create a storage class\n+\n+A storage class is used to define how an Azure file share is created. If multiple pods need concurrent access to the same storage volume, you need Azure Files. Create the storage class with the following kubectl apply command:\n+\n+```kubectl apply -f templates/Azure_file_sc.yaml```\n+\n+#### 2.4 Create PersistentVolume\n+\n+```kubectl apply -f templates/AKS_pv_claim.yaml```\n+\n+Your output should look similar to\n+\n+persistentvolumeclaim/model-store-claim created\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```kubectl get pvc,pv```\n+\n+Your output should look similar to\n+\n+NAME                                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\n+persistentvolumeclaim/model-store-claim   Bound    pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            managed-premium   29s\n+\n+NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS      REASON   AGE\n+persistentvolume/pvc-c9e235a8-ca2b-4d04-8f25-8262de1bb915   1Gi        RWO            Delete           Bound    default/model-store-claim   managed-premium            28s\n+\n+#### 2.5 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```kubectl apply -f templates/model_store_pod.yaml```\n+\n+Your output should look similar to\n+\n+pod/model-store-pod created\n+\n+Verify that the pod is created by excuting.\n+\n+```kubectl get po```\n+\n+Your output should look similar to\n+\n+NAME                                   READY   STATUS    RESTARTS   AGE\n+model-store-pod                        1/1     Running   0          143m\n+nvidia-device-plugin-daemonset-qccgn   1/1     Running   0          144m\n+torchserve-576df559ff-tww7q            1/1     Running   0          141m\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```shell\n+wget https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\n+wget https://torchserve.s3.amazonaws.com/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/mnt/azure/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/mnt/azure/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /mnt/azure/config/\n+kubectl cp config.properties model-store-pod:/mnt/azure/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```kubectl exec --tty pod/model-store-pod -- find /mnt/azure/```\n+\n+Your output should look similar to\n+\n+/mnt/azure/\n+/mnt/azure/config\n+/mnt/azure/config/config.properties\n+/mnt/azure/lost+found\n+/mnt/azure/model-store\n+/mnt/azure/model-store/mnist.mar\n+/mnt/azure/model-store/squeezenet1_1.mar\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts\n+```cd ../Helm```\n+\n+```helm install ts .```\n+\n+Your output should look similar to\n+\n+NAME: ts\n+LAST DEPLOYED: Thu Aug 20 02:07:38 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+\n+#### 2.8 Check the status of TorchServe\n+\n+```kubectl get po```\n+\n+The installation will take a few minutes. Output like this means the installation is not completed yet.\n+\n+NAME                               READY   STATUS              RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        0/1     ContainerCreating   0          6s\n+\n+Output like this means the installation is completed.\n+\n+NAME                               READY   STATUS    RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        1/1     Running   0          2m36s\n+\n+### 3 Test Torchserve Installation\n+\n+#### 3.1 Fetch the Load Balancer Extenal IP\n+\n+Fetch the Load Balancer Extenal IP by executing.\n+\n+```kubectl get svc```\n+\n+Your output should look similar to\n+\n+NAME               TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                         AGE\n+kubernetes         ClusterIP      10.0.0.1       <none>         443/TCP                         5d19h\n+torchserve         LoadBalancer   10.0.39.88     your-external-IP   8080:30306/TCP,8081:30442/TCP   48s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1413, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}