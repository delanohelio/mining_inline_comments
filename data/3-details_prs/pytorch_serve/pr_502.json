{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NjA4NjE5", "number": 502, "title": "Refactor BaseHandler", "bodyText": "Description\nRefactors BaseHandler and derived classes for better consistency and reusability. Fixes #(436) and sets the stage for fixing #(436), which will be fixed in a later PR.\nThis pull request does include changes for the models to assume things are in batch, and updates some inconsistent properties of index_to_name.json for object detector.\nType of change\nPlease delete options that are not relevant.\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n This change requires a documentation update\n\nFeature/Issue validation/testing\nUnit tests have been added for the individual handlers. I also ran example models for each of the unit tests added.\nChecklist:\n\n[Y] Have you added tests that prove your fix is effective or that this feature works?\n[Y] New and existing unit tests pass locally with these changes?\n[Y] Has code been commented, particularly in hard-to-understand areas?\n[Y] Have you made corresponding changes to the documentation?", "createdAt": "2020-07-07T19:19:34Z", "url": "https://github.com/pytorch/serve/pull/502", "merged": true, "mergeCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "closed": true, "closedAt": "2020-07-10T15:36:19Z", "author": {"login": "htappen"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcylyK9gH2gAyNDQ1NjA4NjE5OjA5ODJjZWNhYjZkYzVjYTM1MTI2NjlhYTNiNzkyYmE1ZmJlMWU5Y2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczSBdHAH2gAyNDQ1NjA4NjE5OmM2MGUwOGRjNmM3ZjhkZWExOTA3YjFhMTg3NDUyY2Q3MjAyZjlkYzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0982cecab6dc5ca3512669aa3b792ba5fbe1e9cf", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/0982cecab6dc5ca3512669aa3b792ba5fbe1e9cf", "committedDate": "2020-07-07T13:23:35Z", "message": "Refactor BaseHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9acb4a8b6d0b7bea2f1f2a825f2d842e3655b0", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/5c9acb4a8b6d0b7bea2f1f2a825f2d842e3655b0", "committedDate": "2020-07-07T14:19:30Z", "message": "Adding in unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cfe6199f1ec3ac72f69f494ecc5c59d70b6843b", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/3cfe6199f1ec3ac72f69f494ecc5c59d70b6843b", "committedDate": "2020-07-07T14:24:16Z", "message": "Fixed gitignore in this branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5aadbc706c0ab65eb1b8ada0cc721446ced5bc5", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/c5aadbc706c0ab65eb1b8ada0cc721446ced5bc5", "committedDate": "2020-07-07T16:52:28Z", "message": "Fix a bug with Image Segmenter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2b428920e12e57bbe5f63fc87cbd2e8ca4869f", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/fd2b428920e12e57bbe5f63fc87cbd2e8ca4869f", "committedDate": "2020-07-07T19:14:48Z", "message": "Updated Object Detector to reuse functionality; consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ebbd9fd9441e0c6cace142cc19aad2cc46190f3", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/5ebbd9fd9441e0c6cace142cc19aad2cc46190f3", "committedDate": "2020-07-08T00:26:33Z", "message": "Fix pylint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d447117e21bb942aec0b7a6ceb72e329385cbe", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/61d447117e21bb942aec0b7a6ceb72e329385cbe", "committedDate": "2020-07-08T02:25:46Z", "message": "Backwards compat for index_names.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7743c558652a240963a1e1dda804be7014a4b4", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/7b7743c558652a240963a1e1dda804be7014a4b4", "committedDate": "2020-07-08T04:52:27Z", "message": "Fixed Image Segmenter again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/45ac4999fb081a97de0a3d80b2fb095e5e74b126", "committedDate": "2020-07-08T14:58:39Z", "message": "Made the compat layer in text actually compat."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6619a78ef420e29fe4b83e6f26c017221663a3", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/7e6619a78ef420e29fe4b83e6f26c017221663a3", "committedDate": "2020-07-08T16:47:12Z", "message": "Removed batching from text classifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTUyNzI4", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-444952728", "createdAt": "2020-07-08T16:50:01Z", "commit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1MDowMVrOGuwyzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzo0MjozOVrOGuytwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzExNg==", "bodyText": "should we enforce this?\nI guess it makes sense, not sure what the side effects are?\nIt's probably worth passing this through the regression test suite", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451687116", "createdAt": "2020-07-08T16:50:01Z", "author": {"login": "mycpuorg"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n+        self.mapping = load_label_mapping(mapping_file_path)\n \n         self.initialized = True\n \n+    def _load_torchscript_model(self, model_pt_path):\n+        return torch.jit.load(model_pt_path)\n+\n+    def _load_pickled_model(self, model_dir, model_file, model_pt_path):\n+        model_def_path = os.path.join(model_dir, model_file)\n+        if not os.path.isfile(model_def_path):\n+            raise RuntimeError(\"Missing the model.py file\")\n+\n+        module = importlib.import_module(model_file.split(\".\")[0])\n+        model_class_definitions = list_classes_from_module(module)\n+        if len(model_class_definitions) != 1:\n+            raise ValueError(\"Expected only one class as model definition. {}\".format(\n+                model_class_definitions))\n+\n+        model_class = model_class_definitions[0]\n+        state_dict = torch.load(model_pt_path)\n+        model = model_class()\n+        model.load_state_dict(state_dict)\n+        return model\n+\n+\n+\n     def preprocess(self, data):\n         \"\"\"\n         Override to customize the pre-processing\n-        :param data: input data\n-        :return: input data\n+        :param data: Python list of data items\n+        :return: input tensor on a device\n         \"\"\"\n-        return data\n+        return torch.as_tensor(data, device=self.device)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzYyNg==", "bodyText": "same comment as above", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451687626", "createdAt": "2020-07-08T16:50:46Z", "author": {"login": "mycpuorg"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n+        self.mapping = load_label_mapping(mapping_file_path)\n \n         self.initialized = True\n \n+    def _load_torchscript_model(self, model_pt_path):\n+        return torch.jit.load(model_pt_path)\n+\n+    def _load_pickled_model(self, model_dir, model_file, model_pt_path):\n+        model_def_path = os.path.join(model_dir, model_file)\n+        if not os.path.isfile(model_def_path):\n+            raise RuntimeError(\"Missing the model.py file\")\n+\n+        module = importlib.import_module(model_file.split(\".\")[0])\n+        model_class_definitions = list_classes_from_module(module)\n+        if len(model_class_definitions) != 1:\n+            raise ValueError(\"Expected only one class as model definition. {}\".format(\n+                model_class_definitions))\n+\n+        model_class = model_class_definitions[0]\n+        state_dict = torch.load(model_pt_path)\n+        model = model_class()\n+        model.load_state_dict(state_dict)\n+        return model\n+\n+\n+\n     def preprocess(self, data):\n         \"\"\"\n         Override to customize the pre-processing\n-        :param data: input data\n-        :return: input data\n+        :param data: Python list of data items\n+        :return: input tensor on a device\n         \"\"\"\n-        return data\n+        return torch.as_tensor(data, device=self.device)\n \n     def inference(self, data):\n         \"\"\"\n         Override to customize the inference\n-        :param data: pre-processed data\n-        :return: prediction output\n+        :param data: Torch tensor, matching the model input shape\n+        :return: Prediction output as Torch tensor\n         \"\"\"\n-        return self.model(data)\n+        marshalled_data = data.to(self.device)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODYxOQ==", "bodyText": "something something imagenet data flag here?", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451688619", "createdAt": "2020-07-08T16:52:20Z", "author": {"login": "mycpuorg"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -17,77 +15,24 @@ class ImageClassifier(VisionHandler):\n     and returns the name of object in that image.\n     \"\"\"\n \n-    TOP_FIVE_CLASSES = 5\n-\n-    def __init__(self):\n-        super(ImageClassifier, self).__init__()\n-        self.topk = ImageClassifier.TOP_FIVE_CLASSES\n+    topk = 5\n+    image_processing = transforms.Compose([\n+        transforms.Resize(256),\n+        transforms.CenterCrop(224),\n+        transforms.ToTensor(),\n+        transforms.Normalize(mean=[0.485, 0.456, 0.406],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNTI3Nw==", "bodyText": "Might be worth keeping the output of example inputs somewhere for people to cross verify. Maybe example_output.json", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451715277", "createdAt": "2020-07-08T17:37:00Z", "author": {"login": "mycpuorg"}, "path": "examples/image_segmenter/README.md", "diffHunk": "@@ -18,90 +18,4 @@ wget https://download.pytorch.org/models/fcn_resnet101_coco-7ecb50ca.pth\n     curl http://127.0.0.1:8080/predictions/fcn -T examples/image_segmenter/fcn/persons.jpg\n     ```\n * Output\n-\n-```json\n-[[[11.49452    11.49452    11.49452    ... 10.846567   10.846567", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNjcxMw==", "bodyText": "This would break existing handlers, I don't see a strong reason to do this.", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451716713", "createdAt": "2020-07-08T17:39:31Z", "author": {"login": "mycpuorg"}, "path": "examples/object_detector/index_to_name.json", "diffHunk": "@@ -1,14 +1,93 @@\n-{\"object_type_names\" : [\n-    \"__background__\", \"person\", \"bicycle\", \"car\", \"motorcycle\", \"airplane\", \"bus\",\n-    \"train\", \"truck\", \"boat\", \"traffic light\", \"fire hydrant\", \"N/A\", \"stop sign\",\n-    \"parking meter\", \"bench\", \"bird\", \"cat\", \"dog\", \"horse\", \"sheep\", \"cow\",\n-    \"elephant\", \"bear\", \"zebra\", \"giraffe\", \"N/A\", \"backpack\", \"umbrella\", \"N/A\", \"N/A\",\n-    \"handbag\", \"tie\", \"suitcase\", \"frisbee\", \"skis\", \"snowboard\", \"sports ball\",\n-    \"kite\", \"baseball bat\", \"baseball glove\", \"skateboard\", \"surfboard\", \"tennis racket\",\n-    \"bottle\", \"N/A\", \"wine glass\", \"cup\", \"fork\", \"knife\", \"spoon\", \"bowl\",\n-    \"banana\", \"apple\", \"sandwich\", \"orange\", \"broccoli\", \"carrot\", \"hot dog\", \"pizza\",\n-    \"donut\", \"cake\", \"chair\", \"couch\", \"potted plant\", \"bed\", \"N/A\", \"dining table\",\n-    \"N/A\", \"N/A\", \"toilet\", \"N/A\", \"tv\", \"laptop\", \"mouse\", \"remote\", \"keyboard\", \"cell phone\",\n-    \"microwave\", \"oven\", \"toaster\", \"sink\", \"refrigerator\", \"N/A\", \"book\",\n-    \"clock\", \"vase\", \"scissors\", \"teddy bear\", \"hair drier\", \"toothbrush\"\n-]}\n\\ No newline at end of file\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxODU5Mg==", "bodyText": "Deleting this example?", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451718592", "createdAt": "2020-07-08T17:42:39Z", "author": {"login": "mycpuorg"}, "path": "examples/image_classifier/resnet_152_batch/resnet152_handler.py", "diffHunk": "@@ -1,38 +0,0 @@\n-import torch\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "committedDate": "2020-07-09T03:58:58Z", "message": "Adding comments per review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjgxMTIz", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445281123", "createdAt": "2020-07-09T04:27:24Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoyNzoyNVrOGvBPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoyNzoyNVrOGvBPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NjUwMA==", "bodyText": "duplicate line. Also, can we move this line to function itself?", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451956500", "createdAt": "2020-07-09T04:27:25Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjgzMzAw", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445283300", "createdAt": "2020-07-09T04:36:02Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDozNjowMlrOGvBW4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDozNjowMlrOGvBW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1ODQ5Nw==", "bodyText": "This seems redundant. Can we remove it?\nNOTE, In general, we found that try...except for identifying scripted model is not good and some times problematic as well. Based on the fact that an eager model needs a model file, we have changed this in different PR which has been already merged.", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451958497", "createdAt": "2020-07-09T04:36:02Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -32,35 +30,30 @@ def initialize(self, context):\n \n         self.manifest = context.manifest\n         properties = context.system_properties\n-        model_dir = properties.get(\"model_dir\")\n+\n         self.device = torch.device(\"cuda:\" + str(properties.get(\"gpu_id\")) if torch.cuda.is_available() else \"cpu\")\n \n-        # Read model serialize/pt file\n+        # Read in the model\n+        model_dir = properties.get(\"model_dir\")\n         serialized_file = self.manifest['model']['serializedFile']\n         model_pt_path = os.path.join(model_dir, serialized_file)\n+\n         if not os.path.isfile(model_pt_path):\n             raise RuntimeError(\"Missing the model.pt file\")\n \n+        # Torchscript is better, so try to read that first\n+        is_torchscript = True\n         try:\n             logger.debug('Loading torchscript model')\n-            self.model = torch.jit.load(model_pt_path)\n+            self.model = self._load_torchscript_model(model_pt_path)\n         except RuntimeError as e:\n-            # Read model definition file\n+            is_torchscript = False\n+\n+        if not is_torchscript:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzE1NDkz", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445315493", "createdAt": "2020-07-09T06:14:34Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNDozNFrOGvDC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNDozNFrOGvDC9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE2NQ==", "bodyText": "remove this as handler has been removed", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451986165", "createdAt": "2020-07-09T06:14:34Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -3,7 +3,7 @@ Run the commands given in following steps from the parent directory of the root\n \n ```bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzE1OTk3", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445315997", "createdAt": "2020-07-09T06:15:38Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNTozOVrOGvDE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxNTozOVrOGvDE8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjY3Mg==", "bodyText": "Will the user be able to repro the segmented image with this response?", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451986672", "createdAt": "2020-07-09T06:15:39Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_segmenter/README.md", "diffHunk": "@@ -18,90 +18,18 @@ wget https://download.pytorch.org/models/fcn_resnet101_coco-7ecb50ca.pth\n     curl http://127.0.0.1:8080/predictions/fcn -T examples/image_segmenter/fcn/persons.jpg\n     ```\n * Output\n+An array of shape [ Batch, Height, Width, 2] where the final dimensions are [class, probability]\n \n ```json\n-[[[11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  [11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  [11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  ...\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980104\n-    9.980104  ]\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980105\n-    9.980105  ]\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980105\n-    9.980105  ]]\n-\n- [[-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  [-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  [-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  ...\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]]\n-\n- [[-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  [-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  [-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  ...\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]]\n-\n- ...\n-\n- [[-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  [-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  [-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  ...\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]]\n-\n- [[-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  [-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  [-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  ...\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]]\n-\n- [[-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  [-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  [-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  ...\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034\n-   -0.42638034]\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034\n-   -0.42638034]\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034]\n-```\n+[[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzUyNjY3", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445352667", "createdAt": "2020-07-09T07:24:52Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNDo1M1rOGvE3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNDo1M1rOGvE3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNTk0OA==", "bodyText": "As far as I understood this, it will do end to end testing of default handlers without deploying them. However, it seems this will be a manual step. We are already doing end to end tests for default handlers however with deployment via torchserve_sanity.sh. Is there any other advantage of adding this? If yes, then we should make it part of sanity testing.", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452015948", "createdAt": "2020-07-09T07:24:53Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/unit_tests/run_unit_tests.sh", "diffHunk": "@@ -0,0 +1,54 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzUzNzIy", "url": "https://github.com/pytorch/serve/pull/502#pullrequestreview-445353722", "createdAt": "2020-07-09T07:26:34Z", "commit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjozNFrOGvE6pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjozNFrOGvE6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjgwNg==", "bodyText": "I see that you have modified the json files and made them consistent with respect to formats. Can you please document this somewhere so that some planning to use this util method will know what is expected.", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452016806", "createdAt": "2020-07-09T07:26:34Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/utils/util.py", "diffHunk": "@@ -21,3 +26,54 @@ def list_classes_from_module(module, parent_class=None):\n         return [c for c in classes if issubclass(c, parent_class)]\n \n     return classes\n+\n+def load_label_mapping(mapping_file_path):\n+    \"\"\"\n+    Load a JSON mapping { class ID -> friendly class name }.\n+    Used in BaseHandler.\n+    \"\"\"\n+    if not os.path.isfile(mapping_file_path):\n+        logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        return None\n+\n+    with open(mapping_file_path) as f:\n+        mapping = json.load(f)\n+    if not isinstance(mapping, dict):\n+        raise Exception('index_to_name mapping should be in \"class\":\"label\" json format')\n+\n+    # Older examples had a different syntax than others. This code accommodates those.\n+    if 'object_type_names' in mapping and isinstance(mapping['object_type_names'], list):\n+        mapping = {str(k): v for k, v in enumerate(mapping['object_type_names'])}\n+        return mapping\n+\n+    for key, value in mapping.items():\n+        new_value = value\n+        if isinstance(new_value, list):\n+            new_value = value[-1]\n+        if not isinstance(new_value, str):\n+            raise Exception('labels in index_to_name must be either str or [str]')\n+        mapping[key] = new_value\n+    return mapping\n+\n+def map_class_to_label(probs, mapping=None, lbl_classes=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b90357124daa6bea47fc6161f554b92b8855f6d", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/0b90357124daa6bea47fc6161f554b92b8855f6d", "committedDate": "2020-07-09T16:39:05Z", "message": "Fixing doc feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60e08dc6c7f8dea1907b1a187452cd7202f9dc3", "author": {"user": {"login": "htappen", "name": "Henry Tappen"}}, "url": "https://github.com/pytorch/serve/commit/c60e08dc6c7f8dea1907b1a187452cd7202f9dc3", "committedDate": "2020-07-09T16:56:06Z", "message": "Updating docs about batching."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2248, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}