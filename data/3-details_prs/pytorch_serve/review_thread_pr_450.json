{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDI3MDQ4", "number": 450, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowOToyMFrOELytSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxNDo0NVrOELyzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODAwNTg1OnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowOToyMFrOGth9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoyMjo0OVrOGtt1xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NTU4NQ==", "bodyText": "@harshbafna  Will people need to recreate their .mar files for existing models after this change? Want to understand the implications from migration perspective", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450395585", "createdAt": "2020-07-06T18:09:20Z", "author": {"login": "chauhang"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -167,8 +167,14 @@ public void validate() throws InvalidModelException {\n                 throw new InvalidModelException(\"Runtime is not defined or invalid.\");\n             }\n \n-            if (manifest.getEngine() != null && manifest.getEngine().getEngineName() == null) {\n-                throw new InvalidModelException(\"engineName is required in <engine>.\");\n+            if (manifest.getArchiverVersion() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5MDE0OQ==", "bodyText": "@chauhang : Per current changes, users don't need to re-create their existing .mar files. However, added a warning to migrate to the latest version.\nThe sanity script and regression-suite execute successfully, which ensures that the old mar files from model-zoo work without any issues.", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450590149", "createdAt": "2020-07-07T03:22:49Z", "author": {"login": "harshbafna"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -167,8 +167,14 @@ public void validate() throws InvalidModelException {\n                 throw new InvalidModelException(\"Runtime is not defined or invalid.\");\n             }\n \n-            if (manifest.getEngine() != null && manifest.getEngine().getEngineName() == null) {\n-                throw new InvalidModelException(\"engineName is required in <engine>.\");\n+            if (manifest.getArchiverVersion() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NTU4NQ=="}, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODAxNTEzOnYy", "diffSide": "RIGHT", "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxMjoxMVrOGtiDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMTowNVrOGtuepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NzAzOQ==", "bodyText": "@harshbafna How can user's specify the author/email? The CLI doesn't have any documented steps for this: https://github.com/pytorch/serve/blob/master/model-archiver/README.md#arguments", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450397039", "createdAt": "2020-07-06T18:12:11Z", "author": {"login": "chauhang"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -138,27 +136,17 @@ def __init__(self, **kwargs):\n \n         author = 'ABC'\n         email = 'ABC@XYZ.com'\n-        engine = EngineType.MXNET.value\n         model_name = 'my-model'\n         handler = 'a.py::my-awesome-func'\n         serialized_file = 'model.pt'\n         model_file = 'model.pt'\n         version = \"1.0\"\n         source_vocab = None\n \n-        args = Namespace(author=author, email=email, engine=engine, model_name=model_name, handler=handler,\n+        args = Namespace(author=author, email=email, model_name=model_name, handler=handler,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMDYxMg==", "bodyText": "Cleaned up unused params.", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450600612", "createdAt": "2020-07-07T04:11:05Z", "author": {"login": "harshbafna"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -138,27 +136,17 @@ def __init__(self, **kwargs):\n \n         author = 'ABC'\n         email = 'ABC@XYZ.com'\n-        engine = EngineType.MXNET.value\n         model_name = 'my-model'\n         handler = 'a.py::my-awesome-func'\n         serialized_file = 'model.pt'\n         model_file = 'model.pt'\n         version = \"1.0\"\n         source_vocab = None\n \n-        args = Namespace(author=author, email=email, engine=engine, model_name=model_name, handler=handler,\n+        args = Namespace(author=author, email=email, model_name=model_name, handler=handler,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NzAzOQ=="}, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODAyMjM4OnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/Manifest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxNDo0NVrOGtiIFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMToxM1rOGtueuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5ODIyOQ==", "bodyText": "@harshbafna How can user's specify description for the .mar files? At present there is no documented CLI option for this: https://github.com/pytorch/serve/blob/master/model-archiver/README.md#arguments", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450398229", "createdAt": "2020-07-06T18:14:45Z", "author": {"login": "chauhang"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/Manifest.java", "diffHunk": "@@ -1,44 +1,26 @@\n package org.pytorch.serve.archive;\n \n import com.google.gson.annotations.SerializedName;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n \n public class Manifest {\n \n-    private String specificationVersion;\n-    private String implementationVersion;\n+    private String createdOn;\n     private String description;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMDYzMw==", "bodyText": "Cleaned up unused params.", "url": "https://github.com/pytorch/serve/pull/450#discussion_r450600633", "createdAt": "2020-07-07T04:11:13Z", "author": {"login": "harshbafna"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/Manifest.java", "diffHunk": "@@ -1,44 +1,26 @@\n package org.pytorch.serve.archive;\n \n import com.google.gson.annotations.SerializedName;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n \n public class Manifest {\n \n-    private String specificationVersion;\n-    private String implementationVersion;\n+    private String createdOn;\n     private String description;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5ODIyOQ=="}, "originalCommit": {"oid": "9a6fc3e753e07082d8564c23be8597ffeeddcbed"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1517, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}