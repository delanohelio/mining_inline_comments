{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDA3NDE3", "number": 439, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNToyMFrOEDoq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNToyMFrOEDoq8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjQ3NTM4OnYy", "diffSide": "RIGHT", "path": "examples/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNToyMFrOGgxRSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNToyMFrOGgxRSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDg1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following example demonstrates how to create and serve a pretrained transformer models from Hugginface, such as BERT, RoBERTA, XLM :\n          \n          \n            \n            The following example demonstrates how to create and serve a pretrained transformer models from Huggingface such as BERT, RoBERTA, XLM :", "url": "https://github.com/pytorch/serve/pull/439#discussion_r437014857", "createdAt": "2020-06-08T21:35:20Z", "author": {"login": "maaquib"}, "path": "examples/README.md", "diffHunk": "@@ -43,31 +43,38 @@ Following are the steps to create a torch-model-archive (.mar) to execute an eag\n     torch-model-archiver --model-name <model_name> --version <model_version_number> --serialized-file <path_to_executable_script_module> --extra-files <path_to_index_to_name_json_file> --handler <path_to_custom_handler_or_default_handler_name>\n     ```  \n \n-## Examples torchvision image classification models in TorchServe\n+## Example torchvision image classification models in TorchServe (Eager mode)\n The following example demonstrates how to create image classifier model archive, serve it on TorchServe and run image prediction using TorchServe's default image_classifier handler :\n \n * [Image classification models](image_classifier/)\n \n-## Example to serve a Custom Model with Custom Service Handler\n+## Example to serve a Custom Model with Custom Service Handler (Eager mode)\n \n The following example demonstrates how to create and serve a custom NN model with custom handler archives in TorchServe :\n \n * [Digit recognition with MNIST](image_classifier/mnist)\n \n-## Example to serve Text classification model\n+## Example to serve Text classification model (Eager mode)\n \n The following example demonstrates how to create and serve a custom text_classification NN model with default text_classifer handler provided by TorchServe :\n \n * [Text classification example](text_classification)\n \n-## Example to serve Object Detection model\n+## Example to serve Object Detection model (Eager mode)\n \n The following example demonstrates how to create and serve a pretrained fast-rcnn NN model with default object_detector handler provided by TorchServe :\n \n * [Object detection example](object_detector)\n \n-## Example to serve Image Segmentation model\n+## Example to serve Image Segmentation model (Eager mode)\n \n The following example demonstrates how to create and serve a pretrained fcn NN model with default image_segmenter handler provided by TorchServe :\n \n * [Image segmentation example](image_segmenter)\n+\n+\n+## Example to serve Huggingface Transformers (Torchscripted)\n+\n+The following example demonstrates how to create and serve a pretrained transformer models from Hugginface, such as BERT, RoBERTA, XLM :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a254f876c226cae31fa0401c511daef909a74344"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1505, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}