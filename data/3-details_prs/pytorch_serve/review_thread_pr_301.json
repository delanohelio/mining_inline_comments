{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjc4ODYw", "number": 301, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1NzozNlrOD9GsNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0OTowMlrOD-ulbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk5MzUxOnYy", "diffSide": "RIGHT", "path": "cloudformation/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1NzozNlrOGWbt5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozOTo0N1rOGXDKaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTk3Mw==", "bodyText": "@maaquib It will be better to do the VPC and subnet creation by the CFN itself as this is not something that most Data Scientists building models do on a day to day basis, and takes time for a user new to networking to figure out.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426175973", "createdAt": "2020-05-16T17:57:36Z", "author": {"login": "chauhang"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* The template expects a VPC already setup within which your instance will run ([VPC Setup instructions](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html)). You can use the default VPC as well.\n+* Run the following command with the an ec2-keypair, VPC ID and Subnet ID as parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMjI1MQ==", "bodyText": "Makes sense. Will add a VPC with public subnet as default in the template.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426822251", "createdAt": "2020-05-18T18:39:47Z", "author": {"login": "maaquib"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* The template expects a VPC already setup within which your instance will run ([VPC Setup instructions](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html)). You can use the default VPC as well.\n+* Run the following command with the an ec2-keypair, VPC ID and Subnet ID as parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTk3Mw=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk5NDk4OnYy", "diffSide": "RIGHT", "path": "cloudformation/ec2.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1OTo0MVrOGWbuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0OToyOVrOGXBlGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjE3MA==", "bodyText": "@maaquib Do we need to specify list of all the known EC2 instances? This is a moving target, will require constant update. Further does TorchServe run in some this like the txx.micro/nano instances?", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426176170", "createdAt": "2020-05-16T17:59:41Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NjMxMw==", "bodyText": "Good point. Will remove these", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426796313", "createdAt": "2020-05-18T17:49:29Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjE3MA=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDAwNDk3OnYy", "diffSide": "RIGHT", "path": "cloudformation/ec2.yaml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxNDoyNlrOGWbz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMDozNVrOGZC_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzQ5Ng==", "bodyText": "@maaquib Are these the DLAMIs in each of the regions or a new AMI for TorchServe? Again we have maintenance overhead by explicitly calling out. Using the parameter config option in CFN as described in will simplify things: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html. This can be done as an optimization step in next release.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426177496", "createdAt": "2020-05-16T18:14:26Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NzI3MQ==", "bodyText": "These are not DLAMIs, just a base Ubuntu-18.04. Do we want to use DLAMIs as base (will have a lot of unnnecessary packages already installed)?\n\n\n\nor a new AMI for TorchServe?\n\nIts a good idea to have a dedicated TorchServe AMI. Will investigate this for the next release.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426797271", "createdAt": "2020-05-18T17:51:10Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzQ5Ng=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MDI2Mw==", "bodyText": "@chauhang Just confirming if there is a requirement to use DLAMI instead of a minimal Ubuntu image? If so I'll change the AMI ids.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428440263", "createdAt": "2020-05-21T04:37:25Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzQ5Ng=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTgxNw==", "bodyText": "There is no such requirement -- whatever works and is easy to implement will be good for this version. In a future update we can pick a suggested optimal AMI for production deployment. The DLAMIs have a lot of extra things so a lighter AMI targeted for production deployment will be good", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428805817", "createdAt": "2020-05-21T17:35:40Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzQ5Ng=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjU0MA==", "bodyText": "Will add this item to #88 to track for next release", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428916540", "createdAt": "2020-05-21T21:10:35Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzQ5Ng=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDAwODU2OnYy", "diffSide": "RIGHT", "path": "cloudformation/ec2.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxOTo1NlrOGWb1sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjoxMzowMlrOGXJLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3Nzk3MQ==", "bodyText": "@maaquib It will be better to use a common install script and call that from the CFN vs yet another place to have the install steps and maintain them.\nThis can be done as part optimization for next release.", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426177971", "createdAt": "2020-05-16T18:19:56Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMDc5Mw==", "bodyText": "Makes sense. Will pull in the common install scripts once those PRs have bene merged", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426920793", "createdAt": "2020-05-18T22:13:02Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3Nzk3MQ=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDAwOTY0OnYy", "diffSide": "RIGHT", "path": "cloudformation/ec2.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoyMToyOFrOGWb2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjo1MjoyN1rOGYkgPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODExNQ==", "bodyText": "@maaquib If precreated VPC is used, and it already has these ports being used, will any error get thrown for the users? It will be good to describe as part of readme / troubleshooting steps", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426178115", "createdAt": "2020-05-16T18:21:28Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb\n+          dpkg -i /tmp/amazon-cloudwatch-agent.deb\n+          apt-get update -y\n+          apt-get install -y python-pip python-setuptools openjdk-11-jdk openssl\n+          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n+          # Install miniconda https://docs.anaconda.com/anaconda/install/silent-mode/\n+          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh\n+          rm -rf /home/ubuntu/miniconda && bash /tmp/miniconda.sh -b -p /home/ubuntu/miniconda\n+          export PATH=\"/home/ubuntu/miniconda/bin:$PATH\"\n+          conda init\n+          source /home/ubuntu/miniconda/etc/profile.d/conda.sh\n+          conda config --set always_yes yes\n+          conda create --name torchserve torchserve torch-model-archiver psutil future pytorch torchtext torchvision cudatoolkit=10.1 -c pytorch -c powerai\n+          conda activate torchserve\n+          # Setup private-key file and self-signed certificate files\n+          mkdir /etc/torchserve/\n+          openssl req -new -x509 -days 365 -nodes -out /etc/torchserve/server.pem -keyout /etc/torchserve/server.key -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=Torchserve\"\n+          # Start cfn-hup\n+          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region}\n+          # Start torchserve\n+          mkdir model_store\n+          export LOG_LOCATION=\"/var/log/torchserve\"\n+          torchserve --start --model-store ./model_store --ts-config /etc/torchserve/config.properties\n+    CreationPolicy:\n+      ResourceSignal:\n+        Timeout: PT30M\n+  TorcheServeSecurityGroup:\n+    Type: AWS::EC2::SecurityGroup\n+    Properties:\n+      GroupDescription: Enable access for ssh, inference and management endpoints\n+      VpcId: !Ref 'VpcId'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNzA4Nw==", "bodyText": "Resolving this, since a new VPC is now created with the template", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428417087", "createdAt": "2020-05-21T02:52:27Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb\n+          dpkg -i /tmp/amazon-cloudwatch-agent.deb\n+          apt-get update -y\n+          apt-get install -y python-pip python-setuptools openjdk-11-jdk openssl\n+          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n+          # Install miniconda https://docs.anaconda.com/anaconda/install/silent-mode/\n+          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh\n+          rm -rf /home/ubuntu/miniconda && bash /tmp/miniconda.sh -b -p /home/ubuntu/miniconda\n+          export PATH=\"/home/ubuntu/miniconda/bin:$PATH\"\n+          conda init\n+          source /home/ubuntu/miniconda/etc/profile.d/conda.sh\n+          conda config --set always_yes yes\n+          conda create --name torchserve torchserve torch-model-archiver psutil future pytorch torchtext torchvision cudatoolkit=10.1 -c pytorch -c powerai\n+          conda activate torchserve\n+          # Setup private-key file and self-signed certificate files\n+          mkdir /etc/torchserve/\n+          openssl req -new -x509 -days 365 -nodes -out /etc/torchserve/server.pem -keyout /etc/torchserve/server.key -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=Torchserve\"\n+          # Start cfn-hup\n+          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region}\n+          # Start torchserve\n+          mkdir model_store\n+          export LOG_LOCATION=\"/var/log/torchserve\"\n+          torchserve --start --model-store ./model_store --ts-config /etc/torchserve/config.properties\n+    CreationPolicy:\n+      ResourceSignal:\n+        Timeout: PT30M\n+  TorcheServeSecurityGroup:\n+    Type: AWS::EC2::SecurityGroup\n+    Properties:\n+      GroupDescription: Enable access for ssh, inference and management endpoints\n+      VpcId: !Ref 'VpcId'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODExNQ=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDAxMDUzOnYy", "diffSide": "RIGHT", "path": "cloudformation/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoyMjo1OFrOGWb2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo0MDo1NlrOGXDMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODI1Mg==", "bodyText": "@maaquib Add the cleanup steps as well -- for how to delete the stack", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426178252", "createdAt": "2020-05-16T18:22:58Z", "author": {"login": "chauhang"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* The template expects a VPC already setup within which your instance will run ([VPC Setup instructions](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html)). You can use the default VPC as well.\n+* Run the following command with the an ec2-keypair, VPC ID and Subnet ID as parameters\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=VpcId,ParameterValue=<vpc-id> \\\n+               ParameterKey=SubnetId,ParameterValue=<subnet-id> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands\n+```\n+> EC2_IP=<ec2-ip>\n+> curl --insecure -X POST \"https://$EC2_IP:8081/models?initial_workers=1&synchronous=false&url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+{\n+  \"status\": \"Processing worker updates...\"\n+}\n+> curl --insecure \"https://$EC2_IP:8081/models\"\n+{\n+    \"models\": [\n+        {\n+            \"modelName\": \"squeezenet1_1\",\n+            \"modelUrl\": \"https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+        }\n+     ]\n+}\n+> curl -O https://s3.amazonaws.com/model-server/inputs/kitten.jpg\n+> curl --insecure -X POST \"https://$EC2_IP:8080/predictions/squeezenet1_1\" -T kitten.jpg\n+[\n+    {\n+        \"tabby\": 0.2752002477645874\n+    },\n+    {\n+        \"lynx\": 0.2546876072883606\n+    },\n+    {\n+        \"tiger_cat\": 0.24254210293293\n+    },\n+    {\n+        \"Egyptian_cat\": 0.2213735282421112\n+    },\n+    {\n+        \"cougar\": 0.0022544863168150187\n+    }\n+]\n+```\n+* Once the instance is up and running, TorchServe logs are published to cloudwatch under the LogGroup=`<stack-name>/<ec2-instance-id>/TorchServe` e.g. `torchserve/i-0649487ecbe691676/TorchServe`\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMjg0OA==", "bodyText": "Will add a delete-stack command in README", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426822848", "createdAt": "2020-05-18T18:40:56Z", "author": {"login": "maaquib"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* The template expects a VPC already setup within which your instance will run ([VPC Setup instructions](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html)). You can use the default VPC as well.\n+* Run the following command with the an ec2-keypair, VPC ID and Subnet ID as parameters\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=VpcId,ParameterValue=<vpc-id> \\\n+               ParameterKey=SubnetId,ParameterValue=<subnet-id> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands\n+```\n+> EC2_IP=<ec2-ip>\n+> curl --insecure -X POST \"https://$EC2_IP:8081/models?initial_workers=1&synchronous=false&url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+{\n+  \"status\": \"Processing worker updates...\"\n+}\n+> curl --insecure \"https://$EC2_IP:8081/models\"\n+{\n+    \"models\": [\n+        {\n+            \"modelName\": \"squeezenet1_1\",\n+            \"modelUrl\": \"https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+        }\n+     ]\n+}\n+> curl -O https://s3.amazonaws.com/model-server/inputs/kitten.jpg\n+> curl --insecure -X POST \"https://$EC2_IP:8080/predictions/squeezenet1_1\" -T kitten.jpg\n+[\n+    {\n+        \"tabby\": 0.2752002477645874\n+    },\n+    {\n+        \"lynx\": 0.2546876072883606\n+    },\n+    {\n+        \"tiger_cat\": 0.24254210293293\n+    },\n+    {\n+        \"Egyptian_cat\": 0.2213735282421112\n+    },\n+    {\n+        \"cougar\": 0.0022544863168150187\n+    }\n+]\n+```\n+* Once the instance is up and running, TorchServe logs are published to cloudwatch under the LogGroup=`<stack-name>/<ec2-instance-id>/TorchServe` e.g. `torchserve/i-0649487ecbe691676/TorchServe`\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODI1Mg=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA1MDU1OnYy", "diffSide": "RIGHT", "path": "cloudformation/ec2.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOToyOToyNlrOGWcLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1MjowNFrOGXBquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzQ5NQ==", "bodyText": "@maaquib The default instance type selected is a CPU instance and these steps are for GPU install. Please verify they work on a CPU instance", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426183495", "createdAt": "2020-05-16T19:29:26Z", "author": {"login": "chauhang"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb\n+          dpkg -i /tmp/amazon-cloudwatch-agent.deb\n+          apt-get update -y\n+          apt-get install -y python-pip python-setuptools openjdk-11-jdk openssl\n+          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n+          # Install miniconda https://docs.anaconda.com/anaconda/install/silent-mode/\n+          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh\n+          rm -rf /home/ubuntu/miniconda && bash /tmp/miniconda.sh -b -p /home/ubuntu/miniconda\n+          export PATH=\"/home/ubuntu/miniconda/bin:$PATH\"\n+          conda init\n+          source /home/ubuntu/miniconda/etc/profile.d/conda.sh\n+          conda config --set always_yes yes\n+          conda create --name torchserve torchserve torch-model-archiver psutil future pytorch torchtext torchvision cudatoolkit=10.1 -c pytorch -c powerai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Nzc1Mg==", "bodyText": "I verified that this works on both CPU and GPU", "url": "https://github.com/pytorch/serve/pull/301#discussion_r426797752", "createdAt": "2020-05-18T17:52:04Z", "author": {"login": "maaquib"}, "path": "cloudformation/ec2.yaml", "diffHunk": "@@ -0,0 +1,335 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  a single EC2 instance running Ubuntu 18.04, install the packages\n+  and files necessary to deploy.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  VpcId:\n+    Description: >-\n+      ID of the VPC within which the EC2 instance would be setup. You can find instructions\n+      for setup at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html\n+      Example https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html\n+    Type: AWS::EC2::VPC::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  SubnetId:\n+    Description: >-\n+      ID of the Subnet within which the EC2 instance would be setup.\n+      Check VpcId Parameter Description for setup instructions\n+    Type: AWS::EC2::Subnet::Id\n+    ConstraintDescription: Must be a valid VPC id.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c4.4xlarge\n+    AllowedValues:\n+      - t1.micro\n+      - t2.nano\n+      - t2.micro\n+      - t2.small\n+      - t2.medium\n+      - t2.large\n+      - m1.small\n+      - m1.medium\n+      - m1.large\n+      - m1.xlarge\n+      - m2.xlarge\n+      - m2.2xlarge\n+      - m2.4xlarge\n+      - m3.medium\n+      - m3.large\n+      - m3.xlarge\n+      - m3.2xlarge\n+      - m4.large\n+      - m4.xlarge\n+      - m4.2xlarge\n+      - m4.4xlarge\n+      - m4.10xlarge\n+      - c1.medium\n+      - c1.xlarge\n+      - c3.large\n+      - c3.xlarge\n+      - c3.2xlarge\n+      - c3.4xlarge\n+      - c3.8xlarge\n+      - c4.large\n+      - c4.xlarge\n+      - c4.2xlarge\n+      - c4.4xlarge\n+      - c4.8xlarge\n+      - g2.2xlarge\n+      - g2.8xlarge\n+      - p2.xlarge\n+      - p2.8xlarge\n+      - p2.16xlarge\n+      - p3.2xlarge\n+      - p3.8xlarge\n+      - p3.16xlarge\n+      - r3.large\n+      - r3.xlarge\n+      - r3.2xlarge\n+      - r3.4xlarge\n+      - r3.8xlarge\n+      - i2.xlarge\n+      - i2.2xlarge\n+      - i2.4xlarge\n+      - i2.8xlarge\n+      - d2.xlarge\n+      - d2.2xlarge\n+      - d2.4xlarge\n+      - d2.8xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+Resources:\n+  TorchServeInstance:\n+    Type: AWS::EC2::Instance\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=https://0.0.0.0:8080\n+                 management_address=https://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key\n+                 certificate_file=/etc/torchserve/server.pem\n+               mode: '000400'\n+               owner: root\n+               group: root\n+        CloudwatchSetup:\n+          files:\n+            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html\n+            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:\n+              content: !Sub |\n+                {\n+                  \"metrics\": {\n+                    \"append_dimensions\": {\n+                      \"ImageId\": \"${!aws:ImageId}\",\n+                      \"InstanceId\": \"${!aws:InstanceId}\",\n+                      \"InstanceType\": \"${!aws:InstanceType}\"\n+                    },\n+                    \"metrics_collected\": {\n+                      \"mem\": {\n+                        \"measurement\": [\n+                          \"mem_used_percent\"\n+                        ]\n+                      }\n+                    }\n+                  },\n+                  \"logs\": {\n+                    \"logs_collected\": {\n+                      \"files\": {\n+                        \"collect_list\": [\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ApplicationLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/ts_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/access_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"AccessLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_log.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"ModelLogs\",\n+                            \"timezone\": \"UTC\"\n+                          },\n+                          {\n+                            \"file_path\": \"/var/log/torchserve/model_metrics.log\",\n+                            \"log_group_name\": \"${AWS::StackName}/{instance_id}/TorchServe\",\n+                            \"log_stream_name\": \"TorchServeModelMetrics\",\n+                            \"timezone\": \"UTC\"\n+                          }\n+                        ]\n+                      }\n+                    }\n+                  }\n+                }\n+          commands:\n+            01_stop_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\n+            02_start_service:\n+              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\n+        CFNSetup:\n+          files:\n+            /etc/cfn/cfn-hup.conf:\n+               content: !Sub |\n+                 [main]\n+                 stack=${AWS::StackId}\n+                 region=${AWS::Region}\n+                 interval=1\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /etc/cfn/hooks.d/cfn-auto-reloader.conf:\n+               content: !Sub |\n+                 [cfn-auto-reloader-hook]\n+                 triggers=post.update\n+                 path=Resources.TorchServeInstance.Metadata.AWS::CloudFormation::Init\n+                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeInstance --region ${AWS::Region} --configsets InstallAndRun\n+                 runas=root\n+               mode: '000400'\n+               owner: root\n+               group: root\n+            /lib/systemd/system/cfn-hup.service:\n+                content: !Sub |\n+                  [Unit]\n+                  Description=cfn-hup daemon\n+                  [Service]\n+                  Type=simple\n+                  ExecStart=/opt/aws/bin/cfn-hup\n+                  Restart=always\n+                  [Install]\n+                  WantedBy=multi-user.target\n+          commands:\n+            01_enable_cfn_hup:\n+              command: !Sub |\n+                systemctl enable cfn-hup.service\n+            02_start_cfn_hup:\n+              command: !Sub |\n+                systemctl start cfn-hup.service\n+    Properties:\n+      ImageId: !FindInMap\n+        - AWSRegion2AMI\n+        - !Ref 'AWS::Region'\n+        - AMI\n+      InstanceType: !Ref 'InstanceType'\n+      IamInstanceProfile: !Ref CloudwatchInstanceProfile\n+      SecurityGroupIds:\n+        - !Ref 'TorcheServeSecurityGroup'\n+      SubnetId: !Ref 'SubnetId'\n+      KeyName: !Ref 'KeyName'\n+      UserData:\n+        Fn::Base64: !Sub |\n+          #!/bin/bash\n+          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb\n+          dpkg -i /tmp/amazon-cloudwatch-agent.deb\n+          apt-get update -y\n+          apt-get install -y python-pip python-setuptools openjdk-11-jdk openssl\n+          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n+          # Install miniconda https://docs.anaconda.com/anaconda/install/silent-mode/\n+          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh\n+          rm -rf /home/ubuntu/miniconda && bash /tmp/miniconda.sh -b -p /home/ubuntu/miniconda\n+          export PATH=\"/home/ubuntu/miniconda/bin:$PATH\"\n+          conda init\n+          source /home/ubuntu/miniconda/etc/profile.d/conda.sh\n+          conda config --set always_yes yes\n+          conda create --name torchserve torchserve torch-model-archiver psutil future pytorch torchtext torchvision cudatoolkit=10.1 -c pytorch -c powerai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzQ5NQ=="}, "originalCommit": {"oid": "7bb77f77ab870a3dc109faca172e42ba563eebae"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDk5NTIzOnYy", "diffSide": "RIGHT", "path": "cloudformation/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0Mjo0M1rOGZAUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0Mjo0M1rOGZAUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3Mjg2MQ==", "bodyText": "@maaquib Please change to export EC2_IP=<ec2-ip>", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428872861", "createdAt": "2020-05-21T19:42:43Z", "author": {"login": "chauhang"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands\n+```\n+> EC2_IP=<ec2-ip>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTAwODU0OnYy", "diffSide": "RIGHT", "path": "cloudformation/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0Njo1M1rOGZAc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMjo1OFrOGZDDcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDk5OA==", "bodyText": "@maaquib In the latest template there is only one output for the CFN after success:\nTorchServeURL | http://ec2-xx-xx-xx-xx.us-east-2.compute.amazonaws.com | URL for newly created TorchServe stack\nWere you expecting the IP to be shown here? In light of above it will be better to mention pick the DNS name of the server from this link\nAlso the link displayed has http whereas actual deployment is configured for https. It will be better to put full url of the ping endpoint so that people can actually verify it is working", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428874998", "createdAt": "2020-05-21T19:46:53Z", "author": {"login": "chauhang"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MDg1Mg==", "bodyText": "@maaquib In the latest template there is only one output for the CFN after success:\nTorchServeURL | http://ec2-xx-xx-xx-xx.us-east-2.compute.amazonaws.com | URL for newly created TorchServe stack\nWere you expecting the IP to be shown here? In light of above it will be better to mention pick the DNS name of the server from this link\n\nI have tested that it works with both\n\nAlso the link displayed has http whereas actual deployment is configured for https. It will be better to put full url of the ping endpoint so that people can actually verify it is working\n\nWill fix this", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428880852", "createdAt": "2020-05-21T19:58:14Z", "author": {"login": "maaquib"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDk5OA=="}, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzYxOA==", "bodyText": "Added separate urls for inference and management endpoints in the output and added Ping endpoint to the README", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428917618", "createdAt": "2020-05-21T21:12:58Z", "author": {"login": "maaquib"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDk5OA=="}, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTAxNTQ5OnYy", "diffSide": "RIGHT", "path": "cloudformation/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0OTowMlrOGZAhVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1ODo0OFrOGZA1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NjExOQ==", "bodyText": "It will be useful to include some guidance on how people and stop and restart the TorchServe serve. Will they need to ssh into the box and what conda activate env for TorchServe CLI commands or something else", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428876119", "createdAt": "2020-05-21T19:49:02Z", "author": {"login": "chauhang"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands\n+```\n+> EC2_IP=<ec2-ip>\n+> curl --insecure -X POST \"https://$EC2_IP:8081/models?initial_workers=1&synchronous=false&url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+{\n+  \"status\": \"Processing worker updates...\"\n+}\n+> curl --insecure \"https://$EC2_IP:8081/models\"\n+{\n+    \"models\": [\n+        {\n+            \"modelName\": \"squeezenet1_1\",\n+            \"modelUrl\": \"https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+        }\n+     ]\n+}\n+> curl -O https://s3.amazonaws.com/model-server/inputs/kitten.jpg\n+> curl --insecure -X POST \"https://$EC2_IP:8080/predictions/squeezenet1_1\" -T kitten.jpg\n+[\n+    {\n+        \"tabby\": 0.2752002477645874\n+    },\n+    {\n+        \"lynx\": 0.2546876072883606\n+    },\n+    {\n+        \"tiger_cat\": 0.24254210293293\n+    },\n+    {\n+        \"Egyptian_cat\": 0.2213735282421112\n+    },\n+    {\n+        \"cougar\": 0.0022544863168150187\n+    }\n+]\n+```\n+* Once the instance is up and running, TorchServe logs are published to cloudwatch under the LogGroup=`<stack-name>/<ec2-instance-id>/TorchServe` e.g. `torchserve/i-0649487ecbe691676/TorchServe`\n+\n+* To terminate the instance and delete the stack you can run `aws cloudformation delete-stack --stack-name <stack-name>`\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MTE3MQ==", "bodyText": "Will add instructions in README", "url": "https://github.com/pytorch/serve/pull/301#discussion_r428881171", "createdAt": "2020-05-21T19:58:48Z", "author": {"login": "maaquib"}, "path": "cloudformation/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Cloudformation Templates\n+Torchserve provides configurable cloudformation templates to spin up AWS instances running torchserve.\n+\n+*Following instructions requires you have [aws-cli](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html) installed as a prerequisite*\n+\n+## Single EC2 instance\n+* To spinup a single EC2 instance running Torchserve use the `ec2.yaml` template\n+* Run the following command with the an ec2-keypair, and optionally an instance type (default: c5.4xlarge)\n+```\n+export AWS_ACCESS_KEY_ID=\"...\"\n+export AWS_SECRET_ACCESS_KEY=\"...\"\n+cd cloudformation/\n+aws cloudformation create-stack \\\n+  --stack-name torchserve \\\n+  --region us-west-2 \\\n+  --template-body file://ec2.yaml \\\n+  --capabilities CAPABILITY_IAM \\\n+  --parameters ParameterKey=KeyName,ParameterValue=<ec2-keypair-name> \\\n+               ParameterKey=InstanceType,ParameterValue=<instance-type>\n+```\n+\n+* Once the cloudformation stack creation is complete, you can get the EC2 IP of the instance and test with the following commands\n+```\n+> EC2_IP=<ec2-ip>\n+> curl --insecure -X POST \"https://$EC2_IP:8081/models?initial_workers=1&synchronous=false&url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+{\n+  \"status\": \"Processing worker updates...\"\n+}\n+> curl --insecure \"https://$EC2_IP:8081/models\"\n+{\n+    \"models\": [\n+        {\n+            \"modelName\": \"squeezenet1_1\",\n+            \"modelUrl\": \"https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar\"\n+        }\n+     ]\n+}\n+> curl -O https://s3.amazonaws.com/model-server/inputs/kitten.jpg\n+> curl --insecure -X POST \"https://$EC2_IP:8080/predictions/squeezenet1_1\" -T kitten.jpg\n+[\n+    {\n+        \"tabby\": 0.2752002477645874\n+    },\n+    {\n+        \"lynx\": 0.2546876072883606\n+    },\n+    {\n+        \"tiger_cat\": 0.24254210293293\n+    },\n+    {\n+        \"Egyptian_cat\": 0.2213735282421112\n+    },\n+    {\n+        \"cougar\": 0.0022544863168150187\n+    }\n+]\n+```\n+* Once the instance is up and running, TorchServe logs are published to cloudwatch under the LogGroup=`<stack-name>/<ec2-instance-id>/TorchServe` e.g. `torchserve/i-0649487ecbe691676/TorchServe`\n+\n+* To terminate the instance and delete the stack you can run `aws cloudformation delete-stack --stack-name <stack-name>`\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NjExOQ=="}, "originalCommit": {"oid": "e07cdd7734e11ce830b98057ebbc2b3af5e89eb4"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1631, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}