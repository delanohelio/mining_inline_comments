{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDczNzQ1", "number": 407, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyMDozNFrOELy7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoyMjoxNFrOFokpMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA0MTAxOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyMDozNFrOGtiTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozMDoyNVrOG1Gtaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTA4Nw==", "bodyText": "@dhaniram-kshirsagar Why is the url hardcoded here? Can we remove it?", "url": "https://github.com/pytorch/serve/pull/407#discussion_r450401087", "createdAt": "2020-07-06T18:20:34Z", "author": {"login": "chauhang"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -655,6 +661,18 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled() {\n+        String inferenceAddress = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a8ea35d60ab0ce6809183b322806d95a8aafea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMzM4Mg==", "bodyText": "This is the default value (i.e. http) for the cases when the user has not supplied any address via config or env properties. Here in this function, the address portion is not used however to keep our existing pattern validator happy added the numbers post http.", "url": "https://github.com/pytorch/serve/pull/407#discussion_r451013382", "createdAt": "2020-07-07T17:02:49Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -655,6 +661,18 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled() {\n+        String inferenceAddress = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTA4Nw=="}, "originalCommit": {"oid": "e4a8ea35d60ab0ce6809183b322806d95a8aafea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NDAzMg==", "bodyText": "Can there be a mix of ssl and non ssl endpoints e.g. http://127.0.0.1:8080 and https://127.0.0.1:8444? Either we should clarify or handle that case", "url": "https://github.com/pytorch/serve/pull/407#discussion_r456684032", "createdAt": "2020-07-17T21:34:41Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -655,6 +661,18 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled() {\n+        String inferenceAddress = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTA4Nw=="}, "originalCommit": {"oid": "e4a8ea35d60ab0ce6809183b322806d95a8aafea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyMTE2Mg==", "bodyText": "@maaquib can you please elaborate on this.", "url": "https://github.com/pytorch/serve/pull/407#discussion_r457321162", "createdAt": "2020-07-20T12:04:35Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -655,6 +661,18 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled() {\n+        String inferenceAddress = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTA4Nw=="}, "originalCommit": {"oid": "e4a8ea35d60ab0ce6809183b322806d95a8aafea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNzY0Mw==", "bodyText": "@dhaniram-kshirsagar We now have 3 endpoints for TS -- Management API, Inference API, Metrics API. If user selects combination of http/https across the three will that be supported? It will be better to have all endpoints of same type", "url": "https://github.com/pytorch/serve/pull/407#discussion_r458337643", "createdAt": "2020-07-21T19:30:25Z", "author": {"login": "chauhang"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -655,6 +661,18 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled() {\n+        String inferenceAddress = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTA4Nw=="}, "originalCommit": {"oid": "e4a8ea35d60ab0ce6809183b322806d95a8aafea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODc5OTUwOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ExtendedSSLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0MDoyM1rOGzh5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMToyNjo1MlrOG0HLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTg1Ng==", "bodyText": "Use io.netty.handler.ssl.SslUtils.SSL_RECORD_HEADER_LENGTH instead", "url": "https://github.com/pytorch/serve/pull/407#discussion_r456685856", "createdAt": "2020-07-17T21:40:23Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ExtendedSSLHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.pytorch.serve.http;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.ssl.OptionalSslHandler;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.List;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.pytorch.serve.util.NettyUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ExtendedSSLHandler extends OptionalSslHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(ExtendedSSLHandler.class);\n+    /** the length of the ssl record header (in bytes) */\n+    private static final int SSL_RECORD_HEADER_LENGTH = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd8a6608edfe6de9eb993d83b544049bf32e974"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5NjcwOA==", "bodyText": "Tried that earlier however it is not visible[protected] netty.", "url": "https://github.com/pytorch/serve/pull/407#discussion_r457296708", "createdAt": "2020-07-20T11:26:52Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ExtendedSSLHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.pytorch.serve.http;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.ssl.OptionalSslHandler;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslHandler;\n+import java.util.List;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.pytorch.serve.util.NettyUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ExtendedSSLHandler extends OptionalSslHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(ExtendedSSLHandler.class);\n+    /** the length of the ssl record header (in bytes) */\n+    private static final int SSL_RECORD_HEADER_LENGTH = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTg1Ng=="}, "originalCommit": {"oid": "bbd8a6608edfe6de9eb993d83b544049bf32e974"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg3NzMxOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoyMjoxNFrOI6ugAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQxNjozODoxNVrOI7JRcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MDE3OQ==", "bodyText": "@dhaniram-kshirsagar  Why are the port numbers hard coded here? As these are configurable, how are things expected to work if the user picked other port numbers? Same comment for the other port numbers", "url": "https://github.com/pytorch/serve/pull/407#discussion_r598450179", "createdAt": "2021-03-22T06:22:14Z", "author": {"login": "chauhang"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -718,6 +724,30 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled(ConnectorType connectorType) {\n+        String address = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4917b8003f99b957443b1080371a01038984835e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODg4ODgxNg==", "bodyText": "the hard coded port is default port. It is used only if user doesn't customize the ports.", "url": "https://github.com/pytorch/serve/pull/407#discussion_r598888816", "createdAt": "2021-03-22T16:38:15Z", "author": {"login": "lxning"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -718,6 +724,30 @@ public boolean isSnapshotDisabled() {\n         return snapshotDisabled;\n     }\n \n+    public boolean isSSLEnabled(ConnectorType connectorType) {\n+        String address = prop.getProperty(TS_INFERENCE_ADDRESS, \"http://127.0.0.1:8080\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MDE3OQ=="}, "originalCommit": {"oid": "4917b8003f99b957443b1080371a01038984835e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1491, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}