{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NjYzMjU3", "number": 15, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMTozOFrODZriIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNzo0NFrODalpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU0MjQxOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMTozOFrOFgNKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDozODo0N1rOFiZHjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDMxMw==", "bodyText": "remove dead code", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314313", "createdAt": "2020-01-22T00:21:38Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzQzNg==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371607436", "createdAt": "2020-01-28T04:38:47Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDMxMw=="}, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU0MzQ0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMjoxNVrOFgNKrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMjoxNVrOFgNKrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDQ3OA==", "bodyText": "this removes unregisterModel() is the impl for this coming in a future commit?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314478", "createdAt": "2020-01-22T00:22:15Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU0NDM5OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMjo1MFrOFgNLRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDozOTozMFrOFiZH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDYzMA==", "bodyText": "this removes support for updating models. is the impl for this coming in a future model?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314630", "createdAt": "2020-01-22T00:22:50Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzU0MA==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371607540", "createdAt": "2020-01-28T04:39:30Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDYzMA=="}, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU0NTMxOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMzoyN1rOFgNLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0MDo0MVrOFiZIpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDc2Mw==", "bodyText": "it's worthwhile changing the method name to getDefaultModels() or something of the nature.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314763", "createdAt": "2020-01-22T00:23:27Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);\n+//        if (model == null) {\n+//            throw new AssertionError(\"Model not found: \" + modelName);\n+//        }\n+//        model.setMinWorkers(minWorkers);\n+//        model.setMaxWorkers(maxWorkers);\n+//        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n+        return wlm.modelChanged(null);\n     }\n \n     public Map<String, Model> getModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzcxOQ==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371607719", "createdAt": "2020-01-28T04:40:41Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);\n+//        if (model == null) {\n+//            throw new AssertionError(\"Model not found: \" + modelName);\n+//        }\n+//        model.setMinWorkers(minWorkers);\n+//        model.setMaxWorkers(maxWorkers);\n+//        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n+        return wlm.modelChanged(null);\n     }\n \n     public Map<String, Model> getModels() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDc2Mw=="}, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU1MTU5OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyNzoxNVrOFgNPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0MTo1NlrOFiZJag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNTcxMQ==", "bodyText": "nice.\nDoes this propagate upwards to the HTTP req handler level?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369315711", "createdAt": "2020-01-22T00:27:15Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,10 +127,11 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n+        Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Mzk5Mw==", "bodyText": "We are still working on it.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369353993", "createdAt": "2020-01-22T03:21:15Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,10 +127,11 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n+        Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNTcxMQ=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzkxNA==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371607914", "createdAt": "2020-01-28T04:41:56Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,10 +127,11 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n+        Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNTcxMQ=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU1NjM5OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDozMDoxNlrOFgNShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0MzowMlrOFiZJ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNjQ4NA==", "bodyText": "any particular reason this is public? We don't expect this to be a part of http req handling codebase do we?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369316484", "createdAt": "2020-01-22T00:30:16Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODA1Mg==", "bodyText": "It needs to be public as this is going to get called from ModelManager for removing versioned models", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371608052", "createdAt": "2020-01-28T04:43:02Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNjQ4NA=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU2MjI1OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDozMzoyNFrOFgNV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0NTozN1rOFiZLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA==", "bodyText": "If we are adopting this method to compute a unique key for model and version combo then we should somehow propagate this info (perhaps through documentation in README) to the users.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369317330", "createdAt": "2020-01-22T00:33:24Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDEyMA==", "bodyText": "Sure.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369354120", "createdAt": "2020-01-22T03:21:54Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMDg5MQ==", "bodyText": "What are the acceptable formats for model versions (and the default ones that we generate)? I can potentially see this being an issue as some common model names used are model_pathlength ie: resnet_18.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370800891", "createdAt": "2020-01-24T19:21:21Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODQxOQ==", "bodyText": "@mycpuorg - The unique key created using name+version is internal to component and is not required to part of doc. @alexwong - Model version is non-negative double value and to be supplied by user via MAR utility", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371608419", "createdAt": "2020-01-28T04:45:37Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU2NDU1OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDozNDo1MFrOFgNXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0NjowMVrOFiZLoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzY4Mg==", "bodyText": "We probably need to check for clash of versions? What's to prevent user from entering 100 model archives with the same version?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369317682", "createdAt": "2020-01-22T00:34:50Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -101,78 +101,108 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-        \n-//        Model model = new Model(archive, configManager.getJobQueueSize());\n-//        model.setBatchSize(batchSize);\n-//        model.setMaxBatchDelay(maxBatchDelay);\n-//        model.setResponseTimeout(responseTimeout);\n-//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n-//        if (existingModel != null) {\n-//            // model already exists\n-//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-//        }\n-        \n-        Model tempModel = createModel(archive, configManager,\n-\t\t\t      batchSize, maxBatchDelay,\n-\t\t\t      responseTimeout, preloadModel);\n-        \n+\n+        Model tempModel =\n+                createModel(archive, configManager, batchSize, maxBatchDelay, responseTimeout);\n+\n         createVersionedModel(tempModel, versionId);\n \n         logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n-    public HttpResponseStatus unregisterModel(String modelName) {\n-//        Model model = modelsNameMap.remove(modelName);\n-//        if (model == null) {\n-//            logger.warn(\"Model not found: \" + modelName);\n-//            return HttpResponseStatus.NOT_FOUND;\n-//        }\n-//        model.setMinWorkers(0);\n-//        model.setMaxWorkers(0);\n-//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-//\n-//        try {\n-//            httpResponseStatus = futureStatus.get();\n-//        } catch (InterruptedException | ExecutionException e) {\n-//            logger.warn(\"Process was interrupted while cleaning resources.\");\n-//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-//        }\n-//\n-//        // Only continue cleaning if resource cleaning succeeded\n-//        if (httpResponseStatus == HttpResponseStatus.OK) {\n-//            model.getModelArchive().clean();\n-//            startupModels.remove(modelName);\n-//            logger.info(\"Model {} unregistered.\", modelName);\n-//        } else {\n-//            modelsNameMap.put(modelName, model);\n-//        }\n-    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+    private Model createModel(\n+            ModelArchive archive,\n+            ConfigManager configManager2,\n+            int batchSize,\n+            int maxBatchDelay,\n+            int responseTimeout) {\n+        Model model = new Model(archive, configManager.getJobQueueSize());\n+        model.setBatchSize(batchSize);\n+        model.setMaxBatchDelay(maxBatchDelay);\n+        model.setResponseTimeout(responseTimeout);\n+\n+        return model;\n+    }\n+\n+    private void createVersionedModel(Model model, String versionId) {\n+        // TODO Auto-generated method stub\n+        ModelVersionedRefs modelVersionRef = new ModelVersionedRefs();\n+        modelVersionRef.addVersionModel(model, versionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODQ4MA==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371608480", "createdAt": "2020-01-28T04:46:01Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -101,78 +101,108 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-        \n-//        Model model = new Model(archive, configManager.getJobQueueSize());\n-//        model.setBatchSize(batchSize);\n-//        model.setMaxBatchDelay(maxBatchDelay);\n-//        model.setResponseTimeout(responseTimeout);\n-//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n-//        if (existingModel != null) {\n-//            // model already exists\n-//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-//        }\n-        \n-        Model tempModel = createModel(archive, configManager,\n-\t\t\t      batchSize, maxBatchDelay,\n-\t\t\t      responseTimeout, preloadModel);\n-        \n+\n+        Model tempModel =\n+                createModel(archive, configManager, batchSize, maxBatchDelay, responseTimeout);\n+\n         createVersionedModel(tempModel, versionId);\n \n         logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n-    public HttpResponseStatus unregisterModel(String modelName) {\n-//        Model model = modelsNameMap.remove(modelName);\n-//        if (model == null) {\n-//            logger.warn(\"Model not found: \" + modelName);\n-//            return HttpResponseStatus.NOT_FOUND;\n-//        }\n-//        model.setMinWorkers(0);\n-//        model.setMaxWorkers(0);\n-//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-//\n-//        try {\n-//            httpResponseStatus = futureStatus.get();\n-//        } catch (InterruptedException | ExecutionException e) {\n-//            logger.warn(\"Process was interrupted while cleaning resources.\");\n-//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-//        }\n-//\n-//        // Only continue cleaning if resource cleaning succeeded\n-//        if (httpResponseStatus == HttpResponseStatus.OK) {\n-//            model.getModelArchive().clean();\n-//            startupModels.remove(modelName);\n-//            logger.info(\"Model {} unregistered.\", modelName);\n-//        } else {\n-//            modelsNameMap.put(modelName, model);\n-//        }\n-    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+    private Model createModel(\n+            ModelArchive archive,\n+            ConfigManager configManager2,\n+            int batchSize,\n+            int maxBatchDelay,\n+            int responseTimeout) {\n+        Model model = new Model(archive, configManager.getJobQueueSize());\n+        model.setBatchSize(batchSize);\n+        model.setMaxBatchDelay(maxBatchDelay);\n+        model.setResponseTimeout(responseTimeout);\n+\n+        return model;\n+    }\n+\n+    private void createVersionedModel(Model model, String versionId) {\n+        // TODO Auto-generated method stub\n+        ModelVersionedRefs modelVersionRef = new ModelVersionedRefs();\n+        modelVersionRef.addVersionModel(model, versionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzY4Mg=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3MTE3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDozODo0OFrOFgNbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo0ODo0OFrOFiZNWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODY3Mw==", "bodyText": "since we are not overloading here, let's force them to send a valid version ID by throwing exception in else-block.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369318673", "createdAt": "2020-01-22T00:38:48Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)\n+            throws InvalidModelVersionException, ModelNotFoundException {\n+        if (versionId == null) {\n+            versionId = this.getDefaultVersion();\n+        } else {\n+            validateVersionId(versionId);\n+        }\n+\n+        if (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0\n+                && modelsVersionMap.size() > 1) {\n+            throw new InvalidModelVersionException(\n+                    String.format(\"Can't remove default version: %s\", versionId));\n+        }\n+\n+        Model model = this.modelsVersionMap.remove(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new ModelNotFoundException(\n+                    String.format(\"Model version: %s not found\", versionId));\n+        }\n+\n+        logger.debug(\"Removed model: {} version: {}\", model.getModelName(), versionId);\n+\n+        return model;\n     }\n \n     /**\n      * Returns the Model obj corresponding to the version provided\n      *\n-     * @param  A String specifying a valid version Id\n-     * @return On Success - a Model Obj previously registered\n-     *         On Failure - null\n+     * @param A String specifying a valid version Id\n+     * @return On Success - a Model Obj previously registered On Failure - null\n      */\n-    public Model getVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\treturn this.modelsVersionMap.get(Double.valueOf(versionId));\n-    }\n+    public Model getVersionModel(String versionId) throws InvalidModelVersionException {\n+        Model model = null;\n+        if (versionId != null) {\n+            validateVersionId(versionId);\n+            model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        } else {\n+            model = this.getDefaultModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODkyMw==", "bodyText": "This is to handle scenarios where the user has not supplied model number and default should be executed such as /models/<name_of_model> or /predictions/<model_name>", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371608923", "createdAt": "2020-01-28T04:48:48Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)\n+            throws InvalidModelVersionException, ModelNotFoundException {\n+        if (versionId == null) {\n+            versionId = this.getDefaultVersion();\n+        } else {\n+            validateVersionId(versionId);\n+        }\n+\n+        if (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0\n+                && modelsVersionMap.size() > 1) {\n+            throw new InvalidModelVersionException(\n+                    String.format(\"Can't remove default version: %s\", versionId));\n+        }\n+\n+        Model model = this.modelsVersionMap.remove(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new ModelNotFoundException(\n+                    String.format(\"Model version: %s not found\", versionId));\n+        }\n+\n+        logger.debug(\"Removed model: {} version: {}\", model.getModelName(), versionId);\n+\n+        return model;\n     }\n \n     /**\n      * Returns the Model obj corresponding to the version provided\n      *\n-     * @param  A String specifying a valid version Id\n-     * @return On Success - a Model Obj previously registered\n-     *         On Failure - null\n+     * @param A String specifying a valid version Id\n+     * @return On Success - a Model Obj previously registered On Failure - null\n      */\n-    public Model getVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\treturn this.modelsVersionMap.get(Double.valueOf(versionId));\n-    }\n+    public Model getVersionModel(String versionId) throws InvalidModelVersionException {\n+        Model model = null;\n+        if (versionId != null) {\n+            validateVersionId(versionId);\n+            model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        } else {\n+            model = this.getDefaultModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODY3Mw=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3MzE0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MDowMVrOFgNcVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNDoyMDo0NlrOFgQM0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODk5Ng==", "bodyText": "not sure if this convention is followed in Java of using '_' ahead of a privately used function in a class? I don't see any other practice/convention used in this project.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369318996", "createdAt": "2020-01-22T00:40:01Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2NDE3Nw==", "bodyText": "In java, the identifier does not begin with '_'.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369364177", "createdAt": "2020-01-22T04:20:46Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODk5Ng=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3NDIyOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MDozOFrOFgNc_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNDoyMToyNlrOFgQNPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTE2Nw==", "bodyText": "indentation looks a little off here ??", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369319167", "createdAt": "2020-01-22T00:40:38Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2NDI4Nw==", "bodyText": "The indentation is per Gradle java code format command fJ which is using google java coding style.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369364287", "createdAt": "2020-01-22T04:21:26Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTE2Nw=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3ODIyOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MzoxOFrOFgNfjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1MDo0MlrOFiZOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTgyMg==", "bodyText": "Is this a new response we are sending or has it been around? Does the client know or care about what this health status is? Why not send, 500 with a hint about 'scaling'", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369319822", "createdAt": "2020-01-22T00:43:18Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {\n+                        numScaled += m.getValue().getDefaultModel().getMinWorkers();\n+                        numWorking +=\n+                                wlm.getNumRunningWorkers(\n+                                        m.getValue().getDefaultModel().getModelVersionName());\n+                    }\n+\n+                    if ((numWorking > 0) && (numWorking < numScaled)) {\n+                        response = \"Partial Healthy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTIyMg==", "bodyText": "This has been ported as-is from MMS. It is overall status.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609222", "createdAt": "2020-01-28T04:50:42Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {\n+                        numScaled += m.getValue().getDefaultModel().getMinWorkers();\n+                        numWorking +=\n+                                wlm.getNumRunningWorkers(\n+                                        m.getValue().getDefaultModel().getModelVersionName());\n+                    }\n+\n+                    if ((numWorking > 0) && (numWorking < numScaled)) {\n+                        response = \"Partial Healthy\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTgyMg=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk4ODk5OnYy", "diffSide": "RIGHT", "path": "benchmarks/benchmark.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowMDozN1rOFhnV-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1MTowM1rOFiZOww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTkzMA==", "bodyText": "Remove hard-coded path.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370791930", "createdAt": "2020-01-24T19:00:37Z", "author": {"login": "alexwong"}, "path": "benchmarks/benchmark.py", "diffHunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"\n+Execute the TorchServe Benchmark.  For instructions, run with the --help flag\n+\"\"\"\n+\n+# pylint: disable=redefined-builtin\n+\n+import argparse\n+import itertools\n+import multiprocessing\n+import os\n+import pprint\n+import shutil\n+import subprocess\n+import sys\n+import time\n+import traceback\n+from functools import reduce\n+from urllib.request import urlretrieve\n+\n+import pandas as pd\n+\n+MODEL_STORE = \"/Users/harsh_bafna/model_store\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTI4Mw==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609283", "createdAt": "2020-01-28T04:51:03Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "benchmarks/benchmark.py", "diffHunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"\n+Execute the TorchServe Benchmark.  For instructions, run with the --help flag\n+\"\"\"\n+\n+# pylint: disable=redefined-builtin\n+\n+import argparse\n+import itertools\n+import multiprocessing\n+import os\n+import pprint\n+import shutil\n+import subprocess\n+import sys\n+import time\n+import traceback\n+from functools import reduce\n+from urllib.request import urlretrieve\n+\n+import pandas as pd\n+\n+MODEL_STORE = \"/Users/harsh_bafna/model_store\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTkzMA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk5MjA2OnYy", "diffSide": "RIGHT", "path": "benchmarks/install_dependencies.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowMTo0NlrOFhnX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1NTozMVrOFiZRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MjQ0Ng==", "bodyText": "Just a mention, but at some point we should stop having to support Python 2 as it's been deprecated as of 2020.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370792446", "createdAt": "2020-01-24T19:01:46Z", "author": {"login": "alexwong"}, "path": "benchmarks/install_dependencies.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/bash\n+\n+# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+# This file contains the installation setup for running benchmarks on EC2 isntance.\n+# To run on a machine with GPU : ./install_dependencies True\n+# To run on a machine with CPU : ./install_dependencies False\n+set -ex\n+\n+sudo apt-get update\n+sudo apt-get -y upgrade\n+echo \"Setting up your Ubuntu machine to load test MMS\"\n+sudo apt-get install -y \\\n+        python \\\n+        python-pip \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTk3NA==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609974", "createdAt": "2020-01-28T04:55:31Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "benchmarks/install_dependencies.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/bash\n+\n+# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+# This file contains the installation setup for running benchmarks on EC2 isntance.\n+# To run on a machine with GPU : ./install_dependencies True\n+# To run on a machine with CPU : ./install_dependencies False\n+set -ex\n+\n+sudo apt-get update\n+sudo apt-get -y upgrade\n+echo \"Setting up your Ubuntu machine to load test MMS\"\n+sudo apt-get install -y \\\n+        python \\\n+        python-pip \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MjQ0Ng=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAwODQ5OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowODowMlrOFhniRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1MjoyMFrOFiZPjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTA3OA==", "bodyText": "segments[3].equals(\"predict\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370795078", "createdAt": "2020-01-24T19:08:02Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTQ4Nw==", "bodyText": "This as per PMD standards and it also protects us from NULL point exception.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609487", "createdAt": "2020-01-28T04:52:20Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTA3OA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAwOTA3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowODoxNVrOFhniow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1MjozMFrOFiZPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTE3MQ==", "bodyText": "segments[2].equals(\"predict\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370795171", "createdAt": "2020-01-24T19:08:15Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {\n+            modelVersion = segments[2];\n+        } else if (segments.length < 3 || !\"predict\".equals(segments[2])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTUwNQ==", "bodyText": "This as per PMD standards and it also protects us from NULL point exception.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609505", "createdAt": "2020-01-28T04:52:30Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {\n+            modelVersion = segments[2];\n+        } else if (segments.length < 3 || !\"predict\".equals(segments[2])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTE3MQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAxNDQ2OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxMDoyMFrOFhnl6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1MzozNlrOFiZQTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NjAwOA==", "bodyText": "Remove or add comment describing what this is for.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370796008", "createdAt": "2020-01-24T19:10:20Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -151,7 +164,9 @@ private void predict(\n \n         if (HttpMethod.OPTIONS.equals(req.method())) {\n             ModelManager modelManager = ModelManager.getInstance();\n-            Model model = modelManager.getModels().get(modelName);\n+\n+            // ModelVersionedRefs model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTY3Ng==", "bodyText": "Removed commented code.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371609676", "createdAt": "2020-01-28T04:53:36Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -151,7 +164,9 @@ private void predict(\n \n         if (HttpMethod.OPTIONS.equals(req.method())) {\n             ModelManager modelManager = ModelManager.getInstance();\n-            Model model = modelManager.getModels().get(modelName);\n+\n+            // ModelVersionedRefs model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NjAwOA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAxOTA3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxMjowOFrOFhno1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1OToyMlrOFiZT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Njc1OQ==", "bodyText": "I've been seeing a lot of checking of strings and stuff for segments which has I guess model name and model version. Would it be better to make it a class so we can directly check if a field is not null rather than checking length each time?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370796759", "createdAt": "2020-01-24T19:12:08Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDYxNQ==", "bodyText": "This is per existing framework however as you have suggested the same can be improved.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371610615", "createdAt": "2020-01-28T04:59:22Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Njc1OQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAyMjY0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxMzozM1rOFhnrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDo1OTo1OFrOFiZUbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzM1OQ==", "bodyText": "segments[4].equals(\"set-default\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797359", "createdAt": "2020-01-24T19:13:33Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {\n+                    modelVersion = segments[3];\n+                }\n                 if (HttpMethod.GET.equals(method)) {\n-                    handleDescribeModel(ctx, segments[2]);\n+                    handleDescribeModel(ctx, segments[2], modelVersion);\n                 } else if (HttpMethod.PUT.equals(method)) {\n-                    handleScaleModel(ctx, decoder, segments[2]);\n+                    if (segments.length == 5 && \"set-default\".equals(segments[4])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDczMw==", "bodyText": "This as per PMD standards and it also protects us from NULL point exception.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371610733", "createdAt": "2020-01-28T04:59:58Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {\n+                    modelVersion = segments[3];\n+                }\n                 if (HttpMethod.GET.equals(method)) {\n-                    handleDescribeModel(ctx, segments[2]);\n+                    handleDescribeModel(ctx, segments[2], modelVersion);\n                 } else if (HttpMethod.PUT.equals(method)) {\n-                    handleScaleModel(ctx, decoder, segments[2]);\n+                    if (segments.length == 5 && \"set-default\".equals(segments[4])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzM1OQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAyNDUzOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNDowNlrOFhnsQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNTowMTozMFrOFiZVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzYzNQ==", "bodyText": "Why contentEquals vs equals?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797635", "createdAt": "2020-01-24T19:14:06Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -84,7 +92,8 @@ protected void handleRequest(\n \n     private boolean isManagementReq(String[] segments) {\n         return segments.length == 0\n-                || ((segments.length == 2 || segments.length == 3) && segments[1].equals(\"models\"))\n+                || ((segments.length >= 2 && segments.length <= 4) && segments[1].equals(\"models\"))\n+                || (segments.length == 5 && segments[4].contentEquals(\"set-default\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTA0NA==", "bodyText": "Changed to equals.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371611044", "createdAt": "2020-01-28T05:01:30Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -84,7 +92,8 @@ protected void handleRequest(\n \n     private boolean isManagementReq(String[] segments) {\n         return segments.length == 0\n-                || ((segments.length == 2 || segments.length == 3) && segments[1].equals(\"models\"))\n+                || ((segments.length >= 2 && segments.length <= 4) && segments[1].equals(\"models\"))\n+                || (segments.length == 5 && segments[4].contentEquals(\"set-default\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzYzNQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAyNjc3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNDo1MlrOFhnthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNTowNDo0MVrOFiZXmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Nzk1Ng==", "bodyText": "modelVersion.equals(\"all\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797956", "createdAt": "2020-01-24T19:14:52Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU0Nw==", "bodyText": "This is as per PMD. This also helps to avoid null pointer exception.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371611547", "createdAt": "2020-01-28T05:04:41Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Nzk1Ng=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAzMjc3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNjo1OFrOFhnxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo0NDo1OVrOFip_ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5ODg4NQ==", "bodyText": "Still reading all of the code. But here we check for both model and model version (more strict) but throw a generic modelnotfound exception. If we're checking for model version, I think we should throw some versionnotfound exception (still reading through code so this may not exist in this PR) and only throw modelnotfound if the model was never registered (ie: no versions exist at all).", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370798885", "createdAt": "2020-01-24T19:16:58Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {\n+            for (Map.Entry<Double, Model> m : modelManager.getAllModelVersions(modelName)) {\n+                resp.add(createModelResponse(modelManager, modelName, m.getValue()));\n+            }\n+        } else {\n+            Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4MzkzNA==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371883934", "createdAt": "2020-01-28T15:44:59Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {\n+            for (Map.Entry<Double, Model> m : modelManager.getAllModelVersions(modelName)) {\n+                resp.add(createModelResponse(modelManager, modelName, m.getValue()));\n+            }\n+        } else {\n+            Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5ODg4NQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAzNTQ4OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxNzo0OVrOFhnyvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNTowNzoyM1rOFiZZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTI5NA==", "bodyText": "Can unregister model handle modelVersion == null? I can see it being useful to not have to provide a version when unregistering.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370799294", "createdAt": "2020-01-24T19:17:49Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -216,32 +240,41 @@ private void handleRegisterModel(\n         updateModelWorkers(\n                 ctx,\n                 modelName,\n+                archive.getModelVersion(),\n                 initialWorkers,\n                 initialWorkers,\n                 synchronous,\n                 f -> {\n-                    modelManager.unregisterModel(archive.getModelName());\n+                    modelManager.unregisterModel(archive.getModelName(), archive.getModelVersion());\n                     return null;\n                 });\n     }\n \n-    private void handleUnregisterModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleUnregisterModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException, InternalServerException, RequestTimeoutException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        HttpResponseStatus httpResponseStatus = modelManager.unregisterModel(modelName);\n+        HttpResponseStatus httpResponseStatus =\n+                modelManager.unregisterModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjA0Ng==", "bodyText": "With null version, it will try to remove default however as per our logic, we don't allow default model deletion unless it is the only version available with TorchServe", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371612046", "createdAt": "2020-01-28T05:07:23Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -216,32 +240,41 @@ private void handleRegisterModel(\n         updateModelWorkers(\n                 ctx,\n                 modelName,\n+                archive.getModelVersion(),\n                 initialWorkers,\n                 initialWorkers,\n                 synchronous,\n                 f -> {\n-                    modelManager.unregisterModel(archive.getModelName());\n+                    modelManager.unregisterModel(archive.getModelName(), archive.getModelVersion());\n                     return null;\n                 });\n     }\n \n-    private void handleUnregisterModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleUnregisterModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException, InternalServerException, RequestTimeoutException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        HttpResponseStatus httpResponseStatus = modelManager.unregisterModel(modelName);\n+        HttpResponseStatus httpResponseStatus =\n+                modelManager.unregisterModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTI5NA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA1NTU1OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerLifeCycle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNDo1N1rOFhn_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo0NToxNVrOFiqAXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ2NA==", "bodyText": "Where does 25 length restriction come from? We should document this somewhere.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370802464", "createdAt": "2020-01-24T19:24:57Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerLifeCycle.java", "diffHunk": "@@ -117,8 +117,10 @@ public void startWorker(int port) throws WorkerInitializationException, Interrup\n                         \"W-\"\n                                 + port\n                                 + '-'\n-                                + model.getModelName()\n-                                        .substring(0, Math.min(model.getModelName().length(), 25));\n+                                + model.getModelVersionName()\n+                                        .substring(\n+                                                0,\n+                                                Math.min(model.getModelVersionName().length(), 25));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjM2NA==", "bodyText": "Ported as is from MMS. We will have to discuss this.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371612364", "createdAt": "2020-01-28T05:09:16Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerLifeCycle.java", "diffHunk": "@@ -117,8 +117,10 @@ public void startWorker(int port) throws WorkerInitializationException, Interrup\n                         \"W-\"\n                                 + port\n                                 + '-'\n-                                + model.getModelName()\n-                                        .substring(0, Math.min(model.getModelName().length(), 25));\n+                                + model.getModelVersionName()\n+                                        .substring(\n+                                                0,\n+                                                Math.min(model.getModelVersionName().length(), 25));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ2NA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4NDEyNQ==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371884125", "createdAt": "2020-01-28T15:45:15Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerLifeCycle.java", "diffHunk": "@@ -117,8 +117,10 @@ public void startWorker(int port) throws WorkerInitializationException, Interrup\n                         \"W-\"\n                                 + port\n                                 + '-'\n-                                + model.getModelName()\n-                                        .substring(0, Math.min(model.getModelName().length(), 25));\n+                                + model.getModelVersionName()\n+                                        .substring(\n+                                                0,\n+                                                Math.min(model.getModelVersionName().length(), 25));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ2NA=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA2MDI2OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNjo0MVrOFhoCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo0NTo1OVrOFiqCfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzI0Mg==", "bodyText": "I'm assuming modelversionname = old_model_name + version. Could cause problems is user passes in a long model name.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803242", "createdAt": "2020-01-24T19:26:41Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -322,15 +324,15 @@ public void shutdown() {\n     }\n \n     private final String getWorkerName() {\n-        String modelName = model.getModelName();\n+        String modelName = model.getModelVersionName();\n         if (modelName.length() > 25) {\n             modelName = modelName.substring(0, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjQ0MQ==", "bodyText": "See earlier comment for name length", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371612441", "createdAt": "2020-01-28T05:09:49Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -322,15 +324,15 @@ public void shutdown() {\n     }\n \n     private final String getWorkerName() {\n-        String modelName = model.getModelName();\n+        String modelName = model.getModelVersionName();\n         if (modelName.length() > 25) {\n             modelName = modelName.substring(0, 25);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzI0Mg=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4NDY3MA==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371884670", "createdAt": "2020-01-28T15:45:59Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -322,15 +324,15 @@ public void shutdown() {\n     }\n \n     private final String getWorkerName() {\n-        String modelName = model.getModelName();\n+        String modelName = model.getModelVersionName();\n         if (modelName.length() > 25) {\n             modelName = modelName.substring(0, 25);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzI0Mg=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA2MjE1OnYy", "diffSide": "LEFT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNzoyMVrOFhoDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNToxMToxNFrOFiZb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzU1NQ==", "bodyText": "Why are the eager and ts tests removed?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803555", "createdAt": "2020-01-24T19:27:21Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -284,75 +293,38 @@ private void testDescribeApi(Channel channel) throws InterruptedException {\n         Assert.assertEquals(result, noopApiResult);\n     }\n \n-    private void testLoadModel(Channel channel) throws InterruptedException {\n-        result = null;\n-        latch = new CountDownLatch(1);\n-        HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1,\n-                        HttpMethod.POST,\n-                        \"/models?url=noop.mar&model_name=noop_v1.0&runtime=python&synchronous=false\");\n-        channel.writeAndFlush(req);\n-        latch.await();\n-\n-        StatusResponse resp = JsonUtils.GSON.fromJson(result, StatusResponse.class);\n-        Assert.assertEquals(resp.getStatus(), \"Model \\\"noop_v1.0\\\" registered\");\n-    }\n-\n-    private void testLoadModelEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjY2OQ==", "bodyText": "These test cases have not been removed rather we have generalized the testLoadModel method to include these. This is to take care of code repetition", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371612669", "createdAt": "2020-01-28T05:11:14Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -284,75 +293,38 @@ private void testDescribeApi(Channel channel) throws InterruptedException {\n         Assert.assertEquals(result, noopApiResult);\n     }\n \n-    private void testLoadModel(Channel channel) throws InterruptedException {\n-        result = null;\n-        latch = new CountDownLatch(1);\n-        HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1,\n-                        HttpMethod.POST,\n-                        \"/models?url=noop.mar&model_name=noop_v1.0&runtime=python&synchronous=false\");\n-        channel.writeAndFlush(req);\n-        latch.await();\n-\n-        StatusResponse resp = JsonUtils.GSON.fromJson(result, StatusResponse.class);\n-        Assert.assertEquals(resp.getStatus(), \"Model \\\"noop_v1.0\\\" registered\");\n-    }\n-\n-    private void testLoadModelEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzU1NQ=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA2MzI5OnYy", "diffSide": "LEFT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNzo0NFrOFhoEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNToxMTo1MVrOFiZcZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzcyNw==", "bodyText": "Why are these removed?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803727", "createdAt": "2020-01-24T19:27:44Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -473,79 +435,62 @@ private void testListModels(Channel channel) throws InterruptedException {\n         Assert.assertEquals(resp.getModels().size(), 1);\n     }\n \n-    private void testDescribeModel(Channel channel) throws InterruptedException {\n+    private void testDescribeModel(\n+            Channel channel, String modelName, String requestVersion, String expectedVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n+        String requestURL = \"/models/\" + modelName;\n+        if (requestVersion != null) {\n+            requestURL += \"/\" + requestVersion;\n+        }\n         HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.GET, \"/models/noop_v1.0\");\n+                new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, requestURL);\n         channel.writeAndFlush(req);\n         latch.await();\n \n-        DescribeModelResponse resp = JsonUtils.GSON.fromJson(result, DescribeModelResponse.class);\n-        Assert.assertTrue(resp.getWorkers().size() > 1);\n+        DescribeModelResponse[] resp =\n+                JsonUtils.GSON.fromJson(result, DescribeModelResponse[].class);\n+        if (\"all\".equals(requestVersion)) {\n+            Assert.assertTrue(resp.length >= 1);\n+        } else {\n+            Assert.assertTrue(resp.length == 1);\n+        }\n+        Assert.assertTrue(expectedVersion.equals(resp[0].getModelVersion()));\n     }\n \n-    private void testPredictions(Channel channel) throws InterruptedException {\n+    private void testSetDefault(Channel channel, String modelName, String defaultVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n-        DefaultFullHttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.POST, \"/predictions/noop\");\n-        req.content().writeCharSequence(\"data=test\", CharsetUtil.UTF_8);\n-        HttpUtil.setContentLength(req, req.content().readableBytes());\n-        req.headers()\n-                .set(\n-                        HttpHeaderNames.CONTENT_TYPE,\n-                        HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);\n-        channel.writeAndFlush(req);\n+        String requestURL = \"/models/\" + modelName + \"/\" + defaultVersion + \"/set-default\";\n \n-        latch.await();\n-        Assert.assertEquals(result, \"OK\");\n-    }\n-\n-    private void testPredictionsEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjc3Mw==", "bodyText": "Same comment as earlier for test case removal.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r371612773", "createdAt": "2020-01-28T05:11:51Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -473,79 +435,62 @@ private void testListModels(Channel channel) throws InterruptedException {\n         Assert.assertEquals(resp.getModels().size(), 1);\n     }\n \n-    private void testDescribeModel(Channel channel) throws InterruptedException {\n+    private void testDescribeModel(\n+            Channel channel, String modelName, String requestVersion, String expectedVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n+        String requestURL = \"/models/\" + modelName;\n+        if (requestVersion != null) {\n+            requestURL += \"/\" + requestVersion;\n+        }\n         HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.GET, \"/models/noop_v1.0\");\n+                new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, requestURL);\n         channel.writeAndFlush(req);\n         latch.await();\n \n-        DescribeModelResponse resp = JsonUtils.GSON.fromJson(result, DescribeModelResponse.class);\n-        Assert.assertTrue(resp.getWorkers().size() > 1);\n+        DescribeModelResponse[] resp =\n+                JsonUtils.GSON.fromJson(result, DescribeModelResponse[].class);\n+        if (\"all\".equals(requestVersion)) {\n+            Assert.assertTrue(resp.length >= 1);\n+        } else {\n+            Assert.assertTrue(resp.length == 1);\n+        }\n+        Assert.assertTrue(expectedVersion.equals(resp[0].getModelVersion()));\n     }\n \n-    private void testPredictions(Channel channel) throws InterruptedException {\n+    private void testSetDefault(Channel channel, String modelName, String defaultVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n-        DefaultFullHttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.POST, \"/predictions/noop\");\n-        req.content().writeCharSequence(\"data=test\", CharsetUtil.UTF_8);\n-        HttpUtil.setContentLength(req, req.content().readableBytes());\n-        req.headers()\n-                .set(\n-                        HttpHeaderNames.CONTENT_TYPE,\n-                        HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);\n-        channel.writeAndFlush(req);\n+        String requestURL = \"/models/\" + modelName + \"/\" + defaultVersion + \"/set-default\";\n \n-        latch.await();\n-        Assert.assertEquals(result, \"OK\");\n-    }\n-\n-    private void testPredictionsEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzcyNw=="}, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 315}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1674, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}