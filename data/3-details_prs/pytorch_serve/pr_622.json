{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODY3MzQ5", "number": 622, "title": "Environment information header in regression and sanity suite", "bodyText": "Description\nEnhanced regression suite and sanity suite logging to add headers which include following environment information :\n\ntorchserve branch\ntorch module versions: torch, torchvision, torchaudio, torchtext\nOS name and version\npython version\njava version\nCPU/GPU environment\nNVCC version / NVIDIA driver version (when running on GPU instance)\n\nFixes #598\nType of change\nPlease delete options that are not relevant.\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nFeature\nThe following command are run to verify the changes\n ./regression_tests.sh\n\nLogs\nFollowing are regression logs from GPU machine:-\n\n------------------------------------------------------------------------------------------\nEnvironment headers\n------------------------------------------------------------------------------------------\nTorchserve branch : issue_598\n\ntorchserve==0.2.0\ntorch-model-archiver==0.2.0\n\nPython version: 3.7 (64-bit runtime)\n\nVersions of relevant python libraries:\nnumpy==1.19.1\nnumpydoc==0.9.2\npylint==2.5.3\npytest==6.0.1\npytest-arraydiff==0.3\npytest-astropy==0.8.0\npytest-astropy-header==0.1.2\npytest-cov==2.10.0\npytest-doctestplus==0.5.0\npytest-mock==3.2.0\npytest-openfiles==0.4.0\npytest-remotedata==0.3.2\ntorch==1.6.0+cu101\ntorchtext==0.7.0\ntorchvision==0.7.0+cu101\n**Warning: torchaudio not present ..\n\nJava Version:\nopenjdk 11.0.8 2020-07-14\nOpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1)\nOpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1, mixed mode, sharing)\n\nOS: Ubuntu 18.04.4 LTS\nGCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nClang version: N/A\nCMake version: version 3.13.3\n\nIs CUDA available: Yes\nCUDA runtime version: 9.1.85\nGPU models and configuration: \nGPU 0: Tesla V100-SXM2-16GB\nGPU 1: Tesla V100-SXM2-16GB\nGPU 2: Tesla V100-SXM2-16GB\nGPU 3: Tesla V100-SXM2-16GB\nNvidia driver version: 440.100\ncuDNN version: Probably one of the following:\n/usr/local/cuda-10.1/targets/x86_64-linux/lib/libcudnn.so.7.6.5\n/usr/local/cuda-10.2/targets/x86_64-linux/lib/libcudnn.so.7.6.5\nFollowing are regression logs from CPU machine:-\n------------------------------------------------------------------------------------------\nEnvironment headers\n------------------------------------------------------------------------------------------\nTorchserve branch : issue_598\n\ntorchserve==0.2.0\ntorch-model-archiver==0.2.0\n\nPython version: 3.7 (64-bit runtime)\n\nVersions of relevant python libraries:\nnumpy==1.19.1\nnumpydoc==0.9.2\npylint==2.5.3\npytest==6.0.0\npytest-arraydiff==0.3\npytest-astropy==0.8.0\npytest-astropy-header==0.1.2\npytest-cov==2.10.0\npytest-doctestplus==0.5.0\npytest-mock==3.2.0\npytest-openfiles==0.4.0\npytest-remotedata==0.3.2\ntorch==1.6.0\ntorchtext==0.7.0\ntorchvision==0.7.0\ntorchaudio==0.6.0\n\nJava Version:\nopenjdk 11.0.8 2020-07-14\nOpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1)\nOpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1, mixed mode, sharing)\n\nOS: Ubuntu 18.04.4 LTS\nGCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nClang version: N/A\nCMake version: version 3.13.3\nFollowing are sanity logs from CPU machine:-\n------------------------------------------------------------------------------------------\nEnvironment headers\n------------------------------------------------------------------------------------------\nTorchserve branch : no branch\n\ntorchserve==0.2.0\ntorch-model-archiver==0.2.0\n\nPython version: 3.7 (64-bit runtime)\n\nVersions of relevant python libraries:\nnumpy==1.18.1\nnumpydoc==0.9.2\npylint==2.4.4\npytest==5.4.1\npytest-arraydiff==0.3\npytest-astropy==0.8.0\npytest-astropy-header==0.1.2\npytest-cov==2.10.0\npytest-doctestplus==0.5.0\npytest-mock==3.2.0\npytest-openfiles==0.4.0\npytest-remotedata==0.3.2\ntorch==1.5.0\ntorchtext==0.6.0\ntorchvision==0.6.0\n**Warning: torchaudio not present ..\n\nJava Version:\nopenjdk 11.0.8 2020-07-14\nOpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1)\nOpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1, mixed mode, sharing)\n\nOS: Ubuntu 18.04.4 LTS\nGCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nClang version: N/A\nCMake version: version 3.13.3", "createdAt": "2020-08-17T14:26:33Z", "url": "https://github.com/pytorch/serve/pull/622", "merged": true, "mergeCommit": {"oid": "0cdb00fd4d5d3b492c363bed63a9f54ab5b5f81e"}, "closed": true, "closedAt": "2020-10-28T19:46:49Z", "author": {"login": "AshwinChafale"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-xmEbgH2gAyNDY4ODY3MzQ5OjI3ZTRmMWRhMmJhNTY0NDRjZGVlZWNmMjIzNTQ4NmU5MTVmMzMzNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXC_NsgFqTUxOTAyNjMxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "27e4f1da2ba56444cdeeecf2235486e915f3334c", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/27e4f1da2ba56444cdeeecf2235486e915f3334c", "committedDate": "2020-08-14T09:56:19Z", "message": "Merge pull request #1 from pytorch/master\n\nMerging the current changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992fbfcaa63532d5e9982cee4ba6f3b9fbab83a7", "author": {"user": null}, "url": "https://github.com/pytorch/serve/commit/992fbfcaa63532d5e9982cee4ba6f3b9fbab83a7", "committedDate": "2020-08-14T10:10:57Z", "message": "Added environment header in Sanity & Regression test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ca16898ee8499de550c3b7c51fd5c6ea7691bf", "author": {"user": null}, "url": "https://github.com/pytorch/serve/commit/34ca16898ee8499de550c3b7c51fd5c6ea7691bf", "committedDate": "2020-08-14T10:11:56Z", "message": "Added collect_env.py python script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13167db2510113aff6e628c19a074f10fa9d178d", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/13167db2510113aff6e628c19a074f10fa9d178d", "committedDate": "2020-08-17T13:54:09Z", "message": "Update regression_tests.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d781baa6dcc382696a0a310cfc08b94514a48425", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/d781baa6dcc382696a0a310cfc08b94514a48425", "committedDate": "2020-08-17T14:27:23Z", "message": "Merge branch 'master' into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b3e284ad436158d1b98d39074e93873d08a8b7", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/35b3e284ad436158d1b98d39074e93873d08a8b7", "committedDate": "2020-08-20T11:16:39Z", "message": "Updated test suite to include environement header logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a59d3ab0f359615142c9bb4c0b6f8cc1e3373821", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/a59d3ab0f359615142c9bb4c0b6f8cc1e3373821", "committedDate": "2020-08-20T11:17:28Z", "message": "Added print_env_info.py file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4075fc25b66adf704922d89932a0d2b100d1f5a5", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/4075fc25b66adf704922d89932a0d2b100d1f5a5", "committedDate": "2020-08-20T11:42:53Z", "message": "Updated regression and sanity test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4828537ab2123c69caf6ded1ac25cde9249e0ac6", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/4828537ab2123c69caf6ded1ac25cde9249e0ac6", "committedDate": "2020-08-20T12:12:47Z", "message": "Update print_env_info.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97864f1a3c25092d5ac05d6e2d5b9433acf87e44", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/97864f1a3c25092d5ac05d6e2d5b9433acf87e44", "committedDate": "2020-08-21T07:11:38Z", "message": "Update regression_tests.sh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjczNDIw", "url": "https://github.com/pytorch/serve/pull/622#pullrequestreview-474273420", "createdAt": "2020-08-25T08:54:07Z", "commit": {"oid": "97864f1a3c25092d5ac05d6e2d5b9433acf87e44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1NDowN1rOHGOS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1NDowN1rOHGOS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NzczMA==", "bodyText": "Name it torchserve_env . In namedtuple as well.", "url": "https://github.com/pytorch/serve/pull/622#discussion_r476287730", "createdAt": "2020-08-25T08:54:07Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,373 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+# System Environment Information\n+SystemEnv = namedtuple('SystemEnv', [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97864f1a3c25092d5ac05d6e2d5b9433acf87e44"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657880f256adfa71d020162e1c890a4348edaa0f", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/657880f256adfa71d020162e1c890a4348edaa0f", "committedDate": "2020-08-25T13:23:00Z", "message": "Merge branch 'master' into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5e082cee85b9f11d88144ff50f2796948c9e84", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/af5e082cee85b9f11d88144ff50f2796948c9e84", "committedDate": "2020-08-27T14:26:05Z", "message": "Updated Env header script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4203d0904ef612ca5acbc72a8ae2eafd906fb3", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/0d4203d0904ef612ca5acbc72a8ae2eafd906fb3", "committedDate": "2020-08-27T14:41:17Z", "message": "Updated print_env_info.py file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee61ed154d61e4c4cdb8940d644cfc2a32cb3cc", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/1ee61ed154d61e4c4cdb8940d644cfc2a32cb3cc", "committedDate": "2020-08-27T15:03:55Z", "message": "Updated print_env_info.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26904a6fb95faf4384df9ce9916c37c02c13285", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/c26904a6fb95faf4384df9ce9916c37c02c13285", "committedDate": "2020-08-27T16:02:46Z", "message": "Added Env header warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "830bd38b6d2a01161b75f7782d5f8a9eea3ed121", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/830bd38b6d2a01161b75f7782d5f8a9eea3ed121", "committedDate": "2020-08-27T16:38:28Z", "message": "Updated print_env_info.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cf308daddc0451b11d764d8c15a6751a440403", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/e0cf308daddc0451b11d764d8c15a6751a440403", "committedDate": "2020-08-27T17:05:18Z", "message": "Fixed file not found error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef841dc885a48de136ac3fb08b77c40c8f9ad5f1", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/ef841dc885a48de136ac3fb08b77c40c8f9ad5f1", "committedDate": "2020-08-28T12:40:47Z", "message": "Updated Environment headers scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "710c93d2fa8a4f9ccad7b71f949ea5bece9ae6f4", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/710c93d2fa8a4f9ccad7b71f949ea5bece9ae6f4", "committedDate": "2020-08-28T17:36:11Z", "message": "Updated Test suite for Environment headers support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0e64919d830169cf6a0238d65116fac6b0bbe5", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/6b0e64919d830169cf6a0238d65116fac6b0bbe5", "committedDate": "2020-09-01T05:31:01Z", "message": "Modified regression_test.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "390b3096477e03df56101cebcd681dc90d28cded", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/390b3096477e03df56101cebcd681dc90d28cded", "committedDate": "2020-09-01T05:39:43Z", "message": "Modified torchserve_sanity.sh file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bde8f9d7692c75bd5622f5d469a6cff21fc928e", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/8bde8f9d7692c75bd5622f5d469a6cff21fc928e", "committedDate": "2020-09-10T11:37:41Z", "message": "Modified print_env_info.py file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "author": {"user": {"login": "AshwinChafale", "name": "Ashwin Chafale"}}, "url": "https://github.com/pytorch/serve/commit/d4c4250bce89c4806687f5426fb906a93c4f8c30", "committedDate": "2020-09-10T12:00:35Z", "message": "Modified print_env_info.py file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NjU5Nzk3", "url": "https://github.com/pytorch/serve/pull/622#pullrequestreview-499659797", "createdAt": "2020-09-30T17:29:47Z", "commit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyOTo0N1rOHaoKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzo0MTowNlrOHaoj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzEyNg==", "bodyText": "Why are we removing the option to provide a custom branch? It will be helpful to have this option if I want to run regression suite on a standalone basis", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497683126", "createdAt": "2020-09-30T17:29:47Z", "author": {"login": "maaquib"}, "path": "test/regression_tests.sh", "diffHunk": "@@ -4,7 +4,7 @@ set -x\n #set -e\n \n TS_REPO=\"https://github.com/pytorch/serve\"\n-BRANCH=${1:-master}\n+BRANCH=\"master\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjkyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def get_gpu_info(run):\n          \n          \n            \n            def get_nvidia_gpu_info(run):", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497686924", "createdAt": "2020-09-30T17:36:33Z", "author": {"login": "maaquib"}, "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4Nzc5NA==", "bodyText": "Why is this a function?", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497687794", "createdAt": "2020-09-30T17:38:00Z", "author": {"login": "maaquib"}, "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):\n+    if get_platform() == 'darwin':\n+        if TORCH_AVAILABLE and torch.cuda.is_available():\n+            return torch.cuda.get_device_name(None)\n+        return None\n+    smi = get_nvidia_smi()\n+    uuid_regex = re.compile(r' \\(UUID: .+?\\)')\n+    rc, out, _ = run(smi + ' -L')\n+    if rc != 0:\n+        return None\n+    # Anonymize GPUs by removing their UUID\n+    return \"\\n\" + re.sub(uuid_regex, '', out)\n+\n+def get_running_cuda_version(run):\n+    return run_and_parse_first_match(run, 'nvcc --version', r'V(.*)$')\n+\n+def get_cudnn_version(run):\n+    \"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"\n+    if get_platform() == 'darwin':\n+        # CUDA libraries and drivers can be found in /usr/local/cuda/. See\n+        cudnn_cmd = 'ls /usr/local/cuda/lib/libcudnn*'\n+    else:\n+        cudnn_cmd = 'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'\n+    rc, out, _ = run(cudnn_cmd)\n+    # find will return 1 if there are permission errors or if not found\n+    if len(out) == 0 or (rc != 1 and rc != 0):\n+        l = os.environ.get('CUDNN_LIBRARY')\n+        if l is not None and os.path.isfile(l):\n+            return os.path.realpath(l)\n+        return None\n+    files = set()\n+    for fn in out.split('\\n'):\n+        fn = os.path.realpath(fn)  # eliminate symbolic links\n+        if os.path.isfile(fn):\n+            files.add(fn)\n+    if not files:\n+        return None\n+    # Alphabetize the result because the order is non-deterministic otherwise\n+    files = list(sorted(files))\n+    if len(files) == 1:\n+        return files[0]\n+    result = '\\n'.join(files)\n+    return 'Probably one of the following:\\n{}'.format(result)\n+\n+def get_nvidia_smi():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4OTU4OQ==", "bodyText": "It seems to be making an assumption that the script will be invoked from the top level directory. We should make the path relative to this script. Same for get_torch_model_archiver", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497689589", "createdAt": "2020-09-30T17:41:06Z", "author": {"login": "maaquib"}, "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):\n+    if get_platform() == 'darwin':\n+        if TORCH_AVAILABLE and torch.cuda.is_available():\n+            return torch.cuda.get_device_name(None)\n+        return None\n+    smi = get_nvidia_smi()\n+    uuid_regex = re.compile(r' \\(UUID: .+?\\)')\n+    rc, out, _ = run(smi + ' -L')\n+    if rc != 0:\n+        return None\n+    # Anonymize GPUs by removing their UUID\n+    return \"\\n\" + re.sub(uuid_regex, '', out)\n+\n+def get_running_cuda_version(run):\n+    return run_and_parse_first_match(run, 'nvcc --version', r'V(.*)$')\n+\n+def get_cudnn_version(run):\n+    \"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"\n+    if get_platform() == 'darwin':\n+        # CUDA libraries and drivers can be found in /usr/local/cuda/. See\n+        cudnn_cmd = 'ls /usr/local/cuda/lib/libcudnn*'\n+    else:\n+        cudnn_cmd = 'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'\n+    rc, out, _ = run(cudnn_cmd)\n+    # find will return 1 if there are permission errors or if not found\n+    if len(out) == 0 or (rc != 1 and rc != 0):\n+        l = os.environ.get('CUDNN_LIBRARY')\n+        if l is not None and os.path.isfile(l):\n+            return os.path.realpath(l)\n+        return None\n+    files = set()\n+    for fn in out.split('\\n'):\n+        fn = os.path.realpath(fn)  # eliminate symbolic links\n+        if os.path.isfile(fn):\n+            files.add(fn)\n+    if not files:\n+        return None\n+    # Alphabetize the result because the order is non-deterministic otherwise\n+    files = list(sorted(files))\n+    if len(files) == 1:\n+        return files[0]\n+    result = '\\n'.join(files)\n+    return 'Probably one of the following:\\n{}'.format(result)\n+\n+def get_nvidia_smi():\n+    smi = 'nvidia-smi'\n+    return smi\n+\n+def get_torchserve_version():\n+    #fetch the torchserve version from version.txt file\n+    with open(\"ts/version.txt\", 'r') as file:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30"}, "originalPosition": 205}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7b08c95fa3faff8c14c35327f395c2b2c092d4", "author": {"user": {"login": "maaquib", "name": "Aaqib"}}, "url": "https://github.com/pytorch/serve/commit/1d7b08c95fa3faff8c14c35327f395c2b2c092d4", "committedDate": "2020-09-30T17:45:35Z", "message": "Merge branch 'master' into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7b858b5d01a2909e207ae23cb851f3ecf9c151", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/fb7b858b5d01a2909e207ae23cb851f3ecf9c151", "committedDate": "2020-10-14T05:49:57Z", "message": "Merge branch 'master' into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15040851fc762b99456d7cb7e6dba81734202fb2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/15040851fc762b99456d7cb7e6dba81734202fb2", "committedDate": "2020-10-14T08:17:43Z", "message": "incorporated review comments and cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e179014c82153cba18e90f007e2c05ac92f7b9d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/9e179014c82153cba18e90f007e2c05ac92f7b9d", "committedDate": "2020-10-14T08:18:00Z", "message": "Merge branch 'issue_598' of https://github.com/AshwinChafale/serve into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc2632e7ac237363848cb79eaa1c6b0cb6e88bcb", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/fc2632e7ac237363848cb79eaa1c6b0cb6e88bcb", "committedDate": "2020-10-14T08:47:35Z", "message": "change cwd to file path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0c7b02087ab9ce93b2f1042d6fa546e6215acb4", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f0c7b02087ab9ce93b2f1042d6fa546e6215acb4", "committedDate": "2020-10-14T09:09:18Z", "message": "renamed function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTI3MjM5", "url": "https://github.com/pytorch/serve/pull/622#pullrequestreview-516927239", "createdAt": "2020-10-26T15:57:21Z", "commit": {"oid": "f0c7b02087ab9ce93b2f1042d6fa546e6215acb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e488d4e31e1024dd877723343be09bb33b9a99b5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/e488d4e31e1024dd877723343be09bb33b9a99b5", "committedDate": "2020-10-28T04:53:07Z", "message": "Merge branch 'master' into issue_598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1778296389d337a8da81a054735c4314ed324e29", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/1778296389d337a8da81a054735c4314ed324e29", "committedDate": "2020-10-28T05:12:09Z", "message": "added python executable path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDI2MzEy", "url": "https://github.com/pytorch/serve/pull/622#pullrequestreview-519026312", "createdAt": "2020-10-28T19:46:21Z", "commit": {"oid": "1778296389d337a8da81a054735c4314ed324e29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2014, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}