{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzY5NTIx", "number": 458, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozMjoyMFrOEFcLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozMjoyMFrOEFcLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTM5OTI2OnYy", "diffSide": "RIGHT", "path": "docs/model_zoo.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozMjoyMFrOGjoTng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozMjoyMFrOGjoTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxMzcyNg==", "bodyText": "Duplicate lines", "url": "https://github.com/pytorch/serve/pull/458#discussion_r440013726", "createdAt": "2020-06-15T08:32:20Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "docs/model_zoo.md", "diffHunk": "@@ -6,17 +6,35 @@ To propose a model for inclusion, please submit a [pull request](https://github.\n *Special thanks to the [PyTorch](https://pytorch.org/) community whose Model Zoo and Model Examples were used in generating these model archives.*\n \n \n-| Model File | Type | Dataset | Size | Download |\n-| --- | --- | --- | --- | --- |\n-| AlexNet | Image Classification | ImageNet | 216 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/alexnet.mar)|\n-| Densenet161 | Image Classification | ImageNet | 106 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar)|\n-| Resnet18 | Image Classification | ImageNet | 41 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar)|\n-| VGG11 | Image Classification | ImageNet | 471 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/vgg11.mar)|\n-| Squeezenet 1_1 | Image Classification | ImageNet | 4.4 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar)|\n-| MNIST digit classifier | Image Classification | MNIST | 4.3 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/mnist.mar)|\n-| Resnet 152 |Image Classification | ImageNet | 214 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar)\n-| Faster RCNN | Object Detection | COCO | 148 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/fastrcnn.mar)|\n-| MASK RCNN | Object Detection | COCO | 158 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/maskrcnn.mar)|\n-| Text classifier | Text Classification | AG_NEWS | 169 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/my_text_classifier.mar)|\n-| FCN Resenet 101 | Image Segmentation | COCO | 193 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/fcn_resnet_101.mar)|\n-Refer [example](../examples) for more details on above models.\n\\ No newline at end of file\n+| Model | Type | Dataset | Size | Download | Sample Input| Model mode |\n+| --- | --- | --- | --- | --- | --- | --- |\n+| AlexNet | Image Classification | ImageNet | 216 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/alexnet.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| Densenet161 | Image Classification | ImageNet | 106 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| Resnet18 | Image Classification | ImageNet | 41 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| VGG11 | Image Classification | ImageNet | 471 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/vgg11.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| Squeezenet 1_1 | Image Classification | ImageNet | 4.4 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| MNIST digit classifier | Image Classification | MNIST | 4.3 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/mnist.mar) | [0.png](https://github.com/pytorch/serve/blob/master/examples/image_classifier/mnist/test_data/0.png) |Eager|\n+| Resnet 152 |Image Classification | ImageNet | 214 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Eager|\n+| Faster RCNN | Object Detection | COCO | 148 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/fastrcnn.mar) | [persons.jpg](https://github.com/pytorch/serve/blob/master/examples/object_detector/persons.jpg) |Eager|\n+| MASK RCNN | Object Detection | COCO | 158 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/maskrcnn.mar) | [persons.jpg](https://github.com/pytorch/serve/blob/master/examples/object_detector/persons.jpg) |Eager|\n+| Text classifier | Text Classification | AG_NEWS | 169 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/my_text_classifier.mar) | [sample_text.txt](https://github.com/pytorch/serve/blob/master/examples/text_classification/sample_text.txt) |Eager|\n+| FCN Resenet 101 | Image Segmentation | COCO | 193 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/fcn_resnet_101.mar) | [persons.jpg](https://github.com/pytorch/serve/blob/master/examples/image_segmenter/fcn/persons.jpg) |Eager|\n+| AlexNet Scripted | Image Classification | ImageNet | 216 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/alexnet_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| Densenet161 Scripted| Image Classification | ImageNet | 105 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/densenet161_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| Resnet18 Scripted| Image Classification | ImageNet | 42 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-18_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| VGG11 Scripted| Image Classification | ImageNet | 471 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/vgg11_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| Squeezenet 1_1 Scripted | Image Classification | ImageNet | 4.4 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| MNIST digit classifier Scripted | Image Classification | MNIST | 4.3 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/mnist_scripted.mar) | [0.png](https://github.com/pytorch/serve/blob/master/examples/image_classifier/mnist/test_data/0.png) |Torchscripted |\n+| Resnet 152 Scripted |Image Classification | ImageNet | 215 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch_scripted.mar) | [kitten.jpg](https://github.com/pytorch/serve/blob/master/examples/image_classifier/kitten.jpg) |Torchscripted |\n+| Text classifier Scripted | Text Classification | AG_NEWS | 169 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/my_text_classifier_scripted.mar) | [sample_text.txt](https://github.com/pytorch/serve/blob/master/examples/text_classification/sample_text.txt) |Torchscripted |\n+| FCN Resenet 101 Scripted | Image Segmentation | COCO | 193 MB | [.mar](https://torchserve.s3.amazonaws.com/mar_files/fcn_resnet_101_scripted.mar) | [persons.jpg](https://github.com/pytorch/serve/blob/master/examples/image_segmenter/fcn/persons.jpg) |Torchscripted |\n+\n+Refer [example](../examples) for more details on above models.\n+\n+This page lists model archives that are pre-trained and pre-packaged, ready to be served for inference with TorchServe.\n+To propose a model for inclusion, please submit a [pull request](https://github.com/pytorch/serve/pulls).\n+\n+*Special thanks to the [PyTorch](https://pytorch.org/) community whose Model Zoo and Model Examples were used in generating these model archives.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3420261ac049d5b22334e1b20c8aa54241e828a"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1521, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}