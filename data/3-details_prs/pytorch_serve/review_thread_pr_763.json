{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDU2NTk3", "number": 763, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMTo0OVrOE1yiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMzoxNlrOE1ykWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM3OTg4OnYy", "diffSide": "RIGHT", "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/MetricLogEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMTo0OVrOHuQ5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxMzoyN1rOHxEmlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzQ2Nw==", "bodyText": "NIT: Unnecessary newlines", "url": "https://github.com/pytorch/serve/pull/763#discussion_r518273467", "createdAt": "2020-11-05T18:31:49Z", "author": {"login": "maaquib"}, "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/MetricLogEvent.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pytorch.serve.servingsdk.metrics;\n+\n+import java.util.Date;\n+\n+/**\n+ * This interface specifies add and remove listener methods\n+ */\n+public interface MetricLogEvent {\n+    /**\n+     * Get the log level\n+     * @return The log level\n+     */\n+    String getLevel();\n+\n+    /**\n+     * Get the logged message as a  BaseMetric\n+     * @return BaseMetric object\n+     */\n+    BaseMetric getMetric();\n+\n+    /**\n+     * Get the log Timestamp\n+     * @return The Timestamp\n+     */\n+    Date getTimestamp();\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c3e41a45fb70d363ceefdedfd91f6dc1e01758"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNzY4Nw==", "bodyText": "removed.", "url": "https://github.com/pytorch/serve/pull/763#discussion_r521217687", "createdAt": "2020-11-11T09:13:27Z", "author": {"login": "maheshambule"}, "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/MetricLogEvent.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pytorch.serve.servingsdk.metrics;\n+\n+import java.util.Date;\n+\n+/**\n+ * This interface specifies add and remove listener methods\n+ */\n+public interface MetricLogEvent {\n+    /**\n+     * Get the log level\n+     * @return The log level\n+     */\n+    String getLevel();\n+\n+    /**\n+     * Get the logged message as a  BaseMetric\n+     * @return BaseMetric object\n+     */\n+    BaseMetric getMetric();\n+\n+    /**\n+     * Get the log Timestamp\n+     * @return The Timestamp\n+     */\n+    Date getTimestamp();\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzQ2Nw=="}, "originalCommit": {"oid": "d5c3e41a45fb70d363ceefdedfd91f6dc1e01758"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM4NDg4OnYy", "diffSide": "RIGHT", "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/DimensionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMzoxNlrOHuQ87g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToyMToyMVrOHxE46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDI4Ng==", "bodyText": "NIT: Not quite clear where DimensionRegistry and InbuiltMetricsRegistry would be used. Can you elaborate?", "url": "https://github.com/pytorch/serve/pull/763#discussion_r518274286", "createdAt": "2020-11-05T18:33:16Z", "author": {"login": "maaquib"}, "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.pytorch.serve.servingsdk.metrics;\n+\n+/**\n+ * This is a registry for different metric dimensions and their values.\n+ * This is not exhaustive list. Dimension can be added to Metric without adding it to this Registry.\n+ */\n+public class DimensionRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c3e41a45fb70d363ceefdedfd91f6dc1e01758"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMjM3OQ==", "bodyText": "The purpose of these registries is to list and refer all the Metrics/Dimensions available in TorchServe in one place. It is expected that whenever a new metric/dimension gets added in TorchServe, a corresponding entry should be made here. The Plugin writers then should be able to refer to this list, and will not have to worry about the spelling of metric, duplicate metric name, etc. However, currently, it is not mandatory to make an entry here.  I have updated the Doc String to reflect this comment.", "url": "https://github.com/pytorch/serve/pull/763#discussion_r521222379", "createdAt": "2020-11-11T09:21:21Z", "author": {"login": "maheshambule"}, "path": "serving-sdk/src/main/java/org/pytorch/serve/servingsdk/metrics/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.pytorch.serve.servingsdk.metrics;\n+\n+/**\n+ * This is a registry for different metric dimensions and their values.\n+ * This is not exhaustive list. Dimension can be added to Metric without adding it to this Registry.\n+ */\n+public class DimensionRegistry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDI4Ng=="}, "originalCommit": {"oid": "d5c3e41a45fb70d363ceefdedfd91f6dc1e01758"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1460, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}