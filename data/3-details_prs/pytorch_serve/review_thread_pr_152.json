{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTI5NjYw", "number": 152, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MjozMVrOD4KnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NToxMVrOD4Kqqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIwNzE4OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/SnapshotManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MjozMVrOGO2IHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MjozMVrOGO2IHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDA2Mg==", "bodyText": "move \"marName\" to a global name", "url": "https://github.com/pytorch/serve/pull/152#discussion_r418220062", "createdAt": "2020-04-30T18:52:31Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/SnapshotManager.java", "diffHunk": "@@ -170,12 +144,12 @@ private boolean validate(Snapshot snapshot) throws IOException, InvalidSnapshotE\n         logger.info(\"Validating snapshot {}\", snapshot.getName());\n         String modelStore = configManager.getModelStore();\n \n-        Map<String, Map<String, ModelSnapshot>> models = snapshot.getModels();\n-        for (Map.Entry<String, Map<String, ModelSnapshot>> modelMap : models.entrySet()) {\n+        Map<String, Map<String, JsonObject>> models = snapshot.getModels();\n+        for (Map.Entry<String, Map<String, JsonObject>> modelMap : models.entrySet()) {\n             String modelName = modelMap.getKey();\n-            for (Map.Entry<String, ModelSnapshot> versionModel : modelMap.getValue().entrySet()) {\n+            for (Map.Entry<String, JsonObject> versionModel : modelMap.getValue().entrySet()) {\n                 String versionId = versionModel.getKey();\n-                String marName = versionModel.getValue().getMarName();\n+                String marName = versionModel.getValue().get(\"marName\").getAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95808a31aefdb85a2264d3998c927cc874749814"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIwOTkwOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MzoyM1rOGO2KAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MzoyM1rOGO2KAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDU0NQ==", "bodyText": "In general, keep all these const string names to a global location.\nSame here. const strings / prop names to either global location or use getter methods.", "url": "https://github.com/pytorch/serve/pull/152#discussion_r418220545", "createdAt": "2020-04-30T18:53:23Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +50,28 @@ public Model(ModelArchive modelArchive, int queueSize) {\n                         this.modelArchive.getModelName(), this.modelArchive.getModelVersion());\n     }\n \n+    public JsonObject getModelState(boolean isDefaultVersion) {\n+\n+        JsonObject modelInfo = new JsonObject();\n+        modelInfo.addProperty(\"defaultVersion\", isDefaultVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95808a31aefdb85a2264d3998c927cc874749814"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIxMzQzOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDoyM1rOGO2MIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NDoyM1rOGO2MIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMTA4OQ==", "bodyText": "Same here. const strings / prop names to either global location or use getter methods.", "url": "https://github.com/pytorch/serve/pull/152#discussion_r418221089", "createdAt": "2020-04-30T18:54:23Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -71,6 +73,29 @@ public ModelArchive registerModel(String url, String defaultModelName)\n                 defaultModelName);\n     }\n \n+    public void registerAndUpdateModel(String modelName, JsonObject modelInfo)\n+            throws ModelException, IOException {\n+\n+        boolean defaultVersion = modelInfo.get(\"defaultVersion\").getAsBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95808a31aefdb85a2264d3998c927cc874749814"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIxNjEwOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/SnapshotTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NToxMVrOGO2N1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1NToxMVrOGO2N1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMTUyNg==", "bodyText": "Same here. const strings / prop names to either global location or use getter methods.", "url": "https://github.com/pytorch/serve/pull/152#discussion_r418221526", "createdAt": "2020-04-30T18:55:11Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/test/java/org/pytorch/serve/SnapshotTest.java", "diffHunk": "@@ -368,11 +368,11 @@ private void updateSnapshot(Properties prop) {\n         Snapshot snapshot = GSON.fromJson(prop.getProperty(\"model_snapshot\"), Snapshot.class);\n         snapshot.setName(\"snapshot\");\n         snapshot.setCreated(123456);\n-        for (Map.Entry<String, Map<String, ModelSnapshot>> modelMap :\n+        for (Map.Entry<String, Map<String, JsonObject>> modelMap :\n                 snapshot.getModels().entrySet()) {\n-            for (Map.Entry<String, ModelSnapshot> versionModel : modelMap.getValue().entrySet()) {\n-                versionModel.getValue().setMinWorkers(4);\n-                versionModel.getValue().setMaxWorkers(4);\n+            for (Map.Entry<String, JsonObject> versionModel : modelMap.getValue().entrySet()) {\n+                versionModel.getValue().addProperty(\"minWorkers\", 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95808a31aefdb85a2264d3998c927cc874749814"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1710, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}