{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MDc0MDAw", "number": 506, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNjozN1rOEfSLNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo1MTowM1rOEfS27g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjM5MDk1OnYy", "diffSide": "RIGHT", "path": ".circleci/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNjozN1rOHLdqBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMDoxOVrOHL9_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MjI3Nw==", "bodyText": "Can you move this above. As this is going to be the most frequently used commands.", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481782277", "createdAt": "2020-09-02T06:26:37Z", "author": {"login": "dhanainme"}, "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Pytorch Serve CircleCI build\n+TorchServe uses CircleCI for builds. This folder contains the config and scripts that are needed for CircleCI.\n+\n+## config.yml\n+_config.yml_ contains TorchServe's build logic which will be used by CircleCI.\n+\n+## Workflows and Jobs\n+Currently, following _workflows_ are available -\n+1. smoke\n+2. nightly\n+3. weekly\n+\n+Following _jobs_ are executed under each workflow -\n+1. **build** : Builds _frontend/model-server.jar_ and executes tests from gradle\n+2. **modelarchiver** : Builds and tests modelarchiver module\n+3. **python-tests** : Executes pytests from _serve/tests/unit_tests/_\n+4. **benchmark** : Executes latency benchmark using resnet-18 model\n+5. (NEW!) **api-tests** : Executes newman test suite for API testing\n+\n+Following _executors_ are available for job execution -\n+1. py36\n+\n+> Please check the _workflows_, _jobs_ and _executors_ section in _config.yml_ for an up to date list\n+\n+## scripts\n+Instead of using inline commands inside _config.yml_, job steps are configured as shell scripts.  \n+This is easier for maintenance and reduces chances of error in config.yml\n+\n+## images\n+TorchServe uses customized docker image for its CircleCI build.    \n+We have published the docker image on docker hub for code build\n+* prashantsail/pytorch-serve-build\n+\n+Following file in the _images_ folder is used to create the docker image\n+* Dockerfile - Dockerfile for prashantsail/pytorch-serve-build\n+\n+## Local CircleCI cli\n+To make it easy for developers to debug build issues locally, TorchServe supports CircleCI cli for running a job in a container on your machine.\n+\n+#### Dependencies\n+1. CircleCI cli ([Quick Install](https://circleci.com/docs/2.0/local-cli/#quick-installation))\n+2. PyYAML (pip install PyYaml)\n+3. docker (installed and running)\n+\n+#### Command\n+Developers can use the following command to execute CircleCI job:  \n+**_./run_circleci_tests.py <workflow_name> -j <job_name> -e <executor_name>**\n+\n+- _workflow_name_  \n+This is a madatory parameter\n+\n+- _-j, --job job_name_  \n+If specified, executes only the specified job name (along with the required parents).  \n+If not specified, all jobs in the workflow are executed sequentially.  \n+\n+- _-e, --executor executor_name_  \n+If specified, job is executed only on the specified executor(docker image).  \n+If not specified, job is executed on all the available executors.  \n+\n+```bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMTk2OQ==", "bodyText": "As requested, moved \"Local CircleCI cli\" section to top of readme", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482311969", "createdAt": "2020-09-02T19:00:19Z", "author": {"login": "prashantsail"}, "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Pytorch Serve CircleCI build\n+TorchServe uses CircleCI for builds. This folder contains the config and scripts that are needed for CircleCI.\n+\n+## config.yml\n+_config.yml_ contains TorchServe's build logic which will be used by CircleCI.\n+\n+## Workflows and Jobs\n+Currently, following _workflows_ are available -\n+1. smoke\n+2. nightly\n+3. weekly\n+\n+Following _jobs_ are executed under each workflow -\n+1. **build** : Builds _frontend/model-server.jar_ and executes tests from gradle\n+2. **modelarchiver** : Builds and tests modelarchiver module\n+3. **python-tests** : Executes pytests from _serve/tests/unit_tests/_\n+4. **benchmark** : Executes latency benchmark using resnet-18 model\n+5. (NEW!) **api-tests** : Executes newman test suite for API testing\n+\n+Following _executors_ are available for job execution -\n+1. py36\n+\n+> Please check the _workflows_, _jobs_ and _executors_ section in _config.yml_ for an up to date list\n+\n+## scripts\n+Instead of using inline commands inside _config.yml_, job steps are configured as shell scripts.  \n+This is easier for maintenance and reduces chances of error in config.yml\n+\n+## images\n+TorchServe uses customized docker image for its CircleCI build.    \n+We have published the docker image on docker hub for code build\n+* prashantsail/pytorch-serve-build\n+\n+Following file in the _images_ folder is used to create the docker image\n+* Dockerfile - Dockerfile for prashantsail/pytorch-serve-build\n+\n+## Local CircleCI cli\n+To make it easy for developers to debug build issues locally, TorchServe supports CircleCI cli for running a job in a container on your machine.\n+\n+#### Dependencies\n+1. CircleCI cli ([Quick Install](https://circleci.com/docs/2.0/local-cli/#quick-installation))\n+2. PyYAML (pip install PyYaml)\n+3. docker (installed and running)\n+\n+#### Command\n+Developers can use the following command to execute CircleCI job:  \n+**_./run_circleci_tests.py <workflow_name> -j <job_name> -e <executor_name>**\n+\n+- _workflow_name_  \n+This is a madatory parameter\n+\n+- _-j, --job job_name_  \n+If specified, executes only the specified job name (along with the required parents).  \n+If not specified, all jobs in the workflow are executed sequentially.  \n+\n+- _-e, --executor executor_name_  \n+If specified, job is executed only on the specified executor(docker image).  \n+If not specified, job is executed on all the available executors.  \n+\n+```bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MjI3Nw=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjM5MzU4OnYy", "diffSide": "RIGHT", "path": ".circleci/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNjo1N1rOHLdrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMjoxMlrOHL-F4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MjY3Mg==", "bodyText": "Maintain existing names - torch-serve-build-gpu / torch-serve-build-cpu / torch-serve-regression-test-cpu / torch-serve-regression-test-gpu / torch-serve-regression-performance-test-cpu / torch-serve-regression-performance-test-gpu", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481782672", "createdAt": "2020-09-02T06:26:57Z", "author": {"login": "dhanainme"}, "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Pytorch Serve CircleCI build\n+TorchServe uses CircleCI for builds. This folder contains the config and scripts that are needed for CircleCI.\n+\n+## config.yml\n+_config.yml_ contains TorchServe's build logic which will be used by CircleCI.\n+\n+## Workflows and Jobs\n+Currently, following _workflows_ are available -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMzY5Nw==", "bodyText": "Workflow names revised to sanity, regression, performance", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482313697", "createdAt": "2020-09-02T19:02:12Z", "author": {"login": "prashantsail"}, "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Pytorch Serve CircleCI build\n+TorchServe uses CircleCI for builds. This folder contains the config and scripts that are needed for CircleCI.\n+\n+## config.yml\n+_config.yml_ contains TorchServe's build logic which will be used by CircleCI.\n+\n+## Workflows and Jobs\n+Currently, following _workflows_ are available -", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MjY3Mg=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjM5NjI5OnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNzoyMVrOHLdtaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMjo1NVrOHL-IiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MzE0NQ==", "bodyText": "Move this to ECR & Use Credentials as env variables - https://github.com/pytorch/pytorch/blob/master/.circleci/config.yml", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481783145", "createdAt": "2020-09-02T06:27:21Z", "author": {"login": "dhanainme"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNDM3Ng==", "bodyText": "Moved docker images from dockerhub to AWS ECR", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482314376", "createdAt": "2020-09-02T19:02:55Z", "author": {"login": "prashantsail"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4MzE0NQ=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQwNzM1OnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyOTo1NlrOHLd0cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMzozN1rOHL-LAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDk0NQ==", "bodyText": "Make the env names consistent with https://github.com/pytorch/pytorch/blob/master/.circleci/config.yml", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481784945", "createdAt": "2020-09-02T06:29:56Z", "author": {"login": "dhanainme"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  conda38:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNTAxMA==", "bodyText": "executor names like torchserve\nexample: ubuntu18-pythn36-cpu-docker", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482315010", "createdAt": "2020-09-02T19:03:37Z", "author": {"login": "prashantsail"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  conda38:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDk0NQ=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQwOTYzOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozMDoyNFrOHLd16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNDowN1rOHL-Mlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NTMyMw==", "bodyText": "_JAVA_OPTIONS may be redundant.", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481785323", "createdAt": "2020-09-02T06:30:24Z", "author": {"login": "dhanainme"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  conda38:\n+    docker:\n+      - image: shivamshriwas/torchserve:conda38\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  pyenv37:\n+    docker:\n+      - image: shivamshriwas/torchserve:pyenv37\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  venv36:\n+    docker:\n+      - image: shivamshriwas/torchserve:venv36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNTQxNQ==", "bodyText": "Removed redundant _JAVA_OPTIONS", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482315415", "createdAt": "2020-09-02T19:04:07Z", "author": {"login": "prashantsail"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,74 +1,298 @@\n version: 2.1\n \n+\n+executors:\n+  py36:\n+    docker:\n+      - image: shivamshriwas/torchserve:py36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  conda38:\n+    docker:\n+      - image: shivamshriwas/torchserve:conda38\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  pyenv37:\n+    docker:\n+      - image: shivamshriwas/torchserve:pyenv37\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"\n+  venv36:\n+    docker:\n+      - image: shivamshriwas/torchserve:venv36\n+    environment:\n+      _JAVA_OPTIONS: \"-Xmx2048m\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NTMyMw=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQ1OTUyOnYy", "diffSide": "RIGHT", "path": ".circleci/scripts/linux_test_benchmark.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0MTozOVrOHLeVsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowODo0NVrOHL-cig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MzQ1OA==", "bodyText": "Can you please create an issue to track the removal of redundant scripts.", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481793458", "createdAt": "2020-09-02T06:41:39Z", "author": {"login": "dhanainme"}, "path": ".circleci/scripts/linux_test_benchmark.sh", "diffHunk": "@@ -0,0 +1,30 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxOTQ5OA==", "bodyText": "I will create an issue and all relevant details as soon as this PR is merged", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482319498", "createdAt": "2020-09-02T19:08:45Z", "author": {"login": "prashantsail"}, "path": ".circleci/scripts/linux_test_benchmark.sh", "diffHunk": "@@ -0,0 +1,30 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MzQ1OA=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQ3NjIxOnYy", "diffSide": "RIGHT", "path": ".circleci/images/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0NToxOVrOHLegVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNDo0NVrOHL-PCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjE4MQ==", "bodyText": "Can you document the build steps for this Docker file", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481796181", "createdAt": "2020-09-02T06:45:19Z", "author": {"login": "dhanainme"}, "path": ".circleci/images/Dockerfile", "diffHunk": "@@ -0,0 +1,100 @@\n+ARG BASE_IMAGE=ubuntu:18.04\n+ARG ENV_TYPE=python\n+FROM ${BASE_IMAGE} AS compile-image\n+\n+ENV PYTHONUNBUFFERED TRUE\n+\n+RUN DEBIAN_FRONTEND=noninteractive \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        build-essential \\\n+        ca-certificates\\\n+        curl \\\n+        git \\\n+        openjdk-11-jdk \\\n+    && curl -sL https://deb.nodesource.com/setup_14.x | bash - \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        nodejs\n+\n+FROM compile-image as conda38-image", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjA0Mg==", "bodyText": "Added comments in the docker file and also updated Readme for image creation commands with appropriate examples", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482316042", "createdAt": "2020-09-02T19:04:45Z", "author": {"login": "prashantsail"}, "path": ".circleci/images/Dockerfile", "diffHunk": "@@ -0,0 +1,100 @@\n+ARG BASE_IMAGE=ubuntu:18.04\n+ARG ENV_TYPE=python\n+FROM ${BASE_IMAGE} AS compile-image\n+\n+ENV PYTHONUNBUFFERED TRUE\n+\n+RUN DEBIAN_FRONTEND=noninteractive \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        build-essential \\\n+        ca-certificates\\\n+        curl \\\n+        git \\\n+        openjdk-11-jdk \\\n+    && curl -sL https://deb.nodesource.com/setup_14.x | bash - \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        nodejs\n+\n+FROM compile-image as conda38-image", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjE4MQ=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQ3ODc5OnYy", "diffSide": "RIGHT", "path": ".circleci/images/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0NTo1OVrOHLeiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNTo1MlrOHL-SuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjY0Nw==", "bodyText": "Can you pin versions", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481796647", "createdAt": "2020-09-02T06:45:59Z", "author": {"login": "dhanainme"}, "path": ".circleci/images/Dockerfile", "diffHunk": "@@ -0,0 +1,100 @@\n+ARG BASE_IMAGE=ubuntu:18.04\n+ARG ENV_TYPE=python\n+FROM ${BASE_IMAGE} AS compile-image\n+\n+ENV PYTHONUNBUFFERED TRUE\n+\n+RUN DEBIAN_FRONTEND=noninteractive \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        build-essential \\\n+        ca-certificates\\\n+        curl \\\n+        git \\\n+        openjdk-11-jdk \\\n+    && curl -sL https://deb.nodesource.com/setup_14.x | bash - \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        nodejs\n+\n+FROM compile-image as conda38-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV PATH=/miniconda/bin:${PATH}\n+RUN curl -LO http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n+        && bash Miniconda3-latest-Linux-x86_64.sh -p /miniconda -b \\\n+        && rm Miniconda3-latest-Linux-x86_64.sh \\\n+        && rm -rf /var/lib/apt/lists/* \\\n+        && conda install -y conda-build\n+\n+FROM compile-image as py36-image\n+ENV PATH ~/.local/bin/:$PATH\n+RUN apt-get install --no-install-recommends -y \\\n+        python3 \\\n+        python3-dev \\\n+        python3-pip \\\n+        python3-setuptools \\\n+        python3-wheel \\\n+    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n+    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\n+\n+FROM compile-image as pyenv37-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV PYENV_ROOT $HOME/.pyenv\n+ENV PATH=\"${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}\"\n+RUN apt-get install --no-install-recommends -y  libssl-dev zlib1g-dev libbz2-dev libreadline-dev \\\n+        libsqlite3-dev libxml2-dev libxmlsec1-dev libffi-dev\\\n+    && curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash \\\n+    && pyenv install 3.7.0 \\\n+    && pyenv global 3.7.0\n+\n+FROM compile-image as venv36-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV VIRTUAL_ENV=/opt/venv\n+ENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n+RUN apt-get install --no-install-recommends -y \\\n+        python3 \\\n+        python3-dev \\\n+        python3-pip \\\n+        python3-setuptools \\\n+        python3-wheel \\\n+        python3-venv\\\n+    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n+    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\\\n+    && python3 -m venv $VIRTUAL_ENV\n+\n+\n+FROM ${ENV_TYPE}-image AS final-image\n+ARG ENV_TYPE\n+# Install jmeter for Benchmark\n+RUN cd /opt \\\n+    && curl https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.3.tgz | tar -xz\\\n+    && cd apache-jmeter-5.3 \\\n+    && ln -s /opt/apache-jmeter-5.3/bin/jmeter /usr/local/bin/jmeter \\\n+    && curl --location -o lib/ext/jmeter-plugins-manager-1.4.jar https://jmeter-plugins.org/get/ \\\n+    && curl --location -o lib/cmdrunner-2.2.jar http://search.maven.org/remotecontent?filepath=kg/apc/cmdrunner/2.2/cmdrunner-2.2.jar \\\n+    && java -cp lib/ext/jmeter-plugins-manager-1.4.jar org.jmeterplugins.repository.PluginManagerCMDInstaller \\\n+    && bin/PluginsManagerCMD.sh install jpgc-synthesis=2.1,jpgc-filterresults=2.1,jpgc-mergeresults=2.1,jpgc-cmd=2.1,jpgc-perfmon=2.1\n+\n+# Install API tests dependencies\n+RUN npm install -g \\\n+        newman \\\n+        newman-reporter-html \\\n+        markdown-link-check\n+\n+# Install Torchserve, Pytest, Regression and Benchmark Dependencies\n+RUN pip install --no-cache-dir \\\n+        future \\\n+        mock \\\n+        pandas \\\n+        pillow \\\n+        psutil \\\n+        pylint==2.4.4 \\\n+        pytest \\\n+        pytest-cov \\\n+        pytest-mock \\\n+        sentencepiece==0.1.91 \\\n+        torch \\\n+        torchtext \\\n+        torchvision \\\n+        transformers\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjk4NA==", "bodyText": "Added versions for all torch packages", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482316984", "createdAt": "2020-09-02T19:05:52Z", "author": {"login": "prashantsail"}, "path": ".circleci/images/Dockerfile", "diffHunk": "@@ -0,0 +1,100 @@\n+ARG BASE_IMAGE=ubuntu:18.04\n+ARG ENV_TYPE=python\n+FROM ${BASE_IMAGE} AS compile-image\n+\n+ENV PYTHONUNBUFFERED TRUE\n+\n+RUN DEBIAN_FRONTEND=noninteractive \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        build-essential \\\n+        ca-certificates\\\n+        curl \\\n+        git \\\n+        openjdk-11-jdk \\\n+    && curl -sL https://deb.nodesource.com/setup_14.x | bash - \\\n+    && apt-get update \\\n+    && apt-get install --no-install-recommends -y \\\n+        nodejs\n+\n+FROM compile-image as conda38-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV PATH=/miniconda/bin:${PATH}\n+RUN curl -LO http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n+        && bash Miniconda3-latest-Linux-x86_64.sh -p /miniconda -b \\\n+        && rm Miniconda3-latest-Linux-x86_64.sh \\\n+        && rm -rf /var/lib/apt/lists/* \\\n+        && conda install -y conda-build\n+\n+FROM compile-image as py36-image\n+ENV PATH ~/.local/bin/:$PATH\n+RUN apt-get install --no-install-recommends -y \\\n+        python3 \\\n+        python3-dev \\\n+        python3-pip \\\n+        python3-setuptools \\\n+        python3-wheel \\\n+    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n+    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\n+\n+FROM compile-image as pyenv37-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV PYENV_ROOT $HOME/.pyenv\n+ENV PATH=\"${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}\"\n+RUN apt-get install --no-install-recommends -y  libssl-dev zlib1g-dev libbz2-dev libreadline-dev \\\n+        libsqlite3-dev libxml2-dev libxmlsec1-dev libffi-dev\\\n+    && curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash \\\n+    && pyenv install 3.7.0 \\\n+    && pyenv global 3.7.0\n+\n+FROM compile-image as venv36-image\n+ENV PATH ~/.local/bin/:$PATH\n+ENV VIRTUAL_ENV=/opt/venv\n+ENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n+RUN apt-get install --no-install-recommends -y \\\n+        python3 \\\n+        python3-dev \\\n+        python3-pip \\\n+        python3-setuptools \\\n+        python3-wheel \\\n+        python3-venv\\\n+    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n+    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\\\n+    && python3 -m venv $VIRTUAL_ENV\n+\n+\n+FROM ${ENV_TYPE}-image AS final-image\n+ARG ENV_TYPE\n+# Install jmeter for Benchmark\n+RUN cd /opt \\\n+    && curl https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.3.tgz | tar -xz\\\n+    && cd apache-jmeter-5.3 \\\n+    && ln -s /opt/apache-jmeter-5.3/bin/jmeter /usr/local/bin/jmeter \\\n+    && curl --location -o lib/ext/jmeter-plugins-manager-1.4.jar https://jmeter-plugins.org/get/ \\\n+    && curl --location -o lib/cmdrunner-2.2.jar http://search.maven.org/remotecontent?filepath=kg/apc/cmdrunner/2.2/cmdrunner-2.2.jar \\\n+    && java -cp lib/ext/jmeter-plugins-manager-1.4.jar org.jmeterplugins.repository.PluginManagerCMDInstaller \\\n+    && bin/PluginsManagerCMD.sh install jpgc-synthesis=2.1,jpgc-filterresults=2.1,jpgc-mergeresults=2.1,jpgc-cmd=2.1,jpgc-perfmon=2.1\n+\n+# Install API tests dependencies\n+RUN npm install -g \\\n+        newman \\\n+        newman-reporter-html \\\n+        markdown-link-check\n+\n+# Install Torchserve, Pytest, Regression and Benchmark Dependencies\n+RUN pip install --no-cache-dir \\\n+        future \\\n+        mock \\\n+        pandas \\\n+        pillow \\\n+        psutil \\\n+        pylint==2.4.4 \\\n+        pytest \\\n+        pytest-cov \\\n+        pytest-mock \\\n+        sentencepiece==0.1.91 \\\n+        torch \\\n+        torchtext \\\n+        torchvision \\\n+        transformers\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NjY0Nw=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQ5MzgyOnYy", "diffSide": "RIGHT", "path": "CODE_OF_CONDUCT.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0OToxNFrOHLesHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNjoxNFrOHL-T6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5OTE5OQ==", "bodyText": "Pls confirm that this is not an issue.", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481799199", "createdAt": "2020-09-02T06:49:14Z", "author": {"login": "dhanainme"}, "path": "CODE_OF_CONDUCT.md", "diffHunk": "@@ -55,7 +55,7 @@ a project may be further defined and clarified by project maintainers.\n ## Enforcement\n \n Instances of abusive, harassing, or otherwise unacceptable behavior may be\n-reported by contacting the project team at <conduct@pytorch.org>. All\n+reported by contacting the project team at \\<conduct@pytorch.org\\>. All\n complaints will be reviewed and investigated and will result in a response that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNzI5MQ==", "bodyText": "Reverted this unintended change", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482317291", "createdAt": "2020-09-02T19:06:14Z", "author": {"login": "prashantsail"}, "path": "CODE_OF_CONDUCT.md", "diffHunk": "@@ -55,7 +55,7 @@ a project may be further defined and clarified by project maintainers.\n ## Enforcement\n \n Instances of abusive, harassing, or otherwise unacceptable behavior may be\n-reported by contacting the project team at <conduct@pytorch.org>. All\n+reported by contacting the project team at \\<conduct@pytorch.org\\>. All\n complaints will be reviewed and investigated and will result in a response that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5OTE5OQ=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjUwMjg2OnYy", "diffSide": "RIGHT", "path": "run_circleci_tests.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo1MTowM1rOHLexoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNjo1OFrOHL-Weg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwMDYwOQ==", "bodyText": "Pls move then to a function.", "url": "https://github.com/pytorch/serve/pull/506#discussion_r481800609", "createdAt": "2020-09-02T06:51:03Z", "author": {"login": "dhanainme"}, "path": "run_circleci_tests.py", "diffHunk": "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python\n+\"\"\"\n+- This script helps to execute circleci jobs in a container on developer's local machine.\n+- The script accepts workflow(mandatory), job(optional) and executor(optional) arguments.\n+- The script used circleci cli's process command to generate a processed yaml.\n+- The processed yaml, is parsed and tweaked to generate a new transformed yaml.\n+- The transformed yaml contains a single job, which is merged and ordered list of job steps\n+from the specified and required parent jobs.\n+\"\"\"\n+\n+# Make sure you have following dependencies installed on your local machine\n+# 1. PyYAML (pip install PyYaml)\n+# 2. CircleCI cli from - https://circleci.com/docs/2.0/local-cli/#installation\n+# 3. docker\n+\n+from collections import OrderedDict\n+from functools import reduce\n+\n+import subprocess\n+import sys\n+import copy\n+import argparse\n+import yaml\n+\n+parser = argparse.ArgumentParser(description='Execute circleci jobs in a container \\\n+                                                on your local machine')\n+parser.add_argument('workflow', type=str, help='Workflow name from config.yml')\n+parser.add_argument('-j', '--job', type=str, help='Job name from config.yml')\n+parser.add_argument('-e', '--executor', type=str, help='Executor name from config.yml')\n+args = parser.parse_args()\n+\n+workflow = args.workflow\n+job = args.job\n+executor = args.executor\n+\n+CCI_CONFIG_FILE = '.circleci/config.yml'\n+PROCESSED_FILE = '.circleci/processed.yml'\n+XFORMED_FILE = '.circleci/xformed.yml'\n+CCI_CONFIG = {}\n+PROCESSED_CONFIG = {}\n+XFORMED_CONFIG = {}\n+XFORMED_JOB_NAME = 'ts_xformed_job'\n+BLACKLISTED_STEPS = ['persist_to_workspace', 'attach_workspace', 'store_artifacts']\n+\n+# Read CircleCI's config\n+with open(CCI_CONFIG_FILE) as fstream:\n+    try:\n+        CCI_CONFIG = yaml.safe_load(fstream)\n+    except yaml.YAMLError as err:\n+        print(err)\n+\n+# Create processed YAML using circleci cli's 'config process' commands\n+PROCESS_CONFIG_CMD = 'circleci config process {} > {}'.format(CCI_CONFIG_FILE, PROCESSED_FILE)\n+print(\"Executing command : \", PROCESS_CONFIG_CMD)\n+subprocess.check_call(PROCESS_CONFIG_CMD, shell=True)\n+\n+# Read the processed config\n+with open(PROCESSED_FILE) as fstream:\n+    try:\n+        PROCESSED_CONFIG = yaml.safe_load(fstream)\n+    except yaml.YAMLError as err:\n+        print(err)\n+\n+# All executors available in the config file\n+available_executors = list(CCI_CONFIG['executors'])\n+\n+# All jobs available under the specified workflow\n+jobs_in_workflow = PROCESSED_CONFIG['workflows'][workflow]['jobs']\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNzk0Ng==", "bodyText": "Refactored the code into modular functions", "url": "https://github.com/pytorch/serve/pull/506#discussion_r482317946", "createdAt": "2020-09-02T19:06:58Z", "author": {"login": "prashantsail"}, "path": "run_circleci_tests.py", "diffHunk": "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python\n+\"\"\"\n+- This script helps to execute circleci jobs in a container on developer's local machine.\n+- The script accepts workflow(mandatory), job(optional) and executor(optional) arguments.\n+- The script used circleci cli's process command to generate a processed yaml.\n+- The processed yaml, is parsed and tweaked to generate a new transformed yaml.\n+- The transformed yaml contains a single job, which is merged and ordered list of job steps\n+from the specified and required parent jobs.\n+\"\"\"\n+\n+# Make sure you have following dependencies installed on your local machine\n+# 1. PyYAML (pip install PyYaml)\n+# 2. CircleCI cli from - https://circleci.com/docs/2.0/local-cli/#installation\n+# 3. docker\n+\n+from collections import OrderedDict\n+from functools import reduce\n+\n+import subprocess\n+import sys\n+import copy\n+import argparse\n+import yaml\n+\n+parser = argparse.ArgumentParser(description='Execute circleci jobs in a container \\\n+                                                on your local machine')\n+parser.add_argument('workflow', type=str, help='Workflow name from config.yml')\n+parser.add_argument('-j', '--job', type=str, help='Job name from config.yml')\n+parser.add_argument('-e', '--executor', type=str, help='Executor name from config.yml')\n+args = parser.parse_args()\n+\n+workflow = args.workflow\n+job = args.job\n+executor = args.executor\n+\n+CCI_CONFIG_FILE = '.circleci/config.yml'\n+PROCESSED_FILE = '.circleci/processed.yml'\n+XFORMED_FILE = '.circleci/xformed.yml'\n+CCI_CONFIG = {}\n+PROCESSED_CONFIG = {}\n+XFORMED_CONFIG = {}\n+XFORMED_JOB_NAME = 'ts_xformed_job'\n+BLACKLISTED_STEPS = ['persist_to_workspace', 'attach_workspace', 'store_artifacts']\n+\n+# Read CircleCI's config\n+with open(CCI_CONFIG_FILE) as fstream:\n+    try:\n+        CCI_CONFIG = yaml.safe_load(fstream)\n+    except yaml.YAMLError as err:\n+        print(err)\n+\n+# Create processed YAML using circleci cli's 'config process' commands\n+PROCESS_CONFIG_CMD = 'circleci config process {} > {}'.format(CCI_CONFIG_FILE, PROCESSED_FILE)\n+print(\"Executing command : \", PROCESS_CONFIG_CMD)\n+subprocess.check_call(PROCESS_CONFIG_CMD, shell=True)\n+\n+# Read the processed config\n+with open(PROCESSED_FILE) as fstream:\n+    try:\n+        PROCESSED_CONFIG = yaml.safe_load(fstream)\n+    except yaml.YAMLError as err:\n+        print(err)\n+\n+# All executors available in the config file\n+available_executors = list(CCI_CONFIG['executors'])\n+\n+# All jobs available under the specified workflow\n+jobs_in_workflow = PROCESSED_CONFIG['workflows'][workflow]['jobs']\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwMDYwOQ=="}, "originalCommit": {"oid": "61567feba7066b7b4b02766ab40be727ff63335e"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1558, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}