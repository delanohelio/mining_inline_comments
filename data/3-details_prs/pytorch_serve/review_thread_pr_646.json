{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyOTA4NTkx", "number": 646, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjozNzo1N1rOEdfoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0Mjo1OVrOEhzqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzYyMzYwOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjozNzo1N1rOHIrXcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjozNzo1N1rOHIrXcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTE3MQ==", "bodyText": "This test case only tests the \"mar file already exists\" scenario. Please add test cases for the following use cases:\n\nValid local mar file URL, validate that the mar file correctly gets copied to the model-store.\nURL path does not exist", "url": "https://github.com/pytorch/serve/pull/646#discussion_r478861171", "createdAt": "2020-08-28T06:37:57Z", "author": {"login": "harshbafna"}, "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -91,4 +91,10 @@ public void testMalformURL() throws ModelException, IOException, InterruptedExce\n         ModelArchive.downloadModel(\n                 modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n+\n+    @Test(expectedExceptions = DownloadModelException.class)\n+    public void testMalformLocalURL() throws ModelException, IOException, InterruptedException {\n+        String modelStore = \"src/test/resources/models\";\n+        ModelArchive.downloadModel(modelStore, \"file://\" + modelStore + \"/mnist1.mar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d1016d47987acd8db1e27cb0967a70bb3882c5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQwMjIwOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo0Nzo1MVrOHM_aLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo0Nzo1MVrOHM_aLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4Mzg1Mg==", "bodyText": "Make the test cases sequential.", "url": "https://github.com/pytorch/serve/pull/646#discussion_r483383852", "createdAt": "2020-09-04T04:47:51Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQxMDc5OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo1Mjo0N1rOHM_e-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNzo1N1rOHN7K4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NTA4MQ==", "bodyText": "Ideally, we should never encounter this exception. If we do, that means something went wrong. It would be better to add the exception with throws.", "url": "https://github.com/pytorch/serve/pull/646#discussion_r483385081", "createdAt": "2020-09-04T04:52:47Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})\n+    public void testLoadModelFromFileURI() throws InterruptedException {\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        String source = configManager.getModelStore() + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        String fileUrl = \"\";\n+        try {\n+            FileUtils.copyFile(sourceFile, destinationFile);\n+            fileUrl = \"file://\" + parent + \"/modelarchive/mnist1.mar\";\n+        } catch (Exception e) {\n+            Assert.assertEquals(e.getClass(), IOException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2Mjk3Ng==", "bodyText": "Please see inline comments.\nThe test case for URL path does not exist is still missing in both ModelArchiveTest and ModelServerTest\n\nIn ModelArchiveTest.java - We already have a test to check invalid URL - testMalformLocalUrl.\nIn ModelServerTest.java - we have added a new test case - testModelWithInvalidFileUri", "url": "https://github.com/pytorch/serve/pull/646#discussion_r484362976", "createdAt": "2020-09-07T11:07:57Z", "author": {"login": "shrinath-suresh"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})\n+    public void testLoadModelFromFileURI() throws InterruptedException {\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        String source = configManager.getModelStore() + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        String fileUrl = \"\";\n+        try {\n+            FileUtils.copyFile(sourceFile, destinationFile);\n+            fileUrl = \"file://\" + parent + \"/modelarchive/mnist1.mar\";\n+        } catch (Exception e) {\n+            Assert.assertEquals(e.getClass(), IOException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NTA4MQ=="}, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQxMTg0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo1MzoyNlrOHM_fjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNDo0OFrOHN7FJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NTIzMQ==", "bodyText": "clean up the fileUrl as well.", "url": "https://github.com/pytorch/serve/pull/646#discussion_r483385231", "createdAt": "2020-09-04T04:53:26Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})\n+    public void testLoadModelFromFileURI() throws InterruptedException {\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        String source = configManager.getModelStore() + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        String fileUrl = \"\";\n+        try {\n+            FileUtils.copyFile(sourceFile, destinationFile);\n+            fileUrl = \"file://\" + parent + \"/modelarchive/mnist1.mar\";\n+        } catch (Exception e) {\n+            Assert.assertEquals(e.getClass(), IOException.class);\n+        }\n+        testLoadModel(fileUrl, \"mnist1\", \"1.0\");\n+        Assert.assertTrue(new File(configManager.getModelStore(), \"mnist1.mar\").exists());\n+        FileUtils.deleteQuietly(destinationFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2MTUwOQ==", "bodyText": "@harshbafna In this testcase, we copied mnist.mar from resources folder as mnist1.mar. In the end we have deleted mnist1.mar (fileUrl variable is just a URL like \"file://path) .", "url": "https://github.com/pytorch/serve/pull/646#discussion_r484361509", "createdAt": "2020-09-07T11:04:48Z", "author": {"login": "shrinath-suresh"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})\n+    public void testLoadModelFromFileURI() throws InterruptedException {\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        String source = configManager.getModelStore() + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        String fileUrl = \"\";\n+        try {\n+            FileUtils.copyFile(sourceFile, destinationFile);\n+            fileUrl = \"file://\" + parent + \"/modelarchive/mnist1.mar\";\n+        } catch (Exception e) {\n+            Assert.assertEquals(e.getClass(), IOException.class);\n+        }\n+        testLoadModel(fileUrl, \"mnist1\", \"1.0\");\n+        Assert.assertTrue(new File(configManager.getModelStore(), \"mnist1.mar\").exists());\n+        FileUtils.deleteQuietly(destinationFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NTIzMQ=="}, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQxMzgxOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo1NDoyN1rOHM_grw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDo1NDoyN1rOHM_grw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NTUxOQ==", "bodyText": "make this test case dependent on testLoadModelFromFileURI.", "url": "https://github.com/pytorch/serve/pull/646#discussion_r483385519", "createdAt": "2020-09-04T04:54:27Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -710,6 +710,38 @@ public void testLoadModelFromURL() throws InterruptedException {\n         Assert.assertTrue(new File(configManager.getModelStore(), \"squeezenet1_1.mar\").exists());\n     }\n \n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelRegisterWithDefaultWorkers\"})\n+    public void testLoadModelFromFileURI() throws InterruptedException {\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        String source = configManager.getModelStore() + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        String fileUrl = \"\";\n+        try {\n+            FileUtils.copyFile(sourceFile, destinationFile);\n+            fileUrl = \"file://\" + parent + \"/modelarchive/mnist1.mar\";\n+        } catch (Exception e) {\n+            Assert.assertEquals(e.getClass(), IOException.class);\n+        }\n+        testLoadModel(fileUrl, \"mnist1\", \"1.0\");\n+        Assert.assertTrue(new File(configManager.getModelStore(), \"mnist1.mar\").exists());\n+        FileUtils.deleteQuietly(destinationFile);\n+    }\n+\n+    @Test(\n+            alwaysRun = true,\n+            dependsOnMethods = {\"testModelWithInvalidCustomPythonDependency\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c11a021bd730819d38f97191c4596094769fec"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg0ODExOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0Mjo1OVrOHPVCzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxODo1MVrOHQef6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTQ2OA==", "bodyText": "NIT: Can't we just use file:///<path> as the url and remove the if-else here?", "url": "https://github.com/pytorch/serve/pull/646#discussion_r485835468", "createdAt": "2020-09-09T18:42:59Z", "author": {"login": "maaquib"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -59,7 +59,14 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 throw new FileAlreadyExistsException(marFileName);\n             }\n             try {\n-                FileUtils.copyURLToFile(new URL(url), modelLocation);\n+                if (url.indexOf(\"file://\") != -1) {\n+                    String originalPath = url.replace(\"file://\", \"\");\n+                    String path = FilenameUtils.getFullPath(originalPath);\n+                    File source = new File(path, marFileName);\n+                    FileUtils.copyFile(source, modelLocation);\n+                } else {\n+                    FileUtils.copyURLToFile(new URL(url), modelLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cb4e764456d654cc0fac34b050d67c611d5ab1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0NzI3Ng==", "bodyText": "NIT: Can't we just use file:///<path> as the url and remove the if-else here?\n\n@maaquib  FileUtils.copyURLToFile is a two step process. It downloads the file from URL and copies it to the destination. if we pass file://<path> as url, step one would fail.", "url": "https://github.com/pytorch/serve/pull/646#discussion_r486047276", "createdAt": "2020-09-10T03:54:35Z", "author": {"login": "shrinath-suresh"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -59,7 +59,14 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 throw new FileAlreadyExistsException(marFileName);\n             }\n             try {\n-                FileUtils.copyURLToFile(new URL(url), modelLocation);\n+                if (url.indexOf(\"file://\") != -1) {\n+                    String originalPath = url.replace(\"file://\", \"\");\n+                    String path = FilenameUtils.getFullPath(originalPath);\n+                    File source = new File(path, marFileName);\n+                    FileUtils.copyFile(source, modelLocation);\n+                } else {\n+                    FileUtils.copyURLToFile(new URL(url), modelLocation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTQ2OA=="}, "originalCommit": {"oid": "f0cb4e764456d654cc0fac34b050d67c611d5ab1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzg3MA==", "bodyText": "@shrinath-suresh This seems to be working", "url": "https://github.com/pytorch/serve/pull/646#discussion_r486483870", "createdAt": "2020-09-10T16:39:13Z", "author": {"login": "maaquib"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -59,7 +59,14 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 throw new FileAlreadyExistsException(marFileName);\n             }\n             try {\n-                FileUtils.copyURLToFile(new URL(url), modelLocation);\n+                if (url.indexOf(\"file://\") != -1) {\n+                    String originalPath = url.replace(\"file://\", \"\");\n+                    String path = FilenameUtils.getFullPath(originalPath);\n+                    File source = new File(path, marFileName);\n+                    FileUtils.copyFile(source, modelLocation);\n+                } else {\n+                    FileUtils.copyURLToFile(new URL(url), modelLocation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTQ2OA=="}, "originalCommit": {"oid": "f0cb4e764456d654cc0fac34b050d67c611d5ab1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzODk1Mg==", "bodyText": "@maaquib Thanks. Removed the if else block. Just the pattern change is enough for accommodating file://", "url": "https://github.com/pytorch/serve/pull/646#discussion_r487038952", "createdAt": "2020-09-11T13:18:51Z", "author": {"login": "shrinath-suresh"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -59,7 +59,14 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 throw new FileAlreadyExistsException(marFileName);\n             }\n             try {\n-                FileUtils.copyURLToFile(new URL(url), modelLocation);\n+                if (url.indexOf(\"file://\") != -1) {\n+                    String originalPath = url.replace(\"file://\", \"\");\n+                    String path = FilenameUtils.getFullPath(originalPath);\n+                    File source = new File(path, marFileName);\n+                    FileUtils.copyFile(source, modelLocation);\n+                } else {\n+                    FileUtils.copyURLToFile(new URL(url), modelLocation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTQ2OA=="}, "originalCommit": {"oid": "f0cb4e764456d654cc0fac34b050d67c611d5ab1"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1416, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}