{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODI0NTQ0", "number": 687, "title": "gRPC support for TorchServe", "bodyText": "Description\n\nAdded gRPC support for inference and management APIs\n\ninference.proto\nmanagement.proto\n\n\nAdded sample python grpc client in sanity suite and regression suite\nUpdated sanity suite to run APIs through both REST and gRPC APIs.\nAdded pytest cases in regresstion suite to validate all the inference and management APIs which were tested in newman suite, through gRPC apis\n\ntest_gRPC_inference_api.py\ntest_gRPC_management_apis.py\n\n\n\ngRPC vs REST performance report: https://docs.google.com/spreadsheets/d/1Vo6ZmeMgWY1TPiNWPtM41tV8H7Vy8mUuBnG42hsPnbg/edit#gid=1514552587\nFixes #656\nType of change\nPlease delete options that are not relevant.\n\n New feature (non-breaking change which adds functionality)\n This change requires a documentation update\n\nFeature/Issue validation/testing\ngRPC_regression.log\nChecklist:\n\n Have you added tests that prove your fix is effective or that this feature works?\n New and existing unit tests pass locally with these changes?\n Has code been commented, particularly in hard-to-understand areas?\n Have you made corresponding changes to the documentation?", "createdAt": "2020-09-17T17:31:51Z", "url": "https://github.com/pytorch/serve/pull/687", "merged": true, "mergeCommit": {"oid": "de42bcf70c3be6249136afb6f442aa5ad0b39678"}, "closed": true, "closedAt": "2020-12-10T17:29:23Z", "author": {"login": "harshbafna"}, "timelineItems": {"totalCount": 92, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ0T5agH2gAyNDg4ODI0NTQ0OjIxNDI3MTU2YWY1ODc2N2RlYTUyN2UxZTE1YjU1N2M5ZmM0YzY4MTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk2xbJAFqTU0OTQzNDYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "21427156af58767dea527e1e15b557c9fc4c6816", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/21427156af58767dea527e1e15b557c9fc4c6816", "committedDate": "2020-09-17T17:19:21Z", "message": "refactored torchserve job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b135601e8052efeaf3895766a274129dca874d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/77b135601e8052efeaf3895766a274129dca874d", "committedDate": "2020-09-17T17:21:11Z", "message": "added grpc server side implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75b81a07d4879f4e84f7a7ef3e21027f3e69125", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b75b81a07d4879f4e84f7a7ef3e21027f3e69125", "committedDate": "2020-09-17T17:22:27Z", "message": "added protobuff files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46d56a9537c13bf23771292650c550b135ed482", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d46d56a9537c13bf23771292650c550b135ed482", "committedDate": "2020-09-17T17:24:39Z", "message": "added grpc server startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec11bfef5e9877639a5eb2cf02d17f3a1251072", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/fec11bfef5e9877639a5eb2cf02d17f3a1251072", "committedDate": "2020-09-17T17:25:02Z", "message": "fixed valid port test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22734badb2627f8be501225fb6ab748221a9f31e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/22734badb2627f8be501225fb6ab748221a9f31e", "committedDate": "2020-09-17T17:27:13Z", "message": "automated server stub generation through gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14cb1eb338b14079df737e35dc1e88b057e49de9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/14cb1eb338b14079df737e35dc1e88b057e49de9", "committedDate": "2020-09-17T17:30:30Z", "message": "enhanced sanity script to validate grpc inference api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199811c627df6a19584bb324b8c533065c2ab51d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/199811c627df6a19584bb324b8c533065c2ab51d", "committedDate": "2020-09-17T17:32:21Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151cdcc39f422f64d600b2eaf8b4a2cc9aaa51bd", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/151cdcc39f422f64d600b2eaf8b4a2cc9aaa51bd", "committedDate": "2020-09-17T18:00:24Z", "message": "Added grpcio-tools package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1abb5cb2b8575448a4e99c36eb849bf3fb14157", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d1abb5cb2b8575448a4e99c36eb849bf3fb14157", "committedDate": "2020-09-17T18:14:45Z", "message": "fixed path issue in grpc client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b049c3befb3c3c357a1fce92636c1bbb046211", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/48b049c3befb3c3c357a1fce92636c1bbb046211", "committedDate": "2020-09-17T18:27:16Z", "message": "fixed incorrect exit logic in client script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897d5d7a226f12f9dbda509db620e9d03b0f2f55", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/897d5d7a226f12f9dbda509db620e9d03b0f2f55", "committedDate": "2020-09-18T01:48:44Z", "message": "removed json parse in python gRPC client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ffc689c85b2d9af523c4309f0dbb516ed3f437c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0ffc689c85b2d9af523c4309f0dbb516ed3f437c", "committedDate": "2020-09-18T05:02:03Z", "message": "removed unnecessary file checkin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3770272cbc46f99f48d7970e4869cd87a26fde5e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3770272cbc46f99f48d7970e4869cd87a26fde5e", "committedDate": "2020-09-18T07:16:51Z", "message": "added regression test cases for gRPC regression APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "585c03f75f571f9c40766f249e20ce40082865e0", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/585c03f75f571f9c40766f249e20ce40082865e0", "committedDate": "2020-09-18T07:55:32Z", "message": "added tolerance check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79dd23b6ce8d1c17e42e7d59b2de3175030c3931", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/79dd23b6ce8d1c17e42e7d59b2de3175030c3931", "committedDate": "2020-09-18T09:41:50Z", "message": "added python client stub cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7037e6cc2c8a5e0af020983f2f318de57fc4a6b5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/7037e6cc2c8a5e0af020983f2f318de57fc4a6b5", "committedDate": "2020-09-22T03:34:17Z", "message": "enhanced error handling for inference APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a4a69a5bbcd5001b65831ad0ded1910cfceec20", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/5a4a69a5bbcd5001b65831ad0ded1910cfceec20", "committedDate": "2020-09-22T03:42:54Z", "message": "removed unused utility file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "438683e9df08f9c800929deef8d03fd37e24b703", "author": {"user": {"login": "shivamshriwas", "name": "shivamshriwas"}}, "url": "https://github.com/pytorch/serve/commit/438683e9df08f9c800929deef8d03fd37e24b703", "committedDate": "2020-09-24T08:58:22Z", "message": "added support for datafile driven management api test collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90bfde4c5ea0d60600105933f7d852827182b0f8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/90bfde4c5ea0d60600105933f7d852827182b0f8", "committedDate": "2020-09-28T05:44:58Z", "message": "added gRPC support for management APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e3ccaaf17a5d8c9e97870c8d3c3b919f8ade848", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/7e3ccaaf17a5d8c9e97870c8d3c3b919f8ade848", "committedDate": "2020-09-28T07:22:12Z", "message": "added minor fixes found during testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee0f0579f1ddbe1559fd8f0ce59135b137b69a83", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ee0f0579f1ddbe1559fd8f0ce59135b137b69a83", "committedDate": "2020-09-28T11:44:27Z", "message": "enhanced grpc pytest suite to use grpc client for registering and unregistering model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78533c249cc89785f00b511ac1a5294ddb5132e4", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/78533c249cc89785f00b511ac1a5294ddb5132e4", "committedDate": "2020-09-28T11:45:32Z", "message": "updated command to generate python client stubs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfbffa36c7fddfe400a768b6531b4099639feb74", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/dfbffa36c7fddfe400a768b6531b4099639feb74", "committedDate": "2020-09-28T11:46:07Z", "message": "removed netty http staus dependency from wlm framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a529cdf55ee47a5593b8ab6ce8036ce8843c766", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2a529cdf55ee47a5593b8ab6ce8036ce8843c766", "committedDate": "2020-09-28T12:13:17Z", "message": "refacroted common code to utility module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b70abaf794eba2bc6326d921dedcb4e12a10c67", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/6b70abaf794eba2bc6326d921dedcb4e12a10c67", "committedDate": "2020-09-28T18:23:08Z", "message": "added gRPC management api test cases in regression suite and minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747e5068ee7009c1c733673de4c73ce1e3859a7c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/747e5068ee7009c1c733673de4c73ce1e3859a7c", "committedDate": "2020-09-29T11:30:26Z", "message": "added ping api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8413651bfa100ccea09528535a4a32ec24764ba0", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/8413651bfa100ccea09528535a4a32ec24764ba0", "committedDate": "2020-09-29T11:31:36Z", "message": "removed grpc metric api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328bb4e7e022bb22eace1a71218743746a94749c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/328bb4e7e022bb22eace1a71218743746a94749c", "committedDate": "2020-09-29T14:50:46Z", "message": "added ssl support for gRPC server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0c1795dc84065cbc908119e09e8b5a87d9bc3edb", "committedDate": "2020-09-29T15:58:20Z", "message": "added documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2517544e8346ca602367c4820b27f6c675b3b9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ff2517544e8346ca602367c4820b27f6c675b3b9", "committedDate": "2020-09-30T05:39:42Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1822ae336ecc25c70ef6b25a5155cfa09844438b", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/1822ae336ecc25c70ef6b25a5155cfa09844438b", "committedDate": "2020-09-30T06:36:40Z", "message": "fixed issue after conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039f48c411b0758cd2035ba8c7831a9d43441554", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/039f48c411b0758cd2035ba8c7831a9d43441554", "committedDate": "2020-09-30T08:57:45Z", "message": "added reference to python gRPC client, used in regression suite, in grpc doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126532e559d26dc4a976748e76290079ed207112", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/126532e559d26dc4a976748e76290079ed207112", "committedDate": "2020-09-30T13:36:22Z", "message": "added validation for register and unregister model in sanity script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca76ede3b93380502f765da61aa19769164fd25b", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ca76ede3b93380502f765da61aa19769164fd25b", "committedDate": "2020-09-30T13:36:37Z", "message": "updated docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb737f35c9d7281aa9404743210b489a0747700", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/6eb737f35c9d7281aa9404743210b489a0747700", "committedDate": "2020-09-30T14:41:49Z", "message": "minor fixes in grpc doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27495cda48b568da8ecc10c7f907d6b0894791a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d27495cda48b568da8ecc10c7f907d6b0894791a", "committedDate": "2020-09-30T17:09:42Z", "message": "updated gRPC server await termination code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b7eabfe6274730682707f98c564c6f87687360c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0b7eabfe6274730682707f98c564c6f87687360c", "committedDate": "2020-09-30T17:24:31Z", "message": "refactored gRPC server startup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15322c6659a98b3f545f0d3339e400e4b163b63c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/15322c6659a98b3f545f0d3339e400e4b163b63c", "committedDate": "2020-09-30T18:08:39Z", "message": "added null check before terminating gRPC servers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590fca846bc97fd1d16663ec4584bf57bb49d175", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/590fca846bc97fd1d16663ec4584bf57bb49d175", "committedDate": "2020-10-01T12:44:49Z", "message": "minor refactoring of method name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b3a6b5847d6272520af7eae3b49bfba211b41ce", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/5b3a6b5847d6272520af7eae3b49bfba211b41ce", "committedDate": "2020-10-01T12:45:24Z", "message": "skipped grpc package from jacoco verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63aa51ab276c76c55fb0ffc91b1aec1542412ee3", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/63aa51ab276c76c55fb0ffc91b1aec1542412ee3", "committedDate": "2020-10-12T13:07:05Z", "message": "Fixed typo in doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "461395bc1f624ef8f240c14d3e5931608deb83f7", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/461395bc1f624ef8f240c14d3e5931608deb83f7", "committedDate": "2020-10-12T13:07:37Z", "message": "added error logs in gRPC client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653276e09b8097f58c15c88203362292b61d8030", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/653276e09b8097f58c15c88203362292b61d8030", "committedDate": "2020-10-12T13:09:47Z", "message": "added gRPC server interceptor to log api access data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a62279c9c9d94041aac0150dbe60adfc690df2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f1a62279c9c9d94041aac0150dbe60adfc690df2", "committedDate": "2020-10-12T13:44:56Z", "message": "added checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78dbff1edff59a1222fb79e8e6856603ca4ff1d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/e78dbff1edff59a1222fb79e8e6856603ca4ff1d", "committedDate": "2020-10-13T09:22:54Z", "message": "fixed grpc command in readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb125a4374fd47552d74e306876ee34fc5956f2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3bb125a4374fd47552d74e306876ee34fc5956f2", "committedDate": "2020-10-14T03:31:33Z", "message": "refactored test cases to removed code duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa484a21838e7157fe3705b0215d3aa5d2bcdfe", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/4fa484a21838e7157fe3705b0215d3aa5d2bcdfe", "committedDate": "2020-10-14T03:32:42Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b867a0da6d1896166692e15b12991546cbd6968", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2b867a0da6d1896166692e15b12991546cbd6968", "committedDate": "2020-10-14T09:51:18Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzY5Njgz", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-510769683", "createdAt": "2020-10-16T20:11:25Z", "commit": {"oid": "2b867a0da6d1896166692e15b12991546cbd6968"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxMToyNlrOHjObmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxMToyNlrOHjObmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5ODY1MA==", "bodyText": "\"../frontend/server/src/main/resources/proto/management.proto\" should be changed to \"../frontend/server/src/main/resources/proto/inference.proto\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [Inference API](../frontend/server/src/main/resources/proto/management.proto)\n          \n          \n            \n            * [Inference API](../frontend/server/src/main/resources/proto/inference.proto)", "url": "https://github.com/pytorch/serve/pull/687#discussion_r506698650", "createdAt": "2020-10-16T20:11:26Z", "author": {"login": "amtagrwl"}, "path": "docs/grpc_api.md", "diffHunk": "@@ -0,0 +1,70 @@\n+# TorchServe gRPC API\n+\n+TorchServe also supports [gRPC APIs](../frontend/server/src/main/resources/proto) for both inference and management calls.\n+\n+TorchServe provides following gRPCs apis\n+\n+* [Inference API](../frontend/server/src/main/resources/proto/management.proto)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b867a0da6d1896166692e15b12991546cbd6968"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3d7b0b9add224eee1017ca4ba0b13ba583ed5a65", "committedDate": "2020-10-17T02:03:47Z", "message": "Fixed typo in link.\n\nCo-authored-by: Amit Agarwal <amtagrwl@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/8dac80c5b3279d323535da0d8694f6ac30e1b9a8", "committedDate": "2020-10-27T06:06:40Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700defce59120529158478d0841fbc54dab4c6d8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/700defce59120529158478d0841fbc54dab4c6d8", "committedDate": "2020-10-27T06:27:24Z", "message": "fixed compilation issues after conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/dc8e410e4b1ff891f361a970ea609947324ecc0d", "committedDate": "2020-10-30T10:49:28Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODcwODU3", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-520870857", "createdAt": "2020-10-30T17:11:35Z", "commit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxMTozNVrOHrYWTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxMTozNVrOHrYWTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0OTc0Mw==", "bodyText": "Is it possible to align with existing Http request structure to make code consistent? Existing http request includes\n\ncommand or customer command\nRequestInput\n-- requestId\n-- headers\n-- parameters", "url": "https://github.com/pytorch/serve/pull/687#discussion_r515249743", "createdAt": "2020-10-30T17:11:35Z", "author": {"login": "lxning"}, "path": "frontend/server/src/main/resources/proto/inference.proto", "diffHunk": "@@ -0,0 +1,35 @@\n+syntax = \"proto3\";\n+\n+package org.pytorch.serve.grpc.inference;\n+\n+import \"google/protobuf/empty.proto\";\n+\n+option java_multiple_files = true;\n+\n+message PredictionsRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODc0MjQ4", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-520874248", "createdAt": "2020-10-30T17:15:13Z", "commit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxNToxM1rOHrYhDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxNToxM1rOHrYhDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MjQ5Mw==", "bodyText": "Same for prediction response, the existing Http prediction response can also handle failure.  It includes:\n\nrequestId\nstatusCode\nreasonPhrase\ncontentType\nheaders\nresult", "url": "https://github.com/pytorch/serve/pull/687#discussion_r515252493", "createdAt": "2020-10-30T17:15:13Z", "author": {"login": "lxning"}, "path": "frontend/server/src/main/resources/proto/inference.proto", "diffHunk": "@@ -0,0 +1,35 @@\n+syntax = \"proto3\";\n+\n+package org.pytorch.serve.grpc.inference;\n+\n+import \"google/protobuf/empty.proto\";\n+\n+option java_multiple_files = true;\n+\n+message PredictionsRequest {\n+    // Name of model.\n+    string model_name = 1; //required\n+\n+    // Version of model to run prediction on.\n+    string model_version = 2; //optional\n+\n+    // input data for model prediction\n+    map<string, bytes> input = 3; //required\n+}\n+\n+message PredictionResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzYyNjk3", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-523362697", "createdAt": "2020-11-04T13:33:44Z", "commit": {"oid": "dc8e410e4b1ff891f361a970ea609947324ecc0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01bedc868f5f742416fe241553a140ed254973cf", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/01bedc868f5f742416fe241553a140ed254973cf", "committedDate": "2020-11-05T04:45:28Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d1b06b1b81f2f66efdf4191f4a26fea215c862", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/22d1b06b1b81f2f66efdf4191f4a26fea215c862", "committedDate": "2020-11-06T03:05:32Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5818ca248cf25b45134415c59536f6ab4326aef", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f5818ca248cf25b45134415c59536f6ab4326aef", "committedDate": "2020-11-06T04:27:18Z", "message": "fixed regression suite pytest issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410ce11a62f8fbe331298bd4bc62299fb8caab45", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/410ce11a62f8fbe331298bd4bc62299fb8caab45", "committedDate": "2020-11-06T05:06:40Z", "message": "fixed pytest case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd835d7c5e1c3ecc384e7a44e7ef0a71dabf570", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/1bd835d7c5e1c3ecc384e7a44e7ef0a71dabf570", "committedDate": "2020-11-09T18:18:07Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aa38ddf7363aac9f71138c83fdfb48b05255c07", "author": {"user": {"login": "dhanainme", "name": null}}, "url": "https://github.com/pytorch/serve/commit/7aa38ddf7363aac9f71138c83fdfb48b05255c07", "committedDate": "2020-11-19T00:36:48Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6171666dbea4599055760b83ef156cad2ed075a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c6171666dbea4599055760b83ef156cad2ed075a", "committedDate": "2020-11-23T06:33:29Z", "message": "merged master and resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f3f7f9cdc53b640ae584a3b589806f6d2a26e8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a8f3f7f9cdc53b640ae584a3b589806f6d2a26e8", "committedDate": "2020-11-23T06:55:08Z", "message": "fixed import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MjE2MTE1", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-536216115", "createdAt": "2020-11-23T07:18:12Z", "commit": {"oid": "a8f3f7f9cdc53b640ae584a3b589806f6d2a26e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2c48a0a9239b27c47ea262c0d52038ef35e8c13", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c2c48a0a9239b27c47ea262c0d52038ef35e8c13", "committedDate": "2020-11-23T07:58:08Z", "message": "fixed sanity suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04662907a5e972eb7123436f243169d00a8aca05", "author": {"user": {"login": "dhanainme", "name": null}}, "url": "https://github.com/pytorch/serve/commit/04662907a5e972eb7123436f243169d00a8aca05", "committedDate": "2020-11-24T20:53:57Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7be17b43621435568f1ed349c194ea91d73116", "author": {"user": {"login": "maaquib", "name": "Aaqib"}}, "url": "https://github.com/pytorch/serve/commit/ab7be17b43621435568f1ed349c194ea91d73116", "committedDate": "2020-11-24T21:37:57Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDIyNTg0", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-538022584", "createdAt": "2020-11-24T22:34:59Z", "commit": {"oid": "ab7be17b43621435568f1ed349c194ea91d73116"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNDo1OVrOH5ZgmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNDo1OVrOH5ZgmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODgyNQ==", "bodyText": "it is better to be configurable: REST/gRPC/both", "url": "https://github.com/pytorch/serve/pull/687#discussion_r529948825", "createdAt": "2020-11-24T22:34:59Z", "author": {"login": "lxning"}, "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -104,7 +111,10 @@ public void startAndWait()\n             throws InterruptedException, IOException, GeneralSecurityException,\n                     InvalidSnapshotException {\n         try {\n-            List<ChannelFuture> channelFutures = start();\n+            List<ChannelFuture> channelFutures = startRESTserver();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab7be17b43621435568f1ed349c194ea91d73116"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf2af045df267234fadd893acad31cf134c56b5", "author": {"user": {"login": "chauhang", "name": "Geeta Chauhan"}}, "url": "https://github.com/pytorch/serve/commit/5cf2af045df267234fadd893acad31cf134c56b5", "committedDate": "2020-11-25T07:35:52Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODUyMzMx", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-538852331", "createdAt": "2020-11-25T21:19:50Z", "commit": {"oid": "5cf2af045df267234fadd893acad31cf134c56b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d113274769ed7ea0f3a73eebe21f05e6c4ced7a4", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d113274769ed7ea0f3a73eebe21f05e6c4ced7a4", "committedDate": "2020-11-26T14:10:00Z", "message": "merged master and resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3774d22f316dc7429368787ec3efee6ae3d4b03", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c3774d22f316dc7429368787ec3efee6ae3d4b03", "committedDate": "2020-11-26T14:23:44Z", "message": "fixed path in grpc client stub generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d62f22db63e9349a93a40c658bdde37b103fc9d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/5d62f22db63e9349a93a40c658bdde37b103fc9d", "committedDate": "2020-11-26T14:56:51Z", "message": "fixed path for grpc client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzcyMDE2", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-498772016", "createdAt": "2020-09-29T18:37:13Z", "commit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "state": "DISMISSED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNzoxM1rOHZ7xzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMjoxOFrOH8_ouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTg1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `metrics_format` : Use this to specify metric report format . At present, the only supported and default value for this is `prometheus'\n          \n          \n            \n            * `metrics_format` : Use this to specify metric report format . At present, the only supported and default value for this is `prometheus`", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496955853", "createdAt": "2020-09-29T18:37:13Z", "author": {"login": "maaquib"}, "path": "docs/configuration.md", "diffHunk": "@@ -201,6 +219,12 @@ By default, TorchServe uses all available GPUs for inference. Use `number_of_gpu\n * `metrics_format` : Use this to specify metric report format . At present, the only supported and default value for this is `prometheus'\n \t\t     This is used in conjunction with `enable_meterics_api` option above.\n \n+### Enable metrics api\n+* `enable_metrics_api` : Enable or disable metric apis i.e. it can be either `true` or `false`. Default: true (Enabled)\n+* `metrics_format` : Use this to specify metric report format . At present, the only supported and default value for this is `prometheus'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Njk5OQ==", "bodyText": "NIT: Why the phrase \"closely follows\"?", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496956999", "createdAt": "2020-09-29T18:39:24Z", "author": {"login": "maaquib"}, "path": "docs/inference_api.md", "diffHunk": "@@ -22,6 +22,8 @@ The out is OpenAPI 3.0.1 json format. You can use it to generate client code, se\n \n ## Health check API\n \n+This API closely follows the [InferenceAPIsService.Ping](../frontend/server/src/main/resources/proto/inference.proto) gRPC API. It returns the status of a model in the ModelServer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NzQwMQ==", "bodyText": "NIT: Indentation", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496957401", "createdAt": "2020-09-29T18:40:04Z", "author": {"login": "maaquib"}, "path": "frontend/build.gradle", "diffHunk": "@@ -3,10 +3,15 @@ buildscript {\n     spotbugsVersion = '4.0.2'\n     toolVersion = '4.0.2'\n   }\n+  dependencies {\n+        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MzgxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    inferencegRPCServer.shutdown();\n          \n          \n            \n                    inferencegRPCServer.shutdown();\n          \n          \n            \n                    try {\n          \n          \n            \n                            inferencegRPCServer.awaitTermination(1, TimeUnit.MINUTES);\n          \n          \n            \n                    } catch (InterruptedException e) {\n          \n          \n            \n                            logger.error(\"Inference gRPC server graceful shutdown failed\", e);\n          \n          \n            \n                    } finally {\n          \n          \n            \n                            inferencegRPCServer.shutdownNow();\n          \n          \n            \n                    }", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496963810", "createdAt": "2020-09-29T18:51:14Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -380,8 +403,22 @@ public boolean isRunning() {\n     }\n \n     public void stop() {\n-        if (stopped.get()) {\n-            return;\n+        inferencegRPCServer.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NTgxNw==", "bodyText": "Can we refactor these messages to a util class to be re-used by REST and gRPC, so that we don't have to make changes in two place?", "url": "https://github.com/pytorch/serve/pull/687#discussion_r496965817", "createdAt": "2020-09-29T18:55:00Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {\n+            BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n+            responseObserver.onError(\n+                    Status.INTERNAL\n+                            .withDescription(e.getMessage())\n+                            .augmentDescription(\"BadRequestException.()\")\n+                            .withCause(e)\n+                            .asRuntimeException());\n+            return;\n+        }\n+\n+        if (modelVersion == null || (\"\").equals(modelVersion)) {\n+            modelVersion = null;\n+        }\n+\n+        String requestId = UUID.randomUUID().toString();\n+        RequestInput inputData = new RequestInput(requestId);\n+\n+        for (Map.Entry<String, ByteString> entry : request.getInputMap().entrySet()) {\n+            inputData.addParameter(\n+                    new InputParameter(entry.getKey(), entry.getValue().toByteArray()));\n+        }\n+\n+        MetricAggregator.handleInferenceMetric(modelName, modelVersion);\n+        Job job =\n+                new GRPCJob(\n+                        responseObserver,\n+                        modelName,\n+                        modelVersion,\n+                        WorkerCommands.PREDICT,\n+                        inputData);\n+\n+        try {\n+            if (!ModelManager.getInstance().addJob(job)) {\n+                String responseMessage =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNjk1OQ==", "bodyText": "Shouldn't this be getScheduled? Why are we changing how inferTime is measured?", "url": "https://github.com/pytorch/serve/pull/687#discussion_r497106959", "createdAt": "2020-09-29T22:46:41Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java", "diffHunk": "@@ -15,69 +15,30 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class Job {\n+public class RestJob extends Job {\n \n     private static final Logger logger = LoggerFactory.getLogger(Job.class);\n \n     private ChannelHandlerContext ctx;\n \n-    private String modelName;\n-    private String modelVersion;\n-    private WorkerCommands cmd; // Else its data msg or inf requests\n-    private RequestInput input;\n-    private long begin;\n-    private long scheduled;\n-\n-    public Job(\n+    public RestJob(\n             ChannelHandlerContext ctx,\n             String modelName,\n             String version,\n             WorkerCommands cmd,\n             RequestInput input) {\n+        super(modelName, version, cmd, input);\n         this.ctx = ctx;\n-        this.modelName = modelName;\n-        this.cmd = cmd;\n-        this.input = input;\n-        this.modelVersion = version;\n-        begin = System.nanoTime();\n-        scheduled = begin;\n-    }\n-\n-    public String getJobId() {\n-        return input.getRequestId();\n-    }\n-\n-    public String getModelName() {\n-        return modelName;\n-    }\n-\n-    public String getModelVersion() {\n-        return modelVersion;\n-    }\n-\n-    public WorkerCommands getCmd() {\n-        return cmd;\n-    }\n-\n-    public boolean isControlCmd() {\n-        return !WorkerCommands.PREDICT.equals(cmd);\n-    }\n-\n-    public RequestInput getPayload() {\n-        return input;\n-    }\n-\n-    public void setScheduled() {\n-        scheduled = System.nanoTime();\n     }\n \n+    @Override\n     public void response(\n             byte[] body,\n             CharSequence contentType,\n             int statusCode,\n             String statusPhrase,\n             Map<String, String> responseHeaders) {\n-        long inferTime = System.nanoTime() - scheduled;\n+        long inferTime = System.nanoTime() - getBegin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwODk1Mw==", "bodyText": "Whats the reason for this remapping? Seems like 413 is appropriate", "url": "https://github.com/pytorch/serve/pull/687#discussion_r497108953", "createdAt": "2020-09-29T22:49:19Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/job/RestJob.java", "diffHunk": "@@ -102,29 +63,33 @@ public void response(\n          */\n         if (ctx != null) {\n             MetricAggregator.handleInferenceMetric(\n-                    modelName, modelVersion, scheduled - begin, inferTime);\n+                    getModelName(), getModelVersion(), getScheduled() - getBegin(), inferTime);\n             NettyUtils.sendHttpResponse(ctx, resp, true);\n         }\n         logger.debug(\n                 \"Waiting time ns: {}, Backend time ns: {}\",\n-                scheduled - begin,\n-                System.nanoTime() - scheduled);\n+                getScheduled() - getBegin(),\n+                System.nanoTime() - getScheduled());\n     }\n \n-    public void sendError(HttpResponseStatus status, String error) {\n+    @Override\n+    public void sendError(int status, String error) {\n         /*\n          * We can load the models based on the configuration file.Since this Job is\n          * not driven by the external connections, we could have a empty context for\n          * this job. We shouldn't try to send a response to ctx if this is not triggered\n          * by external clients.\n          */\n         if (ctx != null) {\n-            NettyUtils.sendError(ctx, status, new InternalServerException(error));\n+            // Mapping HTTPURLConnection's HTTP_ENTITY_TOO_LARGE to Netty's INSUFFICIENT_STORAGE\n+            status = (status == 413) ? 507 : status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1795dc84065cbc908119e09e8b5a87d9bc3edb"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NzM5NA==", "bodyText": "Should this be added to a new requirements file?", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508697394", "createdAt": "2020-10-20T17:07:50Z", "author": {"login": "maaquib"}, "path": "README.md", "diffHunk": "@@ -135,7 +135,29 @@ After you execute the `torchserve` command above, TorchServe runs on your host,\n \n ### Get predictions from a model\n \n-To test the model server, send a request to the server's `predictions` API.\n+To test the model server, send a request to the server's `predictions` API. TorchServe supports all [inference](docs/inference_api.md) and [management](docs/management_api.md) api's through both [gRPC](docs/grpc_api.md) and [HTTP/REST](docs/grpc_api.md).\n+\n+#### Using GRPC APIs through python client\n+\n+ - Install grpc python dependencies :\n+ \n+```bash\n+pip install -U grpcio protobuf grpcio-tools", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwODU3Ng==", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (modelName == null || (\"\").equals(modelName)) {\n          \n          \n            \n                    if (modelName == null || \"\".equals(modelName)) {", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508708576", "createdAt": "2020-10-20T17:25:20Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwOTI4Mw==", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (modelVersion == null || (\"\").equals(modelVersion)) {\n          \n          \n            \n                    if (modelVersion == null || \"\".equals(modelVersion)) {", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508709283", "createdAt": "2020-10-20T17:26:27Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/InferenceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Empty;\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.inference.InferenceAPIsServiceGrpc.InferenceAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.inference.PredictionResponse;\n+import org.pytorch.serve.grpc.inference.PredictionsRequest;\n+import org.pytorch.serve.grpc.inference.TorchServeHealthResponse;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.job.GRPCJob;\n+import org.pytorch.serve.job.Job;\n+import org.pytorch.serve.metrics.api.MetricAggregator;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+import org.pytorch.serve.util.messages.InputParameter;\n+import org.pytorch.serve.util.messages.RequestInput;\n+import org.pytorch.serve.util.messages.WorkerCommands;\n+import org.pytorch.serve.wlm.ModelManager;\n+\n+public class InferenceImpl extends InferenceAPIsServiceImplBase {\n+\n+    @Override\n+    public void ping(Empty request, StreamObserver<TorchServeHealthResponse> responseObserver) {\n+        Runnable r =\n+                () -> {\n+                    String response = ApiUtils.getWorkerStatus();\n+                    TorchServeHealthResponse reply =\n+                            TorchServeHealthResponse.newBuilder()\n+                                    .setHealth(\n+                                            JsonUtils.GSON_PRETTY_EXPOSED.toJson(\n+                                                    new StatusResponse(\n+                                                            response, HttpURLConnection.HTTP_OK)))\n+                                    .build();\n+                    responseObserver.onNext(reply);\n+                    responseObserver.onCompleted();\n+                };\n+        ApiUtils.getTorchServeHealth(r);\n+    }\n+\n+    @Override\n+    public void predictions(\n+            PredictionsRequest request, StreamObserver<PredictionResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        if (modelName == null || (\"\").equals(modelName)) {\n+            BadRequestException e = new BadRequestException(\"Parameter model_name is required.\");\n+            responseObserver.onError(\n+                    Status.INTERNAL\n+                            .withDescription(e.getMessage())\n+                            .augmentDescription(\"BadRequestException.()\")\n+                            .withCause(e)\n+                            .asRuntimeException());\n+            return;\n+        }\n+\n+        if (modelVersion == null || (\"\").equals(modelVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMDkwMg==", "bodyText": "This and following util methods should be refactored to the base class so that they can be used in the InferenceImpl.java too", "url": "https://github.com/pytorch/serve/pull/687#discussion_r508710902", "createdAt": "2020-10-20T17:29:18Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/grpcimpl/ManagementImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.pytorch.serve.grpcimpl;\n+\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import java.util.concurrent.ExecutionException;\n+import org.pytorch.serve.archive.ModelException;\n+import org.pytorch.serve.archive.ModelNotFoundException;\n+import org.pytorch.serve.archive.ModelVersionNotFoundException;\n+import org.pytorch.serve.grpc.management.DescribeModelRequest;\n+import org.pytorch.serve.grpc.management.ListModelsRequest;\n+import org.pytorch.serve.grpc.management.ManagementAPIsServiceGrpc.ManagementAPIsServiceImplBase;\n+import org.pytorch.serve.grpc.management.ManagementResponse;\n+import org.pytorch.serve.grpc.management.RegisterModelRequest;\n+import org.pytorch.serve.grpc.management.ScaleWorkerRequest;\n+import org.pytorch.serve.grpc.management.SetDefaultRequest;\n+import org.pytorch.serve.grpc.management.UnregisterModelRequest;\n+import org.pytorch.serve.http.BadRequestException;\n+import org.pytorch.serve.http.InternalServerException;\n+import org.pytorch.serve.http.StatusResponse;\n+import org.pytorch.serve.util.ApiUtils;\n+import org.pytorch.serve.util.GRPCUtils;\n+import org.pytorch.serve.util.JsonUtils;\n+\n+public class ManagementImpl extends ManagementAPIsServiceImplBase {\n+\n+    @Override\n+    public void describeModel(\n+            DescribeModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+\n+        String modelName = request.getModelName();\n+        String modelVersion = request.getModelVersion();\n+\n+        String resp;\n+        try {\n+            resp =\n+                    JsonUtils.GSON_PRETTY.toJson(\n+                            ApiUtils.getModelDescription(modelName, modelVersion));\n+            sendResponse(responseObserver, resp);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        }\n+    }\n+\n+    @Override\n+    public void listModels(\n+            ListModelsRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        int limit = request.getLimit();\n+        int pageToken = request.getNextPageToken();\n+\n+        String modelList = JsonUtils.GSON_PRETTY.toJson(ApiUtils.getModelList(limit, pageToken));\n+        sendResponse(responseObserver, modelList);\n+    }\n+\n+    @Override\n+    public void registerModel(\n+            RegisterModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        org.pytorch.serve.http.messages.RegisterModelRequest registerModelRequest =\n+                new org.pytorch.serve.http.messages.RegisterModelRequest(request);\n+\n+        StatusResponse statusResponse;\n+        try {\n+            statusResponse = ApiUtils.registerModel(registerModelRequest);\n+            sendStatusResponse(responseObserver, statusResponse);\n+        } catch (InternalServerException e) {\n+            sendException(responseObserver, e, null);\n+        } catch (ExecutionException | InterruptedException e) {\n+            sendException(responseObserver, e, \"Error while creating workers\");\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (ModelException | BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    @Override\n+    public void scaleWorker(\n+            ScaleWorkerRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        int minWorkers = GRPCUtils.getRegisterParam(request.getMinWorker(), 1);\n+        int maxWorkers = GRPCUtils.getRegisterParam(request.getMaxWorker(), minWorkers);\n+        String modelName = GRPCUtils.getRegisterParam(request.getModelName(), null);\n+        String modelVersion = GRPCUtils.getRegisterParam(request.getModelVersion(), null);\n+        boolean synchronous = request.getSynchronous();\n+\n+        StatusResponse statusResponse;\n+        try {\n+            statusResponse =\n+                    ApiUtils.updateModelWorkers(\n+                            modelName,\n+                            modelVersion,\n+                            minWorkers,\n+                            maxWorkers,\n+                            synchronous,\n+                            false,\n+                            null);\n+            sendStatusResponse(responseObserver, statusResponse);\n+        } catch (ExecutionException | InterruptedException e) {\n+            sendException(responseObserver, e, \"Error while creating workers\");\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    @Override\n+    public void setDefault(\n+            SetDefaultRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        String modelName = request.getModelName();\n+        String newModelVersion = request.getModelVersion();\n+\n+        try {\n+            String msg = ApiUtils.setDefault(modelName, newModelVersion);\n+            sendResponse(responseObserver, msg);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterModel(\n+            UnregisterModelRequest request, StreamObserver<ManagementResponse> responseObserver) {\n+        try {\n+            String modelName = request.getModelName();\n+            if (modelName == null || (\"\").equals(modelName)) {\n+                sendErrorResponse(\n+                        responseObserver,\n+                        Status.INVALID_ARGUMENT,\n+                        new BadRequestException(\"Parameter url is required.\"));\n+            }\n+\n+            String modelVersion = request.getModelVersion();\n+\n+            if ((\"\").equals(modelVersion)) {\n+                modelVersion = null;\n+            }\n+            ApiUtils.unregisterModel(modelName, modelVersion);\n+            String msg = \"Model \\\"\" + modelName + \"\\\" unregistered\";\n+            sendResponse(responseObserver, msg);\n+        } catch (ModelNotFoundException | ModelVersionNotFoundException e) {\n+            sendErrorResponse(responseObserver, Status.NOT_FOUND, e);\n+        } catch (BadRequestException e) {\n+            sendErrorResponse(responseObserver, Status.INVALID_ARGUMENT, e);\n+        }\n+    }\n+\n+    private void sendResponse(StreamObserver<ManagementResponse> responseObserver, String msg) {\n+        ManagementResponse reply = ManagementResponse.newBuilder().setMsg(msg).build();\n+        responseObserver.onNext(reply);\n+        responseObserver.onCompleted();\n+    }\n+\n+    private void sendErrorResponse(\n+            StreamObserver<ManagementResponse> responseObserver,\n+            Status status,\n+            String description,\n+            String errorClass) {\n+        responseObserver.onError(\n+                status.withDescription(description)\n+                        .augmentDescription(errorClass)\n+                        .asRuntimeException());\n+    }\n+\n+    private void sendErrorResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7b0b9add224eee1017ca4ba0b13ba583ed5a65"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxOTIyNA==", "bodyText": "Same as above, can you explain whats the reason for change 507 to 513?", "url": "https://github.com/pytorch/serve/pull/687#discussion_r533719224", "createdAt": "2020-12-01T21:02:18Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -447,7 +446,12 @@ public void channelRead0(ChannelHandlerContext ctx, ModelWorkerResponse msg) {\n         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n             logger.error(\"Unknown exception\", cause);\n             if (cause instanceof OutOfMemoryError) {\n-                NettyUtils.sendError(ctx, HttpResponseStatus.INSUFFICIENT_STORAGE, cause);\n+                ModelWorkerResponse msg = new ModelWorkerResponse();\n+                msg.setCode(HttpURLConnection.HTTP_ENTITY_TOO_LARGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d62f22db63e9349a93a40c658bdde37b103fc9d"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac33310b1bf6fb9e04a5124bd284135e9d7e7382", "author": {"user": {"login": "maaquib", "name": "Aaqib"}}, "url": "https://github.com/pytorch/serve/commit/ac33310b1bf6fb9e04a5124bd284135e9d7e7382", "committedDate": "2020-12-01T21:05:11Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0422f0933489ed42b4c896be042d79b6005dcade", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0422f0933489ed42b4c896be042d79b6005dcade", "committedDate": "2020-12-02T04:08:26Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b68184561378807bb8b4b66fed9991915478b6c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/8b68184561378807bb8b4b66fed9991915478b6c", "committedDate": "2020-12-02T06:53:43Z", "message": "incorporated code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35af895b693a31d8bb11b7c29333e22f337a3935", "author": {"user": {"login": "chauhang", "name": "Geeta Chauhan"}}, "url": "https://github.com/pytorch/serve/commit/35af895b693a31d8bb11b7c29333e22f337a3935", "committedDate": "2020-12-03T02:54:38Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591f3ecbc0980b2b5f2da1ce0757c4a658e30b2a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/591f3ecbc0980b2b5f2da1ce0757c4a658e30b2a", "committedDate": "2020-12-09T03:46:10Z", "message": "merged master and resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17eee86df7f9dccfeabbf97d7d963aab367d5ea", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c17eee86df7f9dccfeabbf97d7d963aab367d5ea", "committedDate": "2020-12-09T03:46:27Z", "message": "Merge branch 'issue_656' of https://github.com/pytorch/serve into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26cfa0a859bdce1cead7c39cc2d281e15261c2e5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/26cfa0a859bdce1cead7c39cc2d281e15261c2e5", "committedDate": "2020-12-09T03:56:50Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccdd310e704afb8eb0c506f4ac3c554241acf1bf", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ccdd310e704afb8eb0c506f4ac3c554241acf1bf", "committedDate": "2020-12-09T06:53:58Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDk1Mjkx", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-548495291", "createdAt": "2020-12-09T18:44:05Z", "commit": {"oid": "ccdd310e704afb8eb0c506f4ac3c554241acf1bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "557f51e00d1c4fb5f319d6fddeff3abdfa6f875a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/557f51e00d1c4fb5f319d6fddeff3abdfa6f875a", "committedDate": "2020-12-10T04:51:42Z", "message": "fixed management api newman command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9bf3a7988df337b9aab074a09079ea792c88aa3", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d9bf3a7988df337b9aab074a09079ea792c88aa3", "committedDate": "2020-12-10T05:00:10Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dfdecc607da0df3e48fa7ed36cd5a2329e5f1da", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/4dfdecc607da0df3e48fa7ed36cd5a2329e5f1da", "committedDate": "2020-12-10T05:24:40Z", "message": "fixed import issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21a174de3fa8971137a763cdc6be02267a851ae", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b21a174de3fa8971137a763cdc6be02267a851ae", "committedDate": "2020-12-10T05:24:56Z", "message": "fixed regression pytest issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTc2Mjky", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-549176292", "createdAt": "2020-12-10T13:06:42Z", "commit": {"oid": "b21a174de3fa8971137a763cdc6be02267a851ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e015f40dd628eacf5a94e2fbbccd8aa96b434d6", "author": {"user": {"login": "maaquib", "name": "Aaqib"}}, "url": "https://github.com/pytorch/serve/commit/5e015f40dd628eacf5a94e2fbbccd8aa96b434d6", "committedDate": "2020-12-10T16:56:53Z", "message": "Merge branch 'master' into issue_656"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDM0NjA4", "url": "https://github.com/pytorch/serve/pull/687#pullrequestreview-549434608", "createdAt": "2020-12-10T17:27:22Z", "commit": {"oid": "5e015f40dd628eacf5a94e2fbbccd8aa96b434d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2083, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}