{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDM5MTI3", "number": 836, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODoxNzo1OVrOFBSHjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo0MjoxOFrOFCqw5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODg5NzQxOnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODoxNzo1OVrOH_-FGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozOToxOVrOIAd6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzOTQ1MA==", "bodyText": "Can we also clarify that we need to specify the appropriate BASE_IMAGE= with the cuda version", "url": "https://github.com/pytorch/serve/pull/836#discussion_r536839450", "createdAt": "2020-12-05T18:17:59Z", "author": {"login": "maaquib"}, "path": "docker/README.md", "diffHunk": "@@ -38,7 +38,7 @@ For creating GPU based image with the latest CUDA version PyTorch supports (ex.\n DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 -t torchserve:latest .\n ```\n \n-For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cuda92\", \"cuda101\":\n+For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cu92\", \"cu101\", \"cu102\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzOTY1Mw==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/836#discussion_r536939653", "createdAt": "2020-12-06T02:46:46Z", "author": {"login": "harshbafna"}, "path": "docker/README.md", "diffHunk": "@@ -38,7 +38,7 @@ For creating GPU based image with the latest CUDA version PyTorch supports (ex.\n DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 -t torchserve:latest .\n ```\n \n-For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cuda92\", \"cuda101\":\n+For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cu92\", \"cu101\", \"cu102\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzOTQ1MA=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MzEzMQ==", "bodyText": "@harshbafna  @maaquib Is it not possible to derive the Base image name from just the Cuda version? It will simplify things for people building their own custom image of TorchServe if they can just set a single CUDA_VERSION variable", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537093131", "createdAt": "2020-12-06T18:09:07Z", "author": {"login": "chauhang"}, "path": "docker/README.md", "diffHunk": "@@ -38,7 +38,7 @@ For creating GPU based image with the latest CUDA version PyTorch supports (ex.\n DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 -t torchserve:latest .\n ```\n \n-For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cuda92\", \"cuda101\":\n+For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cu92\", \"cu101\", \"cu102\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzOTQ1MA=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MDkxNA==", "bodyText": "@chauhang: Enhanced the build_image.sh script and updated the documentation. Could you please review?", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537360914", "createdAt": "2020-12-07T09:39:19Z", "author": {"login": "harshbafna"}, "path": "docker/README.md", "diffHunk": "@@ -38,7 +38,7 @@ For creating GPU based image with the latest CUDA version PyTorch supports (ex.\n DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 -t torchserve:latest .\n ```\n \n-For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cuda92\", \"cuda101\":\n+For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cu92\", \"cu101\", \"cu102\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzOTQ1MA=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTAyODEwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODo1Mjo0MFrOH__WYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDowNjo1NVrOIAoW0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MDI1Ng==", "bodyText": "requirements_cu102.txt doesn't exist. Please add it\nI don't like the idea of having users install dependencies two different ways. We already have an install_dependencies.py script and this pip install should be part of it", "url": "https://github.com/pytorch/serve/pull/836#discussion_r536860256", "createdAt": "2020-12-05T18:52:40Z", "author": {"login": "maaquib"}, "path": "README.md", "diffHunk": "@@ -40,16 +40,29 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n 2. Install python pre-requisite packages\n \n- - For CPU or GPU-Cuda 10.2\n+ - For CPU or latest supported CUDA version for Torch 1.6\n \n     ```bash\n     pip install -U -r requirements.txt\n     ```\n+   \n+ - For GPU with Cuda 10.2\n+\n+    ```bash\n+    pip install -U -r requirements_cu102.txt -f https://download.pytorch.org/whl/torch_stable.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzODg4Ng==", "bodyText": "@maaquib: install_dependencies script does a lot more things than just installing the python packages and java and is mainly targeted for developers.\nAdded the requirements file for CUDA 10.2", "url": "https://github.com/pytorch/serve/pull/836#discussion_r536938886", "createdAt": "2020-12-06T02:41:00Z", "author": {"login": "harshbafna"}, "path": "README.md", "diffHunk": "@@ -40,16 +40,29 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n 2. Install python pre-requisite packages\n \n- - For CPU or GPU-Cuda 10.2\n+ - For CPU or latest supported CUDA version for Torch 1.6\n \n     ```bash\n     pip install -U -r requirements.txt\n     ```\n+   \n+ - For GPU with Cuda 10.2\n+\n+    ```bash\n+    pip install -U -r requirements_cu102.txt -f https://download.pytorch.org/whl/torch_stable.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MDI1Ng=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MjYwOQ==", "bodyText": "@harshbafna So far the install from source was for people devs wanting to use latest TorchServe from master. We need to target two type of developers and have appropriate scripts / steps for both:\n\nData scientists and other devs who end to use TorchServe from master\nContributors to TorchServe who are adding new features/fixing bugs.\n\nThe main readmes are for #1 audience\nFor contributors we have the Contributing.md  page, please update the instructions there for people adding new features/fixes", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537092609", "createdAt": "2020-12-06T18:05:58Z", "author": {"login": "chauhang"}, "path": "README.md", "diffHunk": "@@ -40,16 +40,29 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n 2. Install python pre-requisite packages\n \n- - For CPU or GPU-Cuda 10.2\n+ - For CPU or latest supported CUDA version for Torch 1.6\n \n     ```bash\n     pip install -U -r requirements.txt\n     ```\n+   \n+ - For GPU with Cuda 10.2\n+\n+    ```bash\n+    pip install -U -r requirements_cu102.txt -f https://download.pytorch.org/whl/torch_stable.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MDI1Ng=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMzg1Mw==", "bodyText": "@chauhang: Currently the install_dependency script is only for setting up the dev environment. We can add another flag in the install_dependency.py file to take the environment parameter (developer, production) as input. The production flag will only install the bare minimum dependencies of JDK11 and required python packages.", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537203853", "createdAt": "2020-12-07T03:19:28Z", "author": {"login": "harshbafna"}, "path": "README.md", "diffHunk": "@@ -40,16 +40,29 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n 2. Install python pre-requisite packages\n \n- - For CPU or GPU-Cuda 10.2\n+ - For CPU or latest supported CUDA version for Torch 1.6\n \n     ```bash\n     pip install -U -r requirements.txt\n     ```\n+   \n+ - For GPU with Cuda 10.2\n+\n+    ```bash\n+    pip install -U -r requirements_cu102.txt -f https://download.pytorch.org/whl/torch_stable.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MDI1Ng=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzMjExNQ==", "bodyText": "@chauhang: Could you please review #837 for these changes?", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537532115", "createdAt": "2020-12-07T14:06:55Z", "author": {"login": "harshbafna"}, "path": "README.md", "diffHunk": "@@ -40,16 +40,29 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n 2. Install python pre-requisite packages\n \n- - For CPU or GPU-Cuda 10.2\n+ - For CPU or latest supported CUDA version for Torch 1.6\n \n     ```bash\n     pip install -U -r requirements.txt\n     ```\n+   \n+ - For GPU with Cuda 10.2\n+\n+    ```bash\n+    pip install -U -r requirements_cu102.txt -f https://download.pytorch.org/whl/torch_stable.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MDI1Ng=="}, "originalCommit": {"oid": "b42667308a8e87a82f025850b3030376c6f6a00c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTA3Nzc2OnYy", "diffSide": "RIGHT", "path": "ts_scripts/utils.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODoxODo0OVrOIANreA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzoyMToxMlrOIAUWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5NTAzMg==", "bodyText": "@harshbafna @maaquib Why are we pinning to 3.6 version? We need support for python >= 3.6", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537095032", "createdAt": "2020-12-06T18:18:49Z", "author": {"login": "chauhang"}, "path": "ts_scripts/utils.py", "diffHunk": "@@ -0,0 +1,20 @@\n+import os\n+import sys\n+\n+\n+def is_gpu_instance():\n+    return True if os.system(\"nvidia-smi\") == 0 else False\n+\n+\n+def is_conda_env():\n+    return True if os.system(\"conda\") == 0 else False\n+\n+\n+def check_python_version():\n+    req_version = (3, 6)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c56a686b6129ed904080cea5a8fb14da7b7bbac"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwNDMyOQ==", "bodyText": "@chauhang: The minor version check is for >=6 only in line no. #17. :-)", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537204329", "createdAt": "2020-12-07T03:21:12Z", "author": {"login": "harshbafna"}, "path": "ts_scripts/utils.py", "diffHunk": "@@ -0,0 +1,20 @@\n+import os\n+import sys\n+\n+\n+def is_gpu_instance():\n+    return True if os.system(\"nvidia-smi\") == 0 else False\n+\n+\n+def is_conda_env():\n+    return True if os.system(\"conda\") == 0 else False\n+\n+\n+def check_python_version():\n+    req_version = (3, 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5NTAzMg=="}, "originalCommit": {"oid": "0c56a686b6129ed904080cea5a8fb14da7b7bbac"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM5MDkyOnYy", "diffSide": "RIGHT", "path": "docker/build_image.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMzo1N1rOIA7sYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTo0ODowM1rOIBIJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0ODkzMQ==", "bodyText": "Add possible values for this option", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537848931", "createdAt": "2020-12-07T21:33:57Z", "author": {"login": "maaquib"}, "path": "docker/build_image.sh", "diffHunk": "@@ -16,7 +17,8 @@ do\n           echo \"-h, --help  show brief help\"\n           echo \"-b, --branch_name=BRANCH_NAME specify a branch_name to use\"\n           echo \"-g, --gpu specify to use gpu\"\n-          echo \"-c, --codebuild specify to created image for codebuild\"\n+          echo \"-bt, --buildtype specify to created image for codebuild\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0665ad64c201e02322b809890491a2c1415bdea0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1MjkyMg==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/836#discussion_r538052922", "createdAt": "2020-12-08T05:48:03Z", "author": {"login": "harshbafna"}, "path": "docker/build_image.sh", "diffHunk": "@@ -16,7 +17,8 @@ do\n           echo \"-h, --help  show brief help\"\n           echo \"-b, --branch_name=BRANCH_NAME specify a branch_name to use\"\n           echo \"-g, --gpu specify to use gpu\"\n-          echo \"-c, --codebuild specify to created image for codebuild\"\n+          echo \"-bt, --buildtype specify to created image for codebuild\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0ODkzMQ=="}, "originalCommit": {"oid": "0665ad64c201e02322b809890491a2c1415bdea0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQwMjYwOnYy", "diffSide": "RIGHT", "path": "ts_scripts/install_dependencies.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozNjozN1rOIA7y1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTo0NTo0N1rOIBIGAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MDU4Mg==", "bodyText": "This might have side affects if the user is running in a virtual env. Please verify.", "url": "https://github.com/pytorch/serve/pull/836#discussion_r537850582", "createdAt": "2020-12-07T21:36:37Z", "author": {"login": "maaquib"}, "path": "ts_scripts/install_dependencies.py", "diffHunk": "@@ -41,26 +49,30 @@ def install_jmeter(self):\n class Linux(Common):\n     def __init__(self):\n         super().__init__()\n+        os.system(f\"{self.sudo_cmd}apt-get update\")\n \n     def install_java(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n         os.system(f\"{self.sudo_cmd}apt-get install -y openjdk-11-jdk\")\n \n-    def install_node_packages(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n-        os.system(f\"{self.sudo_cmd}npm install -g newman newman-reporter-html markdown-link-check\")\n-\n     def install_nodejs(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n+        python_path = Path(sys.executable).resolve()\n         os.system(f\"{self.sudo_cmd}curl -sL https://deb.nodesource.com/setup_14.x | {self.sudo_cmd}bash -\")\n         os.system(f\"{self.sudo_cmd}apt-get install -y nodejs\")\n+        os.system(f\"{self.sudo_cmd}ln -sf {python_path} /usr/bin/python\")\n+        os.system(f\"{self.sudo_cmd}ln -sf /usr/bin/pip3 /usr/bin/pip\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0665ad64c201e02322b809890491a2c1415bdea0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1MjA5OA==", "bodyText": "@maaquib: The nodejs installation doesn't impact Conda or any virtual env's python. Validated on virtualenv as well.\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ which python\n/home/ubuntu/pyenv/pytorchenv/bin/python\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ which pip\n/home/ubuntu/pyenv/pytorchenv/bin/pip\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ python --version\nPython 3.7.5\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ git checkout build_fixes\nBranch 'build_fixes' set up to track remote branch 'build_fixes' from 'origin'.\nSwitched to a new branch 'build_fixes'\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ python ts_scripts/install_dependencies.py \n<snip : install_dependencies_logs>\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ \n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ \n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ \n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ which pip\n/home/ubuntu/pyenv/pytorchenv/bin/pip\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ which python\n/home/ubuntu/pyenv/pytorchenv/bin/python\n(pytorchenv) ubuntu@ip-172-31-22-254:~/serve$ python --version\nPython 3.7.5", "url": "https://github.com/pytorch/serve/pull/836#discussion_r538052098", "createdAt": "2020-12-08T05:45:47Z", "author": {"login": "harshbafna"}, "path": "ts_scripts/install_dependencies.py", "diffHunk": "@@ -41,26 +49,30 @@ def install_jmeter(self):\n class Linux(Common):\n     def __init__(self):\n         super().__init__()\n+        os.system(f\"{self.sudo_cmd}apt-get update\")\n \n     def install_java(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n         os.system(f\"{self.sudo_cmd}apt-get install -y openjdk-11-jdk\")\n \n-    def install_node_packages(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n-        os.system(f\"{self.sudo_cmd}npm install -g newman newman-reporter-html markdown-link-check\")\n-\n     def install_nodejs(self):\n-        os.system(f\"{self.sudo_cmd}apt-get update\")\n+        python_path = Path(sys.executable).resolve()\n         os.system(f\"{self.sudo_cmd}curl -sL https://deb.nodesource.com/setup_14.x | {self.sudo_cmd}bash -\")\n         os.system(f\"{self.sudo_cmd}apt-get install -y nodejs\")\n+        os.system(f\"{self.sudo_cmd}ln -sf {python_path} /usr/bin/python\")\n+        os.system(f\"{self.sudo_cmd}ln -sf /usr/bin/pip3 /usr/bin/pip\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MDU4Mg=="}, "originalCommit": {"oid": "0665ad64c201e02322b809890491a2c1415bdea0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjE0ODM1OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTowNDoxOVrOIBxgBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxOTozMFrOICAbBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMDUwMw==", "bodyText": "@maheshambule  I had tested with Py37 on conda recently. Why are we adding Py38 as as a min?", "url": "https://github.com/pytorch/serve/pull/836#discussion_r538730503", "createdAt": "2020-12-08T19:04:19Z", "author": {"login": "maaquib"}, "path": "README.md", "diffHunk": "@@ -25,35 +25,37 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n ## Install TorchServe\n \n-1. Install Java 11\n+1. Install dependencies\n \n-    For Ubuntu\n-    ```bash\n-    sudo apt-get install openjdk-11-jdk\n-    ```\n-   \n-   For Mac\n-    ```bash\n-    brew tap AdoptOpenJDK/openjdk\n-    brew cask install adoptopenjdk11\n-    ```\n+Note: For Conda, Python 3.8 is required to run Torchserve.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1ecd37bdb49df95464f0e8d17a04b870216b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDk4Mg==", "bodyText": "@maaquib: This is because the currently published conda-binaries are only compatible with Py38. It was already there in the documentation, just moved to a different place.", "url": "https://github.com/pytorch/serve/pull/836#discussion_r538974982", "createdAt": "2020-12-09T03:19:30Z", "author": {"login": "harshbafna"}, "path": "README.md", "diffHunk": "@@ -25,35 +25,37 @@ TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n ## Install TorchServe\n \n-1. Install Java 11\n+1. Install dependencies\n \n-    For Ubuntu\n-    ```bash\n-    sudo apt-get install openjdk-11-jdk\n-    ```\n-   \n-   For Mac\n-    ```bash\n-    brew tap AdoptOpenJDK/openjdk\n-    brew cask install adoptopenjdk11\n-    ```\n+Note: For Conda, Python 3.8 is required to run Torchserve.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMDUwMw=="}, "originalCommit": {"oid": "fbb1ecd37bdb49df95464f0e8d17a04b870216b5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQyMTE3OnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo0MjoxOFrOIB833Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo0MjoxOFrOIB833Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNjgyOQ==", "bodyText": "Please replace 1.0 with current latest version of another tag like \"dev-latest\"", "url": "https://github.com/pytorch/serve/pull/836#discussion_r538916829", "createdAt": "2020-12-09T00:42:18Z", "author": {"login": "chauhang"}, "path": "docker/README.md", "diffHunk": "@@ -26,143 +25,177 @@ git clone https://github.com/pytorch/serve.git\n \n # Create TorchServe docker image\n \n-For creating CPU based image :\n+Use `build_image.sh` script to build the docker images. The script builds the `production`, `dev` and `codebuild` docker images.\n \n-```bash\n-DOCKER_BUILDKIT=1 docker build --file Dockerfile -t torchserve:latest .\n-```\n+| Parameter | Desciption |\n+|------|------|\n+|-h, --help|Show script help|\n+|-b, --branch_name|Specify a branch name to use. Default: master |\n+|-g, --gpu|Build image with GPU based ubuntu base image|\n+|-bt, --buildtype|Which type of docker image to build. Can be one of : production, dev, codebuild|\n+|-t, --tag|Tag name for image. If not specified, script uses torchserv default tag names.|\n+|-cv, --cudaversion| Specify to cuda version to use. Supported values `cu92`, `cu101`, `cu102`. Default `cu102`|\n+\n+**PRODUCTION ENVIRONMENT IMAGES**\n+\n+Creates a docker image with publicly available `torchserve` and `torch-model-archiver` binaries installed.\n \n-For creating GPU based image with the latest CUDA version PyTorch supports (ex. CUDA 10.2 as of Oct 2020):\n+ - For creating CPU based image :\n \n ```bash\n-DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 -t torchserve:latest .\n+./build_image.sh\n ```\n \n-For creating GPU based image with older CUDA versions (ex. CUDA 10.1), make sure that the `--build-arg CUDA_VERSION=<version>` is specified. The version is in the format \"cuda92\", \"cuda101\":\n+ - For creating GPU based image (Default cuda 10.2):\n \n ```bash\n-DOCKER_BUILDKIT=1 docker build --file Dockerfile --build-arg BASE_IMAGE=nvidia/cuda:10.1-cudnn7-runtime-ubuntu18.04 --build-arg CUDA_VERSION=cu101 -t torchserve:latest .\n+./build_image.sh -g\n ```\n \n-## Start a container with a TorchServe image\n-\n-The following examples will start the container with 8080/81 port exposed to outer-world/localhost.\n+ - For creating GPU based image with cuda version 10.1:\n \n-#### Start CPU container\n+```bash\n+./build_image.sh -g -cv cu101\n+```\n \n-For the latest version, you can use the `latest` tag:\n+ - For creating GPU based image with cuda version 9.2:\n \n ```bash\n-docker run --rm -it -p 8080:8080 -p 8081:8081 pytorch/torchserve:latest\n+./build_image.sh -g -cv cu92\n ```\n \n-For specific versions you can pass in the specific tag to use (ex: pytorch/torchserve:0.1.1-cpu):\n+ - For creating image with a custom tag:\n \n ```bash\n-docker run --rm -it -p 8080:8080 -p 8081:8081 pytorch/torchserve:0.1.1-cpu\n+./build_image.sh -t torchserve:1.0\n ```\n \n-#### Start GPU container\n+**DEVELOPER ENVIRONMENT IMAGES**\n \n-For GPU latest image with gpu devices 1 and 2:\n+Creates a docker image with `torchserve` and `torch-model-archiver` installed from source.\n+\n+- For creating CPU based image :\n \n ```bash\n-docker run --rm -it --gpus '\"device=1,2\"' -p 8080:8080 -p 8081:8081 pytorch/torchserve:latest-gpu\n+./build_image.sh -bt dev\n ```\n \n-For specific versions you can pass in the specific tag to use (ex: 0.1.1-cuda10.1-cudnn7-runtime):\n+- For creating CPU based image with a different branch:\n \n ```bash\n-docker run --rm -it --gpus all -p 8080:8080 -p 8081:8081 pytorch/torchserve:0.1.1-cuda10.1-cudnn7-runtime\n+./build_image.sh -bt dev -b my_branch\n ```\n \n-For the latest version, you can use the `latest-gpu` tag:\n+- For creating GPU based image (Default cuda 10.2):\n \n ```bash\n-docker run --rm -it --gpus all -p 8080:8080 -p 8081:8081 torchserve:gpu-latest\n+./build_image.sh -bt dev -g\n ```\n \n-#### Accessing TorchServe APIs inside container\n+- For creating GPU based image with a different branch:\n \n-The TorchServe's inference and management APIs can be accessed on localhost over 8080 and 8081 ports respectively. Example :\n+```bash\n+./build_image.sh -bt dev -g -b my_branch\n+```\n+\n+ - For creating GPU based image with cuda version 10.1:\n \n ```bash\n-curl http://localhost:8080/ping\n+./build_image.sh -bt dev -g -cv cu101\n ```\n \n-# Create TorchServe docker image from source\n+ - For creating GPU based image with cuda version 9.2:\n \n-The following are examples on how to use the `build_image.sh` script to build Docker images from source to support CPU or GPU inference.\n+```bash\n+./build_image.sh -bt dev -g -cv cu92\n+```\n \n-To build the TorchServe image for a CPU device using the `master` branch, use the following command:\n+ - For creating image with a custom tag:\n \n ```bash\n-./build_image.sh\n+./build_image.sh -bt dev -t torchserve-dev:1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0212146ae1e3ac7159ad21105713b83550149c"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}