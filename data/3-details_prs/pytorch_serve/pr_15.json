{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NjYzMjU3", "number": 15, "title": "Versioning support in TorchServe", "bodyText": "", "createdAt": "2020-01-20T06:21:09Z", "url": "https://github.com/pytorch/serve/pull/15", "merged": true, "mergeCommit": {"oid": "c40a8a3326e4cd3433581f0c902eed454ba3c882"}, "closed": true, "closedAt": "2020-01-31T14:18:29Z", "author": {"login": "harshbafna"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8GbJYAH2gAyMzY0NjYzMjU3OjNmZjQ5ODc5NzlmODdiMzAwNDMwNjdlNDAzMzZmY2M1MjhjMTZmZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_AcjqgH2gAyMzY0NjYzMjU3OmQ2YmI5MzViMjZmYmM1ZmIyNTJlOTMyYzllOGFjMGVmYWRhOWZhNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3ff4987979f87b30043067e40336fcc528c16ff1", "committedDate": "2020-01-20T06:19:28Z", "message": "added intial place holders for versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8937e13b5e5b79ba2c4d71bcc5303ee0ba82221", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/e8937e13b5e5b79ba2c4d71bcc5303ee0ba82221", "committedDate": "2020-01-21T07:13:07Z", "message": "Support for versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d729fc68f4010ee3f8dac85b9bbaa6588164cdc", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2d729fc68f4010ee3f8dac85b9bbaa6588164cdc", "committedDate": "2020-01-21T08:24:29Z", "message": "updated inference apis and worker scaling logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5fcc2f8994c489b336677bd5203bd2a5d3c7f2", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/df5fcc2f8994c489b336677bd5203bd2a5d3c7f2", "committedDate": "2020-01-21T09:04:39Z", "message": "adding getModel to hide version manager class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94f94faf63a8514e9717a0f0c8e0a0de50ff627", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b94f94faf63a8514e9717a0f0c8e0a0de50ff627", "committedDate": "2020-01-21T10:24:18Z", "message": "updated management apis and fixed predict api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed924258b407fd1e834aaece413aea768204539", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/fed924258b407fd1e834aaece413aea768204539", "committedDate": "2020-01-21T12:02:17Z", "message": "added version support in model archive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b971b2827fb4db0132107330691dce4e9d819e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d0b971b2827fb4db0132107330691dce4e9d819e", "committedDate": "2020-01-21T12:17:03Z", "message": "added changes to describe model api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "771abe15262cc030a3416100674a1c4d03e8c16a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/771abe15262cc030a3416100674a1c4d03e8c16a", "committedDate": "2020-01-21T12:42:17Z", "message": "reverted unneccessary version change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd61003b8fab05bea03f7dffe8ba54c7e8052ba3", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/fd61003b8fab05bea03f7dffe8ba54c7e8052ba3", "committedDate": "2020-01-21T12:52:48Z", "message": "Fixed issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2524f9bbf04b7e5c5e479eb90c4cb26f4db2dd", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/ef2524f9bbf04b7e5c5e479eb90c4cb26f4db2dd", "committedDate": "2020-01-21T12:53:04Z", "message": "Merge branch 'versioning' of https://github.com/pytorch/serve into versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78f9031f5e6fcc7ae0a55234c5024637b1b475c", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/f78f9031f5e6fcc7ae0a55234c5024637b1b475c", "committedDate": "2020-01-21T13:00:18Z", "message": "fixed model name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb509358554c020380230a9adea02ddb8e8755c2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/eb509358554c020380230a9adea02ddb8e8755c2", "committedDate": "2020-01-21T13:29:37Z", "message": "updated test mar files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/dc36803e42d4fec9aa4b5f88a9a88df954d8add9", "committedDate": "2020-01-21T14:47:54Z", "message": "changes for threads/worker naming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mjc5ODk0", "url": "https://github.com/pytorch/serve/pull/15#pullrequestreview-346279894", "createdAt": "2020-01-22T00:21:37Z", "commit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMTozOFrOFgNKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMzoyN1rOFgNLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDMxMw==", "bodyText": "remove dead code", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314313", "createdAt": "2020-01-22T00:21:38Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDQ3OA==", "bodyText": "this removes unregisterModel() is the impl for this coming in a future commit?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314478", "createdAt": "2020-01-22T00:22:15Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDYzMA==", "bodyText": "this removes support for updating models. is the impl for this coming in a future model?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314630", "createdAt": "2020-01-22T00:22:50Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDc2Mw==", "bodyText": "it's worthwhile changing the method name to getDefaultModels() or something of the nature.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369314763", "createdAt": "2020-01-22T00:23:27Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -98,65 +101,78 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-\n-        Model model = new Model(archive, configManager.getJobQueueSize());\n-        model.setBatchSize(batchSize);\n-        model.setMaxBatchDelay(maxBatchDelay);\n-        model.setResponseTimeout(responseTimeout);\n-        Model existingModel = models.putIfAbsent(modelName, model);\n-        if (existingModel != null) {\n-            // model already exists\n-            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-        }\n-        logger.info(\"Model {} loaded.\", model.getModelName());\n+        \n+//        Model model = new Model(archive, configManager.getJobQueueSize());\n+//        model.setBatchSize(batchSize);\n+//        model.setMaxBatchDelay(maxBatchDelay);\n+//        model.setResponseTimeout(responseTimeout);\n+//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n+//        if (existingModel != null) {\n+//            // model already exists\n+//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n+//        }\n+        \n+        Model tempModel = createModel(archive, configManager,\n+\t\t\t      batchSize, maxBatchDelay,\n+\t\t\t      responseTimeout, preloadModel);\n+        \n+        createVersionedModel(tempModel, versionId);\n+\n+        logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n     public HttpResponseStatus unregisterModel(String modelName) {\n-        Model model = models.remove(modelName);\n-        if (model == null) {\n-            logger.warn(\"Model not found: \" + modelName);\n-            return HttpResponseStatus.NOT_FOUND;\n-        }\n-        model.setMinWorkers(0);\n-        model.setMaxWorkers(0);\n-        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-\n-        try {\n-            httpResponseStatus = futureStatus.get();\n-        } catch (InterruptedException | ExecutionException e) {\n-            logger.warn(\"Process was interrupted while cleaning resources.\");\n-            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        // Only continue cleaning if resource cleaning succeeded\n-        if (httpResponseStatus == HttpResponseStatus.OK) {\n-            model.getModelArchive().clean();\n-            startupModels.remove(modelName);\n-            logger.info(\"Model {} unregistered.\", modelName);\n-        } else {\n-            models.put(modelName, model);\n-        }\n+//        Model model = modelsNameMap.remove(modelName);\n+//        if (model == null) {\n+//            logger.warn(\"Model not found: \" + modelName);\n+//            return HttpResponseStatus.NOT_FOUND;\n+//        }\n+//        model.setMinWorkers(0);\n+//        model.setMaxWorkers(0);\n+//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n+//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+//\n+//        try {\n+//            httpResponseStatus = futureStatus.get();\n+//        } catch (InterruptedException | ExecutionException e) {\n+//            logger.warn(\"Process was interrupted while cleaning resources.\");\n+//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+//        }\n+//\n+//        // Only continue cleaning if resource cleaning succeeded\n+//        if (httpResponseStatus == HttpResponseStatus.OK) {\n+//            model.getModelArchive().clean();\n+//            startupModels.remove(modelName);\n+//            logger.info(\"Model {} unregistered.\", modelName);\n+//        } else {\n+//            modelsNameMap.put(modelName, model);\n+//        }\n+    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n \n         return httpResponseStatus;\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n             String modelName, int minWorkers, int maxWorkers) {\n-        Model model = models.get(modelName);\n-        if (model == null) {\n-            throw new AssertionError(\"Model not found: \" + modelName);\n-        }\n-        model.setMinWorkers(minWorkers);\n-        model.setMaxWorkers(maxWorkers);\n-        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n-        return wlm.modelChanged(model);\n+//        Model model = modelsNameMap.get(modelName);\n+//        if (model == null) {\n+//            throw new AssertionError(\"Model not found: \" + modelName);\n+//        }\n+//        model.setMinWorkers(minWorkers);\n+//        model.setMaxWorkers(maxWorkers);\n+//        logger.debug(\"updateModel: {}, count: {}\", modelName, minWorkers);\n+        return wlm.modelChanged(null);\n     }\n \n     public Map<String, Model> getModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4987979f87b30043067e40336fcc528c16ff1"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjgxNTUz", "url": "https://github.com/pytorch/serve/pull/15#pullrequestreview-346281553", "createdAt": "2020-01-22T00:27:15Z", "commit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyNzoxNVrOFgNPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MzoxOFrOFgNfjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNTcxMQ==", "bodyText": "nice.\nDoes this propagate upwards to the HTTP req handler level?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369315711", "createdAt": "2020-01-22T00:27:15Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,10 +127,11 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n+        Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNjQ4NA==", "bodyText": "any particular reason this is public? We don't expect this to be a part of http req handling codebase do we?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369316484", "createdAt": "2020-01-22T00:30:16Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA==", "bodyText": "If we are adopting this method to compute a unique key for model and version combo then we should somehow propagate this info (perhaps through documentation in README) to the users.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369317330", "createdAt": "2020-01-22T00:33:24Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzY4Mg==", "bodyText": "We probably need to check for clash of versions? What's to prevent user from entering 100 model archives with the same version?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369317682", "createdAt": "2020-01-22T00:34:50Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -101,78 +101,108 @@ public ModelArchive registerModel(\n         }\n \n         archive.validate();\n-        \n-//        Model model = new Model(archive, configManager.getJobQueueSize());\n-//        model.setBatchSize(batchSize);\n-//        model.setMaxBatchDelay(maxBatchDelay);\n-//        model.setResponseTimeout(responseTimeout);\n-//        Model existingModel = modelsNameMap.putIfAbsent(modelName, model);\n-//        if (existingModel != null) {\n-//            // model already exists\n-//            throw new ConflictStatusException(\"Model \" + modelName + \" is already registered.\");\n-//        }\n-        \n-        Model tempModel = createModel(archive, configManager,\n-\t\t\t      batchSize, maxBatchDelay,\n-\t\t\t      responseTimeout, preloadModel);\n-        \n+\n+        Model tempModel =\n+                createModel(archive, configManager, batchSize, maxBatchDelay, responseTimeout);\n+\n         createVersionedModel(tempModel, versionId);\n \n         logger.info(\"Model {} loaded.\", tempModel.getModelName());\n \n         return archive;\n     }\n \n-    public HttpResponseStatus unregisterModel(String modelName) {\n-//        Model model = modelsNameMap.remove(modelName);\n-//        if (model == null) {\n-//            logger.warn(\"Model not found: \" + modelName);\n-//            return HttpResponseStatus.NOT_FOUND;\n-//        }\n-//        model.setMinWorkers(0);\n-//        model.setMaxWorkers(0);\n-//        CompletableFuture<HttpResponseStatus> futureStatus = wlm.modelChanged(model);\n-//        HttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n-//\n-//        try {\n-//            httpResponseStatus = futureStatus.get();\n-//        } catch (InterruptedException | ExecutionException e) {\n-//            logger.warn(\"Process was interrupted while cleaning resources.\");\n-//            httpResponseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-//        }\n-//\n-//        // Only continue cleaning if resource cleaning succeeded\n-//        if (httpResponseStatus == HttpResponseStatus.OK) {\n-//            model.getModelArchive().clean();\n-//            startupModels.remove(modelName);\n-//            logger.info(\"Model {} unregistered.\", modelName);\n-//        } else {\n-//            modelsNameMap.put(modelName, model);\n-//        }\n-    \tHttpResponseStatus httpResponseStatus = HttpResponseStatus.OK;\n+    private Model createModel(\n+            ModelArchive archive,\n+            ConfigManager configManager2,\n+            int batchSize,\n+            int maxBatchDelay,\n+            int responseTimeout) {\n+        Model model = new Model(archive, configManager.getJobQueueSize());\n+        model.setBatchSize(batchSize);\n+        model.setMaxBatchDelay(maxBatchDelay);\n+        model.setResponseTimeout(responseTimeout);\n+\n+        return model;\n+    }\n+\n+    private void createVersionedModel(Model model, String versionId) {\n+        // TODO Auto-generated method stub\n+        ModelVersionedRefs modelVersionRef = new ModelVersionedRefs();\n+        modelVersionRef.addVersionModel(model, versionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODY3Mw==", "bodyText": "since we are not overloading here, let's force them to send a valid version ID by throwing exception in else-block.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369318673", "createdAt": "2020-01-22T00:38:48Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {\n+        // place holder only for now\n     }\n \n     /**\n-     * Adds a new version of the Model to the Map if it does not exist\n-     * Sets this version as the default version of the model which is\n-     * automatically served on the next request to this model.\n-     * If it already exists in the map, throws an exception with conflict\n-     * status\n+     * Adds a new version of the Model to the Map if it does not exist Sets this version as the\n+     * default version of the model which is automatically served on the next request to this model.\n+     * If it already exists in the map, throws an exception with conflict status\n      *\n-     * @param model: Model object with all the parameters initialized\n-     *         as desired\n-     * @param versionId: String obj of version ID from the manifest\n+     * @param model: Model object with all the parameters initialized as desired\n+     * @param versionId: String version ID from the manifest\n      * @return None\n      */\n-    public void addVersionModel(Model model, String versionId)\n-\tthrows InvalidModelVersionException, InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\t_checkVersionCapacity();\n-\tif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null)\n-\t    throw new InvalidModelVersionException(\n-\t\t\t\t\t\t   \"Model \" + model.getModelName() + \" is already registered.\");\n-\tthis.setDefaultVersion(versionId);\n+    public void addVersionModel(Model model, String versionId) throws InvalidModelVersionException {\n+        logger.debug(\"Adding new version {} for model {}\", versionId, model.getModelName());\n+\n+        if (versionId == null) {\n+            throw new InvalidModelVersionException(\"Model version not found. \");\n+        }\n+\n+        validateVersionId(versionId);\n+        checkVersionCapacity();\n+\n+        if (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n+            throw new InvalidModelVersionException(\n+                    \"Model \" + model.getModelName() + \" is already registered.\");\n+        }\n+\n+        // TODO what if user wants to keep existing default as it is?\n+        this.setDefaultVersion(versionId);\n     }\n \n     /**\n      * Returns a String object of the default version of this Model\n-     * @return      String obj of the current default Version\n+     *\n+     * @return String obj of the current default Version\n      */\n     public String getDefaultVersion() {\n-\treturn this.defaultVersion.toString();\n+        return this.defaultVersion.toString();\n     }\n \n     /**\n-     * Sets the default version of the model to the version in\n-     * arg\n-     * @param       A valid String obj with version to set default\n-     * @return      None\n+     * Sets the default version of the model to the version in arg\n+     *\n+     * @param A valid String obj with version to set default\n+     * @return None\n      */\n-    public void setDefaultVersion(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\tif (this.modelsVersionMap.get(Double.valueOf(versionId)) == null)\n-\t    throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n-\tthis.defaultVersion = Double.valueOf(versionId);\n+    public void setDefaultVersion(String versionId) throws InvalidModelVersionException {\n+        validateVersionId(versionId);\n+        Model model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new InvalidModelVersionException(\"Can't set default to: \" + versionId);\n+        }\n+\n+        logger.debug(\"Setting default version to {} for model {}\", versionId, model.getModelName());\n+        this.defaultVersion = Double.valueOf(versionId);\n     }\n \n     /**\n-     * Removes the specified version of the model from the Map\n-     * If it's the default version then throws an exception\n-     * The Client is responsible for setting a new default\n-     * prior to deleting the current default\n+     * Removes the specified version of the model from the Map If it's the default version then\n+     * throws an exception The Client is responsible for setting a new default prior to deleting the\n+     * current default\n      *\n-     * @param  A String specifying a valid non-default version Id\n-     * @return On Success - a String specifying the new default version Id\n-     *         On Failure - throws InvalidModelVersionException\n+     * @param A String specifying a valid non-default version Id\n+     * @return On Success - Removed model for given version Id\n+     * @throws On Failure - throws InvalidModelVersionException and ModelNotFoundException\n      */\n-    public String removeVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\tif (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0) {\n-\t    throw new InvalidModelVersionException(\"Can't remove default version: \" + versionId);\n-\t}\n-\treturn this.defaultVersion.toString();\n+    public Model removeVersionModel(String versionId)\n+            throws InvalidModelVersionException, ModelNotFoundException {\n+        if (versionId == null) {\n+            versionId = this.getDefaultVersion();\n+        } else {\n+            validateVersionId(versionId);\n+        }\n+\n+        if (this.defaultVersion.compareTo(Double.valueOf(versionId)) == 0\n+                && modelsVersionMap.size() > 1) {\n+            throw new InvalidModelVersionException(\n+                    String.format(\"Can't remove default version: %s\", versionId));\n+        }\n+\n+        Model model = this.modelsVersionMap.remove(Double.valueOf(versionId));\n+        if (model == null) {\n+            throw new ModelNotFoundException(\n+                    String.format(\"Model version: %s not found\", versionId));\n+        }\n+\n+        logger.debug(\"Removed model: {} version: {}\", model.getModelName(), versionId);\n+\n+        return model;\n     }\n \n     /**\n      * Returns the Model obj corresponding to the version provided\n      *\n-     * @param  A String specifying a valid version Id\n-     * @return On Success - a Model Obj previously registered\n-     *         On Failure - null\n+     * @param A String specifying a valid version Id\n+     * @return On Success - a Model Obj previously registered On Failure - null\n      */\n-    public Model getVersionModel(String versionId)\n-\tthrows InvalidModelVersionException {\n-\t_validateVersionId(versionId);\n-\treturn this.modelsVersionMap.get(Double.valueOf(versionId));\n-    }\n+    public Model getVersionModel(String versionId) throws InvalidModelVersionException {\n+        Model model = null;\n+        if (versionId != null) {\n+            validateVersionId(versionId);\n+            model = this.modelsVersionMap.get(Double.valueOf(versionId));\n+        } else {\n+            model = this.getDefaultModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxODk5Ng==", "bodyText": "not sure if this convention is followed in Java of using '_' ahead of a privately used function in a class? I don't see any other practice/convention used in this project.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369318996", "createdAt": "2020-01-22T00:40:01Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -25,111 +18,143 @@ public ModelVersionedRefs() {\n         this.modelsVersionMap = new ConcurrentHashMap<>();\n     }\n \n-    private void _validateVersionId(String v)\n-\tthrows InvalidModelVersionException, NumberFormatException {\n-\tDouble vd = Double.valueOf(v);\n-\tif (vd <= Double.valueOf(\"0.0\"))\n-\t    throw new InvalidModelVersionException(\"Model Version is invalid: \" + v);\n+    private void validateVersionId(String v)\n+            throws InvalidModelVersionException, NumberFormatException {\n+        // TODO add exception handling for NumberFormatException\n+        Double vd = Double.valueOf(v);\n+        if (vd <= Double.valueOf(\"0.0\")) {\n+            throw new InvalidModelVersionException(\"Model version is invalid: \" + v);\n+        }\n     }\n \n-    private void _checkVersionCapacity() {\n-\t// place holder only for now\n+    private void checkVersionCapacity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTE2Nw==", "bodyText": "indentation looks a little off here ??", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369319167", "createdAt": "2020-01-22T00:40:38Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTgyMg==", "bodyText": "Is this a new response we are sending or has it been around? Does the client know or care about what this health status is? Why not send, 500 with a hint about 'scaling'", "url": "https://github.com/pytorch/serve/pull/15#discussion_r369319822", "createdAt": "2020-01-22T00:43:18Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -203,9 +240,37 @@ public void workerStatus(final ChannelHandlerContext ctx) {\n                     String response = \"Healthy\";\n                     int numWorking = 0;\n                     int numScaled = 0;\n-                    for (Map.Entry<String, Model> m : modelsNameMap.entrySet()) {\n+                    for (Map.Entry<String, ModelVersionedRefs> m : modelsNameMap.entrySet()) {\n+                        numScaled += m.getValue().getDefaultModel().getMinWorkers();\n+                        numWorking +=\n+                                wlm.getNumRunningWorkers(\n+                                        m.getValue().getDefaultModel().getModelVersionName());\n+                    }\n+\n+                    if ((numWorking > 0) && (numWorking < numScaled)) {\n+                        response = \"Partial Healthy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 225}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6e81e84e0730749e53401df9c98e1f20e00ab0", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2c6e81e84e0730749e53401df9c98e1f20e00ab0", "committedDate": "2020-01-22T09:09:21Z", "message": "added check to re-add default version on unregister failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e57607f82d9e7f53acd6c599abfd940d0768def", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/3e57607f82d9e7f53acd6c599abfd940d0768def", "committedDate": "2020-01-22T09:43:54Z", "message": "fixed pmd issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb3225386f7f6b8889052328c7bc9262624334a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ffb3225386f7f6b8889052328c7bc9262624334a", "committedDate": "2020-01-22T11:54:52Z", "message": "fixed muliple model version registration logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b1fb585bb6f98e0641b81bcbd8e874345c6b05", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/46b1fb585bb6f98e0641b81bcbd8e874345c6b05", "committedDate": "2020-01-22T12:44:00Z", "message": "updated error message while unregistering default model version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "684a6b86097e981db1dcceb2ac3b723ff2d70ffd", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/684a6b86097e981db1dcceb2ac3b723ff2d70ffd", "committedDate": "2020-01-22T13:55:01Z", "message": "added new api to change model version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90fb0479980e36fdd28494d291a2b82927d2423e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/90fb0479980e36fdd28494d291a2b82927d2423e", "committedDate": "2020-01-22T14:14:59Z", "message": "incorporated code review comments and updated UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9437ca78aade21d04b75ea8ee1a309f0c9a08474", "author": {"user": {"login": "alexwong", "name": "Alex Wong"}}, "url": "https://github.com/pytorch/serve/commit/9437ca78aade21d04b75ea8ee1a309f0c9a08474", "committedDate": "2020-01-22T21:44:04Z", "message": "Add dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b90fcef49fe491fcfc7575c3d92c1ac2144223", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/82b90fcef49fe491fcfc7575c3d92c1ac2144223", "committedDate": "2020-01-23T07:16:45Z", "message": "enhanced describe api to describe all model vesrions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5de60d8d47c70d8e5fd0a57a4badf6c81e6ed53", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a5de60d8d47c70d8e5fd0a57a4badf6c81e6ed53", "committedDate": "2020-01-23T11:16:54Z", "message": "generalised existing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc82b02ec9af876a04c6b5a8b76a9af17f2c2a82", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/fc82b02ec9af876a04c6b5a8b76a9af17f2c2a82", "committedDate": "2020-01-23T11:51:29Z", "message": "added describe api UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aff124be5d04c368525736c73989ffc0c1601f8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/5aff124be5d04c368525736c73989ffc0c1601f8", "committedDate": "2020-01-23T12:17:28Z", "message": "fixed model name in UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2c6521f0afecec2bcb96cefb2c921b759c96d3", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2c2c6521f0afecec2bcb96cefb2c921b759c96d3", "committedDate": "2020-01-23T12:56:40Z", "message": "added more test cases for versioned apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c4a5c280144a48612a42e43d7a7975d02e6c706", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/7c4a5c280144a48612a42e43d7a7975d02e6c706", "committedDate": "2020-01-23T13:17:33Z", "message": "added UT for versioned scaling up of model and negative test case to unregister default version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f86f4401f585a90f68edd470760d65be3508fa8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/9f86f4401f585a90f68edd470760d65be3508fa8", "committedDate": "2020-01-23T14:39:21Z", "message": "fixed UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed12d6007c3bd461e4624130eef7c2c30278094e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ed12d6007c3bd461e4624130eef7c2c30278094e", "committedDate": "2020-01-23T14:46:44Z", "message": "added missed mar file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe1b946979bac66cefae3a784bfbb4e219c36de", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/afe1b946979bac66cefae3a784bfbb4e219c36de", "committedDate": "2020-01-23T16:11:19Z", "message": "adding benchmark scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7f1488df4e072c83121badae1ece6af3370f823", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f7f1488df4e072c83121badae1ece6af3370f823", "committedDate": "2020-01-23T17:10:08Z", "message": "commented test case for unregister default version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a310945188ffa84f075425bb4be71330a437f94", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/8a310945188ffa84f075425bb4be71330a437f94", "committedDate": "2020-01-23T17:20:38Z", "message": "changed expected type to array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1d18424953f43b000a5177f3e16ad2709af111", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/bd1d18424953f43b000a5177f3e16ad2709af111", "committedDate": "2020-01-23T17:48:54Z", "message": "pmd and formatting fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943e341020a2d46c10f2f4f72f5c26202ee34653", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/943e341020a2d46c10f2f4f72f5c26202ee34653", "committedDate": "2020-01-24T07:36:27Z", "message": "Updated docs for versioning related apis and replaced TS with TorchServe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86107596bddd601739a587288a4b5e6249e5c0bc", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/86107596bddd601739a587288a4b5e6249e5c0bc", "committedDate": "2020-01-24T13:17:32Z", "message": "updated java installation steps for mac to use openjdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/433716a59112b39ab2a3e85fd37e3383c3872be2", "committedDate": "2020-01-24T13:23:20Z", "message": "updated model url"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTU5NDUz", "url": "https://github.com/pytorch/serve/pull/15#pullrequestreview-348159453", "createdAt": "2020-01-24T19:00:36Z", "commit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowMDozN1rOFhnV-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToyNzo0NFrOFhoEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTkzMA==", "bodyText": "Remove hard-coded path.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370791930", "createdAt": "2020-01-24T19:00:37Z", "author": {"login": "alexwong"}, "path": "benchmarks/benchmark.py", "diffHunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"\n+Execute the TorchServe Benchmark.  For instructions, run with the --help flag\n+\"\"\"\n+\n+# pylint: disable=redefined-builtin\n+\n+import argparse\n+import itertools\n+import multiprocessing\n+import os\n+import pprint\n+import shutil\n+import subprocess\n+import sys\n+import time\n+import traceback\n+from functools import reduce\n+from urllib.request import urlretrieve\n+\n+import pandas as pd\n+\n+MODEL_STORE = \"/Users/harsh_bafna/model_store\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MjQ0Ng==", "bodyText": "Just a mention, but at some point we should stop having to support Python 2 as it's been deprecated as of 2020.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370792446", "createdAt": "2020-01-24T19:01:46Z", "author": {"login": "alexwong"}, "path": "benchmarks/install_dependencies.sh", "diffHunk": "@@ -0,0 +1,118 @@\n+#!/bin/bash\n+\n+# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+# This file contains the installation setup for running benchmarks on EC2 isntance.\n+# To run on a machine with GPU : ./install_dependencies True\n+# To run on a machine with CPU : ./install_dependencies False\n+set -ex\n+\n+sudo apt-get update\n+sudo apt-get -y upgrade\n+echo \"Setting up your Ubuntu machine to load test MMS\"\n+sudo apt-get install -y \\\n+        python \\\n+        python-pip \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTA3OA==", "bodyText": "segments[3].equals(\"predict\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370795078", "createdAt": "2020-01-24T19:08:02Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTE3MQ==", "bodyText": "segments[2].equals(\"predict\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370795171", "createdAt": "2020-01-24T19:08:15Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -128,18 +136,23 @@ private void handleLegacyPredict(\n             QueryStringDecoder decoder,\n             String[] segments)\n             throws ModelNotFoundException {\n-        if (segments.length < 3 || !\"predict\".equals(segments[2])) {\n+\n+        String modelVersion = null;\n+        if (segments.length == 4 && \"predict\".equals(segments[3])) {\n+            modelVersion = segments[2];\n+        } else if (segments.length < 3 || !\"predict\".equals(segments[2])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NjAwOA==", "bodyText": "Remove or add comment describing what this is for.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370796008", "createdAt": "2020-01-24T19:10:20Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/InferenceRequestHandler.java", "diffHunk": "@@ -151,7 +164,9 @@ private void predict(\n \n         if (HttpMethod.OPTIONS.equals(req.method())) {\n             ModelManager modelManager = ModelManager.getInstance();\n-            Model model = modelManager.getModels().get(modelName);\n+\n+            // ModelVersionedRefs model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Njc1OQ==", "bodyText": "I've been seeing a lot of checking of strings and stuff for segments which has I guess model name and model version. Would it be better to make it a class so we can directly check if a field is not null rather than checking length each time?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370796759", "createdAt": "2020-01-24T19:12:08Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzM1OQ==", "bodyText": "segments[4].equals(\"set-default\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797359", "createdAt": "2020-01-24T19:13:33Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -67,12 +67,20 @@ protected void handleRequest(\n                     throw new MethodNotAllowedException();\n                 }\n \n+                String modelVersion = null;\n+                if (segments.length == 4) {\n+                    modelVersion = segments[3];\n+                }\n                 if (HttpMethod.GET.equals(method)) {\n-                    handleDescribeModel(ctx, segments[2]);\n+                    handleDescribeModel(ctx, segments[2], modelVersion);\n                 } else if (HttpMethod.PUT.equals(method)) {\n-                    handleScaleModel(ctx, decoder, segments[2]);\n+                    if (segments.length == 5 && \"set-default\".equals(segments[4])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzYzNQ==", "bodyText": "Why contentEquals vs equals?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797635", "createdAt": "2020-01-24T19:14:06Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -84,7 +92,8 @@ protected void handleRequest(\n \n     private boolean isManagementReq(String[] segments) {\n         return segments.length == 0\n-                || ((segments.length == 2 || segments.length == 3) && segments[1].equals(\"models\"))\n+                || ((segments.length >= 2 && segments.length <= 4) && segments[1].equals(\"models\"))\n+                || (segments.length == 5 && segments[4].contentEquals(\"set-default\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Nzk1Ng==", "bodyText": "modelVersion.equals(\"all\")", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370797956", "createdAt": "2020-01-24T19:14:52Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5ODg4NQ==", "bodyText": "Still reading all of the code. But here we check for both model and model version (more strict) but throw a generic modelnotfound exception. If we're checking for model version, I think we should throw some versionnotfound exception (still reading through code so this may not exist in this PR) and only throw modelnotfound if the model was never registered (ie: no versions exist at all).", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370798885", "createdAt": "2020-01-24T19:16:58Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -121,14 +130,29 @@ private void handleListModels(ChannelHandlerContext ctx, QueryStringDecoder deco\n         NettyUtils.sendJsonResponse(ctx, list);\n     }\n \n-    private void handleDescribeModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleDescribeModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        Model model = modelManager.getModels().get(modelName);\n-        if (model == null) {\n-            throw new ModelNotFoundException(\"Model not found: \" + modelName);\n+        ArrayList<DescribeModelResponse> resp = new ArrayList<DescribeModelResponse>();\n+\n+        if (\"all\".equals(modelVersion)) {\n+            for (Map.Entry<Double, Model> m : modelManager.getAllModelVersions(modelName)) {\n+                resp.add(createModelResponse(modelManager, modelName, m.getValue()));\n+            }\n+        } else {\n+            Model model = modelManager.getModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTI5NA==", "bodyText": "Can unregister model handle modelVersion == null? I can see it being useful to not have to provide a version when unregistering.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370799294", "createdAt": "2020-01-24T19:17:49Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -216,32 +240,41 @@ private void handleRegisterModel(\n         updateModelWorkers(\n                 ctx,\n                 modelName,\n+                archive.getModelVersion(),\n                 initialWorkers,\n                 initialWorkers,\n                 synchronous,\n                 f -> {\n-                    modelManager.unregisterModel(archive.getModelName());\n+                    modelManager.unregisterModel(archive.getModelName(), archive.getModelVersion());\n                     return null;\n                 });\n     }\n \n-    private void handleUnregisterModel(ChannelHandlerContext ctx, String modelName)\n+    private void handleUnregisterModel(\n+            ChannelHandlerContext ctx, String modelName, String modelVersion)\n             throws ModelNotFoundException, InternalServerException, RequestTimeoutException {\n         ModelManager modelManager = ModelManager.getInstance();\n-        HttpResponseStatus httpResponseStatus = modelManager.unregisterModel(modelName);\n+        HttpResponseStatus httpResponseStatus =\n+                modelManager.unregisterModel(modelName, modelVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMDg5MQ==", "bodyText": "What are the acceptable formats for model versions (and the default ones that we generate)? I can potentially see this being an issue as some common model names used are model_pathlength ie: resnet_18.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370800891", "createdAt": "2020-01-24T19:21:21Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -48,6 +48,14 @@ public String getModelName() {\n         return modelArchive.getModelName();\n     }\n \n+    public String getModelVersionName() {\n+        return modelArchive.getModelName() + \"_\" + modelArchive.getModelVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzMzMA=="}, "originalCommit": {"oid": "dc36803e42d4fec9aa4b5f88a9a88df954d8add9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ2NA==", "bodyText": "Where does 25 length restriction come from? We should document this somewhere.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370802464", "createdAt": "2020-01-24T19:24:57Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerLifeCycle.java", "diffHunk": "@@ -117,8 +117,10 @@ public void startWorker(int port) throws WorkerInitializationException, Interrup\n                         \"W-\"\n                                 + port\n                                 + '-'\n-                                + model.getModelName()\n-                                        .substring(0, Math.min(model.getModelName().length(), 25));\n+                                + model.getModelVersionName()\n+                                        .substring(\n+                                                0,\n+                                                Math.min(model.getModelVersionName().length(), 25));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzI0Mg==", "bodyText": "I'm assuming modelversionname = old_model_name + version. Could cause problems is user passes in a long model name.", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803242", "createdAt": "2020-01-24T19:26:41Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -322,15 +324,15 @@ public void shutdown() {\n     }\n \n     private final String getWorkerName() {\n-        String modelName = model.getModelName();\n+        String modelName = model.getModelVersionName();\n         if (modelName.length() > 25) {\n             modelName = modelName.substring(0, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzU1NQ==", "bodyText": "Why are the eager and ts tests removed?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803555", "createdAt": "2020-01-24T19:27:21Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -284,75 +293,38 @@ private void testDescribeApi(Channel channel) throws InterruptedException {\n         Assert.assertEquals(result, noopApiResult);\n     }\n \n-    private void testLoadModel(Channel channel) throws InterruptedException {\n-        result = null;\n-        latch = new CountDownLatch(1);\n-        HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1,\n-                        HttpMethod.POST,\n-                        \"/models?url=noop.mar&model_name=noop_v1.0&runtime=python&synchronous=false\");\n-        channel.writeAndFlush(req);\n-        latch.await();\n-\n-        StatusResponse resp = JsonUtils.GSON.fromJson(result, StatusResponse.class);\n-        Assert.assertEquals(resp.getStatus(), \"Model \\\"noop_v1.0\\\" registered\");\n-    }\n-\n-    private void testLoadModelEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMzcyNw==", "bodyText": "Why are these removed?", "url": "https://github.com/pytorch/serve/pull/15#discussion_r370803727", "createdAt": "2020-01-24T19:27:44Z", "author": {"login": "alexwong"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -473,79 +435,62 @@ private void testListModels(Channel channel) throws InterruptedException {\n         Assert.assertEquals(resp.getModels().size(), 1);\n     }\n \n-    private void testDescribeModel(Channel channel) throws InterruptedException {\n+    private void testDescribeModel(\n+            Channel channel, String modelName, String requestVersion, String expectedVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n+        String requestURL = \"/models/\" + modelName;\n+        if (requestVersion != null) {\n+            requestURL += \"/\" + requestVersion;\n+        }\n         HttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.GET, \"/models/noop_v1.0\");\n+                new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, requestURL);\n         channel.writeAndFlush(req);\n         latch.await();\n \n-        DescribeModelResponse resp = JsonUtils.GSON.fromJson(result, DescribeModelResponse.class);\n-        Assert.assertTrue(resp.getWorkers().size() > 1);\n+        DescribeModelResponse[] resp =\n+                JsonUtils.GSON.fromJson(result, DescribeModelResponse[].class);\n+        if (\"all\".equals(requestVersion)) {\n+            Assert.assertTrue(resp.length >= 1);\n+        } else {\n+            Assert.assertTrue(resp.length == 1);\n+        }\n+        Assert.assertTrue(expectedVersion.equals(resp[0].getModelVersion()));\n     }\n \n-    private void testPredictions(Channel channel) throws InterruptedException {\n+    private void testSetDefault(Channel channel, String modelName, String defaultVersion)\n+            throws InterruptedException {\n         result = null;\n         latch = new CountDownLatch(1);\n-        DefaultFullHttpRequest req =\n-                new DefaultFullHttpRequest(\n-                        HttpVersion.HTTP_1_1, HttpMethod.POST, \"/predictions/noop\");\n-        req.content().writeCharSequence(\"data=test\", CharsetUtil.UTF_8);\n-        HttpUtil.setContentLength(req, req.content().readableBytes());\n-        req.headers()\n-                .set(\n-                        HttpHeaderNames.CONTENT_TYPE,\n-                        HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);\n-        channel.writeAndFlush(req);\n+        String requestURL = \"/models/\" + modelName + \"/\" + defaultVersion + \"/set-default\";\n \n-        latch.await();\n-        Assert.assertEquals(result, \"OK\");\n-    }\n-\n-    private void testPredictionsEager(Channel channel) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433716a59112b39ab2a3e85fd37e3383c3872be2"}, "originalPosition": 315}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977d052c6c6eeed693fa570691623d3c0eef8f36", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/977d052c6c6eeed693fa570691623d3c0eef8f36", "committedDate": "2020-01-27T12:28:22Z", "message": "Corrected benchmark test script per torchserve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818e6ec232386d47ce33ebf6caf092097cb75048", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/818e6ec232386d47ce33ebf6caf092097cb75048", "committedDate": "2020-01-28T05:52:44Z", "message": "Changes for review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09931c26f4fd6f6e998f3fe2ec21e91aad5fe025", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/09931c26f4fd6f6e998f3fe2ec21e91aad5fe025", "committedDate": "2020-01-28T05:59:02Z", "message": "updated formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7fd30f3302eacb031c406531f8540c189fcaa7", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2d7fd30f3302eacb031c406531f8540c189fcaa7", "committedDate": "2020-01-28T08:51:57Z", "message": "updated unregister failure test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79aa2ef787248d08b4c2c7d7283f8be56225e705", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/79aa2ef787248d08b4c2c7d7283f8be56225e705", "committedDate": "2020-01-28T09:21:11Z", "message": "added ModelVersionNotFoundException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9be4aaaa988976e6ffab40a6d2aa6c3ca6b7fa", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3b9be4aaaa988976e6ffab40a6d2aa6c3ca6b7fa", "committedDate": "2020-01-28T09:37:52Z", "message": "updated formatting and made changes as per UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a53bb5e62b2a712680f1c725208df3d3c2c085a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2a53bb5e62b2a712680f1c725208df3d3c2c085a", "committedDate": "2020-01-28T11:58:26Z", "message": "updated wlm to use ModelVersionName object as key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5afc163eb8ce404b3221439f501cb120793a639b", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/5afc163eb8ce404b3221439f501cb120793a639b", "committedDate": "2020-01-28T12:22:49Z", "message": "incorporated code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca207f5e98a89f0df73adc4f54d72e8ed696c29e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ca207f5e98a89f0df73adc4f54d72e8ed696c29e", "committedDate": "2020-01-28T12:30:47Z", "message": "removed versionedModelName length restriction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75d4bcbd0fe4ce4b11888253732f5bdadd9e9aa", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/e75d4bcbd0fe4ce4b11888253732f5bdadd9e9aa", "committedDate": "2020-01-28T12:40:45Z", "message": "Merge pull request #17 from pytorch/docker_init\n\nAdd example Dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c66c7c53848e329232bdf0c7626003b14b861ac", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/0c66c7c53848e329232bdf0c7626003b14b861ac", "committedDate": "2020-01-28T12:46:22Z", "message": "Added local python package installation support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a26d0cfec8c69f35d1d93a6758a299480a1fa8", "author": {"user": {"login": "dhaniram-kshirsagar", "name": null}}, "url": "https://github.com/pytorch/serve/commit/e7a26d0cfec8c69f35d1d93a6758a299480a1fa8", "committedDate": "2020-01-28T12:47:45Z", "message": "Fixed jdk issue for ubuntu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e7d8d2956661aa83048e7f4eaadab5f24828c9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/50e7d8d2956661aa83048e7f4eaadab5f24828c9", "committedDate": "2020-01-28T14:05:14Z", "message": "added docker and code coverage documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cb11b108a4b319d561599897ddd842196d4e05", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/93cb11b108a4b319d561599897ddd842196d4e05", "committedDate": "2020-01-28T14:38:02Z", "message": "updated benchmarking script and doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "109a2b8f65d7e0b2bb38a57c14016698644dd4a6", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/109a2b8f65d7e0b2bb38a57c14016698644dd4a6", "committedDate": "2020-01-28T15:48:53Z", "message": "added benchmark reports' path in README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ddeae9c29755528ef2ad0fe1e318ad396f135e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/70ddeae9c29755528ef2ad0fe1e318ad396f135e", "committedDate": "2020-01-29T05:56:45Z", "message": "merged master and resolved confilcts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b499bfe4744ea79cdb813e43df237ea129407d19", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b499bfe4744ea79cdb813e43df237ea129407d19", "committedDate": "2020-01-29T06:09:29Z", "message": "updated documentation to replace TS with TorchServe and add version in torch-model-archiver command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0d41a8409b7d48334f2ac21b24552c6f2c0eac", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2a0d41a8409b7d48334f2ac21b24552c6f2c0eac", "committedDate": "2020-01-29T06:52:49Z", "message": "added example to create resnet-18.mar and added reference to docker and benchmark readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6bb935b26fbc5fb252e932c9e8ac0efada9fa44", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d6bb935b26fbc5fb252e932c9e8ac0efada9fa44", "committedDate": "2020-01-29T07:03:21Z", "message": "fixed small issue in benchmark script found during testing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2421, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}