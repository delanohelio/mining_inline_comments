{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzU0MDQ3", "number": 172, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyNzozMlrOD4LUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwOTo1Nzo1MlrOD69nLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjMyMzM0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyNzozMlrOGO3Row==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyNzozMlrOGO3Row==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzODg4Mw==", "bodyText": "nice", "url": "https://github.com/pytorch/serve/pull/172#discussion_r418238883", "createdAt": "2020-04-30T19:27:32Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/Model.java", "diffHunk": "@@ -172,7 +172,9 @@ public void pollBatch(String threadId, long waitTime, Map<String, Job> jobsRepo)\n             }\n             logger.trace(\"sending jobs, size: {}\", jobsRepo.size());\n         } finally {\n-            lock.unlock();\n+            if (lock.isHeldByCurrentThread()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc6be017c4050504d93b11a8470233c5e710b1b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjM0NzI3OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozNTozNVrOGO3hIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTozMTozNlrOGPM6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0Mjg1MQ==", "bodyText": "you mentioned this in the commit text but can you explain a bit more? I just want to make sure there are no race conditions hidden here", "url": "https://github.com/pytorch/serve/pull/172#discussion_r418242851", "createdAt": "2020-04-30T19:35:35Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -174,7 +175,11 @@ public void run() {\n             logger.error(\"Out of memory error when creating workers\", oom);\n             status = HttpResponseStatus.INSUFFICIENT_STORAGE;\n         } catch (Throwable t) {\n-            logger.warn(\"Backend worker thread exception.\", t);\n+            if (state == WorkerState.WORKER_SCALED_DOWN || state == WorkerState.WORKER_STOPPED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc6be017c4050504d93b11a8470233c5e710b1b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MzUzMQ==", "bodyText": "This change is not required anymore after the lock related handling done in Model.java. Removed this condition.", "url": "https://github.com/pytorch/serve/pull/172#discussion_r418593531", "createdAt": "2020-05-01T15:31:36Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkerThread.java", "diffHunk": "@@ -174,7 +175,11 @@ public void run() {\n             logger.error(\"Out of memory error when creating workers\", oom);\n             status = HttpResponseStatus.INSUFFICIENT_STORAGE;\n         } catch (Throwable t) {\n-            logger.warn(\"Backend worker thread exception.\", t);\n+            if (state == WorkerState.WORKER_SCALED_DOWN || state == WorkerState.WORKER_STOPPED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0Mjg1MQ=="}, "originalCommit": {"oid": "2fc6be017c4050504d93b11a8470233c5e710b1b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTUzNDUyOnYy", "diffSide": "LEFT", "path": "ts/model_server.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwOTo1Nzo1MlrOGTCtUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzoxNToxOFrOGXOXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyMDQ5OA==", "bodyText": "@maaquib Have you verified that removing the code for terminating child processes does not have any other side effects?", "url": "https://github.com/pytorch/serve/pull/172#discussion_r422620498", "createdAt": "2020-05-10T09:57:52Z", "author": {"login": "chauhang"}, "path": "ts/model_server.py", "diffHunk": "@@ -36,8 +36,6 @@ def start():\n         else:\n             try:\n                 parent = psutil.Process(pid)\n-                for child in parent.children(recursive=True):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8793e2463b0d71a9d636bca16a776edd87fdf1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDk4NA==", "bodyText": "@harshbafna Wouldn't this leave orphaned child process? Why are we removing this?", "url": "https://github.com/pytorch/serve/pull/172#discussion_r426840984", "createdAt": "2020-05-18T19:15:51Z", "author": {"login": "maaquib"}, "path": "ts/model_server.py", "diffHunk": "@@ -36,8 +36,6 @@ def start():\n         else:\n             try:\n                 parent = psutil.Process(pid)\n-                for child in parent.children(recursive=True):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyMDQ5OA=="}, "originalCommit": {"oid": "ef8793e2463b0d71a9d636bca16a776edd87fdf1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNTc2Ng==", "bodyText": "@maaquib  : The child processes are nothing else but the Java threads . Now this is being taken care by the shutdown hook added for stopping all the threads and generating the snapshot. Thus this piece of code is not required anymore.\nWe have also verified that there are no orphaned java/python processes left running after shutdown. Even tested with benchmark.", "url": "https://github.com/pytorch/serve/pull/172#discussion_r427005766", "createdAt": "2020-05-19T03:15:18Z", "author": {"login": "harshbafna"}, "path": "ts/model_server.py", "diffHunk": "@@ -36,8 +36,6 @@ def start():\n         else:\n             try:\n                 parent = psutil.Process(pid)\n-                for child in parent.children(recursive=True):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyMDQ5OA=="}, "originalCommit": {"oid": "ef8793e2463b0d71a9d636bca16a776edd87fdf1"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}