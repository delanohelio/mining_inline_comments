{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjU3NTI3", "number": 662, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODozMjozM1rOE25clQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo1MDoyNVrOE3509g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTk5NzY1OnYy", "diffSide": "RIGHT", "path": "setup.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODozMjozM1rOHv8DLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyNjozMFrOHxHNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyODk3NQ==", "bodyText": "NIT: indentation", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520028975", "createdAt": "2020-11-09T18:32:33Z", "author": {"login": "maaquib"}, "path": "setup.py", "diffHunk": "@@ -117,7 +125,7 @@ def run(self):\n \n         try:\n             if self.plugins == \"endpoints\":\n-                subprocess.check_call('plugins/gradlew -p plugins clean bS', shell=True)\n+                    subprocess.check_call(build_plugins_command[platform.system()], shell=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MDQyNg==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521260426", "createdAt": "2020-11-11T10:26:30Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "setup.py", "diffHunk": "@@ -117,7 +125,7 @@ def run(self):\n \n         try:\n             if self.plugins == \"endpoints\":\n-                subprocess.check_call('plugins/gradlew -p plugins clean bS', shell=True)\n+                    subprocess.check_call(build_plugins_command[platform.system()], shell=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyODk3NQ=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDAxNTI3OnYy", "diffSide": "RIGHT", "path": "scripts/install_from_src.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODozNzozMFrOHv8OEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyNToxOVrOHxHLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMTc2MA==", "bodyText": "This should be in reverse order", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520031760", "createdAt": "2020-11-09T18:37:30Z", "author": {"login": "maaquib"}, "path": "scripts/install_from_src.py", "diffHunk": "@@ -0,0 +1,57 @@\n+import os\n+import sys\n+import time\n+import shutil\n+\n+# To help discover local modules\n+REPO_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"..\")\n+sys.path.append(REPO_ROOT)\n+\n+from scripts import tsutils as ts\n+\n+def clean_slate(): \n+    print(\"## Uninstall existing torchserve and model archiver\")\n+    if ts.is_conda_env():\n+        cmd = \"conda uninstall -y torchserve torch-model-archiver\"\n+    else:\n+        cmd = \"pip uninstall -y torchserve torch-model-archiver\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+    time.sleep(5)\n+\n+\n+def install_torchserve():\n+    print(\"## Install torchserve from source\")\n+    cmd = \"pip install .\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+\n+\n+def install_torch_model_archiver():\n+    print(\"## Install torch-model-archiver from source\")\n+    cmd = \"pip install model-archiver/.\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+\n+\n+def clean_up_build_residuals():\n+    print(\"## Cleaning build residuals (__pycache__)\")\n+    try:\n+        for (dirpath, dirnames, filenames) in os.walk(os.getcwd()):\n+            if \"__pycache__\" in dirnames:\n+                cache_dir = os.path.join(dirpath, \"__pycache__\")\n+                print(f\"## Removing - {cache_dir}\")\n+                shutil.rmtree(cache_dir)\n+    except Exception as e:\n+        print(f\"#Error while cleaning cache file. Details - {str(e)}\")\n+\n+\n+def install_from_src():\n+    clean_slate()\n+    install_torchserve()\n+    install_torch_model_archiver()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1OTgyMA==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521259820", "createdAt": "2020-11-11T10:25:19Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "scripts/install_from_src.py", "diffHunk": "@@ -0,0 +1,57 @@\n+import os\n+import sys\n+import time\n+import shutil\n+\n+# To help discover local modules\n+REPO_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"..\")\n+sys.path.append(REPO_ROOT)\n+\n+from scripts import tsutils as ts\n+\n+def clean_slate(): \n+    print(\"## Uninstall existing torchserve and model archiver\")\n+    if ts.is_conda_env():\n+        cmd = \"conda uninstall -y torchserve torch-model-archiver\"\n+    else:\n+        cmd = \"pip uninstall -y torchserve torch-model-archiver\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+    time.sleep(5)\n+\n+\n+def install_torchserve():\n+    print(\"## Install torchserve from source\")\n+    cmd = \"pip install .\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+\n+\n+def install_torch_model_archiver():\n+    print(\"## Install torch-model-archiver from source\")\n+    cmd = \"pip install model-archiver/.\"\n+    print(f\"## In directory: {os.getcwd()} | Executing command: {cmd}\")\n+    os.system(cmd)\n+\n+\n+def clean_up_build_residuals():\n+    print(\"## Cleaning build residuals (__pycache__)\")\n+    try:\n+        for (dirpath, dirnames, filenames) in os.walk(os.getcwd()):\n+            if \"__pycache__\" in dirnames:\n+                cache_dir = os.path.join(dirpath, \"__pycache__\")\n+                print(f\"## Removing - {cache_dir}\")\n+                shutil.rmtree(cache_dir)\n+    except Exception as e:\n+        print(f\"#Error while cleaning cache file. Details - {str(e)}\")\n+\n+\n+def install_from_src():\n+    clean_slate()\n+    install_torchserve()\n+    install_torch_model_archiver()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMTc2MA=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDAyNzI3OnYy", "diffSide": "RIGHT", "path": "scripts/install_dependencies.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo0MDo0N1rOHv8VjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMTowOFrOHxpeDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMzY3Nw==", "bodyText": "I don't like the idea of having to specify each and every dependency in the cli like this. It is cumbersume. Why not just have --dev, --gpu etc. flags", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520033677", "createdAt": "2020-11-09T18:40:47Z", "author": {"login": "maaquib"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0ODk1NQ==", "bodyText": "@dhaniram-kshirsagar Can you please specify the reasoning for doing it this way?", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521648955", "createdAt": "2020-11-11T21:28:11Z", "author": {"login": "maaquib"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMzY3Nw=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5NjkyMA==", "bodyText": "@maaquib You mean to say,  why argparse has been removed now? Argparse was in general not required since this utility is an internal one only used for sanity and regression testing codebuild build spec file.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521796920", "createdAt": "2020-11-12T03:23:51Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMzY3Nw=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTcxMQ==", "bodyText": "@dhaniram-kshirsagar What I meant was that instead of having --java --nodejs --cu101 etc. we should have something like a --dev flag which install all these dependencies at once. Not a big deal though.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521821711", "createdAt": "2020-11-12T04:01:08Z", "author": {"login": "maaquib"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMzY3Nw=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA0MTk4OnYy", "diffSide": "RIGHT", "path": "scripts/install_dependencies.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo0NDo0MFrOHv8efQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMjowNVrOHxpgfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNTk2NQ==", "bodyText": "Please rename this to something generic and convert to a positional arg. We will have other versions of cuda in the future and it doesn't make sense to have an arg for each version.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520035965", "createdAt": "2020-11-09T18:44:40Z", "author": {"login": "maaquib"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")\n+    parser.add_argument(\"--java\", action=\"store_true\", help=\"Install Java 11\")\n+    parser.add_argument(\"--nodejs\", action=\"store_true\", help=\"Install NodeJS\")\n+    parser.add_argument(\"--python-packages\", action=\"store_true\", help=\"Install Python test packages\")\n+    parser.add_argument(\"--cu101\", action=\"store_true\", help=\"Install torch packages specific to cuda 10.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5NTc4Ng==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521295786", "createdAt": "2020-11-11T11:33:16Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")\n+    parser.add_argument(\"--java\", action=\"store_true\", help=\"Install Java 11\")\n+    parser.add_argument(\"--nodejs\", action=\"store_true\", help=\"Install NodeJS\")\n+    parser.add_argument(\"--python-packages\", action=\"store_true\", help=\"Install Python test packages\")\n+    parser.add_argument(\"--cu101\", action=\"store_true\", help=\"Install torch packages specific to cuda 10.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNTk2NQ=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjMzMg==", "bodyText": "@dhaniram-kshirsagar What I meant was to have an arg like cuda=cu101 so that in the future we can accomodate other versions of cuda e.g. cuda=cu110 without the need for adding new cli arguments.\nparser.add_argument('cuda', choices=['cu101'])", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521822332", "createdAt": "2020-11-12T04:02:05Z", "author": {"login": "maaquib"}, "path": "scripts/install_dependencies.py", "diffHunk": "@@ -0,0 +1,109 @@\n+import os\n+import platform\n+import argparse\n+\n+\n+class Common():\n+    def __init__(self):\n+        # Assumption is nvidia-smi is installed on systems with gpu\n+        self.is_gpu_instance = True if os.system(\"nvidia-smi\") == 0 else False\n+        self.torch_stable_url = \"https://download.pytorch.org/whl/torch_stable.html\"\n+\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_torch_packages(self, cu101=False):\n+        if self.is_gpu_instance:\n+            if cu101:\n+                os.system(f\"pip install -U -r requirements/torch_cu101.txt -f {self.torch_stable_url}\")\n+            else:\n+                os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+        else:\n+            os.system(f\"pip install -U -r requirements/torch_cpu.txt -f {self.torch_stable_url}\")\n+\n+    def install_python_packages(self, cu101=False):\n+        self.install_torch_packages(cu101=cu101)\n+        os.system(\"pip install -U -r requirements/developer.txt\") # developer.txt also installs packages from common.txt\n+        if os.system(\"conda\") == 0: # If conda is available install conda-build package\n+            os.system(\"conda install -y conda-build\")\n+\n+    def install_node_packages(self):\n+        os.system(\"npm install -g newman newman-reporter-html markdown-link-check\")\n+\n+    def install_jmeter(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Linux(Common):\n+    def install_java(self):\n+        os.system(\"apt-get install -y openjdk-11-jdk\")\n+\n+    def install_nodejs(self):\n+        os.system(\"curl -sL https://deb.nodesource.com/setup_14.x | bash -\")\n+        os.system(\"apt-get update\")\n+        os.system(\"apt-get install -y nodejs\")\n+\n+    def install_ab(self):\n+        os.system(\"apt-get install -y apache2-utils\")\n+\n+\n+class Windows(Common):\n+    def install_java(self):\n+        pass\n+\n+    def install_nodejs(self):\n+        pass\n+\n+    def install_ab(self):\n+        pass\n+\n+\n+class Darwin(Common):\n+    def install_java(self):\n+        os.system(\"brew tap AdoptOpenJDK/openjdk\")\n+        os.system(\"brew cask install adoptopenjdk11\")\n+\n+    def install_nodejs(self):\n+        os.system(\"brew install node\")\n+\n+    def install_torch_packages(self, cu101=False):\n+        os.system(f\"pip install -U -r requirements/torch.txt -f {self.torch_stable_url}\")\n+\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Install various build and test dependencies of TorchServe\")\n+    parser.add_argument(\"--java\", action=\"store_true\", help=\"Install Java 11\")\n+    parser.add_argument(\"--nodejs\", action=\"store_true\", help=\"Install NodeJS\")\n+    parser.add_argument(\"--python-packages\", action=\"store_true\", help=\"Install Python test packages\")\n+    parser.add_argument(\"--cu101\", action=\"store_true\", help=\"Install torch packages specific to cuda 10.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNTk2NQ=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA0ODQ1OnYy", "diffSide": "RIGHT", "path": "requirements/developer.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo0NjoyNFrOHv8iWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNjo1MFrOHxHkEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNjk1NQ==", "bodyText": "Pin to the latest working release", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520036955", "createdAt": "2020-11-09T18:46:24Z", "author": {"login": "maaquib"}, "path": "requirements/developer.txt", "diffHunk": "@@ -5,4 +5,5 @@ pylint\n pytest-mock\n pytest-cov\n nvgpu\n+transformers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NjE5Mw==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521266193", "createdAt": "2020-11-11T10:36:50Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "requirements/developer.txt", "diffHunk": "@@ -5,4 +5,5 @@ pylint\n pytest-mock\n pytest-cov\n nvgpu\n+transformers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNjk1NQ=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA2Mjg5OnYy", "diffSide": "RIGHT", "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1MDowMFrOHv8rHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMzowOVrOHxHbjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzOTE5OA==", "bodyText": "DRY: Extract to method", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520039198", "createdAt": "2020-11-09T18:50:00Z", "author": {"login": "maaquib"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -27,7 +29,10 @@ def test_export_file_is_none(self, patches):\n             patches.path_exists.return_value = False\n             ret_val = ModelExportUtils.check_mar_already_exists('some-model', None, False)\n \n-            patches.path_exists.assert_called_once_with(\"/Users/dummyUser/some-model.mar\")\n+            if platform.system() == \"Windows\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDAxMw==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521264013", "createdAt": "2020-11-11T10:33:09Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -27,7 +29,10 @@ def test_export_file_is_none(self, patches):\n             patches.path_exists.return_value = False\n             ret_val = ModelExportUtils.check_mar_already_exists('some-model', None, False)\n \n-            patches.path_exists.assert_called_once_with(\"/Users/dummyUser/some-model.mar\")\n+            if platform.system() == \"Windows\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzOTE5OA=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA5MDEyOnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/util/OSUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1Njo0OFrOHv87fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxNTowNFrOHxG0Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MzM5MA==", "bodyText": "NIT: I see this being used in 1 place. Was there any reason to making this a separate class?", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520043390", "createdAt": "2020-11-09T18:56:48Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/OSUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.pytorch.serve.util;\n+\n+public final class OSUtils {\n+    private OSUtils() {}\n+\n+    public static String getKillCmd() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1Mzg5NQ==", "bodyText": "I didn't found any suitable class to add this change and also to keep future platform-specific utils functions at a single place.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521253895", "createdAt": "2020-11-11T10:15:04Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/OSUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.pytorch.serve.util;\n+\n+public final class OSUtils {\n+    private OSUtils() {}\n+\n+    public static String getKillCmd() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MzM5MA=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA5NTA0OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1ODowNFrOHv8-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxMToyOVrOHxGsQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NDE2Mg==", "bodyText": "NIT: Do we really need this as a configurable param?", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520044162", "createdAt": "2020-11-09T18:58:04Z", "author": {"login": "maaquib"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -82,6 +82,7 @@\n     private static final String TS_INSTALL_PY_DEP_PER_MODEL = \"install_py_dep_per_model\";\n     private static final String TS_METRICS_FORMAT = \"metrics_format\";\n     private static final String TS_ENABLE_METRICS_API = \"enable_metrics_api\";\n+    private static final String TS_INITIAL_WORKER_PORT = \"initial_worker_port\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1MTkwNA==", "bodyText": "Yes, at present it is set to 9000, some of the ports in this range were in use by some other processes. Hence, keeping this as an option.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521251904", "createdAt": "2020-11-11T10:11:29Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -82,6 +82,7 @@\n     private static final String TS_INSTALL_PY_DEP_PER_MODEL = \"install_py_dep_per_model\";\n     private static final String TS_METRICS_FORMAT = \"metrics_format\";\n     private static final String TS_ENABLE_METRICS_API = \"enable_metrics_api\";\n+    private static final String TS_INITIAL_WORKER_PORT = \"initial_worker_port\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NDE2Mg=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDExNjA5OnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowMjozNFrOHv9LhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMjo0NFrOHxHasw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NzQ5Mg==", "bodyText": "NIT: I am not sure what \"being certified\" means in this context", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520047492", "createdAt": "2020-11-09T19:02:34Z", "author": {"login": "maaquib"}, "path": "docker/README.md", "diffHunk": "@@ -10,9 +10,10 @@\n \n * docker - Refer to the [official docker installation guide](https://docs.docker.com/install/)\n * git    - Refer to the [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-* For base Ubuntu with GPU, install following nvidia container toolkit and driver- \n+* For base Ubuntu with GPU, install following nvidia container toolkit and driver-\n   * [Nvidia container toolkit](https://github.com/NVIDIA/nvidia-docker#ubuntu-160418042004-debian-jessiestretchbuster)\n   * [Nvidia driver](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html)\n+* NOTE - torchserve docker images have not been certified on windows native.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2Mzc5NQ==", "bodyText": "Made changes.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521263795", "createdAt": "2020-11-11T10:32:44Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "docker/README.md", "diffHunk": "@@ -10,9 +10,10 @@\n \n * docker - Refer to the [official docker installation guide](https://docs.docker.com/install/)\n * git    - Refer to the [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-* For base Ubuntu with GPU, install following nvidia container toolkit and driver- \n+* For base Ubuntu with GPU, install following nvidia container toolkit and driver-\n   * [Nvidia container toolkit](https://github.com/NVIDIA/nvidia-docker#ubuntu-160418042004-debian-jessiestretchbuster)\n   * [Nvidia driver](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html)\n+* NOTE - torchserve docker images have not been certified on windows native.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NzQ5Mg=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE0MjU0OnYy", "diffSide": "RIGHT", "path": "test/pytest/test_metrics.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowNzowNlrOHv9cNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyOTozM1rOHxHT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MTc2Nw==", "bodyText": "Is snapshot not supported for windows native?", "url": "https://github.com/pytorch/serve/pull/662#discussion_r520051767", "createdAt": "2020-11-09T19:07:06Z", "author": {"login": "maaquib"}, "path": "test/pytest/test_metrics.py", "diffHunk": "@@ -170,15 +125,21 @@ def test_log_location_var_snapshot_enabled():\n     requests.post('http://127.0.0.1:8081/models?url=densenet161.mar')\n     # We stop torchserve again here so that we can remove the LOG_LOCATION setting from environment variable\n     test_utils.stop_torchserve()\n+    print('Waiting to stop')\n+    time.sleep(15)\n     del os.environ['LOG_LOCATION']\n+\n     # In case of snapshot enabled, we get these three config files additionally in the custom directory\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*startup.cfg')) >= 1\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*shutdown.cfg')) >= 1\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*snap*.cfg')) >= 1\n-    for f in glob.glob(test_utils.ROOT_DIR + \"*.log\"):\n+    assert len(glob.glob(path.join(test_utils.ROOT_DIR,'config/*startup.cfg'))) >= 1\n+    if platform.system() != \"Windows\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MjA3OA==", "bodyText": "There is an issue with Java shutdown hook on windows due to which the shutdown snapshot file is not generated hence this check. See the docs/snapshot.md for a specific notes in this PR.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521262078", "createdAt": "2020-11-11T10:29:33Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "test/pytest/test_metrics.py", "diffHunk": "@@ -170,15 +125,21 @@ def test_log_location_var_snapshot_enabled():\n     requests.post('http://127.0.0.1:8081/models?url=densenet161.mar')\n     # We stop torchserve again here so that we can remove the LOG_LOCATION setting from environment variable\n     test_utils.stop_torchserve()\n+    print('Waiting to stop')\n+    time.sleep(15)\n     del os.environ['LOG_LOCATION']\n+\n     # In case of snapshot enabled, we get these three config files additionally in the custom directory\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*startup.cfg')) >= 1\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*shutdown.cfg')) >= 1\n-    assert len(glob.glob(test_utils.ROOT_DIR + 'config/*snap*.cfg')) >= 1\n-    for f in glob.glob(test_utils.ROOT_DIR + \"*.log\"):\n+    assert len(glob.glob(path.join(test_utils.ROOT_DIR,'config/*startup.cfg'))) >= 1\n+    if platform.system() != \"Windows\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MTc2Nw=="}, "originalCommit": {"oid": "ae75d663dc44b29402cd12a8e18371f7d5cbdb4b"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDUzODU1OnYy", "diffSide": "RIGHT", "path": "benchmarks/benchmark-ab.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0NzoyOVrOHxhEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1MzoxNFrOHxpJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDEzNQ==", "bodyText": "Merge conflict", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521684135", "createdAt": "2020-11-11T22:47:29Z", "author": {"login": "maaquib"}, "path": "benchmarks/benchmark-ab.py", "diffHunk": "@@ -280,18 +281,22 @@ def generate_csv_output():\n     artifacts['TS latency mean'] = extract_entity(data, 'Time per request:.*mean\\)', -3)\n     artifacts['TS error rate'] = int(artifacts['TS failed requests']) / execution_params['requests'] * 100\n \n-    with open('/tmp/benchmark/predict.txt') as f:\n+    with open(os.path.join(TMP_DIR, 'benchmark/predict.txt')) as f:\n         lines = f.readlines()\n         lines.sort(key=float)\n         artifacts['Model_p50'] = lines[line50].strip()\n         artifacts['Model_p90'] = lines[line90].strip()\n         artifacts['Model_p99'] = lines[line99].strip()\n \n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNjM1Mg==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521816352", "createdAt": "2020-11-12T03:53:14Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "benchmarks/benchmark-ab.py", "diffHunk": "@@ -280,18 +281,22 @@ def generate_csv_output():\n     artifacts['TS latency mean'] = extract_entity(data, 'Time per request:.*mean\\)', -3)\n     artifacts['TS error rate'] = int(artifacts['TS failed requests']) / execution_params['requests'] * 100\n \n-    with open('/tmp/benchmark/predict.txt') as f:\n+    with open(os.path.join(TMP_DIR, 'benchmark/predict.txt')) as f:\n         lines = f.readlines()\n         lines.sort(key=float)\n         artifacts['Model_p50'] = lines[line50].strip()\n         artifacts['Model_p90'] = lines[line90].strip()\n         artifacts['Model_p99'] = lines[line99].strip()\n \n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDEzNQ=="}, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU0MjEyOnYy", "diffSide": "RIGHT", "path": "docker/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0OTowM1rOHxhG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyNTozMFrOHxoB4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDcwNQ==", "bodyText": "I don't understand the point of this. Is there something stopping us from testing on Windows native? Or is it that these have been tested on WSL but not native?", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521684705", "createdAt": "2020-11-11T22:49:03Z", "author": {"login": "maaquib"}, "path": "docker/README.md", "diffHunk": "@@ -10,9 +10,11 @@\n \n * docker - Refer to the [official docker installation guide](https://docs.docker.com/install/)\n * git    - Refer to the [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-* For base Ubuntu with GPU, install following nvidia container toolkit and driver- \n+* For base Ubuntu with GPU, install following nvidia container toolkit and driver-\n   * [Nvidia container toolkit](https://github.com/NVIDIA/nvidia-docker#ubuntu-160418042004-debian-jessiestretchbuster)\n   * [Nvidia driver](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html)\n+  \n+* NOTE - Dockerfiles have not been tested on windows native platform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5ODExNA==", "bodyText": "We don't have win10 etc. and testing docker on EC2 win server 2019 is not supported. Please refer my comment in PR description hence this comment.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521798114", "createdAt": "2020-11-12T03:25:30Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "docker/README.md", "diffHunk": "@@ -10,9 +10,11 @@\n \n * docker - Refer to the [official docker installation guide](https://docs.docker.com/install/)\n * git    - Refer to the [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-* For base Ubuntu with GPU, install following nvidia container toolkit and driver- \n+* For base Ubuntu with GPU, install following nvidia container toolkit and driver-\n   * [Nvidia container toolkit](https://github.com/NVIDIA/nvidia-docker#ubuntu-160418042004-debian-jessiestretchbuster)\n   * [Nvidia driver](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html)\n+  \n+* NOTE - Dockerfiles have not been tested on windows native platform.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDcwNQ=="}, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU0NDAxOnYy", "diffSide": "RIGHT", "path": "frontend/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0OTo0MlrOHxhIAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyNzo0OVrOHxoH0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDk5Mg==", "bodyText": "Please remove this. This should only be for local testing", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521684992", "createdAt": "2020-11-11T22:49:42Z", "author": {"login": "maaquib"}, "path": "frontend/build.gradle", "diffHunk": "@@ -13,6 +13,7 @@ allprojects {\n     version = '1.0'\n \n     repositories {\n+        mavenLocal()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTYzNA==", "bodyText": "Done\nThanks, for pointing. It's my local change for testing.", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521799634", "createdAt": "2020-11-12T03:27:49Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/build.gradle", "diffHunk": "@@ -13,6 +13,7 @@ allprojects {\n     version = '1.0'\n \n     repositories {\n+        mavenLocal()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NDk5Mg=="}, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU0NTgyOnYy", "diffSide": "RIGHT", "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo1MDoyNVrOHxhJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzozMzoyNVrOHxoV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NTI3MA==", "bodyText": "NIT: Remove unnnecessary newlines", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521685270", "createdAt": "2020-11-11T22:50:25Z", "author": {"login": "maaquib"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -1,6 +1,8 @@\n \n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgwMzIyMQ==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/662#discussion_r521803221", "createdAt": "2020-11-12T03:33:25Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "model-archiver/model_archiver/tests/unit_tests/test_model_packaging_utils.py", "diffHunk": "@@ -1,6 +1,8 @@\n \n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NTI3MA=="}, "originalCommit": {"oid": "21cd95a3a594572295d08580bf23141e0aea0cc1"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1420, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}