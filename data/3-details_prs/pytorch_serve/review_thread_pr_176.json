{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjQ2Njk2", "number": 176, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMDo1OFrODw02OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1NDo0NVrODw1NsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI0MDg5OnYy", "diffSide": "RIGHT", "path": "docs/default_handlers.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMDo1OFrOGECVDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMDo1OFrOGECVDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NTY0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Description : Handles image classification models trained on imagenet dataset.\n          \n          \n            \n            * Description : Handles image classification models trained on the ImageNet dataset.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406885644", "createdAt": "2020-04-10T18:30:58Z", "author": {"login": "aaronmarkham"}, "path": "docs/default_handlers.md", "diffHunk": "@@ -1,36 +1,35 @@\n # TorchServe default inference handlers\n \n-TorchServe provides following inference handlers out of box :\n+TorchServe provides following inference handlers out of box:\n \n ## image_classifier\n \n- * Description : Handles image classification models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Top 5 predictions and their respective probability of the image\n+* Description : Handles image classification models trained on imagenet dataset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI2NDE5OnYy", "diffSide": "RIGHT", "path": "docs/default_handlers.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozOTo1NlrOGECjlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozOTo1NlrOGECjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4OTM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Description : Handles image segmentation models trained on imagenet dataset.\n          \n          \n            \n            * Description : Handles image segmentation models trained on the ImageNet dataset.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406889364", "createdAt": "2020-04-10T18:39:56Z", "author": {"login": "aaronmarkham"}, "path": "docs/default_handlers.md", "diffHunk": "@@ -1,36 +1,35 @@\n # TorchServe default inference handlers\n \n-TorchServe provides following inference handlers out of box :\n+TorchServe provides following inference handlers out of box:\n \n ## image_classifier\n \n- * Description : Handles image classification models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Top 5 predictions and their respective probability of the image\n+* Description : Handles image classification models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Top 5 predictions and their respective probability of the image\n+\n+For more details see [examples](../examples/image_classifier)\n \n-For more details refer [examples](../examples/image_classifier)\n- \n ## image_segmenter\n \n- * Description : Handles image segmentation models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n+* Description : Handles image segmentation models trained on imagenet dataset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3MDA4OnYy", "diffSide": "RIGHT", "path": "docs/default_handlers.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0MjowOVrOGECnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0MjowOVrOGECnJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MDI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Description : Handles models trained on imagenet dataset.\n          \n          \n            \n            * Description : Handles models trained on the ImageNet dataset.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406890277", "createdAt": "2020-04-10T18:42:09Z", "author": {"login": "aaronmarkham"}, "path": "docs/default_handlers.md", "diffHunk": "@@ -1,36 +1,35 @@\n # TorchServe default inference handlers\n \n-TorchServe provides following inference handlers out of box :\n+TorchServe provides following inference handlers out of box:\n \n ## image_classifier\n \n- * Description : Handles image classification models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Top 5 predictions and their respective probability of the image\n+* Description : Handles image classification models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Top 5 predictions and their respective probability of the image\n+\n+For more details see [examples](../examples/image_classifier)\n \n-For more details refer [examples](../examples/image_classifier)\n- \n ## image_segmenter\n \n- * Description : Handles image segmentation models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n+* Description : Handles image segmentation models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n \n-For more details refer [examples](../examples/image_segmenter)\n+For more details see [examples](../examples/image_segmenter)\n \n ## object_detector\n \n- * Description : Handles object detection models.\n- * Input : RGB image\n- * Output : List of detected classes and bounding boxes respectively \n+* Description : Handles object detection models.\n+* Input : RGB image\n+* Output : List of detected classes and bounding boxes respectively \n \n-For more details refer [examples](../examples/object_detector) \n+For more details see [examples](../examples/object_detector) \n \n ## text_classifier\n \n- * Description : Handles models trained on imagenet dataset.\n- * Input : text file\n- * Output : Class of input text\n- \n-For more details refer [examples](../examples/text_classification)\n- \n+* Description : Handles models trained on imagenet dataset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3MzI1OnYy", "diffSide": "RIGHT", "path": "docs/default_handlers.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0MzoyOFrOGECpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Nzo1NVrOGEEFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MDc4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n          \n          \n            \n            * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n          \n      \n    \n    \n  \n\nI don't get this. It should be the identified class or class ID, not number of total classes.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406890784", "createdAt": "2020-04-10T18:43:28Z", "author": {"login": "aaronmarkham"}, "path": "docs/default_handlers.md", "diffHunk": "@@ -1,36 +1,35 @@\n # TorchServe default inference handlers\n \n-TorchServe provides following inference handlers out of box :\n+TorchServe provides following inference handlers out of box:\n \n ## image_classifier\n \n- * Description : Handles image classification models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Top 5 predictions and their respective probability of the image\n+* Description : Handles image classification models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Top 5 predictions and their respective probability of the image\n+\n+For more details see [examples](../examples/image_classifier)\n \n-For more details refer [examples](../examples/image_classifier)\n- \n ## image_segmenter\n \n- * Description : Handles image segmentation models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n+* Description : Handles image segmentation models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDM3MQ==", "bodyText": "I believe this is correct as is. Let' talk offline.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406914371", "createdAt": "2020-04-10T19:47:55Z", "author": {"login": "eslesar-aws"}, "path": "docs/default_handlers.md", "diffHunk": "@@ -1,36 +1,35 @@\n # TorchServe default inference handlers\n \n-TorchServe provides following inference handlers out of box :\n+TorchServe provides following inference handlers out of box:\n \n ## image_classifier\n \n- * Description : Handles image classification models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Top 5 predictions and their respective probability of the image\n+* Description : Handles image classification models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Top 5 predictions and their respective probability of the image\n+\n+For more details see [examples](../examples/image_classifier)\n \n-For more details refer [examples](../examples/image_classifier)\n- \n ## image_segmenter\n \n- * Description : Handles image segmentation models trained on imagenet dataset.\n- * Input : RGB image\n- * Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.\n+* Description : Handles image segmentation models trained on imagenet dataset.\n+* Input : RGB image\n+* Output : Output shape as [CL H W], CL - number of classes, H - height and W - width.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MDc4NA=="}, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3NTE4OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDowNVrOGECqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDowNVrOGECqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MTA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n          \n          \n            \n            * Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by TorchServe.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406891056", "createdAt": "2020-04-10T18:44:05Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3NjA1OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDoyNlrOGECqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDoyNlrOGECqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MTE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Access Logs.\n          \n          \n            \n            1. Access logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406891182", "createdAt": "2020-04-10T18:44:26Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n \n # Types of logs\n-Torchserve currently provides three types of logs.\n+\n+TorchServe currently provides the following types of logs\n+\n 1. Access Logs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3NjQ3OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDo0MFrOGECq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDo0MFrOGECq-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MTI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. TorchServe Logs.\n          \n          \n            \n            1. TorchServe logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406891256", "createdAt": "2020-04-10T18:44:40Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n \n # Types of logs\n-Torchserve currently provides three types of logs.\n+\n+TorchServe currently provides the following types of logs\n+\n 1. Access Logs.\n 1. TorchServe Logs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI3NzIwOnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDo1NlrOGECrdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo0NDo1NlrOGECrdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MTM4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These logs collect the access pattern to Torchserve. The configuration for access logs are as follows:\n          \n          \n            \n            These logs collect the access pattern to TorchServe. The configuration for access logs are as follows:", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406891382", "createdAt": "2020-04-10T18:44:56Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n \n # Types of logs\n-Torchserve currently provides three types of logs.\n+\n+TorchServe currently provides the following types of logs\n+\n 1. Access Logs.\n 1. TorchServe Logs.\n \n-## Access Logs:\n-These logs collect the access pattern to Torchserve. The configuration pertaining to access logs are as follows,\n+## Access Logs\n+\n+These logs collect the access pattern to Torchserve. The configuration for access logs are as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5MDk2OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MDo1M1rOGEC0Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MDo1M1rOGEC0Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5MzY0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You might want to log custom logs into the log files. This could be for debug purposes or to log any errors.\n          \n          \n            \n            You might want to generate custom logs. This could be for debugging purposes or to log any errors.", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406893646", "createdAt": "2020-04-10T18:50:53Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -51,55 +61,63 @@ log4j.appender.ts_log.layout = org.apache.log4j.PatternLayout\n log4j.appender.ts_log.layout.ConversionPattern = %d{ISO8601} [%-5p] %t %c - %m%n\n ```\n \n-This configuration by default dumps all the logs above `DEBUG` level. \n+This configuration by default dumps all the logs above `DEBUG` level.\n \n ### Generating and logging custom logs\n-As a user of TorchServe, you might want to log custom logs into the log files. This could be for debug purposes or\n-to log any errors. To accomplish this, simply print the required logs to `stdout/stderr`. TorchServe will capture the logs generated by the \n-backend workers and log it into the log file. Some examples of logs are as follows\n \n-1. Messages printed to stderr \n+You might want to log custom logs into the log files. This could be for debug purposes or to log any errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5NDAxOnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MjowOFrOGEC2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MjowOFrOGEC2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Modifying the behavior of the logs\n          \n          \n            \n            ## Modify the behavior of the logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406894131", "createdAt": "2020-04-10T18:52:08Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -51,55 +61,63 @@ log4j.appender.ts_log.layout = org.apache.log4j.PatternLayout\n log4j.appender.ts_log.layout.ConversionPattern = %d{ISO8601} [%-5p] %t %c - %m%n\n ```\n \n-This configuration by default dumps all the logs above `DEBUG` level. \n+This configuration by default dumps all the logs above `DEBUG` level.\n \n ### Generating and logging custom logs\n-As a user of TorchServe, you might want to log custom logs into the log files. This could be for debug purposes or\n-to log any errors. To accomplish this, simply print the required logs to `stdout/stderr`. TorchServe will capture the logs generated by the \n-backend workers and log it into the log file. Some examples of logs are as follows\n \n-1. Messages printed to stderr \n+You might want to log custom logs into the log files. This could be for debug purposes or to log any errors.\n+To do this, print the required logs to `stdout/stderr`.\n+TorchServe captures the logs generated by the backend workers and logs it into the log file. Some examples of logs are as follows:\n+\n+1. Messages printed to stderr:\n+\n ```text\n 2018-10-14 16:46:51,656 [WARN ] W-9000-stderr org.pytorch.serve.wlm.WorkerLifeCycle - [16:46:51] src/nnvm/legacy_json_util.cc:209: Loading symbol saved by previous version v0.8.0. Attempting to upgrad\\\n e...\n 2018-10-14 16:46:51,657 [WARN ] W-9000-stderr org.pytorch.serve.wlm.WorkerLifeCycle - [16:46:51] src/nnvm/legacy_json_util.cc:217: Symbol successfully upgraded!\n ```\n- \n-1. Messages printed to stdout \n+\n+1. Messages printed to stdout:\n+\n ```text\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - preprocess time: 3.60\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - inference time: 117.31\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - postprocess time: 8.52\n ```\n \n-# Modifying the behavior of the logs\n-In order to modify the default behavior of the logging, you could define `log4j.properties` file. There are two ways of starting\n-TorchServe with custom logs\n+## Modifying the behavior of the logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5NDU4OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MjoyMVrOGEC2hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MjoyMVrOGEC2hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Generating and logging custom logs\n          \n          \n            \n            ## Generate custom logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406894214", "createdAt": "2020-04-10T18:52:21Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -51,55 +61,63 @@ log4j.appender.ts_log.layout = org.apache.log4j.PatternLayout\n log4j.appender.ts_log.layout.ConversionPattern = %d{ISO8601} [%-5p] %t %c - %m%n\n ```\n \n-This configuration by default dumps all the logs above `DEBUG` level. \n+This configuration by default dumps all the logs above `DEBUG` level.\n \n ### Generating and logging custom logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5NTg4OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1Mjo1MlrOGEC3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1Mjo1MlrOGEC3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Types of logs\n          \n          \n            \n            ## Types of logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406894407", "createdAt": "2020-04-10T18:52:52Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n \n # Types of logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5NjQ3OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MzowNlrOGEC3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MzowNlrOGEC3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Access Logs\n          \n          \n            \n            ### Access Logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406894497", "createdAt": "2020-04-10T18:53:06Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -1,20 +1,26 @@\n-# Logging on Torchserve\n+# Logging in Torchserve\n \n-In this document we will go through logging mechanism in TorchServe. We will also go over how to modify the behavior of logging in model-server. Logging in TorchServe also covers\n-metrics, as metrics are logged into a file. To further understand how to customize metrics or define custom logging layouts, refer to the [metrics document](metrics.md)\n+In this document we explain logging in TorchServe. We also explain how to modify the behavior of logging in the model server.\n+Logging in TorchServe also covers metrics, as metrics are logged into a file.\n+To further understand how to customize metrics or define custom logging layouts, see [Metrics on TorchServe](metrics.md)\n \n-# Pre-requisites\n-Before getting into this tutorials, you must familiarize yourself with log4j configuration properties. Refer to this online [document](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n-on how to configure the log4j parameters. Similarly, familiarize yourself with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by \n-TorchServe. \n+## Pre-requisites\n+\n+* Be familiar with log4j configuration properties.\n+For information on how to configure log4j parameters, see [Logging Services](https://logging.apache.org/log4j/2.x/manual/configuration.html).\n+* Be familiar with the default [log4j.properties](../frontend/server/src/main/resources/log4j.properties) used by orchServe.\n \n # Types of logs\n-Torchserve currently provides three types of logs.\n+\n+TorchServe currently provides the following types of logs\n+\n 1. Access Logs.\n 1. TorchServe Logs.\n \n-## Access Logs:\n-These logs collect the access pattern to Torchserve. The configuration pertaining to access logs are as follows,\n+## Access Logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI5NzE2OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MzoyM1rOGEC4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MzoyM1rOGEC4FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDYxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## TorchServe Logs\n          \n          \n            \n            ### TorchServe Logs", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406894612", "createdAt": "2020-04-10T18:53:23Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -27,18 +33,22 @@ log4j.appender.access_log.layout = org.apache.log4j.PatternLayout\n log4j.appender.access_log.layout.ConversionPattern = %d{ISO8601} - %m%n\n ```\n \n-As defined in the properties file, the access logs are collected in {LOG_LOCATION}/access_log.log file. When we load the TorchServe\n-with a model and run inference against the server, the following logs are collected into the access_log.log\n+As defined in the properties file, the access logs are collected in {LOG_LOCATION}/access_log.log file.\n+When you load TorchServe with a model and run inference against the server, the following logs are collected into the access_log.log:\n+\n ```text\n 2018-10-15 13:56:18,976 [INFO ] BackendWorker-9000 ACCESS_LOG - /127.0.0.1:64003 \"POST /predictions/resnet-18 HTTP/1.1\" 200 118\n ```\n+\n The above log tells us that a successful `POST` call to `/predictions/resnet-18` was made by remote host `127.0.0.1:64003` it took `118`ms to complete this request.\n \n These logs are useful to determine the current performance of the model-server as well as understand the requests received by model-server.\n \n ## TorchServe Logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTMwMDk3OnYy", "diffSide": "RIGHT", "path": "docs/logging.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1NDo0NVrOGEC6Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1NDo0NVrOGEC6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NTE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Provide with CLI\n          \n          \n            \n            ## Log with the TorchServe CLI", "url": "https://github.com/pytorch/serve/pull/176#discussion_r406895198", "createdAt": "2020-04-10T18:54:45Z", "author": {"login": "aaronmarkham"}, "path": "docs/logging.md", "diffHunk": "@@ -51,55 +61,63 @@ log4j.appender.ts_log.layout = org.apache.log4j.PatternLayout\n log4j.appender.ts_log.layout.ConversionPattern = %d{ISO8601} [%-5p] %t %c - %m%n\n ```\n \n-This configuration by default dumps all the logs above `DEBUG` level. \n+This configuration by default dumps all the logs above `DEBUG` level.\n \n ### Generating and logging custom logs\n-As a user of TorchServe, you might want to log custom logs into the log files. This could be for debug purposes or\n-to log any errors. To accomplish this, simply print the required logs to `stdout/stderr`. TorchServe will capture the logs generated by the \n-backend workers and log it into the log file. Some examples of logs are as follows\n \n-1. Messages printed to stderr \n+You might want to log custom logs into the log files. This could be for debug purposes or to log any errors.\n+To do this, print the required logs to `stdout/stderr`.\n+TorchServe captures the logs generated by the backend workers and logs it into the log file. Some examples of logs are as follows:\n+\n+1. Messages printed to stderr:\n+\n ```text\n 2018-10-14 16:46:51,656 [WARN ] W-9000-stderr org.pytorch.serve.wlm.WorkerLifeCycle - [16:46:51] src/nnvm/legacy_json_util.cc:209: Loading symbol saved by previous version v0.8.0. Attempting to upgrad\\\n e...\n 2018-10-14 16:46:51,657 [WARN ] W-9000-stderr org.pytorch.serve.wlm.WorkerLifeCycle - [16:46:51] src/nnvm/legacy_json_util.cc:217: Symbol successfully upgraded!\n ```\n- \n-1. Messages printed to stdout \n+\n+1. Messages printed to stdout:\n+\n ```text\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - preprocess time: 3.60\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - inference time: 117.31\n 2018-10-14 16:59:59,926 [INFO ] W-9000-stdout org.pytorch.serve.wlm.WorkerLifeCycle - postprocess time: 8.52\n ```\n \n-# Modifying the behavior of the logs\n-In order to modify the default behavior of the logging, you could define `log4j.properties` file. There are two ways of starting\n-TorchServe with custom logs\n+## Modifying the behavior of the logs\n+\n+To modify the default logging behavior, define a `log4j.properties` file. There are two ways of starting TorchServe with custom logs:\n \n ### Provide with config.properties\n- Once you define custom `log4j.properties`, add this to the \n-`config.properties` file as follows\n+\n+ After you define a custom `log4j.properties` file, add the following to the `config.properties` file:\n \n ```properties\n vmargs=-Dlog4j.configuration=file:///path/to/custom/log4j.properties\n ```\n-Then start the TorchServe as follows\n+\n+Then start TorchServe as follows:\n+\n ```bash\n-$ torchserve --start --model-store /models --ts-config /path/to/config.properties\n+$ torchserve --start --ts-config /path/to/config.properties\n ```\n-### Provide with CLI \n+\n+### Provide with CLI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4355518182639b559a4d576d1beebd728f1c8ed9"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1587, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}