{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODAzNjA3", "number": 432, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMDo1NFrOEG0cAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMToyNzowOVrOEP2HTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg2MDQ4OnYy", "diffSide": "LEFT", "path": "examples/Huggingface_Transformers/Transformer_handler_generalized.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMDo1NFrOGl2a5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMDo1NFrOGl2a5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjExOQ==", "bodyText": "Much of the initialize code seems to replicate what's in BaseHandler -- e.g. loading the model, pushing it to a device, etc. Could you call super().initialize(ctx) before adding in the rest?\nAs a side note, we should probably standardize a way to customize the handlers' behavior.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442342119", "createdAt": "2020-06-18T16:10:54Z", "author": {"login": "htappen"}, "path": "examples/Huggingface_Transformers/Transformer_handler_generalized.py", "diffHunk": "@@ -142,27 +141,3 @@ def inference(self, inputs):\n             logger.info(\"Model predicted: '%s'\", prediction)\n \n         return [prediction]\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg2MzYxOnYy", "diffSide": "LEFT", "path": "examples/image_classifier/mnist/mnist_handler.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTo0NVrOGl2dAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTo0NVrOGl2dAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjY1Ng==", "bodyText": "Much improved! Thank you!", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442342656", "createdAt": "2020-06-18T16:11:45Z", "author": {"login": "htappen"}, "path": "examples/image_classifier/mnist/mnist_handler.py", "diffHunk": "@@ -1,55 +1,23 @@\n import io\n-import logging\n-import numpy as np\n-import os\n-import torch\n+\n from PIL import Image\n-from torch.autograd import Variable\n from torchvision import transforms\n \n-logger = logging.getLogger(__name__)\n+from ts.torch_handler.image_classifier import ImageClassifier\n \n \n-class MNISTDigitClassifier(object):\n-    \"\"\"\n-    MNISTDigitClassifier handler class. This handler takes a greyscale image\n-    and returns the digit in that image.\n+class MNISTDigitClassifier(ImageClassifier):\n     \"\"\"\n+    MNISTDigitClassifier handler class. This handler extends class ImageClassifier from image_classifier.py, a\n+    default handler. This handler takes an image and returns the number in that image.\n \n-    def __init__(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg4MDYzOnYy", "diffSide": "RIGHT", "path": "examples/image_classifier/resnet_152_batch/resnet152_handler.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxNjowN1rOGl2nzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1Mzo0MFrOGnh9dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NTQyMw==", "bodyText": "This can be part of another change, but it would be good to refactor BaseHandler to handle batching in preprocess & inference. I would suggest we make the assumption that all models used (speaking of the torch.nn.Module) support batch inputs, and offer an opt-out option to those that can;t.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442345423", "createdAt": "2020-06-18T16:16:07Z", "author": {"login": "htappen"}, "path": "examples/image_classifier/resnet_152_batch/resnet152_handler.py", "diffHunk": "@@ -1,93 +1,25 @@\n-import io\n-import logging\n-import numpy as np\n-import os\n import torch\n-from PIL import Image\n-from torch.autograd import Variable\n-from torchvision import transforms\n \n-logger = logging.getLogger(__name__)\n+from ts.torch_handler.image_classifier import ImageClassifier\n \n \n-class BatchImageClassifier(object):\n+class BatchImageClassifier(ImageClassifier):\n     \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNDA1Mw==", "bodyText": "@htappen Yes, as commented on your proposal #434, it can be taken up.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444104053", "createdAt": "2020-06-23T09:53:40Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_classifier/resnet_152_batch/resnet152_handler.py", "diffHunk": "@@ -1,93 +1,25 @@\n-import io\n-import logging\n-import numpy as np\n-import os\n import torch\n-from PIL import Image\n-from torch.autograd import Variable\n-from torchvision import transforms\n \n-logger = logging.getLogger(__name__)\n+from ts.torch_handler.image_classifier import ImageClassifier\n \n \n-class BatchImageClassifier(object):\n+class BatchImageClassifier(ImageClassifier):\n     \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NTQyMw=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg5NzUzOnYy", "diffSide": "RIGHT", "path": "examples/text_to_speech_synthesizer/waveglow_handler.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyMDoyOVrOGl2ytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyMDoyOVrOGl2ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0ODIxNA==", "bodyText": "Similar story here with initialize: can we defer the basic model loading to super().initialize()?", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442348214", "createdAt": "2020-06-18T16:20:29Z", "author": {"login": "htappen"}, "path": "examples/text_to_speech_synthesizer/waveglow_handler.py", "diffHunk": "@@ -6,11 +6,12 @@\n import zipfile\n from waveglow_model import WaveGlow\n from scipy.io.wavfile import write, read\n+from ts.torch_handler.base_handler import BaseHandler\n \n logger = logging.getLogger(__name__)\n \n \n-class WaveGlowSpeechSynthesizer(object):\n+class WaveGlowSpeechSynthesizer(BaseHandler):\n \n     def __init__(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg5OTczOnYy", "diffSide": "RIGHT", "path": "ts/model_loader.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyMTowNlrOGl20Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1NzoyMlrOGniGJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0ODU4Ng==", "bodyText": "Are you going to remove this code?", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442348586", "createdAt": "2020-06-18T16:21:06Z", "author": {"login": "htappen"}, "path": "ts/model_loader.py", "diffHunk": "@@ -115,16 +114,18 @@ def load(self, model_name, model_dir, handler, gpu_id, batch_size):\n             service = Service(model_name, model_dir, manifest, model_service.handle, gpu_id, batch_size)\n             initialize = getattr(model_service, \"initialize\")\n             if initialize is not None:\n-                # noinspection PyBroadException\n-                try:\n-                    model_service.initialize(service.context)\n+                # # noinspection PyBroadException\n+                # try:\n+                model_service.initialize(service.context)\n                     # pylint: disable=broad-except\n-                except Exception:\n-                    # noinspection PyBroadException\n-                    try:\n-                        sys.exc_clear()\n-                        # pylint: disable=broad-except\n-                    except Exception:\n-                        pass\n+                # except Exception:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNjI3OA==", "bodyText": "Yes.  Done", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444106278", "createdAt": "2020-06-23T09:57:22Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/model_loader.py", "diffHunk": "@@ -115,16 +114,18 @@ def load(self, model_name, model_dir, handler, gpu_id, batch_size):\n             service = Service(model_name, model_dir, manifest, model_service.handle, gpu_id, batch_size)\n             initialize = getattr(model_service, \"initialize\")\n             if initialize is not None:\n-                # noinspection PyBroadException\n-                try:\n-                    model_service.initialize(service.context)\n+                # # noinspection PyBroadException\n+                # try:\n+                model_service.initialize(service.context)\n                     # pylint: disable=broad-except\n-                except Exception:\n-                    # noinspection PyBroadException\n-                    try:\n-                        sys.exc_clear()\n-                        # pylint: disable=broad-except\n-                    except Exception:\n-                        pass\n+                # except Exception:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0ODU4Ng=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTkyNjIwOnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/base_handler.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyNzo1OVrOGl3E7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NDowNVrOGnjokQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mjg3OQ==", "bodyText": "Will this even work in any cases without preprocessing being overridden? self.model will need a torch.Tensor in the next step.\nThe goal should be to minimize the number of methods a user has to override, and for the purpose of each override to be crystal clear. In order to do that, BaseHandler needs to have a clean, obvious implementation that could function if the model doesn't need special preprocessing. Check out https://github.com/htappen/serve/blob/master/ts/torch_handler/base_handler.py#L144 -- that implements a pipeline of these steps:\n\nPreprocess: convert from list to Tensor\nInference: run model, accepting a Tensor and returning a Tensor\nPostprocess: convert from Tensor back to list", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442352879", "createdAt": "2020-06-18T16:27:59Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTQ3Mw==", "bodyText": "See my response in your next comment.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444131473", "createdAt": "2020-06-23T10:44:05Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mjg3OQ=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTkzMzEzOnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/image_classifier.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyOTo0M1rOGl3JQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTo0NzoxM1rOGqLdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mzk4Ng==", "bodyText": "Do you still need this override, or can this functionality be moved into BaseHandler? It seems generic to any forward pass.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442353986", "createdAt": "2020-06-18T16:29:43Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTgzNg==", "bodyText": "Yes, this can be removed.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444131836", "createdAt": "2020-06-23T10:44:49Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mzk4Ng=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTEzNg==", "bodyText": "Will make this and other default handler related changes once your PR for improved base handler is merged to this branch/issue_411. As indicated, please create PR against this issue_411 branch for base handler improvements.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r446881136", "createdAt": "2020-06-29T09:47:13Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mzk4Ng=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTkzNjU0OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/image_segmenter.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozMDozM1rOGl3LTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NTo1M1rOGnjsMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDUxMA==", "bodyText": "Same comment as ImageClassifier: the inference override seems generic to any model pass that the code should be moved into BaseHandler.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442354510", "createdAt": "2020-06-18T16:30:33Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -47,26 +47,3 @@ def inference(self, data):\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjQwMQ==", "bodyText": "Yes, it can be cleaned.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444132401", "createdAt": "2020-06-23T10:45:53Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -47,26 +47,3 @@ def inference(self, data):\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDUxMA=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk0OTA3OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/text_classifier.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozMzo1MlrOGl3TeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0Njo1N1rOGnjuZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjYwMA==", "bodyText": "The inference override should be removed. First, these lines are generic to any model serving and should be moved to BaseHandler:\ninputs = Variable(data).to(self.device)\noutput = self.model.forward(inputs, torch.tensor([0]).to(self.device))\nNext, these bits should be in postprocess:\noutput = output.argmax(1).item() + 1\nif self.mapping:\n    output = self.mapping[str(output)]\nThe conditional should also be in BaseHandler.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442356600", "createdAt": "2020-06-18T16:33:52Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/text_classifier.py", "diffHunk": "@@ -61,26 +61,3 @@ def inference(self, data):\n \n     def postprocess(self, data):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjk2Nw==", "bodyText": "Agreed.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444132967", "createdAt": "2020-06-23T10:46:57Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/text_classifier.py", "diffHunk": "@@ -61,26 +61,3 @@ def inference(self, data):\n \n     def postprocess(self, data):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjYwMA=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk2MDY1OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/image_segmenter.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNzoxOVrOGl3bMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NjowNlrOGnjsqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1ODU3OA==", "bodyText": "The inference code here is generic to all models and should move to BaseHandler.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442358578", "createdAt": "2020-06-18T16:37:19Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -47,26 +47,3 @@ def inference(self, data):\n \n     def postprocess(self, data):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjUyMQ==", "bodyText": "Sure.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444132521", "createdAt": "2020-06-23T10:46:06Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -47,26 +47,3 @@ def inference(self, data):\n \n     def postprocess(self, data):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1ODU3OA=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk2NDA3OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/image_classifier.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozODowOVrOGl3dWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MDozMVrOGnvOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTEzMQ==", "bodyText": "This lookup of classes seems generic to ANY classifier model. Consider moving it into BaseHandler. See https://github.com/htappen/serve/blob/master/ts/torch_handler/base_handler.py#L107 for an example.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442359131", "createdAt": "2020-06-18T16:38:09Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)\n         outputs = self.model.forward(inputs)\n+        return outputs\n \n-        ps = F.softmax(outputs, dim=1)\n-        topk = getattr(ps, self.device.type)().topk(topk)\n+    def postprocess(self, data):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjE2OQ==", "bodyText": "Please refer my above comments related to postprocessing->mapping.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444132169", "createdAt": "2020-06-23T10:45:25Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)\n         outputs = self.model.forward(inputs)\n+        return outputs\n \n-        ps = F.softmax(outputs, dim=1)\n-        topk = getattr(ps, self.device.type)().topk(topk)\n+    def postprocess(self, data):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTEzMQ=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMTQ2OA==", "bodyText": "Replied above. It's generic and repeated code that it should at least be moved into a helper method that an overriding \"postprocess\" calls.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444321468", "createdAt": "2020-06-23T15:40:31Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -39,24 +47,34 @@ def preprocess(self, data):\n         ])\n         image = Image.open(io.BytesIO(image))\n         image = my_preprocess(image)\n+\n+        # Convert 2D image to 1D vector\n+        image = image.unsqueeze(0)\n+\n         return image\n \n     def inference(self, data):\n         ''' Predict the class (or classes) of an image using a trained deep learning model.\n         '''\n-        # Convert 2D image to 1D vector\n-        topk = 5\n-        data = np.expand_dims(data, 0)\n-        data = torch.from_numpy(data)\n-\n         inputs = Variable(data).to(self.device)\n         outputs = self.model.forward(inputs)\n+        return outputs\n \n-        ps = F.softmax(outputs, dim=1)\n-        topk = getattr(ps, self.device.type)().topk(topk)\n+    def postprocess(self, data):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTEzMQ=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk3NjY5OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/base_handler.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MToyOVrOGl3lVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMTozNFrOGqJvcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTE3Mw==", "bodyText": "The interface (a) is still unclear and (b) requires an override almost always of pre- and post-process. Instead, provide a default implementation that clarifies what a developer should do in each step AND could work without any of the other steps being overridden.\nHow about this interface?\n\npreprocess: accepts list, returns Tensor\ninference: accepts Tensor, returns Tensor\npostprocess: accepts Tensor, returns list\n\nSee https://github.com/htappen/serve/blob/master/ts/torch_handler/base_handler.py#L144", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442361173", "createdAt": "2020-06-18T16:41:29Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"\n+        Override to customize the pre-processing\n+        :param data: input data\n+        :return: input data\n+        \"\"\"\n+        return data\n \n-    @abc.abstractmethod\n     def inference(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTA5Mw==", "bodyText": "preprocess - agreed!\n\n\ninference - Can't we just replace torch.as_tensor(data) with torch.as_tensor(data, device=self.device) in preprocess itself? Thus we will be left with\n\n\nresults = self.model(torch_data)\nmarshalled_results = results.to('cpu')\n\n\nposprocess - BaseHandler is generic handler and we should assume that it will be only/related to classification hence topk is not required at basehandler.  In fact, it is part of image_classification in this PR and user has ability to override that class/topk.  Regarding mapping, this can be model specific and may/may not required mapping. Hence it should be part of specific handlers. Thats why we were just loading it as json file.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444131093", "createdAt": "2020-06-23T10:43:14Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"\n+        Override to customize the pre-processing\n+        :param data: input data\n+        :return: input data\n+        \"\"\"\n+        return data\n \n-    @abc.abstractmethod\n     def inference(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTE3Mw=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMTAxMw==", "bodyText": "RE (2): I'd suggest we don't require users to marshal to a certain device. The device initialization code is, as it should be, handled automatically in \"initialize\". Most users, then, might not be aware of the need to put the data to a certain device. So, let's keep the step in (2) of copying the tensor to the GPU. Note: if the user does already move it to the device in preprocess, then as_tensor(...) becomes a no-op (PyTorch handles that)\nRE (3): I can get behind making topk and mapping not included in postprocess, but they do need to be refactored into helper methods as part of BaseHandler, given how many of the example classes use them.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r444321013", "createdAt": "2020-06-23T15:39:52Z", "author": {"login": "htappen"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"\n+        Override to customize the pre-processing\n+        :param data: input data\n+        :return: input data\n+        \"\"\"\n+        return data\n \n-    @abc.abstractmethod\n     def inference(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTE3Mw=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1Mjk3OQ==", "bodyText": "@htappen Can you make these changes and create PR against this branch (issue_411). Then I will go ahead and merge your changes to this branch.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r446852979", "createdAt": "2020-06-29T08:21:34Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -77,14 +77,40 @@ def initialize(self, ctx):\n \n         self.initialized = True\n \n-    @abc.abstractmethod\n     def preprocess(self, data):\n-        pass\n+        \"\"\"\n+        Override to customize the pre-processing\n+        :param data: input data\n+        :return: input data\n+        \"\"\"\n+        return data\n \n-    @abc.abstractmethod\n     def inference(self, data):\n-        pass\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTE3Mw=="}, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk3Nzk3OnYy", "diffSide": "RIGHT", "path": "ts/model_loader.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MTo0OVrOGl3mLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MTo0OVrOGl3mLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTM4OQ==", "bodyText": "Do you plan to remove this code?", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442361389", "createdAt": "2020-06-18T16:41:49Z", "author": {"login": "htappen"}, "path": "ts/model_loader.py", "diffHunk": "@@ -115,16 +114,18 @@ def load(self, model_name, model_dir, handler, gpu_id, batch_size):\n             service = Service(model_name, model_dir, manifest, model_service.handle, gpu_id, batch_size)\n             initialize = getattr(model_service, \"initialize\")\n             if initialize is not None:\n-                # noinspection PyBroadException\n-                try:\n-                    model_service.initialize(service.context)\n+                # # noinspection PyBroadException\n+                # try:\n+                model_service.initialize(service.context)\n                     # pylint: disable=broad-except\n-                except Exception:\n-                    # noinspection PyBroadException\n-                    try:\n-                        sys.exc_clear()\n-                        # pylint: disable=broad-except\n-                    except Exception:\n-                        pass\n+                # except Exception:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk4MjU4OnYy", "diffSide": "RIGHT", "path": "examples/text_to_speech_synthesizer/waveglow_handler.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mjo0NFrOGl3pAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mjo0NFrOGl3pAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjExNQ==", "bodyText": "Some of the code in initialize duplicates what's in BaseHandler. Call super().initialize(context) instead of repeating the same code about loading models.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r442362115", "createdAt": "2020-06-18T16:42:44Z", "author": {"login": "htappen"}, "path": "examples/text_to_speech_synthesizer/waveglow_handler.py", "diffHunk": "@@ -101,20 +102,3 @@ def postprocess(self, inference_output):\n             data = output.read()\n         os.remove(path)\n         return [data]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0012ffc23af828493da1b9bfc145c4bea2894f59"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDQ4ODkwOnYy", "diffSide": "RIGHT", "path": "examples/image_classifier/resnet_152_batch/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMTowMzoxOVrOGzunnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjoxNjowM1rOG0JIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NDM2NQ==", "bodyText": "@shivamshriwas Is the --handler value correct? Shouldn't it be the actual file path for the handler .py file?", "url": "https://github.com/pytorch/serve/pull/432#discussion_r456894365", "createdAt": "2020-07-19T11:03:19Z", "author": {"login": "chauhang"}, "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -55,7 +55,7 @@ curl http://127.0.0.1:8080/predictions/resnet152 -T ./serve/examples/image_class\n \n     ```bash\n \n-    torch-model-archiver --model-name resnet-152-batch --version 1.0  --serialized-file resnet-152-batch.pt --extra-files serve/examples/image_classifier/index_to_name.json  --handler serve/examples/image_classifier/resnet_152_batch/resnet152_handler.py\n+    torch-model-archiver --model-name resnet-152-batch --version 1.0  --serialized-file resnet-152-batch.pt --extra-files serve/examples/image_classifier/index_to_name.json  --handler image_classifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyODc4OQ==", "bodyText": "@chauhang Due to batch support in default handler's [with this PR], resnet152_handler handler became redundant and hence same has been removed and replaced with default handler image_classifier.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r457328789", "createdAt": "2020-07-20T12:16:03Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -55,7 +55,7 @@ curl http://127.0.0.1:8080/predictions/resnet152 -T ./serve/examples/image_class\n \n     ```bash\n \n-    torch-model-archiver --model-name resnet-152-batch --version 1.0  --serialized-file resnet-152-batch.pt --extra-files serve/examples/image_classifier/index_to_name.json  --handler serve/examples/image_classifier/resnet_152_batch/resnet152_handler.py\n+    torch-model-archiver --model-name resnet-152-batch --version 1.0  --serialized-file resnet-152-batch.pt --extra-files serve/examples/image_classifier/index_to_name.json  --handler image_classifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NDM2NQ=="}, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDQ4OTAzOnYy", "diffSide": "RIGHT", "path": "examples/image_classifier/resnet_152_batch/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMTowMzoyOFrOGzunrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjoxODo0N1rOG0JPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NDM4MA==", "bodyText": "@shivamshriwas Is the --handler value correct? Shouldn't it be the actual file path for the handler .py file", "url": "https://github.com/pytorch/serve/pull/432#discussion_r456894380", "createdAt": "2020-07-19T11:03:28Z", "author": {"login": "chauhang"}, "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -3,7 +3,7 @@ Run the commands given in following steps from the parent directory of the root\n \n ```bash\n wget https://download.pytorch.org/models/resnet152-b121ed2d.pth\n-torch-model-archiver --model-name resnet-152-batch --version 1.0 --model-file ./serve/examples/image_classifier/resnet_152_batch/model.py --serialized-file resnet152-b121ed2d.pth --handler ./serve/examples/image_classifier/resnet_152_batch/resnet152_handler.py --extra-files ./serve/examples/image_classifier/index_to_name.json\n+torch-model-archiver --model-name resnet-152-batch --version 1.0 --model-file ./serve/examples/image_classifier/resnet_152_batch/model.py --serialized-file resnet152-b121ed2d.pth --handler image_classifier --extra-files ./serve/examples/image_classifier/index_to_name.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzMDYwOQ==", "bodyText": "@chauhang  resnet152_handler has been removed due to batch support in default handlers. Hence the above change", "url": "https://github.com/pytorch/serve/pull/432#discussion_r457330609", "createdAt": "2020-07-20T12:18:47Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -3,7 +3,7 @@ Run the commands given in following steps from the parent directory of the root\n \n ```bash\n wget https://download.pytorch.org/models/resnet152-b121ed2d.pth\n-torch-model-archiver --model-name resnet-152-batch --version 1.0 --model-file ./serve/examples/image_classifier/resnet_152_batch/model.py --serialized-file resnet152-b121ed2d.pth --handler ./serve/examples/image_classifier/resnet_152_batch/resnet152_handler.py --extra-files ./serve/examples/image_classifier/index_to_name.json\n+torch-model-archiver --model-name resnet-152-batch --version 1.0 --model-file ./serve/examples/image_classifier/resnet_152_batch/model.py --serialized-file resnet152-b121ed2d.pth --handler image_classifier --extra-files ./serve/examples/image_classifier/index_to_name.json", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NDM4MA=="}, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDUwNzAyOnYy", "diffSide": "RIGHT", "path": "examples/image_classifier/mnist/mnist_handler.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMToyNzowOVrOGzuwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1MjozNlrOG0Ku2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NjYyOA==", "bodyText": "@shivamshriwas Can you please clarify where the preprocess() function was overriden? I am seeing only the image_processing getting set, which is used in the VisualHandler base class as part of the preprocess() functions. Please update the comments accordingly for users to get clarity about this", "url": "https://github.com/pytorch/serve/pull/432#discussion_r456896628", "createdAt": "2020-07-19T11:27:09Z", "author": {"login": "chauhang"}, "path": "examples/image_classifier/mnist/mnist_handler.py", "diffHunk": "@@ -1,99 +1,23 @@\n import io\n-import logging\n-import numpy as np\n-import os\n-import torch\n+\n from PIL import Image\n-from torch.autograd import Variable\n from torchvision import transforms\n \n-logger = logging.getLogger(__name__)\n+from ts.torch_handler.image_classifier import ImageClassifier\n \n \n-class MNISTDigitClassifier(object):\n-    \"\"\"\n-    MNISTDigitClassifier handler class. This handler takes a greyscale image\n-    and returns the digit in that image.\n+class MNISTDigitClassifier(ImageClassifier):\n     \"\"\"\n+    MNISTDigitClassifier handler class. This handler extends class ImageClassifier from image_classifier.py, a\n+    default handler. This handler takes an image and returns the number in that image.\n \n-    def __init__(self):\n-        self.model = None\n-        self.mapping = None\n-        self.device = None\n-        self.initialized = False\n-\n-    def initialize(self, ctx):\n-        \"\"\"First try to load torchscript else load eager mode state_dict based model\"\"\"\n-\n-        properties = ctx.system_properties\n-        self.device = torch.device(\"cuda:\" + str(properties.get(\"gpu_id\")) if torch.cuda.is_available() else \"cpu\")\n-        model_dir = properties.get(\"model_dir\")\n-\n-        # Read model serialize/pt file\n-        model_pt_path = os.path.join(model_dir, \"mnist_cnn.pt\")\n-        # Read model definition file\n-        model_def_path = os.path.join(model_dir, \"mnist.py\")\n-        if not os.path.isfile(model_def_path):\n-            raise RuntimeError(\"Missing the model definition file\")\n-\n-        from mnist import Net\n-        state_dict = torch.load(model_pt_path, map_location=self.device)\n-        self.model = Net()\n-        self.model.load_state_dict(state_dict)\n-        self.model.to(self.device)\n-        self.model.eval()\n-\n-        logger.debug('Model file {0} loaded successfully'.format(model_pt_path))\n-        self.initialized = True\n-\n-    def preprocess(self, data):\n-        \"\"\"\n-         Scales, crops, and normalizes a PIL image for a MNIST model,\n-         returns an Numpy array\n-        \"\"\"\n-        image = data[0].get(\"data\")\n-        if image is None:\n-            image = data[0].get(\"body\")\n-\n-        mnist_transform = transforms.Compose([\n-            transforms.ToTensor(),\n-            transforms.Normalize((0.1307,), (0.3081,))\n-        ])\n-        image = Image.open(io.BytesIO(image))\n-        image = mnist_transform(image)\n-        return image\n-\n-    def inference(self, img, topk=5):\n-        ''' Predict the class (or classes) of an image using a trained deep learning model.\n-        '''\n-        # Convert 2D image to 1D vector\n-        img = np.expand_dims(img, 0)\n-        img = torch.from_numpy(img)\n-\n-        self.model.eval()\n-        inputs = Variable(img).to(self.device)\n-        outputs = self.model.forward(inputs)\n-\n-        _, y_hat = outputs.max(1)\n-        predicted_idx = str(y_hat.item())\n-        return [predicted_idx]\n-\n-    def postprocess(self, inference_output):\n-        return inference_output\n-\n-\n-_service = MNISTDigitClassifier()\n-\n-\n-def handle(data, context):\n-    if not _service.initialized:\n-        _service.initialize(context)\n-\n-    if data is None:\n-        return None\n+    Here methods preprocess() and postprocess() have been overridden while others are reused from parent class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDk3MA==", "bodyText": "Removed redundant comments. The preprocess method is not getting overridden.", "url": "https://github.com/pytorch/serve/pull/432#discussion_r457354970", "createdAt": "2020-07-20T12:52:36Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/image_classifier/mnist/mnist_handler.py", "diffHunk": "@@ -1,99 +1,23 @@\n import io\n-import logging\n-import numpy as np\n-import os\n-import torch\n+\n from PIL import Image\n-from torch.autograd import Variable\n from torchvision import transforms\n \n-logger = logging.getLogger(__name__)\n+from ts.torch_handler.image_classifier import ImageClassifier\n \n \n-class MNISTDigitClassifier(object):\n-    \"\"\"\n-    MNISTDigitClassifier handler class. This handler takes a greyscale image\n-    and returns the digit in that image.\n+class MNISTDigitClassifier(ImageClassifier):\n     \"\"\"\n+    MNISTDigitClassifier handler class. This handler extends class ImageClassifier from image_classifier.py, a\n+    default handler. This handler takes an image and returns the number in that image.\n \n-    def __init__(self):\n-        self.model = None\n-        self.mapping = None\n-        self.device = None\n-        self.initialized = False\n-\n-    def initialize(self, ctx):\n-        \"\"\"First try to load torchscript else load eager mode state_dict based model\"\"\"\n-\n-        properties = ctx.system_properties\n-        self.device = torch.device(\"cuda:\" + str(properties.get(\"gpu_id\")) if torch.cuda.is_available() else \"cpu\")\n-        model_dir = properties.get(\"model_dir\")\n-\n-        # Read model serialize/pt file\n-        model_pt_path = os.path.join(model_dir, \"mnist_cnn.pt\")\n-        # Read model definition file\n-        model_def_path = os.path.join(model_dir, \"mnist.py\")\n-        if not os.path.isfile(model_def_path):\n-            raise RuntimeError(\"Missing the model definition file\")\n-\n-        from mnist import Net\n-        state_dict = torch.load(model_pt_path, map_location=self.device)\n-        self.model = Net()\n-        self.model.load_state_dict(state_dict)\n-        self.model.to(self.device)\n-        self.model.eval()\n-\n-        logger.debug('Model file {0} loaded successfully'.format(model_pt_path))\n-        self.initialized = True\n-\n-    def preprocess(self, data):\n-        \"\"\"\n-         Scales, crops, and normalizes a PIL image for a MNIST model,\n-         returns an Numpy array\n-        \"\"\"\n-        image = data[0].get(\"data\")\n-        if image is None:\n-            image = data[0].get(\"body\")\n-\n-        mnist_transform = transforms.Compose([\n-            transforms.ToTensor(),\n-            transforms.Normalize((0.1307,), (0.3081,))\n-        ])\n-        image = Image.open(io.BytesIO(image))\n-        image = mnist_transform(image)\n-        return image\n-\n-    def inference(self, img, topk=5):\n-        ''' Predict the class (or classes) of an image using a trained deep learning model.\n-        '''\n-        # Convert 2D image to 1D vector\n-        img = np.expand_dims(img, 0)\n-        img = torch.from_numpy(img)\n-\n-        self.model.eval()\n-        inputs = Variable(img).to(self.device)\n-        outputs = self.model.forward(inputs)\n-\n-        _, y_hat = outputs.max(1)\n-        predicted_idx = str(y_hat.item())\n-        return [predicted_idx]\n-\n-    def postprocess(self, inference_output):\n-        return inference_output\n-\n-\n-_service = MNISTDigitClassifier()\n-\n-\n-def handle(data, context):\n-    if not _service.initialized:\n-        _service.initialize(context)\n-\n-    if data is None:\n-        return None\n+    Here methods preprocess() and postprocess() have been overridden while others are reused from parent class.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5NjYyOA=="}, "originalCommit": {"oid": "26e372a8da91690d8e5d1a25394fc90078ad34d3"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1500, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}