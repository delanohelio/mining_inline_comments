{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTY2MTg1", "number": 111, "title": "Added snapshot feature", "bodyText": "Resolves :\n#73 - Config changes are not preserved\n#34 - Adding new model from s3 url via management api does not store it into the model store directory\n#86 - Model store property on starting TorchServe", "createdAt": "2020-03-20T14:36:57Z", "url": "https://github.com/pytorch/serve/pull/111", "merged": true, "mergeCommit": {"oid": "864534791c9793c72931efaa7b4015bdd9a5274b"}, "closed": true, "closedAt": "2020-04-07T18:29:38Z", "author": {"login": "harshbafna"}, "timelineItems": {"totalCount": 71, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPGzK0AH2gAyMzkxNTY2MTg1OmQ0MmM1ZDMwZjNmMzM3ZTUxNzc4Yzk0N2JkMzc3YzY0ZDdmNzJiNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUCks-AH2gAyMzkxNTY2MTg1OmIzMDFmYjBmMDQ4NjE5OWYyZmE5MDhmNTY5ZWRmYjYzNzRhNjA0YTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d42c5d30f3f337e51778c947bd377c64d7f72b5e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d42c5d30f3f337e51778c947bd377c64d7f72b5e", "committedDate": "2020-03-19T07:30:16Z", "message": "added changes to store models from public url to model store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf0aa6f2775e9ac7e3e3bf6adf7d50b76156202", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2cf0aa6f2775e9ac7e3e3bf6adf7d50b76156202", "committedDate": "2020-03-19T07:33:03Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76cc80f0b99ce73b8bb58e5000266194cb4bc889", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/76cc80f0b99ce73b8bb58e5000266194cb4bc889", "committedDate": "2020-03-20T14:22:06Z", "message": "code changes and documentation for torchserve snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a2a8d17552664161a31b7fa2a54abc9607215039", "committedDate": "2020-03-20T14:35:06Z", "message": "updated java formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzAxMTA2", "url": "https://github.com/pytorch/serve/pull/111#pullrequestreview-378701106", "createdAt": "2020-03-20T17:59:19Z", "commit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo1OToxOVrOF5d_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyMToxOFrOF5er0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNDQxNw==", "bodyText": "@fbbradheintz @chauhang  Please review this.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395804417", "createdAt": "2020-03-20T17:59:19Z", "author": {"login": "mycpuorg"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNTYxMw==", "bodyText": "define \"last snapshot\" is this same as latesttimestamp-snapshot.cfg? Why not latesttimestamp-shutdown.cfg?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395805613", "createdAt": "2020-03-20T18:01:26Z", "author": {"login": "mycpuorg"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjUwNg==", "bodyText": "I expect the user to mostly start with just this torchserve --start --model-store <model store> what happens then?\nWhat's to prevent a blowup of snapshots and configuration files? Do we simply archive them periodically?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395806506", "createdAt": "2020-03-20T18:03:04Z", "author": {"login": "mycpuorg"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.\n+ - If no config file is supplied with `--ts-config-file` flag and no snapshots are available, TorchServe starts with default configurations.\n+ - The user restarts the server specifying this config file: `torchserve --start --model-store <model store> --ts-config <known good config snapshot>`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA==", "bodyText": "In effect, we are using filesystem to provide mutual exclusion at a coarse locking level for namespace collision? Is that right?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395807354", "createdAt": "2020-03-20T18:04:37Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -89,6 +89,9 @@ public void startAndWait() throws InterruptedException, IOException, GeneralSecu\n             // Create and schedule metrics manager\n             MetricManager.scheduleMetrics(configManager);\n             System.out.println(\"Model server started.\"); // NOPMD\n+\n+            SnapshotManager.getInstance().saveSnapshot(\"startup\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTAyNw==", "bodyText": "How is this different from class Model  seems redundant? If it's redundant, we should remove it. If it's not redundant, then why are moving class ModelInfo under snapshot. Since class Snaphot should, in theory, not be concerned about specifics of the model as per the documentation.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395809027", "createdAt": "2020-03-20T18:07:55Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/ModelInfo.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.pytorch.serve.snapshot;\n+\n+class ModelInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw==", "bodyText": "why?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395810937", "createdAt": "2020-03-20T18:11:41Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -37,11 +37,13 @@\n     private ConcurrentHashMap<String, ModelVersionedRefs> modelsNameMap;\n     private HashSet<String> startupModels;\n     private ScheduledExecutorService scheduler;\n+    private ConcurrentHashMap<String, String> modelUnregisterProgress;\n \n     private ModelManager(ConfigManager configManager, WorkLoadManager wlm) {\n         this.configManager = configManager;\n         this.wlm = wlm;\n         modelsNameMap = new ConcurrentHashMap<>();\n+        modelUnregisterProgress = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMTgwNw==", "bodyText": "What's the case when the model changed and it is a startup? It's not clear.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395811807", "createdAt": "2020-03-20T18:13:27Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/WorkLoadManager.java", "diffHunk": "@@ -82,7 +83,7 @@ public int getNumRunningWorkers(ModelVersionName modelVersionName) {\n         return numWorking;\n     }\n \n-    public CompletableFuture<HttpResponseStatus> modelChanged(Model model) {\n+    public CompletableFuture<HttpResponseStatus> modelChanged(Model model, boolean isStartup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ==", "bodyText": "It's not clear why this string \"snapshot\" is required?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395812459", "createdAt": "2020-03-20T18:14:38Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -240,6 +241,7 @@ private void handleRegisterModel(\n         final String msg = \"Model \\\"\" + modelName + \"\\\" registered\";\n         if (initialWorkers <= 0) {\n             NettyUtils.sendJsonResponse(ctx, new StatusResponse(msg));\n+            SnapshotManager.getInstance().saveSnapshot(\"snapshot\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzIyNQ==", "bodyText": "Why not a separate location for configs, they are \"special\" in some sense. They are different from simply log locations.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395813225", "createdAt": "2020-03-20T18:16:06Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.http.ConflictStatusException;\n+import org.pytorch.serve.util.ConfigManager;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\") + \"/config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMzQ5OQ==", "bodyText": "Please use global const definitions for property names", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395813499", "createdAt": "2020-03-20T18:16:39Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.http.ConflictStatusException;\n+import org.pytorch.serve.util.ConfigManager;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    public void saveSnapshot(Snapshot snapshot) throws IOException, ConflictStatusException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\") + \"/config\");\n+\n+        FileUtils.forceMkdir(snapshotPath);\n+\n+        Properties prop = configManager.getConfiguration();\n+\n+        File snapshotFile = new File(snapshotPath, snapshot.getName());\n+        if (snapshotFile.exists()) {\n+            throw new ConflictStatusException(\n+                    \"Snapshot \" + snapshot.getName() + \" already exists.\");\n+        }\n+\n+        String snapshotJson = GSON.toJson(snapshot, Snapshot.class);\n+        prop.put(\"model_snapshot\", snapshotJson);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNTg5MA==", "bodyText": "looks more and more like Snapshot is assuming the role of ModelVersionedRefs why? This increases the footprint of the whole application dramatically. Until clarified, please consider writing a design doc or adding design under documentation for this feature.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r395815890", "createdAt": "2020-03-20T18:21:18Z", "author": {"login": "mycpuorg"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/Snapshot.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.pytorch.serve.snapshot;\n+\n+import java.util.Map;\n+\n+public class Snapshot {\n+    private String name;\n+    private int modelCount;\n+    private long created;\n+    private Map<String, Map<String, ModelInfo>> models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63703708dfef3845a7dac272a13de03f653a4c27", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/63703708dfef3845a7dac272a13de03f653a4c27", "committedDate": "2020-03-23T12:01:02Z", "message": "added global const definitions for model_snapshot property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a519bb13b767359e6a30c4d9767cdab7704ea9f", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3a519bb13b767359e6a30c4d9767cdab7704ea9f", "committedDate": "2020-03-23T12:03:42Z", "message": "removed unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dfc2b9ea8321f4d7396585d278d2e2a2b36b8ab", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/8dfc2b9ea8321f4d7396585d278d2e2a2b36b8ab", "committedDate": "2020-03-23T15:45:49Z", "message": "Merge branch 'stage_release' into snapshot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODIzNDI3", "url": "https://github.com/pytorch/serve/pull/111#pullrequestreview-379823427", "createdAt": "2020-03-23T21:08:06Z", "commit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODowNlrOF6YKPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0NToxNlrOF6ZQrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzU2NA==", "bodyText": "Commenting on the issue", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396757564", "createdAt": "2020-03-23T21:08:06Z", "author": {"login": "fbbradheintz"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.\n+ - If no config file is supplied with `--ts-config-file` flag and no snapshots are available, TorchServe starts with default configurations.\n+ - The user restarts the server specifying this config file: `torchserve --start --model-store <model store> --ts-config <known good config snapshot>`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjUwNg=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NTgyOA==", "bodyText": "We should definitely be thinking about how to make this more robust. I have started an issue for discussion: #119", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396765828", "createdAt": "2020-03-23T21:24:27Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -89,6 +89,9 @@ public void startAndWait() throws InterruptedException, IOException, GeneralSecu\n             // Create and schedule metrics manager\n             MetricManager.scheduleMetrics(configManager);\n             System.out.println(\"Model server started.\"); // NOPMD\n+\n+            SnapshotManager.getInstance().saveSnapshot(\"startup\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzE3NA==", "bodyText": "I've started an issue to discuss improvements for the next revision. Please see issue #119.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396767174", "createdAt": "2020-03-23T21:27:18Z", "author": {"login": "fbbradheintz"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNTYxMw=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzY2Ng==", "bodyText": "If we're going to use this string in more than one place (and I see it below in line 283), could you please make it a constant?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396767666", "createdAt": "2020-03-23T21:28:17Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -240,6 +241,7 @@ private void handleRegisterModel(\n         final String msg = \"Model \\\"\" + modelName + \"\\\" registered\";\n         if (initialWorkers <= 0) {\n             NettyUtils.sendJsonResponse(ctx, new StatusResponse(msg));\n+            SnapshotManager.getInstance().saveSnapshot(\"snapshot\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2OTYzNg==", "bodyText": "And likewise with the other related strings.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396769636", "createdAt": "2020-03-23T21:32:18Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/http/ManagementRequestHandler.java", "diffHunk": "@@ -240,6 +241,7 @@ private void handleRegisterModel(\n         final String msg = \"Model \\\"\" + modelName + \"\\\" registered\";\n         if (initialWorkers <= 0) {\n             NettyUtils.sendJsonResponse(ctx, new StatusResponse(msg));\n+            SnapshotManager.getInstance().saveSnapshot(\"snapshot\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjQ1OQ=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MDU1OA==", "bodyText": "This is okay for the initial release, and we have #115 to track discussion of future enhancements.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396770558", "createdAt": "2020-03-23T21:34:19Z", "author": {"login": "fbbradheintz"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.\n+ - If no config file is supplied with `--ts-config-file` flag and no snapshots are available, TorchServe starts with default configurations.\n+ - The user restarts the server specifying this config file: `torchserve --start --model-store <model store> --ts-config <known good config snapshot>`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjUwNg=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NDI2Ng==", "bodyText": "This is fine for the current release; we have #119 to track discussion for enhancements after the initial release.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396774266", "createdAt": "2020-03-23T21:42:27Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/ModelServer.java", "diffHunk": "@@ -89,6 +89,9 @@ public void startAndWait() throws InterruptedException, IOException, GeneralSecu\n             // Create and schedule metrics manager\n             MetricManager.scheduleMetrics(configManager);\n             System.out.println(\"Model server started.\"); // NOPMD\n+\n+            SnapshotManager.getInstance().saveSnapshot(\"startup\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzM1NA=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NDY4Nw==", "bodyText": "This is okay for the time being. We have #119 to track discussion of enhancements after release.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396774687", "createdAt": "2020-03-23T21:43:11Z", "author": {"login": "fbbradheintz"}, "path": "docs/snapshot.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# TorchServe model snapshot\n+\n+TorchServe preserves server runtime configuration across sessions such that a TorchServe instance experiencing either a planned or unplanned service stop can restore its state upon restart.\n+ \n+A TorchServe's snapshot consists of following:\n+\n+ - Server configuration, which comprises: Which models are running, which versions of those models, and how many workers are active for each model.\n+ - Default server configuration used while starting TorchServe the first time.\n+ \n+The snapshot is taken at following instances -\n+\n+ - After successful startup, the server stores its current configuration in a timestamped snapshot file ./logs/configs/<YYYYMMDDHHmmSS>-startup.cfg\n+\n+ - If a user calls the Management API in a way that changes the server runtime config, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-snapshot.cfg\n+\n+ - When the server is shut down intentionally with `torchserve --stop`, snapshot is saved to ./logs/configs/<YYYYMMDDHHmmSS>-shutdown.cfg\n+\n+User can use snapshots to restore the TorchServe's state as follows :\n+\n+ - If no config file is supplied with `--ts-config-file` flag while starting TorchServe, last snapshot in ./logs/configs is used for startup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNTYxMw=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTU5OA==", "bodyText": "Agreed, we should be giving an HTTP 404 rather than an NPE if someone unregisters an unregistered model version.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r396775598", "createdAt": "2020-03-23T21:45:16Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -37,11 +37,13 @@\n     private ConcurrentHashMap<String, ModelVersionedRefs> modelsNameMap;\n     private HashSet<String> startupModels;\n     private ScheduledExecutorService scheduler;\n+    private ConcurrentHashMap<String, String> modelUnregisterProgress;\n \n     private ModelManager(ConfigManager configManager, WorkLoadManager wlm) {\n         this.configManager = configManager;\n         this.wlm = wlm;\n         modelsNameMap = new ConcurrentHashMap<>();\n+        modelUnregisterProgress = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDkzNw=="}, "originalCommit": {"oid": "a2a8d17552664161a31b7fa2a54abc9607215039"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1b5ae317551dd20db1697670a8964fa4664964", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ad1b5ae317551dd20db1697670a8964fa4664964", "committedDate": "2020-03-24T09:30:30Z", "message": "UT fixes and added wrapper to save snapshot function call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0db4f7f2b8536eab51bd05c0f16a5c43c31d729", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b0db4f7f2b8536eab51bd05c0f16a5c43c31d729", "committedDate": "2020-03-24T10:00:32Z", "message": "fixed expected values for related to model download from url related UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe800b1f40a6590211990c041ec2731f2cca007", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/cbe800b1f40a6590211990c041ec2731f2cca007", "committedDate": "2020-03-24T10:23:00Z", "message": "PMD fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b81d485fc1470e0520daa49ed4d1041e48ccf6", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/35b81d485fc1470e0520daa49ed4d1041e48ccf6", "committedDate": "2020-03-24T10:32:08Z", "message": "missed checkin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d30188fd41a463c6086df1979902c3cd01a9609", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0d30188fd41a463c6086df1979902c3cd01a9609", "committedDate": "2020-03-24T17:09:01Z", "message": "renamed ModelInfo as ModelSnapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03d0540963ed6fa928117c11c1c7d05110f581f", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b03d0540963ed6fa928117c11c1c7d05110f581f", "committedDate": "2020-03-24T19:51:23Z", "message": "Merge branch 'stage_release' into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc95e8d08c5ee1112cd9f4a6eaf9f16e4a4cdea2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/bc95e8d08c5ee1112cd9f4a6eaf9f16e4a4cdea2", "committedDate": "2020-03-24T20:06:12Z", "message": "fixed version and model store flag issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55af576f4f206e6bd3321d31bebcb2f386ad045", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b55af576f4f206e6bd3321d31bebcb2f386ad045", "committedDate": "2020-03-25T14:06:15Z", "message": "UT changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992432c8f806e135cb505f1fc01d00ea3ec5c36d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/992432c8f806e135cb505f1fc01d00ea3ec5c36d", "committedDate": "2020-03-25T14:09:53Z", "message": "java formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0218d89746ee8bf0509cc5b40c0b57662b978206", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0218d89746ee8bf0509cc5b40c0b57662b978206", "committedDate": "2020-03-25T15:44:14Z", "message": "initial commit for snapshot UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a2f124c8a8b410e2ff70f4c52105cd82b1e1d3a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2a2f124c8a8b410e2ff70f4c52105cd82b1e1d3a", "committedDate": "2020-03-25T18:00:32Z", "message": "Merge branch 'stage_release' into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0877eba6a3be77df710e3d74500f3c4d71ab0e6", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c0877eba6a3be77df710e3d74500f3c4d71ab0e6", "committedDate": "2020-03-25T18:38:16Z", "message": "updated expected output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c69d4a1dbb7915834e2a8714e76853dc226a8317", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c69d4a1dbb7915834e2a8714e76853dc226a8317", "committedDate": "2020-03-26T10:19:03Z", "message": "updated UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c53c7ef19d769d8b0eba7186a5ddff2190be8f1", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/6c53c7ef19d769d8b0eba7186a5ddff2190be8f1", "committedDate": "2020-03-27T05:25:49Z", "message": "updated timestamp format for snapshot file in doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7ac629c546622a63b20324ee07722d959cd109", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/cb7ac629c546622a63b20324ee07722d959cd109", "committedDate": "2020-03-27T07:34:55Z", "message": "logged error in snapshot name conflict instead of throwing exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f6f65a0f8e7d33b58da4e999842d8c055e8ef1", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d0f6f65a0f8e7d33b58da4e999842d8c055e8ef1", "committedDate": "2020-03-27T10:00:00Z", "message": "enhanced CI buildspec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86dc7d2a44597ed0576dc0473f2f1424dfecc08b", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/86dc7d2a44597ed0576dc0473f2f1424dfecc08b", "committedDate": "2020-03-27T10:58:07Z", "message": "dummy commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64aa623ef975a3c0aa31843c47ba209eee7916b5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/64aa623ef975a3c0aa31843c47ba209eee7916b5", "committedDate": "2020-03-27T11:02:51Z", "message": "removed jdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae31dc5168cb81d7527f566e523f0e00ecbf7a5c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/ae31dc5168cb81d7527f566e523f0e00ecbf7a5c", "committedDate": "2020-03-27T11:10:20Z", "message": "added psutil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261c75d494d742b501e8011dbe9e02d95ad4f9f7", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/261c75d494d742b501e8011dbe9e02d95ad4f9f7", "committedDate": "2020-03-27T11:27:49Z", "message": "added jdk11 in install commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922678c8934de89c6d81682cdc3b34b635a082bf", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/922678c8934de89c6d81682cdc3b34b635a082bf", "committedDate": "2020-03-27T14:37:04Z", "message": "corrected log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4554e74cf0f3bcefa816427b8e03fc4c249f10f6", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/4554e74cf0f3bcefa816427b8e03fc4c249f10f6", "committedDate": "2020-03-27T15:23:57Z", "message": "updated script based on testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11009660a330d126ec989da2e5b97986048dc6c9", "author": {"user": {"login": "mycpuorg", "name": null}}, "url": "https://github.com/pytorch/serve/commit/11009660a330d126ec989da2e5b97986048dc6c9", "committedDate": "2020-03-27T19:12:28Z", "message": "Merge pull request #128 from pytorch/ci_build_enhancement\n\nCi build enhancement merging to snapshot branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c1410d7b3684b5c2c05bf4679acb0d870f1d2c", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/03c1410d7b3684b5c2c05bf4679acb0d870f1d2c", "committedDate": "2020-03-29T10:30:03Z", "message": "added UTs for snapshot feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d4a6895d76f1082cfeb2be93af3813dfb769b1", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f9d4a6895d76f1082cfeb2be93af3813dfb769b1", "committedDate": "2020-03-29T10:30:20Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f232356b88eb1bef468b24f76038a17d6faa5611", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f232356b88eb1bef468b24f76038a17d6faa5611", "committedDate": "2020-03-29T11:17:28Z", "message": "updated UTs based on testing different machines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca728b60c2afe480b340320efc12f188c980637", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3ca728b60c2afe480b340320efc12f188c980637", "committedDate": "2020-03-29T11:34:49Z", "message": "fixed config manager test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50247b2f46d550d32217af7cc31b9a8937d34a45", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/50247b2f46d550d32217af7cc31b9a8937d34a45", "committedDate": "2020-03-29T11:36:16Z", "message": "formatting fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624cf0c2c0b293990987f0968a5bf2e209116db5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/624cf0c2c0b293990987f0968a5bf2e209116db5", "committedDate": "2020-03-29T12:55:51Z", "message": "fixed bug introduced in config manager and updated UTs accordingly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "132f85e1a50bfd5bb4fde3c30d07ed36cdb164a4", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/132f85e1a50bfd5bb4fde3c30d07ed36cdb164a4", "committedDate": "2020-03-29T13:09:01Z", "message": "updated expected output after config manager fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d5a86385136bdf4a962230578a1bfd7b7cb6ace", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/4d5a86385136bdf4a962230578a1bfd7b7cb6ace", "committedDate": "2020-03-29T14:02:53Z", "message": "added handling for GPU machines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10f6b715e2e9a0ce4e9a4001fdc4333abd7f1da8", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/10f6b715e2e9a0ce4e9a4001fdc4333abd7f1da8", "committedDate": "2020-03-29T17:07:50Z", "message": "added wait for snapshot generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42357ff33da7fa56bfef00003722ac647b707fcd", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/42357ff33da7fa56bfef00003722ac647b707fcd", "committedDate": "2020-03-30T04:39:24Z", "message": "Merge branch 'stage_release' into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0c178a09b858452adfd2ba73395fa99e588ba36", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a0c178a09b858452adfd2ba73395fa99e588ba36", "committedDate": "2020-03-30T08:08:23Z", "message": "fixed config read issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b37a5025667a291ed85b14a213319bf05c4d04ff", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b37a5025667a291ed85b14a213319bf05c4d04ff", "committedDate": "2020-03-30T08:08:37Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f871019f396fe5c273c42cb6857ba7925c349a09", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f871019f396fe5c273c42cb6857ba7925c349a09", "committedDate": "2020-03-30T08:54:21Z", "message": "fixed UTs for config validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a476a351dd8b8ae423942e1d77982e79f0bc1af9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a476a351dd8b8ae423942e1d77982e79f0bc1af9", "committedDate": "2020-03-30T13:05:47Z", "message": "Added shutdown hook to generate shutdown snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344c9f54775fabfe780412e252b0c901b2f164ac", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/344c9f54775fabfe780412e252b0c901b2f164ac", "committedDate": "2020-03-30T13:19:17Z", "message": "fix for no-config-snapshot flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be866375c61bb67df8d8d905bf9ebea7431e1e29", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/be866375c61bb67df8d8d905bf9ebea7431e1e29", "committedDate": "2020-03-30T13:27:17Z", "message": "added override to fix PMD error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2072f369f0667276028147a14906f0b915f99d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3d2072f369f0667276028147a14906f0b915f99d", "committedDate": "2020-03-30T13:48:20Z", "message": "added null check for version not found for scale api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eacdea57c0192be362a78c5660244836788b4728", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/eacdea57c0192be362a78c5660244836788b4728", "committedDate": "2020-03-30T15:04:59Z", "message": "updated doc for no-config-snapshot flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e4c1b70256eba5e8e45857d0e0371a3d78e6b5", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/03e4c1b70256eba5e8e45857d0e0371a3d78e6b5", "committedDate": "2020-03-30T15:05:28Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c5dd9745fcebbb546536d4900b487dc3ae86312", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/1c5dd9745fcebbb546536d4900b487dc3ae86312", "committedDate": "2020-03-30T15:36:48Z", "message": "fixed bug related to no config snapshot and models falg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c499317dfb1a5e2edaf6557f5774d3ee40a62a5e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/c499317dfb1a5e2edaf6557f5774d3ee40a62a5e", "committedDate": "2020-03-31T06:17:00Z", "message": "added changes for async calls and multi snapshot generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a", "committedDate": "2020-03-31T06:18:55Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189f68810d7b6cd4e45e9d749aa32357a7368b39", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/189f68810d7b6cd4e45e9d749aa32357a7368b39", "committedDate": "2020-03-31T17:02:10Z", "message": "refactored UT and created seprate test class for Snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54de7ec113530fb42cf16e02d2dbcf30738ca4fd", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/54de7ec113530fb42cf16e02d2dbcf30738ca4fd", "committedDate": "2020-03-31T17:59:27Z", "message": "fixed ts-config flag issue in python frontend layer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDQ3MjUw", "url": "https://github.com/pytorch/serve/pull/111#pullrequestreview-385047250", "createdAt": "2020-03-31T19:40:36Z", "commit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0MDozNlrOF-lUgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDozMjoyNFrOF-nG2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzQ4OQ==", "bodyText": "Should this be an assertion, or a warning in the logs? Someone may have moved models out of the model store on purpose. We obviously shouldn't handle this silently, but I don't think crashing the app is the user experience we're after either.\nPlease update this to:\n\nContinue healthy startup without the missing models\nEmit clear & helpful log messages about which model was missing to ts_log.log and stdout/stderr", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401167489", "createdAt": "2020-03-31T19:40:36Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelManager.java", "diffHunk": "@@ -201,24 +205,40 @@ public HttpResponseStatus setDefaultVersion(String modelName, String newModelVer\n     }\n \n     public CompletableFuture<HttpResponseStatus> updateModel(\n-            String modelName, String versionId, int minWorkers, int maxWorkers) {\n+            String modelName, String versionId, int minWorkers, int maxWorkers, boolean isStartup) {\n         ModelVersionedRefs vmodel = modelsNameMap.get(modelName);\n         if (vmodel == null) {\n             throw new AssertionError(\"Model not found: \" + modelName);\n         }\n \n         Model model = vmodel.getVersionModel(versionId);\n+\n+        if (model == null) {\n+            throw new AssertionError(\"Model version not not found for model : \" + modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDk2Nw==", "bodyText": "This might be a problem; elsewhere I see a command line arg (-ss/--snapshot-store) defined for the config folder, but this is just adding /config to the log folder. Either we should pull out the CLI option, or we should store the config folder in a property accessible by all modules that need it (as it looks like was done for the log location).", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401170967", "createdAt": "2020-03-31T19:47:08Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -428,6 +443,31 @@ private PrivateKey loadPrivateKey(String keyFile) throws IOException, GeneralSec\n         }\n     }\n \n+    private String getLastSnapshot() {\n+        if (isSnapshotDisabled()) {\n+            return null;\n+        }\n+\n+        String latestSnapshotPath = null;\n+        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzAwNg==", "bodyText": "Do we want last modified time, or the timestamp on the file. If someone brings up a older config file in an editor and changes the last mod date, TorchServe might do unintended things, e.g. start up with the wrong file.\nThe YYYYmmDDHHMMSS format was specifically chosen so that the most recently timestamped file could be found with a simple name sort.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401173006", "createdAt": "2020-03-31T19:50:38Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java", "diffHunk": "@@ -428,6 +443,31 @@ private PrivateKey loadPrivateKey(String keyFile) throws IOException, GeneralSec\n         }\n     }\n \n+    private String getLastSnapshot() {\n+        if (isSnapshotDisabled()) {\n+            return null;\n+        }\n+\n+        String latestSnapshotPath = null;\n+        Path configPath = Paths.get(System.getProperty(\"LOG_LOCATION\"), \"config\");\n+\n+        if (Files.exists(configPath)) {\n+            try {\n+                Optional<Path> lastFilePath =\n+                        Files.list(configPath)\n+                                .filter(f -> !Files.isDirectory(f))\n+                                .max(Comparator.comparingLong(f -> f.toFile().lastModified()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTcxMw==", "bodyText": "I made a note on this elsewhere. Again, we should have a property or other single source of truth for the config folder, as we do for the log folder. The duplicated code that builds a path string from scratch every time invites bugs.", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401185713", "createdAt": "2020-03-31T20:13:30Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private Logger logger = LoggerFactory.getLogger(FSSnapshotSerializer.class);\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    @Override\n+    public void saveSnapshot(Snapshot snapshot) throws IOException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\"), \"config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjY1NQ==", "bodyText": "The output format surprised me here. When the detailed notes on issue #73 suggested using the config files, we had pictured using the config files, in the same manner they're normally used, not embedding some other serialization scheme within the config files.\nIt's probably too late to pull back on this for the initial release, but can someone explain to me whether there's a reason that we're doing it this way instead of just building a normal config file?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401192655", "createdAt": "2020-03-31T20:25:10Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/snapshot/FSSnapshotSerializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.pytorch.serve.snapshot;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.io.FileUtils;\n+import org.pytorch.serve.util.ConfigManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FSSnapshotSerializer implements SnapshotSerializer {\n+\n+    private Logger logger = LoggerFactory.getLogger(FSSnapshotSerializer.class);\n+    private ConfigManager configManager = ConfigManager.getInstance();\n+    private static final String TS_MODEL_SNAPSHOT = \"model_snapshot\";\n+    public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n+\n+    @Override\n+    public void saveSnapshot(Snapshot snapshot) throws IOException {\n+        File snapshotPath = new File(System.getProperty(\"LOG_LOCATION\"), \"config\");\n+\n+        FileUtils.forceMkdir(snapshotPath);\n+\n+        Properties prop = configManager.getConfiguration();\n+\n+        File snapshotFile = new File(snapshotPath, snapshot.getName());\n+        if (snapshotFile.exists()) {\n+            logger.error(\n+                    \"Snapshot \" + snapshot.getName() + \" already exists. Not saving the sanpshot.\");\n+        }\n+\n+        String snapshotJson = GSON.toJson(snapshot, Snapshot.class);\n+        prop.put(TS_MODEL_SNAPSHOT, snapshotJson);\n+        try (OutputStream os = Files.newOutputStream(snapshotFile.toPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Njc2MA==", "bodyText": "My understanding is that this is no longer required because we anticipate the model store property coming from the config snapshots. Do we have a way to catch it if there's no --model-store option and no model store specified in the config?", "url": "https://github.com/pytorch/serve/pull/111#discussion_r401196760", "createdAt": "2020-03-31T20:32:24Z", "author": {"login": "fbbradheintz"}, "path": "ts/arg_parser.py", "diffHunk": "@@ -30,6 +30,7 @@ def ts_parser():\n                             dest='ts_config',\n                             help='Configuration file for model server')\n         parser.add_argument('--model-store',\n+                            required=False,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf9f9ea8cae63337f895fc2d2c3e338e22ad35a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55cc1b773e81836a978244edf41c4d311aeb244d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/55cc1b773e81836a978244edf41c4d311aeb244d", "committedDate": "2020-04-01T08:21:51Z", "message": "made snapshot serializer more robust and updated snapshot validator to stop serve in case of invaid snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2032f48cdc86084a39744c690a1e7e2e7c49b6bb", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/2032f48cdc86084a39744c690a1e7e2e7c49b6bb", "committedDate": "2020-04-01T08:22:06Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e893174015ddb1eb07360ad127b24064e6dcaa92", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/e893174015ddb1eb07360ad127b24064e6dcaa92", "committedDate": "2020-04-01T09:35:12Z", "message": "fixed checkstyle and pmd issues, updated expected output for UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de145a29580f5cc2fe60782797e61bb1bd3a0a7", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/3de145a29580f5cc2fe60782797e61bb1bd3a0a7", "committedDate": "2020-04-01T10:00:45Z", "message": "Merge branch 'stage_release' into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22050c7913c59e28282f7a13c1e09a3f93e17df", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a22050c7913c59e28282f7a13c1e09a3f93e17df", "committedDate": "2020-04-01T10:38:48Z", "message": "updated snapshot doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c866aafb02070d27255bfcb0900cddbfdf32cb", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/f8c866aafb02070d27255bfcb0900cddbfdf32cb", "committedDate": "2020-04-01T10:39:44Z", "message": "cleaned up unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9310cea3d03aa79ed72b74c1ff7df4f4cd98d64", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/e9310cea3d03aa79ed72b74c1ff7df4f4cd98d64", "committedDate": "2020-04-01T10:40:24Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b87226e6acba10b8532ddd5052c0427962a21c2", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/0b87226e6acba10b8532ddd5052c0427962a21c2", "committedDate": "2020-04-01T12:40:47Z", "message": "updated torchserve_sanity to run basic test for snapshot feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ed6e21b8045d0d913aa9fde5b3510f050e4ba4", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/a7ed6e21b8045d0d913aa9fde5b3510f050e4ba4", "committedDate": "2020-04-01T17:21:00Z", "message": "fixed typo while creating logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b45bef4b1e1a54c4e5a263934fb8e011b26329", "author": {"user": null}, "url": "https://github.com/pytorch/serve/commit/94b45bef4b1e1a54c4e5a263934fb8e011b26329", "committedDate": "2020-04-02T23:40:55Z", "message": "run inference only after server restart\n\nTh following steps are run for snapshot sanity:\n* start server without any models registered\n* register resnet-18 model via HTTP API\n* stop server -> generates a snapshot\n* start server (should auto-load the last snapshot)\n* run inference on the resnet-18 model should pass for sanity success"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d747de9d49d30b9155f83f8080eaa0e701a4127e", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/d747de9d49d30b9155f83f8080eaa0e701a4127e", "committedDate": "2020-04-03T13:25:34Z", "message": "refactore UTs for ModelServer and Snapshot feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dba49aab3c56fc46ca7d8dbcefbfffa0a13dd3d", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/7dba49aab3c56fc46ca7d8dbcefbfffa0a13dd3d", "committedDate": "2020-04-03T13:25:53Z", "message": "Merge branch 'snapshot' of https://github.com/pytorch/serve into snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b8f81c4cbe4e91a54245077787a203474f1e1b", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/24b8f81c4cbe4e91a54245077787a203474f1e1b", "committedDate": "2020-04-03T13:46:23Z", "message": "updated the channel close logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b301fb0f0486199f2fa908f569edfb6374a604a9", "author": {"user": {"login": "harshbafna", "name": "Harsh Bafna"}}, "url": "https://github.com/pytorch/serve/commit/b301fb0f0486199f2fa908f569edfb6374a604a9", "committedDate": "2020-04-03T15:24:28Z", "message": "reverted UT refactoring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2442, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}