{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTAwNzU3", "number": 472, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTozMDoxNFrOEI-Z6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyOTo1MlrOER6EWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODQ2NTA1OnYy", "diffSide": "RIGHT", "path": "examples/text_classification/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTozMDoxNFrOGpQ84w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjo0NDo0M1rOGqZZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkyMjUzMQ==", "bodyText": "@dhaniram-kshirsagar Will this require updates to automated tests?", "url": "https://github.com/pytorch/serve/pull/472#discussion_r445922531", "createdAt": "2020-06-26T01:30:14Z", "author": {"login": "chauhang"}, "path": "examples/text_classification/README.md", "diffHunk": "@@ -21,8 +21,12 @@ The above command generated the model's state dict as model.pt and the vocab use\n  * Create a torch model archive using the torch-model-archiver utility to archive the above files.\n  \n     ```bash\n-    torch-model-archiver --model-name my_text_classifier --version 1.0 --model-file model.py --serialized-file model.pt --source-vocab source_vocab.pt --handler text_classifier --extra-files index_to_name.json\n+    torch-model-archiver --model-name my_text_classifier --version 1.0 --model-file model.py --serialized-file model.pt  --handler text_classifier --extra-files \"index_to_name.json,source_vocab.pt\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad923db35db6baa4a59298fcfcc5f685f6bff9e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwOTQxNQ==", "bodyText": "It is in place via torchserve_sanity which is part of CI.", "url": "https://github.com/pytorch/serve/pull/472#discussion_r447109415", "createdAt": "2020-06-29T16:44:43Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "examples/text_classification/README.md", "diffHunk": "@@ -21,8 +21,12 @@ The above command generated the model's state dict as model.pt and the vocab use\n  * Create a torch model archive using the torch-model-archiver utility to archive the above files.\n  \n     ```bash\n-    torch-model-archiver --model-name my_text_classifier --version 1.0 --model-file model.py --serialized-file model.pt --source-vocab source_vocab.pt --handler text_classifier --extra-files index_to_name.json\n+    torch-model-archiver --model-name my_text_classifier --version 1.0 --model-file model.py --serialized-file model.pt  --handler text_classifier --extra-files \"index_to_name.json,source_vocab.pt\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkyMjUzMQ=="}, "originalCommit": {"oid": "ad923db35db6baa4a59298fcfcc5f685f6bff9e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjEwNjM0OnYy", "diffSide": "RIGHT", "path": "model-archiver/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyMzozMFrOG23qkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNzoyM1rOG28S6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODMwNw==", "bodyText": "@dhaniram-kshirsagar Shouldn't this be --handler /home/serve/examples/custom_image_classifier**.py**? Where is the module_name getting set in case of Custom Handlers?", "url": "https://github.com/pytorch/serve/pull/472#discussion_r460188307", "createdAt": "2020-07-24T17:23:30Z", "author": {"login": "chauhang"}, "path": "model-archiver/README.md", "diffHunk": "@@ -140,13 +137,17 @@ A serialized file (.pt or .pth) should be a checkpoint in case of torchscript an\n \n ### Handler\n \n-Handler can be TorchServe's inbuilt handler name or path to a py to handle custom TorchServe inference logic. TorchServe supports following handlers out or box:\n+Handler can be TorchServe's inbuilt handler name or path to a py file to handle custom TorchServe inference logic. TorchServe supports following handlers out or box:\n 1. `image_classifier`\n 2. `object_detector`\n 3. `text_classifier`\n 4. `image_segmenter`\n \n-For more details refer [default handler documentation](../docs/default_handlers.md)\n+In case of custom handler, if you plan to provide just `module_name` or `module_name:entry_point_function_name` then make sure that it is prefixed with absolute or relative path of python file.\n+e.g. if your custom handler custom_image_classifier.py is in /home/serve/examples then\n+`--handler /home/serve/examples/custom_image_classifier` or if it has my_entry_point module level function then `--handler /home/serve/examples/custom_image_classifier:my_entry_point_func`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75da63f19445e2b556ebb2add498c7bee02eab83"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NDE3MA==", "bodyText": "Yes, that option is already there however these additional options i.e. handler_name:entry_pnt_func  or handler_name without py ext.\nThe framework had support for custom entry_point_function_names i.e. you can name entrypoint function as handle_request instead of the standard handle in custom handlers. However, due to bug which is fixed in this PR, this feature was hidden from the user [especially for users coming from MMS #465 ].  With this, we assume that the custom handler module_name or py file has the same name. The handler name or handler name with entry_point_func [i.e. handler:func_name] is recorded in mar Manifest file.\nThis --handler /home/serve/examples/custom_image_classifier is available as an additional option, along with main use case of supplying entry_point_function name with handler.", "url": "https://github.com/pytorch/serve/pull/472#discussion_r460264170", "createdAt": "2020-07-24T20:07:23Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "model-archiver/README.md", "diffHunk": "@@ -140,13 +137,17 @@ A serialized file (.pt or .pth) should be a checkpoint in case of torchscript an\n \n ### Handler\n \n-Handler can be TorchServe's inbuilt handler name or path to a py to handle custom TorchServe inference logic. TorchServe supports following handlers out or box:\n+Handler can be TorchServe's inbuilt handler name or path to a py file to handle custom TorchServe inference logic. TorchServe supports following handlers out or box:\n 1. `image_classifier`\n 2. `object_detector`\n 3. `text_classifier`\n 4. `image_segmenter`\n \n-For more details refer [default handler documentation](../docs/default_handlers.md)\n+In case of custom handler, if you plan to provide just `module_name` or `module_name:entry_point_function_name` then make sure that it is prefixed with absolute or relative path of python file.\n+e.g. if your custom handler custom_image_classifier.py is in /home/serve/examples then\n+`--handler /home/serve/examples/custom_image_classifier` or if it has my_entry_point module level function then `--handler /home/serve/examples/custom_image_classifier:my_entry_point_func`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODMwNw=="}, "originalCommit": {"oid": "75da63f19445e2b556ebb2add498c7bee02eab83"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjEyNjM0OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/text_handler.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyOTo1MlrOG2327A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1MDo1MFrOG273aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MTQ2OA==", "bodyText": "@dhaniram-kshirsagar Please provide details of actual tests run for backward compatibility", "url": "https://github.com/pytorch/serve/pull/472#discussion_r460191468", "createdAt": "2020-07-24T17:29:52Z", "author": {"login": "chauhang"}, "path": "ts/torch_handler/text_handler.py", "diffHunk": "@@ -27,9 +28,25 @@ def __init__(self):\n     def initialize(self, ctx):\n         super(TextHandler, self).initialize(ctx)\n         self.initialized = False\n-        self.source_vocab = torch.load(self.manifest['model']['sourceVocab'])\n+        source_vocab = self.manifest['model']['sourceVocab'] if 'sourceVocab' in self.manifest['model'] else None\n+        if source_vocab:\n+            # Backward compatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75da63f19445e2b556ebb2add498c7bee02eab83"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NzEyOQ==", "bodyText": "The old mar is part of ci and it is working fine with this build.", "url": "https://github.com/pytorch/serve/pull/472#discussion_r460257129", "createdAt": "2020-07-24T19:50:50Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "ts/torch_handler/text_handler.py", "diffHunk": "@@ -27,9 +28,25 @@ def __init__(self):\n     def initialize(self, ctx):\n         super(TextHandler, self).initialize(ctx)\n         self.initialized = False\n-        self.source_vocab = torch.load(self.manifest['model']['sourceVocab'])\n+        source_vocab = self.manifest['model']['sourceVocab'] if 'sourceVocab' in self.manifest['model'] else None\n+        if source_vocab:\n+            # Backward compatibility", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MTQ2OA=="}, "originalCommit": {"oid": "75da63f19445e2b556ebb2add498c7bee02eab83"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1539, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}