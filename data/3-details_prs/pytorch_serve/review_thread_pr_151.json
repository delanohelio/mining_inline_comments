{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDA1Nzc0", "number": 151, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMjo0MVrODvT2tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMDowOFrODwK4AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTM0OTY1OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMjo0MVrOGBqaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo0NDozOFrOGBsnsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjU1NA==", "bodyText": "This change looks okay, but there's a problem in line 50:\nif (this.modelsVersionMap.putIfAbsent(Double.valueOf(versionId), model) != null) {\n\nThis cast to double is problematic. The version is taken in by the model archiver as a string (qv: model-archiver/model_archiver/arg_parser.py). If someone includes a version string that can't be cast to a double (\"1.0.1\", \"v1.0\"), they'll get no error from the model archiver, but this method will throw a java.lang.NumberFormatException.\nIs there any reason modelsVersionMap can't be a ConcurrentHashMap<String, Model>?", "url": "https://github.com/pytorch/serve/pull/151#discussion_r404396554", "createdAt": "2020-04-06T21:22:41Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -55,8 +55,9 @@ public void addVersionModel(Model model, String versionId)\n                             + model.getModelName());\n         }\n \n-        // TODO what if user wants to keep existing default as it is?\n-        this.setDefaultVersion(versionId);\n+        if (this.defaultVersion == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a936b24d9ff08b7f89fc2caccf14c3171c2553"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzMjgxNg==", "bodyText": "This is also a problem in lines 25 & 26 of this file, and in line 141 of http/ManagementRequestHandler.java.", "url": "https://github.com/pytorch/serve/pull/151#discussion_r404432816", "createdAt": "2020-04-06T22:44:38Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/main/java/org/pytorch/serve/wlm/ModelVersionedRefs.java", "diffHunk": "@@ -55,8 +55,9 @@ public void addVersionModel(Model model, String versionId)\n                             + model.getModelName());\n         }\n \n-        // TODO what if user wants to keep existing default as it is?\n-        this.setDefaultVersion(versionId);\n+        if (this.defaultVersion == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjU1NA=="}, "originalCommit": {"oid": "e3a936b24d9ff08b7f89fc2caccf14c3171c2553"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM2NDE2OnYy", "diffSide": "RIGHT", "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMDowOFrOGDBZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMjo1OVrOGDWDuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMTg3Mg==", "bodyText": "This PR is looking much better. The only thing missing is a test case for non-Double-parseable version strings, e.g. \"v1.0.3\".", "url": "https://github.com/pytorch/serve/pull/151#discussion_r405821872", "createdAt": "2020-04-08T21:20:08Z", "author": {"login": "fbbradheintz"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -151,11 +151,11 @@ public void test()\n         testLoadModelWithInitialWorkers(managementChannel, \"noop.mar\", \"noop\");\n         testLoadModelWithInitialWorkers(managementChannel, \"noop.mar\", \"noopversioned\");\n         testLoadModelWithInitialWorkers(managementChannel, \"noop_v2.mar\", \"noopversioned\");\n-        testDescribeModel(managementChannel, \"noopversioned\", null, \"1.21\");\n-        testDescribeModel(managementChannel, \"noopversioned\", \"all\", \"1.11\");\n+        testDescribeModel(managementChannel, \"noopversioned\", null, \"1.11\");\n+        testDescribeModel(managementChannel, \"noopversioned\", \"all\", \"1.21\");\n         testDescribeModel(managementChannel, \"noopversioned\", \"1.11\", \"1.11\");\n         testPredictions(channel, \"noopversioned\", \"OK\", \"1.21\");\n-        testSetDefault(managementChannel, \"noopversioned\", \"1.11\");\n+        testSetDefault(managementChannel, \"noopversioned\", \"1.21\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a616df78bc86fa05da37d4fbc3cfcce908505d6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MDMxMw==", "bodyText": "Done, updated 1.2 to 1.2.1 in the existing UT mar file.", "url": "https://github.com/pytorch/serve/pull/151#discussion_r406160313", "createdAt": "2020-04-09T12:12:59Z", "author": {"login": "harshbafna"}, "path": "frontend/server/src/test/java/org/pytorch/serve/ModelServerTest.java", "diffHunk": "@@ -151,11 +151,11 @@ public void test()\n         testLoadModelWithInitialWorkers(managementChannel, \"noop.mar\", \"noop\");\n         testLoadModelWithInitialWorkers(managementChannel, \"noop.mar\", \"noopversioned\");\n         testLoadModelWithInitialWorkers(managementChannel, \"noop_v2.mar\", \"noopversioned\");\n-        testDescribeModel(managementChannel, \"noopversioned\", null, \"1.21\");\n-        testDescribeModel(managementChannel, \"noopversioned\", \"all\", \"1.11\");\n+        testDescribeModel(managementChannel, \"noopversioned\", null, \"1.11\");\n+        testDescribeModel(managementChannel, \"noopversioned\", \"all\", \"1.21\");\n         testDescribeModel(managementChannel, \"noopversioned\", \"1.11\", \"1.11\");\n         testPredictions(channel, \"noopversioned\", \"OK\", \"1.21\");\n-        testSetDefault(managementChannel, \"noopversioned\", \"1.11\");\n+        testSetDefault(managementChannel, \"noopversioned\", \"1.21\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMTg3Mg=="}, "originalCommit": {"oid": "8a616df78bc86fa05da37d4fbc3cfcce908505d6"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}