{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTczNjEx", "number": 14, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyMToyNFrODYAdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0NjoxOFrODYAzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDk5ODg1OnYy", "diffSide": "RIGHT", "path": "examples/image_segmenter/fcn/model.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyMToyNFrOFdnuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODoyM1rOFev_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMzg2NQ==", "bodyText": "Remove line.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366603865", "createdAt": "2020-01-14T22:21:24Z", "author": {"login": "alexwong"}, "path": "examples/image_segmenter/fcn/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+from torchvision.models.segmentation.fcn import FCN\n+from torchvision.models import resnet\n+from intermediate_layer_getter import IntermediateLayerGetter\n+from fcn import FCNHead\n+\"\"\"\n+NN definition for fcn_resnet101 i.e. FCN with restnet 101 as backend\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4Nzg3NQ==", "bodyText": "Done. We have moved the comments inside the class definition itself as a part of standard practice. However, the double line space above class definition is as per the pep-8 standards.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787875", "createdAt": "2020-01-17T06:38:23Z", "author": {"login": "harshbafna"}, "path": "examples/image_segmenter/fcn/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+from torchvision.models.segmentation.fcn import FCN\n+from torchvision.models import resnet\n+from intermediate_layer_getter import IntermediateLayerGetter\n+from fcn import FCNHead\n+\"\"\"\n+NN definition for fcn_resnet101 i.e. FCN with restnet 101 as backend\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMzg2NQ=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAwMDA3OnYy", "diffSide": "RIGHT", "path": "examples/object_detector/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyMTo1NVrOFdnvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODozM1rOFev_ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNDA2NQ==", "bodyText": "Remove line.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366604065", "createdAt": "2020-01-14T22:21:55Z", "author": {"login": "alexwong"}, "path": "examples/object_detector/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Object Detection using torchvision's pretrained fast-rcnn model.\n+\n+* Download the pre-trained fast-rcnn object detection model's state_dict from the following URL :\n+\n+https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\n+\n+    ```bash\n+    wget https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\n+    ```\n+\n+* Create a model archive file and serve the fastrcnn model in TorchServe using below commands\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4Nzg5OQ==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787899", "createdAt": "2020-01-17T06:38:33Z", "author": {"login": "harshbafna"}, "path": "examples/object_detector/README.md", "diffHunk": "@@ -0,0 +1,74 @@\n+# Object Detection using torchvision's pretrained fast-rcnn model.\n+\n+* Download the pre-trained fast-rcnn object detection model's state_dict from the following URL :\n+\n+https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\n+\n+    ```bash\n+    wget https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\n+    ```\n+\n+* Create a model archive file and serve the fastrcnn model in TorchServe using below commands\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNDA2NQ=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAwNzIzOnYy", "diffSide": "RIGHT", "path": "examples/text_classification/model.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyNDo0OVrOFdnzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODozOFrOFev_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTIxNg==", "bodyText": "Extra line.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366605216", "createdAt": "2020-01-14T22:24:49Z", "author": {"login": "alexwong"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+\n+\"\"\"\n+\n+\n+class TextSentiment(nn.Module):\n+    def __init__(self, vocab_size=1308844, embed_dim=32, num_class=4):\n+        super().__init__()\n+        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)\n+        self.fc = nn.Linear(embed_dim, num_class)\n+        self.init_weights()\n+\n+    def init_weights(self):\n+        initrange = 0.5\n+        self.embedding.weight.data.uniform_(-initrange, initrange)\n+        self.fc.weight.data.uniform_(-initrange, initrange)\n+        self.fc.bias.data.zero_()\n+\n+    def forward(self, text, offsets):\n+        r\"\"\"\n+        Arguments:\n+            text: 1-D tensor representing a bag of text tensors\n+            offsets: a list of offsets to delimit the 1-D text tensor\n+                into the individual sequences.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4NzkxOA==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787918", "createdAt": "2020-01-17T06:38:38Z", "author": {"login": "harshbafna"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+\n+\"\"\"\n+\n+\n+class TextSentiment(nn.Module):\n+    def __init__(self, vocab_size=1308844, embed_dim=32, num_class=4):\n+        super().__init__()\n+        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)\n+        self.fc = nn.Linear(embed_dim, num_class)\n+        self.init_weights()\n+\n+    def init_weights(self):\n+        initrange = 0.5\n+        self.embedding.weight.data.uniform_(-initrange, initrange)\n+        self.fc.weight.data.uniform_(-initrange, initrange)\n+        self.fc.bias.data.zero_()\n+\n+    def forward(self, text, offsets):\n+        r\"\"\"\n+        Arguments:\n+            text: 1-D tensor representing a bag of text tensors\n+            offsets: a list of offsets to delimit the 1-D text tensor\n+                into the individual sequences.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTIxNg=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAwODg2OnYy", "diffSide": "RIGHT", "path": "examples/text_classification/model.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyNTozNVrOFdn0vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODo0MVrOFev_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTUwMg==", "bodyText": "Extra line.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366605502", "createdAt": "2020-01-14T22:25:35Z", "author": {"login": "alexwong"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4NzkyOQ==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787929", "createdAt": "2020-01-17T06:38:41Z", "author": {"login": "harshbafna"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTUwMg=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAwOTE1OnYy", "diffSide": "RIGHT", "path": "examples/text_classification/model.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyNTo0M1rOFdn07A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODo0OFrOFev_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTU0OA==", "bodyText": "Extra line.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366605548", "createdAt": "2020-01-14T22:25:43Z", "author": {"login": "alexwong"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4Nzk0Mw==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787943", "createdAt": "2020-01-17T06:38:48Z", "author": {"login": "harshbafna"}, "path": "examples/text_classification/model.py", "diffHunk": "@@ -0,0 +1,40 @@\n+import torch.nn as nn\n+\n+r\"\"\"\n+The model is composed of the embeddingbag layer and the linear layer.\n+\n+nn.EmbeddingBag computes the mean of 'bags' of embeddings. The text\n+entries here have different lengths. nn.EmbeddingBag requires no\n+padding because the lengths of sentences are saved in offsets.\n+Therefore, this method is much faster than the original one\n+with TorchText Iterator and Batch.\n+\n+Additionally, since it accumulates the average across the embeddings on the fly,\n+nn.EmbeddingBag can enhance the performance and memory efficiency\n+to process a sequence of tensors.\n+\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTU0OA=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAxMTI5OnYy", "diffSide": "RIGHT", "path": "examples/text_classification/train.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyNjozNVrOFdn2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozODo1M1rOFev_sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTg5MA==", "bodyText": "I think there's some inconsistent spacing everywhere which we can fix (won't comment on others).", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366605890", "createdAt": "2020-01-14T22:26:35Z", "author": {"login": "alexwong"}, "path": "examples/text_classification/train.py", "diffHunk": "@@ -0,0 +1,198 @@\n+import os\n+import logging\n+import argparse\n+\n+import torch\n+import sys\n+\n+from torchtext.datasets import text_classification\n+from torch.utils.data import DataLoader\n+\n+from model import TextSentiment\n+from torch.utils.data.dataset import random_split\n+\n+r\"\"\"\n+This file shows the training process of the text classification model.\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4Nzk1NQ==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367787955", "createdAt": "2020-01-17T06:38:53Z", "author": {"login": "harshbafna"}, "path": "examples/text_classification/train.py", "diffHunk": "@@ -0,0 +1,198 @@\n+import os\n+import logging\n+import argparse\n+\n+import torch\n+import sys\n+\n+from torchtext.datasets import text_classification\n+from torch.utils.data import DataLoader\n+\n+from model import TextSentiment\n+from torch.utils.data.dataset import random_split\n+\n+r\"\"\"\n+This file shows the training process of the text classification model.\n+\"\"\"\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNTg5MA=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAxMjgxOnYy", "diffSide": "RIGHT", "path": "model-archiver/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyNzoxN1rOFdn3MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo0NjoxM1rOFeuwSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjEyOQ==", "bodyText": "Reminder to update.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366606129", "createdAt": "2020-01-14T22:27:17Z", "author": {"login": "alexwong"}, "path": "model-archiver/README.md", "diffHunk": "@@ -122,6 +128,13 @@ A model file should contain the model architecture. This file is mandatory in ca\n \n A serialized file (.pt or .pth) should be a checkpoint in case of torchscript and state_dict in case of eager mode.\n \n+### Handler\n+\n+Handler can be TorchServe's inbuilt handler name or path to a py to handle custom TS inference logic. TorchServe supports following handlers out or box:\n+1. image_classifier\n+2. object_detector\n+3. text_classifier\n+4. language_translator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NzYyNQ==", "bodyText": "Done. Currently replaced language_translator with image_segmenter. We will add audio_classifer once the default handler is checked in.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367767625", "createdAt": "2020-01-17T04:46:13Z", "author": {"login": "harshbafna"}, "path": "model-archiver/README.md", "diffHunk": "@@ -122,6 +128,13 @@ A model file should contain the model architecture. This file is mandatory in ca\n \n A serialized file (.pt or .pth) should be a checkpoint in case of torchscript and state_dict in case of eager mode.\n \n+### Handler\n+\n+Handler can be TorchServe's inbuilt handler name or path to a py to handle custom TS inference logic. TorchServe supports following handlers out or box:\n+1. image_classifier\n+2. object_detector\n+3. text_classifier\n+4. language_translator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjEyOQ=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAyODc2OnYy", "diffSide": "RIGHT", "path": "model-archiver/model_archiver/manifest_components/model.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNDozMVrOFdoBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo0NDo0MlrOFeuvTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODc2Mg==", "bodyText": "What happens if the handler is in the directory they're calling from?", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366608762", "createdAt": "2020-01-14T22:34:31Z", "author": {"login": "alexwong"}, "path": "model-archiver/model_archiver/manifest_components/model.py", "diffHunk": "@@ -10,14 +10,16 @@ class Model(object):\n     as the entry point into the service code through the handler property\n     \"\"\"\n \n-    def __init__(self, model_name, serialized_file, model_file=None, handler=None, description=None, model_version=None, extensions=None):\n+    def __init__(self, model_name, serialized_file, handler, model_file=None, description=None, model_version=None,\n+                 extensions=None, source_vocab=None):\n         self.model_name = model_name\n         self.serialized_file = serialized_file.split(\"/\")[-1]\n         self.model_file = model_file\n         self.description = description\n         self.model_version = model_version\n         self.extensions = extensions\n-        self.handler = handler\n+        self.handler = handler.split(\"/\")[-1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NzM3Mg==", "bodyText": "The above code will still work fine as the resulting array from split operation will have a single element (filename).", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367767372", "createdAt": "2020-01-17T04:44:42Z", "author": {"login": "harshbafna"}, "path": "model-archiver/model_archiver/manifest_components/model.py", "diffHunk": "@@ -10,14 +10,16 @@ class Model(object):\n     as the entry point into the service code through the handler property\n     \"\"\"\n \n-    def __init__(self, model_name, serialized_file, model_file=None, handler=None, description=None, model_version=None, extensions=None):\n+    def __init__(self, model_name, serialized_file, handler, model_file=None, description=None, model_version=None,\n+                 extensions=None, source_vocab=None):\n         self.model_name = model_name\n         self.serialized_file = serialized_file.split(\"/\")[-1]\n         self.model_file = model_file\n         self.description = description\n         self.model_version = model_version\n         self.extensions = extensions\n-        self.handler = handler\n+        self.handler = handler.split(\"/\")[-1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODc2Mg=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAzNzAzOnYy", "diffSide": "RIGHT", "path": "model-archiver/model_archiver/model_packaging.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNzo1OVrOFdoGcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo0MzoxM1rOFeuuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMDAzNA==", "bodyText": "Is source_vocab needed if we want to just support some languages by default (namely english?)", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366610034", "createdAt": "2020-01-14T22:37:59Z", "author": {"login": "alexwong"}, "path": "model-archiver/model_archiver/model_packaging.py", "diffHunk": "@@ -20,6 +20,7 @@ def package_model(args, manifest):\n     handler = args.handler\n     extra_files = args.extra_files\n     export_file_path = args.export_path\n+    source_vocab = args.source_vocab", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NzE0NA==", "bodyText": "Yes. The source vocab is required to convert the text to tensor, as the user might have used a custom domain specific vocab [twitter_sentiment, news category, spam detection etc.] at the time of model training.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367767144", "createdAt": "2020-01-17T04:43:13Z", "author": {"login": "harshbafna"}, "path": "model-archiver/model_archiver/model_packaging.py", "diffHunk": "@@ -20,6 +20,7 @@ def package_model(args, manifest):\n     handler = args.handler\n     extra_files = args.extra_files\n     export_file_path = args.export_path\n+    source_vocab = args.source_vocab", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMDAzNA=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA0OTAyOnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/image_segmenter.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0Mjo0OVrOFdoNng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo0MDoyOFrOFeusnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMTg3MA==", "bodyText": "Not sure if this is in the description/readme for this handler but can we add what the handler needs to be able to support it? Ie: what the model should take as an input and output. Cause we can process more than FCN and DeepLab right? It just has to be the same \"type\" of model as those two.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366611870", "createdAt": "2020-01-14T22:42:49Z", "author": {"login": "alexwong"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -0,0 +1,67 @@\n+import io\n+from PIL import Image\n+import torch\n+from torchvision import transforms as T\n+\n+from .vision_handler import VisionHandler\n+\n+\n+class ImangeSegmenter(VisionHandler):\n+    \"\"\"\n+    ImangeSegmentor handler class. This handler takes an image\n+    and returns output shape as [CL H W], CL - number of classes, H - height and W - width\n+    This handler can process FCN and DeepLab Segmentation models", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NjY4Nw==", "bodyText": "Yes. it can support any image segmentation models. Removed the line from class description.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367766687", "createdAt": "2020-01-17T04:40:28Z", "author": {"login": "harshbafna"}, "path": "ts/torch_handler/image_segmenter.py", "diffHunk": "@@ -0,0 +1,67 @@\n+import io\n+from PIL import Image\n+import torch\n+from torchvision import transforms as T\n+\n+from .vision_handler import VisionHandler\n+\n+\n+class ImangeSegmenter(VisionHandler):\n+    \"\"\"\n+    ImangeSegmentor handler class. This handler takes an image\n+    and returns output shape as [CL H W], CL - number of classes, H - height and W - width\n+    This handler can process FCN and DeepLab Segmentation models", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMTg3MA=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA1NjY1OnYy", "diffSide": "RIGHT", "path": "ts/torch_handler/text_classifier.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0NjoxOFrOFdoSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo0Mzo1M1rOFeuuzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzExMg==", "bodyText": "Can we remove these inline comments and jsut have it as a description for the function?", "url": "https://github.com/pytorch/serve/pull/14#discussion_r366613112", "createdAt": "2020-01-14T22:46:18Z", "author": {"login": "alexwong"}, "path": "ts/torch_handler/text_classifier.py", "diffHunk": "@@ -0,0 +1,87 @@\n+import torch\n+from torch.autograd import Variable\n+from .text_handler import TextHandler\n+from torchtext.data.utils import ngrams_iterator\n+\n+\n+class TextClassifier(TextHandler):\n+    \"\"\"\n+    TextClassifier handler class. This handler takes a text (string) and\n+    as input and returns the classification text based on the model vocabulary.\n+    \"\"\"\n+\n+    def __init__(self):\n+        super(TextClassifier, self).__init__()\n+\n+    def preprocess(self, data):\n+        \"\"\"\n+         Normalizes the input text for PyTorch model,\n+         returns an Numpy array\n+        \"\"\"\n+        text = data[0].get(\"data\")\n+        if text is None:\n+            text = data[0].get(\"body\")\n+\n+        text = text.decode('utf-8')\n+\n+        ngrams = 2\n+\n+        # remove html tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NzI0Ng==", "bodyText": "Done.", "url": "https://github.com/pytorch/serve/pull/14#discussion_r367767246", "createdAt": "2020-01-17T04:43:53Z", "author": {"login": "harshbafna"}, "path": "ts/torch_handler/text_classifier.py", "diffHunk": "@@ -0,0 +1,87 @@\n+import torch\n+from torch.autograd import Variable\n+from .text_handler import TextHandler\n+from torchtext.data.utils import ngrams_iterator\n+\n+\n+class TextClassifier(TextHandler):\n+    \"\"\"\n+    TextClassifier handler class. This handler takes a text (string) and\n+    as input and returns the classification text based on the model vocabulary.\n+    \"\"\"\n+\n+    def __init__(self):\n+        super(TextClassifier, self).__init__()\n+\n+    def preprocess(self, data):\n+        \"\"\"\n+         Normalizes the input text for PyTorch model,\n+         returns an Numpy array\n+        \"\"\"\n+        text = data[0].get(\"data\")\n+        if text is None:\n+            text = data[0].get(\"body\")\n+\n+        text = text.decode('utf-8')\n+\n+        ngrams = 2\n+\n+        # remove html tags", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzExMg=="}, "originalCommit": {"oid": "d326edd12bbc238aa74e3c95caa37def0abfa3be"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1670, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}