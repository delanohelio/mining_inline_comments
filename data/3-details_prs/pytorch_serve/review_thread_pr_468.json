{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTIzNDIy", "number": 468, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozOFrOEJoTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MjoxNVrOER6Ttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMzMDEzOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozOFrOGqODYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Mjo0NlrOGsJMIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxOA==", "bodyText": "Can we use consistent naming convention i.e. whiteListedURLs", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446923618", "createdAt": "2020-06-29T12:14:38Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -44,7 +45,8 @@ public ModelArchive(Manifest manifest, String url, File modelDir, boolean extrac\n         this.extracted = extracted;\n     }\n \n-    public static ModelArchive downloadModel(String modelStore, String url)\n+    public static ModelArchive downloadModel(\n+            List<String> urlPatternlist, String modelStore, String url)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MTA5MQ==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/468#discussion_r448941091", "createdAt": "2020-07-02T11:42:46Z", "author": {"login": "shivamshriwas"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -44,7 +45,8 @@ public ModelArchive(Manifest manifest, String url, File modelDir, boolean extrac\n         this.extracted = extracted;\n     }\n \n-    public static ModelArchive downloadModel(String modelStore, String url)\n+    public static ModelArchive downloadModel(\n+            List<String> urlPatternlist, String modelStore, String url)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxOA=="}, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM0MzY2OnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxODoxOVrOGqOLcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxODoxOVrOGqOLcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTY4MQ==", "bodyText": "Why you need this?", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446925681", "createdAt": "2020-06-29T12:18:19Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -64,6 +66,10 @@ public static ModelArchive downloadModel(String modelStore, String url)\n                 FileUtils.deleteQuietly(modelLocation);\n                 throw new DownloadModelException(\"Failed to download model from: \" + url, e);\n             }\n+        } else if (DEFAULT_URL_PATTERN.matcher(url).matches()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM0MzgxOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxODoyMVrOGqOLhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxODoyMVrOGqOLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTcwMQ==", "bodyText": "I think you will have to check if the given URL is a valid URL?", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446925701", "createdAt": "2020-06-29T12:18:21Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -84,6 +90,17 @@ public static ModelArchive downloadModel(String modelStore, String url)\n         throw new ModelNotFoundException(\"Model not found at: \" + url);\n     }\n \n+    public static boolean checkUrlWhitelisted(List<String> urlPatternList, String url) {\n+        boolean patternMatch = false;\n+        for (String temp : urlPatternList) {\n+            if (Pattern.compile(temp, Pattern.CASE_INSENSITIVE).matcher(url).matches()) {\n+                patternMatch = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM1MzExOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMDo0NFrOGqOQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMDo0NFrOGqOQ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzA5NA==", "bodyText": "This is pending since long, let's remove the use of squeezenet real model from UT and find some alternate solution for this. Maybe make it part of sanity suite/regression if required.", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446927094", "createdAt": "2020-06-29T12:20:44Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -35,14 +39,18 @@ public void test() throws ModelException, IOException {\n         // TODO Change this once we have example models on s3\n         archive =\n                 ModelArchive.downloadModel(\n+                        URL_PATTERN_LIST,\n                         modelStore,\n                         \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n         Assert.assertEquals(archive.getModelName(), null);\n+        ModelArchive.downloadModel(\n+                URL_PATTERN_LIST,\n+                modelStore,\n+                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM1NDQxOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMTowM1rOGqORvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMTowM1rOGqORvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzI5NQ==", "bodyText": "Whitelist?", "url": "https://github.com/pytorch/serve/pull/468#discussion_r446927295", "createdAt": "2020-06-29T12:21:03Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -63,6 +72,38 @@ public void testMalformURL() throws ModelException, IOException {\n         // new implementation.\n         // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+                URL_PATTERN_LIST,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3e9081d28b36b471673c313626350da1857dddb"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg1MjQ3OnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMzo1OVrOG18u4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1Njo0N1rOG3hPjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjc1Mw==", "bodyText": "can we use allowed_urls instead?\nAs a matter of fact, it will be as per RFC https://tools.ietf.org/id/draft-knodel-terminology-00.html#rfc.section.1.1", "url": "https://github.com/pytorch/serve/pull/468#discussion_r459222753", "createdAt": "2020-07-23T05:33:59Z", "author": {"login": "dhaniram-kshirsagar"}, "path": "docs/configuration.md", "diffHunk": "@@ -202,8 +202,14 @@ the backend workers convert \"Bytearray to utf-8 string\" when the Content-Type of\n * `model_server_home` : Torchserve home directory. \n * `max_request_size` : The maximum allowable request size that the Torchserve accepts, in bytes. Default: 6553500\n * `max_response_size` : The maximum allowable response size that the Torchserve sends, in bytes. Default: 6553500\n+* `valid_hosts` : Comma separated regex of valid host URL(s) from where models can be registered. Default: \"http(s)?://.*\" (all URLs)\n+eg : To allow base URLs \"https://s3.amazonaws.com/\" and \"https://torchserve.s3.amazonaws.com/\" use following regex string\n+```\n+valid_hosts=https://s3.amazonaws.com/.*,https://torchserve.s3.amazonaws.com/.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NTA0Mg==", "bodyText": "+1", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460195042", "createdAt": "2020-07-24T17:36:59Z", "author": {"login": "chauhang"}, "path": "docs/configuration.md", "diffHunk": "@@ -202,8 +202,14 @@ the backend workers convert \"Bytearray to utf-8 string\" when the Content-Type of\n * `model_server_home` : Torchserve home directory. \n * `max_request_size` : The maximum allowable request size that the Torchserve accepts, in bytes. Default: 6553500\n * `max_response_size` : The maximum allowable response size that the Torchserve sends, in bytes. Default: 6553500\n+* `valid_hosts` : Comma separated regex of valid host URL(s) from where models can be registered. Default: \"http(s)?://.*\" (all URLs)\n+eg : To allow base URLs \"https://s3.amazonaws.com/\" and \"https://torchserve.s3.amazonaws.com/\" use following regex string\n+```\n+valid_hosts=https://s3.amazonaws.com/.*,https://torchserve.s3.amazonaws.com/.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjc1Mw=="}, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2OTUxOA==", "bodyText": "Done", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460869518", "createdAt": "2020-07-27T12:56:47Z", "author": {"login": "shivamshriwas"}, "path": "docs/configuration.md", "diffHunk": "@@ -202,8 +202,14 @@ the backend workers convert \"Bytearray to utf-8 string\" when the Content-Type of\n * `model_server_home` : Torchserve home directory. \n * `max_request_size` : The maximum allowable request size that the Torchserve accepts, in bytes. Default: 6553500\n * `max_response_size` : The maximum allowable response size that the Torchserve sends, in bytes. Default: 6553500\n+* `valid_hosts` : Comma separated regex of valid host URL(s) from where models can be registered. Default: \"http(s)?://.*\" (all URLs)\n+eg : To allow base URLs \"https://s3.amazonaws.com/\" and \"https://torchserve.s3.amazonaws.com/\" use following regex string\n+```\n+valid_hosts=https://s3.amazonaws.com/.*,https://torchserve.s3.amazonaws.com/.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjc1Mw=="}, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjE1ODgzOnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MDowNVrOG24K1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowNzozOFrOG3ho6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NjU2Nw==", "bodyText": "@shivamshriwas In case of s3 urls, is it expected they will be in https://s3.xxxx format and not \"s3://xxx\"?", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460196567", "createdAt": "2020-07-24T17:40:05Z", "author": {"login": "chauhang"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -27,7 +28,7 @@\n \n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n-    private static final Pattern URL_PATTERN =\n+    private static final Pattern VALID_URL_PATTERN =\n             Pattern.compile(\"http(s)?://.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NjAwOQ==", "bodyText": "Yes,\nThis pattern is just used to verify whether given URL is a valid http / https  URL.", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460876009", "createdAt": "2020-07-27T13:07:38Z", "author": {"login": "shivamshriwas"}, "path": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java", "diffHunk": "@@ -27,7 +28,7 @@\n \n     public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n \n-    private static final Pattern URL_PATTERN =\n+    private static final Pattern VALID_URL_PATTERN =\n             Pattern.compile(\"http(s)?://.*\", Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NjU2Nw=="}, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjE2NTY3OnYy", "diffSide": "RIGHT", "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MjoxNVrOG24PDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowOTozNlrOG3htkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzY0Ng==", "bodyText": "@shivamshriwas Please add another test for multiple urls test scenario, and failure cases where url is an invalid one", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460197646", "createdAt": "2020-07-24T17:42:15Z", "author": {"login": "chauhang"}, "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -21,48 +25,70 @@ public void beforeTest() {\n         FileUtils.deleteQuietly(new File(tmp, \"models\"));\n     }\n \n-    @Test(expectedExceptions = ModelNotFoundException.class)\n+    @Test\n     public void test() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-\n-        ModelArchive archive = ModelArchive.downloadModel(modelStore, \"noop.mar\");\n+        ModelArchive archive = ModelArchive.downloadModel(VALID_HOSTS_LIST, modelStore, \"noop.mar\");\n         archive.validate();\n         archive.clean();\n         Assert.assertEquals(archive.getModelName(), \"noop\");\n-\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n-        archive =\n-                ModelArchive.downloadModel(\n-                        modelStore,\n-                        \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertEquals(archive.getModelName(), null);\n-        ModelArchive.removeModel(\n-                modelStore,\n-                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertTrue(!new File(modelStore, \"squeezenet_v1.1.model\").exists());\n-        ModelArchive.downloadModel(modelStore, \"/../noop-v1.0\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testInvalidURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n+                VALID_HOSTS_LIST,\n                 modelStore,\n                 \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testMalformURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+                VALID_HOSTS_LIST,\n+                modelStore,\n+                \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+    }\n+\n+    @Test(expectedExceptions = ModelNotFoundException.class)\n+    public void testValidHostURL() throws ModelException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NzIwMQ==", "bodyText": "Added multiple urls test scenario\nenhanced existing test cases as well with now exception messages also being compared.", "url": "https://github.com/pytorch/serve/pull/468#discussion_r460877201", "createdAt": "2020-07-27T13:09:36Z", "author": {"login": "shivamshriwas"}, "path": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java", "diffHunk": "@@ -21,48 +25,70 @@ public void beforeTest() {\n         FileUtils.deleteQuietly(new File(tmp, \"models\"));\n     }\n \n-    @Test(expectedExceptions = ModelNotFoundException.class)\n+    @Test\n     public void test() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-\n-        ModelArchive archive = ModelArchive.downloadModel(modelStore, \"noop.mar\");\n+        ModelArchive archive = ModelArchive.downloadModel(VALID_HOSTS_LIST, modelStore, \"noop.mar\");\n         archive.validate();\n         archive.clean();\n         Assert.assertEquals(archive.getModelName(), \"noop\");\n-\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n-        archive =\n-                ModelArchive.downloadModel(\n-                        modelStore,\n-                        \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertEquals(archive.getModelName(), null);\n-        ModelArchive.removeModel(\n-                modelStore,\n-                \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model\");\n-        Assert.assertTrue(!new File(modelStore, \"squeezenet_v1.1.model\").exists());\n-        ModelArchive.downloadModel(modelStore, \"/../noop-v1.0\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testInvalidURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n+                VALID_HOSTS_LIST,\n                 modelStore,\n                 \"https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n     }\n \n     @Test(expectedExceptions = DownloadModelException.class)\n     public void testMalformURL() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n-        // load model for s3 --> This will fail as this model is not compatible with\n-        // new implementation.\n-        // TODO Change this once we have example models on s3\n         ModelArchive.downloadModel(\n-                modelStore, \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+                VALID_HOSTS_LIST,\n+                modelStore,\n+                \"https://../model-server/models/squeezenet_v1.1/squeezenet_v1.1.mod\");\n+    }\n+\n+    @Test(expectedExceptions = ModelNotFoundException.class)\n+    public void testValidHostURL() throws ModelException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzY0Ng=="}, "originalCommit": {"oid": "41c05e20621fb630a3ab9f57a643454639b71e4f"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1534, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}