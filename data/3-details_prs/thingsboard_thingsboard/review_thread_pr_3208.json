{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTY1NjEw", "number": 3208, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoyMzoyOVrOEUfthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoyMzoyOVrOEUfthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTI2NTMyOnYy", "diffSide": "RIGHT", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/action/TbClearAlarmNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoyMzoyOVrOG6uyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozOToyMlrOG6vNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNzA2OQ==", "bodyText": "ctx.logJsEvalResponse() not  ctx.logJsEvalRequest()", "url": "https://github.com/thingsboard/thingsboard/pull/3208#discussion_r464237069", "createdAt": "2020-08-03T07:23:29Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/action/TbClearAlarmNode.java", "diffHunk": "@@ -56,10 +57,38 @@ protected TbClearAlarmNodeConfiguration loadAlarmNodeConfig(TbNodeConfiguration\n     @Override\n     protected ListenableFuture<AlarmResult> processAlarm(TbContext ctx, TbMsg msg) {\n         String alarmType = TbNodeUtils.processPattern(this.config.getAlarmType(), msg.getMetaData());\n-        ListenableFuture<Alarm> latest = ctx.getAlarmService().findLatestByOriginatorAndType(ctx.getTenantId(), msg.getOriginator(), alarmType);\n-        return Futures.transformAsync(latest, a -> {\n-            if (a != null && !a.getStatus().isCleared()) {\n-                return clearAlarm(ctx, msg, a);\n+        if (msg.getOriginator().getEntityType().equals(EntityType.ALARM)) {\n+            return clearAlarmByAlarmOriginator(ctx, msg);\n+        } else {\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findLatestByOriginatorAndType(ctx.getTenantId(), msg.getOriginator(), alarmType);\n+            return Futures.transformAsync(latest, a -> {\n+                if (a != null && !a.getStatus().isCleared()) {\n+                    return clearAlarm(ctx, msg, a);\n+                }\n+                return Futures.immediateFuture(new AlarmResult(false, false, false, null));\n+            }, ctx.getDbCallbackExecutor());\n+        }\n+    }\n+\n+    private ListenableFuture<AlarmResult> clearAlarmByAlarmOriginator(TbContext ctx, TbMsg msg) {\n+        ListenableFuture<Alarm> alarmByIdAsync = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), new AlarmId(msg.getOriginator().getId()));\n+        return Futures.transformAsync(alarmByIdAsync, alarm -> {\n+            if (alarm != null && !alarm.getStatus().isCleared()) {\n+                ctx.logJsEvalRequest();\n+                ListenableFuture<JsonNode> asyncDetails = buildAlarmDetails(ctx, msg, alarm.getDetails());\n+                return Futures.transformAsync(asyncDetails, details -> {\n+                    ctx.logJsEvalRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ebe5b5e86af866a3628fc7ffd9c6fce4ab4e91"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0Mzk4Mg==", "bodyText": "there is a lot of code duplication now. This is redundant.", "url": "https://github.com/thingsboard/thingsboard/pull/3208#discussion_r464243982", "createdAt": "2020-08-03T07:39:22Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/action/TbClearAlarmNode.java", "diffHunk": "@@ -56,10 +57,38 @@ protected TbClearAlarmNodeConfiguration loadAlarmNodeConfig(TbNodeConfiguration\n     @Override\n     protected ListenableFuture<AlarmResult> processAlarm(TbContext ctx, TbMsg msg) {\n         String alarmType = TbNodeUtils.processPattern(this.config.getAlarmType(), msg.getMetaData());\n-        ListenableFuture<Alarm> latest = ctx.getAlarmService().findLatestByOriginatorAndType(ctx.getTenantId(), msg.getOriginator(), alarmType);\n-        return Futures.transformAsync(latest, a -> {\n-            if (a != null && !a.getStatus().isCleared()) {\n-                return clearAlarm(ctx, msg, a);\n+        if (msg.getOriginator().getEntityType().equals(EntityType.ALARM)) {\n+            return clearAlarmByAlarmOriginator(ctx, msg);\n+        } else {\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findLatestByOriginatorAndType(ctx.getTenantId(), msg.getOriginator(), alarmType);\n+            return Futures.transformAsync(latest, a -> {\n+                if (a != null && !a.getStatus().isCleared()) {\n+                    return clearAlarm(ctx, msg, a);\n+                }\n+                return Futures.immediateFuture(new AlarmResult(false, false, false, null));\n+            }, ctx.getDbCallbackExecutor());\n+        }\n+    }\n+\n+    private ListenableFuture<AlarmResult> clearAlarmByAlarmOriginator(TbContext ctx, TbMsg msg) {\n+        ListenableFuture<Alarm> alarmByIdAsync = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), new AlarmId(msg.getOriginator().getId()));\n+        return Futures.transformAsync(alarmByIdAsync, alarm -> {\n+            if (alarm != null && !alarm.getStatus().isCleared()) {\n+                ctx.logJsEvalRequest();\n+                ListenableFuture<JsonNode> asyncDetails = buildAlarmDetails(ctx, msg, alarm.getDetails());\n+                return Futures.transformAsync(asyncDetails, details -> {\n+                    ctx.logJsEvalRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNzA2OQ=="}, "originalCommit": {"oid": "21ebe5b5e86af866a3628fc7ffd9c6fce4ab4e91"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1357, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}