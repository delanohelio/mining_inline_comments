{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTQ1OTcw", "number": 3406, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToyNTo1NFrOEgWKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTozMDoxNVrOEgWPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzUzMDU4OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/queue/processing/TbRuleEngineProcessingStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToyNTo1NFrOHNJ9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToyNTo1NFrOHNJ9AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NjYwOA==", "bodyText": "First, just calculate the value of the \"pause\" variable and then use try{ sleep }catch block to avoid code duplication.", "url": "https://github.com/thingsboard/thingsboard/pull/3406#discussion_r483556608", "createdAt": "2020-09-04T11:25:54Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/queue/processing/TbRuleEngineProcessingStrategyFactory.java", "diffHunk": "@@ -103,10 +116,25 @@ public TbRuleEngineProcessingDecision analyze(TbRuleEngineProcessingResult resul\n                         toReprocess.forEach((id, msg) -> log.trace(\"Going to reprocess [{}]: {}\", id, TbMsg.fromBytes(result.getQueueName(), msg.getValue().getTbMsg().toByteArray(), TbMsgCallback.EMPTY)));\n                     }\n                     if (pauseBetweenRetries > 0) {\n-                        try {\n-                            Thread.sleep(TimeUnit.SECONDS.toMillis(pauseBetweenRetries));\n-                        } catch (InterruptedException e) {\n-                            throw new RuntimeException(e);\n+                        if (expPauseBetweenRetries) {\n+                            long pause;\n+                            if (maxExpDegreeValue > expDegreeStep.get()) {\n+                                pause = new Double(Math.pow(pauseBetweenRetries, expDegreeStep.getAndIncrement())).longValue();\n+                            } else {\n+                                pause = maxExpPauseBetweenRetries;\n+                            }\n+                            try {\n+                                Thread.sleep(TimeUnit.SECONDS.toMillis(\n+                                        pause));\n+                            } catch (InterruptedException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        } else {\n+                            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258ed349798e63b3f88f8e0c9825d5326c0779da"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzU0MjE5OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/queue/processing/TbRuleEngineProcessingStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTozMDoxNVrOHNKEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTozMDoxNVrOHNKEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1ODQ1Nw==", "bodyText": "This variable is redundant. You can use expDegreeStep and just compare the maxExpPauseBetweenRetries and new Double(Math.pow(pauseBetweenRetries, expDegreeStep.getAndIncrement())).longValue();", "url": "https://github.com/thingsboard/thingsboard/pull/3406#discussion_r483558457", "createdAt": "2020-09-04T11:30:15Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/queue/processing/TbRuleEngineProcessingStrategyFactory.java", "diffHunk": "@@ -69,6 +76,12 @@ public RetryStrategy(String queueName, boolean retrySuccessful, boolean retryFai\n             this.maxRetries = configuration.getRetries();\n             this.maxAllowedFailurePercentage = configuration.getFailurePercentage();\n             this.pauseBetweenRetries = configuration.getPauseBetweenRetries();\n+            this.expPauseBetweenRetries = configuration.isExpPauseBetweenRetries();\n+            if (this.expPauseBetweenRetries) {\n+                this.expDegreeStep = new AtomicInteger(1);\n+                this.maxExpPauseBetweenRetries = configuration.getMaxExpPauseBetweenRetries();\n+                this.maxExpDegreeValue = Math.log(maxExpPauseBetweenRetries) / Math.log(pauseBetweenRetries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258ed349798e63b3f88f8e0c9825d5326c0779da"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1349, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}