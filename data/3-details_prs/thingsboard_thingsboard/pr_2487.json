{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjU3MDU0", "number": 2487, "title": "created TbCheckAlarmStatusNode", "bodyText": "", "createdAt": "2020-03-05T12:49:28Z", "url": "https://github.com/thingsboard/thingsboard/pull/2487", "merged": true, "mergeCommit": {"oid": "a4ae57eb86a329a3afe97c7658968ca2e450022d"}, "closed": true, "closedAt": "2020-03-05T14:05:30Z", "author": {"login": "YevhenBondarenko"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKZX7KgH2gAyMzg0MjU3MDU0OmYyZTUzMDg1YWI5YzMxYmUxN2EzNjlkOTkzMmM5NGVhNDc3OTk0MWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKsBa9AH2gAyMzg0MjU3MDU0OmE4ZGNhNTM2YzRlNmVjMDU4NTM5NDU3ZTJlZWRhMzg3MWRlMDZjODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d", "author": {"user": {"login": "YevhenBondarenko", "name": "Yevhen Bondarenko"}}, "url": "https://github.com/thingsboard/thingsboard/commit/f2e53085ab9c31be17a369d9932c94ea4779941d", "committedDate": "2020-03-04T16:19:05Z", "message": "created TbCheckAlarmStatusNode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTcxOTgy", "url": "https://github.com/thingsboard/thingsboard/pull/2487#pullrequestreview-369571982", "createdAt": "2020-03-05T13:37:14Z", "commit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNzoxNFrOFyTvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNzoxNFrOFyTvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NjQ3Ng==", "bodyText": "Please use \"True\"  and \"False\" in case alarm is present. Please use Failure in case no such alarmId found or failure of DB query, etc.", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388296476", "createdAt": "2020-03-05T13:37:14Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);\n+\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), alarm.getId());\n+\n+            Futures.addCallback(latest, new FutureCallback<Alarm>() {\n+                @Override\n+                public void onSuccess(@Nullable Alarm result) {\n+                    boolean isPresent = false;\n+                    for (String alarmStatus : config.getAlarmStatusList()) {\n+                        if (alarm.getStatus().name().equals(alarmStatus)) {\n+                            isPresent = true;\n+                            break;\n+                        }\n+                    }\n+\n+                    if (isPresent) {\n+                        ctx.tellNext(msg, SUCCESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTcyNzc2", "url": "https://github.com/thingsboard/thingsboard/pull/2487#pullrequestreview-369572776", "createdAt": "2020-03-05T13:38:21Z", "commit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODoyMVrOFyTxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODoyMVrOFyTxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzA2MQ==", "bodyText": "Check Alarm for Null. If null - return Failure", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388297061", "createdAt": "2020-03-05T13:38:21Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);\n+\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), alarm.getId());\n+\n+            Futures.addCallback(latest, new FutureCallback<Alarm>() {\n+                @Override\n+                public void onSuccess(@Nullable Alarm result) {\n+                    boolean isPresent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTczNTM3", "url": "https://github.com/thingsboard/thingsboard/pull/2487#pullrequestreview-369573537", "createdAt": "2020-03-05T13:39:23Z", "commit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozOToyM1rOFyTzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozOToyM1rOFyTzyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzY3NQ==", "bodyText": "just get the id of the alarm, no need to parse all the alarm, it may be big", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388297675", "createdAt": "2020-03-05T13:39:23Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTc0MDk3", "url": "https://github.com/thingsboard/thingsboard/pull/2487#pullrequestreview-369574097", "createdAt": "2020-03-05T13:40:08Z", "commit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0MDowOFrOFyT1aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0MDowOFrOFyT1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5ODA5MQ==", "bodyText": "Maybe add some default values. Active Ack and Active UnAck.", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388298091", "createdAt": "2020-03-05T13:40:08Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import lombok.Data;\n+import org.thingsboard.rule.engine.api.NodeConfiguration;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Data\n+public class TbCheckAlarmStatusNodeConfig implements NodeConfiguration<TbCheckAlarmStatusNodeConfig> {\n+    private List<String> alarmStatusList;\n+\n+    @Override\n+    public TbCheckAlarmStatusNodeConfig defaultConfiguration() {\n+        TbCheckAlarmStatusNodeConfig config = new TbCheckAlarmStatusNodeConfig();\n+        config.setAlarmStatusList(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8dca536c4e6ec058539457e2eeda3871de06c87", "author": {"user": {"login": "YevhenBondarenko", "name": "Yevhen Bondarenko"}}, "url": "https://github.com/thingsboard/thingsboard/commit/a8dca536c4e6ec058539457e2eeda3871de06c87", "committedDate": "2020-03-05T14:02:42Z", "message": "improvements"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3305, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}