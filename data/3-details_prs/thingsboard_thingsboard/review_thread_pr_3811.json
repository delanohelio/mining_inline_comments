{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDk5MTk3", "number": 3811, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo0NjoxMVrOFNKFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozNToyM1rOFOpvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MzQwOTg3OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/core/http/rule-chain.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo0NjoxMVrOIRN5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo0NjoxMVrOIRN5WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNDM3Ng==", "bodyText": "Maybe you need to be used this code: const mergedRuleNodeComponents = Array.from(this.ruleNodeComponentsMap.values())", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r554924376", "createdAt": "2021-01-11T09:46:11Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/core/http/rule-chain.service.ts", "diffHunk": "@@ -149,7 +152,11 @@ export class RuleChainService {\n   }\n \n   public getRuleNodeComponentByClazz(clazz: string): RuleNodeComponentDescriptor {\n-    const found = this.ruleNodeComponents.filter((component) => component.clazz === clazz);\n+    let mergedRuleNodeComponents: RuleNodeComponentDescriptor[] = [];\n+    this.ruleNodeComponentsMap.forEach((value: Array<RuleNodeComponentDescriptor>, key: RuleChainType) => {\n+      mergedRuleNodeComponents = mergedRuleNodeComponents.concat(value);\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDIyOTU3OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/modules/home/pages/edge/edge.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzozNjowOVrOIRVlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzozNjowOVrOIRVlFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1MDI2MQ==", "bodyText": "duplicate code utils.ts", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r555050261", "createdAt": "2021-01-11T13:36:09Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/modules/home/pages/edge/edge.component.ts", "diffHunk": "@@ -0,0 +1,156 @@\n+///\n+/// Copyright \u00a9 2016-2020 The Thingsboard Authors\n+///\n+/// Licensed under the Apache License, Version 2.0 (the \"License\");\n+/// you may not use this file except in compliance with the License.\n+/// You may obtain a copy of the License at\n+///\n+///     http://www.apache.org/licenses/LICENSE-2.0\n+///\n+/// Unless required by applicable law or agreed to in writing, software\n+/// distributed under the License is distributed on an \"AS IS\" BASIS,\n+/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+/// See the License for the specific language governing permissions and\n+/// limitations under the License.\n+///\n+\n+import { Component, Inject } from '@angular/core';\n+import { Store } from '@ngrx/store';\n+import { AppState } from \"@core/core.state\";\n+import { EntityComponent } from \"@home/components/entity/entity.component\";\n+import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n+import { EntityType } from \"@shared/models/entity-type.models\";\n+import { EdgeInfo } from \"@shared/models/edge.models\";\n+import { TranslateService } from \"@ngx-translate/core\";\n+import { NULL_UUID } from \"@shared/models/id/has-uuid\";\n+import { ActionNotificationShow } from \"@core/notification/notification.actions\";\n+import { guid, isUndefined } from \"@core/utils\";\n+import { EntityTableConfig } from \"@home/models/entity/entities-table-config.models\";\n+import { WINDOW } from \"@core/services/window.service\";\n+\n+@Component({\n+  selector: 'tb-edge',\n+  templateUrl: './edge.component.html',\n+  styleUrls: ['./edge.component.scss']\n+})\n+export class EdgeComponent extends EntityComponent<EdgeInfo> {\n+\n+  entityType = EntityType;\n+\n+  edgeScope: 'tenant' | 'customer' | 'customer_user';\n+\n+  constructor(protected store: Store<AppState>,\n+              protected translate: TranslateService,\n+              @Inject('entity') protected entityValue: EdgeInfo,\n+              @Inject('entitiesTableConfig') protected entitiesTableConfigValue: EntityTableConfig<EdgeInfo>,\n+              public fb: FormBuilder,\n+              @Inject(WINDOW) protected window: Window) {\n+    super(store, fb, entityValue, entitiesTableConfigValue);\n+  }\n+\n+  ngOnInit() {\n+    this.edgeScope = this.entitiesTableConfig.componentsData.edgeScope;\n+    this.entityForm.patchValue({\n+      cloudEndpoint:this.window.location.origin\n+    });\n+    super.ngOnInit();\n+  }\n+\n+  hideDelete() {\n+    if (this.entitiesTableConfig) {\n+      return !this.entitiesTableConfig.deleteEnabled(this.entity);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  isAssignedToCustomer(entity: EdgeInfo): boolean {\n+    return entity && entity.customerId && entity.customerId.id !== NULL_UUID;\n+  }\n+\n+  buildForm(entity: EdgeInfo): FormGroup {\n+    const form = this.fb.group(\n+      {\n+        name: [entity ? entity.name : '', [Validators.required]],\n+        type: [entity?.type ? entity.type : 'default', [Validators.required]],\n+        label: [entity ? entity.label : ''],\n+        cloudEndpoint: [null, [Validators.required]],\n+        edgeLicenseKey: ['', [Validators.required]],\n+        routingKey: this.fb.control({ value: entity ? entity.routingKey : null, disabled: true }),\n+        secret: this.fb.control({ value: entity ? entity.secret : null, disabled: true }),\n+        additionalInfo: this.fb.group(\n+          {\n+            description: [entity && entity.additionalInfo ? entity.additionalInfo.description : '']\n+          }\n+        )\n+      }\n+    );\n+    this.checkIsNewEdge(entity, form);\n+    return form;\n+  }\n+\n+  updateForm(entity: EdgeInfo) {\n+    this.entityForm.patchValue({\n+      name: entity.name,\n+      type: entity.type,\n+      label: entity.label,\n+      cloudEndpoint: entity.cloudEndpoint ? entity.cloudEndpoint : this.window.location.origin,\n+      edgeLicenseKey: entity.edgeLicenseKey,\n+      routingKey: entity.routingKey,\n+      secret: entity.secret,\n+      additionalInfo: {\n+        description: entity.additionalInfo ? entity.additionalInfo.description : ''\n+      }\n+    });\n+    this.checkIsNewEdge(entity, this.entityForm);\n+  }\n+\n+  updateFormState() {\n+    super.updateFormState();\n+    this.entityForm.get('routingKey').disable({ emitEvent: false });\n+    this.entityForm.get('secret').disable({ emitEvent: false });\n+  }\n+\n+  private checkIsNewEdge(entity: EdgeInfo, form: FormGroup) {\n+    if (entity && !entity.id) {\n+      form.get('routingKey').patchValue(guid(), { emitEvent: false });\n+      form.get('secret').patchValue(this.generateSecret(20), { emitEvent: false });\n+    }\n+  }\n+\n+  onEdgeIdCopied($event) {\n+    this.store.dispatch(new ActionNotificationShow(\n+      {\n+        message: this.translate.instant('edge.id-copied-message'),\n+        type: 'success',\n+        duration: 750,\n+        verticalPosition: 'bottom',\n+        horizontalPosition: 'right'\n+      }));\n+  }\n+\n+  generateSecret(length): string {\n+    if (isUndefined(length) || length == null) {\n+      length = 1;\n+    }\n+    var l = length > 10 ? 10 : length;\n+    var str = Math.random().toString(36).substr(2, l);\n+    if (str.length >= length) {\n+      return str;\n+    }\n+    return str.concat(this.generateSecret(length - str.length));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDI1MDU0OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/modules/home/pages/edge/edges-table-config.resolver.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzo0MTozMlrOIRVxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzo0MTozMlrOIRVxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1MzQ1Mg==", "bodyText": "Maybe need to create the single function of three arguments", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r555053452", "createdAt": "2021-01-11T13:41:32Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/modules/home/pages/edge/edges-table-config.resolver.ts", "diffHunk": "@@ -0,0 +1,560 @@\n+///\n+/// Copyright \u00a9 2016-2020 The Thingsboard Authors\n+///\n+/// Licensed under the Apache License, Version 2.0 (the \"License\");\n+/// you may not use this file except in compliance with the License.\n+/// You may obtain a copy of the License at\n+///\n+///     http://www.apache.org/licenses/LICENSE-2.0\n+///\n+/// Unless required by applicable law or agreed to in writing, software\n+/// distributed under the License is distributed on an \"AS IS\" BASIS,\n+/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+/// See the License for the specific language governing permissions and\n+/// limitations under the License.\n+///\n+\n+import { Injectable } from '@angular/core';\n+\n+import { ActivatedRouteSnapshot, Resolve, Router } from '@angular/router';\n+import {\n+  CellActionDescriptor,\n+  checkBoxCell,\n+  DateEntityTableColumn,\n+  EntityTableColumn,\n+  EntityTableConfig,\n+  GroupActionDescriptor,\n+  HeaderActionDescriptor\n+} from '@home/models/entity/entities-table-config.models';\n+import { TranslateService } from '@ngx-translate/core';\n+import { DatePipe } from '@angular/common';\n+import { EntityType, entityTypeResources, entityTypeTranslations } from '@shared/models/entity-type.models';\n+import { EntityAction } from '@home/models/entity/entity-component.models';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { select, Store } from '@ngrx/store';\n+import { selectAuthUser } from '@core/auth/auth.selectors';\n+import { map, mergeMap, take, tap } from 'rxjs/operators';\n+import { AppState } from '@core/core.state';\n+import { Authority } from '@app/shared/models/authority.enum';\n+import { CustomerService } from '@core/http/customer.service';\n+import { Customer } from '@app/shared/models/customer.model';\n+import { NULL_UUID } from '@shared/models/id/has-uuid';\n+import { BroadcastService } from '@core/services/broadcast.service';\n+import { MatDialog } from '@angular/material/dialog';\n+import { DialogService } from '@core/services/dialog.service';\n+import {\n+  AssignToCustomerDialogComponent,\n+  AssignToCustomerDialogData\n+} from '@modules/home/dialogs/assign-to-customer-dialog.component';\n+import {\n+  AddEntitiesToCustomerDialogComponent,\n+  AddEntitiesToCustomerDialogData\n+} from '../../dialogs/add-entities-to-customer-dialog.component';\n+import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';\n+import { Edge, EdgeInfo } from \"@shared/models/edge.models\";\n+import { EdgeService } from \"@core/http/edge.service\";\n+import { EdgeComponent } from \"@home/pages/edge/edge.component\";\n+import { EdgeTableHeaderComponent } from \"@home/pages/edge/edge-table-header.component\";\n+import { EdgeId } from \"@shared/models/id/edge-id\";\n+import { EdgeTabsComponent } from \"@home/pages/edge/edge-tabs.component\";\n+import { ActionNotificationShow } from \"@core/notification/notification.actions\";\n+\n+@Injectable()\n+export class EdgesTableConfigResolver implements Resolve<EntityTableConfig<EdgeInfo>> {\n+\n+  private readonly config: EntityTableConfig<EdgeInfo> = new EntityTableConfig<EdgeInfo>();\n+  private customerId: string;\n+\n+  constructor(private store: Store<AppState>,\n+              private broadcast: BroadcastService,\n+              private edgeService: EdgeService,\n+              private customerService: CustomerService,\n+              private dialogService: DialogService,\n+              private homeDialogs: HomeDialogsService,\n+              private translate: TranslateService,\n+              private datePipe: DatePipe,\n+              private router: Router,\n+              private dialog: MatDialog) {\n+\n+    this.config.entityType = EntityType.EDGE;\n+    this.config.entityComponent = EdgeComponent;\n+    this.config.entityTabsComponent = EdgeTabsComponent;\n+    this.config.entityTranslations = entityTypeTranslations.get(EntityType.EDGE);\n+    this.config.entityResources = entityTypeResources.get(EntityType.EDGE);\n+\n+    this.config.deleteEntityTitle = edge => this.translate.instant('edge.delete-edge-title', {edgeName: edge.name});\n+    this.config.deleteEntityContent = () => this.translate.instant('edge.delete-edge-text');\n+    this.config.deleteEntitiesTitle = count => this.translate.instant('edge.delete-edges-title', {count});\n+    this.config.deleteEntitiesContent = () => this.translate.instant('edge.delete-edges-text');\n+\n+    this.config.loadEntity = id => this.edgeService.getEdgeInfo(id.id);\n+    this.config.saveEntity = edge => {\n+      return this.edgeService.saveEdge(edge).pipe(\n+        tap(() => {\n+          this.broadcast.broadcast('edgeSaved');\n+        }),\n+        mergeMap((savedEdge) => this.edgeService.getEdgeInfo(savedEdge.id.id)\n+        ));\n+    };\n+    this.config.onEntityAction = action => this.onEdgeAction(action);\n+    this.config.detailsReadonly = () => this.config.componentsData.edgeScope === 'customer_user';\n+    this.config.headerComponent = EdgeTableHeaderComponent;\n+  }\n+\n+  resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<EdgeInfo>> {\n+    const routeParams = route.params;\n+    this.config.componentsData = {\n+      edgeScope: route.data.edgesType,\n+      edgeType: ''\n+    };\n+    this.customerId = routeParams.customerId;\n+    return this.store.pipe(select(selectAuthUser), take(1)).pipe(\n+      tap((authUser) => {\n+        if (authUser.authority === Authority.CUSTOMER_USER) {\n+          this.config.componentsData.edgeScope = 'customer_user';\n+          this.customerId = authUser.customerId;\n+        }\n+      }),\n+      mergeMap(() =>\n+        this.customerId ? this.customerService.getCustomer(this.customerId) : of(null as Customer)\n+      ),\n+      map((parentCustomer) => {\n+        if (parentCustomer) {\n+          if (parentCustomer.additionalInfo && parentCustomer.additionalInfo.isPublic) {\n+            this.config.tableTitle = this.translate.instant('customer.public-edges');\n+          } else {\n+            this.config.tableTitle = parentCustomer.title + ': ' + this.translate.instant('edge.edge-instances');\n+          }\n+        } else {\n+          this.config.tableTitle = this.translate.instant('edge.edge-instances');\n+        }\n+        this.config.columns = this.configureColumns(this.config.componentsData.edgeScope);\n+        this.configureEntityFunctions(this.config.componentsData.edgeScope);\n+        this.config.cellActionDescriptors = this.configureCellActions(this.config.componentsData.edgeScope);\n+        this.config.groupActionDescriptors = this.configureGroupActions(this.config.componentsData.edgeScope);\n+        this.config.addActionDescriptors = this.configureAddActions(this.config.componentsData.edgeScope);\n+        this.config.addEnabled = this.config.componentsData.edgeScope !== 'customer_user';\n+        this.config.entitiesDeleteEnabled = this.config.componentsData.edgeScope === 'tenant';\n+        this.config.deleteEnabled = () => this.config.componentsData.edgeScope === 'tenant';\n+        return this.config;\n+      })\n+    );\n+  }\n+\n+  configureColumns(edgeScope: string): Array<EntityTableColumn<EdgeInfo>> {\n+    const columns: Array<EntityTableColumn<EdgeInfo>> = [\n+      new DateEntityTableColumn<EdgeInfo>('createdTime', 'common.created-time', this.datePipe, '150px'),\n+      new EntityTableColumn<EdgeInfo>('name', 'edge.name', '25%'),\n+      new EntityTableColumn<EdgeInfo>('type', 'edge.edge-type', '25%'),\n+      new EntityTableColumn<EdgeInfo>('label', 'edge.label', '25%')\n+    ];\n+    if (edgeScope === 'tenant') {\n+      columns.push(\n+        new EntityTableColumn<EdgeInfo>('customerTitle', 'customer.customer', '25%'),\n+        new EntityTableColumn<EdgeInfo>('customerIsPublic', 'edge.public', '60px',\n+          entity => {\n+            return checkBoxCell(entity.customerIsPublic);\n+          }, () => ({}), false)\n+      );\n+    }\n+    return columns;\n+  }\n+\n+  configureEntityFunctions(edgeScope: string): void {\n+    if (edgeScope === 'tenant') {\n+      this.config.entitiesFetchFunction = pageLink =>\n+        this.edgeService.getTenantEdgeInfos(pageLink, this.config.componentsData.edgeType);\n+      this.config.deleteEntity = id => this.edgeService.deleteEdge(id.id);\n+    }\n+    if (edgeScope === 'customer') {\n+      this.config.entitiesFetchFunction = pageLink =>\n+        this.edgeService.getCustomerEdgeInfos(this.customerId, pageLink, this.config.componentsData.edgeType);\n+      this.config.deleteEntity = id => this.edgeService.unassignEdgeFromCustomer(id.id);\n+    }\n+    if (edgeScope === 'customer_user') {\n+      this.config.entitiesFetchFunction = pageLink =>\n+        this.edgeService.getCustomerEdgeInfos(this.customerId, pageLink, this.config.componentsData.edgeType);\n+      this.config.deleteEntity = id => this.edgeService.unassignEdgeFromCustomer(id.id);\n+    }\n+  }\n+\n+  configureCellActions(edgeScope: string): Array<CellActionDescriptor<EdgeInfo>> {\n+    const actions: Array<CellActionDescriptor<EdgeInfo>> = [];\n+    if (edgeScope === 'tenant') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.make-public'),\n+          icon: 'share',\n+          isEnabled: (entity) => (!entity.customerId || entity.customerId.id === NULL_UUID),\n+          onAction: ($event, entity) => this.makePublic($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.assign-to-customer'),\n+          icon: 'assignment_ind',\n+          isEnabled: (entity) => (!entity.customerId || entity.customerId.id === NULL_UUID),\n+          onAction: ($event, entity) => this.assignToCustomer($event, [entity.id])\n+        },\n+        {\n+          name: this.translate.instant('edge.unassign-from-customer'),\n+          icon: 'assignment_return',\n+          isEnabled: (entity) => (entity.customerId && entity.customerId.id !== NULL_UUID && !entity.customerIsPublic),\n+          onAction: ($event, entity) => this.unassignFromCustomer($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.make-private'),\n+          icon: 'reply',\n+          isEnabled: (entity) => (entity.customerId && entity.customerId.id !== NULL_UUID && entity.customerIsPublic),\n+          onAction: ($event, entity) => this.unassignFromCustomer($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-assets'),\n+          icon: 'domain',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeAssets($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-devices'),\n+          icon: 'devices_other',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeDevices($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-entity-views'),\n+          icon: 'view_quilt',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeEntityViews($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-dashboards'),\n+          icon: 'dashboard',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeDashboards($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-rulechains'),\n+          icon: 'settings_ethernet',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeRuleChains($event, entity)\n+        }\n+      );\n+    }\n+    if (edgeScope === 'customer') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.unassign-from-customer'),\n+          icon: 'assignment_return',\n+          isEnabled: (entity) => (entity.customerId && entity.customerId.id !== NULL_UUID && !entity.customerIsPublic),\n+          onAction: ($event, entity) => this.unassignFromCustomer($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.make-private'),\n+          icon: 'reply',\n+          isEnabled: (entity) => (entity.customerId && entity.customerId.id !== NULL_UUID && entity.customerIsPublic),\n+          onAction: ($event, entity) => this.unassignFromCustomer($event, entity)\n+        },\n+      );\n+    }\n+    if (edgeScope === 'customer_user') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.manage-edge-assets'),\n+          icon: 'domain',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeAssets($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-devices'),\n+          icon: 'devices_other',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeDevices($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-entity-views'),\n+          icon: 'view_quilt',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeEntityViews($event, entity)\n+        },\n+        {\n+          name: this.translate.instant('edge.manage-edge-dashboards'),\n+          icon: 'dashboard',\n+          isEnabled: (entity) => true,\n+          onAction: ($event, entity) => this.openEdgeDashboards($event, entity)\n+        }\n+      );\n+    }\n+    return actions;\n+  }\n+\n+  configureGroupActions(edgeScope: string): Array<GroupActionDescriptor<EdgeInfo>> {\n+    const actions: Array<GroupActionDescriptor<EdgeInfo>> = [];\n+    if (edgeScope === 'tenant') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.assign-edge-to-customer-text'),\n+          icon: 'assignment_ind',\n+          isEnabled: true,\n+          onAction: ($event, entities) => this.assignToCustomer($event, entities.map((entity) => entity.id))\n+        }\n+      );\n+    }\n+    if (edgeScope === 'customer') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.unassign-from-customer'),\n+          icon: 'assignment_return',\n+          isEnabled: true,\n+          onAction: ($event, entities) => this.unassignEdgesFromCustomer($event, entities)\n+        }\n+      );\n+    }\n+    return actions;\n+  }\n+\n+  configureAddActions(edgeScope: string): Array<HeaderActionDescriptor> {\n+    const actions: Array<HeaderActionDescriptor> = [];\n+    if (edgeScope === 'tenant') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.add-edge-text'),\n+          icon: 'insert_drive_file',\n+          isEnabled: () => true,\n+          onAction: ($event) => this.config.table.addEntity($event)\n+        },\n+        {\n+          name: this.translate.instant('edge.import'),\n+          icon: 'file_upload',\n+          isEnabled: () => true,\n+          onAction: ($event) => this.importEdges($event)\n+        }\n+      );\n+    }\n+    if (edgeScope === 'customer') {\n+      actions.push(\n+        {\n+          name: this.translate.instant('edge.assign-new-edge'),\n+          icon: 'add',\n+          isEnabled: () => true,\n+          onAction: ($event) => this.addEdgesToCustomer($event)\n+        }\n+      );\n+    }\n+    return actions;\n+  }\n+\n+  importEdges($event: Event) {\n+    this.homeDialogs.importEntities(EntityType.EDGE).subscribe((res) => {\n+      if (res) {\n+        this.broadcast.broadcast('edgeSaved');\n+        this.config.table.updateData();\n+      }\n+    });\n+  }\n+\n+  addEdgesToCustomer($event: Event) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.dialog.open<AddEntitiesToCustomerDialogComponent, AddEntitiesToCustomerDialogData,\n+      boolean>(AddEntitiesToCustomerDialogComponent, {\n+      disableClose: true,\n+      panelClass: ['tb-dialog', 'tb-fullscreen-dialog'],\n+      data: {\n+        customerId: this.customerId,\n+        entityType: EntityType.EDGE\n+      }\n+    }).afterClosed()\n+      .subscribe((res) => {\n+        if (res) {\n+          this.config.table.updateData();\n+        }\n+      });\n+  }\n+\n+  makePublic($event: Event, edge: Edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.dialogService.confirm(\n+      this.translate.instant('edge.make-public-edge-title', {edgeName: edge.name}),\n+      this.translate.instant('edge.make-public-edge-text'),\n+      this.translate.instant('action.no'),\n+      this.translate.instant('action.yes'),\n+      true\n+    ).subscribe((res) => {\n+        if (res) {\n+          this.edgeService.makeEdgePublic(edge.id.id).subscribe(\n+            () => {\n+              this.config.table.updateData();\n+            }\n+          );\n+        }\n+      }\n+    );\n+  }\n+\n+  openEdgeDashboards($event, edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.router.navigateByUrl(`edges/${edge.id.id}/dashboards`);\n+  }\n+\n+  openEdgeRuleChains($event, edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.router.navigateByUrl(`edges/${edge.id.id}/ruleChains`);\n+  }\n+\n+  openEdgeAssets($event: Event, edge: Edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.router.navigateByUrl(`edges/${edge.id.id}/assets`);\n+  }\n+\n+  openEdgeDevices($event, edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.router.navigateByUrl(`edges/${edge.id.id}/devices`);\n+  }\n+\n+  openEdgeEntityViews($event, edge) {\n+    if ($event) {\n+      $event.stopPropagation();\n+    }\n+    this.router.navigateByUrl(`edges/${edge.id.id}/entityViews`);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDMyNjc0OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/shared/models/rule-node.models.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzo1OTo0MlrOIRWe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzo1OTo0MlrOIRWe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA2NTA0Ng==", "bodyText": "Maybe, need to used type: RuleChainType", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r555065046", "createdAt": "2021-01-11T13:59:42Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/shared/models/rule-node.models.ts", "diffHunk": "@@ -313,6 +313,7 @@ export interface FcRuleNode extends FcRuleNodeType {\n   error?: string;\n   highlighted?: boolean;\n   componentClazz?: string;\n+  ruleChainType?: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDM1OTM2OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/shared/components/widgets-bundle-select.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDowNzo1M1rOIRWyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDowNzo1M1rOIRWyrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA3MDEyNQ==", "bodyText": "Maybee, need writing before the operator: tap?", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r555070125", "createdAt": "2021-01-11T14:07:53Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/shared/components/widgets-bundle-select.component.ts", "diffHunk": "@@ -94,6 +95,13 @@ export class WidgetsBundleSelectComponent implements ControlValueAccessor, OnIni\n           }\n         }\n       }),\n+      map((widgetsBundles) => {\n+        const authState = getCurrentAuthState(this.store);\n+        if (!authState.edgesSupportEnabled) {\n+          widgetsBundles = widgetsBundles.filter(widgetsBundle => widgetsBundle.alias !== 'edge_widgets');\n+        }\n+        return widgetsBundles;\n+      }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDQwNzY4OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/modules/home/pages/widget/widgets-bundles-table-config.resolver.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDoxOToyMVrOIRXQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDoxOToyMVrOIRXQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA3NzY3Nw==", "bodyText": "Need, codeif(authState.edgesSupportEnabled) the moved insert map operator", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r555077677", "createdAt": "2021-01-11T14:19:21Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/modules/home/pages/widget/widgets-bundles-table-config.resolver.ts", "diffHunk": "@@ -119,6 +120,17 @@ export class WidgetsBundlesTableConfigResolver implements Resolve<EntityTableCon\n     this.config.deleteEnabled = (widgetsBundle) => this.isWidgetsBundleEditable(widgetsBundle, authUser.authority);\n     this.config.entitySelectionEnabled = (widgetsBundle) => this.isWidgetsBundleEditable(widgetsBundle, authUser.authority);\n     this.config.detailsReadonly = (widgetsBundle) => !this.isWidgetsBundleEditable(widgetsBundle, authUser.authority);\n+    const authState = getCurrentAuthState(this.store);\n+    if (!authState.edgesSupportEnabled) {\n+      this.config.entitiesFetchFunction = pageLink => this.widgetsService.getWidgetBundles(pageLink).pipe(\n+        map((widgetBundles) => {\n+          widgetBundles.data = widgetBundles.data.filter(widgetBundle => widgetBundle.alias !== 'edge_widgets');\n+          return widgetBundles;\n+        })\n+      );\n+    } else {\n+      this.config.entitiesFetchFunction = pageLink => this.widgetsService.getWidgetBundles(pageLink);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea83e19fa80ade9bb2b719984eb7a378494b7b8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTA4MzI5OnYy", "diffSide": "RIGHT", "path": "ui-ngx/src/app/core/http/rule-chain.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozNToyM1rOITiwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozNToyM1rOITiwXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MzI5NA==", "bodyText": "Maybe need to used RuleChainType type", "url": "https://github.com/thingsboard/thingsboard/pull/3811#discussion_r557363294", "createdAt": "2021-01-14T12:35:23Z", "author": {"login": "vvlladd28"}, "path": "ui-ngx/src/app/core/http/rule-chain.service.ts", "diffHunk": "@@ -59,8 +62,8 @@ export class RuleChainService {\n     private translate: TranslateService\n   ) { }\n \n-  public getRuleChains(pageLink: PageLink, config?: RequestConfig): Observable<PageData<RuleChain>> {\n-    return this.http.get<PageData<RuleChain>>(`/api/ruleChains${pageLink.toQuery()}`,\n+  public getRuleChains(pageLink: PageLink, type: string, config?: RequestConfig): Observable<PageData<RuleChain>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8de53c186c9818d02495077e2f7ebbc352f733d"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1316, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}