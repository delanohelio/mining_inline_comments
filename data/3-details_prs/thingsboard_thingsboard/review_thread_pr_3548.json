{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTc3NDQ1", "number": 3548, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0NzoxMFrOEqztCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0NzoxMFrOEqztCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzIyNzYwOnYy", "diffSide": "RIGHT", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/rpc/TbSendRPCRequestNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0NzoxMFrOHdOZ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozODoxN1rOHdopPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwNjczOQ==", "bodyText": "This fixes usage of the API but not the problem with the API itself. Please update your fix with the following idea:\n    @Override\n    public void enqueueForTellNext(TbMsg tbMsg, String relationType) {\n        TopicPartitionInfo tpi = mainCtx.resolve(ServiceType.TB_RULE_ENGINE, tbMsg.getQueueName(), getTenantId(), tbMsg.getOriginator());\n        enqueueForTellNext(tpi, tbMsg, Collections.singleton(relationType), null, null, null);\n    }", "url": "https://github.com/thingsboard/thingsboard/pull/3548#discussion_r500406739", "createdAt": "2020-10-06T15:47:10Z", "author": {"login": "ashvayka"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/rpc/TbSendRPCRequestNode.java", "diffHunk": "@@ -113,7 +113,7 @@ public void onMsg(TbContext ctx, TbMsg msg) {\n             ctx.getRpcService().sendRpcRequestToDevice(request, ruleEngineDeviceRpcResponse -> {\n                 if (!ruleEngineDeviceRpcResponse.getError().isPresent()) {\n                     TbMsg next = ctx.newMsg(msg.getQueueName(), msg.getType(), msg.getOriginator(), msg.getMetaData(), ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n-                    ctx.enqueueForTellNext(next, TbRelationTypes.SUCCESS);\n+                    ctx.enqueueForTellNext(next, next.getQueueName(), TbRelationTypes.SUCCESS, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b005e45a01b54044a4780fa36b263712364c0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNjY3MA==", "bodyText": "Done.", "url": "https://github.com/thingsboard/thingsboard/pull/3548#discussion_r500836670", "createdAt": "2020-10-07T08:38:17Z", "author": {"login": "ShvaykaD"}, "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/rpc/TbSendRPCRequestNode.java", "diffHunk": "@@ -113,7 +113,7 @@ public void onMsg(TbContext ctx, TbMsg msg) {\n             ctx.getRpcService().sendRpcRequestToDevice(request, ruleEngineDeviceRpcResponse -> {\n                 if (!ruleEngineDeviceRpcResponse.getError().isPresent()) {\n                     TbMsg next = ctx.newMsg(msg.getQueueName(), msg.getType(), msg.getOriginator(), msg.getMetaData(), ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n-                    ctx.enqueueForTellNext(next, TbRelationTypes.SUCCESS);\n+                    ctx.enqueueForTellNext(next, next.getQueueName(), TbRelationTypes.SUCCESS, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwNjczOQ=="}, "originalCommit": {"oid": "a3b005e45a01b54044a4780fa36b263712364c0e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1324, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}