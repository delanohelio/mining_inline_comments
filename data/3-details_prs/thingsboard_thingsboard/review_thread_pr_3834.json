{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDM3OTE4", "number": 3834, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowMjo1NVrOFGDpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxMDo0MFrOFGD0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODk1NDkzOnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowMjo1NVrOIG4g9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowMjo1NVrOIG4g9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4ODMwOQ==", "bodyText": "constant", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544088309", "createdAt": "2020-12-16T08:02:55Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "diffHunk": "@@ -76,4 +80,26 @@ public long countEntitiesByQuery(@RequestBody EntityCountQuery query) throws Thi\n             throw handleException(e);\n         }\n     }\n+\n+    @PreAuthorize(\"hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')\")\n+    @RequestMapping(value = \"/entitiesQuery/find/keys/timeseries\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public DeferredResult<ResponseEntity> findEntityTimeseriesAndAttributesKeysByQuery(@RequestBody EntityDataQuery query,\n+                                                                                       @RequestParam(\"timeseries\") boolean isTimeseries,\n+                                                                                       @RequestParam(\"attributes\") boolean isAttributes) throws ThingsboardException {\n+        TenantId tenantId = getTenantId();\n+        checkNotNull(query);\n+        try {\n+            EntityDataPageLink pageLink = query.getPageLink();\n+            if (pageLink.getPageSize() > 100) {\n+                pageLink.setPageSize(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODk1NzE3OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowMzo0OFrOIG4iXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowMzo0OFrOIG4iXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4ODY2OA==", "bodyText": "getKeysByQuery", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544088668", "createdAt": "2020-12-16T08:03:48Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "diffHunk": "@@ -76,4 +80,26 @@ public long countEntitiesByQuery(@RequestBody EntityCountQuery query) throws Thi\n             throw handleException(e);\n         }\n     }\n+\n+    @PreAuthorize(\"hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')\")\n+    @RequestMapping(value = \"/entitiesQuery/find/keys/timeseries\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public DeferredResult<ResponseEntity> findEntityTimeseriesAndAttributesKeysByQuery(@RequestBody EntityDataQuery query,\n+                                                                                       @RequestParam(\"timeseries\") boolean isTimeseries,\n+                                                                                       @RequestParam(\"attributes\") boolean isAttributes) throws ThingsboardException {\n+        TenantId tenantId = getTenantId();\n+        checkNotNull(query);\n+        try {\n+            EntityDataPageLink pageLink = query.getPageLink();\n+            if (pageLink.getPageSize() > 100) {\n+                pageLink.setPageSize(100);\n+            }\n+            DeferredResult<ResponseEntity> response = new DeferredResult<>();\n+            entityQueryService.getKeysByQueryCallback(getCurrentUser(), tenantId, query, isTimeseries, isAttributes, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODk2MTAzOnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowNDo1N1rOIG4kqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODowNDo1N1rOIG4kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4OTI1Nw==", "bodyText": "replyWithEmptyResponse", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544089257", "createdAt": "2020-12-16T08:04:57Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODk4MzEzOnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxMDozNlrOIG4w9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxMDozNlrOIG4w9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5MjQwNw==", "bodyText": "spaces", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544092407", "createdAt": "2020-12-16T08:10:36Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n+                .map(EntityData::getEntityId)\n+                .collect(Collectors.toList());\n+        if (ids.isEmpty()) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n+        ListenableFuture<List<String>> timeseriesKeysFuture;\n+        ListenableFuture<List<String>> attributesKeysFuture;\n+\n+        if (isTimeseries) {\n+            timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n+        } else {\n+            timeseriesKeysFuture = null;\n+        }\n+\n+        if (isAttributes) {\n+            Map<EntityType, List<EntityId>> typesMap = ids.stream().collect(Collectors.groupingBy(EntityId::getEntityType));\n+            List<ListenableFuture<List<String>>> futures = new ArrayList<>(typesMap.size());\n+            typesMap.forEach((type, entityIds) -> futures.add(dbCallbackExecutor.submit(() -> attributesService.findAllKeysByEntityIds(tenantId, type, entityIds))));\n+            attributesKeysFuture = Futures.transform(Futures.allAsList(futures), lists -> {\n+                if (CollectionUtils.isEmpty(lists)) {\n+                    return null;\n+                }\n+\n+                return lists.stream().flatMap(List::stream).distinct().sorted().collect(Collectors.toList());\n+            }, dbCallbackExecutor);\n+        } else {\n+            attributesKeysFuture = null;\n+        }\n+\n+        if (timeseriesKeysFuture != null && attributesKeysFuture != null) {\n+            Futures.whenAllComplete(timeseriesKeysFuture, attributesKeysFuture).call(() -> {\n+                try {\n+                    getResponseCallback(response, types, timeseriesKeysFuture.get(), attributesKeysFuture.get());\n+                } catch (Exception e) {\n+                    log.error(\"Failed to fetch timeseries and attributes keys!\", e);\n+                    AccessValidator.handleError(e, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+\n+                return null;\n+            }, dbCallbackExecutor);\n+        } else if (timeseriesKeysFuture != null) {\n+            Futures.addCallback(timeseriesKeysFuture, new FutureCallback<List<String>>() {\n+                @Override\n+                public void onSuccess(@Nullable List<String> keys) {\n+                    getResponseCallback(response, types, keys, null);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t) {\n+                    log.error(\"Failed to fetch timeseries keys!\", t);\n+                    AccessValidator.handleError(t, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODk4MzU2OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxMDo0MFrOIG4xMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxMDo0MFrOIG4xMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5MjQ2Ng==", "bodyText": "spaces", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544092466", "createdAt": "2020-12-16T08:10:40Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n+                .map(EntityData::getEntityId)\n+                .collect(Collectors.toList());\n+        if (ids.isEmpty()) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n+        ListenableFuture<List<String>> timeseriesKeysFuture;\n+        ListenableFuture<List<String>> attributesKeysFuture;\n+\n+        if (isTimeseries) {\n+            timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n+        } else {\n+            timeseriesKeysFuture = null;\n+        }\n+\n+        if (isAttributes) {\n+            Map<EntityType, List<EntityId>> typesMap = ids.stream().collect(Collectors.groupingBy(EntityId::getEntityType));\n+            List<ListenableFuture<List<String>>> futures = new ArrayList<>(typesMap.size());\n+            typesMap.forEach((type, entityIds) -> futures.add(dbCallbackExecutor.submit(() -> attributesService.findAllKeysByEntityIds(tenantId, type, entityIds))));\n+            attributesKeysFuture = Futures.transform(Futures.allAsList(futures), lists -> {\n+                if (CollectionUtils.isEmpty(lists)) {\n+                    return null;\n+                }\n+\n+                return lists.stream().flatMap(List::stream).distinct().sorted().collect(Collectors.toList());\n+            }, dbCallbackExecutor);\n+        } else {\n+            attributesKeysFuture = null;\n+        }\n+\n+        if (timeseriesKeysFuture != null && attributesKeysFuture != null) {\n+            Futures.whenAllComplete(timeseriesKeysFuture, attributesKeysFuture).call(() -> {\n+                try {\n+                    getResponseCallback(response, types, timeseriesKeysFuture.get(), attributesKeysFuture.get());\n+                } catch (Exception e) {\n+                    log.error(\"Failed to fetch timeseries and attributes keys!\", e);\n+                    AccessValidator.handleError(e, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1318, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}