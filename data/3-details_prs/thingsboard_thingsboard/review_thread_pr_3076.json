{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzQyNjc4", "number": 3076, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMzozN1rOENP-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNToxMFrOENQARg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI4Njg2OnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/sql/attributes/JpaAttributeDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMzozN1rOGv0w1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMzozN1rOGv0w1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMDcyNA==", "bodyText": "put null check to the     public ListenableFuture add(E element)  method to avoid code duplication.", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452800724", "createdAt": "2020-07-10T12:03:37Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/sql/attributes/JpaAttributeDao.java", "diffHunk": "@@ -78,7 +82,9 @@ private void init() {\n                 .maxDelay(maxDelay)\n                 .statsPrintIntervalMs(statsPrintIntervalMs)\n                 .build();\n-        queue = new TbSqlBlockingQueue<>(params);\n+\n+        Function<AttributeKvEntity, Integer> hashcodeFunction = entity -> entity != null ? entity.getId().getEntityId().hashCode() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77127019f058a00f7c5608b565c8d7ca12d2ae7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI4OTk4OnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/service/DataValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNDozNVrOGv0ypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNDozNVrOGv0ypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTE4OQ==", "bodyText": "this is not relevant to the feature", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452801189", "createdAt": "2020-07-10T12:04:35Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/service/DataValidator.java", "diffHunk": "@@ -64,7 +64,7 @@ protected boolean isSameData(D existentData, D actualData) {\n         return actualData.getId() != null && existentData.getId().equals(actualData.getId());\n     }\n \n-    protected static void validateEmail(String email) {\n+    public static void validateEmail(String email) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77127019f058a00f7c5608b565c8d7ca12d2ae7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI5MTU4OnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/sql/TbSqlBlockingQueueWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNToxMFrOGv0zpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNTo1NFrOGv1Xaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTQ0Ng==", "bodyText": "Why do you need this operation?", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452801446", "createdAt": "2020-07-10T12:05:10Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/sql/TbSqlBlockingQueueWrapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.sql;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+@Slf4j\n+@Data\n+public class TbSqlBlockingQueueWrapper<E> {\n+    private final CopyOnWriteArrayList<TbSqlBlockingQueue<E>> queues = new CopyOnWriteArrayList<>();\n+    private final TbSqlBlockingQueueParams params;\n+    private ScheduledLogExecutorComponent logExecutor;\n+    private final Function<E, Integer> hashCodeFunction;\n+    private final int maxThreads;\n+\n+    public void init(ScheduledLogExecutorComponent logExecutor, Consumer<List<E>> saveFunction) {\n+        for (int i = 0; i < maxThreads; i++) {\n+            TbSqlBlockingQueue<E> queue = new TbSqlBlockingQueue<>(params);\n+            queues.add(queue);\n+            queue.init(logExecutor, saveFunction, i);\n+        }\n+    }\n+\n+    public ListenableFuture<Void> add(E element) {\n+        int hash = hashCodeFunction.apply(element);\n+        int queueIndex = (hash & 0x7FFFFFFF) % maxThreads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77127019f058a00f7c5608b565c8d7ca12d2ae7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYwMw==", "bodyText": "because hash can be negative.", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452810603", "createdAt": "2020-07-10T12:25:54Z", "author": {"login": "YevhenBondarenko"}, "path": "dao/src/main/java/org/thingsboard/server/dao/sql/TbSqlBlockingQueueWrapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.sql;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+@Slf4j\n+@Data\n+public class TbSqlBlockingQueueWrapper<E> {\n+    private final CopyOnWriteArrayList<TbSqlBlockingQueue<E>> queues = new CopyOnWriteArrayList<>();\n+    private final TbSqlBlockingQueueParams params;\n+    private ScheduledLogExecutorComponent logExecutor;\n+    private final Function<E, Integer> hashCodeFunction;\n+    private final int maxThreads;\n+\n+    public void init(ScheduledLogExecutorComponent logExecutor, Consumer<List<E>> saveFunction) {\n+        for (int i = 0; i < maxThreads; i++) {\n+            TbSqlBlockingQueue<E> queue = new TbSqlBlockingQueue<>(params);\n+            queues.add(queue);\n+            queue.init(logExecutor, saveFunction, i);\n+        }\n+    }\n+\n+    public ListenableFuture<Void> add(E element) {\n+        int hash = hashCodeFunction.apply(element);\n+        int queueIndex = (hash & 0x7FFFFFFF) % maxThreads;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTQ0Ng=="}, "originalCommit": {"oid": "e77127019f058a00f7c5608b565c8d7ca12d2ae7"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}