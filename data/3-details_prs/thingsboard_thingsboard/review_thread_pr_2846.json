{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjYyODUw", "number": 2846, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNDoyNVrOEABvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxMTozNlrOEAJNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDYzOTQ2OnYy", "diffSide": "RIGHT", "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNDoyNVrOGbDB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxMzoyNVrOGbPhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDM1Nw==", "bodyText": "We need ability to find EntityProfile using EntityType.\nPageData<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId, PageLink pageLink);\nPageData<EntityProfile> findEntityProfilesByTenantIdAndType(TenantId tenantId, EntityType entityType, PageLink pageLink);\n// This will be used by system administrator. TenantId is SYS_TENANT_ID in this case and EntityType = Tenant\nPageData<EntityProfile> findTenantProfiles(PageLink pageLink);", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431014357", "createdAt": "2020-05-27T10:24:25Z", "author": {"login": "ashvayka"}, "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+public interface EntityProfileService {\n+\n+    List<EntityProfile> findAll(TenantId tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NTEzMA==", "bodyText": "added, @ashvayka can you check one more time?\nif I understand correct, findTenantProfiles can be default method", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431195130", "createdAt": "2020-05-27T14:47:29Z", "author": {"login": "karpunets"}, "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+public interface EntityProfileService {\n+\n+    List<EntityProfile> findAll(TenantId tenantId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDM1Nw=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTEwMQ==", "bodyText": "This is ok, but findAll needs to be removed. There might be a lot of profiles..", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431219101", "createdAt": "2020-05-27T15:13:25Z", "author": {"login": "ashvayka"}, "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+public interface EntityProfileService {\n+\n+    List<EntityProfile> findAll(TenantId tenantId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDM1Nw=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY0MzYwOnYy", "diffSide": "RIGHT", "path": "dao/src/main/resources/sql/schema-entities.sql", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNTozMlrOGbDEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0Nzo0NFrOGbOEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTAwOA==", "bodyText": "Please add Unique Constraint as discussed.", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431015008", "createdAt": "2020-05-27T10:25:32Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/resources/sql/schema-entities.sql", "diffHunk": "@@ -253,6 +253,15 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTU3MA==", "bodyText": "(and corresponding tests)", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431015570", "createdAt": "2020-05-27T10:26:32Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/resources/sql/schema-entities.sql", "diffHunk": "@@ -253,6 +253,15 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTAwOA=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTc4Ng==", "bodyText": "(Name, TenantId, EntityType)", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431015786", "createdAt": "2020-05-27T10:26:54Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/resources/sql/schema-entities.sql", "diffHunk": "@@ -253,6 +253,15 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTAwOA=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NTMxNQ==", "bodyText": "added", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431195315", "createdAt": "2020-05-27T14:47:44Z", "author": {"login": "karpunets"}, "path": "dao/src/main/resources/sql/schema-entities.sql", "diffHunk": "@@ -253,6 +253,15 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTAwOA=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY0OTE2OnYy", "diffSide": "RIGHT", "path": "dao/src/main/resources/sql/schema-entities-hsql.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNzowOFrOGbDH0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0Nzo1MVrOGbOFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTg4OQ==", "bodyText": "new line", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431015889", "createdAt": "2020-05-27T10:27:08Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/resources/sql/schema-entities-hsql.sql", "diffHunk": "@@ -253,3 +253,11 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar\n+);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NTQwNw==", "bodyText": "fixed", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431195407", "createdAt": "2020-05-27T14:47:51Z", "author": {"login": "karpunets"}, "path": "dao/src/main/resources/sql/schema-entities-hsql.sql", "diffHunk": "@@ -253,3 +253,11 @@ CREATE TABLE IF NOT EXISTS entity_view (\n     additional_info varchar\n );\n \n+CREATE TABLE IF NOT EXISTS entity_profile(\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar\n+);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTg4OQ=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY1NTYwOnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyODo1MVrOGbDLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0Nzo1OVrOGbOFdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNjkwNw==", "bodyText": "no validation, please take a look at deviceValidator in DeviceServiceImpl (for example).", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431016907", "createdAt": "2020-05-27T10:28:51Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+@Service\n+@RequiredArgsConstructor\n+@Slf4j\n+public class EntityProfileServiceImpl implements EntityProfileService {\n+    private final EntityProfileDao dao;\n+\n+    @Override\n+    public List<EntityProfile> findAll(TenantId tenantId) {\n+        log.trace(\"findAll for tenantId = {}\", tenantId);\n+        return dao.find(tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NTUxMQ==", "bodyText": "done", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431195511", "createdAt": "2020-05-27T14:47:59Z", "author": {"login": "karpunets"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+@Service\n+@RequiredArgsConstructor\n+@Slf4j\n+public class EntityProfileServiceImpl implements EntityProfileService {\n+    private final EntityProfileDao dao;\n+\n+    @Override\n+    public List<EntityProfile> findAll(TenantId tenantId) {\n+        log.trace(\"findAll for tenantId = {}\", tenantId);\n+        return dao.find(tenantId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNjkwNw=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY1OTc0OnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyOTo1N1rOGbDONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0OTowOFrOGbOI3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNzUyNw==", "bodyText": "Please use similar logging patter as we usually do:\nlog.trace(\"Executing findAll, tenantId [{}]\", tenantId);", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431017527", "createdAt": "2020-05-27T10:29:57Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+@Service\n+@RequiredArgsConstructor\n+@Slf4j\n+public class EntityProfileServiceImpl implements EntityProfileService {\n+    private final EntityProfileDao dao;\n+\n+    @Override\n+    public List<EntityProfile> findAll(TenantId tenantId) {\n+        log.trace(\"findAll for tenantId = {}\", tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NjM4MQ==", "bodyText": "fixed, next time I will use this pattern", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431196381", "createdAt": "2020-05-27T14:49:08Z", "author": {"login": "karpunets"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileServiceImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+\n+import java.util.List;\n+\n+@Service\n+@RequiredArgsConstructor\n+@Slf4j\n+public class EntityProfileServiceImpl implements EntityProfileService {\n+    private final EntityProfileDao dao;\n+\n+    @Override\n+    public List<EntityProfile> findAll(TenantId tenantId) {\n+        log.trace(\"findAll for tenantId = {}\", tenantId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNzUyNw=="}, "originalCommit": {"oid": "e7e80def7ab5abe5bd2b15c406e3ef1f8ccf1d69"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg0NzkxOnYy", "diffSide": "RIGHT", "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowODoxOFrOGbPTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxMjowN1rOGb59XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTM2NA==", "bodyText": "Let's remove this one completely.", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431215364", "createdAt": "2020-05-27T15:08:18Z", "author": {"login": "ashvayka"}, "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.List;\n+\n+public interface EntityProfileService {\n+\n+    List<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDMzMw==", "bodyText": "done", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431914333", "createdAt": "2020-05-28T15:12:07Z", "author": {"login": "karpunets"}, "path": "common/dao-api/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.List;\n+\n+public interface EntityProfileService {\n+\n+    List<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTM2NA=="}, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg1MDQxOnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowODo1NVrOGbPUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxMTo1OVrOGb589g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTgxMA==", "bodyText": "deviceId -> entityProfileId", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431215810", "createdAt": "2020-05-27T15:08:55Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.Dao;\n+\n+public interface EntityProfileDao extends Dao<EntityProfile> {\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId, PageLink pageLink);\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantIdAndType(TenantId tenantId, EntityType entityType, PageLink pageLink);\n+\n+    default EntityProfile findById(TenantId tenantId, EntityProfileId deviceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDIzMA==", "bodyText": "fixed", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431914230", "createdAt": "2020-05-28T15:11:59Z", "author": {"login": "karpunets"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.Dao;\n+\n+public interface EntityProfileDao extends Dao<EntityProfile> {\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId, PageLink pageLink);\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantIdAndType(TenantId tenantId, EntityType entityType, PageLink pageLink);\n+\n+    default EntityProfile findById(TenantId tenantId, EntityProfileId deviceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTgxMA=="}, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg1MDk3OnYy", "diffSide": "RIGHT", "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowOTowMlrOGbPVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxMTo1MlrOGb58mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTg5NQ==", "bodyText": "deviceId -> entityProfileId", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431215895", "createdAt": "2020-05-27T15:09:02Z", "author": {"login": "ashvayka"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.Dao;\n+\n+public interface EntityProfileDao extends Dao<EntityProfile> {\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId, PageLink pageLink);\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantIdAndType(TenantId tenantId, EntityType entityType, PageLink pageLink);\n+\n+    default EntityProfile findById(TenantId tenantId, EntityProfileId deviceId) {\n+        return findById(tenantId, deviceId.getId());\n+    }\n+\n+    default boolean removeById(TenantId tenantId, EntityProfileId deviceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDEzNg==", "bodyText": "sorry, fixed", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431914136", "createdAt": "2020-05-28T15:11:52Z", "author": {"login": "karpunets"}, "path": "dao/src/main/java/org/thingsboard/server/dao/entityprofile/EntityProfileDao.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.entityprofile;\n+\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.Dao;\n+\n+public interface EntityProfileDao extends Dao<EntityProfile> {\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantId(TenantId tenantId, PageLink pageLink);\n+\n+    PageData<EntityProfile> findEntityProfilesByTenantIdAndType(TenantId tenantId, EntityType entityType, PageLink pageLink);\n+\n+    default EntityProfile findById(TenantId tenantId, EntityProfileId deviceId) {\n+        return findById(tenantId, deviceId.getId());\n+    }\n+\n+    default boolean removeById(TenantId tenantId, EntityProfileId deviceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTg5NQ=="}, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg2MzExOnYy", "diffSide": "RIGHT", "path": "dao/src/test/java/org/thingsboard/server/dao/service/entityprofile/EntityProfileServiceSqlTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxMTozNlrOGbPchQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxMTo0NFrOGb58Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNzc5Nw==", "bodyText": "Let's also check that sameName but different entityTypes works fine", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431217797", "createdAt": "2020-05-27T15:11:36Z", "author": {"login": "ashvayka"}, "path": "dao/src/test/java/org/thingsboard/server/dao/service/entityprofile/EntityProfileServiceSqlTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.service.entityprofile;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.entityprofile.EntityProfileService;\n+import org.thingsboard.server.dao.service.AbstractServiceTest;\n+import org.thingsboard.server.dao.service.DaoSqlTest;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+\n+@DaoSqlTest\n+public class EntityProfileServiceSqlTest extends AbstractServiceTest {\n+    @Autowired\n+    private EntityProfileService profileService;\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantId() {\n+        EntityProfile saved = saveRandomEntityProfile();\n+        profileService.findEntityProfilesByTenantId(saved.getTenantId()).stream()\n+                .filter(saved::equals)\n+                .findAny().orElseThrow(AssertionError::new);\n+    }\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantIdWithPageLink() {\n+        List<EntityProfile> all = profileService.findEntityProfilesByTenantId(TenantId.SYS_TENANT_ID);\n+        PageLink pageLink = new PageLink(all.size());\n+        PageData<EntityProfile> page = profileService.findEntityProfilesByTenantId(TenantId.SYS_TENANT_ID, pageLink);\n+        assertEquals(new HashSet<>(all), new HashSet<>(page.getData()));\n+    }\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantIdAndType() {\n+        EntityProfile saved = saveRandomEntityProfile(randomAlphanumeric(10), EntityType.ASSET);\n+        PageLink pageLink = new PageLink(1);\n+        List<EntityProfile> data = profileService.findEntityProfilesByTenantIdAndType(saved.getTenantId(),\n+                saved.getEntityType(), pageLink).getData();\n+        assertEquals(pageLink.getPageSize(), data.size());\n+        assertEquals(saved, data.get(0));\n+    }\n+\n+    @Test\n+    public void testFindTenantProfiles() {\n+        EntityProfile saved = saveRandomEntityProfile(randomAlphanumeric(10), EntityType.TENANT);\n+        PageLink pageLink = new PageLink(1);\n+        List<EntityProfile> data = profileService.findTenantProfiles(pageLink).getData();\n+        assertEquals(pageLink.getPageSize(), data.size());\n+        assertEquals(saved, data.get(0));\n+    }\n+\n+    @Test\n+    public void testFindById() {\n+        EntityProfile saved = saveRandomEntityProfile();\n+        assertEquals(saved, profileService.findById(TenantId.SYS_TENANT_ID, saved.getId()));\n+    }\n+\n+    @Test(expected = DataIntegrityViolationException.class)\n+    public void testSaveWithSameNameTenantAndType() {\n+        String sameName = randomAlphanumeric(10);\n+        EntityType sameEntityType = EntityType.DEVICE;\n+        saveRandomEntityProfile(sameName, sameEntityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDA0Mg==", "bodyText": "added", "url": "https://github.com/thingsboard/thingsboard/pull/2846#discussion_r431914042", "createdAt": "2020-05-28T15:11:44Z", "author": {"login": "karpunets"}, "path": "dao/src/test/java/org/thingsboard/server/dao/service/entityprofile/EntityProfileServiceSqlTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.service.entityprofile;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.entityprofile.EntityProfileService;\n+import org.thingsboard.server.dao.service.AbstractServiceTest;\n+import org.thingsboard.server.dao.service.DaoSqlTest;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+\n+@DaoSqlTest\n+public class EntityProfileServiceSqlTest extends AbstractServiceTest {\n+    @Autowired\n+    private EntityProfileService profileService;\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantId() {\n+        EntityProfile saved = saveRandomEntityProfile();\n+        profileService.findEntityProfilesByTenantId(saved.getTenantId()).stream()\n+                .filter(saved::equals)\n+                .findAny().orElseThrow(AssertionError::new);\n+    }\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantIdWithPageLink() {\n+        List<EntityProfile> all = profileService.findEntityProfilesByTenantId(TenantId.SYS_TENANT_ID);\n+        PageLink pageLink = new PageLink(all.size());\n+        PageData<EntityProfile> page = profileService.findEntityProfilesByTenantId(TenantId.SYS_TENANT_ID, pageLink);\n+        assertEquals(new HashSet<>(all), new HashSet<>(page.getData()));\n+    }\n+\n+    @Test\n+    public void testFindEntityProfilesByTenantIdAndType() {\n+        EntityProfile saved = saveRandomEntityProfile(randomAlphanumeric(10), EntityType.ASSET);\n+        PageLink pageLink = new PageLink(1);\n+        List<EntityProfile> data = profileService.findEntityProfilesByTenantIdAndType(saved.getTenantId(),\n+                saved.getEntityType(), pageLink).getData();\n+        assertEquals(pageLink.getPageSize(), data.size());\n+        assertEquals(saved, data.get(0));\n+    }\n+\n+    @Test\n+    public void testFindTenantProfiles() {\n+        EntityProfile saved = saveRandomEntityProfile(randomAlphanumeric(10), EntityType.TENANT);\n+        PageLink pageLink = new PageLink(1);\n+        List<EntityProfile> data = profileService.findTenantProfiles(pageLink).getData();\n+        assertEquals(pageLink.getPageSize(), data.size());\n+        assertEquals(saved, data.get(0));\n+    }\n+\n+    @Test\n+    public void testFindById() {\n+        EntityProfile saved = saveRandomEntityProfile();\n+        assertEquals(saved, profileService.findById(TenantId.SYS_TENANT_ID, saved.getId()));\n+    }\n+\n+    @Test(expected = DataIntegrityViolationException.class)\n+    public void testSaveWithSameNameTenantAndType() {\n+        String sameName = randomAlphanumeric(10);\n+        EntityType sameEntityType = EntityType.DEVICE;\n+        saveRandomEntityProfile(sameName, sameEntityType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNzc5Nw=="}, "originalCommit": {"oid": "38e1e9b418add36aa9b8d9da5ec957cacedc4c32"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1381, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}