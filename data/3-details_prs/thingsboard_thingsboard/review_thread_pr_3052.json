{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzA5NTA5", "number": 3052, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToxOTo0OVrOELpQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyMDo0NlrOELpRMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ1NjgxOnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/queue/TbRuleEngineConsumerStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToxOTo0OVrOGtTNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToxOTo0OVrOGtTNuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1MzkxMg==", "bodyText": "maybe it's possible to do this somehow better and without passing factory obj?", "url": "https://github.com/thingsboard/thingsboard/pull/3052#discussion_r450153912", "createdAt": "2020-07-06T11:19:49Z", "author": {"login": "vzikratyi-tb"}, "path": "application/src/main/java/org/thingsboard/server/service/queue/TbRuleEngineConsumerStats.java", "diffHunk": "@@ -43,61 +43,72 @@\n     public static final String SUCCESSFUL_ITERATIONS = \"successfulIterations\";\n     public static final String FAILED_ITERATIONS = \"failedIterations\";\n \n-    private final AtomicInteger totalMsgCounter = new AtomicInteger(0);\n-    private final AtomicInteger successMsgCounter = new AtomicInteger(0);\n-    private final AtomicInteger tmpTimeoutMsgCounter = new AtomicInteger(0);\n-    private final AtomicInteger tmpFailedMsgCounter = new AtomicInteger(0);\n+    private final StatsCounter totalMsgCounter;\n+    private final StatsCounter successMsgCounter;\n+    private final StatsCounter tmpTimeoutMsgCounter;\n+    private final StatsCounter tmpFailedMsgCounter;\n \n-    private final AtomicInteger timeoutMsgCounter = new AtomicInteger(0);\n-    private final AtomicInteger failedMsgCounter = new AtomicInteger(0);\n+    private final StatsCounter timeoutMsgCounter;\n+    private final StatsCounter failedMsgCounter;\n \n-    private final AtomicInteger successIterationsCounter = new AtomicInteger(0);\n-    private final AtomicInteger failedIterationsCounter = new AtomicInteger(0);\n+    private final StatsCounter successIterationsCounter;\n+    private final StatsCounter failedIterationsCounter;\n \n-    private final Map<String, AtomicInteger> counters = new HashMap<>();\n+    private final List<StatsCounter> counters = new ArrayList<>();\n     private final ConcurrentMap<UUID, TbTenantRuleEngineStats> tenantStats = new ConcurrentHashMap<>();\n     private final ConcurrentMap<TenantId, RuleEngineException> tenantExceptions = new ConcurrentHashMap<>();\n \n     private final String queueName;\n \n-    public TbRuleEngineConsumerStats(String queueName) {\n+    public TbRuleEngineConsumerStats(String queueName, StatsCounterFactory counterFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5378c0af548a7984adb0599b9afb65f7695fa9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ1OTM5OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/stats/StatsCounterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyMDo0NlrOGtTPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyMDo0NlrOGtTPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDMwMw==", "bodyText": "not sure if that's a good idea", "url": "https://github.com/thingsboard/thingsboard/pull/3052#discussion_r450154303", "createdAt": "2020-07-06T11:20:46Z", "author": {"login": "vzikratyi-tb"}, "path": "application/src/main/java/org/thingsboard/server/service/stats/StatsCounterFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.service.stats;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.thingsboard.server.service.metrics.StubCounter;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@Service\n+public class StatsCounterFactory {\n+    private static final String STATS_NAME_TAG = \"statsName\";\n+\n+    private static final Counter STUB_COUNTER = new StubCounter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5378c0af548a7984adb0599b9afb65f7695fa9"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1369, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}