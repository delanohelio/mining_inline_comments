{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1ODc1Mjc3", "number": 2891, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MjoxOFrOEBq_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMjozMVrOEDzoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg4Mzk1OnYy", "diffSide": "RIGHT", "path": "application/src/main/data/upgrade/3.1.0/schema_update.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MjoxOFrOGdqF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMTo0NDo1MlrOGdt5Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MTUyNg==", "bodyText": "I think that constraint should be (tenant_id, entity_type, name). In such case the automatic index is more usable. We always know tenant_id and entity_type when executing find queries. But Name may have different conditions (IN, LIKE, etc). This needs to be changed in the main SQL file as well.", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433751526", "createdAt": "2020-06-02T09:42:18Z", "author": {"login": "ashvayka"}, "path": "application/src/main/data/upgrade/3.1.0/schema_update.sql", "diffHunk": "@@ -0,0 +1,27 @@\n+--\n+-- Copyright \u00a9 2016-2020 The Thingsboard Authors\n+--\n+-- Licensed under the Apache License, Version 2.0 (the \"License\");\n+-- you may not use this file except in compliance with the License.\n+-- You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+\n+DROP TABLE IF EXISTS entity_profile;\n+\n+CREATE TABLE IF NOT EXISTS entity_profile (\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar,\n+    CONSTRAINT name_tenant_id_type_unq_key UNIQUE (name, tenant_id, entity_type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgxMzg1OA==", "bodyText": "agree, fixed", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433813858", "createdAt": "2020-06-02T11:44:52Z", "author": {"login": "karpunets"}, "path": "application/src/main/data/upgrade/3.1.0/schema_update.sql", "diffHunk": "@@ -0,0 +1,27 @@\n+--\n+-- Copyright \u00a9 2016-2020 The Thingsboard Authors\n+--\n+-- Licensed under the Apache License, Version 2.0 (the \"License\");\n+-- you may not use this file except in compliance with the License.\n+-- You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+\n+DROP TABLE IF EXISTS entity_profile;\n+\n+CREATE TABLE IF NOT EXISTS entity_profile (\n+    id              varchar(31) NOT NULL CONSTRAINT entity_profile_pkey PRIMARY KEY,\n+    name            varchar(255),\n+    tenant_id       varchar(31),\n+    entity_type     varchar(255),\n+    profile         varchar,\n+    additional_info varchar,\n+    CONSTRAINT name_tenant_id_type_unq_key UNIQUE (name, tenant_id, entity_type)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MTUyNg=="}, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg5MDM2OnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/controller/EntityProfileController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0Mzo1NFrOGdqJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMTo0NDo0MFrOGdt4_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MjUyMA==", "bodyText": "There is a new method called checkEntity. Please use it instead of checkPermission.", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433752520", "createdAt": "2020-06-02T09:43:54Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/controller/EntityProfileController.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.audit.ActionType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.exception.ThingsboardException;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.entityprofile.EntityProfileService;\n+import org.thingsboard.server.queue.util.TbCoreComponent;\n+import org.thingsboard.server.service.security.model.SecurityUser;\n+import org.thingsboard.server.service.security.permission.Operation;\n+import org.thingsboard.server.service.security.permission.Resource;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+\n+@RestController\n+@TbCoreComponent\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@RequiredArgsConstructor\n+public class EntityProfileController extends BaseController {\n+    private static final String ENTITY_PROFILES_ID = \"entityProfilesId\";\n+    private final EntityProfileService service;\n+\n+    @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')\")\n+    @GetMapping(\"/entityProfiles/{entityProfilesId}\")\n+    public EntityProfile getEntityProfileById(@PathVariable(ENTITY_PROFILES_ID) String strId) throws ThingsboardException {\n+        checkParameter(ENTITY_PROFILES_ID, strId);\n+        EntityProfileId id = new EntityProfileId(toUUID(strId));\n+        SecurityUser user = getCurrentUser();\n+        try {\n+            EntityProfile entityProfile = service.findById(user.getTenantId(), id);\n+            checkNotNull(entityProfile);\n+            accessControlService.checkPermission(user, Resource.ENTITY_PROFILE, Operation.READ, id, entityProfile);\n+            return entityProfile;\n+        } catch (Exception e) {\n+            throw handleException(e);\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')\")\n+    @PostMapping(\"/entityProfiles\")\n+    public EntityProfile saveEntityProfile(@RequestBody EntityProfile entityProfile) throws ThingsboardException {\n+        entityProfile = entityProfile.toBuilder()\n+                .tenantId(getCurrentUser().getTenantId())\n+                .build();\n+        Operation operation = entityProfile.getId() == null ? Operation.CREATE : Operation.WRITE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgxMzc1OA==", "bodyText": "done, but as for me it seems not good way to check some entity by calling base class method with all logic inside\nBaseController.class already has 700+ lines and this number will be grown", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433813758", "createdAt": "2020-06-02T11:44:40Z", "author": {"login": "karpunets"}, "path": "application/src/main/java/org/thingsboard/server/controller/EntityProfileController.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.audit.ActionType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.exception.ThingsboardException;\n+import org.thingsboard.server.common.data.id.EntityProfileId;\n+import org.thingsboard.server.common.data.id.TenantId;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+import org.thingsboard.server.dao.entityprofile.EntityProfileService;\n+import org.thingsboard.server.queue.util.TbCoreComponent;\n+import org.thingsboard.server.service.security.model.SecurityUser;\n+import org.thingsboard.server.service.security.permission.Operation;\n+import org.thingsboard.server.service.security.permission.Resource;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+\n+@RestController\n+@TbCoreComponent\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@RequiredArgsConstructor\n+public class EntityProfileController extends BaseController {\n+    private static final String ENTITY_PROFILES_ID = \"entityProfilesId\";\n+    private final EntityProfileService service;\n+\n+    @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')\")\n+    @GetMapping(\"/entityProfiles/{entityProfilesId}\")\n+    public EntityProfile getEntityProfileById(@PathVariable(ENTITY_PROFILES_ID) String strId) throws ThingsboardException {\n+        checkParameter(ENTITY_PROFILES_ID, strId);\n+        EntityProfileId id = new EntityProfileId(toUUID(strId));\n+        SecurityUser user = getCurrentUser();\n+        try {\n+            EntityProfile entityProfile = service.findById(user.getTenantId(), id);\n+            checkNotNull(entityProfile);\n+            accessControlService.checkPermission(user, Resource.ENTITY_PROFILE, Operation.READ, id, entityProfile);\n+            return entityProfile;\n+        } catch (Exception e) {\n+            throw handleException(e);\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')\")\n+    @PostMapping(\"/entityProfiles\")\n+    public EntityProfile saveEntityProfile(@RequestBody EntityProfile entityProfile) throws ThingsboardException {\n+        entityProfile = entityProfile.toBuilder()\n+                .tenantId(getCurrentUser().getTenantId())\n+                .build();\n+        Operation operation = entityProfile.getId() == null ? Operation.CREATE : Operation.WRITE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MjUyMA=="}, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg5NjUwOnYy", "diffSide": "RIGHT", "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0NTo0MlrOGdqNvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNjo0M1rOGeCwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MzUzNA==", "bodyText": "Please add tests similar to DeviceControllerTest.testUpdateDeviceFromDifferentTenant", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433753534", "createdAt": "2020-06-02T09:45:42Z", "author": {"login": "ashvayka"}, "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class BaseEntityProfileControllerTest extends AbstractControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTU1Mw==", "bodyText": "added testUpdateEntityProfileFromDifferentTenant()", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r434155553", "createdAt": "2020-06-02T20:26:43Z", "author": {"login": "karpunets"}, "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class BaseEntityProfileControllerTest extends AbstractControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MzUzNA=="}, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTkwODQ5OnYy", "diffSide": "RIGHT", "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0OToxOFrOGdqVrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNzoyMFrOGeCxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NTU2NA==", "bodyText": "Please add more tests similar to BaseDeviceControllerTest.testFindCustomerDevicesByType. We need to check that all parameters from getEntityProfiles rest api call work fine. Using testFindCustomerDevicesByType we create 100+ profiles and check pagination properly.", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r433755564", "createdAt": "2020-06-02T09:49:18Z", "author": {"login": "ashvayka"}, "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class BaseEntityProfileControllerTest extends AbstractControllerTest {\n+    private final TypeReference<PageData<EntityProfile>> PAGE_ENTITY_PROFILE_TYPE = new TypeReference<PageData<EntityProfile>>() {\n+    };\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        logout();\n+    }\n+\n+    @Test\n+    public void testSysAdminPermissionDenyForNonTenantProfile() throws Exception {\n+        loginSysAdmin();\n+        EntityProfile entityProfile = randomEntityProfile(EntityType.ASSET);\n+        doPost(\"/api/entityProfiles\", entityProfile, EntityProfile.class, status().isForbidden());\n+    }\n+\n+    @Test\n+    public void testSysAdminFindEntityProfiles() throws Exception {\n+        loginSysAdmin();\n+        EntityProfile entityProfile = randomEntityProfile(EntityType.TENANT);\n+        EntityProfile saved = doPost(\"/api/entityProfiles\", entityProfile, EntityProfile.class);\n+        EntityProfile found = doGet(\"/api/entityProfiles/{id}\", EntityProfile.class,\n+                saved.getId().getId().toString());\n+        assertNotNull(found);\n+        assertEquals(saved, found);\n+        PageData<EntityProfile> page = doGetTypedWithPageLink(\"/api/entityProfiles?\",\n+                PAGE_ENTITY_PROFILE_TYPE, new PageLink(5));\n+        assertFalse(page.getData().isEmpty());\n+    }\n+\n+    @Test\n+    public void testTenantAdminDeviceEntityProfileFlow() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTg1Mw==", "bodyText": "added\ntestFindEntityProfileByType()\ntestFindEntityProfileByName()", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r434155853", "createdAt": "2020-06-02T20:27:20Z", "author": {"login": "karpunets"}, "path": "application/src/test/java/org/thingsboard/server/controller/BaseEntityProfileControllerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.controller;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.thingsboard.server.common.data.EntityType;\n+import org.thingsboard.server.common.data.entityprofile.EntityProfile;\n+import org.thingsboard.server.common.data.page.PageData;\n+import org.thingsboard.server.common.data.page.PageLink;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n+import static org.junit.Assert.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class BaseEntityProfileControllerTest extends AbstractControllerTest {\n+    private final TypeReference<PageData<EntityProfile>> PAGE_ENTITY_PROFILE_TYPE = new TypeReference<PageData<EntityProfile>>() {\n+    };\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        logout();\n+    }\n+\n+    @Test\n+    public void testSysAdminPermissionDenyForNonTenantProfile() throws Exception {\n+        loginSysAdmin();\n+        EntityProfile entityProfile = randomEntityProfile(EntityType.ASSET);\n+        doPost(\"/api/entityProfiles\", entityProfile, EntityProfile.class, status().isForbidden());\n+    }\n+\n+    @Test\n+    public void testSysAdminFindEntityProfiles() throws Exception {\n+        loginSysAdmin();\n+        EntityProfile entityProfile = randomEntityProfile(EntityType.TENANT);\n+        EntityProfile saved = doPost(\"/api/entityProfiles\", entityProfile, EntityProfile.class);\n+        EntityProfile found = doGet(\"/api/entityProfiles/{id}\", EntityProfile.class,\n+                saved.getId().getId().toString());\n+        assertNotNull(found);\n+        assertEquals(saved, found);\n+        PageData<EntityProfile> page = doGetTypedWithPageLink(\"/api/entityProfiles?\",\n+                PAGE_ENTITY_PROFILE_TYPE, new PageLink(5));\n+        assertFalse(page.getData().isEmpty());\n+    }\n+\n+    @Test\n+    public void testTenantAdminDeviceEntityProfileFlow() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NTU2NA=="}, "originalCommit": {"oid": "d7f96b06f9edb071af89a1cdf639215b0c15e23e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI3MDkyOnYy", "diffSide": "RIGHT", "path": "application/src/main/java/org/thingsboard/server/service/state/DefaultDeviceStateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMjozMVrOGhCjVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMjozMVrOGhCjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5ODAwNw==", "bodyText": "Please add TODO to replace this with cache.", "url": "https://github.com/thingsboard/thingsboard/pull/2891#discussion_r437298007", "createdAt": "2020-06-09T10:12:31Z", "author": {"login": "ashvayka"}, "path": "application/src/main/java/org/thingsboard/server/service/state/DefaultDeviceStateService.java", "diffHunk": "@@ -461,9 +455,10 @@ private void onDeviceDeleted(TenantId tenantId, DeviceId deviceId) {\n             @Override\n             public DeviceStateData apply(@Nullable List<T> data) {\n                 try {\n+                    DeviceProfile deviceProfile = entityProfileService.findProfile(device, DeviceProfile.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e131e0c033f6ac1e5684ca539abdc650b387ac5"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1360, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}