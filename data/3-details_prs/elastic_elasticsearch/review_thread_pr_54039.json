{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjg3OTk1", "number": 54039, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1MjoxMlrODrRzyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo0MVrODrR8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA3MTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteIndexTemplateV2Action.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1MjoxMlrOF7h4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozMDo1OFrOF7mbEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NTMyNQ==", "bodyText": "maybe all the action names should contain index_template instead of template_v2? In this it would be indices:admin/index_template/delete. When v1 has been removed the v2 name is going to be confusing and changing that isn't fun from a bwc point of view.", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r397965325", "createdAt": "2020-03-25T15:52:12Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteIndexTemplateV2Action.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.delete;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class DeleteIndexTemplateV2Action extends ActionType<AcknowledgedResponse> {\n+\n+    public static final DeleteIndexTemplateV2Action INSTANCE = new DeleteIndexTemplateV2Action();\n+    public static final String NAME = \"indices:admin/template_v2/delete\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTgyNg==", "bodyText": "true, I originally went with template_<something> so people could do template*, but it looks like people use template/* anyway, so it wouldn't work. I'll change these to index_template", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398039826", "createdAt": "2020-03-25T17:30:58Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteIndexTemplateV2Action.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.delete;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class DeleteIndexTemplateV2Action extends ActionType<AcknowledgedResponse> {\n+\n+    public static final DeleteIndexTemplateV2Action INSTANCE = new DeleteIndexTemplateV2Action();\n+    public static final String NAME = \"indices:admin/template_v2/delete\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NTMyNQ=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA4NzczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1NToyNlrOF7iCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTowNjozM1rOF7uVHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2Nzk1Mg==", "bodyText": "Are tests for this method going to be added later or should the tests be part of this PR?", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r397967952", "createdAt": "2020-03-25T15:55:26Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MTMzMw==", "bodyText": "Planning on adding these later when template validation is added (since that will directly change and test these methods)", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398041333", "createdAt": "2020-03-25T17:33:13Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2Nzk1Mg=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MTgzOA==", "bodyText": "Would it make sense to do it like in component templates? Basic tests in initial PR and extending tests when validation is added?", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398081838", "createdAt": "2020-03-25T18:33:46Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2Nzk1Mg=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2OTM3NQ==", "bodyText": "Yes, will do that.", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398169375", "createdAt": "2020-03-25T21:06:33Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2Nzk1Mg=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA4OTc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1NTo1M1rOF7iDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzowMToyMVrOF7xjwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODI5NA==", "bodyText": "Maybe move the logic of this method also to a static method, so that it can be unit tested?", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r397968294", "createdAt": "2020-03-25T15:55:53Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,\n+                                           final String name, final IndexTemplateV2 template) {\n+        if (create && currentState.metaData().templatesV2().containsKey(name)) {\n+            throw new IllegalArgumentException(\"index template [\" + name + \"] already exists\");\n+        }\n+\n+        // TODO: validation of index template\n+        // validateAndAddTemplate(request, templateBuilder, indicesService, xContentRegistry);\n+\n+        logger.info(\"adding index template [{}]\", name);\n+        return ClusterState.builder(currentState)\n+            .metaData(MetaData.builder(currentState.metaData()).put(name, template))\n+            .build();\n+    }\n+\n+    /**\n+     * Remove the given index template from the cluster state. The index template name\n+     * supports simple regex wildcards for removing multiple index templates at a time.\n+     */\n+    public void removeIndexTemplateV2(final String name, final TimeValue masterTimeout,\n+                                      final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"remove-index-template-v2 [\" + name + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    Set<String> templateNames = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyMjI3NA==", "bodyText": "Sure, added this.", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398222274", "createdAt": "2020-03-25T23:01:21Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -234,6 +234,103 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n             });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putIndexTemplateV2(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                   final IndexTemplateV2 template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-index-template-v2 [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return addIndexTemplateV2(currentState, create, name, template);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(new AcknowledgedResponse(true));\n+                }\n+            });\n+    }\n+\n+    // Package visible for testing\n+    static ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean create,\n+                                           final String name, final IndexTemplateV2 template) {\n+        if (create && currentState.metaData().templatesV2().containsKey(name)) {\n+            throw new IllegalArgumentException(\"index template [\" + name + \"] already exists\");\n+        }\n+\n+        // TODO: validation of index template\n+        // validateAndAddTemplate(request, templateBuilder, indicesService, xContentRegistry);\n+\n+        logger.info(\"adding index template [{}]\", name);\n+        return ClusterState.builder(currentState)\n+            .metaData(MetaData.builder(currentState.metaData()).put(name, template))\n+            .build();\n+    }\n+\n+    /**\n+     * Remove the given index template from the cluster state. The index template name\n+     * supports simple regex wildcards for removing multiple index templates at a time.\n+     */\n+    public void removeIndexTemplateV2(final String name, final TimeValue masterTimeout,\n+                                      final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"remove-index-template-v2 [\" + name + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    Set<String> templateNames = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2ODI5NA=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA5NDEwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/template/get/GetIndexTemplateV2ResponseTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo0MVrOF7iGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1MzoxMVrOF8QnkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTAyMw==", "bodyText": "Maybe also add unit tests for the request classes?", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r397969023", "createdAt": "2020-03-25T15:56:41Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/template/get/GetIndexTemplateV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2Tests;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GetIndexTemplateV2ResponseTests extends AbstractWireSerializingTestCase<GetIndexTemplateV2Action.Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3MjI5Mg==", "bodyText": "So I'm not sure what they would test? They don't implement hashcode and equals (just like our other, existing, template requests), and they don't have toXContent, so they wouldn't really be testing much? Is it worth adding the hashcode and equals implementations so that we can add tests for the requests?", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398172292", "createdAt": "2020-03-25T21:11:53Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/template/get/GetIndexTemplateV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2Tests;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GetIndexTemplateV2ResponseTests extends AbstractWireSerializingTestCase<GetIndexTemplateV2Action.Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTAyMw=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3OTI3Mg==", "bodyText": "Sorry, I should have been more specific. These tests would extend from AbstractWireSerializingTestCase and test the binary wire serialisation. The requests can then either implement equals() / hashcode() methods or in the test you can overwrite the assertEqualInstances() method.", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398379272", "createdAt": "2020-03-26T08:04:54Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/template/get/GetIndexTemplateV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2Tests;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GetIndexTemplateV2ResponseTests extends AbstractWireSerializingTestCase<GetIndexTemplateV2Action.Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTAyMw=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczMTE1Mw==", "bodyText": "Okay, I've added these unit tests.", "url": "https://github.com/elastic/elasticsearch/pull/54039#discussion_r398731153", "createdAt": "2020-03-26T16:53:11Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/template/get/GetIndexTemplateV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2Tests;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GetIndexTemplateV2ResponseTests extends AbstractWireSerializingTestCase<GetIndexTemplateV2Action.Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTAyMw=="}, "originalCommit": {"oid": "2449ae96b4f2bbceaf794e68802313fc50648c23"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}