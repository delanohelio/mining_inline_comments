{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzQ4MjUz", "number": 64673, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMToyMlrOE3JmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowNDo0OFrOE3N3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjY0MzI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/MatchAllRoleBitSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMToyMlrOHwU40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMToyMlrOHwU40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNTkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);\n          \n          \n            \n                private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(MatchAllRoleBitSet.class);", "url": "https://github.com/elastic/elasticsearch/pull/64673#discussion_r520435923", "createdAt": "2020-11-10T10:01:22Z", "author": {"login": "jpountz"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/MatchAllRoleBitSet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.authz.accesscontrol;\n+\n+import org.apache.lucene.util.BitSet;\n+import org.apache.lucene.util.FixedBitSet;\n+import org.apache.lucene.util.RamUsageEstimator;\n+\n+final class MatchAllRoleBitSet extends BitSet {\n+    private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6cb3c1cb478964db34e8b999d4c70d8b350847"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzM0MjM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/DocumentSubsetBitsetCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowNDo0OFrOHwbmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowNDo0OFrOHwbmdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTkxMA==", "bodyText": "The BitSet#or implementations seem to have some optimizations, maybe we should do set.or(it) and then compare set.cardinality() with maxDoc.", "url": "https://github.com/elastic/elasticsearch/pull/64673#discussion_r520545910", "createdAt": "2020-11-10T13:04:48Z", "author": {"login": "jpountz"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/DocumentSubsetBitsetCache.java", "diffHunk": "@@ -339,4 +342,30 @@ void verifyInternalConsistency() {\n             }\n         });\n     }\n+\n+    static BitSet bitSetFromDocIterator(DocIdSetIterator iter, int maxDoc) throws IOException {\n+        // TODO: This snippet is copied from Lucene Bitset#of. Should we integrate it to Lucene?\n+        final long cost = iter.cost();\n+        final int threshold = maxDoc >>> 7;\n+        final BitSet set;\n+        if (cost < threshold) {\n+            set = new SparseFixedBitSet(maxDoc);\n+        } else {\n+            set = new FixedBitSet(maxDoc);\n+        }\n+        if (iter.docID() != -1) {\n+            throw new IllegalStateException(\"Must be an unpositioned iterator, got current position = \" + iter.docID());\n+        }\n+        int matches = 0;\n+        for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n+            matches++;\n+            set.set(doc);\n+        }\n+        if (matches == maxDoc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6cb3c1cb478964db34e8b999d4c70d8b350847"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3183, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}