{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MDYxOTE1", "number": 64031, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoxMTowOFrOEwoGqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyMjo1NlrOEx0DtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDI0MTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoxMTowOFrOHmTkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowNjoyMlrOHmt0XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyODU3NQ==", "bodyText": "Having Tuples of Tuples usually is a good sign that we need a new object for this", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r509928575", "createdAt": "2020-10-22T07:11:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -254,7 +254,7 @@ public TokenService(Settings settings, Clock clock, Client client, XPackLicenseS\n      * {@link #VERSION_TOKENS_INDEX_INTRODUCED} and to a specific security tokens index for later versions.\n      */\n     public void createOAuth2Tokens(Authentication authentication, Authentication originatingClientAuth, Map<String, Object> metadata,\n-                                   boolean includeRefreshToken, ActionListener<Tuple<String, String>> listener) {\n+                                   boolean includeRefreshToken, ActionListener<Tuple<Tuple<String, String>, Authentication>> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3e3c1f8ad006234713b29c0f27201668f83d2d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1NjAyNQ==", "bodyText": "How about Triple?", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r509956025", "createdAt": "2020-10-22T07:58:57Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -254,7 +254,7 @@ public TokenService(Settings settings, Clock clock, Client client, XPackLicenseS\n      * {@link #VERSION_TOKENS_INDEX_INTRODUCED} and to a specific security tokens index for later versions.\n      */\n     public void createOAuth2Tokens(Authentication authentication, Authentication originatingClientAuth, Map<String, Object> metadata,\n-                                   boolean includeRefreshToken, ActionListener<Tuple<String, String>> listener) {\n+                                   boolean includeRefreshToken, ActionListener<Tuple<Tuple<String, String>, Authentication>> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyODU3NQ=="}, "originalCommit": {"oid": "2c3e3c1f8ad006234713b29c0f27201668f83d2d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2NjE2NA==", "bodyText": "I'd go with something like a\npublic final class CreateTokenResult {\n    private final String accessToken;\n    private final String refreshToken;\n    private final Authentication authentication;\n\n    // ctor, getters etc...\n}", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r509966164", "createdAt": "2020-10-22T08:15:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -254,7 +254,7 @@ public TokenService(Settings settings, Clock clock, Client client, XPackLicenseS\n      * {@link #VERSION_TOKENS_INDEX_INTRODUCED} and to a specific security tokens index for later versions.\n      */\n     public void createOAuth2Tokens(Authentication authentication, Authentication originatingClientAuth, Map<String, Object> metadata,\n-                                   boolean includeRefreshToken, ActionListener<Tuple<String, String>> listener) {\n+                                   boolean includeRefreshToken, ActionListener<Tuple<Tuple<String, String>, Authentication>> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyODU3NQ=="}, "originalCommit": {"oid": "2c3e3c1f8ad006234713b29c0f27201668f83d2d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1ODYyMQ==", "bodyText": "Updated the PR", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r510358621", "createdAt": "2020-10-22T18:06:22Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -254,7 +254,7 @@ public TokenService(Settings settings, Clock clock, Client client, XPackLicenseS\n      * {@link #VERSION_TOKENS_INDEX_INTRODUCED} and to a specific security tokens index for later versions.\n      */\n     public void createOAuth2Tokens(Authentication authentication, Authentication originatingClientAuth, Map<String, Object> metadata,\n-                                   boolean includeRefreshToken, ActionListener<Tuple<String, String>> listener) {\n+                                   boolean includeRefreshToken, ActionListener<Tuple<Tuple<String, String>, Authentication>> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyODU3NQ=="}, "originalCommit": {"oid": "2c3e3c1f8ad006234713b29c0f27201668f83d2d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjEyNTQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjowMjo0OVrOHoBxaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozODo0N1rOHoVlEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNDEyMw==", "bodyText": "This class can be static since it does not need need access any instance variables.", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511734123", "createdAt": "2020-10-26T06:02:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -1910,6 +1919,30 @@ boolean isExpirationInProgress() {\n         return expiredTokenRemover.isExpirationInProgress();\n     }\n \n+    public final class CreateTokenResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1ODY0MA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512058640", "createdAt": "2020-10-26T15:38:47Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -1910,6 +1919,30 @@ boolean isExpirationInProgress() {\n         return expiredTokenRemover.isExpirationInProgress();\n     }\n \n+    public final class CreateTokenResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNDEyMw=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjE3MTEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjoyODoyM1rOHoCLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNzoxMFrOHoVgEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA==", "bodyText": "There are 3 authentication objects here:\n\nThe originating authentication\nThe authentication for which the token is created\nThe token's own authentication\n\nWe had brief discussion during the team meeting and agreed that above item 2 should be returned. However, we are returning item 3 here. The tokenResult.getAuthentication() is the authentication object of the newly created token, while No.2 is technically the old access token's authentication object.\nI don't think it could cause any practical problem, in fact, No. 2 and 3 should be identical here. But it is strictly speaking an inconsistency. I am raising it here in case it's worth any discussion.", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511740694", "createdAt": "2020-10-26T06:28:23Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTU1MA==", "bodyText": "The authentication type would be different, right? I also think we should pass authentication and not tokenAuth in the CreateTokenResult object", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511815550", "createdAt": "2020-10-26T09:18:57Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NzAzOA==", "bodyText": "I may have been unclear in my previous comment. Please let me clarify:\nFor other places, authencation 2 and 3 are indeed different, but not here. Also this is the only place where authentication 3 (CreateTokenResult#getAuthentication) is used. For all other places, authentication 2 is used, e.g. TransportDelegatePkiAuthenticationAction, because authentication 2 is available without having to rely on TokenService.\nIn here, neither authentication 2 nor 3 is avilable, because we only have a refresh token. It needs to rely on TokenService to get both of them. CreateTokenResult only returns 3 and that is what gets used here. Luckily, 2 and 3 are no different in this case, so it is not an issue for now. But I wonder whether this equality would hold in future.", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511867038", "createdAt": "2020-10-26T10:43:44Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4OTg3MQ==", "bodyText": "I also think we should pass authentication and not tokenAuth in the CreateTokenResult object\n\nMy comment was out of place too, I was reading createOAuth2Tokens when commenting.\n\nLuckily, 2 and 3 are no different in this case\n\nAs commented above too, The authentication type would be different, right? innerRefresh will call createOAuth2Tokens which will get the Authentication from the token document and replace the authentication type with TOKEN ?", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511889871", "createdAt": "2020-10-26T11:25:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwMTYyMg==", "bodyText": "As commented above too, The authentication type would be different, right? innerRefresh will call createOAuth2Tokens which will get the Authentication from the token document and replace the authentication type with TOKEN ?\n\nThe Authentication object parsed from a token document always has TOKEN as its authentication type. If I read the code correctly:\n\ninnerRefresh parses the token document to get its current Authentication object, which already has a TOKEN auth type.\nThe above Authentication object is passed into createOAuth2Tokens and a new Authentication object is created from it by hardcoding a TOKEN auth type (as you linked above). But this is essentially a no-op because the original value is also TOKEN.\n\nA token document is always created with TokenService#createTokenDocument, which takes a UserToken and in turn its Authentication object. This Authentication object is guaranteed to have TOKEN auth type as you linked above.", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511901622", "createdAt": "2020-10-26T11:48:51Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NzM2Mw==", "bodyText": "Thanks @ywangd for noticing! I do think having authentication for which the token's created is more logical, I missed it here (also, shouldn't make much difference for the perpose of this change). I have changed it use the authentication object representing the user for which the token was created", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512057363", "createdAt": "2020-10-26T15:37:10Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -31,13 +30,12 @@ public TransportRefreshTokenAction(TransportService transportService, ActionFilt\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n-        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n+        tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tokenResult -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n-                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                    authentication));\n-            },\n-                listener::onFailure));\n+            final CreateTokenResponse response =\n+                new CreateTokenResponse(tokenResult.getAccessToken(), tokenService.getExpirationDelay(), scope,\n+                    tokenResult.getRefreshToken(), null, tokenResult.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MDY5NA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY2MjI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxNjo0OVrOHoGqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozODoyN1rOHoVj9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDI3OQ==", "bodyText": "Please also update the javadoc", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511814279", "createdAt": "2020-10-26T09:16:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -311,7 +311,7 @@ public void createOAuth2Tokens(String accessToken, String refreshToken, Authenti\n      */\n     private void createOAuth2Tokens(String accessToken, String refreshToken, Version tokenVersion, SecurityIndexManager tokensIndex,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1ODM1OQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512058359", "createdAt": "2020-10-26T15:38:27Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -311,7 +311,7 @@ public void createOAuth2Tokens(String accessToken, String refreshToken, Authenti\n      */\n     private void createOAuth2Tokens(String accessToken, String refreshToken, Version tokenVersion, SecurityIndexManager tokensIndex,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDI3OQ=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY3MzE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxOTozNVrOHoGw9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozODoxMFrOHoVjDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTkyNg==", "bodyText": "update javadoc", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511815926", "createdAt": "2020-10-26T09:19:35Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -862,7 +862,7 @@ private void indexInvalidation(Collection<String> tokenIds, SecurityIndexManager\n      * @param listener The listener to call upon completion with a {@link Tuple} containing the\n      *                 serialized access token and serialized refresh token as these will be returned to the client\n      */\n-    public void refreshToken(String refreshToken, ActionListener<Tuple<String, String>> listener) {\n+    public void refreshToken(String refreshToken, ActionListener<CreateTokenResult> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1ODEyNQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512058125", "createdAt": "2020-10-26T15:38:10Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -862,7 +862,7 @@ private void indexInvalidation(Collection<String> tokenIds, SecurityIndexManager\n      * @param listener The listener to call upon completion with a {@link Tuple} containing the\n      *                 serialized access token and serialized refresh token as these will be returned to the client\n      */\n-    public void refreshToken(String refreshToken, ActionListener<Tuple<String, String>> listener) {\n+    public void refreshToken(String refreshToken, ActionListener<CreateTokenResult> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTkyNg=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY3NTAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyMDowMlrOHoGyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNzo1OVrOHoVihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjIwOQ==", "bodyText": "update javadoc", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511816209", "createdAt": "2020-10-26T09:20:02Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -1126,11 +1128,13 @@ public void onFailure(Exception e) {\n      * @param refreshTokenStatus The {@link RefreshTokenStatus} containing information about the superseding tokens as retrieved from the\n      *                           index\n      * @param tokensIndex        the manager for the index where the tokens are stored\n-     * @param listener           The listener to call upon completion with a {@link Tuple} containing the\n-     *                           serialized access token and serialized refresh token as these will be returned to the client\n+     * @param authentication     The authentication object representing the user for which the tokens are created\n+     * @param listener           The listener to call upon completion with a {@link Tuple} containing the Tuple of\n+     *                           serialized access token and serialized refresh token and Authentication object as these will be returned\n+     *                           to the client\n      */\n     void decryptAndReturnSupersedingTokens(String refreshToken, RefreshTokenStatus refreshTokenStatus, SecurityIndexManager tokensIndex,\n-                                           ActionListener<Tuple<String, String>> listener) {\n+                                           Authentication authentication, ActionListener<CreateTokenResult> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1Nzk5MA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512057990", "createdAt": "2020-10-26T15:37:59Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java", "diffHunk": "@@ -1126,11 +1128,13 @@ public void onFailure(Exception e) {\n      * @param refreshTokenStatus The {@link RefreshTokenStatus} containing information about the superseding tokens as retrieved from the\n      *                           index\n      * @param tokensIndex        the manager for the index where the tokens are stored\n-     * @param listener           The listener to call upon completion with a {@link Tuple} containing the\n-     *                           serialized access token and serialized refresh token as these will be returned to the client\n+     * @param authentication     The authentication object representing the user for which the tokens are created\n+     * @param listener           The listener to call upon completion with a {@link Tuple} containing the Tuple of\n+     *                           serialized access token and serialized refresh token and Authentication object as these will be returned\n+     *                           to the client\n      */\n     void decryptAndReturnSupersedingTokens(String refreshToken, RefreshTokenStatus refreshTokenStatus, SecurityIndexManager tokensIndex,\n-                                           ActionListener<Tuple<String, String>> listener) {\n+                                           Authentication authentication, ActionListener<CreateTokenResult> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjIwOQ=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY4NTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/saml/TransportSamlInvalidateSessionActionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyMjo1NlrOHoG4ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNzo0N1rOHoVh_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzkxNA==", "bodyText": "nit: I think we can update those methods in here to return a  CreateTokenResult and we could also test that the authentication object is what we expect", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r511817914", "createdAt": "2020-10-26T09:22:56Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/saml/TransportSamlInvalidateSessionActionTests.java", "diffHunk": "@@ -376,9 +376,9 @@ public void testInvalidateCorrectTokensFromLogoutRequest() throws Exception {\n         Authentication authentication = new Authentication(new User(\"bob\"),\n                 new RealmRef(\"native\", NativeRealmSettings.TYPE, \"node01\"), null);\n         final Map<String, Object> metadata = samlRealm.createTokenMetadata(nameId, session);\n-        final PlainActionFuture<Tuple<String, String>> future = new PlainActionFuture<>();\n+        final PlainActionFuture<TokenService.CreateTokenResult> future = new PlainActionFuture<>();\n         tokenService.createOAuth2Tokens(userTokenId, refreshToken, authentication, authentication, metadata, future);\n-        return future.actionGet();\n+        return new Tuple<>(future.actionGet().getAccessToken(), future.actionGet().getRefreshToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1Nzg1Mg==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/64031#discussion_r512057852", "createdAt": "2020-10-26T15:37:47Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/saml/TransportSamlInvalidateSessionActionTests.java", "diffHunk": "@@ -376,9 +376,9 @@ public void testInvalidateCorrectTokensFromLogoutRequest() throws Exception {\n         Authentication authentication = new Authentication(new User(\"bob\"),\n                 new RealmRef(\"native\", NativeRealmSettings.TYPE, \"node01\"), null);\n         final Map<String, Object> metadata = samlRealm.createTokenMetadata(nameId, session);\n-        final PlainActionFuture<Tuple<String, String>> future = new PlainActionFuture<>();\n+        final PlainActionFuture<TokenService.CreateTokenResult> future = new PlainActionFuture<>();\n         tokenService.createOAuth2Tokens(userTokenId, refreshToken, authentication, authentication, metadata, future);\n-        return future.actionGet();\n+        return new Tuple<>(future.actionGet().getAccessToken(), future.actionGet().getRefreshToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzkxNA=="}, "originalCommit": {"oid": "d4f378b6375bfdb6829cd97795580617a18166e9"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4269, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}