{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MzM1OTUx", "number": 64582, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NjowNFrOE81OgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyMjoxNlrOE816mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjIyMDgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/watcher.list_watches.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NjowNFrOH5MMTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1NjowNFrOH5MMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDYzNg==", "bodyText": "need to cc client's team for awareness", "url": "https://github.com/elastic/elasticsearch/pull/64582#discussion_r529730636", "createdAt": "2020-11-24T16:56:04Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/watcher.list_watches.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"watcher.list_watches\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9507b914297f1033370036d9adea5f646937e1ef"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjI5ODU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/watcher/src/internalClusterTest/java/org/elasticsearch/xpack/watcher/test/integration/BasicWatcherTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxNDoxMVrOH5M8zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxNDoxMVrOH5M8zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MzA1Mg==", "bodyText": "Should we also include a search_after here ?  (or in a seperate test)", "url": "https://github.com/elastic/elasticsearch/pull/64582#discussion_r529743052", "createdAt": "2020-11-24T17:14:11Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/watcher/src/internalClusterTest/java/org/elasticsearch/xpack/watcher/test/integration/BasicWatcherTests.java", "diffHunk": "@@ -375,4 +382,79 @@ private void testConditionSearch(WatcherSearchTemplateRequest request) throws Ex\n         timeWarp().trigger(watchName);\n         assertWatchWithMinimumPerformedActionsCount(watchName, 1);\n     }\n+\n+    public void testListWatches() {\n+        int numWatches = 6;\n+        for (int i = 0; i < numWatches; i++) {\n+            PutWatchResponse putWatchResponse = new PutWatchRequestBuilder(client()).setId(\"\" + i)\n+                .setSource(watchBuilder()\n+                    .trigger(schedule(interval(1, IntervalSchedule.Interval.Unit.DAYS)))\n+                    .addAction(\"_logger\", loggingAction(\"log me\"))\n+                    .metadata(Map.of(\"key1\", i, \"key2\", numWatches - i)))\n+                .get();\n+            assertThat(putWatchResponse.isCreated(), is(true));\n+        }\n+        refresh();\n+\n+        ListWatchesAction.Request request =\n+            new ListWatchesAction.Request(0, 2, null, List.of(new FieldSortBuilder(\"metadata.key1\")), null);\n+        ListWatchesAction.Response response = client().execute(ListWatchesAction.INSTANCE, request).actionGet();\n+        assertThat(response.getWatchTotalCount(), equalTo((long) numWatches));\n+        assertThat(response.getWatches().size(), equalTo(2));\n+        assertThat(response.getWatches().get(0).getId(), equalTo(\"0\"));\n+        Map<?, ?> watcherMetadata = (Map<?, ?>) response.getWatches().get(0).getSource().getAsMap().get(\"metadata\");\n+        assertThat(watcherMetadata.get(\"key2\"), equalTo(6));\n+        assertThat(response.getWatches().get(1).getId(), equalTo(\"1\"));\n+        watcherMetadata = (Map<?, ?>) response.getWatches().get(1).getSource().getAsMap().get(\"metadata\");\n+        assertThat(watcherMetadata.get(\"key2\"), equalTo(5));\n+\n+        request = new ListWatchesAction.Request(2, 2, null, List.of(new FieldSortBuilder(\"metadata.key1\")), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9507b914297f1033370036d9adea5f646937e1ef"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjMzMzY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/test/WatcherTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyMjoxNlrOH5NSRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToxOTo0N1rOH5p_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0ODU1MQ==", "bodyText": "What is this change for ?", "url": "https://github.com/elastic/elasticsearch/pull/64582#discussion_r529748551", "createdAt": "2020-11-24T17:22:16Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/test/WatcherTestUtils.java", "diffHunk": "@@ -149,24 +152,25 @@ public static WatchExecutionContext createWatchExecutionContext() throws Excepti\n \n \n     public static Watch createTestWatch(String watchName, Client client, HttpClient httpClient, EmailService emailService,\n-                                        WatcherSearchTemplateService searchTemplateService, Logger logger) throws AddressException {\n+                                        WatcherSearchTemplateService searchTemplateService, Logger logger) {\n+        ActionThrottler actionThrottler = new ActionThrottler(Clock.systemUTC(), null, mock(XPackLicenseState.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9507b914297f1033370036d9adea5f646937e1ef"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxODc1NA==", "bodyText": "So the reason this change is needed, is because the ListWatchesResponseTests creates watch instances for testing xcontent serialization and a couple more components are needed to make a watch xcontent serialization work without NPE's being thrown.", "url": "https://github.com/elastic/elasticsearch/pull/64582#discussion_r530218754", "createdAt": "2020-11-25T09:19:47Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/test/WatcherTestUtils.java", "diffHunk": "@@ -149,24 +152,25 @@ public static WatchExecutionContext createWatchExecutionContext() throws Excepti\n \n \n     public static Watch createTestWatch(String watchName, Client client, HttpClient httpClient, EmailService emailService,\n-                                        WatcherSearchTemplateService searchTemplateService, Logger logger) throws AddressException {\n+                                        WatcherSearchTemplateService searchTemplateService, Logger logger) {\n+        ActionThrottler actionThrottler = new ActionThrottler(Clock.systemUTC(), null, mock(XPackLicenseState.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0ODU1MQ=="}, "originalCommit": {"oid": "9507b914297f1033370036d9adea5f646937e1ef"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4063, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}