{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTMyODQ2", "number": 57227, "title": "Remove Overly Strict Safety Mechnism in Shard Snapshot Logic", "bodyText": "Unfortunately, we cannot have a safety mechanism like this where we throw whenever we find unreadable\ndata in a shard.\nThis breaks in the case of an older ES version (without shard generations enabled) having failed to snapshot\na shard snapshot after writing some data to its path and having finalized it for example.\nAnother example of where we can't support this check is the test I added, if we snapshot an index with a name\nthat already exists in the repository and more shards than the existing index, fail doing that and then retry snapshotting it we will also see unexpected data in the path.\nWe could technically do deeper inspections on the unexpected data but I don't think it's worth it really. In the end if we are\nunable to read the data here it's broken anyway. By moving to a new index- blob in the shard directory I don't see us ever\ncorrupting existing data and since we (by virtue of moving to an empty generation) won't do any incremental work on top of\npotentially corrupt data we also do not risk creating broken snapshots going forward.\n=> Just logging a warning in this very unlikely case is the best we can do I think (this is also what we used to do up until 7.6 anyway)\ncloses #57198", "createdAt": "2020-05-27T15:29:16Z", "url": "https://github.com/elastic/elasticsearch/pull/57227", "merged": true, "mergeCommit": {"oid": "c576e8e899c67519e5797fb48cb220ebf797ec63"}, "closed": true, "closedAt": "2020-05-29T13:51:29Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclax3sgH2gAyNDIzOTMyODQ2OmRjNGJiYjExZTdkYmZjZTNmNTQ0ZTIxMDE4YWE0N2E0Yzc4N2Q4OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmCYqQgFqTQyMDk0NDQ5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc4bbb11e7dbfce3f544e21018aa47a4c787d893", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc4bbb11e7dbfce3f544e21018aa47a4c787d893", "committedDate": "2020-05-27T15:13:17Z", "message": "Remove Overly Strict Safety Mechnism in Shard Snapshot Logic\n\nUnfortunately, we cannot have a safety mechnism like this where we throw whenever we find unreadable\ndata in a shard.\nThis breaks in the case of an older ES version (without shard generations enabled) having failed to snapshot\na shard snapshot after writing some data to its path and having finalized it for example.\nAnother example of where we can't support this check is the test I added, if we snapshot an index with a name\nthat already exists in the repository and more shards than the existing index, fail doing that and then retry snapshotting it\nwe will also see unexpected data in the path.\n\nWe could technically do deeper inspections on the unexpected data but I don't think it's worth it really. In the end if we are\nunable to read the data here it's broken anyway. By moving to a new `index-` blob in the shard directory I don't see us ever\ncorrupting existing data and since we (by virtue of moving to an empty generation) won't do any incremental work on top of\npotentially corrupt data we also do not risk creating broken snapshots going forward.\n=> Just logging a warning in this very unlikely case is the best we can do I think"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MzU2MzQ2", "url": "https://github.com/elastic/elasticsearch/pull/57227#pullrequestreview-419356346", "createdAt": "2020-05-27T15:43:21Z", "commit": {"oid": "dc4bbb11e7dbfce3f544e21018aa47a4c787d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0MzoyMlrOGbRAWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0MzoyMlrOGbRAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0MzM1Mw==", "bodyText": "I thought about whether this is ok or not quite a bit. I think we're not introducing any new risk qualitatively really. If we can't read what is in this directory it's broken, period.\nFor snapshot creation:\nWe can have some freak concurrency issues here if we aren't yet using shard generations and two data nodes try to write to the same path at the same time. But those we resolve either (on S3) by using the 3 minute wait or by not allowing overwrites for index-N on other types of repos. With shard generations being used, this is a non-issue anyway.\nFor deletions we are in the clear also, because everything runs on the master.", "url": "https://github.com/elastic/elasticsearch/pull/57227#discussion_r431243353", "createdAt": "2020-05-27T15:43:22Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "diffHunk": "@@ -2128,8 +2128,7 @@ public BlobStoreIndexShardSnapshot loadShardSnapshot(BlobContainer shardContaine\n             return new Tuple<>(shardSnapshots, latest);\n         } else if (blobs.stream().anyMatch(b -> b.startsWith(SNAPSHOT_PREFIX) || b.startsWith(INDEX_FILE_PREFIX)\n                                                                               || b.startsWith(UPLOADED_DATA_BLOB_PREFIX))) {\n-            throw new IllegalStateException(\n-                \"Could not find a readable index-N file in a non-empty shard snapshot directory [\" + shardContainer.path() + \"]\");\n+            logger.warn(\"Could not find a readable index-N file in a non-empty shard snapshot directory [\" + shardContainer.path() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4bbb11e7dbfce3f544e21018aa47a4c787d893"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTQ0NDk0", "url": "https://github.com/elastic/elasticsearch/pull/57227#pullrequestreview-420944494", "createdAt": "2020-05-29T13:21:57Z", "commit": {"oid": "dc4bbb11e7dbfce3f544e21018aa47a4c787d893"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4226, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}