{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY1MDYx", "number": 55544, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyOTowN1rOD0jZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo0MzowMlrOD0jl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDMyNDY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyOTowN1rOGJi0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowMzoxOFrOGJroyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg3MA==", "bodyText": "Why do we check both existence and actual value here? This is necessary when we want check something like \"security is explicitly enabled, not implicilty enabled\". Is this a similar situation here?", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412660870", "createdAt": "2020-04-22T04:29:07Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwNTMyMA==", "bodyText": "Thanks, that is indeed unnecessary here. fips_mode is implicitly disabled and in any case we shouldn't differentiate between this having a default value or explicitly set to true.", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412805320", "createdAt": "2020-04-22T09:03:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg3MA=="}, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDM1Njc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo0MzowMlrOGJjF2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1NTo0OVrOGJkoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2NTMwNw==", "bodyText": "Why is this check necessary? Is this our own requirement or imposed by JDK?", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412665307", "createdAt": "2020-04-22T04:43:02Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {\n+                return \"PBKDF2\";\n+            } else {\n+                return \"BCRYPT\";\n             }\n-        }\n-    }, Setting.Property.NodeScope);\n+        },\n+        Function.identity(),\n+        v -> {\n+            if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n+                throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n+                    Hasher.getAvailableAlgoStoredHash().toString());\n+            } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n+                try {\n+                    SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5MDUwMw==", "bodyText": "We use PBKDF2WithHMACSHA512 in  \n  \n    \n      elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java\n    \n    \n         Line 511\n      in\n      00b4d3d\n    \n    \n    \n    \n\n        \n          \n           SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\"); \n        \n    \n  \n\n so we would like to be sure that the security provider that is used has this implementation up front ,rather than failing when we actually get to hash the first password. See #31234 (comment) also", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412690503", "createdAt": "2020-04-22T05:55:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {\n+                return \"PBKDF2\";\n+            } else {\n+                return \"BCRYPT\";\n             }\n-        }\n-    }, Setting.Property.NodeScope);\n+        },\n+        Function.identity(),\n+        v -> {\n+            if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n+                throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n+                    Hasher.getAvailableAlgoStoredHash().toString());\n+            } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n+                try {\n+                    SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2NTMwNw=="}, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2777, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}