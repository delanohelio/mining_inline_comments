{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDI3MDI5", "number": 56316, "title": "Support handling LogoutResponse from SAML idP", "bodyText": "SAML idP sends back a LogoutResponse at the end of the logout workflow. It can be sent via either HTTP-Redirect binding or HTTP-POST binding. Currently, the HTTP-Redirect request is simply ignored by Kibana and never reaches ES. It does not cause any obvious issue and the workflow is completed normally from user's perspective. For completeness, we have an open issue #40901 for handling it on the ES side.\nThe HTTP-POST request results in a 404 error because POST request is not accepted by Kibana's logout end-point. This causes a non-trivial issue because it renders an error page in user's browser. In addition, some resources do not seem to be fully cleaned up due to the error, e.g. the username will be pre-filled when trying to login again after the 404 error.\nThis PR tries to solve both of the above issues with a new _security/saml/complete_logout end-point. The function is largely a subset of the API that checks SAML authentication response.\nNOTE: This PR is for elasticsearch only. To have complete end-to-end support for SAML logout response, changes need to be made for Kibana to handle (forward) the response message to elasticsearch.\nRelated to: #40901\nResolves: #43264", "createdAt": "2020-05-07T02:34:38Z", "url": "https://github.com/elastic/elasticsearch/pull/56316", "merged": true, "mergeCommit": {"oid": "e9661558e748582c26e7581e085901fdc82406c2"}, "closed": true, "closedAt": "2020-06-29T00:28:12Z", "author": {"login": "ywangd"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce0WZMAFqTQwNzExOTc2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcv1KI9AH2gAyNDE0NDI3MDI5OmY2YjRmY2I4NTBjZjBjOWZjOWUzY2M5ZjM2ZTAyMzk2YjRhMjYyMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTE5NzY1", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-407119765", "createdAt": "2020-05-07T03:03:20Z", "commit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMzoyMFrOGRstJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMzoyMFrOGRstJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ==", "bodyText": "This requires Kibana to know the _ID of the logout request crafted by ES and sent to the idP. The current SamlLogoutResponse does not give this information in a way that Kibana can easily access.\nWe could either change SamlLogoutResponse to include a separate field of _ID similar to what we do with SamlPrepareAuthenticationResponse. Or we could simply skip this check?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421211429", "createdAt": "2020-05-07T03:03:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTc5Njg5", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-407179689", "createdAt": "2020-05-07T06:26:01Z", "commit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjoyNjowMVrOGRwE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjoyNjowMVrOGRwE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA==", "bodyText": "The response MUST be signed (4.4.4.2)  so we should fail if it is not signed.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421266670", "createdAt": "2020-05-07T06:26:01Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTQyNTQ3", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-407942547", "createdAt": "2020-05-08T01:36:59Z", "commit": {"oid": "7ba8fd68acae93fb6132ca05b21bcf8171a3afa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNjo1OVrOGSV-5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNjo1OVrOGSV-5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzcxOA==", "bodyText": "I don't think we need handle BWC here since this response never goes across nodes. The only consumer is Kibana (or other external system that integrates with ES).", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421887718", "createdAt": "2020-05-08T01:36:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlLogoutResponse.java", "diffHunk": "@@ -16,24 +16,32 @@\n  */\n public final class SamlLogoutResponse extends ActionResponse {\n \n-    private String redirectUrl;\n+    private final String requestId;\n+    private final String redirectUrl;\n \n     public SamlLogoutResponse(StreamInput in) throws IOException {\n         super(in);\n+        requestId = in.readString();\n         redirectUrl = in.readString();\n     }\n \n-    public SamlLogoutResponse(String redirectUrl) {\n+    public SamlLogoutResponse(String requestId, String redirectUrl) {\n+        this.requestId = requestId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba8fd68acae93fb6132ca05b21bcf8171a3afa6"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDg5MjM3", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-412489237", "createdAt": "2020-05-15T09:27:08Z", "commit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNzowOVrOGV9ZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoxMDoxOFrOGV-ykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTIxNg==", "bodyText": "I think that complete_logout is a better name than verify_logout but I won't insist :)", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425679216", "createdAt": "2020-05-15T09:27:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutAction.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+/**\n+ * ActionType for verifying SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutAction extends ActionType<SamlVerifyLogoutResponse> {\n+\n+    public static final String NAME = \"cluster:admin/xpack/security/saml/verify_logout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTc3Nw==", "bodyText": "I would prefer if we have different fields for this depending on the binding", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425679777", "createdAt": "2020-05-15T09:28:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MTQ3Mg==", "bodyText": "I don't think we need the assertionConsumerServiceURL in this case. IIUC ( @azasypkin can keep me honest ) , kibana's current versions can be made to always send the realm name in the request which is enough for us to get the realm by name", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425681472", "createdAt": "2020-05-15T09:31:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+    @Nullable\n+    private String assertionConsumerServiceURL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NjU5MQ==", "bodyText": "Leave this in a method as it was and just name it differently ? WDYT ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425686591", "createdAt": "2020-05-15T09:40:35Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java", "diffHunk": "@@ -333,7 +277,13 @@ private void checkSubject(Subject assertionSubject, XMLObject parent, Collection\n         }\n         checkRecipient(confirmationData.get(0));\n         checkLifetimeRestrictions(confirmationData.get(0));\n-        checkInResponseTo(confirmationData.get(0), allowedSamlRequestIds);\n+        SubjectConfirmationData subjectConfirmationData = confirmationData.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MzM0MQ==", "bodyText": "I think I don't see the value in splitting up SamlObjectHandler and SamlResponseHandler. Can you elaborate ? It also doesn't help that all the objects that are responses for SAML , are passed in a request to elasticsearch and that makes naming hard but I'm equally happy with SamlResponseHandler and SamlRequestHandler", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425693341", "createdAt": "2020-05-15T09:53:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.StatusDetail;\n+import org.opensaml.saml.saml2.core.StatusMessage;\n+import org.opensaml.saml.saml2.core.StatusResponseType;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlResponseHandler extends SamlObjectHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NTkzNA==", "bodyText": "I assume these are carried over as is from SamlAuthenticatorTests so I'm fine with these, let me know if you've made any significant changes somehow", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425695934", "createdAt": "2020-05-15T09:58:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandlerTests.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.encryption.XMLCipher;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.xpack.core.watcher.watch.ClockMock;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.opensaml.security.credential.Credential;\n+import org.opensaml.security.x509.X509Credential;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.security.KeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.dom.DOMSignContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\n+import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static java.util.Collections.singletonList;\n+import static javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE;\n+import static javax.xml.crypto.dsig.Transform.ENVELOPED;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML20_NS;\n+\n+public class SamlResponseHandlerTests extends SamlTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMDgzMQ==", "bodyText": "related to the discussion above, this is a case where we don't want to fail to parse the SAML message because we will try to parse it as if it came from the HTTP POST binding. We want to fail this because it is an unsigned request that came via the HTTP-Redirect binding and we disallow that.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425700831", "createdAt": "2020-05-15T10:07:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillUseHttpPostBindingWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"Failed to parse SAML message\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTE0Nw==", "bodyText": "I would very much prefer that we are explicit here and not try to deduce and imply checks. I think we need two parameters for the REST layer, one for the body of a response that comes via the HTTP-POST binding and a different one for the query string of a response that comes via the HTTP-Redirect binding. Then we can be very explicit here with regards to what we expect to have and what we need to process/check/validate", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425701147", "createdAt": "2020-05-15T10:08:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(String content, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(content, \"SAMLResponse\");\n+        final Element root;\n+        if (parsed.hasSignature) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMjAzNA==", "bodyText": "Again, assuming that you didn't change much when you copied this over ( apart from introducing samlMessageParameterName ) , please do flag if otherwise ! (  diffs are not that helpful in spotting this kind of things :) )", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425702034", "createdAt": "2020-05-15T10:10:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlObjectHandler.java", "diffHunk": "@@ -322,4 +331,74 @@ protected void validateNotOnOrAfter(DateTime notOnOrAfter) {\n             throw samlException(\"Rejecting SAML assertion because [{}] is on/after [{}]\", pastNow, notOnOrAfter);\n         }\n     }\n+\n+    protected ParsedQueryString parseQueryStringAndValidateSignature(String queryString, String samlMessageParameterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTc5NzYz", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-417979763", "createdAt": "2020-05-26T05:30:42Z", "commit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozMDo0MlrOGaPHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNjoxOFrOGaQLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzg4OQ==", "bodyText": "It's not the URL that is signed, but rather the - encoded - SAML response.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430163889", "createdAt": "2020-05-26T05:30:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzk4MA==", "bodyText": "We can log these at DEBUG I think", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430163980", "createdAt": "2020-05-26T05:31:03Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NDgzMw==", "bodyText": "It reads strange that we \"parse the query string\" when payload might very well be the body of HTTP POST", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430164833", "createdAt": "2020-05-26T05:34:14Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NTgzMg==", "bodyText": "this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n          \n          \n            \n                        root = parseSamlMessage(decodeBase64(payload));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430165832", "createdAt": "2020-05-26T05:37:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NzU4Mw==", "bodyText": "Given that I had 4 comments in 10 lines ( Woke up picky today, apologies \ud83d\ude4f )  think we could do this is a simpler way, something like\nfinal Element root;\nif (httpRedirect) {\n    logger.debug(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n    final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n    if (parsed.hasSignature == false){\n        throw samlException(\"SAML LogoutResponse messages must be signed\");    \n    }\n    root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n} else {\n    logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n    root = parseSamlMessage(decodeBase64(payload));\n}", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430167583", "createdAt": "2020-05-26T05:44:32Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2ODE3MQ==", "bodyText": "buildXmlObject doesn't return null so I think we can remove this \"check and throw\"", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430168171", "createdAt": "2020-05-26T05:46:43Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2OTg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {\n          \n          \n            \n                        // For HTTP-Redirect, we validate the signature while parsing the object from the query string\n          \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430169852", "createdAt": "2020-05-26T05:52:26Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (httpRedirect == false && logoutResponse.getSignature() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3MjQxNQ==", "bodyText": "Apologies for the merge conflicts that the SamlAuthenticatorTests refactoring causes here", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430172415", "createdAt": "2020-05-26T06:00:24Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticatorTests.java", "diffHunk": "@@ -108,97 +85,20 @@\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_ATTRIB_NAME;\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_BEARER;\n \n-public class SamlAuthenticatorTests extends SamlTestCase {\n+public class SamlAuthenticatorTests extends SamlResponseHandlerTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjkwNQ==", "bodyText": "Reading through the tests below, it looks like there is an implicit assumption that even when HTTP POST is used, we will receive SAMLResponse=<Base64Endoded saml logout response here> from Kibana and thus we could \"parse\" this as if it was a query string. I think we should be explicit and\na) Declare that we expect kibana(or any caller) to pass the value of the SAMLResponse POST parameter\nb) Base64 decode this on the RestSamlLogoutAction\nc) Operate on the raw bytes after that\nsimilar to what we do for the SamlAuthenticateAction's parameter named content", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430176905", "createdAt": "2020-05-26T06:14:13Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NDgzMw=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODAwMA==", "bodyText": "use Strings.hasText() instead of null check ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430178000", "createdAt": "2020-05-26T06:17:22Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    private String queryString;\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (queryString == null && content == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testHandlerWillFailWhenUrlNotSigned() {\n          \n          \n            \n                public void testHandlerWillFailWhenLogoutResponseNotSigned() {", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430181044", "createdAt": "2020-05-26T06:25:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlNotSigned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTMyMQ==", "bodyText": "I don't think we need this", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430181321", "createdAt": "2020-05-26T06:26:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"URL is not signed, but is required for HTTP-Redirect binding\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlIsSignedButBindingIsHttpPost() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7187ca208b4a7815d8be38c6214cecb610e3376", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7187ca208b4a7815d8be38c6214cecb610e3376", "committedDate": "2020-05-27T06:53:36Z", "message": "Initial working version. No tests yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3180c86397690d742e4fff48b9bc98b0e70f8229", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/3180c86397690d742e4fff48b9bc98b0e70f8229", "committedDate": "2020-05-27T12:05:08Z", "message": "Refactor and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6d4d5a4e5068870a86e7e8e37cccb1548c76da0", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6d4d5a4e5068870a86e7e8e37cccb1548c76da0", "committedDate": "2020-05-27T12:05:09Z", "message": "fix copy/paste text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef50a1329c35e0197f0b0e41601c64c3ec6af28", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ef50a1329c35e0197f0b0e41601c64c3ec6af28", "committedDate": "2020-05-27T12:05:09Z", "message": "Add requestId to logout response for kibana to pass it back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5633e57b5839e0065a4c1a29902f31b47a344d3", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c5633e57b5839e0065a4c1a29902f31b47a344d3", "committedDate": "2020-05-27T12:05:09Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ea969b20ffe19c4c73e8ed51d3ec2cbb9209c4", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c1ea969b20ffe19c4c73e8ed51d3ec2cbb9209c4", "committedDate": "2020-05-27T12:05:09Z", "message": "Support LogoutResponse with both HTTP-Redirect and HTTP-Post bindings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcaf87da675548fef2357052f0b9baf8e413408a", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/bcaf87da675548fef2357052f0b9baf8e413408a", "committedDate": "2020-05-27T12:05:09Z", "message": "Rename and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "824b5608185c23acbae62374e0d060e6df500696", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/824b5608185c23acbae62374e0d060e6df500696", "committedDate": "2020-05-27T12:05:09Z", "message": "Forbidden API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41494c4192829e70803de7c21c376d5ceb0bf958", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/41494c4192829e70803de7c21c376d5ceb0bf958", "committedDate": "2020-05-27T12:05:10Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e4089adb6dac6851b8e518b6b480efebf91d52", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0e4089adb6dac6851b8e518b6b480efebf91d52", "committedDate": "2020-05-27T12:05:10Z", "message": "Address feedback for removing auto-detect of redirect and post"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c27d6a32b3657ce3011ca642b5ddf59c5a1089", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/48c27d6a32b3657ce3011ca642b5ddf59c5a1089", "committedDate": "2020-05-27T12:05:10Z", "message": "Fix test convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17903a363f26f4748f2e4b87bbc0b586f51665dc", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/17903a363f26f4748f2e4b87bbc0b586f51665dc", "committedDate": "2020-05-27T12:05:10Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e297fa5eaa84fb16904d6045e1a0b32309d7e4d3", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e297fa5eaa84fb16904d6045e1a0b32309d7e4d3", "committedDate": "2020-05-27T12:05:10Z", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java\n\nCo-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c22674ddbbba0e678e305556c9a9c3c858be463d", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c22674ddbbba0e678e305556c9a9c3c858be463d", "committedDate": "2020-05-27T13:33:36Z", "message": "Tidy up a bit due to latest change in master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ff28ad076ade806d5285e976c6ea51bd65dd517", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/0ff28ad076ade806d5285e976c6ea51bd65dd517", "committedDate": "2020-05-27T05:49:24Z", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java\n\nCo-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>"}, "afterCommit": {"oid": "c22674ddbbba0e678e305556c9a9c3c858be463d", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c22674ddbbba0e678e305556c9a9c3c858be463d", "committedDate": "2020-05-27T13:33:36Z", "message": "Tidy up a bit due to latest change in master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56bbccb3693a728dfe204f30e527e1fbec959f7", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/a56bbccb3693a728dfe204f30e527e1fbec959f7", "committedDate": "2020-05-27T13:50:11Z", "message": "Fix randomize of signer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ed7dfc7a45bb2a06c9ed1a0eae5382864d5ef8", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2ed7dfc7a45bb2a06c9ed1a0eae5382864d5ef8", "committedDate": "2020-05-28T00:54:52Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/04abf77695250be9a29b4e1e5c57b17a77802ddc", "committedDate": "2020-05-28T01:26:06Z", "message": "Merge remote-tracking branch 'origin/master' into es-43264-saml-post-logout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjIyMTcy", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-420222172", "createdAt": "2020-05-28T15:20:24Z", "commit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMDoyNVrOGb6U9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozODo1OVrOGb7KOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDM3Mw==", "bodyText": "could we also validate that the realm is not an empty string here so that we fail explicitly here instead of in the Transport action's doExecute ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431920373", "createdAt": "2020-05-28T15:20:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyODQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n          \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm with name [{}]\", request.getRealm()));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431928485", "createdAt": "2020-05-28T15:31:22Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlLogoutResponseHandler;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for completing SAML LogoutResponse\n+ */\n+public final class TransportSamlCompleteLogoutAction extends HandledTransportAction<SamlCompleteLogoutRequest, SamlCompleteLogoutResponse> {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlCompleteLogoutAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlCompleteLogoutAction.NAME, transportService, actionFilters, SamlCompleteLogoutRequest::new);\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlCompleteLogoutRequest request, ActionListener<SamlCompleteLogoutResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealm(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMDE2Ng==", "bodyText": "Just a suggestion given that we search with a realm name only here. Traditionally we would search either with an ACS or a realm name that's why we had a more generic message here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n          \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] with name [{}]\", realms, request.getRealm()));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431930166", "createdAt": "2020-05-28T15:33:37Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlLogoutResponseHandler;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for completing SAML LogoutResponse\n+ */\n+public final class TransportSamlCompleteLogoutAction extends HandledTransportAction<SamlCompleteLogoutRequest, SamlCompleteLogoutResponse> {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlCompleteLogoutAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlCompleteLogoutAction.NAME, transportService, actionFilters, SamlCompleteLogoutRequest::new);\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlCompleteLogoutRequest request, ActionListener<SamlCompleteLogoutResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealm(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNDAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {\n          \n          \n            \n                            throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n          \n          \n            \n                        } else if (httpRedirect == false) {\n          \n          \n            \n                            validateSignature(logoutResponse.getSignature());\n          \n          \n            \n                        }\n          \n          \n            \n                        if (httpRedirect == false) {\n          \n          \n            \n                            if (logoutResponse.getSignature() == null) {\n          \n          \n            \n                                throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n          \n          \n            \n                            }    \n          \n          \n            \n                            validateSignature(logoutResponse.getSignature());\n          \n          \n            \n                        }", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431934009", "createdAt": "2020-05-28T15:38:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.debug(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+            if (parsed.hasSignature == false){\n+                throw samlException(\"Query string is not signed, but is required for HTTP-Redirect binding\");\n+            }\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.debug(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(payload));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            // For HTTP-Redirect, we validate the signature while parsing the object from the query string\n+            if (httpRedirect == false && logoutResponse.getSignature() == null) {\n+                throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n+            } else if (httpRedirect == false) {\n+                validateSignature(logoutResponse.getSignature());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b85c075176c0ac6c0709703cc857e034ec5d5dd", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b85c075176c0ac6c0709703cc857e034ec5d5dd", "committedDate": "2020-05-29T05:24:19Z", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java\n\nCo-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b890a255bbfb3c541788fa8cfbbc72353a6226", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/a9b890a255bbfb3c541788fa8cfbbc72353a6226", "committedDate": "2020-05-29T05:28:31Z", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java\n\nCo-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99704d23893c98394ab19f0fe768bb2036be7431", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/99704d23893c98394ab19f0fe768bb2036be7431", "committedDate": "2020-05-29T05:32:26Z", "message": "Update x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java\n\nCo-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88862ab16b9fc0a928192706ef44f2e39202f97a", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/88862ab16b9fc0a928192706ef44f2e39202f97a", "committedDate": "2020-05-29T05:33:25Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "512873794161a1de417420cf43e68b3b001b9d66", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/512873794161a1de417420cf43e68b3b001b9d66", "committedDate": "2020-05-29T05:35:32Z", "message": "Add one more test for non-null realm field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a0afc777b4ddf22a70a1d00c4500b3989d6f31", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/19a0afc777b4ddf22a70a1d00c4500b3989d6f31", "committedDate": "2020-05-29T05:53:13Z", "message": "Merge remote-tracking branch 'origin/master' into es-43264-saml-post-logout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c244cb6ec407a0151b97b7eece08d7a74c0e0e6a", "committedDate": "2020-05-29T14:47:06Z", "message": "Merge remote-tracking branch 'origin/master' into es-43264-saml-post-logout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTUzODg1", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-421553885", "createdAt": "2020-06-01T01:37:36Z", "commit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTozNzozN1rOGc8zuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTo1MDo1MVrOGc874w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwOTU5NQ==", "bodyText": "What is our expectation for how a WebApp should behave if it gets a LogoutResponse over a HTTP-POST binding that also has URL parameters?\nI think the rule for Kibana is:\n\nIf the http method is GET send the queryString to Elasticsearch, and ignore (or reject) any body (which is very unlikely to exist)\nif the http method is POST ignore (or reject) the query parameters, and send the body to Elasticsearch.\n\nIs that our intent?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433009595", "createdAt": "2020-06-01T01:37:37Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.hasText(realm) == false) {\n+            validationException = addValidationError(\"realm may not be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) == false && Strings.hasText(content) == false) {\n+            validationException = addValidationError(\"queryString and content may not both be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) && Strings.hasText(content)) {\n+            validationException = addValidationError(\"queryString and content may not both present\", validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMTY4Mw==", "bodyText": "Why do we have another class here, rather than just using SamlCompleteLogoutRequest ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433011683", "createdAt": "2020-06-01T01:50:51Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequestBuilder;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+/**\n+ * This Rest endpoint handles SAML LogoutResponse sent from idP with either HTTP-Redirect or HTTP-Post binding.\n+ * For HTTP-Redirect binding, it expects {@link Input#queryString} be set to the query string of the redirect URI.\n+ * For HTTP-Post binding, it expects {@link Input#content} be set to the value of SAMLResponse form parameter, i.e.\n+ * caller of this API must do the work to extract the SAMLResponse value from body of the HTTP-Post request. The\n+ * value must also be URL decoded if necessary.\n+ */\n+public class RestSamlCompleteLogoutAction extends SamlBaseRestHandler{\n+\n+    private static final Logger logger = LogManager.getLogger(RestSamlCompleteLogoutAction.class);\n+\n+    static class Input {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75abd7b2686bd8869f4529ed248cf735c7ba6a74", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/75abd7b2686bd8869f4529ed248cf735c7ba6a74", "committedDate": "2020-06-01T12:59:25Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82275dea7bd139ac2ffbcdea75686f0aaba0a92", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/b82275dea7bd139ac2ffbcdea75686f0aaba0a92", "committedDate": "2020-06-01T13:00:35Z", "message": "Merge remote-tracking branch 'origin/master' into es-43264-saml-post-logout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQ2MTAy", "url": "https://github.com/elastic/elasticsearch/pull/56316#pullrequestreview-436346102", "createdAt": "2020-06-24T06:02:05Z", "commit": {"oid": "b82275dea7bd139ac2ffbcdea75686f0aaba0a92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b4fcb850cf0c9fc9e3cc9f36e02396b4a26233", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6b4fcb850cf0c9fc9e3cc9f36e02396b4a26233", "committedDate": "2020-06-28T23:36:34Z", "message": "Merge remote-tracking branch 'origin/master' into es-43264-saml-post-logout"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 189, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}