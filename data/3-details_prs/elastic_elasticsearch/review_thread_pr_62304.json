{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTM4Nzkw", "number": 62304, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMToyM1rOEk68Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNjo1NVrOEk7Qrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTQ5ODU1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMToyM1rOHUIUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNzowMVrOHULTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2OTg1Nw==", "bodyText": "The usual pattern is to let the server decide what the default is when an option is not set. includeCurve should be a Boolean and not written if null.", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490869857", "createdAt": "2020-09-18T11:01:23Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ */\n+public class AucRocMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"auc_roc\";\n+\n+    public static final ParseField INCLUDE_CURVE = new ParseField(\"include_curve\");\n+    public static final ParseField CLASS_NAME = new ParseField(\"class_name\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AucRocMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new AucRocMetric((Boolean) args[0], (String) args[1]));\n+\n+    static {\n+        PARSER.declareBoolean(optionalConstructorArg(), INCLUDE_CURVE);\n+        PARSER.declareString(optionalConstructorArg(), CLASS_NAME);\n+    }\n+\n+    public static AucRocMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public static AucRocMetric withCurveForClass(String className) {\n+        return new AucRocMetric(true, className);\n+    }\n+\n+    public static AucRocMetric forClass(String className) {\n+        return new AucRocMetric(false, className);\n+    }\n+\n+    private final boolean includeCurve;\n+    private final String className;\n+\n+    public AucRocMetric(Boolean includeCurve, String className) {\n+        this.includeCurve = includeCurve == null ? false : includeCurve;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODg0MA==", "bodyText": "Done for both classification.AucRocMetric and outlierdetection.AucRocMetric.", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490918840", "createdAt": "2020-09-18T12:37:01Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ */\n+public class AucRocMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"auc_roc\";\n+\n+    public static final ParseField INCLUDE_CURVE = new ParseField(\"include_curve\");\n+    public static final ParseField CLASS_NAME = new ParseField(\"class_name\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AucRocMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new AucRocMetric((Boolean) args[0], (String) args[1]));\n+\n+    static {\n+        PARSER.declareBoolean(optionalConstructorArg(), INCLUDE_CURVE);\n+        PARSER.declareString(optionalConstructorArg(), CLASS_NAME);\n+    }\n+\n+    public static AucRocMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public static AucRocMetric withCurveForClass(String className) {\n+        return new AucRocMetric(true, className);\n+    }\n+\n+    public static AucRocMetric forClass(String className) {\n+        return new AucRocMetric(false, className);\n+    }\n+\n+    private final boolean includeCurve;\n+    private final String className;\n+\n+    public AucRocMetric(Boolean includeCurve, String className) {\n+        this.includeCurve = includeCurve == null ? false : includeCurve;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2OTg1Nw=="}, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUwNjY5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMzozOFrOHUIZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0MTowM1rOHUNoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MTA1OQ==", "bodyText": "What does the request mean when className == null? Does that return the results for all classes?", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490871059", "createdAt": "2020-09-18T11:03:38Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ */\n+public class AucRocMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"auc_roc\";\n+\n+    public static final ParseField INCLUDE_CURVE = new ParseField(\"include_curve\");\n+    public static final ParseField CLASS_NAME = new ParseField(\"class_name\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AucRocMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new AucRocMetric((Boolean) args[0], (String) args[1]));\n+\n+    static {\n+        PARSER.declareBoolean(optionalConstructorArg(), INCLUDE_CURVE);\n+        PARSER.declareString(optionalConstructorArg(), CLASS_NAME);\n+    }\n+\n+    public static AucRocMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public static AucRocMetric withCurveForClass(String className) {\n+        return new AucRocMetric(true, className);\n+    }\n+\n+    public static AucRocMetric forClass(String className) {\n+        return new AucRocMetric(false, className);\n+    }\n+\n+    private final boolean includeCurve;\n+    private final String className;\n+\n+    public AucRocMetric(Boolean includeCurve, String className) {\n+        this.includeCurve = includeCurve == null ? false : includeCurve;\n+        this.className = className;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder\n+            .startObject()\n+            .field(INCLUDE_CURVE.getPreferredName(), includeCurve);\n+        if (className != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1Njg4OA==", "bodyText": "Actually this field is required for the metric to make sense.\nChanged\u00a0class_name\u00a0to non-optional and changed the order of parameters so that the now-required\u00a0class_name\u00a0comes first (before optional include_curve).", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490956888", "createdAt": "2020-09-18T13:41:03Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/classification/AucRocMetric.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ */\n+public class AucRocMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"auc_roc\";\n+\n+    public static final ParseField INCLUDE_CURVE = new ParseField(\"include_curve\");\n+    public static final ParseField CLASS_NAME = new ParseField(\"class_name\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static final ConstructingObjectParser<AucRocMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new AucRocMetric((Boolean) args[0], (String) args[1]));\n+\n+    static {\n+        PARSER.declareBoolean(optionalConstructorArg(), INCLUDE_CURVE);\n+        PARSER.declareString(optionalConstructorArg(), CLASS_NAME);\n+    }\n+\n+    public static AucRocMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public static AucRocMetric withCurveForClass(String className) {\n+        return new AucRocMetric(true, className);\n+    }\n+\n+    public static AucRocMetric forClass(String className) {\n+        return new AucRocMetric(false, className);\n+    }\n+\n+    private final boolean includeCurve;\n+    private final String className;\n+\n+    public AucRocMetric(Boolean includeCurve, String className) {\n+        this.includeCurve = includeCurve == null ? false : includeCurve;\n+        this.className = className;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder\n+            .startObject()\n+            .field(INCLUDE_CURVE.getPreferredName(), includeCurve);\n+        if (className != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MTA1OQ=="}, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU1MTE4OnYy", "diffSide": "LEFT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/outlierdetection/AucRocMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNjo1NVrOHUIypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjo1Nzo0NFrOHUMBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NzYwNg==", "bodyText": "This was moved to classification.AucRocMetric?\nI think the class is big enough to deserve its own file. Not necessary for this review though", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490877606", "createdAt": "2020-09-18T11:16:55Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/outlierdetection/AucRocMetric.java", "diffHunk": "@@ -87,155 +80,11 @@ public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n         AucRocMetric that = (AucRocMetric) o;\n-        return Objects.equals(includeCurve, that.includeCurve);\n+        return includeCurve == that.includeCurve;\n     }\n \n     @Override\n     public int hashCode() {\n         return Objects.hash(includeCurve);\n     }\n-\n-    public static class Result implements EvaluationMetric.Result {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzMDUwMQ==", "bodyText": "This was moved to classification.AucRocMetric?\n\nYes, it was.\nThe idea is that classification package is the go-to location for all the classification evaluation code.\noutlierdetection evaluation package should have as little code as possible (ideally only a thin facilitation layer above classification evaluation).\n\nI think the class is big enough to deserve its own file. Not necessary for this review though\n\n+1. Let's do it in another PR.", "url": "https://github.com/elastic/elasticsearch/pull/62304#discussion_r490930501", "createdAt": "2020-09-18T12:57:44Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/outlierdetection/AucRocMetric.java", "diffHunk": "@@ -87,155 +80,11 @@ public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n         AucRocMetric that = (AucRocMetric) o;\n-        return Objects.equals(includeCurve, that.includeCurve);\n+        return includeCurve == that.includeCurve;\n     }\n \n     @Override\n     public int hashCode() {\n         return Objects.hash(includeCurve);\n     }\n-\n-    public static class Result implements EvaluationMetric.Result {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NzYwNg=="}, "originalCommit": {"oid": "43f30795327d709124b662fdc56b51ed7361af70"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1543, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}