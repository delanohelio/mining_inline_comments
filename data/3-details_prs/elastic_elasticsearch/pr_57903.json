{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDM4MTU0", "number": 57903, "title": "Give significance lookups their own home", "bodyText": "This moves the code to look up significance heuristics information like\nbackground frequency and superset size out of\nSignificantTermsAggregatorFactory and into its own home so that it is\neasier to pass around. This will:\n\nMake us feel better about ourselves for not passing around the\nfactory, which is really supposed to be a throw away thing.\nAbstract the significance lookup logic so we can reuse it for the\nsignificant_text aggregation.\nMake if very simple to cache the background frequencies which should\nspeed up when the agg is a sub-agg. We had done this for numerics\nbut not string-shaped significant terms.", "createdAt": "2020-06-09T20:12:25Z", "url": "https://github.com/elastic/elasticsearch/pull/57903", "merged": true, "mergeCommit": {"oid": "62e2d85aa28c29cbe235738139cfd6b76f9716b5"}, "closed": true, "closedAt": "2020-06-10T22:44:35Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpq16ygH2gAyNDMyMDM4MTU0OmQ4MWZmNDhhMjJkZDU5OTFhMGM4MmVmYjg0ZjYxOTBjZDc4ZjJmZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp_ujtgH2gAyNDMyMDM4MTU0OmRjMWI4YTgyZjZiMDllOGFmNDY3MmVkN2VlMmQxZGE0Zjk4YzBhNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d81ff48a22dd5991a0c82efb84f6190cd78f2ffb", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/d81ff48a22dd5991a0c82efb84f6190cd78f2ffb", "committedDate": "2020-06-09T20:11:53Z", "message": "Give significance lookups their own home\n\nThis moves the code to look up significance heuristics information like\nbackground frequency and superset size out of\n`SignificantTermsAggregatorFactory` and into its own home so that it is\neasier to pass around. This will:\n1. Make us feel better about ourselves for not passing around the\n   factory, which is really *supposed* to be a throw away thing.\n2. Abstract the significance lookup logic so we can reuse it for the\n   `significant_text` aggregation.\n3. Make if very simple to cache the background frequencies which should\n   speed up when the agg is a sub-agg. We had done this for numerics\n   but not string-shaped significant terms."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785243901e27880ed238390f508299eafb7b4367", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/785243901e27880ed238390f508299eafb7b4367", "committedDate": "2020-06-10T15:59:31Z", "message": "Merge branch 'master' into significance_lookup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzAyNTEy", "url": "https://github.com/elastic/elasticsearch/pull/57903#pullrequestreview-428302512", "createdAt": "2020-06-10T18:01:06Z", "commit": {"oid": "785243901e27880ed238390f508299eafb7b4367"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowMTowNlrOGiAbXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowMTowNlrOGiAbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxMTc3NA==", "bodyText": "Is this javadoc correct?  Looks like it's operating on a long term below.", "url": "https://github.com/elastic/elasticsearch/pull/57903#discussion_r438311774", "createdAt": "2020-06-10T18:01:06Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/SignificanceLookup.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.terms;\n+\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.PostingsEnum;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.index.TermsEnum;\n+import org.apache.lucene.search.BooleanClause.Occur;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.lucene.index.FilterableTermsEnum;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.BytesRefHash;\n+import org.elasticsearch.common.util.LongArray;\n+import org.elasticsearch.common.util.LongHash;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.bucket.terms.heuristic.SignificanceHeuristic;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Looks up values used for {@link SignificanceHeuristic}s.\n+ */\n+class SignificanceLookup {\n+    /**\n+     * Lookup frequencies for {@link BytesRef} terms.\n+     */\n+    interface BackgroundFrequencyForBytes extends Releasable {\n+        long freq(BytesRef term) throws IOException;\n+    }\n+\n+    /**\n+     * Lookup frequencies for {@code long} terms.\n+     */\n+    interface BackgroundFrequencyForLong extends Releasable {\n+        long freq(long term) throws IOException;\n+    }\n+\n+    private final QueryShardContext context;\n+    private final ValuesSourceConfig config;\n+    private final Query backgroundFilter;\n+    private final int supersetNumDocs;\n+    private TermsEnum termsEnum;\n+\n+    SignificanceLookup(QueryShardContext context, ValuesSourceConfig config, QueryBuilder backgroundFilter) throws IOException {\n+        this.context = context;\n+        this.config = config;\n+        this.backgroundFilter = backgroundFilter == null ? null : backgroundFilter.toQuery(context);\n+        /*\n+         * We need to use a superset size that includes deleted docs or we\n+         * could end up blowing up with bad statistics that cause us to blow\n+         * up later on.\n+         */\n+        IndexSearcher searcher = context.searcher();\n+        supersetNumDocs = backgroundFilter == null ? searcher.getIndexReader().maxDoc() : searcher.count(this.backgroundFilter);\n+    }\n+\n+    /**\n+     * Get the number of docs in the superset.\n+     */\n+    long supersetSize() {\n+        return supersetNumDocs;\n+    }\n+\n+    /**\n+     * Get the background frequency of a {@link BytesRef} term.\n+     */\n+    BackgroundFrequencyForBytes bytesLookup(BigArrays bigArrays, boolean collectsFromSingleBucket) {\n+        if (collectsFromSingleBucket) {\n+            return new BackgroundFrequencyForBytes() {\n+                @Override\n+                public long freq(BytesRef term) throws IOException {\n+                    return getBackgroundFrequency(term);\n+                }\n+\n+                @Override\n+                public void close() {}\n+            };\n+        }\n+        return new BackgroundFrequencyForBytes() {\n+            private final BytesRefHash termToPosition = new BytesRefHash(1, bigArrays);\n+            private LongArray positionToFreq = bigArrays.newLongArray(1, false);\n+\n+            @Override\n+            public long freq(BytesRef term) throws IOException {\n+                long position = termToPosition.add(term);\n+                if (position < 0) {\n+                    return positionToFreq.get(-1 - position);\n+                }\n+                long freq = getBackgroundFrequency(term);\n+                positionToFreq = bigArrays.grow(positionToFreq, position + 1);\n+                positionToFreq.set(position, freq);\n+                return freq;\n+            }\n+\n+            @Override\n+            public void close() {\n+                Releasables.close(termToPosition, positionToFreq);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get the background frequency of a {@link BytesRef} term.\n+     */\n+    private long getBackgroundFrequency(BytesRef term) throws IOException {\n+        return getBackgroundFrequency(config.fieldContext().fieldType().termQuery(config.format().format(term).toString(), context));\n+    }\n+\n+    /**\n+     * Get the background frequency of a {@link BytesRef} term.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785243901e27880ed238390f508299eafb7b4367"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc1b8a82f6b09e8af4672ed7ee2d1da4f98c0a65", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc1b8a82f6b09e8af4672ed7ee2d1da4f98c0a65", "committedDate": "2020-06-10T20:31:51Z", "message": "Javadoc!"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 722, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}