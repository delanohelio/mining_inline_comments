{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjEzOTEw", "number": 60640, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1MTowMVrOEVSDMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1NjoxNlrOEVSJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUxMjgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1MTowMVrOG78gpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOToxMDoyNlrOG8BEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMDU2Nw==", "bodyText": "Are there valid cases where searchContext.scrollContext() is null?", "url": "https://github.com/elastic/elasticsearch/pull/60640#discussion_r465510567", "createdAt": "2020-08-05T06:51:01Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -68,6 +77,39 @@ public void validateSearchContext(SearchContext searchContext, TransportRequest\n                 final String action = threadContext.getTransient(ORIGINATING_ACTION_KEY);\n                 ensureAuthenticatedUserIsSame(originalAuth, current, auditTrailService, searchContext.id(), action, request,\n                         AuditUtil.extractRequestId(threadContext), threadContext.getTransient(AUTHORIZATION_INFO_KEY));\n+                // piggyback on context validation to assert the DLS/FLS permissions on the thread context of the scroll search handler\n+                if (null == securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY)) {\n+                    // fill in the DLS and FLS permissions for the scroll search action from the scroll context\n+                    IndicesAccessControl scrollIndicesAccessControl =\n+                            searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+                    assert scrollIndicesAccessControl != null : \"scroll does not contain index access control\";\n+                    securityContext.getThreadContext().putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY,\n+                            scrollIndicesAccessControl);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onPreFetchPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    @Override\n+    public void onPreQueryPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    void ensureIndicesAccessControlForScrollThreadContext(SearchContext searchContext) {\n+        if (licenseState.isSecurityEnabled() && searchContext.scrollContext() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86be3fb37f578648bb1c4f78ac5647a27c513db2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MzY2OQ==", "bodyText": "I don't know the circumstances , but they are not important in this context because I can rely on the fact that validateSearchContext has the same validation.", "url": "https://github.com/elastic/elasticsearch/pull/60640#discussion_r465583669", "createdAt": "2020-08-05T09:07:25Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -68,6 +77,39 @@ public void validateSearchContext(SearchContext searchContext, TransportRequest\n                 final String action = threadContext.getTransient(ORIGINATING_ACTION_KEY);\n                 ensureAuthenticatedUserIsSame(originalAuth, current, auditTrailService, searchContext.id(), action, request,\n                         AuditUtil.extractRequestId(threadContext), threadContext.getTransient(AUTHORIZATION_INFO_KEY));\n+                // piggyback on context validation to assert the DLS/FLS permissions on the thread context of the scroll search handler\n+                if (null == securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY)) {\n+                    // fill in the DLS and FLS permissions for the scroll search action from the scroll context\n+                    IndicesAccessControl scrollIndicesAccessControl =\n+                            searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+                    assert scrollIndicesAccessControl != null : \"scroll does not contain index access control\";\n+                    securityContext.getThreadContext().putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY,\n+                            scrollIndicesAccessControl);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onPreFetchPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    @Override\n+    public void onPreQueryPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    void ensureIndicesAccessControlForScrollThreadContext(SearchContext searchContext) {\n+        if (licenseState.isSecurityEnabled() && searchContext.scrollContext() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMDU2Nw=="}, "originalCommit": {"oid": "86be3fb37f578648bb1c4f78ac5647a27c513db2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NTMzOA==", "bodyText": "I mean, if you're asking informatively, I would expect that regular searches don't have a scroll context. If you're asking as a reviewer, I say I replicated the validation that the handler called just before onPreFetch/QueryPhase has.", "url": "https://github.com/elastic/elasticsearch/pull/60640#discussion_r465585338", "createdAt": "2020-08-05T09:10:26Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -68,6 +77,39 @@ public void validateSearchContext(SearchContext searchContext, TransportRequest\n                 final String action = threadContext.getTransient(ORIGINATING_ACTION_KEY);\n                 ensureAuthenticatedUserIsSame(originalAuth, current, auditTrailService, searchContext.id(), action, request,\n                         AuditUtil.extractRequestId(threadContext), threadContext.getTransient(AUTHORIZATION_INFO_KEY));\n+                // piggyback on context validation to assert the DLS/FLS permissions on the thread context of the scroll search handler\n+                if (null == securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY)) {\n+                    // fill in the DLS and FLS permissions for the scroll search action from the scroll context\n+                    IndicesAccessControl scrollIndicesAccessControl =\n+                            searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+                    assert scrollIndicesAccessControl != null : \"scroll does not contain index access control\";\n+                    securityContext.getThreadContext().putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY,\n+                            scrollIndicesAccessControl);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onPreFetchPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    @Override\n+    public void onPreQueryPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    void ensureIndicesAccessControlForScrollThreadContext(SearchContext searchContext) {\n+        if (licenseState.isSecurityEnabled() && searchContext.scrollContext() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMDU2Nw=="}, "originalCommit": {"oid": "86be3fb37f578648bb1c4f78ac5647a27c513db2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUyNzc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1NjoxNlrOG78poQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOToyOTo1NVrOG8BwqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjg2NQ==", "bodyText": "If what we are after is identity equality, I'd personally prefer to have scrollIndicesAccessControl != threadIndicesAccessControl to help with clarity and perphaps more future proof.", "url": "https://github.com/elastic/elasticsearch/pull/60640#discussion_r465512865", "createdAt": "2020-08-05T06:56:16Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -68,6 +77,39 @@ public void validateSearchContext(SearchContext searchContext, TransportRequest\n                 final String action = threadContext.getTransient(ORIGINATING_ACTION_KEY);\n                 ensureAuthenticatedUserIsSame(originalAuth, current, auditTrailService, searchContext.id(), action, request,\n                         AuditUtil.extractRequestId(threadContext), threadContext.getTransient(AUTHORIZATION_INFO_KEY));\n+                // piggyback on context validation to assert the DLS/FLS permissions on the thread context of the scroll search handler\n+                if (null == securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY)) {\n+                    // fill in the DLS and FLS permissions for the scroll search action from the scroll context\n+                    IndicesAccessControl scrollIndicesAccessControl =\n+                            searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+                    assert scrollIndicesAccessControl != null : \"scroll does not contain index access control\";\n+                    securityContext.getThreadContext().putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY,\n+                            scrollIndicesAccessControl);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onPreFetchPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    @Override\n+    public void onPreQueryPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    void ensureIndicesAccessControlForScrollThreadContext(SearchContext searchContext) {\n+        if (licenseState.isSecurityEnabled() && searchContext.scrollContext() != null) {\n+            IndicesAccessControl scrollIndicesAccessControl =\n+                    searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+            IndicesAccessControl threadIndicesAccessControl =\n+                    securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+            if (false == scrollIndicesAccessControl.equals(threadIndicesAccessControl)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86be3fb37f578648bb1c4f78ac5647a27c513db2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NjU4NA==", "bodyText": "Okay, I suppose identity equality is what this check is all about. I've made the suggested change, thanks.", "url": "https://github.com/elastic/elasticsearch/pull/60640#discussion_r465596584", "createdAt": "2020-08-05T09:29:55Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -68,6 +77,39 @@ public void validateSearchContext(SearchContext searchContext, TransportRequest\n                 final String action = threadContext.getTransient(ORIGINATING_ACTION_KEY);\n                 ensureAuthenticatedUserIsSame(originalAuth, current, auditTrailService, searchContext.id(), action, request,\n                         AuditUtil.extractRequestId(threadContext), threadContext.getTransient(AUTHORIZATION_INFO_KEY));\n+                // piggyback on context validation to assert the DLS/FLS permissions on the thread context of the scroll search handler\n+                if (null == securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY)) {\n+                    // fill in the DLS and FLS permissions for the scroll search action from the scroll context\n+                    IndicesAccessControl scrollIndicesAccessControl =\n+                            searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+                    assert scrollIndicesAccessControl != null : \"scroll does not contain index access control\";\n+                    securityContext.getThreadContext().putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY,\n+                            scrollIndicesAccessControl);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onPreFetchPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    @Override\n+    public void onPreQueryPhase(SearchContext searchContext) {\n+        ensureIndicesAccessControlForScrollThreadContext(searchContext);\n+    }\n+\n+    void ensureIndicesAccessControlForScrollThreadContext(SearchContext searchContext) {\n+        if (licenseState.isSecurityEnabled() && searchContext.scrollContext() != null) {\n+            IndicesAccessControl scrollIndicesAccessControl =\n+                    searchContext.scrollContext().getFromContext(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+            IndicesAccessControl threadIndicesAccessControl =\n+                    securityContext.getThreadContext().getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n+            if (false == scrollIndicesAccessControl.equals(threadIndicesAccessControl)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjg2NQ=="}, "originalCommit": {"oid": "86be3fb37f578648bb1c4f78ac5647a27c513db2"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}