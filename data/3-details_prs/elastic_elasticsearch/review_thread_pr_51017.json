{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTI1NjU3", "number": 51017, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowMDoyMVrODhwByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNzozMFrODhwL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE2NDkxOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowMDoyMVrOFsqQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyNToyNVrOFtAUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NDExNw==", "bodyText": "What's the situation with these //TBD parts? Are you looking for a review as to whether that content is correct, or trying to decide how to represent them in the docs?", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382374117", "createdAt": "2020-02-21T03:00:21Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTU2NA==", "bodyText": "@tvernum Sorry for the lack of clarity. These \"TBD\" pieces are bits of information that only existed in a subset of the places where these definitions were used. For now, I've left them as-is and the TBD is to move that info into the shared definition if indeed they're applicable to all contexts (likely in a subsequent PR).", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382735564", "createdAt": "2020-02-21T18:25:25Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NDExNw=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE3NDEwOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowNjoxNVrOFsqWSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzo1Mzo0N1rOFyB5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng==", "bodyText": "On master, no because we don't support Java 8 any more.\nOn 7.x, I think so. The set of options (and defaults) are different depend in the Java version.\nAlthough, strictly speaking we have different values between Java11 and Java12 as well (since #42155) so we may need to think this through a bit more.\n@jkakavas What do we want to do with FIPS here? BC JSSE doesn't support TLS1.3, so some of these ciphers aren't supported, but I think technically the default is still correct (we don't change the default cipher suite list based on the supported protocols list).", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382375496", "createdAt": "2020-02-21T03:06:15Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyOTE0OQ==", "bodyText": "Yes the default  is still that one so I agree we shouldn't add anything here (We could add something in the FIPS docs though, but this is part of the effort to make FIPS docs better ).\nThe actual list of unusable ones while running with fips mode ( we do print this in the logs on startup too)\nJDK11:\nTLS_AES_256_GCM_SHA384\nTLS_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\nTLS_RSA_WITH_AES_256_GCM_SHA384\nTLS_RSA_WITH_AES_128_GCM_SHA256\n\nJDK13:\nTLS_AES_256_GCM_SHA384\nTLS_AES_128_GCM_SHA256\nTLS_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\nTLS_RSA_WITH_AES_256_GCM_SHA384\nTLS_RSA_WITH_AES_128_GCM_SHA256", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r387229149", "createdAt": "2020-03-03T19:01:54Z", "author": {"login": "jkakavas"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDI3NQ==", "bodyText": "Thanks, @jkakavas I've drafted those changes in #53138", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r387944275", "createdAt": "2020-03-04T21:27:12Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MTkzNg==", "bodyText": "The set of options (and defaults) are different depend in the Java version. Although, strictly speaking we have different values between Java11 and Java12 as well (since #42155) so we may need to think this through a bit more.\n\n@tvernum For now I have (1) deleted the \"ssl-cipher-suites-values-java8\" definition, (2) moved the Java11 info into a \"ssl-cipher-suites-values-java11\" definition, (3) put a Java12 URL in the \"ssl-cipher-suites-values\" definition and added the three ChaCha20 ciphers, (4) updated all occurrences of *-values-java8 and *-values-java11 to use the generic *-values.  I'm just keeping the *-java11 for now in case we backport this PR.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r387971936", "createdAt": "2020-03-04T22:26:00Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAwNDIwNg==", "bodyText": "Thanks @lcawl that sounds right to me.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r388004206", "createdAt": "2020-03-04T23:53:47Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE3ODUzOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowOTowOVrOFsqY0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowOTowOVrOFsqY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjE0NQ==", "bodyText": "It only applies to PEM files, but crypto file formats are a complex topic.\nThe PEM encoding format supports a variety of different key type and formats, so it's possible to have a EC private key in PKCS8 format inside a PEM file.\nWe don't want to go into that detail here, but \"PEM\" is a lot less specific than it sounds.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376145", "createdAt": "2020-02-21T03:09:09Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE4MTQ2OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxMTowMlrOFsqagA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxMTowMlrOFsqagA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n          \n          \n            \n            keystore path ends in \".p12\", \".pfx\", or \".pkcs12\", this setting defaults", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376576", "createdAt": "2020-02-21T03:11:02Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE4MjkxOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxMTo1NlrOFsqbTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNDowOFrOFxSqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Njc4Mg==", "bodyText": "@jkakavas Are you happy with \"If the JVM supports ...\" as covering BC-JSSE FIPS? or should we be explicit?\nMaybe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n          \n          \n            \n            `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM's SSL provider supports TLSv1.3,\n          \n      \n    \n    \n  \n\nIs that simple enough not to confuse general users while being explicit enough for FIPS?", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376782", "createdAt": "2020-02-21T03:11:56Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMDMwNg==", "bodyText": "I agree that we should put something generic here like your suggestion and if we want to refer to FIPS related limitations, we should do it in a different place", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r387230306", "createdAt": "2020-03-03T19:04:08Z", "author": {"login": "jkakavas"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Njc4Mg=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE4NjQ5OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNDozMFrOFsqdXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0MTozNlrOFtCc0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzMxMA==", "bodyText": "No, I don't think there's a reason to have all 3 variants. The main (first) one should be accurate everywhere.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377310", "createdAt": "2020-02-21T03:14:30Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDM4Ng==", "bodyText": "Done, thanks!", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382770386", "createdAt": "2020-02-21T19:41:36Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzMxMA=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE4NzIzOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNTowOFrOFsqd2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTozMTo1M1rOFtCLww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzQzNQ==", "bodyText": "I don't think we need this. If it's used somewhere it's probably out of date.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377435", "createdAt": "2020-02-21T03:15:08Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?\n+tag::ssl-supported-protocols-1[]\n+Supported protocols for TLS/SSL (with versions). Defaults to `TLSv1.3,TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-1[]\n+\n+tag::ssl-supported-protocols-2[]\n+Specifies the supported protocols for TLS/SSL. If the JVM supports TLSv1.3, the \n+defaults is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-2[]\n+\n+tag::ssl-truststore-password[]\n+The password for the truststore.\n+//TBD: You cannot use this setting and `ssl.truststore.secure_password` at the same time.\n+end::ssl-truststore-password[]\n+\n+tag::ssl-truststore-path[]\n+The path for the keystore that contains the certificates to trust. It must be\n+either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.certificate_authorities` at the same time.\n+end::ssl-truststore-path[]\n+\n+tag::ssl-truststore-path-jks[]\n+The path for the Java keystore file that contains the certificates to trust.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NjAxOQ==", "bodyText": "It's used in the ssl.truststore.path in http://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/security-settings.html and the {ssl-prefix-ssl}.truststore.path in http://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/notification-settings.html and http://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/monitoring-settings.html\nI'll switch those occurrence to using the \"ssl-truststore-path\" shared definition instead.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382766019", "createdAt": "2020-02-21T19:31:53Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?\n+tag::ssl-supported-protocols-1[]\n+Supported protocols for TLS/SSL (with versions). Defaults to `TLSv1.3,TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-1[]\n+\n+tag::ssl-supported-protocols-2[]\n+Specifies the supported protocols for TLS/SSL. If the JVM supports TLSv1.3, the \n+defaults is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-2[]\n+\n+tag::ssl-truststore-password[]\n+The password for the truststore.\n+//TBD: You cannot use this setting and `ssl.truststore.secure_password` at the same time.\n+end::ssl-truststore-password[]\n+\n+tag::ssl-truststore-path[]\n+The path for the keystore that contains the certificates to trust. It must be\n+either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.certificate_authorities` at the same time.\n+end::ssl-truststore-path[]\n+\n+tag::ssl-truststore-path-jks[]\n+The path for the Java keystore file that contains the certificates to trust.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzQzNQ=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE5MDgyOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/common-defs.asciidoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNzozMFrOFsqgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTowNzoyMVrOFyLWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Nzk4Nw==", "bodyText": "I think we probably want to merge the pkcs11 and pkcs12 variants. I don't believe there is any context in which the beahviour of this setting is different.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377987", "createdAt": "2020-02-21T03:17:30Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3NjU1OA==", "bodyText": "@tvernum Does that mean we should get rid of this section altogether?: http://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/security-settings.html#security-http-pkcs11-tokens", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382776558", "createdAt": "2020-02-21T19:54:45Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Nzk4Nw=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAwMzc4NQ==", "bodyText": "I'll admit my PKCS#11 knowledge is pretty thin - maybe @jkakavas can chime in here, but ...\nNo, we still want that section, I think (but am not 100% sure) that our PKCS#11 support is consistent across all SSL contexts, so anything we say for xpack.security.http.ssl.keystore.type could technically be said about monitoring ssl, etc.\nHowever, there is a limit of having only 1 PKCS#11 provider per JVM, so setting this up & describing it is pretty complex. Maybe we leave this for now so we can merge it, and then come back to it. I think we'd need to setup a PKCS#11 environment for testing, and I don't have cycles for that right now.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r388003785", "createdAt": "2020-03-04T23:52:35Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Nzk4Nw=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTA4NQ==", "bodyText": "Tim's comment is right. PKCS#11 support is consistent across all SSL contexts, but there can only be 1 PKCS#11 provider/keystore and we don't offer a way to configure which alias in a keystore will be used. So that means that of PKCS#11 is used, then there is a single key/certificate pair that needs to be shared across all SSL contexts ( more details are shared in #33459 ) . I agree we can handle adding a few more details in PKCS11 in another PR", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r388159085", "createdAt": "2020-03-05T09:07:21Z", "author": {"login": "jkakavas"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Nzk4Nw=="}, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}