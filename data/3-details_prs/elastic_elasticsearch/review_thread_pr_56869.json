{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTExOTY3", "number": 56869, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0NDo1NFrOD9W6Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNjoxMlrOD9fN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjY1MDcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0NDo1NFrOGWzeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo1OToxNVrOGWz8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg==", "bodyText": "Considering there's a dedicated Count rule for local relationship, this snippet of code should sit there (ReplaceCountInLocalRelation) not here.", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426565322", "createdAt": "2020-05-18T11:44:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MDY5OQ==", "bodyText": "This doesn't fix only for local relations:\nSELECT COUNT(1), COUNT(DISTINCT 1) FROM test_emp;\n\nshould return 100, 1\nSELECT COUNT(1), COUNT(DISTINCT 1), gender FROM test_emp;\n\nshould return:\n1\n1\n1\n\nfor the distinct column.", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426570699", "createdAt": "2020-05-18T11:55:25Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg=="}, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MjgyOQ==", "bodyText": "psql (12.2)\n\nmatriv=# select count(1), count(distinct 1) from test_emp;\n count | count \n-------+-------\n   100 |     1\n(1 row)\n\nmatriv=# select count(1), count(distinct 1), gender from test_emp group by gender;\n count | count | gender \n-------+-------+--------\n    33 |     1 | F\n    57 |     1 | M\n    10 |     1 | \n(3 rows)", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426572829", "createdAt": "2020-05-18T11:59:15Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTMyMg=="}, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk5OTk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/SqlTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyMjo0MFrOGXAsvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMToxNlrOGXEKdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTg4NQ==", "bodyText": "Or you could have used a randomBoolean()? If true then DESC, if false then ASC.", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426781885", "createdAt": "2020-05-18T17:22:40Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/SqlTestUtils.java", "diffHunk": "@@ -81,4 +86,40 @@ public static Literal literal(Source source, Object value) {\n         }\n         return new Literal(source, value, SqlDataTypes.fromJava(value));\n     }\n+\n+    public static String randomOrderByAndLimit(int noOfSelectArgs, Random rnd) {\n+        StringBuilder sb = new StringBuilder();\n+        if (randomBoolean()) {\n+            sb.append(\" ORDER BY \");\n+\n+            List<Integer> shuffledArgIndices = IntStream.range(1, noOfSelectArgs + 1).boxed().collect(Collectors.toList());\n+            Collections.shuffle(shuffledArgIndices, rnd);\n+            for (int i = 0; i < noOfSelectArgs; i++) {\n+                sb.append(shuffledArgIndices.get(i));\n+                switch (randomInt(2)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODY0Ng==", "bodyText": "I have 3 values so that it skips both -> implied ASC.", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426838646", "createdAt": "2020-05-18T19:11:16Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/SqlTestUtils.java", "diffHunk": "@@ -81,4 +86,40 @@ public static Literal literal(Source source, Object value) {\n         }\n         return new Literal(source, value, SqlDataTypes.fromJava(value));\n     }\n+\n+    public static String randomOrderByAndLimit(int noOfSelectArgs, Random rnd) {\n+        StringBuilder sb = new StringBuilder();\n+        if (randomBoolean()) {\n+            sb.append(\" ORDER BY \");\n+\n+            List<Integer> shuffledArgIndices = IntStream.range(1, noOfSelectArgs + 1).boxed().collect(Collectors.toList());\n+            Collections.shuffle(shuffledArgIndices, rnd);\n+            for (int i = 0; i < noOfSelectArgs; i++) {\n+                sb.append(shuffledArgIndices.get(i));\n+                switch (randomInt(2)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTg4NQ=="}, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAxMjEzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNjoxMlrOGXA0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDo0OVrOGXERjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4Mzg5MQ==", "bodyText": "I think you meant to call the variable iifResult.", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426783891", "createdAt": "2020-05-18T17:26:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {\n+                            iffResult =  new Literal(Source.EMPTY, 0, e.dataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDQ2MA==", "bodyText": "yep, thx!", "url": "https://github.com/elastic/elasticsearch/pull/56869#discussion_r426840460", "createdAt": "2020-05-18T19:14:49Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -790,21 +789,27 @@ private Expression simplify(BinaryComparison bc) {\n         @Override\n         protected LogicalPlan rule(LogicalPlan p) {\n             return p.transformExpressionsDown(e -> {\n-                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum) {\n-                    NumericAggregate a = (NumericAggregate) e;\n+                if (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum ||\n+                    (e instanceof Count && ((Count) e).distinct())) {\n+\n+                    AggregateFunction a = (AggregateFunction) e;\n \n                     if (a.field().foldable()) {\n                         Expression countOne = new Count(a.source(), new Literal(Source.EMPTY, 1, a.dataType()), false);\n                         Equals countEqZero = new Equals(a.source(), countOne, new Literal(Source.EMPTY, 0, a.dataType()));\n                         Expression argument = a.field();\n                         Literal foldedArgument = new Literal(argument.source(), argument.fold(), a.dataType());\n \n+                        Expression iffResult = Literal.NULL;\n                         Expression iifElseResult = foldedArgument;\n                         if (e instanceof Sum) {\n                             iifElseResult = new Mul(a.source(), countOne, foldedArgument);\n+                        } else if (e instanceof Count) {\n+                            iffResult =  new Literal(Source.EMPTY, 0, e.dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4Mzg5MQ=="}, "originalCommit": {"oid": "0af6abc38dc1014e855652a68c4b3d08c553f939"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 316, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}