{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1Mzg0MTIz", "number": 59141, "title": "Add Check for Metadata Existence in BlobStoreRepository", "bodyText": "In order to ensure that we do not write a broken piece of RepositoryData\nbecause the physical repository generation was moved ahead more than one step\nby erroneous concurrent writing to a repository we must check whether or not\nthe current assumed repository generation exists in the repository physically.\nWithout this check we run the risk of writing on top of stale cached repository data.\nThe exists checks are the ones we used to employ until we removed the check in 4b8fd4e so this PR is a partial revert of that change.\nRelates #56911\nWIP for a sec, I'd like CI to run this full first before requesting reviews", "createdAt": "2020-07-07T12:35:59Z", "url": "https://github.com/elastic/elasticsearch/pull/59141", "merged": true, "mergeCommit": {"oid": "5da804b86590a7c53484c320c18da39f87300ce5"}, "closed": true, "closedAt": "2020-07-08T11:16:59Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcylFNCAH2gAyNDQ1Mzg0MTIzOjNjZTJhODkyNDhlZmQzODM3MTY4MWU0NGI2OTMzNzc5MjRhNjNjNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy4GNtAFqTQ0NDYyNDY1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ce2a89248efd38371681e44b693377924a63c60", "committedDate": "2020-07-07T12:34:28Z", "message": "Add Check for Metadata Existence in BlobStoreRepository\n\nIn order to ensure that we do not write a broken piece of `RepositoryData`\nbecause the phyiscal repository generation was moved ahead more than one step\nby erroneous concurrent writing to a repository we must check whether or not\nthe current assumed repository generation exists in the repository physically.\nWithout this check we run the risk of writing on top of stale cached repository data.\n\nRelates #56911"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODU0NzE3", "url": "https://github.com/elastic/elasticsearch/pull/59141#pullrequestreview-443854717", "createdAt": "2020-07-07T12:47:26Z", "commit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NzoyNlrOGt86RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NzoyNlrOGt86RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzA2MA==", "bodyText": "This one we used to do differently in original-brownbear@4b8fd4e#diff-a6d76133025d0cd3d4c12918d42be05bL66 ... but just catching any io exception and returning false seemed broken to me so I didn't bring that back. Especially since this may now trigger marking a repository as corrupted which we don't want to happen on e.g. a network issue with HDFS.", "url": "https://github.com/elastic/elasticsearch/pull/59141#discussion_r450837060", "createdAt": "2020-07-07T12:47:26Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java", "diffHunk": "@@ -63,6 +63,11 @@\n     // TODO: See if we can get precise result reporting.\n     private static final DeleteResult DELETE_RESULT = new DeleteResult(1L, 0L);\n \n+    @Override\n+    public boolean blobExists(String blobName) throws IOException {\n+        return store.execute(fileContext -> fileContext.util().exists(new Path(path, blobName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODc0NDQ1", "url": "https://github.com/elastic/elasticsearch/pull/59141#pullrequestreview-443874445", "createdAt": "2020-07-07T13:11:25Z", "commit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxMToyNVrOGt903w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxMToyNVrOGt903w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjA2Mw==", "bodyText": "This may be a little over the top since I'm not making heavy use of the second cluster now (could achieve the same test by just moving the index-N blob by two generations or mounting a second repo to the same path) but I figured it's safer and easier to maintain to do the real thing here and we can extend this to cover more spots when we tighten the safety measures further in  #57786", "url": "https://github.com/elastic/elasticsearch/pull/59141#discussion_r450852063", "createdAt": "2020-07-07T13:11:25Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MultiClusterRepoAccessIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.snapshots.mockstore.MockRepository;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n+import org.elasticsearch.test.InternalTestCluster;\n+import org.elasticsearch.test.MockHttpTransport;\n+import org.elasticsearch.test.NodeConfigurationSource;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.transport.nio.MockNioTransportPlugin;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+\n+public class MultiClusterRepoAccessIT extends AbstractSnapshotIntegTestCase {\n+\n+    private InternalTestCluster secondCluster;\n+    private Path repoPath;\n+\n+    @Before\n+    public void startSecondCluster() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NTcxMjAw", "url": "https://github.com/elastic/elasticsearch/pull/59141#pullrequestreview-444571200", "createdAt": "2020-07-08T09:29:56Z", "commit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyOTo1NlrOGuf3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoxNTo0MFrOGuhb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwOTY4Mw==", "bodyText": "should we assert that this is never called on an URL repo?", "url": "https://github.com/elastic/elasticsearch/pull/59141#discussion_r451409683", "createdAt": "2020-07-08T09:29:56Z", "author": {"login": "ywelsch"}, "path": "modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java", "diffHunk": "@@ -69,6 +69,14 @@ public URL url() {\n         return this.path;\n     }\n \n+    /**\n+     * This operation is not supported by URLBlobContainer\n+     */\n+    @Override\n+    public boolean blobExists(String blobName) {\n+        throw new UnsupportedOperationException(\"URL repository doesn't support this operation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNDgzNg==", "bodyText": "startDataOnlyNode()", "url": "https://github.com/elastic/elasticsearch/pull/59141#discussion_r451434836", "createdAt": "2020-07-08T10:14:26Z", "author": {"login": "ywelsch"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MultiClusterRepoAccessIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.snapshots.mockstore.MockRepository;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n+import org.elasticsearch.test.InternalTestCluster;\n+import org.elasticsearch.test.MockHttpTransport;\n+import org.elasticsearch.test.NodeConfigurationSource;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.transport.nio.MockNioTransportPlugin;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+\n+public class MultiClusterRepoAccessIT extends AbstractSnapshotIntegTestCase {\n+\n+    private InternalTestCluster secondCluster;\n+    private Path repoPath;\n+\n+    @Before\n+    public void startSecondCluster() throws IOException, InterruptedException {\n+        repoPath = randomRepoPath();\n+        secondCluster = new InternalTestCluster(randomLong(), createTempDir(), true, true, 0,\n+                0, \"second_cluster\", new NodeConfigurationSource() {\n+            @Override\n+            public Settings nodeSettings(int nodeOrdinal) {\n+                return Settings.builder().put(MultiClusterRepoAccessIT.this.nodeSettings(nodeOrdinal))\n+                        .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n+                        .put(Environment.PATH_REPO_SETTING.getKey(), repoPath).build();\n+            }\n+\n+            @Override\n+            public Path nodeConfigPath(int nodeOrdinal) {\n+                return null;\n+            }\n+        }, 0, \"leader\", Arrays.asList(ESIntegTestCase.TestSeedPlugin.class,\n+                MockHttpTransport.TestPlugin.class, MockTransportService.TestPlugin.class,\n+                MockNioTransportPlugin.class, InternalSettingsPlugin.class, MockRepository.Plugin.class), Function.identity());\n+        secondCluster.beforeTest(random());\n+    }\n+\n+    @After\n+    public void stopSecondCluster() throws IOException {\n+        IOUtils.close(secondCluster);\n+    }\n+\n+    public void testConcurrentDeleteFromOtherCluster() throws InterruptedException {\n+        internalCluster().startMasterOnlyNode();\n+        internalCluster().startDataOnlyNodes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNTQ4MQ==", "bodyText": "can we assert that the message here is something about concurrent repo access?", "url": "https://github.com/elastic/elasticsearch/pull/59141#discussion_r451435481", "createdAt": "2020-07-08T10:15:40Z", "author": {"login": "ywelsch"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MultiClusterRepoAccessIT.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.common.network.NetworkModule;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.snapshots.mockstore.MockRepository;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n+import org.elasticsearch.test.InternalTestCluster;\n+import org.elasticsearch.test.MockHttpTransport;\n+import org.elasticsearch.test.NodeConfigurationSource;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.transport.nio.MockNioTransportPlugin;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+\n+public class MultiClusterRepoAccessIT extends AbstractSnapshotIntegTestCase {\n+\n+    private InternalTestCluster secondCluster;\n+    private Path repoPath;\n+\n+    @Before\n+    public void startSecondCluster() throws IOException, InterruptedException {\n+        repoPath = randomRepoPath();\n+        secondCluster = new InternalTestCluster(randomLong(), createTempDir(), true, true, 0,\n+                0, \"second_cluster\", new NodeConfigurationSource() {\n+            @Override\n+            public Settings nodeSettings(int nodeOrdinal) {\n+                return Settings.builder().put(MultiClusterRepoAccessIT.this.nodeSettings(nodeOrdinal))\n+                        .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n+                        .put(Environment.PATH_REPO_SETTING.getKey(), repoPath).build();\n+            }\n+\n+            @Override\n+            public Path nodeConfigPath(int nodeOrdinal) {\n+                return null;\n+            }\n+        }, 0, \"leader\", Arrays.asList(ESIntegTestCase.TestSeedPlugin.class,\n+                MockHttpTransport.TestPlugin.class, MockTransportService.TestPlugin.class,\n+                MockNioTransportPlugin.class, InternalSettingsPlugin.class, MockRepository.Plugin.class), Function.identity());\n+        secondCluster.beforeTest(random());\n+    }\n+\n+    @After\n+    public void stopSecondCluster() throws IOException {\n+        IOUtils.close(secondCluster);\n+    }\n+\n+    public void testConcurrentDeleteFromOtherCluster() throws InterruptedException {\n+        internalCluster().startMasterOnlyNode();\n+        internalCluster().startDataOnlyNodes(1);\n+        final String repoNameOnFirstCluster = \"test-repo\";\n+        final String repoNameOnSecondCluster = randomBoolean() ? \"test-repo\" : \"other-repo\";\n+        createRepository(repoNameOnFirstCluster, \"fs\", repoPath);\n+\n+        secondCluster.startMasterOnlyNode();\n+        secondCluster.startDataOnlyNode();\n+        secondCluster.client().admin().cluster().preparePutRepository(repoNameOnSecondCluster).setType(\"fs\")\n+                .setSettings(Settings.builder().put(\"location\", repoPath)).get();\n+\n+        createIndexWithRandomDocs(\"test-idx-1\", randomIntBetween(1, 100));\n+        createFullSnapshot(repoNameOnFirstCluster, \"snap-1\");\n+        createIndexWithRandomDocs(\"test-idx-2\", randomIntBetween(1, 100));\n+        createFullSnapshot(repoNameOnFirstCluster, \"snap-2\");\n+        createIndexWithRandomDocs(\"test-idx-3\", randomIntBetween(1, 100));\n+        createFullSnapshot(repoNameOnFirstCluster, \"snap-3\");\n+\n+        secondCluster.client().admin().cluster().prepareDeleteSnapshot(repoNameOnSecondCluster, \"snap-1\").get();\n+        secondCluster.client().admin().cluster().prepareDeleteSnapshot(repoNameOnSecondCluster, \"snap-2\").get();\n+\n+        expectThrows(SnapshotException.class, () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce2a89248efd38371681e44b693377924a63c60"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7573bf325b1c4ccbccab9e101f29663145f430ab", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/7573bf325b1c4ccbccab9e101f29663145f430ab", "committedDate": "2020-07-08T10:18:00Z", "message": "Merge remote-tracking branch 'elastic/master' into multi-cluster-corruption-safety-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f94913d79a65d6a8007a2c01b9b28fd8aea0dc", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/04f94913d79a65d6a8007a2c01b9b28fd8aea0dc", "committedDate": "2020-07-08T10:24:27Z", "message": "CR: comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NjI0NjU5", "url": "https://github.com/elastic/elasticsearch/pull/59141#pullrequestreview-444624659", "createdAt": "2020-07-08T10:43:46Z", "commit": {"oid": "04f94913d79a65d6a8007a2c01b9b28fd8aea0dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}