{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MjY2MjMx", "number": 63403, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NToyOVrOErSyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1ODo0NlrOErtGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODMxOTkyOnYy", "diffSide": "LEFT", "path": "modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NToyOVrOHd_Bsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NToyOVrOHd_Bsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzM3OQ==", "bodyText": "I simplified this when I bumped into it working on solving this issue. It's not strictly related, but some changes were indeed required to be compatible with the rest of the changes. The key simplification is that we don't stand up a whole node any more - just set up the mapper parsing infrastructure and some lucene indices.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501203379", "createdAt": "2020-10-07T17:55:29Z", "author": {"login": "nik9000"}, "path": "modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java", "diffHunk": "@@ -19,186 +19,122 @@\n \n package org.elasticsearch.join.mapper;\n \n-import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.compress.CompressedXContent;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentType;\n-import org.elasticsearch.index.IndexService;\n import org.elasticsearch.index.mapper.DocumentMapper;\n import org.elasticsearch.index.mapper.MapperException;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.mapper.MapperServiceTestCase;\n import org.elasticsearch.index.mapper.ParsedDocument;\n import org.elasticsearch.index.mapper.SourceToParse;\n import org.elasticsearch.join.ParentJoinPlugin;\n import org.elasticsearch.plugins.Plugin;\n-import org.elasticsearch.test.ESSingleNodeTestCase;\n \n import java.util.Collection;\n-import java.util.Collections;\n \n+import static java.util.Collections.singleton;\n import static org.hamcrest.Matchers.containsString;\n \n-public class ParentJoinFieldMapperTests extends ESSingleNodeTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODMyMjMzOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjowNVrOHd_DPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjowNVrOHd_DPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzc3Mw==", "bodyText": "We don't need this at all any more - the caller now gets it form the ValuesSourceRegistry.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501203773", "createdAt": "2020-10-07T17:56:05Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -512,8 +511,4 @@ public SimilarityService getSimilarityService() {\n     public BitsetFilterCache getBitsetFilterCache() {\n         return bitsetFilterCache;\n     }\n-\n-    public AggregationUsageService getUsageService() {\n-        return valuesSourceRegistry.getUsageService();\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODMyNDMwOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjozMVrOHd_EYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjozMVrOHd_EYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDA2NA==", "bodyText": "This is the start of the actual plumbing.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501204064", "createdAt": "2020-10-07T17:56:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -933,8 +934,12 @@ private void parseSource(DefaultSearchContext context, SearchSourceBuilder sourc\n         }\n         context.terminateAfter(source.terminateAfter());\n         if (source.aggregations() != null && includeAggregations) {\n+            AggregationContext aggContext = AggregationContext.from(\n+                queryShardContext,\n+                context.parsedQuery() == null ? null : context.parsedQuery().query()\n+            );\n             try {\n-                AggregatorFactories factories = source.aggregations().build(queryShardContext, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODMyODM0OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NzozMFrOHd_GzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NzozMFrOHd_GzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDY4NA==", "bodyText": "There was a TODO around moving this to the ctor which I bumped into while I was fixing the calls next to it.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501204684", "createdAt": "2020-10-07T17:57:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregator.java", "diffHunk": "@@ -70,7 +69,6 @@ static AutoDateHistogramAggregator build(\n         AggregatorFactories factories,\n         int targetBuckets,\n         RoundingInfo[] roundingInfos,\n-        Function<Rounding, Rounding.Prepared> roundingPreparer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODMzMDYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1ODowNFrOHd_IOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1ODowNFrOHd_IOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNTA1MA==", "bodyText": "I switched the parsing so we don't need to pass the whole query shard context in, now it is easier to test too!", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501205050", "createdAt": "2020-10-07T17:58:04Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregationBuilder.java", "diffHunk": "@@ -441,14 +441,14 @@ protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardC\n         LongBounds roundedBounds = null;\n         if (this.extendedBounds != null) {\n             // parse any string bounds to longs and round\n-            roundedBounds = this.extendedBounds.parseAndValidate(name, \"extended_bounds\" , queryShardContext, config.format())\n+            roundedBounds = this.extendedBounds.parseAndValidate(name, \"extended_bounds\" , context::nowInMillis, config.format())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODM1MDYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/CoreValuesSourceType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODowMzozMFrOHd_Uzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNDoxMVrOHeoEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwODI3MA==", "bodyText": "This means that runtime fields can't do it. It makes me think that we're doing something wrong, but I think that is something to solve in a follow up.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501208270", "createdAt": "2020-10-07T18:03:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/CoreValuesSourceType.java", "diffHunk": "@@ -240,28 +244,21 @@ public ValuesSource getScript(AggregationScript.LeafFactory script, ValueType sc\n         }\n \n         @Override\n-        public ValuesSource getField(FieldContext fieldContext, AggregationScript.LeafFactory script) {\n-            ValuesSource.Numeric dataSource = fieldData(fieldContext);\n+        public ValuesSource getField(FieldContext fieldContext, AggregationScript.LeafFactory script, AggregationContext context) {\n+            ValuesSource.Numeric dataSource = fieldData(fieldContext, context);\n             if (script != null) {\n                 // Value script case\n                 return new ValuesSource.Numeric.WithScript(dataSource, script);\n             }\n             return dataSource;\n         }\n \n-        private ValuesSource.Numeric fieldData(FieldContext fieldContext) {\n+        private ValuesSource.Numeric fieldData(FieldContext fieldContext, AggregationContext context) {\n             if ((fieldContext.indexFieldData() instanceof IndexNumericFieldData) == false) {\n                 throw new IllegalArgumentException(\"Expected numeric type on field [\" + fieldContext.field() +\n                     \"], but got [\" + fieldContext.fieldType().typeName() + \"]\");\n             }\n-            if (fieldContext.fieldType().isSearchable() == false\n-                    || fieldContext.fieldType() instanceof DateFieldType == false) {\n-                /*\n-                 * We can't implement roundingPreparer in these cases because\n-                 * we can't look up the min and max date without both the\n-                 * search index (the first test) and the resolution which is\n-                 * on the DateFieldType.\n-                 */\n+            if (fieldContext.fieldType() instanceof DateFieldType == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTgwMw==", "bodyText": "Agreed.  The instanceof check definitely smells wrong here, but I don't know what the right answer is.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501875803", "createdAt": "2020-10-08T17:04:11Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/CoreValuesSourceType.java", "diffHunk": "@@ -240,28 +244,21 @@ public ValuesSource getScript(AggregationScript.LeafFactory script, ValueType sc\n         }\n \n         @Override\n-        public ValuesSource getField(FieldContext fieldContext, AggregationScript.LeafFactory script) {\n-            ValuesSource.Numeric dataSource = fieldData(fieldContext);\n+        public ValuesSource getField(FieldContext fieldContext, AggregationScript.LeafFactory script, AggregationContext context) {\n+            ValuesSource.Numeric dataSource = fieldData(fieldContext, context);\n             if (script != null) {\n                 // Value script case\n                 return new ValuesSource.Numeric.WithScript(dataSource, script);\n             }\n             return dataSource;\n         }\n \n-        private ValuesSource.Numeric fieldData(FieldContext fieldContext) {\n+        private ValuesSource.Numeric fieldData(FieldContext fieldContext, AggregationContext context) {\n             if ((fieldContext.indexFieldData() instanceof IndexNumericFieldData) == false) {\n                 throw new IllegalArgumentException(\"Expected numeric type on field [\" + fieldContext.field() +\n                     \"], but got [\" + fieldContext.fieldType().typeName() + \"]\");\n             }\n-            if (fieldContext.fieldType().isSearchable() == false\n-                    || fieldContext.fieldType() instanceof DateFieldType == false) {\n-                /*\n-                 * We can't implement roundingPreparer in these cases because\n-                 * we can't look up the min and max date without both the\n-                 * search index (the first test) and the resolution which is\n-                 * on the DateFieldType.\n-                 */\n+            if (fieldContext.fieldType() instanceof DateFieldType == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwODI3MA=="}, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODM2NzM4OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/AggregatorBaseTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODowODowM1rOHd_fTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODowODowM1rOHd_fTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDk1Ng==", "bodyText": "This one was so short I thought I could clean up lots of these ESSingleNodeTestCases in this PR. It turns out that no, no, I can't.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501210956", "createdAt": "2020-10-07T18:08:03Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/AggregatorBaseTests.java", "diffHunk": "@@ -25,32 +25,30 @@\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.search.Query;\n import org.apache.lucene.search.TermQuery;\n-import org.elasticsearch.action.support.WriteRequest;\n import org.elasticsearch.common.breaker.CircuitBreaker;\n-import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.util.BigArrays;\n-import org.elasticsearch.index.IndexService;\n-import org.elasticsearch.index.engine.Engine;\n import org.elasticsearch.index.mapper.DateFieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.mapper.MapperServiceTestCase;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n-import org.elasticsearch.index.query.QueryShardContext;\n import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n import org.elasticsearch.search.internal.SearchContext;\n-import org.elasticsearch.test.ESSingleNodeTestCase;\n \n import java.io.IOException;\n import java.time.Instant;\n import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class AggregatorBaseTests extends ESSingleNodeTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODM3MjY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODowOTozOFrOHd_ixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODowOTozOFrOHd_ixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMTg0NA==", "bodyText": "No more entire node!", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501211844", "createdAt": "2020-10-07T18:09:38Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java", "diffHunk": "@@ -22,278 +22,198 @@\n import org.apache.lucene.index.LeafReaderContext;\n import org.apache.lucene.index.SortedNumericDocValues;\n import org.apache.lucene.util.BytesRef;\n-import org.elasticsearch.action.support.WriteRequest;\n-import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.index.IndexService;\n-import org.elasticsearch.index.engine.Engine;\n import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.mapper.MapperServiceTestCase;\n import org.elasticsearch.index.mapper.TypeFieldType;\n-import org.elasticsearch.index.query.QueryShardContext;\n-import org.elasticsearch.test.ESSingleNodeTestCase;\n \n-// TODO: This whole set of tests needs to be rethought.\n-public class ValuesSourceConfigTests extends ESSingleNodeTestCase {\n+import java.io.IOException;\n+import java.util.List;\n \n+// TODO: This whole set of tests needs to be rethought.\n+public class ValuesSourceConfigTests extends MapperServiceTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODM3NTQ1OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDoxNVrOHd_kWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDoxNVrOHd_kWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjI1MQ==", "bodyText": "parent/child tests wanted this one.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501212251", "createdAt": "2020-10-07T18:10:15Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -163,10 +187,15 @@ protected final void withLuceneIndex(\n     }\n \n     protected final SourceToParse source(CheckedConsumer<XContentBuilder, IOException> build) throws IOException {\n+        return source(\"1\", build, null);\n+    }\n+\n+    protected final SourceToParse source(String id, CheckedConsumer<XContentBuilder, IOException> build, @Nullable String routing)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODM3NzE2OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDo0OFrOHd_lew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzowMlrOHgBCfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjUzOQ==", "bodyText": "I decided not to go with mockito here partially because I wanted to suffer every time I added a new method to AggreationContext.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501212539", "createdAt": "2020-10-07T18:10:48Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -222,7 +251,111 @@ protected final XContentBuilder fieldMapping(CheckedConsumer<XContentBuilder, IO\n         });\n     }\n \n-    QueryShardContext createQueryShardContext(MapperService mapperService) {\n+    private AggregationContext aggregationContext(MapperService mapperService, IndexSearcher searcher, Query query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwMTI5Ng==", "bodyText": "I can't tell if you're joking or not.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501901296", "createdAt": "2020-10-08T17:45:41Z", "author": {"login": "not-napoleon"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -222,7 +251,111 @@ protected final XContentBuilder fieldMapping(CheckedConsumer<XContentBuilder, IO\n         });\n     }\n \n-    QueryShardContext createQueryShardContext(MapperService mapperService) {\n+    private AggregationContext aggregationContext(MapperService mapperService, IndexSearcher searcher, Query query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjUzOQ=="}, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzUwMQ==", "bodyText": "I'm really not. Suffering makes you think \"should I really add this method? this class is already big. maybe there is a cleaner way.\"", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r503333501", "createdAt": "2020-10-12T14:27:02Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -222,7 +251,111 @@ protected final XContentBuilder fieldMapping(CheckedConsumer<XContentBuilder, IO\n         });\n     }\n \n-    QueryShardContext createQueryShardContext(MapperService mapperService) {\n+    private AggregationContext aggregationContext(MapperService mapperService, IndexSearcher searcher, Query query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjUzOQ=="}, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc0NTI5OnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo1MzoyMFrOHeDJ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo1MzoyMFrOHeDJ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MTAyOA==", "bodyText": "Nit: It's no longer clear what service refers to in this javadoc", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501271028", "createdAt": "2020-10-07T19:53:20Z", "author": {"login": "not-napoleon"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java", "diffHunk": "@@ -84,16 +84,24 @@\n      * Returns the {@link ParentJoinFieldMapper} associated with the <code>service</code> or null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc3MjQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AbstractAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowMToyNVrOHeDatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowMToyNVrOHeDatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTMxNw==", "bodyText": "Nit: I think it'd be cleaner to put a getUsageService() call on AggregationContext, even if that just delegates it to the values source registry.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501275317", "createdAt": "2020-10-07T20:01:25Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AbstractAggregationBuilder.java", "diffHunk": "@@ -135,13 +135,13 @@ public final String getWriteableName() {\n     }\n \n     @Override\n-    public final AggregatorFactory build(QueryShardContext queryShardContext, AggregatorFactory parent) throws IOException {\n-        AggregatorFactory factory = doBuild(queryShardContext, parent, factoriesBuilder);\n-        queryShardContext.getUsageService().incAggregationUsage(getType(), factory.getStatsSubtype());\n+    public final AggregatorFactory build(AggregationContext context, AggregatorFactory parent) throws IOException {\n+        AggregatorFactory factory = doBuild(context, parent, factoriesBuilder);\n+        context.getValuesSourceRegistry().getUsageService().incAggregationUsage(getType(), factory.getStatsSubtype());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc4OTM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowNjozNlrOHeDlKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowNjozNlrOHeDlKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Nzk5NQ==", "bodyText": "this (already unhelpful) bit of javadoc isn't even remotely accurate now.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501277995", "createdAt": "2020-10-07T20:06:36Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceBuilder.java", "diffHunk": "@@ -265,18 +266,18 @@ public String format() {\n \n     /**\n      * Creates a {@link CompositeValuesSourceConfig} for this source.\n-     *  @param queryShardContext   The shard context for this source.\n-     * @param config    The {@link ValuesSourceConfig} for this source.\n+     * @param context  The shard context for this source.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc5MTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowNzoxOFrOHeDmfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxNzoxOFrOHgApig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3ODMzMg==", "bodyText": "Nit: context is an unexpected name for a ValuesSourceRegistry instance.  Maybe registry instead?", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501278332", "createdAt": "2020-10-07T20:07:18Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceBuilder.java", "diffHunk": "@@ -265,18 +266,18 @@ public String format() {\n \n     /**\n      * Creates a {@link CompositeValuesSourceConfig} for this source.\n-     *  @param queryShardContext   The shard context for this source.\n-     * @param config    The {@link ValuesSourceConfig} for this source.\n+     * @param context  The shard context for this source.\n+     * @param config   The {@link ValuesSourceConfig} for this source.\n      */\n-    protected abstract CompositeValuesSourceConfig innerBuild(QueryShardContext queryShardContext,\n+    protected abstract CompositeValuesSourceConfig innerBuild(ValuesSourceRegistry context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNzExNA==", "bodyText": "What I get for copy and pasting too fast.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r503327114", "createdAt": "2020-10-12T14:17:18Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceBuilder.java", "diffHunk": "@@ -265,18 +266,18 @@ public String format() {\n \n     /**\n      * Creates a {@link CompositeValuesSourceConfig} for this source.\n-     *  @param queryShardContext   The shard context for this source.\n-     * @param config    The {@link ValuesSourceConfig} for this source.\n+     * @param context  The shard context for this source.\n+     * @param config   The {@link ValuesSourceConfig} for this source.\n      */\n-    protected abstract CompositeValuesSourceConfig innerBuild(QueryShardContext queryShardContext,\n+    protected abstract CompositeValuesSourceConfig innerBuild(ValuesSourceRegistry context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3ODMzMg=="}, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODgzODE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyMDozMVrOHeECdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyMzo0NFrOHgA53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4NTQ5Mg==", "bodyText": "There's a few places where we get the values source just to get the rounding preparer off of it.  I wonder if we should just expose getRoundingPreparer on ValuesSourceConfig?", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501285492", "createdAt": "2020-10-07T20:20:31Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregator.java", "diffHunk": "@@ -87,7 +86,7 @@\n \n         super(name, factories, aggregationContext, parent, CardinalityUpperBound.MANY, metadata);\n         this.rounding = rounding;\n-        this.preparedRounding = preparedRounding;\n+        this.preparedRounding = valuesSourceConfig.getValuesSource().roundingPreparer().apply(rounding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMTI5Mw==", "bodyText": "I can do that!", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r503331293", "createdAt": "2020-10-12T14:23:44Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregator.java", "diffHunk": "@@ -87,7 +86,7 @@\n \n         super(name, factories, aggregationContext, parent, CardinalityUpperBound.MANY, metadata);\n         this.rounding = rounding;\n-        this.preparedRounding = preparedRounding;\n+        this.preparedRounding = valuesSourceConfig.getValuesSource().roundingPreparer().apply(rounding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4NTQ5Mg=="}, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODg1NTAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNTo0NVrOHeENEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNTo0NVrOHeENEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4ODIwOA==", "bodyText": "We don't need this TODO anymore?", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501288208", "createdAt": "2020-10-07T20:25:45Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "diffHunk": "@@ -88,17 +88,13 @@ protected Aggregator doCreateInternal(\n         CardinalityUpperBound cardinality,\n         Map<String, Object> metadata\n     ) throws IOException {\n-        DateHistogramAggregationSupplier aggregatorSupplier = queryShardContext.getValuesSourceRegistry()\n+        DateHistogramAggregationSupplier aggregatorSupplier = context.getValuesSourceRegistry()\n             .getAggregator(DateHistogramAggregationBuilder.REGISTRY_KEY, config);\n         // TODO: Is there a reason not to get the prepared rounding in the supplier itself?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQ1ODQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentilesAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxNDo0MFrOHemK_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxNDo0MFrOHemK_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NDczNA==", "bodyText": "Nit: formatting", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501844734", "createdAt": "2020-10-08T16:14:40Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentilesAggregationBuilder.java", "diffHunk": "@@ -128,12 +128,12 @@ public PercentilesAggregationBuilder percentiles(double... percents) {\n     }\n \n     @Override\n-    protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardContext,\n+    protected ValuesSourceAggregatorFactory innerBuild(AggregationContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjUwNDU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoyNTozM1rOHemnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoyNTozM1rOHemnLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MTk1MA==", "bodyText": "I like this.  It annoys me when we pass in both an object and something derived from that object like the old version had.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501851950", "createdAt": "2020-10-08T16:25:33Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregationBuilder.java", "diffHunk": "@@ -229,25 +229,25 @@ protected ScriptedMetricAggregatorFactory doBuild(QueryShardContext queryShardCo\n         ScriptedMetricAggContexts.InitScript.Factory compiledInitScript;\n         Map<String, Object> initScriptParams;\n         if (initScript != null) {\n-            compiledInitScript = queryShardContext.compile(initScript, ScriptedMetricAggContexts.InitScript.CONTEXT);\n+            compiledInitScript = context.compile(initScript, ScriptedMetricAggContexts.InitScript.CONTEXT);\n             initScriptParams = initScript.getParams();\n         } else {\n             compiledInitScript = null;\n             initScriptParams = Collections.emptyMap();\n         }\n \n-        ScriptedMetricAggContexts.MapScript.Factory compiledMapScript = queryShardContext.compile(mapScript,\n+        ScriptedMetricAggContexts.MapScript.Factory compiledMapScript = context.compile(mapScript,\n             ScriptedMetricAggContexts.MapScript.CONTEXT);\n         Map<String, Object> mapScriptParams = mapScript.getParams();\n \n \n-        ScriptedMetricAggContexts.CombineScript.Factory compiledCombineScript = queryShardContext.compile(combineScript,\n+        ScriptedMetricAggContexts.CombineScript.Factory compiledCombineScript = context.compile(combineScript,\n             ScriptedMetricAggContexts.CombineScript.CONTEXT);\n         Map<String, Object> combineScriptParams = combineScript.getParams();\n \n         return new ScriptedMetricAggregatorFactory(name, compiledMapScript, mapScriptParams, compiledInitScript,\n                 initScriptParams, compiledCombineScript, combineScriptParams, reduceScript,\n-                params, queryShardContext.lookup(), queryShardContext, parent, subfactoriesBuilder, metadata);\n+                params, context, parent, subfactoriesBuilder, metadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjU2ODg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0MjoxMlrOHenPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0MjoxMlrOHenPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MjI2MA==", "bodyText": "We should have some class level javadoc for this.", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501862260", "createdAt": "2020-10-08T16:42:12Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.support;\n+\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.Mapper;\n+import org.elasticsearch.index.mapper.ObjectMapper;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.query.support.NestedScope;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.search.sort.SortAndFormats;\n+import org.elasticsearch.search.sort.SortBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public abstract class AggregationContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYzMjExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1ODo0NlrOHen3YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1ODo0NlrOHen3YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjQ4MA==", "bodyText": "What are we gaining by making AggregationConetxt abstract and building it via this anonymous closure thing?  Seems to me, we could just store a reference to a QueryShardContext in a concrete class and serve these same methods up directly.  I think that would be more readable, but maybe there's another consideration I haven't thought of?", "url": "https://github.com/elastic/elasticsearch/pull/63403#discussion_r501872480", "createdAt": "2020-10-08T16:58:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.support;\n+\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.Mapper;\n+import org.elasticsearch.index.mapper.ObjectMapper;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.query.support.NestedScope;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.search.sort.SortAndFormats;\n+import org.elasticsearch.search.sort.SortBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public abstract class AggregationContext {\n+    /**\n+     * The query at the top level of the search in which these aggregations are running.\n+     */\n+    public abstract Query query();\n+\n+    /**\n+     * The time in milliseconds that is shared across all resources involved. Even across shards and nodes.\n+     */\n+    public abstract long nowInMillis();\n+\n+    /**\n+     * Lookup the context for a field.\n+     */\n+    public final FieldContext buildFieldContext(String field) {\n+        MappedFieldType ft = getFieldType(field);\n+        if (ft == null) {\n+            // The field is unmapped\n+            return null;\n+        }\n+        return new FieldContext(field, buildFieldData(ft), ft);\n+    }\n+\n+    /**\n+     * Lookup the context for an already resolved field type.\n+     */\n+    public final FieldContext buildFieldContext(MappedFieldType ft) {\n+        return new FieldContext(ft.name(), buildFieldData(ft), ft);\n+    }\n+\n+    /**\n+     * Build field data.\n+     */\n+    protected abstract IndexFieldData<?> buildFieldData(MappedFieldType ft);\n+\n+    /**\n+     * Lookup a {@link MappedFieldType} by path.\n+     */\n+    public abstract MappedFieldType getFieldType(String path);\n+\n+    /**\n+     * Lookup a field {@link Mapper} by path.\n+     */\n+    public abstract Mapper getMapper(String path);\n+\n+    /**\n+     * Compile a script.\n+     */\n+    public abstract <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);\n+\n+    /**\n+     * Fetch the shared {@link SearchLookup}.\n+     */\n+    public abstract SearchLookup lookup();\n+\n+    /**\n+     * The {@link ValuesSourceRegistry} to resolve {@link Aggregator}s and the like.\n+     */\n+    public abstract ValuesSourceRegistry getValuesSourceRegistry();\n+\n+    /**\n+     * Utility to share and track large arrays.\n+     */\n+    public abstract BigArrays bigArrays();\n+\n+    /**\n+     * The searcher that will execute this query.\n+     */\n+    public abstract IndexSearcher searcher();\n+\n+    /**\n+     * Build a query.\n+     */\n+    public abstract Query buildQuery(QueryBuilder builder) throws IOException;\n+\n+    /**\n+     * The settings for the index against which this search is running.\n+     */\n+    public abstract IndexSettings getIndexSettings();\n+\n+    /**\n+     * Compile a sort.\n+     */\n+    public abstract Optional<SortAndFormats> buildSort(List<SortBuilder<?>> sortBuilders) throws IOException;\n+\n+    /**\n+     * Find an {@link ObjectMapper}.\n+     */\n+    public abstract ObjectMapper getObjectMapper(String path);\n+\n+    /**\n+     * Access the nested scope. Stay away from this unless you are dealing with nested.\n+     */\n+    public abstract NestedScope nestedScope();\n+\n+    /**\n+     * Build a {@link AggregationContext} wrapping a {@link SearchContext} and the\n+     * top level {@link Query}.\n+     */\n+    public static AggregationContext from(QueryShardContext context, Query query) {\n+        return new AggregationContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788846f2af146b56b32fc3b0a97ab854805ca7ea"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3155, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}