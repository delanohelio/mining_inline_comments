{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Nzc0NTI4", "number": 56360, "title": "[ML] Allow stopping DF analytics whose config is missing", "bodyText": "It is possible that the config document for a data frame\nanalytics job is deleted from the config index. If that is\nthe case the user is unable to stop a running job because\nwe attempt to retrieve the config and that will throw.\nThis commit changes that. When the request is forced,\nwe do not expand the requested ids based on the existing\nconfigs but from the list of running tasks instead.", "createdAt": "2020-05-07T15:53:55Z", "url": "https://github.com/elastic/elasticsearch/pull/56360", "merged": true, "mergeCommit": {"oid": "f6acecdde5b440f2e331be9d72e1297c3ce26c50"}, "closed": true, "closedAt": "2020-05-08T09:23:09Z", "author": {"login": "dimitris-athanasiou"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce-yFnAH2gAyNDE0Nzc0NTI4OmVkY2I0ZjM3MzEzYzNiMTliODA4OGYxNWU3OTc1ZTk1NWY5ZTViNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfNQETgH2gAyNDE0Nzc0NTI4OjlmMzI2NmNkODAzMTIxOTY0NTMwN2Y4MzUyZjk4NjJlMmI0MGQyYzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/edcb4f37313c3b19b8088f15e7975e955f9e5b66", "committedDate": "2020-05-07T15:12:38Z", "message": "[ML] Allow stopping DF analytics whose config is missing\n\nIt is possible that the config document for a data frame\nanalytics job is deleted from the config index. If that is\nthe case the user is unable to stop a running job because\nwe attempt to retrieve the config and that will throw.\n\nThis commit changes that. When the request is forced,\nwe do not expand the requested ids based on the existing\nconfigs but from the list of running tasks instead."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc0NzM2", "url": "https://github.com/elastic/elasticsearch/pull/56360#pullrequestreview-407674736", "createdAt": "2020-05-07T17:14:20Z", "commit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDE0NDMy", "url": "https://github.com/elastic/elasticsearch/pull/56360#pullrequestreview-408014432", "createdAt": "2020-05-08T05:59:58Z", "commit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo1OTo1OFrOGSaGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjowOTo1NVrOGSaSsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTIzNw==", "bodyText": "Can it be that an item will be added twice to matchingItems  because it matches 2 patterns? E.g. item \"abc\" and patterns \"a*\" and \"ab*\"?\nPlease add a unit test for this case.", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421955237", "createdAt": "2020-05-08T05:59:58Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java", "diffHunk": "@@ -94,4 +101,33 @@ public static String getParentField(String fieldPath) {\n         }\n         return fieldPath.substring(0, lastIndexOfDot);\n     }\n+\n+    /**\n+     * Given a collection of strings and some patterns, it finds the strings that match against at least one pattern.\n+     * @param patterns the patterns may contain wildcards\n+     * @param items the collections of strings\n+     * @return the strings from {@code items} that match against at least one pattern\n+     */\n+    public static Collection<String> findMatching(String[] patterns, Set<String> items) {\n+        if (items.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        if (Strings.isAllOrWildcard(patterns)) {\n+            return items;\n+        }\n+\n+        List<String> matchingItems = new ArrayList<>();\n+        for (String pattern : patterns) {\n+            if (items.contains(pattern))  {\n+                matchingItems.add(pattern);\n+            } else if (Regex.isSimpleMatchPattern(pattern)) {\n+                for (String item : items) {\n+                    if (Regex.simpleMatch(pattern, item)) {\n+                        matchingItems.add(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjU4Mw==", "bodyText": "IIRC hasItems is a partial match (i.e. it asserts that the actual collection has expected items and maybe some more).\nI think org.hamcrest.Matchers.contains should be used instead in order to achieve full match.", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421956583", "createdAt": "2020-05-08T06:04:27Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java", "diffHunk": "@@ -46,4 +53,21 @@ public void testHasValidLengthForId() {\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(64)), is(true));\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(65)), is(false));\n     }\n+\n+    public void testFindMatching_GivenEmptyItems() {\n+        assertThat(MlStrings.findMatching(new String[0], Collections.emptySet()), is(empty()));\n+    }\n+\n+    public void testFindMatching_GivenAllPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjgzMQ==", "bodyText": "As noted before, please add a test when one item matches 2 patterns.", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421956831", "createdAt": "2020-05-08T06:05:17Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java", "diffHunk": "@@ -46,4 +53,21 @@ public void testHasValidLengthForId() {\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(64)), is(true));\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(65)), is(false));\n     }\n+\n+    public void testFindMatching_GivenEmptyItems() {\n+        assertThat(MlStrings.findMatching(new String[0], Collections.emptySet()), is(empty()));\n+    }\n+\n+    public void testFindMatching_GivenAllPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+    }\n+\n+    public void testFindMatching_GivenWildcardPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+    }\n+\n+    public void testFindMatching_GivenMixedPatterns() {\n+        assertThat(MlStrings.findMatching(new String[] {\"concrete\", \"wild-*\"}, new HashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODMyMQ==", "bodyText": "static?", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421958321", "createdAt": "2020-05-08T06:09:55Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java", "diffHunk": "@@ -112,26 +115,51 @@ protected void doExecute(Task task, StopDataFrameAnalyticsAction.Request request\n             listener::onFailure\n         );\n \n-        expandIds(state, request, expandedIdsListener);\n+        findIdsToStop(state, request, expandedIdsListener);\n     }\n \n-    private void expandIds(ClusterState clusterState, StopDataFrameAnalyticsAction.Request request,\n-                           ActionListener<Set<String>> expandedIdsListener) {\n-        ActionListener<List<DataFrameAnalyticsConfig>> configsListener = ActionListener.wrap(\n-            configs -> {\n-                Set<String> matchingIds = configs.stream().map(DataFrameAnalyticsConfig::getId).collect(Collectors.toSet());\n-                PersistentTasksCustomMetadata tasksMetadata = clusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n-                Set<String> startedIds = tasksMetadata == null ? Collections.emptySet() : tasksMetadata.tasks().stream()\n-                    .filter(t -> t.getId().startsWith(MlTasks.DATA_FRAME_ANALYTICS_TASK_ID_PREFIX))\n-                    .map(t -> t.getId().replaceFirst(MlTasks.DATA_FRAME_ANALYTICS_TASK_ID_PREFIX, \"\"))\n-                    .collect(Collectors.toSet());\n+    private void findIdsToStop(ClusterState clusterState, StopDataFrameAnalyticsAction.Request request,\n+                               ActionListener<Set<String>> expandedIdsListener) {\n+        Set<String> startedIds = getAllStartedIds(clusterState);\n+\n+        ActionListener<Set<String>> matchingIdsListener = ActionListener.wrap(\n+            matchingIds -> {\n                 startedIds.retainAll(matchingIds);\n                 expandedIdsListener.onResponse(startedIds);\n             },\n             expandedIdsListener::onFailure\n         );\n \n-        configProvider.getMultiple(request.getId(), request.allowNoMatch(), configsListener);\n+        if (request.isForce()) {\n+            matchAllStartedIds(request, startedIds, matchingIdsListener);\n+        } else {\n+            configProvider.getMultiple(request.getId(), request.allowNoMatch(), ActionListener.wrap(\n+                configs -> matchingIdsListener.onResponse(\n+                    configs.stream().map(DataFrameAnalyticsConfig::getId).collect(Collectors.toSet())),\n+                matchingIdsListener::onFailure\n+            ));\n+        }\n+    }\n+\n+    private Set<String> getAllStartedIds(ClusterState clusterState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "committedDate": "2020-05-08T07:36:30Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDU5MDk1", "url": "https://github.com/elastic/elasticsearch/pull/56360#pullrequestreview-408059095", "createdAt": "2020-05-08T07:39:15Z", "commit": {"oid": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzozOToxNVrOGScfyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzozOToxNVrOGScfyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5NDQ0Mw==", "bodyText": "Ah, I didn't notice the \"Set\" type, so the code was correct. Anyway, thanks for adding a test!", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421994443", "createdAt": "2020-05-08T07:39:15Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java", "diffHunk": "@@ -94,4 +101,33 @@ public static String getParentField(String fieldPath) {\n         }\n         return fieldPath.substring(0, lastIndexOfDot);\n     }\n+\n+    /**\n+     * Given a collection of strings and some patterns, it finds the strings that match against at least one pattern.\n+     * @param patterns the patterns may contain wildcards\n+     * @param items the collections of strings\n+     * @return the strings from {@code items} that match against at least one pattern\n+     */\n+    public static Collection<String> findMatching(String[] patterns, Set<String> items) {\n+        if (items.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        if (Strings.isAllOrWildcard(patterns)) {\n+            return items;\n+        }\n+\n+        List<String> matchingItems = new ArrayList<>();\n+        for (String pattern : patterns) {\n+            if (items.contains(pattern))  {\n+                matchingItems.add(pattern);\n+            } else if (Regex.isSimpleMatchPattern(pattern)) {\n+                for (String item : items) {\n+                    if (Regex.simpleMatch(pattern, item)) {\n+                        matchingItems.add(item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTIzNw=="}, "originalCommit": {"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3266cd8031219645307f8352f9862e2b40d2c3", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f3266cd8031219645307f8352f9862e2b40d2c3", "committedDate": "2020-05-08T08:04:03Z", "message": "Remove unused imports"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 215, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}