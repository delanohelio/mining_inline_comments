{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTcxMzE5", "number": 57143, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo0MzowMFrOD_p-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowNzoyOVrOEA50uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc0NTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo0MzowMFrOGacclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo0MzowMFrOGacclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MjIyOA==", "bodyText": "There is a string array field called forecast_messages which can be used to add a reason for the failure.", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r430382228", "createdAt": "2020-05-26T12:43:00Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -1272,6 +1276,39 @@ public void scheduledEvents(ScheduledEventsQueryBuilder query, ActionListener<Qu\n                 client::search);\n     }\n \n+    public void setRunningForecastsToFailed(String jobId, ActionListener<Boolean> listener) {\n+        QueryBuilder forecastQuery = QueryBuilders.boolQuery()\n+            .filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ForecastRequestStats.RESULT_TYPE_VALUE))\n+            .filter(QueryBuilders.termQuery(Job.ID.getPreferredName(), jobId))\n+            .filter(QueryBuilders.termsQuery(ForecastRequestStats.STATUS.getPreferredName(),\n+                ForecastRequestStats.ForecastRequestStatus.SCHEDULED.toString(),\n+                ForecastRequestStats.ForecastRequestStatus.STARTED.toString()));\n+\n+        UpdateByQueryRequest request = new UpdateByQueryRequest(AnomalyDetectorsIndex.resultsWriteAlias(jobId))\n+            .setQuery(forecastQuery)\n+            .setIndicesOptions(IndicesOptions.lenientExpandOpen())\n+            .setAbortOnVersionConflict(false)\n+            .setMaxRetries(3)\n+            .setRefresh(true)\n+            .setScript(new Script(\"ctx._source.forecast_status='failed'\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1114f9a669ea0f22e7f47261d41758de0a7608a8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc4NzU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportCloseJobAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1NDowMFrOGac2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1NjoyOVrOGawBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODkwNA==", "bodyText": "Isn't sendRemoveRequest async? What if other results are still in the results queue and overwrite the failure state again?\nI wonder if it would be better to do this in AutodetectCommunicator::killProcess?", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r430388904", "createdAt": "2020-05-26T12:54:00Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportCloseJobAction.java", "diffHunk": "@@ -371,7 +375,7 @@ private void sendResponseOrFailure(String jobId,\n                                                                AtomicArray<Exception> failures) {\n                                 List<Exception> caughtExceptions = failures.asList();\n                                 if (caughtExceptions.size() == 0) {\n-                                    listener.onResponse(new CloseJobAction.Response(true));\n+                                    closeRunningForecasts(jobId, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1114f9a669ea0f22e7f47261d41758de0a7608a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NjU4NQ==", "bodyText": "\ud83e\udd14 Good point.\nBut, awaitCompletion is false when the task is cancelled. We might could throw a hook in results processor somewhere (AutodetectResultProcessor). if the process is killed, make sure to set all running forecasts to failed.", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r430566585", "createdAt": "2020-05-26T16:57:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportCloseJobAction.java", "diffHunk": "@@ -371,7 +375,7 @@ private void sendResponseOrFailure(String jobId,\n                                                                AtomicArray<Exception> failures) {\n                                 List<Exception> caughtExceptions = failures.asList();\n                                 if (caughtExceptions.size() == 0) {\n-                                    listener.onResponse(new CloseJobAction.Response(true));\n+                                    closeRunningForecasts(jobId, listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODkwNA=="}, "originalCommit": {"oid": "1114f9a669ea0f22e7f47261d41758de0a7608a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMzAzNw==", "bodyText": "I added a commit doing exactly this. Going to update tests, etc.. changing PR to draft while I iron out the wrinkles.", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r430703037", "createdAt": "2020-05-26T20:56:29Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportCloseJobAction.java", "diffHunk": "@@ -371,7 +375,7 @@ private void sendResponseOrFailure(String jobId,\n                                                                AtomicArray<Exception> failures) {\n                                 List<Exception> caughtExceptions = failures.asList();\n                                 if (caughtExceptions.size() == 0) {\n-                                    listener.onResponse(new CloseJobAction.Response(true));\n+                                    closeRunningForecasts(jobId, listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODkwNA=="}, "originalCommit": {"oid": "1114f9a669ea0f22e7f47261d41758de0a7608a8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzgyODQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowNzoyOVrOGceEzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozODowMVrOGcfm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNjA2Mw==", "bodyText": "It would be nice if we could reuse here JobResultsProvider.setRunningForecastsToFailed. The benefits would be that we don't need a copy constructor for ForecastRequestStats which is prone for bugs (forgetting to add a new field there), and we don't need to keep track of open forecasts here in the new runningForecasts member.", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r432506063", "createdAt": "2020-05-29T14:07:29Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -206,6 +212,27 @@ public void setProcessKilled() {\n         renormalizer.shutdown();\n     }\n \n+    void handleOpenForecasts() {\n+        try {\n+            if (runningForecasts.isEmpty() == false) {\n+                LOGGER.warn(\"[{}] still had forecasts {} executing. Attempting to set them to failed.\",\n+                    jobId,\n+                    runningForecasts.keySet());\n+                // There may be many docs in the results persistence queue. But we only want to bother updating the running forecasts\n+                bulkResultsPersister.clearBulkRequest();\n+                for (ForecastRequestStats forecastRequestStats : runningForecasts.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a9db0e272b99551db4e0a3c01305552d72d07e4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMTE1NQ==", "bodyText": "setRunningForecastsToFailed is a DBQ. It is possible to have a forecast request stat document persisted without the index refreshing since. So, the DBQ would not find it.", "url": "https://github.com/elastic/elasticsearch/pull/57143#discussion_r432531155", "createdAt": "2020-05-29T14:38:01Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -206,6 +212,27 @@ public void setProcessKilled() {\n         renormalizer.shutdown();\n     }\n \n+    void handleOpenForecasts() {\n+        try {\n+            if (runningForecasts.isEmpty() == false) {\n+                LOGGER.warn(\"[{}] still had forecasts {} executing. Attempting to set them to failed.\",\n+                    jobId,\n+                    runningForecasts.keySet());\n+                // There may be many docs in the results persistence queue. But we only want to bother updating the running forecasts\n+                bulkResultsPersister.clearBulkRequest();\n+                for (ForecastRequestStats forecastRequestStats : runningForecasts.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNjA2Mw=="}, "originalCommit": {"oid": "7a9db0e272b99551db4e0a3c01305552d72d07e4"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}