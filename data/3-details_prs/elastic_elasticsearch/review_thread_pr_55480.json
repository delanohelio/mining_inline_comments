{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjA1OTk5", "number": 55480, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1MTo1OFrODz5Taw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjozMlrODz-u4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQyODI3OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1MTo1OFrOGIk_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1MTo1OFrOGIk_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[avoiding-oversharding]]\n          \n          \n            \n            [[avoid-oversharding]]", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411647936", "createdAt": "2020-04-20T19:51:58Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ0MTk4OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1NTozNlrOGIlIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1Njo1MFrOGIlK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MDA2Ng==", "bodyText": "Can you rewrap lines throughout to keep to a 80 character line length?", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411650066", "createdAt": "2020-04-20T19:55:36Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MDgxMg==", "bodyText": "The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried.\n\nI think this would work better as an unordered list.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411650812", "createdAt": "2020-04-20T19:56:50Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MDA2Ng=="}, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ1MTEyOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1Nzo1OFrOGIlNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1Nzo1OFrOGIlNYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MTQyNA==", "bodyText": "Where possible, we try to add explicit anchors. It ensure that links to the content are less likely to break.\nWe also try to use [discrete] over [float] as that's preferred in Asciidoctor. You'll still see lots of historical [float] attributes tho.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            === Why oversharding is inefficient\n          \n          \n            \n            [discrete]\n          \n          \n            \n            [[oversharding-inefficient]]\n          \n          \n            \n            === Why oversharding is inefficient", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411651424", "createdAt": "2020-04-20T19:57:58Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ1NDQzOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1ODo0NVrOGIlPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1ODo0NVrOGIlPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MTkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n          \n          \n            \n            Each segment has metadata that needs to be kept in heap memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411651913", "createdAt": "2020-04-20T19:58:45Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ1OTkxOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMDowOFrOGIlSkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMDowOFrOGIlSkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1Mjc1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            === How to reduce shard counts and increase shard size\n          \n          \n            \n            [discrete]\n          \n          \n            \n            [[reduce-shard-counts-increase-shard-size]]\n          \n          \n            \n            === How to reduce shard counts and increase shard size", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411652752", "createdAt": "2020-04-20T20:00:08Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ2NDIxOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMToxNlrOGIlVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMToxNlrOGIlVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MzQxOA==", "bodyText": "I don't think the numbering is needed or helps here. These steps could be applied in any order. It will also be easier to add/remove tips without numbers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Try these six methods to reduce oversharding.\n          \n          \n            \n            Try these methods to reduce oversharding.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411653418", "createdAt": "2020-04-20T20:01:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ2NzY0OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMjoxNVrOGIlXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMjoxNVrOGIlXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1Mzk0OQ==", "bodyText": "I don't think [discrete] or [float] is needed for H4s.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 1. Reduce the number of shards for new indices\n          \n          \n            \n            [[reduce-shards-for-new-indices]]\n          \n          \n            \n            ==== Reduce the number of shards for new indices", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411653949", "createdAt": "2020-04-20T20:02:15Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ2OTYyOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMjo1MVrOGIlYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMjo1MVrOGIlYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDI2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 2. Create larger shards by increasing the rollover thresholds\n          \n          \n            \n            [[create-larger-shards-by-increasing-rollover-thresholds]]\n          \n          \n            \n            ==== Create larger shards by increasing rollover thresholds", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411654264", "createdAt": "2020-04-20T20:02:51Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3MTg5OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMzoyNVrOGIlZzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMzoyNVrOGIlZzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDYwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 3. Create larger shards by using index patterns spanning longer time periods\n          \n          \n            \n            [[create-larger-shards-with-index-patterns]]\n          \n          \n            \n            ==== Create larger shards by using index patterns spanning longer time periods", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411654607", "createdAt": "2020-04-20T20:03:25Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3MzM2OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMzo0M1rOGIlasw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMzo0M1rOGIlasw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 4. Shrink an existing index to fewer shards\n          \n          \n            \n            [[shrink-existing-index-to-fewer-shards]]\n          \n          \n            \n            ==== Shrink an existing index to fewer shards", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411654835", "createdAt": "2020-04-20T20:03:43Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3NDg1OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDowM1rOGIlblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDowM1rOGIlblQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 5. Reindex an existing index to fewer shards\n          \n          \n            \n            [[reindex-an-existing-index-to-fewer-shards]]\n          \n          \n            \n            ==== Reindex an existing index to fewer shards", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411655061", "createdAt": "2020-04-20T20:04:03Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3NjM5OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDoyNlrOGIlchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDoyNlrOGIlchg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTMwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [float]\n          \n          \n            \n            ==== 6. Reindex indices from shorter periods into longer periods\n          \n          \n            \n            [[reindex-indices-from-shorter-periods-into-longer-periods]]\n          \n          \n            \n            ==== Reindex indices from shorter periods into longer periods", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411655302", "createdAt": "2020-04-20T20:04:26Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.\n+\n+[float]\n+==== 6. Reindex indices from shorter periods into longer periods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3OTAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNTowNVrOGIld-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNTowNVrOGIld-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTY3Mw==", "bodyText": "Curator is outdated. I'd just remove this reference.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html[Curator] can also link:https://www.elastic.co/guide/en/elasticsearch/client/curator/current/ex_reindex.html#_filter_selected_indices_2[help with reindexing time-based indices].", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411655673", "createdAt": "2020-04-20T20:05:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.\n+\n+[float]\n+==== 6. Reindex indices from shorter periods into longer periods\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex multiple small indices covering shorter time periods into a larger index covering a longer time period. For example, daily indices from October with naming patterns such as `foo-2019.10.11` could be combined into a monthly `foo-2019.10` index, like this:\n+\n+[source,console]\n+--------------------------------------------------\n+POST _reindex\n+{\n+  \"source\": {\n+    \"index\": \"foo-2019.10.*\"\n+  },\n+  \"dest\": {\n+    \"index\": \"foo-2019.10\"\n+  }\n+}\n+--------------------------------------------------\n+\n+link:https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html[Curator] can also link:https://www.elastic.co/guide/en/elasticsearch/client/curator/current/ex_reindex.html#_filter_selected_indices_2[help with reindexing time-based indices].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ4MjEzOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNTo0M1rOGIlfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNTo0M1rOGIlfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NjA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The <<docs-reindex,Reindex API>> can be used to reindex multiple small indices covering shorter time periods into a larger index covering a longer time period. For example, daily indices from October with naming patterns such as `foo-2019.10.11` could be combined into a monthly `foo-2019.10` index, like this:\n          \n          \n            \n            You can use the <<docs-reindex,reindex API>> to reindex multiple small indices covering shorter time periods into a larger index covering a longer time period. For example, daily indices from October with naming patterns such as `foo-2019.10.11` could be combined into a monthly `foo-2019.10` index, like this:", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411656099", "createdAt": "2020-04-20T20:05:43Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.\n+\n+[float]\n+==== 6. Reindex indices from shorter periods into longer periods\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex multiple small indices covering shorter time periods into a larger index covering a longer time period. For example, daily indices from October with naming patterns such as `foo-2019.10.11` could be combined into a monthly `foo-2019.10` index, like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ4NDg4OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNjoyM1rOGIlhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNjoyM1rOGIlhQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NjUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.\n          \n          \n            \n            You can use the <<docs-reindex,reindex API>> to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the oversharded index can be deleted.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411656513", "createdAt": "2020-04-20T20:06:23Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ5MzUxOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowODoyNlrOGIlmJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowODoyNlrOGIlmJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1Nzc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n          \n          \n            \n            <<index-lifecycle-management,{ilm}>> also has a <<ilm-shrink-action,shrink action>> available for indices in the warm phase.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411657766", "createdAt": "2020-04-20T20:08:26Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ5NTcxOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowODo1MlrOGIlnWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowODo1MlrOGIlnWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1ODA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n          \n          \n            \n            You can use the <<indices-shrink-index,shrink index API>> to shrink an existing index down to a fewer shards.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411658073", "createdAt": "2020-04-20T20:08:52Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUwMjE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMDoyN1rOGIlrDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMDoyN1rOGIlrDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1OTAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n          \n          \n            \n            If creating indices using {ls}, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the {es} output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. {beats} also lets you change the date math expression defined in the `index` property of the {es} output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411659023", "createdAt": "2020-04-20T20:10:27Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUwNjE2OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMTozNVrOGIlthQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMTozNVrOGIlthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1OTY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n          \n          \n            \n            Creating indices covering longer time periods reduces index and shard counts while increasing index sizes. For example, instead of daily indices, you can create monthly, or even yearly indices.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411659653", "createdAt": "2020-04-20T20:11:35Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUxMjQ3OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMzoxNlrOGIlxWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxMzoxNlrOGIlxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MDYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n          \n          \n            \n            Take special note of any empty indices. These may be managed by an {ilm-init} policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more {beats} stop sending data. If the {ilm-init}-managed indices for those {beats{ are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the <<cat-count,cat count API>>.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411660634", "createdAt": "2020-04-20T20:13:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUyMTAzOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxNTozOFrOGIl2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxNTozOFrOGIl2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MTg5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n          \n          \n            \n            You can roll over indices using the <<indices-rollover-index,rollover index API>> or by specifying the <<ilm-rollover-action,rollover action>> in an {ilm-init} policy. If using an {ilm-init} policy, increase the rollover condition thresholds (`max_age`, `max_docs`, `max_size`)  to allow the indices to grow to a larger size before being rolled over, which creates larger shards.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411661895", "createdAt": "2020-04-20T20:15:38Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUzMTQ1OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxODoxNFrOGIl8Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxODoxNFrOGIl8Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MzQ0Mg==", "bodyText": "I don't think we need to call out the default values here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n          \n          \n            \n            You can specify the `index.number_of_shards` setting  for new indices created with the <<indices-create-index,create index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,{ilm} ({ilm-init})>>.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411663442", "createdAt": "2020-04-20T20:18:14Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUzNDMyOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxODo1NFrOGIl9_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxODo1NFrOGIl9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2Mzg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n          \n          \n            \n            You can override the `index.number_of_shards`  when rolling over an index using the <<rollover-index-api-example,rollover index API>>.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411663870", "createdAt": "2020-04-20T20:18:54Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzUzNTY2OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxOToxN1rOGIl-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoxOToxN1rOGIl-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NDA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            POST _reindex\n          \n          \n            \n            POST /_reindex", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411664084", "createdAt": "2020-04-20T20:19:17Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n+\n+[float]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in (heap) memory. These include lists of fields, the number of documents, and terms dictionaries. As a shard grows in size, the size of its segments generally grow because smaller segments are <<index-modules-merge,merged>> into fewer, larger segments. This typically reduces the amount of heap required by a shard\u2019s segment metadata for a given data volume. At a bare minimum shards should be at least larger than 1GB to make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB, a cluster full of 1GB shards will likely still perform poorly. This is because having many small shards can also have a negative impact on search and indexing operations. Each query or indexing operation is executed in a single thread per shard of indices being queried or indexed to. The node receiving a request from a client becomes responsible for distributing that request to the appropriate shards as well as reducing the results from those individual shards into a single response. Even assuming that a cluster has sufficient <<modules-threadpool,search threadpool threads>> available to immediately process the requested action against all shards required by the request, the overhead associated with making network requests to the nodes holding those shards and with having to merge the results of results from many small shards can lead to increased latency. This in turn can lead to exhaustion of the threadpool and, as a result, decreased throughput.\n+\n+[float]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these six methods to reduce oversharding.\n+\n+[float]\n+==== 1. Reduce the number of shards for new indices\n+\n+The `index.number_of_shards` setting can be specified for new indices created with the <<indices-create-index,Create Index API>> or as part of <<indices-templates,index templates>> for indices automatically created by <<index-lifecycle-management,Index Lifecycle Management>>. For Elasticsearch versions below 7.0, the default value for this setting was `5`. For versions 7.0 and higher, the default value for this setting is `1`.\n+\n+The <<rollover-index-api-example,rollover request>> body can also override that same `index.number_of_shards` setting.\n+\n+[float]\n+==== 2. Create larger shards by increasing the rollover thresholds\n+\n+If indices are rolled over by either directly using the Rollover API or by specifying the Index Lifecycle Management {ref}/_actions.html#ilm-rollover-action[Rollover action], then the rollover condition thresholds (`max_age`, `max_docs`, `max_size`) can be increased to allow the indices to grow to a larger size before being rolled over, thereby generating larger shards.\n+\n+Take special note of any indices that are empty. These may be managed by an ILM policy that is rolling over the indices because the `max_age` threshold is met. In this case, you may need to adjust the policy to make use of the `max_docs` or `max_size` properties to prevent the creation of these empty indices. One example where this may happen is if one or more Beats stop sending data. If the ILM-managed indices for those Beats are configured to rollover daily, then new, empty indices will be generated each day. Empty indices can be identified using the following {ref}/cat-count.html[cat count API]: `GET /_cat/count?v`.\n+\n+\n+[float]\n+==== 3. Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods will also reduce the index, and thereby shard, counts and increase index sizes. For example, instead of daily indices, create monthly, or even yearly indices.\n+\n+If creating indices using Logstash, the {logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index] property of the Elasticsearch output can be modified to a <<date-math-index-names,date math expression>> covering a longer time period. For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}`` to create monthly, rather than daily, indices. Beats also allow changing the date math expression defined in the `index` property of the Elasticsearch output, such as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+\n+[float]\n+==== 4. Shrink an existing index to fewer shards\n+\n+The {ref}/indices-shrink-index.html[Shrink index API] can shrink an existing index down to a fewer shards.\n+\n+{ref}/index-lifecycle-management.html[Index Lifecycle Management] also has a shrink action available as part of its warm phase.\n+\n+\n+[float]\n+==== 5. Reindex an existing index to fewer shards\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex from an existing index to a new index with fewer shards. After the data has been reindexed, the initial oversharded index can be deleted.\n+\n+[float]\n+==== 6. Reindex indices from shorter periods into longer periods\n+\n+The <<docs-reindex,Reindex API>> can be used to reindex multiple small indices covering shorter time periods into a larger index covering a longer time period. For example, daily indices from October with naming patterns such as `foo-2019.10.11` could be combined into a monthly `foo-2019.10` index, like this:\n+\n+[source,console]\n+--------------------------------------------------\n+POST _reindex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzU0Nzg2OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyMjo0MFrOGImGSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyMjo0MFrOGImGSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.\n          \n          \n            \n            Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. {kib}'s {kibana-ref}/elasticsearch-metrics.html[{es} monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411665994", "createdAt": "2020-04-20T20:22:40Z", "author": {"login": "jrodewig"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,73 @@\n+[[avoiding-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the same amount of data will lead to a more effective use of system resources (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d. The number of shards where this inflection point occurs depends on a variety of factors, including available hardware, indexing load, data volume, the types of queries executed against the cluster, the rate of these queries being issued, and the volume of data being queried. Testing against production data with production queries on production hardware is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB are commonly used, and this may be a useful starting point from which to experiment. Kibana\u2019s {kibana-ref}/elasticsearch-metrics.html[Elasticsearch monitoring] provides a useful view of historical cluster performance when evaluating the impact of different shard sizes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb38b5a540fb7a888c80e2707105863b3bf49c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODMxMTA5OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxMzo0OFrOGIs5TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxMzo0OFrOGIs5TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NzM1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            existing index down to a fewer shards.\n          \n          \n            \n            existing index down to fewer shards.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411777357", "createdAt": "2020-04-21T00:13:48Z", "author": {"login": "debadair"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,148 @@\n+[[avoid-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the\n+same amount of data will lead to a more effective use of system resources\n+(CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d.\n+\n+The number of shards where this inflection point occurs depends on a variety\n+of factors, including:\n+\n+* available hardware\n+* indexing load\n+* data volume\n+* the types of queries executed against the clusters\n+* the rate of these queries being issued\n+* the volume of data being queried\n+\n+Testing against production data with production queries on production hardware\n+is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB\n+are commonly used, and this may be a useful starting point from which to\n+experiment. {kib}'s {kibana-ref}/elasticsearch-metrics.html[{es} monitoring]\n+provides a useful view of historical cluster performance when evaluating the\n+impact of different shard sizes.\n+\n+[discrete]\n+[[oversharding-inefficient]]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in heap memory. These include\n+lists of fields, the number of documents, and terms dictionaries. As a shard\n+grows in size, the size of its segments generally grow because smaller segments\n+are <<index-modules-merge,merged>> into fewer, larger segments. This typically\n+reduces the amount of heap required by a shard\u2019s segment metadata for a given\n+data volume. At a bare minimum shards should be at least larger than 1GB to\n+make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB,\n+a cluster full of 1GB shards will likely still perform poorly. This is because\n+having many small shards can also have a negative impact on search and\n+indexing operations. Each query or indexing operation is executed in a single\n+thread per shard of indices being queried or indexed to. The node receiving\n+a request from a client becomes responsible for distributing that request to\n+the appropriate shards as well as reducing the results from those individual\n+shards into a single response. Even assuming that a cluster has sufficient\n+<<modules-threadpool,search threadpool threads>> available to immediately\n+process the requested action against all shards required by the request, the\n+overhead associated with making network requests to the nodes holding those\n+shards and with having to merge the results of results from many small shards\n+can lead to increased latency. This in turn can lead to exhaustion of the\n+threadpool and, as a result, decreased throughput.\n+\n+[discrete]\n+[[reduce-shard-counts-increase-shard-size]]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these methods to reduce oversharding.\n+\n+[discrete]\n+[[reduce-shards-for-new-indices]]\n+==== Reduce the number of shards for new indices\n+\n+You can specify the `index.number_of_shards` setting  for new indices created\n+with the <<indices-create-index,create index API>> or as part of\n+<<indices-templates,index templates>> for indices automatically created by\n+<<index-lifecycle-management,{ilm} ({ilm-init})>>.\n+\n+You can override the `index.number_of_shards`  when rolling over an index\n+using the <<rollover-index-api-example,rollover index API>>.\n+\n+[discrete]\n+[[create-larger-shards-by-increasing-rollover-thresholds]]\n+==== Create larger shards by increasing rollover thresholds\n+\n+You can roll over indices using the\n+<<indices-rollover-index,rollover index API>> or by specifying the\n+<<ilm-rollover-action,rollover action>> in an {ilm-init} policy. If using an\n+{ilm-init} policy, increase the rollover condition thresholds (`max_age`,\n+  `max_docs`, `max_size`)  to allow the indices to grow to a larger size\n+  before being rolled over, which creates larger shards.\n+\n+Take special note of any empty indices. These may be managed by an {ilm-init}\n+policy that is rolling over the indices because the `max_age` threshold is met.\n+In this case, you may need to adjust the policy to make use of the `max_docs`\n+or `max_size` properties to prevent the creation of these empty indices. One\n+example where this may happen is if one or more {beats} stop sending data. If\n+the {ilm-init}-managed indices for those {beats{ are configured to rollover\n+  daily, then new, empty indices will be generated each day. Empty indices can\n+  be identified using the <<cat-count,cat count API>>.\n+\n+[discrete]\n+[[create-larger-shards-with-index-patterns]]\n+==== Create larger shards by using index patterns spanning longer time periods\n+\n+Creating indices covering longer time periods reduces index and shard counts\n+while increasing index sizes. For example, instead of daily indices, you can\n+create monthly, or even yearly indices.\n+\n+If creating indices using {ls}, the \n+{logstash-ref}/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index[index]\n+property of the {es} output can be modified to a\n+<<date-math-index-names,date math expression>> covering a longer time period.\n+For example, use `logstash-%{+YYYY.MM}`` instead of `logstash-%{+YYYY.MM.dd}``\n+to create monthly, rather than daily, indices. {beats} also lets you change the\n+date math expression defined in the `index` property of the {es} output, such\n+as for {filebeat-ref}/elasticsearch-output.html#index-option-es[Filebeat].\n+\n+[discrete]\n+[[shrink-existing-index-to-fewer-shards]]\n+==== Shrink an existing index to fewer shards\n+\n+You can use the <<indices-shrink-index,shrink index API>> to shrink an\n+existing index down to a fewer shards.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82277745210bb2b0cef58e95723bf7ef9b4c2ba0"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODMxMTc1OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNDowNFrOGIs5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNDowNFrOGIs5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NzQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the {ilm-init}-managed indices for those {beats{ are configured to rollover\n          \n          \n            \n            the {ilm-init}-managed indices for those {beats} are configured to roll over", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411777459", "createdAt": "2020-04-21T00:14:04Z", "author": {"login": "debadair"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,148 @@\n+[[avoid-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the\n+same amount of data will lead to a more effective use of system resources\n+(CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d.\n+\n+The number of shards where this inflection point occurs depends on a variety\n+of factors, including:\n+\n+* available hardware\n+* indexing load\n+* data volume\n+* the types of queries executed against the clusters\n+* the rate of these queries being issued\n+* the volume of data being queried\n+\n+Testing against production data with production queries on production hardware\n+is the only way to calibrate optimal shard sizes. Shard sizes of tens of GB\n+are commonly used, and this may be a useful starting point from which to\n+experiment. {kib}'s {kibana-ref}/elasticsearch-metrics.html[{es} monitoring]\n+provides a useful view of historical cluster performance when evaluating the\n+impact of different shard sizes.\n+\n+[discrete]\n+[[oversharding-inefficient]]\n+=== Why oversharding is inefficient\n+\n+Each segment has metadata that needs to be kept in heap memory. These include\n+lists of fields, the number of documents, and terms dictionaries. As a shard\n+grows in size, the size of its segments generally grow because smaller segments\n+are <<index-modules-merge,merged>> into fewer, larger segments. This typically\n+reduces the amount of heap required by a shard\u2019s segment metadata for a given\n+data volume. At a bare minimum shards should be at least larger than 1GB to\n+make the most efficient use of memory. \n+\n+However, even though shards start to be more memory efficient at around 1GB,\n+a cluster full of 1GB shards will likely still perform poorly. This is because\n+having many small shards can also have a negative impact on search and\n+indexing operations. Each query or indexing operation is executed in a single\n+thread per shard of indices being queried or indexed to. The node receiving\n+a request from a client becomes responsible for distributing that request to\n+the appropriate shards as well as reducing the results from those individual\n+shards into a single response. Even assuming that a cluster has sufficient\n+<<modules-threadpool,search threadpool threads>> available to immediately\n+process the requested action against all shards required by the request, the\n+overhead associated with making network requests to the nodes holding those\n+shards and with having to merge the results of results from many small shards\n+can lead to increased latency. This in turn can lead to exhaustion of the\n+threadpool and, as a result, decreased throughput.\n+\n+[discrete]\n+[[reduce-shard-counts-increase-shard-size]]\n+=== How to reduce shard counts and increase shard size\n+\n+Try these methods to reduce oversharding.\n+\n+[discrete]\n+[[reduce-shards-for-new-indices]]\n+==== Reduce the number of shards for new indices\n+\n+You can specify the `index.number_of_shards` setting  for new indices created\n+with the <<indices-create-index,create index API>> or as part of\n+<<indices-templates,index templates>> for indices automatically created by\n+<<index-lifecycle-management,{ilm} ({ilm-init})>>.\n+\n+You can override the `index.number_of_shards`  when rolling over an index\n+using the <<rollover-index-api-example,rollover index API>>.\n+\n+[discrete]\n+[[create-larger-shards-by-increasing-rollover-thresholds]]\n+==== Create larger shards by increasing rollover thresholds\n+\n+You can roll over indices using the\n+<<indices-rollover-index,rollover index API>> or by specifying the\n+<<ilm-rollover-action,rollover action>> in an {ilm-init} policy. If using an\n+{ilm-init} policy, increase the rollover condition thresholds (`max_age`,\n+  `max_docs`, `max_size`)  to allow the indices to grow to a larger size\n+  before being rolled over, which creates larger shards.\n+\n+Take special note of any empty indices. These may be managed by an {ilm-init}\n+policy that is rolling over the indices because the `max_age` threshold is met.\n+In this case, you may need to adjust the policy to make use of the `max_docs`\n+or `max_size` properties to prevent the creation of these empty indices. One\n+example where this may happen is if one or more {beats} stop sending data. If\n+the {ilm-init}-managed indices for those {beats{ are configured to rollover", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82277745210bb2b0cef58e95723bf7ef9b4c2ba0"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODMxNjkxOnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjoxNFrOGIs8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjoxNFrOGIs8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Sometimes reducing the number of shards in a cluster while maintaining the\n          \n          \n            \n            same amount of data will lead to a more effective use of system resources\n          \n          \n            \n            In some cases, reducing the number of shards in a cluster while maintaining the\n          \n          \n            \n            same amount of data leads to a more effective use of system resources", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411778175", "createdAt": "2020-04-21T00:16:14Z", "author": {"login": "debadair"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,148 @@\n+[[avoid-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the\n+same amount of data will lead to a more effective use of system resources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82277745210bb2b0cef58e95723bf7ef9b4c2ba0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODMxNzc2OnYy", "diffSide": "RIGHT", "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjozM1rOGIs88w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjozM1rOGIs88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d.\n          \n          \n            \n            (CPU, RAM, IO). In these situations, we consider the cluster _oversharded_.", "url": "https://github.com/elastic/elasticsearch/pull/55480#discussion_r411778291", "createdAt": "2020-04-21T00:16:33Z", "author": {"login": "debadair"}, "path": "docs/reference/how-to/avoid-oversharding.asciidoc", "diffHunk": "@@ -0,0 +1,148 @@\n+[[avoid-oversharding]]\n+== Avoid oversharding\n+\n+Sometimes reducing the number of shards in a cluster while maintaining the\n+same amount of data will lead to a more effective use of system resources\n+(CPU, RAM, IO). In these situations, we consider the cluster \u201coversharded\u201d.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82277745210bb2b0cef58e95723bf7ef9b4c2ba0"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2741, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}