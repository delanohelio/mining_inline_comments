{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzY0NjA3", "number": 64981, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNjo0NlrOE4Lkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo0ODozNlrOE9Sblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQ1MzU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/41_date_parsing.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNjo0NlrOHx8wmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNjo0NlrOHx8wmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNzc1NA==", "bodyText": "we already have a parse function for dates haven't we? Could we use it here?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r522137754", "createdAt": "2020-11-12T14:16:46Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/41_date_parsing.yml", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+setup:\n+  - do:\n+      indices.create:\n+        index: sensor\n+        body:\n+          settings:\n+            number_of_shards: 1\n+            number_of_replicas: 0\n+          mappings:\n+            properties:\n+              timestamp:\n+                type: date\n+              temperature:\n+                type: long\n+              voltage:\n+                type: double\n+              node:\n+                type: keyword\n+              installed:\n+                type: runtime\n+                runtime_type: date\n+                script:\n+                  source: |\n+\n+                    long parseDate(Object obj) {\n+                      if (obj instanceof String) {\n+                        DateFormatter formatter = DateFormatter.forPattern(\"yyyy-MM-dd\");\n+                        return formatter.parseMillis((String)obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e330861ab089c2b51c29a925fb9ef10fcc4e843a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mzk3MTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/61_boolean_parsing.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjowMjo0N1rOHyBz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjowMjo0N1rOHyBz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIyMDUyMA==", "bodyText": "i think it'd be nice to handle a field at, say, sensor.output.voltage or something. So we can make sure we handle when sensor is an object or when it is an array. Or when output is an object or an array. I'm not familiar with what we do in the normal mapping when someone sends a field named sensor.output.voltage too. Or an object fields named sensor.output with a voltage field inside it. I think \"source only\" fields, however we build them, should handle all of those cases in the same way as the parsing infra.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r522220520", "createdAt": "2020-11-12T16:02:47Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/61_boolean_parsing.yml", "diffHunk": "@@ -0,0 +1,93 @@\n+---\n+setup:\n+  - do:\n+      indices.create:\n+        index: sensor\n+        body:\n+          settings:\n+            number_of_shards: 1\n+            number_of_replicas: 0\n+          mappings:\n+            properties:\n+              timestamp:\n+                type: date\n+              temperature:\n+                type: long\n+              voltage:\n+                type: double\n+              node:\n+                type: keyword\n+              active:\n+                type: runtime\n+                runtime_type: boolean\n+                script:\n+                  source: |\n+\n+                    boolean parseBoolean(Object obj) {\n+                      if (obj instanceof Boolean) {\n+                        return (Boolean) obj;\n+                      }\n+                      if (obj instanceof String) {\n+                        return Booleans.parseBoolean((String)obj);\n+                      }\n+                      throw new IllegalArgumentException();\n+                    }\n+\n+                    def vs = params._source.active;\n+                    if (vs instanceof List) {\n+                      for (def v : vs) {\n+                        try {\n+                          emit(parseBoolean(v));\n+                        }\n+                        catch (IllegalArgumentException e) {\n+                           // do nothing\n+                        }\n+                      }\n+                    }\n+                    else {\n+                      try {\n+                        emit(parseBoolean(vs));\n+                      }\n+                      catch (IllegalArgumentException e) {\n+                        // do nothing\n+                      }\n+                    }\n+\n+\n+\n+  - do:\n+      bulk:\n+        index: sensor\n+        refresh: true\n+        body: |\n+          {\"index\":{}}\n+          {\"timestamp\": 1516729294000, \"temperature\": 200, \"voltage\": 5.2, \"node\": \"a\", \"active\" : true }\n+          {\"index\":{}}\n+          {\"timestamp\": 1516642894000, \"temperature\": 201, \"voltage\": 5.8, \"node\": \"b\", \"active\" : [ true ] }\n+          {\"index\":{}}\n+          {\"timestamp\": 1516556494000, \"temperature\": 202, \"voltage\": 5.1, \"node\": \"a\", \"active\" : [ false, \"false\", true ] }\n+          {\"index\":{}}\n+          {\"timestamp\": 1516470094000, \"temperature\": 198, \"voltage\": 5.6, \"node\": \"b\", \"active\" : \"wibble\" }\n+          {\"index\":{}}\n+          {\"timestamp\": 1516383694000, \"temperature\": 200, \"voltage\": 4.2, \"node\": \"c\", \"active\" : [ 9, true, \"manglewurzle\" ] }\n+          {\"index\":{}}\n+          {\"timestamp\": 1516297294000, \"temperature\": 202, \"voltage\": 4.0, \"node\": \"c\", \"active\" : \"false\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e330861ab089c2b51c29a925fb9ef10fcc4e843a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTI1Njk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoxMTo1NVrOH5Comg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoxMTo1NVrOH5Comg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3NDA0Mg==", "bodyText": "Just a though, a bit controversial I reckon: although we are not documenting emitValues, I wonder if it's worth iterating on it and making it closer to what we will need in the long run. I see that the function is context dependent in how it extracts values from source. Would it make sense to instead have parse* functions that are independent of the context and can potentially be used in any context? I would be ok even if the default script loops over the returned values.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529574042", "createdAt": "2020-11-24T14:11:55Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -239,6 +235,10 @@ protected final void doXContentBody(XContentBuilder builder, boolean includeDefa\n \n         protected abstract AbstractScriptFieldType<?> buildFieldType();\n \n+        protected final Script defaultScript() {\n+            return new Script(\"emitValues(\\\"\" + name + \"\\\")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTI2Nzk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/BooleanFieldScript.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoxNDoxOVrOH5CvgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoxNDoxOVrOH5CvgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3NTgwOA==", "bodyText": "what exception may we get here? IllegalArgumentException because the value is neither \"true\" nor \"false\"?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529575808", "createdAt": "2020-11-24T14:14:19Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/BooleanFieldScript.java", "diffHunk": "@@ -84,4 +86,26 @@ public void value(boolean v) {\n             script.emit(v);\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final BooleanFieldScript script;\n+\n+        public EmitValues(BooleanFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof Boolean) {\n+                    script.emit((Boolean) v);\n+                } else if (v instanceof String) {\n+                    try {\n+                        script.emit(Booleans.parseBoolean((String) v));\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc4NDA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/BooleanFieldScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0NTowMFrOH5H1CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNzoxMFrOH5Pcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1OTE0NA==", "bodyText": "Can we add a comment to make it clear that this is temporary and only exposed through script-less runtime fields, undocumented on purpose?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529659144", "createdAt": "2020-11-24T15:45:00Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/BooleanFieldScript.java", "diffHunk": "@@ -84,4 +86,26 @@ public void value(boolean v) {\n             script.emit(v);\n         }\n     }\n+\n+    public static class EmitValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4Mzk1MQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529783951", "createdAt": "2020-11-24T18:17:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/BooleanFieldScript.java", "diffHunk": "@@ -84,4 +86,26 @@ public void value(boolean v) {\n             script.emit(v);\n         }\n     }\n+\n+    public static class EmitValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1OTE0NA=="}, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc5NDg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/11_keyword_parsing.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0NjoxN1rOH5H8Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0NjoxN1rOH5H8Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2MDk2Ng==", "bodyText": "shall we call these new test files differently e.g. source_only_keywords ?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529660966", "createdAt": "2020-11-24T15:46:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/11_keyword_parsing.yml", "diffHunk": "@@ -0,0 +1,71 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTgxNjI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/IpFieldScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0OTowNlrOH5ILEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxODozOFrOH5PgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NDc4NA==", "bodyText": "why not casting to string at this point?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529664784", "createdAt": "2020-11-24T15:49:06Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/IpFieldScript.java", "diffHunk": "@@ -111,4 +114,24 @@ public void emit(String v) {\n             script.emit(v);\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final IpFieldScript script;\n+\n+        public EmitValues(IpFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof String) {\n+                    try {\n+                        script.emit(v.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4NDkwNA==", "bodyText": "May as well cast if you've already instaceofed", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529784904", "createdAt": "2020-11-24T18:18:38Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/IpFieldScript.java", "diffHunk": "@@ -111,4 +114,24 @@ public void emit(String v) {\n             script.emit(v);\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final IpFieldScript script;\n+\n+        public EmitValues(IpFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof String) {\n+                    try {\n+                        script.emit(v.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NDc4NA=="}, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTg0ODk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1Mjo1OVrOH5Ig1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NzowNVrOH5Q6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MDM1Ng==", "bodyText": "does this mean that we can remove the parse function from the date context @nik9000 ?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529670356", "createdAt": "2020-11-24T15:52:59Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -75,4 +75,24 @@ public long parse(Object str) {\n             return script.formatter.parseMillis(str.toString());\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final DateFieldScript script;\n+\n+        public EmitValues(DateFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof String) {\n+                    try {\n+                        script.emit(script.formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2OTY4Nw==", "bodyText": "I believe we can, yes. We should do that either in this PR or in a follow up right after. Though I think maybe we're better off doing it in this one just because of all the lovely test coverage that adds. It might catch something funny about this PR that we didn't see.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529769687", "createdAt": "2020-11-24T17:54:55Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -75,4 +75,24 @@ public long parse(Object str) {\n             return script.formatter.parseMillis(str.toString());\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final DateFieldScript script;\n+\n+        public EmitValues(DateFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof String) {\n+                    try {\n+                        script.emit(script.formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MDM1Ng=="}, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzkzNQ==", "bodyText": "++ to doing that here then, it seems like parse won't have any use after this change anyways", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529807935", "createdAt": "2020-11-24T18:57:05Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -75,4 +75,24 @@ public long parse(Object str) {\n             return script.formatter.parseMillis(str.toString());\n         }\n     }\n+\n+    public static class EmitValues {\n+        private final DateFieldScript script;\n+\n+        public EmitValues(DateFieldScript script) {\n+            this.script = script;\n+        }\n+\n+        public void emitFromPath(String path) {\n+            for (Object v : script.extractFromSource(path)) {\n+                if (v instanceof String) {\n+                    try {\n+                        script.emit(script.formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MDM1Ng=="}, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjU3MDQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/mapper/boolean_whitelist.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxOToxM1rOH5Ph7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxOToxM1rOH5Ph7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4NTMyNA==", "bodyText": "I think this needs updating and a note that it is teporary.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r529785324", "createdAt": "2020-11-24T18:19:13Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/mapper/boolean_whitelist.txt", "diffHunk": "@@ -15,5 +15,7 @@ class org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript$Factory @n\n static_import {\n     # The `emit` callback to collect values for the field\n     void emit(org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript, boolean) bound_to org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript$Emit\n+    # The `values` callback to find values for the field in the source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f5693a34f00bb30fc070211029091f7aea1cd4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY4ODA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozODoyM1rOH52Vmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo0OTo0NlrOH521og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTE0Nw==", "bodyText": "this is no longer needed right?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530421147", "createdAt": "2020-11-25T14:38:23Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -75,4 +96,24 @@ public long parse(Object str) {\n             return script.formatter.parseMillis(str.toString());\n         }\n     }\n+\n+    public static class EmitValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyOTM0Ng==", "bodyText": "yep, missed it", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530429346", "createdAt": "2020-11-25T14:49:46Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -75,4 +96,24 @@ public long parse(Object str) {\n             return script.formatter.parseMillis(str.toString());\n         }\n     }\n+\n+    public static class EmitValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTE0Nw=="}, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY5Mjk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozOToyOFrOH52YzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1NjozN1rOH53KAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTk2NA==", "bodyText": "let's remove the parse function that's exposed for dates?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530421964", "createdAt": "2020-11-25T14:39:28Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -35,6 +35,27 @@\n         DateFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup, formatter) -> (LeafFactory) ctx -> new DateFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        formatter,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v instanceof String) {\n+                    try {\n+                        emit(formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyOTc2MA==", "bodyText": "I think it might still be required for Nik's tests?  I can try removing it and we'll see what CI says", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530429760", "createdAt": "2020-11-25T14:50:20Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -35,6 +35,27 @@\n         DateFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup, formatter) -> (LeafFactory) ctx -> new DateFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        formatter,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v instanceof String) {\n+                    try {\n+                        emit(formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTk2NA=="}, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNDU2Mw==", "bodyText": "ok, I keep forgetting that the tests for runtime fields in the search request are still running. Let's address that next then, I mean updating the tests and removing the function.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530434563", "createdAt": "2020-11-25T14:56:37Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateFieldScript.java", "diffHunk": "@@ -35,6 +35,27 @@\n         DateFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup, formatter) -> (LeafFactory) ctx -> new DateFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        formatter,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v instanceof String) {\n+                    try {\n+                        emit(formatter.parseMillis((String) v));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTk2NA=="}, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY5NzcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/mapper/ip_whitelist.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo0MDoyOVrOH52bkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1MDowMFrOH522VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMjY3NQ==", "bodyText": "was this missing?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530422675", "createdAt": "2020-11-25T14:40:29Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/mapper/ip_whitelist.txt", "diffHunk": "@@ -12,6 +12,9 @@ class org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript @no_import {\n class org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript$Factory @no_import {\n }\n \n+class java.net.InetAddress {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyOTUyNQ==", "bodyText": "missed removing this one too", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530429525", "createdAt": "2020-11-25T14:50:00Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/mapper/ip_whitelist.txt", "diffHunk": "@@ -12,6 +12,9 @@ class org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript @no_import {\n class org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript$Factory @no_import {\n }\n \n+class java.net.InetAddress {\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMjY3NQ=="}, "originalCommit": {"oid": "edabd56adbb8b6396537b4a836919f4e5da88f38"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjc4OTA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowMDoyMVrOH53U-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo0NDo0OFrOH55SyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzM3MA==", "bodyText": "Oh this is tricky! Could we use null here instead? I'm not a big of making a Script that no one can compile. It'll have stuff like engine=painless which is isn't.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530437370", "createdAt": "2020-11-25T15:00:21Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -206,6 +206,9 @@ protected final void doXContentBody(XContentBuilder builder, boolean includeDefa\n         toXContent.accept(builder, includeDefaults);\n     }\n \n+    // Placeholder Script for source-only fields\n+    private static final Script DEFAULT_SCRIPT = new Script(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NTg2MA==", "bodyText": "On second though, I think null is difficult here because we dereference the script all over the place. I plan to rework a lot of those dereferences eventually anyway so maybe we can just swear that we'll remove this \"very soon\" and be ok with it.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530445860", "createdAt": "2020-11-25T15:11:56Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -206,6 +206,9 @@ protected final void doXContentBody(XContentBuilder builder, boolean includeDefa\n         toXContent.accept(builder, includeDefaults);\n     }\n \n+    // Placeholder Script for source-only fields\n+    private static final Script DEFAULT_SCRIPT = new Script(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzM3MA=="}, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2OTU3Ng==", "bodyText": "let's add a TODO just to make it clear that this is temporary?", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530469576", "createdAt": "2020-11-25T15:44:48Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -206,6 +206,9 @@ protected final void doXContentBody(XContentBuilder builder, boolean includeDefa\n         toXContent.accept(builder, includeDefaults);\n     }\n \n+    // Placeholder Script for source-only fields\n+    private static final Script DEFAULT_SCRIPT = new Script(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzM3MA=="}, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzAwNTY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/StringFieldScript.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo0ODozNlrOH55dxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDoyNzowOFrOH6C4pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3MjM4OA==", "bodyText": "do we need to check for the result of toString? emit(null) will cause an error and we are not catching exceptions here", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530472388", "createdAt": "2020-11-25T15:48:36Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/StringFieldScript.java", "diffHunk": "@@ -41,6 +41,22 @@\n         StringFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup) -> (LeafFactory) ctx -> new StringFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v != null) {\n+                    emit(v.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyMjIyMQ==", "bodyText": "If toString returns null we're in a sad place.", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530622221", "createdAt": "2020-11-25T20:18:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/StringFieldScript.java", "diffHunk": "@@ -41,6 +41,22 @@\n         StringFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup) -> (LeafFactory) ctx -> new StringFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v != null) {\n+                    emit(v.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3MjM4OA=="}, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNjcyNw==", "bodyText": "true. I got carried away I think :)", "url": "https://github.com/elastic/elasticsearch/pull/64981#discussion_r530626727", "createdAt": "2020-11-25T20:27:08Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/StringFieldScript.java", "diffHunk": "@@ -41,6 +41,22 @@\n         StringFieldScript newInstance(LeafReaderContext ctx);\n     }\n \n+    public static final Factory PARSE_FROM_SOURCE = (field, params, lookup) -> (LeafFactory) ctx -> new StringFieldScript(\n+        field,\n+        params,\n+        lookup,\n+        ctx\n+    ) {\n+        @Override\n+        public void execute() {\n+            for (Object v : extractFromSource(field)) {\n+                if (v != null) {\n+                    emit(v.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3MjM4OA=="}, "originalCommit": {"oid": "a139edd228e8a5bdb76cbe686e2027230082a467"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2982, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}