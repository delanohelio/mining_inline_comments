{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMTI4MzQ4", "number": 51901, "title": "EQL: Convert wildcards to LIKE in analyzer", "bodyText": "Addressing the comment thread from #51558 (comment).\nAdded ReplaceWildcards to the optimizer which detects the == \"wild*card*\" or != \"wild*card*\" patterns and replaces with LIKE.\nThis is branched from #51886, so only the last commit is relevant.\nUpdate: Resolves #53104", "createdAt": "2020-02-05T00:36:22Z", "url": "https://github.com/elastic/elasticsearch/pull/51901", "merged": true, "mergeCommit": {"oid": "51adeaa160953c379184d6188345765bd4aa8061"}, "closed": true, "closedAt": "2020-03-06T20:12:00Z", "author": {"login": "rw-access"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBUQyvgFqTM1MzYwNTg0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKeO5ggH2gAyMzcxMTI4MzQ4Ojg3ZWUzODRkNGM2YTg3NDZkMDdmMWUwOTZkN2U0NzNjOWI2YmRhMjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjA1ODQ2", "url": "https://github.com/elastic/elasticsearch/pull/51901#pullrequestreview-353605846", "createdAt": "2020-02-05T10:22:07Z", "commit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDoyMjowOFrOFlyn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDozMjoxN1rOFly8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MTAzMw==", "bodyText": "Can a wildcard appear in any type of string? e.g. some*glob?\nI wonder whether the parser could detect it so instead of having Literal that might a string, it could have its own expression rule.", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375171033", "createdAt": "2020-02-05T10:22:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -42,4 +60,110 @@ private LogicalPlan verify(LogicalPlan plan) {\n         }\n         return plan;\n     }\n+\n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzY0Ng==", "bodyText": "A potential improvement is to check whether an expression is foldable instead of being a literal.\nThus if string concatenation were to be added, the rule would still be applied:\nif (e.foldable() && e.fold() instanceof String) {\n    return e.fold().toString().contains(\"*\");\n}\nwhich can be transformed into a one-liner:\nreturn e.foldable() && e.fold() instanceof String && e.fold().toString().contains(\"*\");", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375173646", "createdAt": "2020-02-05T10:27:19Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -42,4 +60,110 @@ private LogicalPlan verify(LogicalPlan plan) {\n         }\n         return plan;\n     }\n+\n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTEyNg==", "bodyText": "what about foo > \"wild*card\" or other value comparisons?\nIf that's valid grammar, the verifier should pick the pattern and fail the query.", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375175126", "createdAt": "2020-02-05T10:30:07Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -42,4 +60,110 @@ private LogicalPlan verify(LogicalPlan plan) {\n         }\n         return plan;\n     }\n+\n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                                 .replace(\"_\", escape + \"_\")\n+                                 .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTM4Ng==", "bodyText": "isWildcard already does the checks so simply do: eq.fold().toString()", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375175386", "createdAt": "2020-02-05T10:30:39Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -42,4 +60,110 @@ private LogicalPlan verify(LogicalPlan plan) {\n         }\n         return plan;\n     }\n+\n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                                 .replace(\"_\", escape + \"_\")\n+                                 .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) ((Literal) eq.right()).value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NjIxMA==", "bodyText": "the rule makes the assumption that the literal is always on the right hand side which not always the case: \"wildcard*phrase\" != expr is also valid.\nThus the rule is better inside the optimizer, which will also handle folding and move the literals to right (#51929).", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375176210", "createdAt": "2020-02-05T10:32:17Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -42,4 +60,110 @@ private LogicalPlan verify(LogicalPlan plan) {\n         }\n         return plan;\n     }\n+\n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                                 .replace(\"_\", escape + \"_\")\n+                                 .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) ((Literal) eq.right()).value();\n+                        e = new Like(e.source(), eq.left(), toLikePattern(wcString));\n+                    }\n+                }\n+\n+                // expr != \"wildcard*phrase\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjk5NDYx", "url": "https://github.com/elastic/elasticsearch/pull/51901#pullrequestreview-353699461", "createdAt": "2020-02-05T13:07:05Z", "commit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzowNzowNVrOFl3Cbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzowNzowNVrOFl3Cbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0MzM3NA==", "bodyText": "Would be possible to add more tests that also look at scenarios involving escape characters and all types of string that eql supports?\nCan the * be escaped? If so, we should have a test covering this case.", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r375243374", "createdAt": "2020-02-05T13:07:05Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -51,6 +61,60 @@ private LogicalPlan verify(LogicalPlan plan) {\n         return plan;\n     }\n \n+    private static class ReplaceWildcards extends AnalyzeRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61da57cc693b0a9f3b90ba55d7e021a9f3654140", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/61da57cc693b0a9f3b90ba55d7e021a9f3654140", "committedDate": "2020-02-05T00:30:08Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}, "afterCommit": {"oid": "32232515cce148213fd4760388172868f0dc0fb0", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/32232515cce148213fd4760388172868f0dc0fb0", "committedDate": "2020-02-05T16:51:21Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32232515cce148213fd4760388172868f0dc0fb0", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/32232515cce148213fd4760388172868f0dc0fb0", "committedDate": "2020-02-05T16:51:21Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}, "afterCommit": {"oid": "a294d144019f062a49176300e0674dca34b6ccdb", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/a294d144019f062a49176300e0674dca34b6ccdb", "committedDate": "2020-02-05T16:53:28Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a294d144019f062a49176300e0674dca34b6ccdb", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/a294d144019f062a49176300e0674dca34b6ccdb", "committedDate": "2020-02-05T16:53:28Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}, "afterCommit": {"oid": "14b37e830df31ed36aa7f1e118e8a53d2a1cd3e7", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/14b37e830df31ed36aa7f1e118e8a53d2a1cd3e7", "committedDate": "2020-02-05T16:56:46Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14b37e830df31ed36aa7f1e118e8a53d2a1cd3e7", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/14b37e830df31ed36aa7f1e118e8a53d2a1cd3e7", "committedDate": "2020-02-05T16:56:46Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}, "afterCommit": {"oid": "fd1cd70b907f5e83e3096ef8385c37af49267484", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd1cd70b907f5e83e3096ef8385c37af49267484", "committedDate": "2020-02-05T16:57:41Z", "message": "EQL: Convert wildcards to LIKE in analyzer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc5e6f7dffeba8f843991747ef3954fe2b36e48", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/ffc5e6f7dffeba8f843991747ef3954fe2b36e48", "committedDate": "2020-02-25T18:16:54Z", "message": "EQL: Convert wildcard comparisons to Like"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f39bb01684c774704546d4d2c20d25756a14499", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f39bb01684c774704546d4d2c20d25756a14499", "committedDate": "2020-02-10T22:45:50Z", "message": "Merge remote-tracking branch 'origin/master' into eql/wildcards"}, "afterCommit": {"oid": "ffc5e6f7dffeba8f843991747ef3954fe2b36e48", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/ffc5e6f7dffeba8f843991747ef3954fe2b36e48", "committedDate": "2020-02-25T18:16:54Z", "message": "EQL: Convert wildcard comparisons to Like"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc610ba7c59f7e55bda8aa584e41a27f74c3c171", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/cc610ba7c59f7e55bda8aa584e41a27f74c3c171", "committedDate": "2020-03-04T17:13:30Z", "message": "Merge remote-tracking branch 'origin/master' into eql/wildcards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6f8c397acd2bf199d929d3b54104d6f36140772", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/d6f8c397acd2bf199d929d3b54104d6f36140772", "committedDate": "2020-03-04T17:34:04Z", "message": "EQL: Simplify wildcard handling, update tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDUxNDQ5", "url": "https://github.com/elastic/elasticsearch/pull/51901#pullrequestreview-369051449", "createdAt": "2020-03-04T19:17:07Z", "commit": {"oid": "d6f8c397acd2bf199d929d3b54104d6f36140772"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNzowN1rOFx6Odg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxODo0N1rOFx6SIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODUxOA==", "bodyText": "The comment seems incorrect as it referred to PropagateEquals", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r387878518", "createdAt": "2020-03-04T19:17:07Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -33,6 +43,7 @@ public LogicalPlan optimize(LogicalPlan verified) {\n                 new BooleanSimplification(),\n                 new BooleanLiteralsOnTheRight(),\n                 // needs to occur before BinaryComparison combinations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6f8c397acd2bf199d929d3b54104d6f36140772"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3OTQ1OQ==", "bodyText": "Why not 0?", "url": "https://github.com/elastic/elasticsearch/pull/51901#discussion_r387879459", "createdAt": "2020-03-04T19:18:47Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +56,51 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr.foldable()) {\n+                Object value = expr.fold();\n+                return value instanceof String && value.toString().contains(\"*\");\n+            }\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6f8c397acd2bf199d929d3b54104d6f36140772"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ee384d4c6a8746d07f1e096d7e473c9b6bda26", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/87ee384d4c6a8746d07f1e096d7e473c9b6bda26", "committedDate": "2020-03-04T21:58:45Z", "message": "EQL: Lint fixes for Optimizer.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2804, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}