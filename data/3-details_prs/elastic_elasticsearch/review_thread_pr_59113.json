{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTM4MTY2", "number": 59113, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjozNDoyOFrOEMwoQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjozNDoyOFrOEMwoQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODE1MTA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjozNDoyOFrOGvDfgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxMDozM1rOGvKrDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk5MzQ3Mg==", "bodyText": "Can we have a non-match wildcard as well?\n        PlainActionFuture<GetApiKeyResponse> listener4 = new PlainActionFuture<>();\n        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(\"not-test-key*\", false), listener4);\n        assertThat(listener4.get().getApiKeyInfos(), arrayWithSize(0));\n\nIdeally a subset match (find 2 out of the 3 keys) would be nice, but the test infrastructure in this class doesn't make that easy.", "url": "https://github.com/elastic/elasticsearch/pull/59113#discussion_r451993472", "createdAt": "2020-07-09T06:34:28Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -532,13 +532,21 @@ public void testGetApiKeysForApiKeyId() throws InterruptedException, ExecutionEx\n     }\n \n     public void testGetApiKeysForApiKeyName() throws InterruptedException, ExecutionException {\n-        List<CreateApiKeyResponse> responses = createApiKeys(1, null);\n+        List<CreateApiKeyResponse> responses = createApiKeys(3, null);\n         Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\", UsernamePasswordToken\n                 .basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n         PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n         client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(responses.get(0).getName(), false), listener);\n         GetApiKeyResponse response = listener.get();\n         verifyGetResponse(1, responses, response, Collections.singleton(responses.get(0).getId()), null);\n+\n+        PlainActionFuture<GetApiKeyResponse> listener2 = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(\"test-key*\", false), listener2);\n+        verifyGetResponse(3, responses, listener2.get(), responses.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n+\n+        PlainActionFuture<GetApiKeyResponse> listener3 = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(\"*\", false), listener2);\n+        verifyGetResponse(3, responses, listener2.get(), responses.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3766814086130c1889cb843616d9918b68f9a85"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMTExOQ==", "bodyText": "Thanks. Added tests for both \"non-matching wildcard\" and \"subset match\".", "url": "https://github.com/elastic/elasticsearch/pull/59113#discussion_r452111119", "createdAt": "2020-07-09T10:10:33Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -532,13 +532,21 @@ public void testGetApiKeysForApiKeyId() throws InterruptedException, ExecutionEx\n     }\n \n     public void testGetApiKeysForApiKeyName() throws InterruptedException, ExecutionException {\n-        List<CreateApiKeyResponse> responses = createApiKeys(1, null);\n+        List<CreateApiKeyResponse> responses = createApiKeys(3, null);\n         Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\", UsernamePasswordToken\n                 .basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n         PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n         client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(responses.get(0).getName(), false), listener);\n         GetApiKeyResponse response = listener.get();\n         verifyGetResponse(1, responses, response, Collections.singleton(responses.get(0).getId()), null);\n+\n+        PlainActionFuture<GetApiKeyResponse> listener2 = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(\"test-key*\", false), listener2);\n+        verifyGetResponse(3, responses, listener2.get(), responses.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n+\n+        PlainActionFuture<GetApiKeyResponse> listener3 = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.usingApiKeyName(\"*\", false), listener2);\n+        verifyGetResponse(3, responses, listener2.get(), responses.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk5MzQ3Mg=="}, "originalCommit": {"oid": "c3766814086130c1889cb843616d9918b68f9a85"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1974, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}