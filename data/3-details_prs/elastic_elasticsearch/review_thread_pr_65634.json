{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5Nzc2MDg1", "number": 65634, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MToxMlrOE-9d5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDoxMTo0OFrOFYMaXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU0MjQ1OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MToxMlrOH8ZH7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MToxMlrOH8ZH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4ODIzOQ==", "bodyText": "getKeyUsage() returns boolean[], but we need to decode it into the actual usage types (see the Javadoc for getKeyUsage for a description of each index)\nOutput like\nkeyUsage [true,true,false,false,true,false,true,false,false]\n\nisn't explanatory enough for this diagnostic message.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533088239", "createdAt": "2020-12-01T05:51:12Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +413,38 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        return Optional.ofNullable(certificate.getKeyUsage())\n+            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU0Mzg4OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MTo0OVrOH8ZIuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MTo0OVrOH8ZIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4ODQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .append(\"] and \")\n          \n          \n            \n                        .append(\"], \")", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533088443", "createdAt": "2020-12-01T05:51:49Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -178,7 +179,13 @@ public static String getTrustDiagnosticFailure(X509Certificate[] chain, PeerType\n             .append(\" provided a certificate with subject name [\")\n             .append(peerCert.getSubjectX500Principal().getName())\n             .append(\"] and \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU0NDEyOnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MTo1OFrOH8ZI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MTo1OFrOH8ZI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4ODQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .append(\" and \")\n          \n          \n            \n                        .append(\", \")", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533088480", "createdAt": "2020-12-01T05:51:58Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -178,7 +179,13 @@ public static String getTrustDiagnosticFailure(X509Certificate[] chain, PeerType\n             .append(\" provided a certificate with subject name [\")\n             .append(peerCert.getSubjectX500Principal().getName())\n             .append(\"] and \")\n-            .append(fingerprintDescription(peerCert));\n+            .append(fingerprintDescription(peerCert))\n+            .append(\" and \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU1OTEwOnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1OTozMlrOH8ZRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1OTozMlrOH8ZRzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MDc2Ng==", "bodyText": "getExtendedKeyUsage() returns a List of OIDs.\nFor the standard OIDs (defined here https://tools.ietf.org/html/rfc5280#page-44), we need to decode those OIDs into useful names.\nNon standard OIDs should be left in their dotted notation.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533090766", "createdAt": "2020-12-01T05:59:32Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +413,38 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        return Optional.ofNullable(certificate.getKeyUsage())\n+            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")\n+            .orElse(\"no keyUsage\");\n+    }\n+\n+    private static String extendedKeyUsageDescription(X509Certificate certificate) {\n+        try {\n+            return Optional.ofNullable(certificate.getExtendedKeyUsage())\n+                .map(list -> generateExtendedKeyUsageDescription(list))\n+                .orElse(\"no extendedKeyUsage\");\n+        } catch (CertificateParsingException e) {\n+            return \"invalid extendedKeyUsage [\" + e.toString() + \"]\";\n+        }\n+    }\n+\n+    private static String generateExtendedKeyUsageDescription(List<String> list) {\n+        return list.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU2MDYxOnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjowMDoxNVrOH8ZSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjowMDoxNVrOH8ZSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTAwMQ==", "bodyText": "For brevity we can omit articles from the diagnostic\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    message.append(\"; the session supports the cipher suite [\")\n          \n          \n            \n                    message.append(\"; the session supports cipher suite [\")", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533091001", "createdAt": "2020-12-01T06:00:15Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +413,38 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        return Optional.ofNullable(certificate.getKeyUsage())\n+            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")\n+            .orElse(\"no keyUsage\");\n+    }\n+\n+    private static String extendedKeyUsageDescription(X509Certificate certificate) {\n+        try {\n+            return Optional.ofNullable(certificate.getExtendedKeyUsage())\n+                .map(list -> generateExtendedKeyUsageDescription(list))\n+                .orElse(\"no extendedKeyUsage\");\n+        } catch (CertificateParsingException e) {\n+            return \"invalid extendedKeyUsage [\" + e.toString() + \"]\";\n+        }\n+    }\n+\n+    private static String generateExtendedKeyUsageDescription(List<String> list) {\n+        return list.stream()\n+            .reduce((x, y) -> x + \", \" + y)\n+            .map(str -> \"extendedKeyUsage [\" + str + \"]\")\n+            .orElse(\"no extendedKeyUsage\");\n+    }\n+\n+    private static void addSessionDescription(SSLSession session, StringBuilder message) {\n+        String cipherSuite = Optional.ofNullable(session).map(SSLSession::getCipherSuite).orElse(\"<unknown cipherSuite>\");\n+        String protocol = Optional.ofNullable(session).map(SSLSession::getProtocol).orElse(\"<unknown protocol>\");\n+        message.append(\"; the session supports the cipher suite [\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU2MTQ5OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjowMDozOVrOH8ZTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjowMDozOVrOH8ZTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .append(\"] and \")\n          \n          \n            \n                        .append(\"the protocol [\")\n          \n          \n            \n                        .append(\"] and protocol [\")", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533091133", "createdAt": "2020-12-01T06:00:39Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +413,38 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        return Optional.ofNullable(certificate.getKeyUsage())\n+            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")\n+            .orElse(\"no keyUsage\");\n+    }\n+\n+    private static String extendedKeyUsageDescription(X509Certificate certificate) {\n+        try {\n+            return Optional.ofNullable(certificate.getExtendedKeyUsage())\n+                .map(list -> generateExtendedKeyUsageDescription(list))\n+                .orElse(\"no extendedKeyUsage\");\n+        } catch (CertificateParsingException e) {\n+            return \"invalid extendedKeyUsage [\" + e.toString() + \"]\";\n+        }\n+    }\n+\n+    private static String generateExtendedKeyUsageDescription(List<String> list) {\n+        return list.stream()\n+            .reduce((x, y) -> x + \", \" + y)\n+            .map(str -> \"extendedKeyUsage [\" + str + \"]\")\n+            .orElse(\"no extendedKeyUsage\");\n+    }\n+\n+    private static void addSessionDescription(SSLSession session, StringBuilder message) {\n+        String cipherSuite = Optional.ofNullable(session).map(SSLSession::getCipherSuite).orElse(\"<unknown cipherSuite>\");\n+        String protocol = Optional.ofNullable(session).map(SSLSession::getProtocol).orElse(\"<unknown protocol>\");\n+        message.append(\"; the session supports the cipher suite [\")\n+            .append(cipherSuite)\n+            .append(\"] and \")\n+            .append(\"the protocol [\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDU2NTI4OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslDiagnosticsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjowMjoyNlrOH8ZVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0NDoyMlrOH84hgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTcwNQ==", "bodyText": "We need some of the tests to have real values for all of these.\nAs it is we're only testing the \"no value\" cases, which is the least important case.\nThat will require regenerating some of the certs (and updating the fingerprints) to have key usage properties.\n(see libs/ssl-config/src/test/resources/certs/README.txt)\nand/or changing mockCertificateWithIssuer and session to provide mock values.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533091705", "createdAt": "2020-12-01T06:02:26Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslDiagnosticsTests.java", "diffHunk": "@@ -63,7 +63,8 @@ public void testDiagnosticMessageWhenServerProvidesAFullCertChainThatIsTrusted()\n         final String message = SslDiagnostics.getTrustDiagnosticFailure(chain, SslDiagnostics.PeerType.SERVER, session,\n             \"xpack.http.ssl\", trustIssuers);\n         assertThat(message, Matchers.equalTo(\"failed to establish trust with server at [192.168.1.1];\" +\n-            \" the server provided a certificate with subject name [CN=cert1] and fingerprint [3bebe388a66362784afd6c51a9000961a4e10050];\" +\n+            \" the server provided a certificate with subject name [CN=cert1] and fingerprint [3bebe388a66362784afd6c51a9000961a4e10050] and no keyUsage and no extendedKeyUsage;\" +\n+            \" the session supports the cipher suite [<unknown cipherSuite>] and the protocol [<unknown protocol>];\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwMjY4OQ==", "bodyText": "I've edited the mockCertificateWithIssuer and session methods to provide mock values. I attempted to regenerate the cert yesterday without much success, so went with the mocking. Let me know if this works.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533602689", "createdAt": "2020-12-01T17:44:22Z", "author": {"login": "sindhusp"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslDiagnosticsTests.java", "diffHunk": "@@ -63,7 +63,8 @@ public void testDiagnosticMessageWhenServerProvidesAFullCertChainThatIsTrusted()\n         final String message = SslDiagnostics.getTrustDiagnosticFailure(chain, SslDiagnostics.PeerType.SERVER, session,\n             \"xpack.http.ssl\", trustIssuers);\n         assertThat(message, Matchers.equalTo(\"failed to establish trust with server at [192.168.1.1];\" +\n-            \" the server provided a certificate with subject name [CN=cert1] and fingerprint [3bebe388a66362784afd6c51a9000961a4e10050];\" +\n+            \" the server provided a certificate with subject name [CN=cert1] and fingerprint [3bebe388a66362784afd6c51a9000961a4e10050] and no keyUsage and no extendedKeyUsage;\" +\n+            \" the session supports the cipher suite [<unknown cipherSuite>] and the protocol [<unknown protocol>];\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTcwNQ=="}, "originalCommit": {"oid": "3d8562345254269163e23b1f0397a9f1e6e23e06"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzgxMzc2OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1Njo0MFrOH85A8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwMzo1NzoyNFrOIiDVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMDczNw==", "bodyText": "Should I use an enum here too like I've done with ExtendedKeyUsage, for uniformity? I could define the index as the Enum field.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r533610737", "createdAt": "2020-12-01T17:56:40Z", "author": {"login": "sindhusp"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -415,23 +440,40 @@ private static boolean isSelfIssued(X509Certificate certificate) {\n     }\n \n     private static String keyUsageDescription(X509Certificate certificate) {\n-        return Optional.ofNullable(certificate.getKeyUsage())\n-            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU3NzA1MA==", "bodyText": "I think either is fine.\nI do like the consistency of having an enum for each, but it would require care so that the ordinals matched correctly.\nI think my personal preference would be to just move this array to be a constant that is declared in the same part of the file as ExtendedKeyUsage", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572577050", "createdAt": "2021-02-09T03:57:24Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -415,23 +440,40 @@ private static boolean isSelfIssued(X509Certificate certificate) {\n     }\n \n     private static String keyUsageDescription(X509Certificate certificate) {\n-        return Optional.ofNullable(certificate.getKeyUsage())\n-            .map(keyUsage -> \"keyUsage [\" + Arrays.toString(keyUsage) + \"]\")\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMDczNw=="}, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwOTEwMjU4OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwMzo1NTowNlrOIiDSXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwMzo1NTowNlrOIiDSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU3NjM0OA==", "bodyText": "e.oid can never be null, because this is an enum with fixed (non-null) values.\nI think it's fine to skip the null check here.\nIf you'd prefer to be safe, you could use this.oid = Objects.requireNonNull(oid); in the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572576348", "createdAt": "2021-02-09T03:55:06Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -151,6 +153,30 @@ boolean isSameCertificate() {\n         }\n     }\n \n+    public enum ExtendedKeyUsage {\n+        serverAuth (\"1.3.6.1.5.5.7.3.1\"),\n+        clientAuth (\"1.3.6.1.5.5.7.3.2\"),\n+        codeSigning (\"1.3.6.1.5.5.7.3.3\"),\n+        emailProtection (\"1.3.6.1.5.5.7.3.4\"),\n+        timeStamping (\"1.3.6.1.5.5.7.3.8\"),\n+        ocspSigning (\"1.3.6.1.5.5.7.3.9\");\n+\n+        private String oid;\n+\n+        private ExtendedKeyUsage(String oid) {\n+            this.oid = oid;\n+        }\n+\n+        public static String decodeOid(String oid) {\n+            for (ExtendedKeyUsage e : values()) {\n+                if (e.oid != null && e.oid.equals(oid)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwOTExNTI4OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDowMTozNVrOIiDZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDowMTozNVrOIiDZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU3ODIwMQ==", "bodyText": "For safety we should check that i < keyUsageGlossary.length", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572578201", "createdAt": "2021-02-09T04:01:35Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +438,58 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",\n+            \"dataEncipherment\", \"keyAgreement\", \"keyCertSign\", \"cRLSign\", \"encipherOnly\",\n+            \"decipherOnly\"};\n+\n+        List<String> keyUsageDescription = new ArrayList<>();\n+        IntStream.range(0, keyUsage.length).forEach(i -> {\n+            if (keyUsage[i]) {\n+                keyUsageDescription.add(keyUsageGlossary[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwOTEyOTA4OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDowODozNlrOIiDhbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDowODozNlrOIiDhbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU4MDIwNA==", "bodyText": "The style use have used here is fine, but I would have written it like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> keyUsageDescription = new ArrayList<>();\n          \n          \n            \n                    IntStream.range(0, keyUsage.length).forEach(i -> {\n          \n          \n            \n                        if (keyUsage[i]) {\n          \n          \n            \n                            keyUsageDescription.add(keyUsageGlossary[i]);\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    return keyUsageDescription.stream()\n          \n          \n            \n                        .reduce((a, b) -> a + \", \" + b)\n          \n          \n            \n                    String keyUsageDescription = IntStream.range(0, keyUsage.length)\n          \n          \n            \n                      .filter(i -> keyUsage[i])\n          \n          \n            \n                      .map(i -> i < keyUsageGlossary.length ? keyUsageGlossary[i] : \"#\" + i)\n          \n          \n            \n                      .collect(Collectors.joining(\", \"));\n          \n      \n    \n    \n  \n\nAnd then tested whether that was empty or not.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572580204", "createdAt": "2021-02-09T04:08:36Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +438,58 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",\n+            \"dataEncipherment\", \"keyAgreement\", \"keyCertSign\", \"cRLSign\", \"encipherOnly\",\n+            \"decipherOnly\"};\n+\n+        List<String> keyUsageDescription = new ArrayList<>();\n+        IntStream.range(0, keyUsage.length).forEach(i -> {\n+            if (keyUsage[i]) {\n+                keyUsageDescription.add(keyUsageGlossary[i]);\n+            }\n+        });\n+        return keyUsageDescription.stream()\n+            .reduce((a, b) -> a + \", \" + b)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwOTEzMzE3OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDoxMDozN1rOIiDjqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDoxMDozN1rOIiDjqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU4MDc3OQ==", "bodyText": "You have this orElse case both here, and in  generateExtendedKeyUsageDescription and I don't think that's necessary.", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572580779", "createdAt": "2021-02-09T04:10:37Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +438,58 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",\n+            \"dataEncipherment\", \"keyAgreement\", \"keyCertSign\", \"cRLSign\", \"encipherOnly\",\n+            \"decipherOnly\"};\n+\n+        List<String> keyUsageDescription = new ArrayList<>();\n+        IntStream.range(0, keyUsage.length).forEach(i -> {\n+            if (keyUsage[i]) {\n+                keyUsageDescription.add(keyUsageGlossary[i]);\n+            }\n+        });\n+        return keyUsageDescription.stream()\n+            .reduce((a, b) -> a + \", \" + b)\n+            .map(str ->  \"keyUsage [\" + str + \"]\")\n+            .orElse(\"no keyUsage\");\n+    }\n+\n+    private static String extendedKeyUsageDescription(X509Certificate certificate) {\n+        try {\n+            return Optional.ofNullable(certificate.getExtendedKeyUsage())\n+                .map(keyUsage -> generateExtendedKeyUsageDescription(keyUsage))\n+                .orElse(\"no extendedKeyUsage\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwOTEzNTAyOnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDoxMTo0OFrOIiDk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwNDoxMTo0OFrOIiDk1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjU4MTA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    message.append(\"; the session supports cipher suite [\")\n          \n          \n            \n                    message.append(\"; the session uses cipher suite [\")\n          \n      \n    \n    \n  \n\nStrictly, by the time we get to a session being established it's not really \"supports\", it's \"has selected for use\"", "url": "https://github.com/elastic/elasticsearch/pull/65634#discussion_r572581076", "createdAt": "2021-02-09T04:11:48Z", "author": {"login": "tvernum"}, "path": "libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/SslDiagnostics.java", "diffHunk": "@@ -406,4 +438,58 @@ private static boolean checkIssuer(X509Certificate certificate, X509Certificate\n     private static boolean isSelfIssued(X509Certificate certificate) {\n         return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n     }\n+\n+    private static String keyUsageDescription(X509Certificate certificate) {\n+        boolean[] keyUsage = certificate.getKeyUsage();\n+        if (keyUsage == null || keyUsage.length == 0) {\n+            return \"no keyUsage\";\n+        }\n+\n+        final String[] keyUsageGlossary = {\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\",\n+            \"dataEncipherment\", \"keyAgreement\", \"keyCertSign\", \"cRLSign\", \"encipherOnly\",\n+            \"decipherOnly\"};\n+\n+        List<String> keyUsageDescription = new ArrayList<>();\n+        IntStream.range(0, keyUsage.length).forEach(i -> {\n+            if (keyUsage[i]) {\n+                keyUsageDescription.add(keyUsageGlossary[i]);\n+            }\n+        });\n+        return keyUsageDescription.stream()\n+            .reduce((a, b) -> a + \", \" + b)\n+            .map(str ->  \"keyUsage [\" + str + \"]\")\n+            .orElse(\"no keyUsage\");\n+    }\n+\n+    private static String extendedKeyUsageDescription(X509Certificate certificate) {\n+        try {\n+            return Optional.ofNullable(certificate.getExtendedKeyUsage())\n+                .map(keyUsage -> generateExtendedKeyUsageDescription(keyUsage))\n+                .orElse(\"no extendedKeyUsage\");\n+        } catch (CertificateParsingException e) {\n+            return \"invalid extendedKeyUsage [\" + e.toString() + \"]\";\n+        }\n+    }\n+\n+    private static String generateExtendedKeyUsageDescription(List<String> oids) {\n+        return oids.stream()\n+            .map(ExtendedKeyUsage::decodeOid)\n+            .reduce((x, y) -> x + \", \" + y)\n+            .map(str -> \"extendedKeyUsage [\" + str + \"]\")\n+            .orElse(\"no extendedKeyUsage\");\n+    }\n+\n+    private static void addSessionDescription(SSLSession session, StringBuilder message) {\n+        String cipherSuite = Optional.ofNullable(session)\n+            .map(SSLSession::getCipherSuite)\n+            .orElse(\"<unknown cipherSuite>\");\n+        String protocol = Optional.ofNullable(session)\n+            .map(SSLSession::getProtocol)\n+            .orElse(\"<unknown protocol>\");\n+        message.append(\"; the session supports cipher suite [\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6af049fcfdf585ddc0d5b3225d95fc769b308c8"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}