{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDQ5MDAw", "number": 63063, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyOToyNFrOEp21Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNDo0M1rOEp3wEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI1NDEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyOToyNFrOHbyDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyOToyNFrOHbyDdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5MzY4NQ==", "bodyText": "The retrying bulk persister (ResultsPersisterService) would be useful here but is not accessible in this package.\n#62779 fixes that by moving the persister to core but there is some debate about exactly what we should do with ResultsPersisterService and it probably isn't necessary here.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498893685", "createdAt": "2020-10-02T15:29:24Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }\n+\n+        client.bulk(bulkRequest, ActionListener.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI1OTgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/notifications/TransformAuditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDo1MlrOHbyG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDo1MlrOHbyG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDU3Mw==", "bodyText": "#63024 changes transforms to use a registry which would make this code much simpler", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498894573", "createdAt": "2020-10-02T15:30:52Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/notifications/TransformAuditor.java", "diffHunk": "@@ -17,7 +28,38 @@\n  */\n public class TransformAuditor extends AbstractAuditor<TransformAuditMessage> {\n \n-    public TransformAuditor(Client client, String nodeName) {\n-        super(client, nodeName, TransformInternalIndexConstants.AUDIT_INDEX, TRANSFORM_ORIGIN, TransformAuditMessage::new);\n+    public TransformAuditor(Client client, String nodeName, ClusterService clusterService) {\n+        super(new OriginSettingClient(client, TRANSFORM_ORIGIN), TransformInternalIndexConstants.AUDIT_INDEX,\n+            TransformInternalIndexConstants.AUDIT_INDEX,\n+            () -> {\n+                try {\n+                    IndexTemplateMetadata templateMeta = TransformInternalIndex.getAuditIndexTemplateMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM2ODE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowMzoxMVrOHbzMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo0ODoyMlrOHcbdgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjI4MA==", "bodyText": "I know there will be complexity, but we should make sure we don't breach some limit (10k, etc.) The size of the messages will probably be small enough so we don't have to worry about the bulk index byte size.\nBut the queue length is unbounded. We should check bounds somewhere.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498912280", "createdAt": "2020-10-02T16:03:11Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NTMzNg==", "bodyText": "I do think adding a sane limit (like 100 or something) would be simple enough. The != null while loop could still be on the outside, just need to have an inner conditional (and conditional afterwards) that calls client.bulk and resets the request.\nWill protect against a weird, and pretty nasty edge case.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r499555336", "createdAt": "2020-10-05T12:19:03Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjI4MA=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2ODAyNw==", "bodyText": "I pushed a change to limit the buffer size to 1000, after 1000 messages the oldest ones start getting dropped from the queue. This simplifies the code as there will be at most 1000 messages in the bulk index request.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r499568027", "createdAt": "2020-10-05T12:41:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjI4MA=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MjA5Ng==", "bodyText": "@davidkyle sorry! I didn't see that :D", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r499572096", "createdAt": "2020-10-05T12:48:22Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjI4MA=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM3MzAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNDo0MFrOHbzPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoyNDozOVrOHb1pYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzA1Nw==", "bodyText": "Is it possible that we empty the backlog, but then have to add something else to it?\nI know this only happens on template changes, but it seems like setting it to null here is unnecessary and risks an NPE.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498913057", "createdAt": "2020-10-02T16:04:40Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }\n+\n+        client.bulk(bulkRequest, ActionListener.wrap(\n+            bulkItemResponses -> {\n+                backlog = null;\n+                logger.trace(\"Successfully wrote audit message backlog after upgrading template\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzQ1MQ==", "bodyText": "Also, it would be good to log if there were failures. we could just write a warning, and then have the full failure stack be debug or something.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498913451", "createdAt": "2020-10-02T16:05:22Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }\n+\n+        client.bulk(bulkRequest, ActionListener.wrap(\n+            bulkItemResponses -> {\n+                backlog = null;\n+                logger.trace(\"Successfully wrote audit message backlog after upgrading template\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzA1Nw=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjU0Ng==", "bodyText": "I wanted to hit the NPE in tests and fail in a obvious way. If the logic is sound it should never fail.\nBut yes it should be some sort of assertion so there is no chance of it in production code", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498952546", "createdAt": "2020-10-02T17:24:39Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -83,4 +168,21 @@ private XContentBuilder toXContentBuilder(ToXContent toXContent) {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    private void writeBacklog() {\n+        BulkRequest bulkRequest = new BulkRequest();\n+        ToXContent doc = backlog.poll();\n+        while (doc != null) {\n+            bulkRequest.add(indexRequest(doc));\n+            doc = backlog.poll();\n+        }\n+\n+        client.bulk(bulkRequest, ActionListener.wrap(\n+            bulkItemResponses -> {\n+                backlog = null;\n+                logger.trace(\"Successfully wrote audit message backlog after upgrading template\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzA1Nw=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM4Mjg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNzo0NFrOHbzVMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoyODoyMFrOHb1wTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDYwOQ==", "bodyText": "This synchronized block seems unnecessary.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498914609", "createdAt": "2020-10-02T16:07:44Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -64,16 +100,65 @@ private void onIndexFailure(Exception exception) {\n     }\n \n     private void indexDoc(ToXContent toXContent) {\n+        if (hasLatestTemplate.get()) {\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        if (MlIndexAndAlias.hasIndexTemplate(clusterService.state(), templateName)) {\n+            synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NDMxOQ==", "bodyText": "It is because of the code at line 131\n        synchronized (this) {\n            if (hasLatestTemplate.get() == false) {\n                // synchronized so that hasLatestTemplate does not change value\n                // between the read and adding to the backlog\n                backlog.add(toXContent);\n\nI need to make reading hasLatestTemplate and adding to backlog an atomic operation otherwise hasLatestTemplate could change value between the 2 lines of code.\nNothing can be added to backlog once hasLatestTemplate is true otherwise it may not be written in writeBacklog", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498954319", "createdAt": "2020-10-02T17:28:20Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -64,16 +100,65 @@ private void onIndexFailure(Exception exception) {\n     }\n \n     private void indexDoc(ToXContent toXContent) {\n+        if (hasLatestTemplate.get()) {\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        if (MlIndexAndAlias.hasIndexTemplate(clusterService.state(), templateName)) {\n+            synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDYwOQ=="}, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM4MzMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNzo1M1rOHbzVfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNzo1M1rOHbzVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDY4Ng==", "bodyText": "This synchronized block seems unnecessary.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498914686", "createdAt": "2020-10-02T16:07:53Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -64,16 +100,65 @@ private void onIndexFailure(Exception exception) {\n     }\n \n     private void indexDoc(ToXContent toXContent) {\n+        if (hasLatestTemplate.get()) {\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        if (MlIndexAndAlias.hasIndexTemplate(clusterService.state(), templateName)) {\n+            synchronized (this) {\n+                hasLatestTemplate.set(true);\n+            }\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        ActionListener<Boolean> putTemplateListener = ActionListener.wrap(\n+            r -> {\n+                synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM5MDUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxMDowMFrOHbzaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxMDowMFrOHbzaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNTg0MQ==", "bodyText": "This synchronize block makes sense as we don't want multiple callers to put the new template.\nBut, I don't think the if (hasLatestTemplate.get() == false) { warrants the sync blocks for the atomic booleans elsewhere.\nThe read and writes to this value are already protected and none of the other checks do anything mutable to the system.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498915841", "createdAt": "2020-10-02T16:10:00Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -64,16 +100,65 @@ private void onIndexFailure(Exception exception) {\n     }\n \n     private void indexDoc(ToXContent toXContent) {\n+        if (hasLatestTemplate.get()) {\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        if (MlIndexAndAlias.hasIndexTemplate(clusterService.state(), templateName)) {\n+            synchronized (this) {\n+                hasLatestTemplate.set(true);\n+            }\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        ActionListener<Boolean> putTemplateListener = ActionListener.wrap(\n+            r -> {\n+                synchronized (this) {\n+                    hasLatestTemplate.set(true);\n+                }\n+                logger.info(\"Auditor template [{}] successfully installed\", templateName);\n+                writeBacklog();\n+                putTemplateInProgress.set(false);\n+            },\n+            e -> {\n+                logger.warn(\"Error putting latest template [{}]\", templateName);\n+                putTemplateInProgress.set(false);\n+            }\n+        );\n+\n+        synchronized (this) {\n+            if (hasLatestTemplate.get() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQwNDk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNDo0M1rOHbzjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNDo0M1rOHbzjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODE5OQ==", "bodyText": "Seems like it could be a single exchange request.", "url": "https://github.com/elastic/elasticsearch/pull/63063#discussion_r498918199", "createdAt": "2020-10-02T16:14:43Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditor.java", "diffHunk": "@@ -64,16 +100,65 @@ private void onIndexFailure(Exception exception) {\n     }\n \n     private void indexDoc(ToXContent toXContent) {\n+        if (hasLatestTemplate.get()) {\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        if (MlIndexAndAlias.hasIndexTemplate(clusterService.state(), templateName)) {\n+            synchronized (this) {\n+                hasLatestTemplate.set(true);\n+            }\n+            writeDoc(toXContent);\n+            return;\n+        }\n+\n+        ActionListener<Boolean> putTemplateListener = ActionListener.wrap(\n+            r -> {\n+                synchronized (this) {\n+                    hasLatestTemplate.set(true);\n+                }\n+                logger.info(\"Auditor template [{}] successfully installed\", templateName);\n+                writeBacklog();\n+                putTemplateInProgress.set(false);\n+            },\n+            e -> {\n+                logger.warn(\"Error putting latest template [{}]\", templateName);\n+                putTemplateInProgress.set(false);\n+            }\n+        );\n+\n+        synchronized (this) {\n+            if (hasLatestTemplate.get() == false) {\n+                // synchronized so that hasLatestTemplate does not change value\n+                // between the read and adding to the backlog\n+                backlog.add(toXContent);\n+\n+                // stop multiple invocations\n+                if (putTemplateInProgress.get() == false) {\n+                    putTemplateInProgress.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243c49a640c81213a76db094725b4f878227d386"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3294, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}