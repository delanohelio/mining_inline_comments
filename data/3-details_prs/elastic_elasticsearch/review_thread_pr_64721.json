{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2Nzk2Nzc3", "number": 64721, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyMDo0MVrOE2K--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyMDo0MVrOE2K--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjM4NTIwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyMDo0MlrOHu2vkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowMjo1NlrOHvi0VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MzQ1OA==", "bodyText": "I think this should be moved down to and checked against elements[0] instead of the whole headerValue. A parameter could have a comma. Probably not..but slightly more correct.", "url": "https://github.com/elastic/elasticsearch/pull/64721#discussion_r518893458", "createdAt": "2020-11-06T17:20:42Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -63,18 +58,19 @@ public String mediaTypeWithoutParameters() {\n \n     /**\n      * Parses a header value into it's parts.\n-     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1 but allows only single media type and do not support quality factors\n+     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * but allows only single media type. Media ranges will be ignored (treated as not provided)\n      * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n-     * Do not rely on nulls\n+     * TODO Do not rely on nulls\n      *\n      * @return a {@link ParsedMediaType} if the header could be parsed.\n      * @throws IllegalArgumentException if the header is malformed\n      */\n     public static ParsedMediaType parseMediaType(String headerValue) {\n-        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n-            return null;\n-        }\n         if (headerValue != null) {\n+            if (isMediaRange(headerValue) || \"*/*\".equals(headerValue)) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fa70dd48aebc57cc2136d2474ad9109b888986"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxOTk3MQ==", "bodyText": "If we check for element[0] we could not check against something like text/HTML;q=0, application/json\nMedia range is a coma separated list where each media type can have a list of parameters after semicolon .\nComma (delimiters at all) are not allowed within media type name or parameters", "url": "https://github.com/elastic/elasticsearch/pull/64721#discussion_r518919971", "createdAt": "2020-11-06T18:10:02Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -63,18 +58,19 @@ public String mediaTypeWithoutParameters() {\n \n     /**\n      * Parses a header value into it's parts.\n-     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1 but allows only single media type and do not support quality factors\n+     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * but allows only single media type. Media ranges will be ignored (treated as not provided)\n      * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n-     * Do not rely on nulls\n+     * TODO Do not rely on nulls\n      *\n      * @return a {@link ParsedMediaType} if the header could be parsed.\n      * @throws IllegalArgumentException if the header is malformed\n      */\n     public static ParsedMediaType parseMediaType(String headerValue) {\n-        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n-            return null;\n-        }\n         if (headerValue != null) {\n+            if (isMediaRange(headerValue) || \"*/*\".equals(headerValue)) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MzQ1OA=="}, "originalCommit": {"oid": "86fa70dd48aebc57cc2136d2474ad9109b888986"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDAxOQ==", "bodyText": "OK ..that makes sense. sorry for the noise.\nhowever...minor clarification your values for the parameters may be quoted which can contain any ASCII char   accept-extension = \";\" token [ \"=\" ( token | quoted-string ) ] however, this is very unlikely to encounter a comma there", "url": "https://github.com/elastic/elasticsearch/pull/64721#discussion_r518984019", "createdAt": "2020-11-06T20:16:40Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -63,18 +58,19 @@ public String mediaTypeWithoutParameters() {\n \n     /**\n      * Parses a header value into it's parts.\n-     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1 but allows only single media type and do not support quality factors\n+     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * but allows only single media type. Media ranges will be ignored (treated as not provided)\n      * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n-     * Do not rely on nulls\n+     * TODO Do not rely on nulls\n      *\n      * @return a {@link ParsedMediaType} if the header could be parsed.\n      * @throws IllegalArgumentException if the header is malformed\n      */\n     public static ParsedMediaType parseMediaType(String headerValue) {\n-        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n-            return null;\n-        }\n         if (headerValue != null) {\n+            if (isMediaRange(headerValue) || \"*/*\".equals(headerValue)) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MzQ1OA=="}, "originalCommit": {"oid": "86fa70dd48aebc57cc2136d2474ad9109b888986"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTU3Mw==", "bodyText": "ah.. you are totally right. I did not look into quoted string part. Indeed this can contain a comma.\nAnd CVS could be a media type that would like to have it.\nwe don't support that at the moment, but at some point I think it would make sense that we do.", "url": "https://github.com/elastic/elasticsearch/pull/64721#discussion_r519615573", "createdAt": "2020-11-09T08:02:56Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -63,18 +58,19 @@ public String mediaTypeWithoutParameters() {\n \n     /**\n      * Parses a header value into it's parts.\n-     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1 but allows only single media type and do not support quality factors\n+     * follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * but allows only single media type. Media ranges will be ignored (treated as not provided)\n      * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n-     * Do not rely on nulls\n+     * TODO Do not rely on nulls\n      *\n      * @return a {@link ParsedMediaType} if the header could be parsed.\n      * @throws IllegalArgumentException if the header is malformed\n      */\n     public static ParsedMediaType parseMediaType(String headerValue) {\n-        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n-            return null;\n-        }\n         if (headerValue != null) {\n+            if (isMediaRange(headerValue) || \"*/*\".equals(headerValue)) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MzQ1OA=="}, "originalCommit": {"oid": "86fa70dd48aebc57cc2136d2474ad9109b888986"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3113, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}