{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjE5MDE4", "number": 52631, "title": "[ML] Handle failed datafeed in MlDistributedFailureIT", "bodyText": "Rarely the datafeed under test may detect the job has failed and terminate itself. The job failure is an expected part of the test but the test does not account for the datafeed stopping and having no persistent task. If the datafeed has stopped then don't set its state to stopping\nDetails of how this happens are in  #52608 (comment)\nCloses #52608", "createdAt": "2020-02-21T10:45:58Z", "url": "https://github.com/elastic/elasticsearch/pull/52631", "merged": true, "mergeCommit": {"oid": "59944a093fa9e72d243e337bbadb37b6e0c5e942"}, "closed": true, "closedAt": "2020-02-25T18:22:53Z", "author": {"login": "davidkyle"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGeXn7gFqTM2MjU3ODI1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHyFSjgFqTM2NDEzNTY2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTc4MjUw", "url": "https://github.com/elastic/elasticsearch/pull/52631#pullrequestreview-362578250", "createdAt": "2020-02-21T11:52:34Z", "commit": {"oid": "aea69cbace5e1904b59a799dadd215a292438508"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo1MjozNFrOFs0gBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTo1MjozNFrOFs0gBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0MTgyOA==", "bodyText": "The problem with this is that if task == null then the test isn't doing what it's supposed to be doing, which is testing that you can stop an unassigned stopping datafeed.\nSince this happens so rarely we could put the whole test in a loop and retry a few times if this situation occurs.\nBut if you don't want to do that then it would be better to use assumeFalse(\"Test setup did not create the required conditions\", task == null); because then at least the test will be reported as having been skipped rather than silently succeeding when it didn't test what it was supposed to test.", "url": "https://github.com/elastic/elasticsearch/pull/52631#discussion_r382541828", "createdAt": "2020-02-21T11:52:34Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlDistributedFailureIT.java", "diffHunk": "@@ -245,19 +245,24 @@ public void testCloseUnassignedFailedJobAndStopUnassignedStoppingDatafeed() thro\n         // stopping.\n         PersistentTasksCustomMetaData tasks = clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n         PersistentTasksCustomMetaData.PersistentTask<?> task = MlTasks.getDatafeedTask(datafeedId, tasks);\n-        UpdatePersistentTaskStatusAction.Request updatePersistentTaskStatusRequest =\n-            new UpdatePersistentTaskStatusAction.Request(task.getId(), task.getAllocationId(), DatafeedState.STOPPING);\n-        PersistentTaskResponse updatePersistentTaskStatusResponse =\n-            client().execute(UpdatePersistentTaskStatusAction.INSTANCE, updatePersistentTaskStatusRequest).actionGet();\n-        assertNotNull(updatePersistentTaskStatusResponse.getTask());\n \n-        // Confirm the datafeed state is now stopping - this may take a while to update in cluster state\n-        assertBusy(() -> {\n-            GetDatafeedsStatsAction.Request datafeedStatsRequest = new GetDatafeedsStatsAction.Request(datafeedId);\n-            GetDatafeedsStatsAction.Response datafeedStatsResponse =\n-                client().execute(GetDatafeedsStatsAction.INSTANCE, datafeedStatsRequest).actionGet();\n-            assertEquals(DatafeedState.STOPPING, datafeedStatsResponse.getResponse().results().get(0).getDatafeedState());\n-        });\n+        // It is possible that the datafeed has already detected the job failure and\n+        // terminated itself. In this happens there is no task\n+        if (task != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea69cbace5e1904b59a799dadd215a292438508"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ec002b705363cb5c76d34887d9c23a7ff5dcef", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/08ec002b705363cb5c76d34887d9c23a7ff5dcef", "committedDate": "2020-02-24T10:56:43Z", "message": "Handle case where datafeed has stopped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61e53e1948e889fec48d90279ecdf7e4868519f", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/f61e53e1948e889fec48d90279ecdf7e4868519f", "committedDate": "2020-02-24T10:56:43Z", "message": "assume false"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "071b60db2941e54c19446403d4fcd49d9d3a4f9f", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/071b60db2941e54c19446403d4fcd49d9d3a4f9f", "committedDate": "2020-02-21T16:52:33Z", "message": "assume false"}, "afterCommit": {"oid": "f61e53e1948e889fec48d90279ecdf7e4868519f", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/f61e53e1948e889fec48d90279ecdf7e4868519f", "committedDate": "2020-02-24T10:56:43Z", "message": "assume false"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTM1NjYx", "url": "https://github.com/elastic/elasticsearch/pull/52631#pullrequestreview-364135661", "createdAt": "2020-02-25T13:24:35Z", "commit": {"oid": "f61e53e1948e889fec48d90279ecdf7e4868519f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2264, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}