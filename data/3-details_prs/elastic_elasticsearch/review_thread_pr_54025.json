{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjM5ODAz", "number": 54025, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxODo1NVrODqjxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxODo1NVrODqjxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTUyOTEzOnYy", "diffSide": "LEFT", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxODo1NVrOF6Yfsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0NToyMFrOF6ZQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzA1OQ==", "bodyText": "I'm not sure removing this optimisation in particular is a good idea. This saved quite a bit of CPU for finding the EOLs in bulk requests. I think the composite byte buffer will behave a lot worse here? (especially now that bulk requests aren't copied to a single byte[] any more and we parse them straight from the ByteBuf we get from the HTTP layer.", "url": "https://github.com/elastic/elasticsearch/pull/54025#discussion_r396763059", "createdAt": "2020-03-23T21:18:55Z", "author": {"login": "original-brownbear"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java", "diffHunk": "@@ -1,104 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.elasticsearch.transport.netty4;\n-\n-import io.netty.buffer.ByteBuf;\n-import org.apache.lucene.util.BytesRef;\n-import org.elasticsearch.common.bytes.AbstractBytesReference;\n-import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.io.stream.StreamInput;\n-\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.charset.StandardCharsets;\n-\n-final class ByteBufBytesReference extends AbstractBytesReference {\n-\n-    private final ByteBuf buffer;\n-    private final int length;\n-    private final int offset;\n-\n-    ByteBufBytesReference(ByteBuf buffer, int length) {\n-        this.buffer = buffer;\n-        this.length = length;\n-        this.offset = buffer.readerIndex();\n-        assert length <= buffer.readableBytes() : \"length[\" + length +\"] > \" + buffer.readableBytes();\n-    }\n-\n-    @Override\n-    public byte get(int index) {\n-        return buffer.getByte(offset + index);\n-    }\n-\n-    @Override\n-    public int getInt(int index) {\n-        return buffer.getInt(offset + index);\n-    }\n-\n-    @Override\n-    public int indexOf(byte marker, int from) {\n-        final int start = offset + from;\n-        return buffer.forEachByte(start, length - start, value -> value != marker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8cd03064acc152b82b066a25ca38c5692ab9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTYxNQ==", "bodyText": "This commit implements that optimization for both the CompositeBytesReference and ByteBufferReference.", "url": "https://github.com/elastic/elasticsearch/pull/54025#discussion_r396775615", "createdAt": "2020-03-23T21:45:20Z", "author": {"login": "tbrooks8"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java", "diffHunk": "@@ -1,104 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.elasticsearch.transport.netty4;\n-\n-import io.netty.buffer.ByteBuf;\n-import org.apache.lucene.util.BytesRef;\n-import org.elasticsearch.common.bytes.AbstractBytesReference;\n-import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.io.stream.StreamInput;\n-\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.charset.StandardCharsets;\n-\n-final class ByteBufBytesReference extends AbstractBytesReference {\n-\n-    private final ByteBuf buffer;\n-    private final int length;\n-    private final int offset;\n-\n-    ByteBufBytesReference(ByteBuf buffer, int length) {\n-        this.buffer = buffer;\n-        this.length = length;\n-        this.offset = buffer.readerIndex();\n-        assert length <= buffer.readableBytes() : \"length[\" + length +\"] > \" + buffer.readableBytes();\n-    }\n-\n-    @Override\n-    public byte get(int index) {\n-        return buffer.getByte(offset + index);\n-    }\n-\n-    @Override\n-    public int getInt(int index) {\n-        return buffer.getInt(offset + index);\n-    }\n-\n-    @Override\n-    public int indexOf(byte marker, int from) {\n-        final int start = offset + from;\n-        return buffer.forEachByte(start, length - start, value -> value != marker);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzA1OQ=="}, "originalCommit": {"oid": "ddd8cd03064acc152b82b066a25ca38c5692ab9c"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4231, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}