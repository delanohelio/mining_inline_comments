{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDE2NTY3", "number": 59008, "title": "[7.x] Add include_data_streams flag for authorization", "bodyText": "Most of the work around the addition of an includeDataStreams flag was done in #58381. The remainder of this PR adds the flag to the appropriate request classes, updates IndexNameExpressionResolver to rely on the flag rather than a separate boolean flag, and updates tests.\nThis PR adds an includeDataStreams flag to the IndicesRequest interface so that it is available when AuthorizationEngine::loadAuthorizedIndices is called. This is necessary to avoid different behaviors when security is enabled and disabled.\nThe disparate behavior is described in the referenced issue. When a GET */_alias request (or any other request that does not operate on data streams) is sent without security enabled, any data streams present are ignored by the IndexNameExpressionResolver class and the correct HTTP 200 response is returned.\nWhen security is enabled, the star in GET */_alias is first resolved to all authorized indices, aliases, and data streams. Because the _alias endpoint does not understand data streams, the first data stream it encounters among the list of authorized indices is treated as an alias and an incorrect 404 for \"unknown alias\" is returned.\nThis PR changes AuthorizationService to selectively exclude (in the case of most requests) or include (and the case of ResolveIndexAction.Request and other requests that opt in) data streams during the authorized index resolution phase.\nEspecially interested in feedback from @elastic/es-security.\nFixes #57712\nRelates to #53100\nBackport of #58154", "createdAt": "2020-07-03T11:48:03Z", "url": "https://github.com/elastic/elasticsearch/pull/59008", "merged": true, "mergeCommit": {"oid": "c1781bc7e7a024cb4bd8a3705c18274908943fde"}, "closed": true, "closedAt": "2020-07-03T17:58:40Z", "author": {"login": "danhermann"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxR-uOAH2gAyNDQ0MDE2NTY3OjAxY2ZlMjBjMDE1YzUyYzNiNDA3OGNlNDUyOGMyZmYwODc3YzQ1ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxV2obgFqTQ0MjQ5NzMwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01cfe20c015c52c3b4078ce4528c2ff0877c4581", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/01cfe20c015c52c3b4078ce4528c2ff0877c4581", "committedDate": "2020-07-03T11:45:16Z", "message": "Add include_data_streams flag for authorization (#58154)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e0252030d1e5fc01a080fb4e41297838e7cd2d", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/31e0252030d1e5fc01a080fb4e41297838e7cd2d", "committedDate": "2020-07-03T12:43:47Z", "message": "Merge branch '7.x' into backport_7x_58154_ds_auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1780b1d11b5ba20db7aae3c33f34330d8911eec", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/c1780b1d11b5ba20db7aae3c33f34330d8911eec", "committedDate": "2020-07-03T15:50:24Z", "message": "tricky, tricky"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e710c2f19b2858b742f5a69f8e3476be85abea", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/90e710c2f19b2858b742f5a69f8e3476be85abea", "committedDate": "2020-07-03T15:51:00Z", "message": "Merge branch 'backport_7x_58154_ds_auth' of https://github.com/danhermann/elasticsearch into backport_7x_58154_ds_auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b644495ccda226a950c43add837b1658ad8646", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/b2b644495ccda226a950c43add837b1658ad8646", "committedDate": "2020-07-03T15:59:23Z", "message": "java8 syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDk3MDQ1", "url": "https://github.com/elastic/elasticsearch/pull/59008#pullrequestreview-442497045", "createdAt": "2020-07-03T16:15:20Z", "commit": {"oid": "c1780b1d11b5ba20db7aae3c33f34330d8911eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNToyMVrOGs0b1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNToyMVrOGs0b1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTYyMw==", "bodyText": "\ud83d\ude31 , but luckily assertions tripped!", "url": "https://github.com/elastic/elasticsearch/pull/59008#discussion_r449649623", "createdAt": "2020-07-03T16:15:21Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -207,7 +207,7 @@ public ClusterState execute(ClusterState currentState) {\n                     throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName, \" a snapshot is already running\");\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n-                List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState, request));\n+                indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState, request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1780b1d11b5ba20db7aae3c33f34330d8911eec"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDk3MzA2", "url": "https://github.com/elastic/elasticsearch/pull/59008#pullrequestreview-442497306", "createdAt": "2020-07-03T16:16:02Z", "commit": {"oid": "b2b644495ccda226a950c43add837b1658ad8646"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjowM1rOGs0cqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjowM1rOGs0cqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTgzMg==", "bodyText": "why is this commented out?", "url": "https://github.com/elastic/elasticsearch/pull/59008#discussion_r449649832", "createdAt": "2020-07-03T16:16:03Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1702,26 +1717,26 @@ public void testIndicesAliasesRequestTargetDataStreams() {\n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName);\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [\" + dataStreamName + \"] matches a data stream, specify the corresponding \" +\n                 \"concrete indices instead.\", iae.getMessage());\n         }\n \n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(\"my-data-*\").alias(\"my-data\");\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [my-data-*] matches a data stream, specify the corresponding concrete indices instead.\",\n                 iae.getMessage());\n         }\n \n-        {\n-            IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName)\n-                .alias(\"my-data\");\n-            String[] indices = indexNameExpressionResolver.concreteIndexNames(state, aliasActions, true);\n-            assertEquals(1, indices.length);\n-            assertEquals(backingIndex.getIndex().getName(), indices[0]);\n-        }\n+        //{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b644495ccda226a950c43add837b1658ad8646"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2241, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}