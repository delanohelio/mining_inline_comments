{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5OTI5MDU3", "number": 63483, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0MzoyNFrOErnuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToxMjoyNFrOErqXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTc1MDUyOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/filter.csv-spec", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0MzoyNFrOHefP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0MzoyNFrOHefP1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTI4NA==", "bodyText": "This test result - and logic allowing it - now corrected.", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r501731284", "createdAt": "2020-10-08T13:43:24Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/filter.csv-spec", "diffHunk": "@@ -131,21 +131,22 @@ SELECT COUNT(*), TRUNCATE(emp_no, -2) t FROM test_emp WHERE 'aaabbb' RLIKE 'a{2,\n ;\n \n inWithCompatibleDateTypes\n-SELECT birth_date FROM test_emp WHERE birth_date IN ({d '1959-07-23'},CAST('1959-12-25T12:12:12' AS TIMESTAMP)) OR birth_date IS NULL ORDER BY birth_date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be5b8caf96dda165ea4ff797396f579518fe4e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTc1MTE0OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0MzozMVrOHefQMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0MzozMVrOHefQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTM3OQ==", "bodyText": "This test is now possible (and inline with what other SQL implementations do).", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r501731379", "createdAt": "2020-10-08T13:43:31Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java", "diffHunk": "@@ -665,14 +665,10 @@ public void testHavingOnScalar() {\n                 error(\"SELECT int FROM test GROUP BY int HAVING 2 < ABS(int)\"));\n     }\n \n-    public void testInWithDifferentDataTypes() {\n-        assertEquals(\"1:8: 2nd argument of [1 IN (2, '3', 4)] must be [integer], found value ['3'] type [keyword]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be5b8caf96dda165ea4ff797396f579518fe4e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjEzMjA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowMTowNFrOHei-aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToxNDowNFrOHejjxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5MjM2MQ==", "bodyText": "@matriv, related to your suggestion, there are similarities with BinaryComparisons's times values code, but not sure if enough for a common extraction to make sense (despite the comment reference). But happy to further iterate.", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r501792361", "createdAt": "2020-10-08T15:01:04Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -391,18 +391,32 @@ public static Query doTranslate(In in, TranslatorHandler handler) {\n             if (in.value() instanceof FieldAttribute) {\n                 // equality should always be against an exact match (which is important for strings)\n                 FieldAttribute fa = (FieldAttribute) in.value();\n-                List<Expression> list = in.list();\n+                DataType dt = fa.dataType();\n \n-                // TODO: this needs to be handled inside the optimizer\n-                list.removeIf(e -> DataTypes.isNull(e.dataType()));\n-                DataType dt = list.get(0).dataType();\n+                List<Expression> list = in.list();\n                 Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n-\n-                for (Expression e : list) {\n-                    set.add(handler.convert(valueOf(e), dt));\n+                list.forEach(e -> {\n+                    // TODO: this needs to be handled inside the optimizer\n+                    if (DataTypes.isNull(e.dataType()) == false) {\n+                        set.add(handler.convert(valueOf(e), dt));\n+                    }\n+                });\n+\n+                if (dt == DATETIME) {\n+                    DateFormatter formatter = DateFormatter.forPattern(DATE_FORMAT);\n+\n+                    q = null;\n+                    for (Object o : set) {\n+                        assert o instanceof ZonedDateTime;\n+                        // see comment in Ranges#doTranslate() as to why formatting as String is required\n+                        String zdt = formatter.format((ZonedDateTime) o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be5b8caf96dda165ea4ff797396f579518fe4e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMTkyNw==", "bodyText": "Yeah, seems fine as is.", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r501801927", "createdAt": "2020-10-08T15:14:04Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -391,18 +391,32 @@ public static Query doTranslate(In in, TranslatorHandler handler) {\n             if (in.value() instanceof FieldAttribute) {\n                 // equality should always be against an exact match (which is important for strings)\n                 FieldAttribute fa = (FieldAttribute) in.value();\n-                List<Expression> list = in.list();\n+                DataType dt = fa.dataType();\n \n-                // TODO: this needs to be handled inside the optimizer\n-                list.removeIf(e -> DataTypes.isNull(e.dataType()));\n-                DataType dt = list.get(0).dataType();\n+                List<Expression> list = in.list();\n                 Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n-\n-                for (Expression e : list) {\n-                    set.add(handler.convert(valueOf(e), dt));\n+                list.forEach(e -> {\n+                    // TODO: this needs to be handled inside the optimizer\n+                    if (DataTypes.isNull(e.dataType()) == false) {\n+                        set.add(handler.convert(valueOf(e), dt));\n+                    }\n+                });\n+\n+                if (dt == DATETIME) {\n+                    DateFormatter formatter = DateFormatter.forPattern(DATE_FORMAT);\n+\n+                    q = null;\n+                    for (Object o : set) {\n+                        assert o instanceof ZonedDateTime;\n+                        // see comment in Ranges#doTranslate() as to why formatting as String is required\n+                        String zdt = formatter.format((ZonedDateTime) o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5MjM2MQ=="}, "originalCommit": {"oid": "5be5b8caf96dda165ea4ff797396f579518fe4e9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjE4MzU4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToxMjoyNFrOHejfJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo1MDowOVrOHfPinA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMDc0Mw==", "bodyText": "minor, but better add a short msg.", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r501800743", "createdAt": "2020-10-08T15:12:24Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -391,18 +391,32 @@ public static Query doTranslate(In in, TranslatorHandler handler) {\n             if (in.value() instanceof FieldAttribute) {\n                 // equality should always be against an exact match (which is important for strings)\n                 FieldAttribute fa = (FieldAttribute) in.value();\n-                List<Expression> list = in.list();\n+                DataType dt = fa.dataType();\n \n-                // TODO: this needs to be handled inside the optimizer\n-                list.removeIf(e -> DataTypes.isNull(e.dataType()));\n-                DataType dt = list.get(0).dataType();\n+                List<Expression> list = in.list();\n                 Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n-\n-                for (Expression e : list) {\n-                    set.add(handler.convert(valueOf(e), dt));\n+                list.forEach(e -> {\n+                    // TODO: this needs to be handled inside the optimizer\n+                    if (DataTypes.isNull(e.dataType()) == false) {\n+                        set.add(handler.convert(valueOf(e), dt));\n+                    }\n+                });\n+\n+                if (dt == DATETIME) {\n+                    DateFormatter formatter = DateFormatter.forPattern(DATE_FORMAT);\n+\n+                    q = null;\n+                    for (Object o : set) {\n+                        assert o instanceof ZonedDateTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02719cb3d0433d380345bb5397c877057af0665"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMjUyNA==", "bodyText": "Sure, added.", "url": "https://github.com/elastic/elasticsearch/pull/63483#discussion_r502522524", "createdAt": "2020-10-09T15:50:09Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -391,18 +391,32 @@ public static Query doTranslate(In in, TranslatorHandler handler) {\n             if (in.value() instanceof FieldAttribute) {\n                 // equality should always be against an exact match (which is important for strings)\n                 FieldAttribute fa = (FieldAttribute) in.value();\n-                List<Expression> list = in.list();\n+                DataType dt = fa.dataType();\n \n-                // TODO: this needs to be handled inside the optimizer\n-                list.removeIf(e -> DataTypes.isNull(e.dataType()));\n-                DataType dt = list.get(0).dataType();\n+                List<Expression> list = in.list();\n                 Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n-\n-                for (Expression e : list) {\n-                    set.add(handler.convert(valueOf(e), dt));\n+                list.forEach(e -> {\n+                    // TODO: this needs to be handled inside the optimizer\n+                    if (DataTypes.isNull(e.dataType()) == false) {\n+                        set.add(handler.convert(valueOf(e), dt));\n+                    }\n+                });\n+\n+                if (dt == DATETIME) {\n+                    DateFormatter formatter = DateFormatter.forPattern(DATE_FORMAT);\n+\n+                    q = null;\n+                    for (Object o : set) {\n+                        assert o instanceof ZonedDateTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMDc0Mw=="}, "originalCommit": {"oid": "a02719cb3d0433d380345bb5397c877057af0665"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3057, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}