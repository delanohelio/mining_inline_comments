{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NjY5NTU3", "number": 51632, "title": "Simplify rebalancer's weight function", "bodyText": "This PR refactors some of the code in the rebalancer that I found confusing. It removes the mysterious weightShardAdded and weightShardRemoved methods that in fact respectively add and subtract 1 (\u00b1\u03b5) from the result of weight. See 9dfb1c5 for an assertion of this fact (I've run :server:test and :server:integTest on this commit repeatedly).\nAs a side-effect it also somewhat reduces the number of calls to canRebalance and canAllocate during rebalancing when there are multiple shards of the same index on a node that is heavier than average.\nIt's presented as a sequence of small changes, each of which is justified with its commit message, since it's hard to see that the overall change is correct otherwise.", "createdAt": "2020-01-29T17:07:15Z", "url": "https://github.com/elastic/elasticsearch/pull/51632", "merged": true, "mergeCommit": {"oid": "635fe347b7e052c7f661b41e33ac5161f17a7952"}, "closed": true, "closedAt": "2020-01-31T14:34:46Z", "author": {"login": "DaveCTurner"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_IlbmgH2gAyMzY4NjY5NTU3Ojg3Zjg2NjVjMzQwNTI1ZjgwMTJmODcxMzZiMTNmMzZiYjY4MzVmOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_vClRgH2gAyMzY4NjY5NTU3OmYyZTNhNzdkOWU4OGZiYWZkZmY2NmJkZTgwOGVlMjZiNDE0ODlmYTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87f8665c340525f8012f87136b13f36bb6835f99", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/87f8665c340525f8012f87136b13f36bb6835f99", "committedDate": "2020-01-29T16:32:17Z", "message": "Fix JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dfb1c5baea042544ba49296fa16b6aa5288c39e", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/9dfb1c5baea042544ba49296fa16b6aa5288c39e", "committedDate": "2020-01-29T16:32:18Z", "message": "Simplify numAdditionalShards calculation and assert it matches original"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455f2f5a0fe9f9957006ea33da851130f3b2d91d", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/455f2f5a0fe9f9957006ea33da851130f3b2d91d", "committedDate": "2020-01-29T16:32:18Z", "message": "Inline and simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed674ba443a2423b73e2d0009d4553cf18a8b26e", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/ed674ba443a2423b73e2d0009d4553cf18a8b26e", "committedDate": "2020-01-29T16:32:18Z", "message": "Inline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89454306f94810671247dd5c02b5aecee9a36bcc", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/89454306f94810671247dd5c02b5aecee9a36bcc", "committedDate": "2020-01-29T16:32:19Z", "message": "More inline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe7c86151236682af08d711cef86abf0413e712", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/abe7c86151236682af08d711cef86abf0413e712", "committedDate": "2020-01-29T16:32:19Z", "message": "Inline and rearrange"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc7f5d52000a5f940b70d4756b061cb9b5c6c5b", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/5bc7f5d52000a5f940b70d4756b061cb9b5c6c5b", "committedDate": "2020-01-29T16:32:20Z", "message": "Inline deltas and simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e01a832577f876a1fa02b30cd1751b83d550b04f", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/e01a832577f876a1fa02b30cd1751b83d550b04f", "committedDate": "2020-01-29T16:32:20Z", "message": "No need to add 1 to weight when finding the min or sorting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ae9a3d4a223629586bd4369573a5aef27513dd", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/99ae9a3d4a223629586bd4369573a5aef27513dd", "committedDate": "2020-01-29T16:32:21Z", "message": "Simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53260da95a0f956347a33d352d48cb40060d1de4", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/53260da95a0f956347a33d352d48cb40060d1de4", "committedDate": "2020-01-29T16:32:21Z", "message": "Extract delta from loop since it is constant, and bail early if we would never set candidate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16221e4d154e54aae8c54d46ca35404502d0e4b2", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/16221e4d154e54aae8c54d46ca35404502d0e4b2", "committedDate": "2020-01-29T16:32:22Z", "message": "Simplify condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e15e51cb78307323a0817e4c412aa43120a4399", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/2e15e51cb78307323a0817e4c412aa43120a4399", "committedDate": "2020-01-29T16:32:22Z", "message": "Assignment is never read"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9616a759c9db82901d0e39240711989b656c81eb", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/9616a759c9db82901d0e39240711989b656c81eb", "committedDate": "2020-01-29T16:32:22Z", "message": "Check shard is on node and has a better id before checking allocation deciders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b1bb3d77abf6c1ca566de04dd34652667528e5", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/d0b1bb3d77abf6c1ca566de04dd34652667528e5", "committedDate": "2020-01-29T16:32:23Z", "message": "Tricky simplification\n\nminCost == weight.weight(this, maxNode, idx) - weight.weight(this, minNode, idx) so:\n\nminCost <= delta\n<=> weight.weight(this, maxNode, idx) - weight.weight(this, minNode, idx)\n         <= weight.weight(this, minNode, idx) - weight.weight(this, maxNode, idx) + 2;\n<=> 2 * weight.weight(this, maxNode, idx) - 2 * weight.weight(this, minNode, idx) <= 2;\n<=> weight.weight(this, maxNode, idx) - weight.weight(this, minNode, idx) <= 1\n<=> minCost <= 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521d7c8c4946281a2c42e3d5962b278a82502083", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/521d7c8c4946281a2c42e3d5962b278a82502083", "committedDate": "2020-01-29T16:41:17Z", "message": "Move check on minCost to caller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bacce1cb706d203cc971ad8bbe746cb432c50db8", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/bacce1cb706d203cc971ad8bbe746cb432c50db8", "committedDate": "2020-01-29T16:46:40Z", "message": "Reduce canAllocate/canRebalance calls by checking the shards in order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bae119d5a1c44aea768c5f81be6e16ed3691631", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/0bae119d5a1c44aea768c5f81be6e16ed3691631", "committedDate": "2020-01-29T16:47:39Z", "message": "Don't call canAllocate if canRebalance already said no"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/5ffbbac3e8d0f9b568e54876ced522bc2933f6c4", "committedDate": "2020-01-29T16:55:17Z", "message": "Extract field, don't need a new comparator each time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzE4NjYx", "url": "https://github.com/elastic/elasticsearch/pull/51632#pullrequestreview-350318661", "createdAt": "2020-01-29T18:12:23Z", "commit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQ4MDk0", "url": "https://github.com/elastic/elasticsearch/pull/51632#pullrequestreview-350748094", "createdAt": "2020-01-30T11:16:31Z", "commit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMToxNjozMlrOFjnfmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMToyMDoxMlrOFjnlLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5MTU0Nw==", "bodyText": "1.0f", "url": "https://github.com/elastic/elasticsearch/pull/51632#discussion_r372891547", "createdAt": "2020-01-30T11:16:32Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -408,12 +395,9 @@ private MoveDecision decideRebalance(final ShardRouting shard) {\n                     // more even, it doesn't make sense to execute the heavyweight operation of relocating a shard unless\n                     // the gains make it worth it, as defined by the threshold\n                     boolean deltaAboveThreshold = lessThan(currentDelta, threshold) == false;\n-                    // simulate the weight of the node if we were to relocate the shard to it\n-                    float weightWithShardAdded = weight.weightShardAdded(this, node, idxName);\n                     // calculate the delta of the weights of the two nodes if we were to add the shard to the\n                     // node in question and move it away from the node that currently holds it.\n-                    float proposedDelta = weightWithShardAdded - weight.weightShardRemoved(this, currentNode, idxName);\n-                    boolean betterWeightWithShardAdded = proposedDelta < currentDelta;\n+                    boolean betterWeightWithShardAdded = nodeWeight + 1 < currentWeight;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5MjA4OA==", "bodyText": "perhaps just\nif (rebalanceDecision.type() == Type.NO) {\n  continue;\n}\n\nand the same for the allocationDecision below", "url": "https://github.com/elastic/elasticsearch/pull/51632#discussion_r372892088", "createdAt": "2020-01-30T11:17:59Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -1000,30 +995,32 @@ private boolean tryRelocateShard(ModelNode minNode, ModelNode maxNode, String id\n                 }\n                 ShardRouting candidate = null;\n                 final AllocationDeciders deciders = allocation.deciders();\n+                final List<ShardRouting> shardRoutings = new ArrayList<>(index.numShards());\n                 for (ShardRouting shard : index) {\n                     if (shard.started()) {\n                         // skip initializing, unassigned and relocating shards we can't relocate them anyway\n-                        Decision allocationDecision = deciders.canAllocate(shard, minNode.getRoutingNode(), allocation);\n-                        Decision rebalanceDecision = deciders.canRebalance(shard, allocation);\n-                        if (((allocationDecision.type() == Type.YES) || (allocationDecision.type() == Type.THROTTLE))\n-                                && ((rebalanceDecision.type() == Type.YES) || (rebalanceDecision.type() == Type.THROTTLE))) {\n-                            if (maxNode.containsShard(shard)) {\n-                                // simulate moving shard from maxNode to minNode\n-                                final float delta = weight.weightShardAdded(\n-                                    this, minNode, idx) - weight.weightShardRemoved(this, maxNode, idx);\n-                                if (delta < minCost ||\n-                                        (candidate != null && Float.compare(delta, minCost) == 0 && candidate.id() > shard.id())) {\n-                                    /* this last line is a tie-breaker to make the shard allocation alg deterministic\n-                                     * otherwise we rely on the iteration order of the index.getAllShards() which is a set.*/\n-                                    minCost = delta;\n-                                    candidate = shard;\n-                                    decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);\n-                                }\n-                            }\n+                        if (maxNode.containsShard(shard)) {\n+                            shardRoutings.add(shard);\n                         }\n                     }\n                 }\n \n+                // look for a relocation candidate, in descending order of shard id so that the decision is deterministic\n+                shardRoutings.sort(BY_DESCENDING_SHARD_ID);\n+                for (ShardRouting shard : shardRoutings) {\n+                    final Decision rebalanceDecision = deciders.canRebalance(shard, allocation);\n+                    if ((rebalanceDecision.type() != Type.YES) && (rebalanceDecision.type() != Type.THROTTLE)) {\n+                        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5Mjk3Mg==", "bodyText": "Should we move this up as well, so that we can avoid the if (candidate != null) { check (as it's only assigned once now)?", "url": "https://github.com/elastic/elasticsearch/pull/51632#discussion_r372892972", "createdAt": "2020-01-30T11:20:12Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -1000,30 +995,32 @@ private boolean tryRelocateShard(ModelNode minNode, ModelNode maxNode, String id\n                 }\n                 ShardRouting candidate = null;\n                 final AllocationDeciders deciders = allocation.deciders();\n+                final List<ShardRouting> shardRoutings = new ArrayList<>(index.numShards());\n                 for (ShardRouting shard : index) {\n                     if (shard.started()) {\n                         // skip initializing, unassigned and relocating shards we can't relocate them anyway\n-                        Decision allocationDecision = deciders.canAllocate(shard, minNode.getRoutingNode(), allocation);\n-                        Decision rebalanceDecision = deciders.canRebalance(shard, allocation);\n-                        if (((allocationDecision.type() == Type.YES) || (allocationDecision.type() == Type.THROTTLE))\n-                                && ((rebalanceDecision.type() == Type.YES) || (rebalanceDecision.type() == Type.THROTTLE))) {\n-                            if (maxNode.containsShard(shard)) {\n-                                // simulate moving shard from maxNode to minNode\n-                                final float delta = weight.weightShardAdded(\n-                                    this, minNode, idx) - weight.weightShardRemoved(this, maxNode, idx);\n-                                if (delta < minCost ||\n-                                        (candidate != null && Float.compare(delta, minCost) == 0 && candidate.id() > shard.id())) {\n-                                    /* this last line is a tie-breaker to make the shard allocation alg deterministic\n-                                     * otherwise we rely on the iteration order of the index.getAllShards() which is a set.*/\n-                                    minCost = delta;\n-                                    candidate = shard;\n-                                    decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);\n-                                }\n-                            }\n+                        if (maxNode.containsShard(shard)) {\n+                            shardRoutings.add(shard);\n                         }\n                     }\n                 }\n \n+                // look for a relocation candidate, in descending order of shard id so that the decision is deterministic\n+                shardRoutings.sort(BY_DESCENDING_SHARD_ID);\n+                for (ShardRouting shard : shardRoutings) {\n+                    final Decision rebalanceDecision = deciders.canRebalance(shard, allocation);\n+                    if ((rebalanceDecision.type() != Type.YES) && (rebalanceDecision.type() != Type.THROTTLE)) {\n+                        continue;\n+                    }\n+                    final Decision allocationDecision = deciders.canAllocate(shard, minNode.getRoutingNode(), allocation);\n+                    if ((allocationDecision.type() != Type.YES) && (allocationDecision.type() != Type.THROTTLE)) {\n+                        continue;\n+                    }\n+                    candidate = shard;\n+                    decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);\n+                    break;\n+                }\n+\n                 if (candidate != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ffbbac3e8d0f9b568e54876ced522bc2933f6c4"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQ5OTUx", "url": "https://github.com/elastic/elasticsearch/pull/51632#pullrequestreview-350749951", "createdAt": "2020-01-30T11:20:12Z", "commit": {"oid": "5bc7f5d52000a5f940b70d4756b061cb9b5c6c5b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MjoxNlrOFjoIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MjoxNlrOFjoIxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjA4NQ==", "bodyText": "I think this could now translate into a nice stream one liner?\nindex.stream().filter(ShardRouting::started).filter(maxNode::containsShard).sorted(Comparator.comparing(ShardRouting::id).reversed())\n\nthen either collect or do the final filtering and findFirst?", "url": "https://github.com/elastic/elasticsearch/pull/51632#discussion_r372902085", "createdAt": "2020-01-30T11:42:16Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -993,24 +993,27 @@ private boolean tryRelocateShard(ModelNode minNode, ModelNode maxNode, String id\n                 }\n                 ShardRouting candidate = null;\n                 final AllocationDeciders deciders = allocation.deciders();\n+                final List<ShardRouting> shardRoutings = new ArrayList<>(index.numShards());\n                 for (ShardRouting shard : index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacce1cb706d203cc971ad8bbe746cb432c50db8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86cebb32b2fdcc550c66c7d22783e1b4d8e6ff44", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/86cebb32b2fdcc550c66c7d22783e1b4d8e6ff44", "committedDate": "2020-01-31T12:33:23Z", "message": "Merge remote-tracking branch 'upstream/master' into 2020-01-29-balanced-shards-allocator-simplification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8971daab704814f21f931250a0f188c048544675", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/8971daab704814f21f931250a0f188c048544675", "committedDate": "2020-01-31T12:51:54Z", "message": "Use a stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f90c20f3c439f2c7d614767bd77866e86f8d17", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/b4f90c20f3c439f2c7d614767bd77866e86f8d17", "committedDate": "2020-01-31T12:51:54Z", "message": "Simplify not-YES to NO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad503a5b0573eb9617c95c7403e133966edbe727", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/ad503a5b0573eb9617c95c7403e133966edbe727", "committedDate": "2020-01-31T12:58:33Z", "message": "No need for mutable candidate, just do the thing inside the loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "482be939fd69d23cca58b8469ef65edd24511ab8", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/482be939fd69d23cca58b8469ef65edd24511ab8", "committedDate": "2020-01-31T12:59:10Z", "message": "1.0f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e3a77d9e88fbafdff66bde808ee26b41489fa9", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2e3a77d9e88fbafdff66bde808ee26b41489fa9", "committedDate": "2020-01-31T13:20:31Z", "message": "Log throttled relocation too (previously logged as 'no relocation' at TRACE)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3054, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}