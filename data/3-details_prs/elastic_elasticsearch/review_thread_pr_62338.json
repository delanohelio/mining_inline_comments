{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODM2Mzk1", "number": 62338, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyODozOVrOEkDiGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNzoxN1rOEkDycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQyMDcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyODozOVrOHSw3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyODozOVrOHSw3Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzAzMA==", "bodyText": "nit: this log message should be moved inside the if/else below and adapted accordinly", "url": "https://github.com/elastic/elasticsearch/pull/62338#discussion_r489437030", "createdAt": "2020-09-16T13:28:39Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "diffHunk": "@@ -33,13 +33,42 @@\n         return Collections.singleton(LocalStateCompositeXPackPlugin.class);\n     }\n \n-    public void testDefaultAllocateToHot() {\n+    public void testDefaultIndexAllocateToContent() {\n         startWarmOnlyNode();\n         startColdOnlyNode();\n         ensureGreen();\n \n         client().admin().indices().prepareCreate(index).setWaitForActiveShards(0).get();\n \n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(DataTier.DATA_CONTENT));\n+\n+        // index should be red\n+        assertThat(client().admin().cluster().prepareHealth(index).get().getIndices().get(index).getStatus(),\n+            equalTo(ClusterHealthStatus.RED));\n+\n+        logger.info(\"--> starting hot node\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645cd19f26a41f4c68f918d8b32b38fb94dbaba2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQ1MDQ0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNDo1NVrOHSxJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowOTo1OFrOHS6aIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MTYwNg==", "bodyText": "I believe DataTierIT needs to be moved under internalClusterTest as otherwise, the tests don't run", "url": "https://github.com/elastic/elasticsearch/pull/62338#discussion_r489441606", "createdAt": "2020-09-16T13:34:55Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "diffHunk": "@@ -33,13 +33,42 @@\n         return Collections.singleton(LocalStateCompositeXPackPlugin.class);\n     }\n \n-    public void testDefaultAllocateToHot() {\n+    public void testDefaultIndexAllocateToContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645cd19f26a41f4c68f918d8b32b38fb94dbaba2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MzM3OQ==", "bodyText": "good catch!", "url": "https://github.com/elastic/elasticsearch/pull/62338#discussion_r489593379", "createdAt": "2020-09-16T17:09:58Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "diffHunk": "@@ -33,13 +33,42 @@\n         return Collections.singleton(LocalStateCompositeXPackPlugin.class);\n     }\n \n-    public void testDefaultAllocateToHot() {\n+    public void testDefaultIndexAllocateToContent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MTYwNg=="}, "originalCommit": {"oid": "645cd19f26a41f4c68f918d8b32b38fb94dbaba2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQ1NzY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/data-streams/src/internalClusterTest/java/org/elasticsearch/xpack/datastreams/DataTierDataStreamIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNjoxOFrOHSxNcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNjoxOFrOHSxNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MjY3NQ==", "bodyText": "very nice \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/62338#discussion_r489442675", "createdAt": "2020-09-16T13:36:18Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/data-streams/src/internalClusterTest/java/org/elasticsearch/xpack/datastreams/DataTierDataStreamIT.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.datastreams;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.cluster.routing.allocation.DataTierAllocationDecider;\n+import org.elasticsearch.xpack.core.DataTier;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class DataTierDataStreamIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class);\n+    }\n+\n+    public void testDefaultDataStreamAllocateToHot() {\n+        startHotOnlyNode();\n+        ensureGreen();\n+\n+        ComposableIndexTemplate template = new ComposableIndexTemplate(\n+            Collections.singletonList(index),\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            new ComposableIndexTemplate.DataStreamTemplate()\n+        );\n+        client().execute(\n+            PutComposableIndexTemplateAction.INSTANCE,\n+            new PutComposableIndexTemplateAction.Request(\"template\").indexTemplate(template)\n+        ).actionGet();\n+        client().prepareIndex(index).setCreate(true).setId(\"1\").setSource(\"@timestamp\", \"2020-09-09\").setWaitForActiveShards(0).get();\n+\n+        Settings idxSettings = client().admin()\n+            .indices()\n+            .prepareGetIndex()\n+            .addIndices(index)\n+            .get()\n+            .getSettings()\n+            .get(\".ds-\" + index + \"-000001\");\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(DataTier.DATA_HOT));\n+\n+        logger.info(\"--> waiting for {} to be yellow\", index);\n+        ensureYellow(index);\n+\n+        // Roll over index and ensure the second index also went to the \"hot\" tier\n+        client().admin().indices().prepareRolloverIndex(index).get();\n+        idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(\".ds-\" + index + \"-000002\");\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(DataTier.DATA_HOT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645cd19f26a41f4c68f918d8b32b38fb94dbaba2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQ2MjU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/data-streams/src/internalClusterTest/java/org/elasticsearch/xpack/datastreams/DataTierDataStreamIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNzoxN1rOHSxQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzozNzoxN1rOHSxQWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MzQxOA==", "bodyText": "I'd recommend using DataStream.getDefaultBackingIndexName here and below when referencing the backing indices by name (in case the naming scheme ever changes)", "url": "https://github.com/elastic/elasticsearch/pull/62338#discussion_r489443418", "createdAt": "2020-09-16T13:37:17Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/data-streams/src/internalClusterTest/java/org/elasticsearch/xpack/datastreams/DataTierDataStreamIT.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.datastreams;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.cluster.routing.allocation.DataTierAllocationDecider;\n+import org.elasticsearch.xpack.core.DataTier;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class DataTierDataStreamIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class);\n+    }\n+\n+    public void testDefaultDataStreamAllocateToHot() {\n+        startHotOnlyNode();\n+        ensureGreen();\n+\n+        ComposableIndexTemplate template = new ComposableIndexTemplate(\n+            Collections.singletonList(index),\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            new ComposableIndexTemplate.DataStreamTemplate()\n+        );\n+        client().execute(\n+            PutComposableIndexTemplateAction.INSTANCE,\n+            new PutComposableIndexTemplateAction.Request(\"template\").indexTemplate(template)\n+        ).actionGet();\n+        client().prepareIndex(index).setCreate(true).setId(\"1\").setSource(\"@timestamp\", \"2020-09-09\").setWaitForActiveShards(0).get();\n+\n+        Settings idxSettings = client().admin()\n+            .indices()\n+            .prepareGetIndex()\n+            .addIndices(index)\n+            .get()\n+            .getSettings()\n+            .get(\".ds-\" + index + \"-000001\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645cd19f26a41f4c68f918d8b32b38fb94dbaba2"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1559, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}