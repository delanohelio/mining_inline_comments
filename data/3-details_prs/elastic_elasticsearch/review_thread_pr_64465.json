{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTc0MjU5", "number": 64465, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1ODoyNFrOE0y40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1ODoyNFrOE0y40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzk1MTUzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1ODoyNFrOHstoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzoxMjo0NFrOHsuIlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0Njk4NQ==", "bodyText": "Probably worth a comment about why this particular random number. If it is to trip the problem, can we somehow assert that it tripped with this number? I feel like we could easily end up in a position where the test doesn't do anything if we don't have some package private method to check to see if this thing happened somehow.", "url": "https://github.com/elastic/elasticsearch/pull/64465#discussion_r516646985", "createdAt": "2020-11-03T12:58:24Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java", "diffHunk": "@@ -171,4 +171,16 @@ public long addWithoutBreaking(long bytes) {\n \n         assertThat(total.get(), equalTo(0L));\n     }\n+\n+    public void testRetrieveCardinality() {\n+        final int p = randomIntBetween(MIN_PRECISION, MAX_PRECISION);\n+        final HyperLogLogPlusPlus counts = new HyperLogLogPlusPlus(p, BigArrays.NON_RECYCLING_INSTANCE, 1);\n+        int bucket = randomInt(100);\n+        counts.collect(bucket, -8688952809613614893L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97cc2c5cbff63234678d8873e24a14232e6219f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1NTI1NA==", "bodyText": "The only condition to trigger it is to add one value to one bucket. I change it to a random long.", "url": "https://github.com/elastic/elasticsearch/pull/64465#discussion_r516655254", "createdAt": "2020-11-03T13:12:44Z", "author": {"login": "iverase"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java", "diffHunk": "@@ -171,4 +171,16 @@ public long addWithoutBreaking(long bytes) {\n \n         assertThat(total.get(), equalTo(0L));\n     }\n+\n+    public void testRetrieveCardinality() {\n+        final int p = randomIntBetween(MIN_PRECISION, MAX_PRECISION);\n+        final HyperLogLogPlusPlus counts = new HyperLogLogPlusPlus(p, BigArrays.NON_RECYCLING_INSTANCE, 1);\n+        int bucket = randomInt(100);\n+        counts.collect(bucket, -8688952809613614893L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0Njk4NQ=="}, "originalCommit": {"oid": "e97cc2c5cbff63234678d8873e24a14232e6219f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4138, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}