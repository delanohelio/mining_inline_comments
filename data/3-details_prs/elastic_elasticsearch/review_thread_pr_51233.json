{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTMyNTg5", "number": 51233, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyMTo1MVrODeG-WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0NToyM1rODgAzOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk4MTM2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyMTo1MVrOFnF9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0ODowN1rOFnd0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjQyMg==", "bodyText": "do we need to check {dynamic_type} too?", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r376536422", "createdAt": "2020-02-07T18:21:51Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -330,4 +338,106 @@ protected void doXContent(XContentBuilder builder, ToXContent.Params params) thr\n             builder.field(\"numeric_detection\", numericDetection.value());\n         }\n     }\n+\n+    public void validateDynamicTemplates(Mapper.TypeParser.ParserContext parserContext) {\n+        for (DynamicTemplate dynamicTemplate : dynamicTemplates.value()) {\n+            validateDynamicTemplate(parserContext, dynamicTemplate);\n+        }\n+    }\n+\n+    private static void validateDynamicTemplate(Mapper.TypeParser.ParserContext parserContext,\n+                                                DynamicTemplate dynamicTemplate) {\n+\n+        if (containsSnippet(dynamicTemplate.getMapping(), \"{name}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b04df83504d45f44f4904eaa5ace23fec86773"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNzI3Mg==", "bodyText": "Only {name}, because if the type hasn't specifically configured then line 360 ensures that all possible dynamic types are checked.", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r376927272", "createdAt": "2020-02-10T08:48:07Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -330,4 +338,106 @@ protected void doXContent(XContentBuilder builder, ToXContent.Params params) thr\n             builder.field(\"numeric_detection\", numericDetection.value());\n         }\n     }\n+\n+    public void validateDynamicTemplates(Mapper.TypeParser.ParserContext parserContext) {\n+        for (DynamicTemplate dynamicTemplate : dynamicTemplates.value()) {\n+            validateDynamicTemplate(parserContext, dynamicTemplate);\n+        }\n+    }\n+\n+    private static void validateDynamicTemplate(Mapper.TypeParser.ParserContext parserContext,\n+                                                DynamicTemplate dynamicTemplate) {\n+\n+        if (containsSnippet(dynamicTemplate.getMapping(), \"{name}\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjQyMg=="}, "originalCommit": {"oid": "b8b04df83504d45f44f4904eaa5ace23fec86773"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk5NDk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyNjoyNFrOFnGFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1NjozMVrOFpy4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODU0OA==", "bodyText": "This seems to only validate dynamic templates at creation time, should we move validation to MapperService#merge to make sure we cover all cases, including mapping updates that add dynamic templates on existing indices?", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r376538548", "createdAt": "2020-02-07T18:26:24Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java", "diffHunk": "@@ -621,6 +621,7 @@ private static void updateIndexMappingsAndBuildSortOrder(IndexService indexServi\n         if (!mappings.isEmpty()) {\n             assert mappings.size() == 1 : mappings;\n             mapperService.merge(MapperService.SINGLE_MAPPING_NAME, mappings, MergeReason.MAPPING_UPDATE);\n+            mapperService.validateDynamicTemplates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b04df83504d45f44f4904eaa5ace23fec86773"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNTc1Mw==", "bodyText": "Good point. I will address this.", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r376925753", "createdAt": "2020-02-10T08:44:39Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java", "diffHunk": "@@ -621,6 +621,7 @@ private static void updateIndexMappingsAndBuildSortOrder(IndexService indexServi\n         if (!mappings.isEmpty()) {\n             assert mappings.size() == 1 : mappings;\n             mapperService.merge(MapperService.SINGLE_MAPPING_NAME, mappings, MergeReason.MAPPING_UPDATE);\n+            mapperService.validateDynamicTemplates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODU0OA=="}, "originalCommit": {"oid": "b8b04df83504d45f44f4904eaa5ace23fec86773"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTY3OQ==", "bodyText": "Dynamic template are now validated when parsed by root object type parser.\nI think this has the same effect?", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r379369679", "createdAt": "2020-02-14T10:56:31Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java", "diffHunk": "@@ -621,6 +621,7 @@ private static void updateIndexMappingsAndBuildSortOrder(IndexService indexServi\n         if (!mappings.isEmpty()) {\n             assert mappings.size() == 1 : mappings;\n             mapperService.merge(MapperService.SINGLE_MAPPING_NAME, mappings, MergeReason.MAPPING_UPDATE);\n+            mapperService.validateDynamicTemplates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODU0OA=="}, "originalCommit": {"oid": "b8b04df83504d45f44f4904eaa5ace23fec86773"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODkyODYxOnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/dynamic/templates.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0MDoyMVrOFqDDcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0MDoyMVrOFqDDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNDU0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If an provided mapping contains an invalid mapping snippet then that results in\n          \n          \n            \n            If a provided mapping contains an invalid mapping snippet then that results in", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r379634547", "createdAt": "2020-02-14T20:40:21Z", "author": {"login": "jpountz"}, "path": "docs/reference/mapping/dynamic/templates.asciidoc", "diffHunk": "@@ -37,6 +37,10 @@ Dynamic templates are specified as an array of named objects:\n <2> The match conditions can include any of : `match_mapping_type`, `match`, `match_pattern`, `unmatch`, `path_match`, `path_unmatch`.\n <3> The mapping that the matched field should use.\n \n+If an provided mapping contains an invalid mapping snippet then that results in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63f1935890470e649f1f294b1a4d2bb46d8b12a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODk0MTM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0NToyM1rOFqDLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjozODoyMlrOFtWsBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjUzMw==", "bodyText": "I think some fields might do extra validation when calling builder.build(), should we try to build the mapper too?", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r379636533", "createdAt": "2020-02-14T20:45:23Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -333,4 +342,111 @@ protected void doXContent(XContentBuilder builder, ToXContent.Params params) thr\n             builder.field(\"numeric_detection\", numericDetection.value());\n         }\n     }\n+\n+    private static void validateDynamicTemplate(Mapper.TypeParser.ParserContext parserContext,\n+                                                DynamicTemplate dynamicTemplate) {\n+\n+        if (containsSnippet(dynamicTemplate.getMapping(), \"{name}\")) {\n+            // Can't validate template, because field names can't be guessed up front.\n+            return;\n+        }\n+\n+        final XContentFieldType[] types;\n+        if (dynamicTemplate.getXContentFieldType() != null) {\n+            types = new XContentFieldType[]{dynamicTemplate.getXContentFieldType()};\n+        } else {\n+            types = XContentFieldType.values();\n+        }\n+\n+        Exception lastError = null;\n+        boolean dynamicTemplateInvalid = true;\n+\n+        for (XContentFieldType contentFieldType : types) {\n+            String defaultDynamicType = contentFieldType.defaultMappingType();\n+            String mappingType = dynamicTemplate.mappingType(defaultDynamicType);\n+            Mapper.TypeParser typeParser = parserContext.typeParser(mappingType);\n+            if (typeParser == null) {\n+                lastError = new IllegalArgumentException(\"No mapper found for type [\" + mappingType + \"]\");\n+                continue;\n+            }\n+\n+            Map<String, Object> fieldTypeConfig = dynamicTemplate.mappingForName(\"__dummy__\", defaultDynamicType);\n+            fieldTypeConfig.remove(\"type\");\n+            try {\n+                Mapper.Builder<?, ?> dummyBuilder = typeParser.parse(\"__dummy__\", fieldTypeConfig, parserContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63f1935890470e649f1f294b1a4d2bb46d8b12a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEwMTk1OA==", "bodyText": "Good point. I will try to do this here.", "url": "https://github.com/elastic/elasticsearch/pull/51233#discussion_r383101958", "createdAt": "2020-02-24T06:38:22Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -333,4 +342,111 @@ protected void doXContent(XContentBuilder builder, ToXContent.Params params) thr\n             builder.field(\"numeric_detection\", numericDetection.value());\n         }\n     }\n+\n+    private static void validateDynamicTemplate(Mapper.TypeParser.ParserContext parserContext,\n+                                                DynamicTemplate dynamicTemplate) {\n+\n+        if (containsSnippet(dynamicTemplate.getMapping(), \"{name}\")) {\n+            // Can't validate template, because field names can't be guessed up front.\n+            return;\n+        }\n+\n+        final XContentFieldType[] types;\n+        if (dynamicTemplate.getXContentFieldType() != null) {\n+            types = new XContentFieldType[]{dynamicTemplate.getXContentFieldType()};\n+        } else {\n+            types = XContentFieldType.values();\n+        }\n+\n+        Exception lastError = null;\n+        boolean dynamicTemplateInvalid = true;\n+\n+        for (XContentFieldType contentFieldType : types) {\n+            String defaultDynamicType = contentFieldType.defaultMappingType();\n+            String mappingType = dynamicTemplate.mappingType(defaultDynamicType);\n+            Mapper.TypeParser typeParser = parserContext.typeParser(mappingType);\n+            if (typeParser == null) {\n+                lastError = new IllegalArgumentException(\"No mapper found for type [\" + mappingType + \"]\");\n+                continue;\n+            }\n+\n+            Map<String, Object> fieldTypeConfig = dynamicTemplate.mappingForName(\"__dummy__\", defaultDynamicType);\n+            fieldTypeConfig.remove(\"type\");\n+            try {\n+                Mapper.Builder<?, ?> dummyBuilder = typeParser.parse(\"__dummy__\", fieldTypeConfig, parserContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjUzMw=="}, "originalCommit": {"oid": "a63f1935890470e649f1f294b1a4d2bb46d8b12a"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4576, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}