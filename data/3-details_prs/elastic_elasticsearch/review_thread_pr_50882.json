{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjQ5Njcz", "number": 50882, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyMzozM1rODXjnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODo1NTowNlrODYbeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI3MzYyOnYy", "diffSide": "LEFT", "path": "qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyMzozM1rOFc6eRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyMzozM1rOFc6eRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2MjQ2OA==", "bodyText": "we should still run this command if all nodes are on 7.x? This exercises our ability to read sync markers in 8", "url": "https://github.com/elastic/elasticsearch/pull/50882#discussion_r365862468", "createdAt": "2020-01-13T15:23:33Z", "author": {"login": "ywelsch"}, "path": "qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java", "diffHunk": "@@ -680,15 +679,6 @@ public void testRecovery() throws Exception {\n             flushRequest.addParameter(\"wait_if_ongoing\", \"true\");\n             assertOK(client().performRequest(flushRequest));\n \n-            if (randomBoolean()) {\n-                // We had a bug before where we failed to perform peer recovery with sync_id from 5.x to 6.x.\n-                // We added this synced flush so we can exercise different paths of recovery code.\n-                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37007717983213afc9dea3c82214ee27c0552e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI5MTE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestSyncedFlushAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyODoxN1rOFc6o6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyODoxN1rOFc6o6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NTE5NA==", "bodyText": "will be removed in a future", "url": "https://github.com/elastic/elasticsearch/pull/50882#discussion_r365865194", "createdAt": "2020-01-13T15:28:17Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestSyncedFlushAction.java", "diffHunk": "@@ -54,17 +57,43 @@ public String getName() {\n \n     @Override\n     public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n-        IndicesOptions indicesOptions = IndicesOptions.fromRequest(request, IndicesOptions.lenientExpandOpen());\n-        SyncedFlushRequest syncedFlushRequest = new SyncedFlushRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n-        syncedFlushRequest.indicesOptions(indicesOptions);\n-        return channel -> client.admin().indices().syncedFlush(syncedFlushRequest, new RestBuilderListener<SyncedFlushResponse>(channel) {\n-            @Override\n-            public RestResponse buildResponse(SyncedFlushResponse results, XContentBuilder builder) throws Exception {\n-                builder.startObject();\n-                results.toXContent(builder, request);\n-                builder.endObject();\n-                return new BytesRestResponse(results.restStatus(), builder);\n-            }\n-        });\n+        FlushRequest flushRequest = new FlushRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n+        flushRequest.indicesOptions(IndicesOptions.fromRequest(request, flushRequest.indicesOptions()));\n+        return channel -> client.admin().indices().flush(flushRequest, new SimulateSyncedFlushResponseListener(channel));\n+    }\n+\n+    static final class SimulateSyncedFlushResponseListener extends RestToXContentListener<FlushResponse> {\n+        SimulateSyncedFlushResponseListener(RestChannel channel) {\n+            super(channel);\n+        }\n+\n+        @Override\n+        public RestResponse buildResponse(FlushResponse flushResponse, XContentBuilder builder) throws Exception {\n+            final RestStatus restStatus = flushResponse.getFailedShards() > 0 ? RestStatus.OK : RestStatus.CONFLICT;\n+            final SyncedFlushResponse syncedFlushResponse = new SyncedFlushResponse(flushResponse);\n+            syncedFlushResponse.toXContent(builder, channel.request());\n+            return new BytesRestResponse(restStatus, builder);\n+        }\n+    }\n+\n+    static final class SyncedFlushResponse implements ToXContent {\n+        private final FlushResponse flushResponse;\n+\n+        SyncedFlushResponse(FlushResponse flushResponse) {\n+            this.flushResponse = flushResponse;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            builder.startObject(\"_shards\");\n+            builder.field(\"warning\", \"Synced flush was removed and a normal flush was performed instead. \"\n+                + \"This transition will be removed a future Elasticsearch version.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37007717983213afc9dea3c82214ee27c0552e8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMwMDM2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozMTowM1rOFc6uuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozMTowM1rOFc6uuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NjY4Mw==", "bodyText": "what about this todo?", "url": "https://github.com/elastic/elasticsearch/pull/50882#discussion_r365866683", "createdAt": "2020-01-13T15:31:03Z", "author": {"login": "ywelsch"}, "path": "server/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java", "diffHunk": "@@ -346,8 +343,7 @@ public void testCancelNewShardRecoveryAndUsesExistingShardCopy() throws Exceptio\n         logger.info(\"--> start node C\");\n         final String nodeC = internalCluster().startNode();\n \n-        // do sync flush to gen sync id\n-        assertThat(client().admin().indices().prepareSyncedFlush(INDEX_NAME).get().failedShards(), equalTo(0));\n+        // TODO: Sync retention leases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37007717983213afc9dea3c82214ee27c0552e8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTQyNTg0OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODo1NTowNlrOFeSA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODo1NTowNlrOFeSA7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5Njc0OQ==", "bodyText": "remove the if (randomBoolean()) { here, it's no longer needed", "url": "https://github.com/elastic/elasticsearch/pull/50882#discussion_r367296749", "createdAt": "2020-01-16T08:55:06Z", "author": {"login": "ywelsch"}, "path": "test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java", "diffHunk": "@@ -1404,9 +1403,6 @@ private void postIndexAsyncActions(String[] indices, List<CountDownLatch> inFlig\n                 if (randomBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ef006e540be04dad43e1904c8ddd17d3ff368b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}