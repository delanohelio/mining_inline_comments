{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjk2MTUz", "number": 56961, "title": "Serialize Outbound Messages on IO Threads", "bodyText": "Almost every outbound message is serialized to buffers of 16k pagesize.\nWe were serializing these messages off the IO loop (and retaining the concrete message\ninstance as well) and would then enqueue it on the IO loop to be dealt with as soon as the\nchannel is ready.\n\nThis would cause buffers to be held onto for longer than necessary, causing less reuse on average.\nIf a channel was slow for some reason, not only would concrete message instances queue up for it, but also 16k of buffers would be reserved for each message until it would be written+flushed physically.\n\nWith this change, the serialization happens on the event loop which effectively limits the number of buffers that N IO-threads will ever use so long as messages are small and channels writable.\nAlso, this change dereferences the reference to the concrete outbound message as soon as it has been serialized to save some more on GC.\nThis reduces the GC time for a default PMC run by about 50% in experiments (3 nodes, 2G heap each, loopback ... obvious caveat is that GC isn't that heavy in the first place with recent changes but still a measurable gain).\nI also expect it to be helpful for master node stability by causing less of a spike if master is e.g. hit by a large number of requests that are processed batched (e.g. shard snapshot status updates) and responded to in a short time frame all at once.\nObviously, the downside to this change is that it introduces more latency on the IO loop for the serialization. But since we read all of these messages on the IO loop as well I don't see it as much of a qualitative change really and the more predictable buffer use seems much more valuable relatively.", "createdAt": "2020-05-19T18:40:15Z", "url": "https://github.com/elastic/elasticsearch/pull/56961", "merged": true, "mergeCommit": {"oid": "2a8b5787466c1e2e478c266db76bd2fba580c1ce"}, "closed": true, "closedAt": "2020-05-22T18:06:31Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci45MsAH2gAyNDIwMjk2MTUzOjY4NDFjZDY5ZmNlZDVmYTE1ZGJlMTRhMGQ4OWZjOWNkNGExMmFmMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcj1MhwgFqTQxNzA1NDYxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6841cd69fced5fa15dbe14a0d89fc9cd4a12af0c", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/6841cd69fced5fa15dbe14a0d89fc9cd4a12af0c", "committedDate": "2020-05-19T18:36:40Z", "message": "Serialize Outbound Messages on IO Threads\n\nAlmost every outbound message is serialized to buffers of 16k pagesize.\nWe were serializing these messages off the IO loop (and retaining the concrete message\ninstance as well) and would then enqueue it on the IO loop to be dealt with as soon as the\nchannel is ready.\n1. This would cause buffers to be held onto for longer than necessary, causing less reuse on average.\n2. If a channel was slow for some reason, not only would concrete message instances queue up for it,\nbut also 16k of buffers would be reserved for each message until it would be written+flushed physically.\n\nWith this change, the serialization happens on the event loop which effectively limits the number of buffers\nthat `N` IO-threads will ever use so long as messages are small and channels writable.\nAlso, this change dereferences the reference to the concrete outbound message as soon as it has been serialized\nto save some more on GC.\n\nThis reduces the GC time for a default PMC run by about 50% in experiments (3 nodes, 2G heap each, loopback).\nI also expect it to be helpful for maste node stability by causing less of a spike if master is e.g. hit by a large\nnumber of requests that are processed batched (e.g. shard snapshot status updates) and responded to in a short time frame\nall at once."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTYwNjc1", "url": "https://github.com/elastic/elasticsearch/pull/56961#pullrequestreview-416560675", "createdAt": "2020-05-21T23:37:44Z", "commit": {"oid": "6841cd69fced5fa15dbe14a0d89fc9cd4a12af0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozNzo0NFrOGZGQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozNzo0NFrOGZGQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3MDAwMg==", "bodyText": "Can we do this in Netty4MessageChannelHandler#write? So that any uncaught exceptions going through the normal channel exception handling?", "url": "https://github.com/elastic/elasticsearch/pull/56961#discussion_r428970002", "createdAt": "2020-05-21T23:37:44Z", "author": {"login": "tbrooks8"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java", "diffHunk": "@@ -142,11 +145,20 @@ public InetSocketAddress getRemoteAddress() {\n     }\n \n     @Override\n-    public void sendMessage(BytesReference reference, ActionListener<Void> listener) {\n-        channel.writeAndFlush(Netty4Utils.toByteBuf(reference), addPromise(listener, channel));\n-\n-        if (channel.eventLoop().isShutdown()) {\n-            listener.onFailure(new TransportException(\"Cannot send message, event loop is shutting down.\"));\n+    public void sendMessage(OutboundHandler.SendContext sendContext) {\n+        try {\n+            channel.eventLoop().execute(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841cd69fced5fa15dbe14a0d89fc9cd4a12af0c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af907e886b12ce23da65d9ea7422be43d9c09ecf", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/af907e886b12ce23da65d9ea7422be43d9c09ecf", "committedDate": "2020-05-22T12:50:35Z", "message": "Merge remote-tracking branch 'elastic/master' into cheaper-outbound-serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a85d40edf28313ae3c68f909e52fb5cb48673ca", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a85d40edf28313ae3c68f909e52fb5cb48673ca", "committedDate": "2020-05-22T14:11:42Z", "message": "CR: move logic to message handler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDU0NjEz", "url": "https://github.com/elastic/elasticsearch/pull/56961#pullrequestreview-417054613", "createdAt": "2020-05-22T16:52:05Z", "commit": {"oid": "6a85d40edf28313ae3c68f909e52fb5cb48673ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4717, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}