{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODc4NTAx", "number": 66160, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MjoyMlrOFDp7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MjozOFrOFDp7pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mzc2OTM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FieldFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MjoyMlrOIDao6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MjoyMlrOIDao6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1MzA5OA==", "bodyText": "I think it'd make sense to use a LinkedHashMap here -- then the fields would come back in the order requested. For example if you passed \"fields\": [ \"name\", \"title\"], then it'd be nice to return\n\"fields\": {\n  \"name\": [ \"christoph\"],\n  \"title\": [ \"engineer\" ]\n}\n\nWe wouldn't make a formal guarantee about order (since it's a JSON map), I think it helps readability for debugging, etc.", "url": "https://github.com/elastic/elasticsearch/pull/66160#discussion_r540453098", "createdAt": "2020-12-10T19:52:22Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FieldFetcher.java", "diffHunk": "@@ -48,7 +48,7 @@ public static FieldFetcher create(QueryShardContext context,\n                                       SearchLookup searchLookup,\n                                       Collection<FieldAndFormat> fieldAndFormats) {\n \n-        List<FieldContext> fieldContexts = new ArrayList<>();\n+        Map<String, FieldContext> fieldContexts = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b600744061d467a5b7ac2209afb58f9a63965141"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mzc3MDYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FieldFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo1MjozOFrOIDapng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToyMTowNVrOIFL3qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1MzI3OA==", "bodyText": "Could we remove this set, and instead rely on fieldContexts.containsKey(...)?", "url": "https://github.com/elastic/elasticsearch/pull/66160#discussion_r540453278", "createdAt": "2020-12-10T19:52:38Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FieldFetcher.java", "diffHunk": "@@ -48,7 +48,7 @@ public static FieldFetcher create(QueryShardContext context,\n                                       SearchLookup searchLookup,\n                                       Collection<FieldAndFormat> fieldAndFormats) {\n \n-        List<FieldContext> fieldContexts = new ArrayList<>();\n+        Map<String, FieldContext> fieldContexts = new HashMap<>();\n         List<String> unmappedFetchPattern = new ArrayList<>();\n         Set<String> mappedToExclude = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b600744061d467a5b7ac2209afb58f9a63965141"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwODI2Nw==", "bodyText": "Sure, great unintended side effect", "url": "https://github.com/elastic/elasticsearch/pull/66160#discussion_r542308267", "createdAt": "2020-12-14T11:21:05Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FieldFetcher.java", "diffHunk": "@@ -48,7 +48,7 @@ public static FieldFetcher create(QueryShardContext context,\n                                       SearchLookup searchLookup,\n                                       Collection<FieldAndFormat> fieldAndFormats) {\n \n-        List<FieldContext> fieldContexts = new ArrayList<>();\n+        Map<String, FieldContext> fieldContexts = new HashMap<>();\n         List<String> unmappedFetchPattern = new ArrayList<>();\n         Set<String> mappedToExclude = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1MzI3OA=="}, "originalCommit": {"oid": "b600744061d467a5b7ac2209afb58f9a63965141"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4726, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}