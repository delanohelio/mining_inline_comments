{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDQyMDQz", "number": 58413, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyOTowOFrOEH6NtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTo0NFrOEH6nZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzI5MjY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyOTowOFrOGnjKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1MDoyNlrOGnj1sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMzg0Mw==", "bodyText": "Could you re-use the same pattern as in FlushJobAction.Response here?\n            this.lastFinalizedBucketEnd =\n                (lastFinalizedBucketEnd != null) ? Instant.ofEpochMilli(lastFinalizedBucketEnd.toEpochMilli()) : null;", "url": "https://github.com/elastic/elasticsearch/pull/58413#discussion_r444123843", "createdAt": "2020-06-23T10:29:08Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "diffHunk": "@@ -31,39 +32,54 @@\n     public static final ParseField LAST_FINALIZED_BUCKET_END = new ParseField(\"last_finalized_bucket_end\");\n \n     public static final ConstructingObjectParser<FlushAcknowledgement, Void> PARSER = new ConstructingObjectParser<>(\n-            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Date) a[1]));\n+            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Instant) a[1]));\n \n     static {\n         PARSER.declareString(ConstructingObjectParser.constructorArg(), ID);\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                p -> TimeUtils.parseTimeField(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n+                p -> TimeUtils.parseTimeFieldToInstant(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n                 LAST_FINALIZED_BUCKET_END, ObjectParser.ValueType.VALUE);\n     }\n \n-    private String id;\n-    private Date lastFinalizedBucketEnd;\n+    private final String id;\n+    private final Instant lastFinalizedBucketEnd;\n \n-    public FlushAcknowledgement(String id, Date lastFinalizedBucketEnd) {\n+    public FlushAcknowledgement(String id, Instant lastFinalizedBucketEnd) {\n         this.id = id;\n-        this.lastFinalizedBucketEnd = lastFinalizedBucketEnd;\n+        // The C++ passes 0 when last finalized bucket end is not available\n+        long epochMillis = (lastFinalizedBucketEnd != null) ? lastFinalizedBucketEnd.toEpochMilli() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90c99050b45292f8c6f665331b53795578f642f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDgzNQ==", "bodyText": "It's slightly different as this one can be parsing output from the C++, which writes 0 instead of null.  So this one needs to convert 0 to null.", "url": "https://github.com/elastic/elasticsearch/pull/58413#discussion_r444134835", "createdAt": "2020-06-23T10:50:26Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "diffHunk": "@@ -31,39 +32,54 @@\n     public static final ParseField LAST_FINALIZED_BUCKET_END = new ParseField(\"last_finalized_bucket_end\");\n \n     public static final ConstructingObjectParser<FlushAcknowledgement, Void> PARSER = new ConstructingObjectParser<>(\n-            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Date) a[1]));\n+            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Instant) a[1]));\n \n     static {\n         PARSER.declareString(ConstructingObjectParser.constructorArg(), ID);\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                p -> TimeUtils.parseTimeField(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n+                p -> TimeUtils.parseTimeFieldToInstant(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n                 LAST_FINALIZED_BUCKET_END, ObjectParser.ValueType.VALUE);\n     }\n \n-    private String id;\n-    private Date lastFinalizedBucketEnd;\n+    private final String id;\n+    private final Instant lastFinalizedBucketEnd;\n \n-    public FlushAcknowledgement(String id, Date lastFinalizedBucketEnd) {\n+    public FlushAcknowledgement(String id, Instant lastFinalizedBucketEnd) {\n         this.id = id;\n-        this.lastFinalizedBucketEnd = lastFinalizedBucketEnd;\n+        // The C++ passes 0 when last finalized bucket end is not available\n+        long epochMillis = (lastFinalizedBucketEnd != null) ? lastFinalizedBucketEnd.toEpochMilli() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMzg0Mw=="}, "originalCommit": {"oid": "c90c99050b45292f8c6f665331b53795578f642f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM1ODQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTo0NFrOGnj0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMToxNDo1NlrOGnkiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDQzMQ==", "bodyText": "nit: Is the autodetect output an epoch number or a string? If it is a long it seems a bit silly to parse it as an Instant (Date previously) then convert back to a long then back to an Instant.", "url": "https://github.com/elastic/elasticsearch/pull/58413#discussion_r444134431", "createdAt": "2020-06-23T10:49:44Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "diffHunk": "@@ -31,39 +32,54 @@\n     public static final ParseField LAST_FINALIZED_BUCKET_END = new ParseField(\"last_finalized_bucket_end\");\n \n     public static final ConstructingObjectParser<FlushAcknowledgement, Void> PARSER = new ConstructingObjectParser<>(\n-            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Date) a[1]));\n+            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Instant) a[1]));\n \n     static {\n         PARSER.declareString(ConstructingObjectParser.constructorArg(), ID);\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                p -> TimeUtils.parseTimeField(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n+                p -> TimeUtils.parseTimeFieldToInstant(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n                 LAST_FINALIZED_BUCKET_END, ObjectParser.ValueType.VALUE);\n     }\n \n-    private String id;\n-    private Date lastFinalizedBucketEnd;\n+    private final String id;\n+    private final Instant lastFinalizedBucketEnd;\n \n-    public FlushAcknowledgement(String id, Date lastFinalizedBucketEnd) {\n+    public FlushAcknowledgement(String id, Instant lastFinalizedBucketEnd) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90c99050b45292f8c6f665331b53795578f642f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNjY0Nw==", "bodyText": "Good point.  It's written as a long by the C++.  And it's also a long in the XContent representation too, so the round-tripping tests will also work if it's parsed as a long.  I'll change it to do that.", "url": "https://github.com/elastic/elasticsearch/pull/58413#discussion_r444136647", "createdAt": "2020-06-23T10:54:07Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "diffHunk": "@@ -31,39 +32,54 @@\n     public static final ParseField LAST_FINALIZED_BUCKET_END = new ParseField(\"last_finalized_bucket_end\");\n \n     public static final ConstructingObjectParser<FlushAcknowledgement, Void> PARSER = new ConstructingObjectParser<>(\n-            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Date) a[1]));\n+            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Instant) a[1]));\n \n     static {\n         PARSER.declareString(ConstructingObjectParser.constructorArg(), ID);\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                p -> TimeUtils.parseTimeField(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n+                p -> TimeUtils.parseTimeFieldToInstant(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n                 LAST_FINALIZED_BUCKET_END, ObjectParser.ValueType.VALUE);\n     }\n \n-    private String id;\n-    private Date lastFinalizedBucketEnd;\n+    private final String id;\n+    private final Instant lastFinalizedBucketEnd;\n \n-    public FlushAcknowledgement(String id, Date lastFinalizedBucketEnd) {\n+    public FlushAcknowledgement(String id, Instant lastFinalizedBucketEnd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDQzMQ=="}, "originalCommit": {"oid": "c90c99050b45292f8c6f665331b53795578f642f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NjI4Mg==", "bodyText": "Actually, on trying this while just having one constructor it makes the tests a lot less clear, as they'd all have a number as the second argument.\nSo I'll introduce another constructor that takes a Long and use that in the parser but keep the Instant constructor so that tests can use it to make clear that the second argument is a time.", "url": "https://github.com/elastic/elasticsearch/pull/58413#discussion_r444146282", "createdAt": "2020-06-23T11:14:56Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/process/autodetect/output/FlushAcknowledgement.java", "diffHunk": "@@ -31,39 +32,54 @@\n     public static final ParseField LAST_FINALIZED_BUCKET_END = new ParseField(\"last_finalized_bucket_end\");\n \n     public static final ConstructingObjectParser<FlushAcknowledgement, Void> PARSER = new ConstructingObjectParser<>(\n-            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Date) a[1]));\n+            TYPE.getPreferredName(), a -> new FlushAcknowledgement((String) a[0], (Instant) a[1]));\n \n     static {\n         PARSER.declareString(ConstructingObjectParser.constructorArg(), ID);\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                p -> TimeUtils.parseTimeField(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n+                p -> TimeUtils.parseTimeFieldToInstant(p, LAST_FINALIZED_BUCKET_END.getPreferredName()),\n                 LAST_FINALIZED_BUCKET_END, ObjectParser.ValueType.VALUE);\n     }\n \n-    private String id;\n-    private Date lastFinalizedBucketEnd;\n+    private final String id;\n+    private final Instant lastFinalizedBucketEnd;\n \n-    public FlushAcknowledgement(String id, Date lastFinalizedBucketEnd) {\n+    public FlushAcknowledgement(String id, Instant lastFinalizedBucketEnd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDQzMQ=="}, "originalCommit": {"oid": "c90c99050b45292f8c6f665331b53795578f642f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}