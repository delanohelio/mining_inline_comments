{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDI3NDg5", "number": 62985, "title": "Introduce yamlRestCompatTest task and plugin. ", "bodyText": "This commit introduces a plugin to run REST compatibility tests.\nThe plugin is not currently applied to any projects with this commit,\nbut it establishes the foundation for testing REST compatibility.\nThis plugin will be applied to all core, plugin, and module projects\nthat currently have YAML based REST tests. This plugin, when applied\nwill do the following:\n\nCreate a new sourceset that extends from the yamlRestTest sourceset\nEnsure the default distribution is used to execute the tests\nCheckout bwc:minor version of the source code\nCopy the rest api and rest tests from bwc:minor to the new sourceset\nCreate the test task, but manipulate the classpath so it uses the\n\"normal\" YAML test runner, but the \"compat\" set of tests\nwire up dependencies, ide, and check\n\nThe implementation here depends on :distribution:bwc:minor:checkoutBwcBranch\nwhich is a convenient way to git checkout the most recent prior branch.\nThis approach works but is a bit fragile and long term would like a more\nrobust way to checkout arbitrary prior branches. This would be a fairly large\neffort and is not included in this commit.\nAlso not included in this commit is the code necessary to inject the\ncompatible header, any customization to running the compatibility tests,\nor any of the logic to override specific tests. Future commits will address\nthose concerns.", "createdAt": "2020-09-28T22:02:14Z", "url": "https://github.com/elastic/elasticsearch/pull/62985", "merged": true, "mergeCommit": {"oid": "f56bf94a7bf5a9238e8ee9739d2dd1e27485fafa"}, "closed": true, "closedAt": "2020-09-30T22:09:16Z", "author": {"login": "jakelandis"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMBpZhgH2gAyNDk0NDI3NDg5OmYxMDBjYjA1ZTlmYjY1MDkzMzYyZGNlOWZkZjkzNTgzYzhiOGIxN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdODSq6gH2gAyNDk0NDI3NDg5OmYwMzg5NGVlMGY5NDY4NTg1NDM3MTRiYmU5YTYyYzU5NjlkZmM4NTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f100cb05e9fb65093362dce9fdf93583c8b8b17b", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/f100cb05e9fb65093362dce9fdf93583c8b8b17b", "committedDate": "2020-09-24T13:59:27Z", "message": "initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42372d5e60871e65166d8ec8b00394016619acb2", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/42372d5e60871e65166d8ec8b00394016619acb2", "committedDate": "2020-09-24T18:46:24Z", "message": "add missing file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "339695ef6297ceb1e9e6c07482e76b3eabd6ba7e", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/339695ef6297ceb1e9e6c07482e76b3eabd6ba7e", "committedDate": "2020-09-24T19:30:35Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6bc3c60d752195989bfd35bf7026627301fd87", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/ef6bc3c60d752195989bfd35bf7026627301fd87", "committedDate": "2020-09-24T21:18:21Z", "message": "remove plugin that layers in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96245d72010000256378e12dae732fac51d57b84", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/96245d72010000256378e12dae732fac51d57b84", "committedDate": "2020-09-28T21:19:57Z", "message": "use copy resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24aa85387e2bfd542772ba69bc88f8efd42d09d3", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/24aa85387e2bfd542772ba69bc88f8efd42d09d3", "committedDate": "2020-09-28T21:32:18Z", "message": "remove testing and remove sourceSetForOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba34a1665929cf68b2edbb64101ddd3c3b3a59ca", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/ba34a1665929cf68b2edbb64101ddd3c3b3a59ca", "committedDate": "2020-09-28T21:32:50Z", "message": "remove testing stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a26b3dd96daf2e09f139b5d465d912422bd142", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/85a26b3dd96daf2e09f139b5d465d912422bd142", "committedDate": "2020-09-28T21:50:16Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3878a1ec072da9e7fc177e66121319f121566b3", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3878a1ec072da9e7fc177e66121319f121566b3", "committedDate": "2020-09-28T22:01:02Z", "message": "minor wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/b6b05ce5150374b40ea2615db6915e543992eabd", "committedDate": "2020-09-28T22:21:32Z", "message": "Merge remote-tracking branch 'upstream/master' into rest_compat_test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDkwMjU2", "url": "https://github.com/elastic/elasticsearch/pull/62985#pullrequestreview-498490256", "createdAt": "2020-09-29T13:49:37Z", "commit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OTozOFrOHZuK8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OTozOFrOHZuK8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMjkxNQ==", "bodyText": "This is needed so that you can run compat tests for a project that may no longer have YAML REST tests in master. Also, there may be cases where a module is completely deleted in master, but we will still want to use this plugin to only test compatibility.\nThis basically ensures that the execution of \"compat\" YAML tests is not directly coupled to the existence of \"normal\" YAML rest tests.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496732915", "createdAt": "2020-09-29T13:49:38Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -58,8 +58,10 @@\n     final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n     final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n     String sourceSetName;\n+    boolean skipHasRestTestCheck;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDkyMDY1", "url": "https://github.com/elastic/elasticsearch/pull/62985#pullrequestreview-498492065", "createdAt": "2020-09-29T13:51:21Z", "commit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MToyMVrOHZuQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MToyMVrOHZuQYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNDMwNw==", "bodyText": "This is needed as a way to copy the 7.x module/plugin tests to the source set. For \"normal\" YAML tests they are already in the source set (since they are part of the current source code).", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496734307", "createdAt": "2020-09-29T13:51:21Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -58,8 +58,10 @@\n     final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n     final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n     String sourceSetName;\n+    boolean skipHasRestTestCheck;\n     Configuration coreConfig;\n     Configuration xpackConfig;\n+    Configuration additionalConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Nzc4MTg4", "url": "https://github.com/elastic/elasticsearch/pull/62985#pullrequestreview-498778188", "createdAt": "2020-09-29T18:45:44Z", "commit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0NTo0NVrOHZ8E5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0NTo0NVrOHZ8E5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ==", "bodyText": "Why are we peeking at the source? Instead can we produce the files as an artifact? This would allow us to test against already released versions in the same way, just grab the zip of the spec/test files of that released version.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496960741", "createdAt": "2020-09-29T18:45:45Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTQ0Mzk5", "url": "https://github.com/elastic/elasticsearch/pull/62985#pullrequestreview-499544399", "createdAt": "2020-09-30T15:17:23Z", "commit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxNzoyNFrOHaivEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTozNDoxOVrOHajfoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NDEzMA==", "bodyText": "I tend to agree with @rjernst that peeking into other source folders is kind of an anti pattern. Instead sharing it declaratively as described here: https://docs.gradle.org/current/userguide/cross_project_publications.html is what we should aim for.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497594130", "createdAt": "2020-09-30T15:17:24Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDMzMA==", "bodyText": "We'd like to get away from using the project property within task actions. I'm currently working on #62968 Instead using project.copy{} we should inject a FileSystemOperations service and use that one for these kind of operations. See for example the LoggedExec task how this service is injected: https://github.com/elastic/elasticsearch/pull/62968/files#diff-babd4b74d83a9cea8bf0823cf6b71b66", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497600330", "createdAt": "2020-09-30T15:25:41Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -132,7 +142,7 @@ void copy() {\n         if (BuildParams.isInternal()) {\n             getLogger().debug(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n             project.copy(c -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDUxOQ==", "bodyText": "same as above", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497600519", "createdAt": "2020-09-30T15:25:54Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -164,6 +174,13 @@ void copy() {\n                 c.include(xpackPatternSet.getIncludes());\n             });\n         }\n+        // copy any additional config\n+        if (additionalConfig != null) {\n+            project.copy(c -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMjI2Mw==", "bodyText": "Ideally I think the bwc project would just share the checkoutDir as an artifact. Can you put a TODO in there to look into this after #62473 I will then pick that up at one. point. This PR does quite some rework on the bwc setup", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497602263", "createdAt": "2020-09-30T15:28:13Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwNjU2MA==", "bodyText": "same here. We should not rely on file dependencies and provide these dependencies as artifacts of the bwc project.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497606560", "createdAt": "2020-09-30T15:34:19Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n+\n+        // copy compatible rest specs\n+        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n+        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n+        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n+            .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                task.includeCore.set(extension.restApi.getIncludeCore());\n+                task.includeXpack.set(extension.restApi.getIncludeXpack());\n+                task.sourceSetName = SOURCE_SET_NAME;\n+                task.skipHasRestTestCheck = true;\n+                task.coreConfig = compatSpec;\n+                project.getDependencies()\n+                    .add(\n+                        task.coreConfig.getName(),\n+                        project.files(checkoutDir.resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428babb190d099562b4c2ca9a8562f0ce5ea3114", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/428babb190d099562b4c2ca9a8562f0ce5ea3114", "committedDate": "2020-09-30T20:47:39Z", "message": "clean up TODO's"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ebbcd16339ff7228bd587e5fa03bfea7cf5ccc", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/d0ebbcd16339ff7228bd587e5fa03bfea7cf5ccc", "committedDate": "2020-09-30T20:51:11Z", "message": "add another TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f03894ee0f946858543714bbe9a62c5969dfc854", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/f03894ee0f946858543714bbe9a62c5969dfc854", "committedDate": "2020-09-30T21:02:17Z", "message": "spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4509, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}