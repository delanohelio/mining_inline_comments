{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDY4NjQ4", "number": 56191, "title": "EQL: simplify equals/not-equals TRUE/FALSE expressions", "bodyText": "Simplify equals/not-equals TRUE/FALSE expressions, by transforming them into an AND(TRUE, new-expression) where new-expression may be the original expression or a negation of it. The aim is for the resulting expression to be simplified further by the subsequent optimization rules in the chain (AND(expression, TRUE) -> expression).", "createdAt": "2020-05-05T11:52:27Z", "url": "https://github.com/elastic/elasticsearch/pull/56191", "merged": true, "mergeCommit": {"oid": "17858afbe6da5fa0b3ecfc537cabb337e4baaffe"}, "closed": true, "closedAt": "2020-05-06T21:06:13Z", "author": {"login": "astefan"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceSlVkgH2gAyNDEzNDY4NjQ4OjNiZTc4Nzg3ZmQ4MjE5N2JlMzI3NTc0MjQ1NDkzNDQ0ZjNmNWViYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceuh8RgH2gAyNDEzNDY4NjQ4OmNjZTM4NWI0MGYwNGQwNzkzYWUxMWExYzZkOWU0MmU4YTYwMjE2MmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3be78787fd82197be327574245493444f3f5ebc2", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/3be78787fd82197be327574245493444f3f5ebc2", "committedDate": "2020-05-05T11:42:53Z", "message": "Simplify equals/not-equals TRUE/FALSE expressions, by transforming\nthem into an AND(TRUE, new-expression) where new-expression may be\nthe original expression or a negation of it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6eb4a7369dcfc649beae53b19c3346932da5ea", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc6eb4a7369dcfc649beae53b19c3346932da5ea", "committedDate": "2020-05-05T11:54:01Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into bool_optimizer_rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb5f1f332a78960e6950680a6aaf32c8faed585", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/4bb5f1f332a78960e6950680a6aaf32c8faed585", "committedDate": "2020-05-05T12:00:56Z", "message": "Fix errors after master merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/dbf707a8922c20cec46b38da55730d4152e91f73", "committedDate": "2020-05-05T12:16:13Z", "message": "Remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTA3NjU3", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-405907657", "createdAt": "2020-05-05T15:34:37Z", "commit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQ0Mzkz", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-405944393", "createdAt": "2020-05-05T16:14:52Z", "commit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDo1MlrOGQw_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDo1MlrOGQw_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzA3Ng==", "bodyText": "What's the purpose of the intermediate And node if it's always combined with TRUE?", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420233076", "createdAt": "2020-05-05T16:14:52Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {\n+            if (e instanceof Equals || e instanceof NotEquals) {\n+                Expression newLeft = null;\n+                Expression newRight = null;\n+\n+                // transform a \"==\" or \"!=\" TRUE/FALSE into an \"AND TRUE\" by negating (if necessary) the other side of the expression\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+                    // ex == TRUE -> AND(ex, TRUE)\n+                    if (TRUE.equals(eq.left()) || TRUE.equals(eq.right())) {\n+                        newLeft = eq.left();\n+                        newRight = eq.right();\n+                    }\n+                    // ex == FALSE -> AND(NOT(ex), TRUE)\n+                    if (FALSE.equals(eq.left()) || FALSE.equals(eq.right())) {\n+                        boolean isLeftFalse = FALSE.equals(eq.left());\n+                        newLeft = isLeftFalse ? TRUE : new Not(eq.left().source(), eq.left());\n+                        newRight = isLeftFalse ? new Not(eq.right().source(), eq.right()) : TRUE;\n+                    }\n+                } else {\n+                    NotEquals neq = (NotEquals) e;\n+                    // ex != TRUE -> AND(NOT(x), TRUE)\n+                    if (TRUE.equals(neq.left()) || TRUE.equals(neq.right())) {\n+                        boolean isLeftTrue = TRUE.equals(neq.left());\n+                        newLeft = isLeftTrue ? TRUE : new Not(neq.left().source(), neq.left());\n+                        newRight = isLeftTrue ? new Not(neq.right().source(), neq.right()) : TRUE;\n+                    }\n+                    // ex != FALSE -> AND(ex, TRUE)\n+                    if (FALSE.equals(neq.left()) || FALSE.equals(neq.right())) {\n+                        boolean isLeftFalse = FALSE.equals(neq.left());\n+                        newLeft = isLeftFalse ? TRUE : neq.left();\n+                        newRight = isLeftFalse ? neq.right() : TRUE;\n+                    }\n+                }\n+                \n+                if (newLeft != null) {\n+                    return new And(e.source(), newLeft, newRight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQ3ODA2", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-405947806", "createdAt": "2020-05-05T16:18:53Z", "commit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxODo1M1rOGQxKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxODo1M1rOGQxKCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw==", "bodyText": "I think it's okay to assume that TRUE is on the right,  since we've moved literals to the right.\nIf it's on the left, than both left and right must be literals and the expression will fold anyway.\nIf that's true, I think it'll simplify the logic a good bit:\nif (e instanceof Equals ) {\n    Equals eq = (Equals) e;\n    if (TRUE.equals(eq.right()) {\n        return eq.left()\n    }\n\n    if (FALSE.equals(eq.right()) {\n        return new Not(eq.source(), eq.left())\n    }\n}\n\nif (e instanceof NotEquals ) {\n    Equals eq = (NotEquals) e;\n    if (FALSE.equals(eq.right()) {\n        return eq.left()\n    }\n\n    if (TRUE.equals(eq.right()) {\n        return new Not(eq.source(), eq.left())\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420235787", "createdAt": "2020-05-05T16:18:53Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTY2OTg0", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-405966984", "createdAt": "2020-05-05T16:41:59Z", "commit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0MTo1OVrOGQyHRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo1MjowMFrOGQymFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MTQ2MA==", "bodyText": "BooleanLiteralsOnTheRight is applied after this rule so assuming literals on the right doesn't always work at least for the first iteration - I think this is fine or we could rearrange the rules, either move this rule after bools on the right or move that ahead.\nI agree with Ross that the code is simplified this way and we could avoid the intermediate And as well (it would be simplified by another rule but there's no value in keeping it around).", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420251460", "createdAt": "2020-05-05T16:41:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw=="}, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1OTM0OQ==", "bodyText": "Note you could compress the code even more though it impacts readability:\nif (e instanceof Equals || e instanceof NotEquals) {\n    BinaryComparison bc = (BinaryComparison) e;\n    Literal isTrue = e instanceof Equals ? TRUE : FALSE;\n    Literal isFalse = e instanceof NotEquals ? TRUE: FALSE;\n\n    // e == TRUE or e != FALSE\n    if (isTrue.equals(bc.right()) {\n        return bc.left();\n    }\n\n    //  e == FALSE or e != TRUE\n    if (isFalse.equals(bc.right()) {\n        return new Not(bc.source(), bc.left())\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420259349", "createdAt": "2020-05-05T16:52:00Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw=="}, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8024a1951f006b1df5289342cc6ec70c077cea2c", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/8024a1951f006b1df5289342cc6ec70c077cea2c", "committedDate": "2020-05-06T08:42:31Z", "message": "Address reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7102b384e52f35f3f8e57a8cfc8424934f1382d2", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/7102b384e52f35f3f8e57a8cfc8424934f1382d2", "committedDate": "2020-05-06T08:42:48Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into bool_optimizer_rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "993c3b65b25207f88dbf595088beeb80b366715b", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/993c3b65b25207f88dbf595088beeb80b366715b", "committedDate": "2020-05-06T09:02:25Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into bool_optimizer_rule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDYxOTI2", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-406461926", "createdAt": "2020-05-06T09:53:49Z", "commit": {"oid": "993c3b65b25207f88dbf595088beeb80b366715b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjI1NjE3", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-406625617", "createdAt": "2020-05-06T13:43:35Z", "commit": {"oid": "993c3b65b25207f88dbf595088beeb80b366715b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzYyMzk2", "url": "https://github.com/elastic/elasticsearch/pull/56191#pullrequestreview-406762396", "createdAt": "2020-05-06T16:03:05Z", "commit": {"oid": "993c3b65b25207f88dbf595088beeb80b366715b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce385b40f04d0793ae11a1c6d9e42e8a602162d", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/cce385b40f04d0793ae11a1c6d9e42e8a602162d", "committedDate": "2020-05-06T20:16:31Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into bool_optimizer_rule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 104, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}