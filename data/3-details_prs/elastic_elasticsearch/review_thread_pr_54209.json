{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzAzMjcz", "number": 54209, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxODowM1rODrURHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMToyOVrODrzGgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ3NDIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxODowM1rOF7l3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTozODozOFrOF7rU2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMDc4Ng==", "bodyText": "honest question: what's our convention for trailing commas after the last line in a list?\njust noticed the changes here and wondering which I should do in my PRs", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398030786", "createdAt": "2020-03-25T17:18:03Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -23,8 +24,9 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Substring.class, Substring::new, \"substring\"),\n-            },\n+                def(Length.class, Length::new, \"length\"),\n+                def(Substring.class, Substring::new, \"substring\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzODczMA==", "bodyText": "I think that was a leftover. I don't see a point in having a comma if there is nothing left afterwards. The compiler doesn't complain, as it's ignoring it, but imo it shouldn't be there.", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398038730", "createdAt": "2020-03-25T17:29:23Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -23,8 +24,9 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Substring.class, Substring::new, \"substring\"),\n-            },\n+                def(Length.class, Length::new, \"length\"),\n+                def(Substring.class, Substring::new, \"substring\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMDc4Ng=="}, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMDE1NQ==", "bodyText": "I'm used to Go approach with trailing comma and like the reasoning for it:\nhttps://dave.cheney.net/2014/10/04/that-trailing-comma", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398120155", "createdAt": "2020-03-25T19:38:38Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -23,8 +24,9 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Substring.class, Substring::new, \"substring\"),\n-            },\n+                def(Length.class, Length::new, \"length\"),\n+                def(Substring.class, Substring::new, \"substring\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMDc4Ng=="}, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ5MDc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyMTo0OFrOF7mCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozNTozN1rOF7mm6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMzQzOQ==", "bodyText": "I think that documentation is outdated and before EQL had a type system.\nHere's the current definition. It accepts only strings and arrays. I think it's okay if we drop array support for now, like we have by igoring other functions\nhttps://github.com/endgameinc/eql/blob/master/eql/functions.py#L427-L441\nI'll fix the EQL documentation quick.", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398033439", "createdAt": "2020-03-25T17:21:48Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.LengthFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific length function acting on every type of field, not only strings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MDA1Nw==", "bodyText": "That's unfortunate. I need to remove some tests and adjust the logic...\nIt would be good if other functions' documentation would be double-checked to make sure we implement the right functionality.", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398040057", "createdAt": "2020-03-25T17:31:20Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.LengthFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific length function acting on every type of field, not only strings.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMzQzOQ=="}, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0Mjg1OQ==", "bodyText": "Yeah. I hope that didn't waste too much of your time, and I'm sorry about that. I'll do a quick double check over the EQL documentation and add a type signature to the functions issue", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398042859", "createdAt": "2020-03-25T17:35:37Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.LengthFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific length function acting on every type of field, not only strings.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMzQzOQ=="}, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ5NDI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyMjo0MVrOF7mEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo0MTo0NVrOF7rbhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDAzMQ==", "bodyText": "the name mismatch is slightly confusing", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398034031", "createdAt": "2020-03-25T17:22:41Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.LengthFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific length function acting on every type of field, not only strings.\n+ * For strings it will return the length of that specific string, for any other type it will return 0.\n+ */\n+public class Length extends ScalarFunction {\n+\n+    private final Expression source;\n+    \n+    public Length(Source source, Expression src) {\n+        super(source, Arrays.asList(src));\n+        this.source = src;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMTg2Mw==", "bodyText": "it is the same in many other places, so ... it's consistent.", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398121863", "createdAt": "2020-03-25T19:41:45Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Length.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.LengthFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific length function acting on every type of field, not only strings.\n+ * For strings it will return the length of that specific string, for any other type it will return 0.\n+ */\n+public class Length extends ScalarFunction {\n+\n+    private final Expression source;\n+    \n+    public Length(Source source, Expression src) {\n+        super(source, Arrays.asList(src));\n+        this.source = src;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDAzMQ=="}, "originalCommit": {"oid": "2abf589238af1101c3be921873fa4b22a5c747b7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUxMDIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/LengthFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxNzoyNFrOF8Wo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMTowNTo0MFrOF9Nivg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTgxMA==", "bodyText": "I was wondering about this after our discussion today and when thinking of edge cases for wildcard #53999.\nWhat are the conditions that would cause us to hit this path?", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398829810", "createdAt": "2020-03-26T19:17:24Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/LengthFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class LengthFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"slen\";\n+\n+    private final Processor source;\n+\n+    public LengthFunctionProcessor(Processor source) {\n+        this.source = source;\n+    }\n+\n+    public LengthFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input));\n+    }\n+\n+    public static Object doProcess(Object source) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cc578d457ab9fa49fe1fdf137dd49dc8f7e473"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyOTM0Mg==", "bodyText": "That's a good question. I cannot think of a scenario where a Character is being received. Maybe the JSON XContent parser would (in a future implementation) consider a single character coming over the wire to be a Character instead of a String.", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r399729342", "createdAt": "2020-03-29T01:05:40Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/LengthFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class LengthFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"slen\";\n+\n+    private final Processor source;\n+\n+    public LengthFunctionProcessor(Processor source) {\n+        this.source = source;\n+    }\n+\n+    public LengthFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input));\n+    }\n+\n+    public static Object doProcess(Object source) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTgxMA=="}, "originalCommit": {"oid": "72cc578d457ab9fa49fe1fdf137dd49dc8f7e473"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUyNjA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMToyOVrOF8Wyyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMDo1Mzo1MFrOF9NfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMjMzMA==", "bodyText": "If this is always done in painless anyway, why can't this work? It would just retrieve the doc value right?\nalso if this is just a matter of scoping the function to the more cut-and-dry cases, that's fine too", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r398832330", "createdAt": "2020-03-26T19:21:29Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -22,4 +23,12 @@ public void testPropertyEquationInClauseFilterUnsupported() {\n         String msg = e.getMessage();\n         assertEquals(\"Line 1:52: Comparisons against variables are not (currently) supported; offender [parent_process_name] in [==]\", msg);\n     }\n+\n+    public void testLengthFunctionWithInexact() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+                () -> plan(\"process where length(plain_text) > 0\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\nline 1:15: [length(plain_text)] cannot operate on field of data type [text]: No keyword/multi-field \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cc578d457ab9fa49fe1fdf137dd49dc8f7e473"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyODQ3NQ==", "bodyText": "Text fields cannot use doc_values and the only way for Painless to load a text field is through _source. For one, _source is expensive to load. Also, it will load the entire _source, not only the source for that specific field. Performance wise it will be painfull (pun intended).", "url": "https://github.com/elastic/elasticsearch/pull/54209#discussion_r399728475", "createdAt": "2020-03-29T00:53:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -22,4 +23,12 @@ public void testPropertyEquationInClauseFilterUnsupported() {\n         String msg = e.getMessage();\n         assertEquals(\"Line 1:52: Comparisons against variables are not (currently) supported; offender [parent_process_name] in [==]\", msg);\n     }\n+\n+    public void testLengthFunctionWithInexact() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+                () -> plan(\"process where length(plain_text) > 0\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\nline 1:15: [length(plain_text)] cannot operate on field of data type [text]: No keyword/multi-field \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMjMzMA=="}, "originalCommit": {"oid": "72cc578d457ab9fa49fe1fdf137dd49dc8f7e473"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4096, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}