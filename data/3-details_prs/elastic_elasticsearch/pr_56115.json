{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTc5OTUw", "number": 56115, "title": "SQL: Fix issue with date range queries and timezone", "bodyText": "Previously, the timezone parameter was not passed to the RangeQuery\nand as a results queries that use the ES date math notation (now,\nnow-1d, now/d, now/h, now+2h, etc.) were using the UTC timezone and\nnot the one passed through the \"timezone\"/\"time_zone\" JDBC/REST params.\nAs a consequence, the date math defined dates were always considered in\nUTC and possibly led to incorrect results for queries like:\nSELECT * FROM t WHERE date BETWEEN now-1d/d AND now/d\n\nFixes: #56049", "createdAt": "2020-05-04T14:17:19Z", "url": "https://github.com/elastic/elasticsearch/pull/56115", "merged": true, "mergeCommit": {"oid": "300f010c0b18ed0f10a41d5e1606466ba0a3088f"}, "closed": true, "closedAt": "2020-05-05T07:43:22Z", "author": {"login": "matriv"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd_6_GAH2gAyNDEyOTc5OTUwOmFhZGU5NTY4MjM4MDg3ZmE0YTc0MGIyZTZlOGVlNWRlNzI2MDUxNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceOYYrgFqTQwNTUyOTc1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aade9568238087fa4a740b2e6e8ee5de72605176", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/aade9568238087fa4a740b2e6e8ee5de72605176", "committedDate": "2020-05-04T13:58:20Z", "message": "SQL: Fix issue with date range queries and timezone\n\nPreviously, the timezone parameter was not passed to the RangeQuery\nand as a results queries that use the ES date math notation (now,\nnow-1d, now/d, now/h, now+2h, etc.) were using the UTC timezone and\nnot the one passed through the \"timezone\"/\"time_zone\" JDBC/REST params.\nAs a consequence, the date math defined dates were always considered in\nUTC and possibly led to incorrect results for queries like:\n```\nSELECT * FROM t WHERE date BETWEEN now-1d/d AND now/d\n```\n\nFixes: #56049"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDk0MjE2", "url": "https://github.com/elastic/elasticsearch/pull/56115#pullrequestreview-405094216", "createdAt": "2020-05-04T15:25:22Z", "commit": {"oid": "aade9568238087fa4a740b2e6e8ee5de72605176"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyNToyMlrOGQFe5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyODoyMFrOGQFnDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMDIzMQ==", "bodyText": "I think it's too disruptive to pass the zoneId to all translations as the vast majority of the nodes will simply ignore it.\nIt also forces one to think of an expression in terms of a timezone which is incorrect.\nOnly some expressions have a zoneId so that information should be localized instead of being passed at a higher level.\nIn this case, the zoneId should be on the comparison operator (either inferred based on the arguments or extracted from the configuration) and the translator should only extract it from there.", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419520231", "createdAt": "2020-05-04T15:25:22Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java", "diffHunk": "@@ -53,7 +53,7 @@ protected PhysicalPlan rule(FilterExec plan) {\n                 EsQueryExec exec = (EsQueryExec) plan.child();\n                 QueryContainer qContainer = exec.queryContainer();\n \n-                Query query = ExpressionTranslators.toQuery(plan.condition());\n+                Query query = ExpressionTranslators.toQuery(plan.condition(), qContainer.zoneId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aade9568238087fa4a740b2e6e8ee5de72605176"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMTIzMA==", "bodyText": "A handler could contain the default zoneId however since these are created statically, there's no way to pass that through during construction time.", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419521230", "createdAt": "2020-05-04T15:26:48Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -249,17 +251,21 @@ private static Query translate(BinaryComparison bc, TranslatorHandler handler) {\n                 isDateLiteralComparison = true;\n             }\n \n+            ZoneId zoneId = null;\n+            if (bc.left().dataType() == DATETIME) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aade9568238087fa4a740b2e6e8ee5de72605176"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjMxOQ==", "bodyText": "Ughhh - a good example of how formatting penalizes clarity. Rename source into s or includeLower into iLower, etc... and boom, now everything fits into one line.", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419522319", "createdAt": "2020-05-04T15:28:20Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java", "diffHunk": "@@ -20,20 +21,30 @@\n     private final Object lower, upper;\n     private final boolean includeLower, includeUpper;\n     private final String format;\n+    private final ZoneId zoneId;\n \n-    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper) {\n-        this(source, field, lower, includeLower, upper, includeUpper, null);\n+    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper, ZoneId zoneId) {\n+        this(source, field, lower, includeLower, upper, includeUpper, null, zoneId);\n     }\n \n-    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper,\n-            boolean includeUpper, String format) {\n+    public RangeQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aade9568238087fa4a740b2e6e8ee5de72605176"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a1e0647288e8043102891faeec26eab01a5fef", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/28a1e0647288e8043102891faeec26eab01a5fef", "committedDate": "2020-05-04T15:51:53Z", "message": "Revert \"SQL: Fix issue with date range queries and timezone\"\n\nThis reverts commit aade9568238087fa4a740b2e6e8ee5de72605176."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff6e4ba4e0e766fa6beb1cda311b01e9b26309b", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ff6e4ba4e0e766fa6beb1cda311b01e9b26309b", "committedDate": "2020-05-04T15:55:48Z", "message": "re-enable test changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e8467a1e50822467c1e943dbd399952711cab2", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/30e8467a1e50822467c1e943dbd399952711cab2", "committedDate": "2020-05-04T18:42:27Z", "message": "different approach, pass timezone to comparison functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/189bf8e801b37ac747f1ba5486c8da4049740278", "committedDate": "2020-05-04T19:14:23Z", "message": "Merge remote-tracking branch 'upstream/master' into fix-56049"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MzM1Mzk5", "url": "https://github.com/elastic/elasticsearch/pull/56115#pullrequestreview-405335399", "createdAt": "2020-05-04T20:48:29Z", "commit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo0ODoyOVrOGQRl9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo1NTozMVrOGQR1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxODY0NA==", "bodyText": "For Equals without timezone I think it's best to create a constructor that doesn't require the tz , have the tz as null and potentially validate that it's not being used.\nThe tz should not be used in this case so forcing its user to specify one is just going to lead to problems.", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419718644", "createdAt": "2020-05-04T20:48:29Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -105,7 +106,7 @@ public ScalarFunction makeSubstitute() {\n         ScalarFunction func = null;\n \n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n+            final Equals eq = new Equals(source(), field, address, UTC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxOTY4Mw==", "bodyText": "Similar to source, just extract the params.zoneId into a variable an use that instead - less verbose and makes potential refactoring easier in the future.", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419719683", "createdAt": "2020-05-04T20:50:21Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java", "diffHunk": "@@ -118,17 +124,17 @@ public Expression visitComparison(ComparisonContext ctx) {\n \n         switch (op.getSymbol().getType()) {\n             case EqlBaseParser.EQ:\n-                return new Equals(source, left, right);\n+                return new Equals(source, left, right, params.zoneId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxOTgxNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419719816", "createdAt": "2020-05-04T20:50:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/LogicalPlanBuilder.java", "diffHunk": "@@ -56,7 +55,7 @@ public LogicalPlan visitEventQuery(EqlBaseParser.EventQueryContext ctx) {\n             Literal eventValue = new Literal(eventSource, eventName, DataTypes.KEYWORD);\n \n             UnresolvedAttribute eventField = new UnresolvedAttribute(eventSource, params.fieldEventCategory());\n-            Expression eventMatch = new Equals(eventSource, eventField, eventValue);\n+            Expression eventMatch = new Equals(eventSource, eventField, eventValue, params.zoneId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMDA0NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419720044", "createdAt": "2020-05-04T20:50:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/TransportEqlSearchAction.java", "diffHunk": "@@ -64,7 +64,7 @@ public static void operation(PlanExecutor planExecutor, EqlSearchTask task, EqlS\n         boolean includeFrozen = request.indicesOptions().ignoreThrottled() == false;\n         String clientId = null;\n \n-        ParserParams params = new ParserParams()\n+        ParserParams params = new ParserParams(zoneId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMDIyOA==", "bodyText": ":)", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419720228", "createdAt": "2020-05-04T20:51:21Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/Range.java", "diffHunk": "@@ -35,28 +36,30 @@\n \n     private final Expression value, lower, upper;\n     private final boolean includeLower, includeUpper;\n+    private final ZoneId zoneId;\n \n-    public Range(Source source, Expression value, Expression lower, boolean includeLower, Expression upper, boolean includeUpper) {\n-        super(source, asList(value, lower, upper));\n+    public Range(Source src, Expression value, Expression lower, boolean inclLower, Expression upper, boolean inclUpper, ZoneId zoneId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMTkzMg==", "bodyText": "What would be the downside of always getting the zoneId and passing it to the range query ?", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419721932", "createdAt": "2020-05-04T20:54:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -249,17 +251,21 @@ private static Query translate(BinaryComparison bc, TranslatorHandler handler) {\n                 isDateLiteralComparison = true;\n             }\n \n+            ZoneId zoneId = null;\n+            if (bc.left().dataType() == DATETIME) {\n+                zoneId = bc.zoneId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMjU1Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419722557", "createdAt": "2020-05-04T20:55:31Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRulesTests.java", "diffHunk": "@@ -44,12 +44,21 @@\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.EsField;\n \n+import java.time.ZoneId;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n import static java.util.Collections.emptyMap;\n+import static org.elasticsearch.xpack.ql.TestUtils.equalsOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.greaterThanOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.greaterThanOrEqualOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.lessThanOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.lessThanOrEqualOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.notEqualsOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.nullEqualsOf;\n import static org.elasticsearch.xpack.ql.TestUtils.of;\n+import static org.elasticsearch.xpack.ql.TestUtils.rangeOf;\n import static org.elasticsearch.xpack.ql.expression.Literal.FALSE;\n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n import static org.elasticsearch.xpack.ql.expression.Literal.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8989d5103701e83d180775166c42c00cfad7d31", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8989d5103701e83d180775166c42c00cfad7d31", "committedDate": "2020-05-04T21:11:57Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTI5NzU5", "url": "https://github.com/elastic/elasticsearch/pull/56115#pullrequestreview-405529759", "createdAt": "2020-05-05T06:49:07Z", "commit": {"oid": "b8989d5103701e83d180775166c42c00cfad7d31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 224, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}