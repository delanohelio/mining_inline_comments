{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTEyOTUw", "number": 66310, "title": "Improve reusability of the invalidation counting cache wrapper", "bodyText": "This PR is a refactoring for InvalidationCountingCacheWrapper to improve its reusability beyond ApiKeyService. It is a follow-up for #59376.\nThe change includes extracting the logic of \"minimizing chance of caching stale results\" into a new class, which is now generic and not tied to any cache related operations. This in turn allows it to be reused by different caches, which often have subtle, important and anonying differences that make it impossible (or at least cubersome and painful) to have a generic solution. So this change of reducing the size of reusable code feels like the right move.\nAs an example of applying this new pattern, the caches for NativePrivilegeStore are now migrated and managed by the centrialied CacheInvalidatorRegistry. The clear privilege cache rest and transport actions are also updated to use the new implementation. I intentionally left the Request/Response classes untouched and plan to have a separate PR to address them because they would involve user visible deprecation changes. I also plan to migrate other security related caches to use this pattern if this PR is approved.\nWe had quite lively discussions around this topic with #59376, but the time was constraint due to release. Therefore this PR targets v7.12.0 and should give us enough time for discussions.", "createdAt": "2020-12-15T01:33:12Z", "url": "https://github.com/elastic/elasticsearch/pull/66310", "merged": true, "mergeCommit": {"oid": "d4b649cd25df6c4261a206b56f6aa7ecd88e33ca"}, "closed": true, "closedAt": "2021-04-18T23:55:47Z", "author": {"login": "ywangd"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmPjKAAH2gAyNTM5OTEyOTUwOmQ0MDc4MmJjYzM3MThmYTA4OTYxYzU5MzI3NWQ3NGFlMDJjM2ZhY2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeNJq3NAH2gAyNTM5OTEyOTUwOjkzNDQ2MDk2NGEyMjM1NjdmNzljOWE3NTVlNmMyNGQ2MTk0OThjYzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d40782bcc3718fa08961c593275d74ae02c3faca", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/d40782bcc3718fa08961c593275d74ae02c3faca", "committedDate": "2020-12-15T00:53:20Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c21f48c4bcb4dbc41f98d77637c0898703e63d", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/f9c21f48c4bcb4dbc41f98d77637c0898703e63d", "committedDate": "2020-12-15T01:37:14Z", "message": "fix linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07e980456fc9222c4f2cc417cf0a8cd316095f62", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/07e980456fc9222c4f2cc417cf0a8cd316095f62", "committedDate": "2020-12-15T01:41:23Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ffa3f3f2f81be7159ada69c8efe601868af3b3", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0ffa3f3f2f81be7159ada69c8efe601868af3b3", "committedDate": "2020-12-15T01:44:00Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b4f35d6de66bb88771c43b016d7422f4e240cc", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8b4f35d6de66bb88771c43b016d7422f4e240cc", "committedDate": "2020-12-15T02:04:42Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dbf16ec9fd02d3489734fbced5f51638ba0b0a1", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/0dbf16ec9fd02d3489734fbced5f51638ba0b0a1", "committedDate": "2020-12-15T02:04:55Z", "message": "Merge remote-tracking branch 'origin/master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/8696de5bf25c6137b7c41a2b913df9b4577e3e11", "committedDate": "2020-12-16T00:44:25Z", "message": "Merge remote-tracking branch 'origin/master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMzcyODMy", "url": "https://github.com/elastic/elasticsearch/pull/66310#pullrequestreview-581372832", "createdAt": "2021-02-02T14:03:18Z", "commit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDowMzoxOFrOIeSFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDowMzoxOFrOIeSFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw==", "bodyText": "I think it would be easier to read if the count were the first parameter.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568624577", "createdAt": "2021-02-02T14:03:18Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDIyODg3", "url": "https://github.com/elastic/elasticsearch/pull/66310#pullrequestreview-581422887", "createdAt": "2021-02-02T14:50:04Z", "commit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDo1MDowNFrOIeUXww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDo1MDowNFrOIeUXww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2MTk1NQ==", "bodyText": "Executing the runnable parameter like this feels forced. I would simplify it by renaming this increment with no parameters.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568661955", "createdAt": "2021-02-02T14:50:04Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {\n+        assert count >= 0 : \"Count must be non-negative\";\n+        try (ReleasableLock ignored = countingReadLock.acquire()) {\n+            if (count == counter.get()) {\n+                logger.debug(\"Count matches [{}], executing runnable\", count);\n+                runnable.run();\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Increment the internal counter before executing the given runnable.\n+     * The counter is incremented in a write-locking block so that no other runnable\n+     * can be executed by methods of the same manager when the counter is being incremented.\n+     */\n+    public void incrementAndRun(Runnable runnable) {\n+        try (ReleasableLock ignored = countingWriteLock.acquire()) {\n+            counter.incrementAndGet();\n+        }\n+        runnable.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDcxNDU1", "url": "https://github.com/elastic/elasticsearch/pull/66310#pullrequestreview-581471455", "createdAt": "2021-02-02T15:33:43Z", "commit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTozMzo0M1rOIeWk0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTozMzo0M1rOIeWk0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODA2Ng==", "bodyText": "As discussed, we both agree that encapsulating a cache inside this class is the wrong abstraction (which is InvalidationCountingCacheWrapper), although I struggle to put it in words in a comment.\nI still tend to have more ambitious hopes for this cache invalidation pattern, but I very much fear we can sunk in it and not achieve much.\nOverall, I think abstraction here is good enough!\nBut its rich history is showing in the description and in the names. We should polish these.\nI would think about this class as a special type of atomic integer, which has a fancy method \"run if integer constant\", such that the run block of code cannot overlap with changes (increments) to the integer.\nIt's hard to explain it's usage in the caching context, so I would steer away from it completely.\nFor example, we rely that changes to the underlying data (eg api key docs) are performed before calling increment and that we call getCount before we retrieve the underlying data, so that we ensure the sequence modify data -> increment -> getCount -> read data -> cache data .\nMy explicit suggestion is to rename to CounterCompare, or anythign else that inspires that the runnable and the counter cannot overlap.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568698066", "createdAt": "2021-02-02T15:33:43Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDgwNjIx", "url": "https://github.com/elastic/elasticsearch/pull/66310#pullrequestreview-581480621", "createdAt": "2021-02-02T15:42:14Z", "commit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f6ae013b83a9f7bee21cca1bff32549d951808", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/07f6ae013b83a9f7bee21cca1bff32549d951808", "committedDate": "2021-02-05T00:22:40Z", "message": "Merge remote-tracking branch 'origin/master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a8c65b867b7d420d81ab70d05067fe18cb18fe", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/56a8c65b867b7d420d81ab70d05067fe18cb18fe", "committedDate": "2021-02-05T01:49:24Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e90fc2a94485721eb4447b34bb01c0a1eb8a12", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/26e90fc2a94485721eb4447b34bb01c0a1eb8a12", "committedDate": "2021-02-05T02:02:12Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwMzQwMTg3", "url": "https://github.com/elastic/elasticsearch/pull/66310#pullrequestreview-590340187", "createdAt": "2021-02-15T10:21:41Z", "commit": {"oid": "26e90fc2a94485721eb4447b34bb01c0a1eb8a12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac12e786fc4063a7cdcb3aa704750261d99ecf68", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/ac12e786fc4063a7cdcb3aa704750261d99ecf68", "committedDate": "2021-02-15T22:19:52Z", "message": "Merge remote-tracking branch 'origin/master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21854e853a5b7b28f94d0db67d15ba80f06f510", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/d21854e853a5b7b28f94d0db67d15ba80f06f510", "committedDate": "2021-04-14T02:49:57Z", "message": "Merge remote-tracking branch 'origin/master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b1fee1b9ea9feb08a150bc074ed3271426e91b", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/48b1fee1b9ea9feb08a150bc074ed3271426e91b", "committedDate": "2021-04-14T11:44:10Z", "message": "Merge branch 'master' into cache-clearing-refactor-privilege-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "934460964a223567f79c9a755e6c24d619498cc9", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/934460964a223567f79c9a755e6c24d619498cc9", "committedDate": "2021-04-14T22:05:22Z", "message": "Merge branch 'master' into cache-clearing-refactor-privilege-store"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}