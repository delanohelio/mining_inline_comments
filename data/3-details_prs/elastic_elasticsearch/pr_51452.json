{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDQxNzg5", "number": 51452, "title": "Move variable slotting to the IR tree", "bodyText": "Currently, variable slotting (a variable's index on the ASM stack) is generated by the user tree during semantic checking. With the split it no longer makes sense to have the user tree generate a variable's slot. This PR moves variable slot allocation to the IR tree using the class ScopeTable. This class holds variables currently in scope and calculates an appropriate slot for them. This also allows for optimization phases to occur on the IR tree because now variables can be injected without having to update slotting.\nFor review the most important class to look at in this PR is the newly added ScopeTable. The majority of this PR is boilerplate adding ScopeTable to the IR nodes write method signature.", "createdAt": "2020-01-24T22:31:19Z", "url": "https://github.com/elastic/elasticsearch/pull/51452", "merged": true, "mergeCommit": {"oid": "9d2c5796367afa8af25eeed08cf38390ebbfcae6"}, "closed": true, "closedAt": "2020-01-28T20:29:22Z", "author": {"login": "jdconrad"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9mJ5rgH2gAyMzY3MDQxNzg5OjE3MGZhNDUyYmM5MjljYzE3NWZmY2MzYjA5Mjk5OTMxMGFjOTNjMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9oNXvgH2gAyMzY3MDQxNzg5OmU3MGFjNGM3NjQ0NTY2ODg0Y2IyN2JhMDRkYTE3YTBkMjI0ZGRiMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "170fa452bc929cc175ffcc3b092999310ac93c37", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/170fa452bc929cc175ffcc3b092999310ac93c37", "committedDate": "2020-01-24T21:51:31Z", "message": "rebuild scope table in ir tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718", "committedDate": "2020-01-24T22:32:50Z", "message": "missed some private variables during the cherry-pick"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdaef3be3d1d7927ba2e7d9dbb3e8bdd3fce3e07", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/cdaef3be3d1d7927ba2e7d9dbb3e8bdd3fce3e07", "committedDate": "2020-01-24T22:38:46Z", "message": "fix imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjY2MzM4", "url": "https://github.com/elastic/elasticsearch/pull/51452#pullrequestreview-348266338", "createdAt": "2020-01-24T22:44:46Z", "commit": {"oid": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0NDo0NlrOFhsaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxNToxMVrOFhs3wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDkzMg==", "bodyText": "why do we need an explicit empty ctor the same as the default ctor?", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370874932", "createdAt": "2020-01-24T22:44:46Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "diffHunk": "@@ -22,15 +22,23 @@\n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Globals;\n import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.symbol.ScopeTable;\n+import org.elasticsearch.painless.symbol.ScopeTable.Variable;\n import org.objectweb.asm.Label;\n import org.objectweb.asm.Opcodes;\n \n public class DoWhileLoopNode extends LoopNode {\n \n+    public DoWhileLoopNode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MjQ5Ng==", "bodyText": "Maybe we could have another method for special/private/hidden (whatever we want to call them) variables? I'd rather have a dedicated method than have to remember # is outside our grammar and so this cannot collide with user variables.", "url": "https://github.com/elastic/elasticsearch/pull/51452#discussion_r370882496", "createdAt": "2020-01-24T23:15:11Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -81,42 +123,48 @@ public void setIndexedType(Class<?> indexedType) {\n     public String getIndexedCanonicalTypeName() {\n         return PainlessLookupUtility.typeToCanonicalTypeName(indexedType);\n     }\n-    \n+\n     /* ---- end node data ---- */\n \n     @Override\n-    protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals) {\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals, ScopeTable scopeTable) {\n         methodWriter.writeStatementOffset(location);\n \n-        getConditionNode().write(classWriter, methodWriter, globals);\n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ISTORE), array.getSlot());\n+        Variable variable = scopeTable.defineVariable(variableType, variableName);\n+        Variable array = scopeTable.defineVariable(arrayType, arrayName);\n+        Variable index = scopeTable.defineVariable(indexType, indexName);\n+\n+        getConditionNode().write(classWriter, methodWriter, globals, scopeTable);\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ISTORE), array.getSlot());\n         methodWriter.push(-1);\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ISTORE), index.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ISTORE), index.getSlot());\n \n         Label begin = new Label();\n         Label end = new Label();\n \n         methodWriter.mark(begin);\n \n         methodWriter.visitIincInsn(index.getSlot(), 1);\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot());\n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ILOAD), index.getSlot());\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ILOAD), array.getSlot());\n         methodWriter.arrayLength();\n         methodWriter.ifICmp(MethodWriter.GE, end);\n \n-        methodWriter.visitVarInsn(MethodWriter.getType(array.clazz).getOpcode(Opcodes.ILOAD), array.getSlot());\n-        methodWriter.visitVarInsn(MethodWriter.getType(index.clazz).getOpcode(Opcodes.ILOAD), index.getSlot());\n-        methodWriter.arrayLoad(MethodWriter.getType(getIndexedType()));\n+        methodWriter.visitVarInsn(array.getAsmType().getOpcode(Opcodes.ILOAD), array.getSlot());\n+        methodWriter.visitVarInsn(index.getAsmType().getOpcode(Opcodes.ILOAD), index.getSlot());\n+        methodWriter.arrayLoad(MethodWriter.getType(indexedType));\n         methodWriter.writeCast(cast);\n-        methodWriter.visitVarInsn(MethodWriter.getType(variable.clazz).getOpcode(Opcodes.ISTORE), variable.getSlot());\n+        methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n+\n+        Variable loop = scopeTable.getVariable(\"#loop\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aee8ccb6d5a51f1bea9bfe6e0a8cde7de970718"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70ac4c7644566884cb27ba04da17a0d224ddb06", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/e70ac4c7644566884cb27ba04da17a0d224ddb06", "committedDate": "2020-01-25T00:15:07Z", "message": "added methods for internal variables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2729, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}