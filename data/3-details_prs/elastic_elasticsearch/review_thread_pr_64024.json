{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODc4MzE4", "number": 64024, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDowNDoyNVrOEwi8yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowMTo0MFrOFDSaXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM5NzIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDowNDoyNVrOHmL7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoxMTo0NFrOHmP7Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzM0NA==", "bodyText": "I think these tests can have better coverage if we move them into ESTestCase#inFipsJvm so that they are always checked if fips is enabled.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509803344", "createdAt": "2020-10-22T00:04:25Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){\n+            assertThat(CryptoServicesRegistrar.isInApprovedOnlyMode(), equalTo(true));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MjM3NQ==", "bodyText": "I think it's better here. I feel like this is more explicit in its own test that has its own distinct purpose rather than burying it in another test (case).\nWe might get more coverage by moving them, but I don't understand the value of that - we only need to run them once to get the value we need.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509842375", "createdAt": "2020-10-22T02:28:56Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){\n+            assertThat(CryptoServicesRegistrar.isInApprovedOnlyMode(), equalTo(true));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzM0NA=="}, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0OTcxNg==", "bodyText": "I think it has some value, maybe not for CI, but for individual tests when you need run them locally so that you can be sure FIPS is always correctly configured by the property passed from CLI.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509849716", "createdAt": "2020-10-22T02:56:26Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){\n+            assertThat(CryptoServicesRegistrar.isInApprovedOnlyMode(), equalTo(true));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzM0NA=="}, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2ODg0Mw==", "bodyText": "I think it has some value, maybe not for CI,\n\nThe purpose is to cover CI ,do that we don't make any change in the feature that would lead to us not running CI in non approved mode.\nI think the clarity of it being in it's own class makes sense and we should leave it here", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509868843", "createdAt": "2020-10-22T04:11:44Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){\n+            assertThat(CryptoServicesRegistrar.isInApprovedOnlyMode(), equalTo(true));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzM0NA=="}, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQyMDIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/ClusterPrivilegeIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNDo1M1rOHmMIqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNDo1M1rOHmMIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjc2Mg==", "bodyText": "The password was passwd which is different from SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING. This and a few similar changes in other places are causing CI failure for this PR. I think the fix should be updating AbstractPrivilegeTestCase#setUser to use the new password as well.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509806762", "createdAt": "2020-10-22T00:14:53Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/ClusterPrivilegeIntegrationTests.java", "diffHunk": "@@ -79,8 +79,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")) ;\n+        final String usersPasswdHashed = new String(passwdHasher.hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQyNTM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNzoyOFrOHmMLlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNzoyOFrOHmMLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzUxMQ==", "bodyText": "Nit: The indentation is now inconsistent with all_indices_role. I do think the change here looks better. But I'd suggest we make the same change to all_indices_role as well.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509807511", "createdAt": "2020-10-22T00:17:28Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "diffHunk": "@@ -22,14 +22,14 @@\n             \"  indices:\\n\" +\n             \"    - names: '*'\\n\" +\n             \"      privileges: [ all ]\\n\" +\n-        \"create_doc_role:\\n\" +\n+            \"create_doc_role:\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQyNTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNzo0OFrOHmML8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNzo0OFrOHmML8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzYwMA==", "bodyText": "Nit: indentation inconsistency.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509807600", "createdAt": "2020-10-22T00:17:48Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "diffHunk": "@@ -22,14 +22,14 @@\n             \"  indices:\\n\" +\n             \"    - names: '*'\\n\" +\n             \"      privileges: [ all ]\\n\" +\n-        \"create_doc_role:\\n\" +\n+            \"create_doc_role:\\n\" +\n             \"  indices:\\n\" +\n             \"    - names: '*'\\n\" +\n             \"      privileges: [ create_doc ]\\n\";\n \n     private static final String USERS_ROLES =\n         \"all_indices_role:admin\\n\" +\n-        \"create_doc_role:\" + CREATE_DOC_USER + \"\\n\";\n+            \"create_doc_role:\" + CREATE_DOC_USER + \"\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzQzNTI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authz/store/NativePrivilegeStoreCacheTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoyMjo1M1rOHmMRcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoyMjo1M1rOHmMRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwOTAxMA==", "bodyText": "The same password change needs to be made below (L263) when constructing the Client.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509809010", "createdAt": "2020-10-22T00:22:53Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authz/store/NativePrivilegeStoreCacheTests.java", "diffHunk": "@@ -249,12 +249,12 @@ public void testRolesCacheIsClearedWhenPrivilegesIsChanged() {\n             .addIndices(new String[] { \"*\" }, new String[] { \"read\" }, null, null, null, false)\n             .get();\n         assertTrue(putRoleResponse.isCreated());\n-\n+        final Hasher hasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\"));\n         final PutUserResponse putUserResponse = new PutUserRequestBuilder(client)\n             .username(testRoleCacheUser)\n             .roles(testRole)\n-            .password(new SecureString(\"password\".toCharArray()),\n-                Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt9\", \"bcrypt8\", \"bcrypt\")))\n+            .password(new SecureString(\"longerpassword\".toCharArray()), hasher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY1NTAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjoyNToyNFrOHmOP-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoyMToxMVrOHmQDBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MTQwMA==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (inFipsJvm()){\n          \n          \n            \n                    if (inFipsJvm()) {", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509841400", "createdAt": "2020-10-22T02:25:24Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDg1NQ==", "bodyText": "Depending on tools sucks when the tooling fails :/", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509870855", "createdAt": "2020-10-22T04:21:11Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){\n+            assertThat(Security.getProviders().length > 0, equalTo(true));\n+            assertThat(Security.getProviders()[0].getName(), containsString(\"BCFIPS\"));\n+        }\n+    }\n+\n+    public void testInApprovedOnlyMode(){\n+        if (inFipsJvm()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MTQwMA=="}, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY1NTQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjoyNTozM1rOHmOQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjoyNTozM1rOHmOQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MTQ1Mw==", "bodyText": "Nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testBcFipsProviderInUse(){\n          \n          \n            \n                public void testBcFipsProviderInUse() {", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509841453", "createdAt": "2020-10-22T02:25:33Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY1NTYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjoyNTo0MFrOHmOQTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjoyNTo0MFrOHmOQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MTQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (inFipsJvm()){\n          \n          \n            \n                    if (inFipsJvm()) {", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509841486", "createdAt": "2020-10-22T02:25:40Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/Fips140ProviderVerificationTests.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core;\n+\n+import org.bouncycastle.crypto.CryptoServicesRegistrar;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.security.Security;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class Fips140ProviderVerificationTests extends ESTestCase {\n+\n+    public void testBcFipsProviderInUse(){\n+        if (inFipsJvm()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY3MjQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileUserPasswdStoreTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNTowMVrOHmOaDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNDozM1rOHmZIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0Mzk4MA==", "bodyText": "I don't think we should disable this whole test in FIPS. It seems like an unnecessary reduction in test coverage.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509843980", "createdAt": "2020-10-22T02:35:01Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileUserPasswdStoreTests.java", "diffHunk": "@@ -51,6 +52,11 @@\n     private Environment env;\n     private ThreadPool threadPool;\n \n+    @BeforeClass\n+    public static void disableInFips(){\n+        assumeFalse(\"We are using hashing algorithms that won't be available in FIPS-140 mode\", inFipsJvm());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxOTYyMg==", "bodyText": "Sure, that was a lazy decision", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r510019622", "createdAt": "2020-10-22T09:34:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileUserPasswdStoreTests.java", "diffHunk": "@@ -51,6 +52,11 @@\n     private Environment env;\n     private ThreadPool threadPool;\n \n+    @BeforeClass\n+    public static void disableInFips(){\n+        assumeFalse(\"We are using hashing algorithms that won't be available in FIPS-140 mode\", inFipsJvm());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0Mzk4MA=="}, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY3Njg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzoyM1rOHmOcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzoyM1rOHmOcgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (inFipsJvm()){\n          \n          \n            \n                            if (inFipsJvm()) {", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509844610", "createdAt": "2020-10-22T02:37:23Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlTestCase.java", "diffHunk": "@@ -85,13 +85,21 @@ public static void restoreLocale() {\n                 keySize = randomFrom(256, 384);\n                 break;\n             case \"RSA\":\n-                keySize = randomFrom(1024, 2048, 4096);\n+                if (inFipsJvm()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY3NzQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzo0NVrOHmOc7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzo0NVrOHmOc7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            keySize = randomFrom(2048);\n          \n          \n            \n                            keySize = 2048;", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509844717", "createdAt": "2020-10-22T02:37:45Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlTestCase.java", "diffHunk": "@@ -85,13 +85,21 @@ public static void restoreLocale() {\n                 keySize = randomFrom(256, 384);\n                 break;\n             case \"RSA\":\n-                keySize = randomFrom(1024, 2048, 4096);\n+                if (inFipsJvm()){\n+                    keySize = randomFrom(2048, 4096);\n+                } else {\n+                    keySize = randomFrom(1024, 2048, 4096);\n+                }\n                 break;\n             case \"DSA\":\n-                keySize = randomFrom(1024, 2048, 3072);\n+                if (inFipsJvm()){\n+                    keySize = randomFrom(2048, 3072);\n+                } else {\n+                    keySize = randomFrom(1024, 2048, 3072);\n+                }\n                 break;\n             default:\n-                keySize = randomFrom(1024, 2048);\n+                keySize = randomFrom(2048);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzY3ODA1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealmTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzo1N1rOHmOdPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMjozNzo1N1rOHmOdPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDc5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (inFipsJvm()){\n          \n          \n            \n                    if (inFipsJvm()) {", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509844796", "createdAt": "2020-10-22T02:37:57Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealmTests.java", "diffHunk": "@@ -65,7 +66,11 @@ public void stop() {\n     }\n \n     public void testCacheSettings() {\n-        String cachingHashAlgo = randomFrom(Hasher.getAvailableAlgoCacheHash());\n+        List<String> availableCacheAlgos = Hasher.getAvailableAlgoCacheHash();\n+        if (inFipsJvm()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42f7a60bb9572109b320fedcb1b396adab5f36c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzAyNzU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/ClusterPrivilegeIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxMDo1OFrOH9qJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxMzowOVrOH9qO1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNTgzMg==", "bodyText": "Should we add \"pbkdf2_stretch\"for completeness?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534415832", "createdAt": "2020-12-02T19:10:58Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/ClusterPrivilegeIntegrationTests.java", "diffHunk": "@@ -79,8 +79,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")) ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNzEwOQ==", "bodyText": "yes, it's in my to do list. When I added the commit there was no pbkf2_stretch", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534417109", "createdAt": "2020-12-02T19:13:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/ClusterPrivilegeIntegrationTests.java", "diffHunk": "@@ -79,8 +79,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")) ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNTgzMg=="}, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzAyOTU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxMTozNFrOH9qLJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxMTozNFrOH9qLJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNjE2NQ==", "bodyText": "Same as above. \"pbkdf2_stretch\"?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534416165", "createdAt": "2020-12-02T19:11:34Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/CreateDocsIndexPrivilegeTests.java", "diffHunk": "@@ -43,8 +43,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzAzMjY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/IndexPrivilegeIntegTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxMjoyMlrOH9qNDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoyMzozMlrOH9sspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNjY1Mw==", "bodyText": "Same as above. \"pbkdf2_stretch\"? There are few more cases below as well.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534416653", "createdAt": "2020-12-02T19:12:22Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/IndexPrivilegeIntegTests.java", "diffHunk": "@@ -120,8 +121,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NzUxMQ==", "bodyText": "see previous comment", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534457511", "createdAt": "2020-12-02T20:23:32Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/IndexPrivilegeIntegTests.java", "diffHunk": "@@ -120,8 +121,9 @@ protected String configRoles() {\n \n     @Override\n     protected String configUsers() {\n-        final String usersPasswdHashed = new String(Hasher.resolve(\n-            randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\")).hash(new SecureString(\"passwd\".toCharArray())));\n+        final Hasher passwdHasher = inFipsJvm() ? Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\")) :\n+            Hasher.resolve(randomFrom(\"pbkdf2\", \"pbkdf2_1000\", \"bcrypt\", \"bcrypt9\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxNjY1Mw=="}, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzEzNTE3OnYy", "diffSide": "RIGHT", "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozOTozNlrOH9rL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxMTo1MlrOH-vnNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjc0OQ==", "bodyText": "It may be outside of the scope of this PR, but do we plan to test Fips compatible PKCS12 keystores?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534432749", "createdAt": "2020-12-02T19:39:36Z", "author": {"login": "BigPandaToo"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java", "diffHunk": "@@ -103,6 +103,7 @@ public void testLoadTrustFromPemCAs() {\n     }\n \n     public void testLoadTrustFromPkcs12() {\n+        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NzM0Nw==", "bodyText": "There is no such thing as Fips compatible PKCS12 keystores, unfortunately*. See https://downloads.bouncycastle.org/fips-java/BC-FJA-UserGuide-1.0.2.pdf section 7 too. We document this in https://www.elastic.co/guide/en/elasticsearch/reference/current/fips-140-compliance.html#_tls_keystores_and_keys\n* Technically, I think it might be possible to create a PKCS12 implementation that uses only PBES2 ( i.e. PBKDF2 ) for key derivation, but that would be outside the scope of this PR and our FIPS 140 support too.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r534457347", "createdAt": "2020-12-02T20:23:14Z", "author": {"login": "jkakavas"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java", "diffHunk": "@@ -103,6 +103,7 @@ public void testLoadTrustFromPemCAs() {\n     }\n \n     public void testLoadTrustFromPkcs12() {\n+        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjc0OQ=="}, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzNTAwMA==", "bodyText": "Aha, I must have mistaken FIPS compatible with FIPS approved only compatible...", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r535535000", "createdAt": "2020-12-03T19:44:19Z", "author": {"login": "BigPandaToo"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java", "diffHunk": "@@ -103,6 +103,7 @@ public void testLoadTrustFromPemCAs() {\n     }\n \n     public void testLoadTrustFromPkcs12() {\n+        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjc0OQ=="}, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1Mzg0Ng==", "bodyText": "Not sure what you mean by compatible here, we can also discuss live", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r535553846", "createdAt": "2020-12-03T20:11:52Z", "author": {"login": "jkakavas"}, "path": "libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java", "diffHunk": "@@ -103,6 +103,7 @@ public void testLoadTrustFromPemCAs() {\n     }\n \n     public void testLoadTrustFromPkcs12() {\n+        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjc0OQ=="}, "originalCommit": {"oid": "82c86a43ec588fff4da2162216d570db8201889e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTg5MzAyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozNDoyM1rOIA3NQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo0NDozOFrOICSzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg==", "bodyText": "Doesn't look like we ever validate this password, so may be leaving the rang in {6, 19} would make sense just for completenes (since normally do allow shorter passwords)", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r537775426", "createdAt": "2020-12-07T19:34:23Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2OTg2Nw==", "bodyText": "This is not only about verification. Put user requests will trigger password hashing, which will fail in fips mode with short passwords", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538069867", "createdAt": "2020-12-08T06:32:56Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3ODA4MQ==", "bodyText": "It doesn't look like it will. PutUserRequestBuilder does trigger a hasher, but we never get there. Looks like PutUserRequest is only used in tests.\nWhith this said, I don't think it's a big problem to leave {14, 19} range here as long as we still have some tests covering the short allowed passwords when Fips is off.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538578081", "createdAt": "2020-12-08T16:38:00Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MjgxMQ==", "bodyText": "It doesn't look like it will.\n\nIt will.\nTry ./gradlew client:rest-high-level:integTest --tests=\"org.elasticsearch.client.SecurityIT.testPutUser\" -Dtests.fips.enabled=true in this branch which fails with passwords < 14 characters.\nWe can further discuss this in real time if need be !", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538592811", "createdAt": "2020-12-08T16:51:07Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjE0Mw==", "bodyText": "Worked for me... Yes, I set the renge back to 6-10...", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538782143", "createdAt": "2020-12-08T20:26:17Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMTQyNQ==", "bodyText": "@BigPandaToo this test suite sets up a test cluster (client/rest-high-level/build.gradle)  and SecurityIT performs security API related tests with the high level client against that cluster. SecurityIT#testPutUser creates a random PutUserRequest and sends that request to the test cluster via the HLRC ( SecurityClient securityClient = highLevelClient().security(); )\nWhen the test cluster processes this request it will hash that user password in the process of storing it to the security index ( see RestPutUserAction#innerPrepareRequest which triggers the hashing ) . This hashing will fail when PBKDF2 is used and an exception will be thrown.\nIf you don't get the failure, you either not run in FIPS mode ( -Dtests.fips.enabled=true ) or you don't run the test from this branch. You cannot try this in i.e. master as master doesn't yet contain the fix which is the reason for this PR and sets the test cluster correctly in fips mode )\nHope this makes more sense now", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539031425", "createdAt": "2020-12-09T05:58:57Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI3NjA2MQ==", "bodyText": "We agreed on why this change in the test is necessary over a chat, as such I'm resolving the comment", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539276061", "createdAt": "2020-12-09T12:44:38Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SecurityIT.java", "diffHunk": "@@ -222,7 +222,7 @@ private PutUserRequest randomPutUserRequest(boolean enabled) {\n     }\n \n     private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {\n-        final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray();\n+        final char[] password = randomAlphaOfLengthBetween(14, 19).toCharArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NTQyNg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAzODIxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SecurityDocumentationIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNzo1NFrOIA4hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo0NDo1MVrOICSzrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzA2Mg==", "bodyText": "Do all these tests fail in FIPS AO? It just doen't look like we are really get to any hashing here.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r537797062", "createdAt": "2020-12-07T20:07:54Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SecurityDocumentationIT.java", "diffHunk": "@@ -158,9 +158,9 @@ protected Settings restAdminSettings() {\n     public void testGetUsers() throws Exception {\n         final RestHighLevelClient client = highLevelClient();\n         String[] usernames = new String[] {\"user1\", \"user2\", \"user3\"};\n-        addUser(client, usernames[0], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[1], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[2], randomAlphaOfLengthBetween(6, 10));\n+        addUser(client, usernames[0], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[1], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[2], randomAlphaOfLengthBetween(14, 18));\n         {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDI2MA==", "bodyText": "Same as above, creating a user involves hashing the password for storage.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538070260", "createdAt": "2020-12-08T06:33:55Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SecurityDocumentationIT.java", "diffHunk": "@@ -158,9 +158,9 @@ protected Settings restAdminSettings() {\n     public void testGetUsers() throws Exception {\n         final RestHighLevelClient client = highLevelClient();\n         String[] usernames = new String[] {\"user1\", \"user2\", \"user3\"};\n-        addUser(client, usernames[0], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[1], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[2], randomAlphaOfLengthBetween(6, 10));\n+        addUser(client, usernames[0], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[1], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[2], randomAlphaOfLengthBetween(14, 18));\n         {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzA2Mg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzU1NQ==", "bodyText": "Same as above...", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538587555", "createdAt": "2020-12-08T16:46:27Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SecurityDocumentationIT.java", "diffHunk": "@@ -158,9 +158,9 @@ protected Settings restAdminSettings() {\n     public void testGetUsers() throws Exception {\n         final RestHighLevelClient client = highLevelClient();\n         String[] usernames = new String[] {\"user1\", \"user2\", \"user3\"};\n-        addUser(client, usernames[0], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[1], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[2], randomAlphaOfLengthBetween(6, 10));\n+        addUser(client, usernames[0], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[1], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[2], randomAlphaOfLengthBetween(14, 18));\n         {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzA2Mg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI3NjIwNQ==", "bodyText": "see above", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539276205", "createdAt": "2020-12-09T12:44:51Z", "author": {"login": "jkakavas"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SecurityDocumentationIT.java", "diffHunk": "@@ -158,9 +158,9 @@ protected Settings restAdminSettings() {\n     public void testGetUsers() throws Exception {\n         final RestHighLevelClient client = highLevelClient();\n         String[] usernames = new String[] {\"user1\", \"user2\", \"user3\"};\n-        addUser(client, usernames[0], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[1], randomAlphaOfLengthBetween(6, 10));\n-        addUser(client, usernames[2], randomAlphaOfLengthBetween(6, 10));\n+        addUser(client, usernames[0], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[1], randomAlphaOfLengthBetween(14, 18));\n+        addUser(client, usernames[2], randomAlphaOfLengthBetween(14, 18));\n         {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzA2Mg=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjIxNTM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/PutUserRequestBuilderTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1MDowOFrOIA6GbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozNTozOFrOIBJPyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjgyOQ==", "bodyText": "Should we add some randomization here and below?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r537822829", "createdAt": "2020-12-07T20:50:08Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/PutUserRequestBuilderTests.java", "diffHunk": "@@ -144,8 +145,8 @@ public void testWithEnabled() throws IOException {\n     }\n \n     public void testWithValidPasswordHash() throws IOException {\n-        final Hasher hasher = Hasher.BCRYPT4; // this is the fastest hasher we officially support\n-        final char[] hash = hasher.hash(new SecureString(\"secret\".toCharArray()));\n+        final Hasher hasher = inFipsJvm() ? Hasher.PBKDF2_1000 : Hasher.BCRYPT4; // this is the fastest hasher we officially support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNzUzMQ==", "bodyText": "Also, why no getFastStoredHashAlgoForTests()?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r537827531", "createdAt": "2020-12-07T20:57:49Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/PutUserRequestBuilderTests.java", "diffHunk": "@@ -144,8 +145,8 @@ public void testWithEnabled() throws IOException {\n     }\n \n     public void testWithValidPasswordHash() throws IOException {\n-        final Hasher hasher = Hasher.BCRYPT4; // this is the fastest hasher we officially support\n-        final char[] hash = hasher.hash(new SecureString(\"secret\".toCharArray()));\n+        final Hasher hasher = inFipsJvm() ? Hasher.PBKDF2_1000 : Hasher.BCRYPT4; // this is the fastest hasher we officially support", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjgyOQ=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDk4Nw==", "bodyText": "Should we add some randomization here and below?\n\nWe don't aim to extensively test all hashing algorithms in this test so this is why the original only used BCRYPT4. There is no reason to not use getFastStoredHashAlgoForTests though, I'll change this", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538070987", "createdAt": "2020-12-08T06:35:38Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/PutUserRequestBuilderTests.java", "diffHunk": "@@ -144,8 +145,8 @@ public void testWithEnabled() throws IOException {\n     }\n \n     public void testWithValidPasswordHash() throws IOException {\n-        final Hasher hasher = Hasher.BCRYPT4; // this is the fastest hasher we officially support\n-        final char[] hash = hasher.hash(new SecureString(\"secret\".toCharArray()));\n+        final Hasher hasher = inFipsJvm() ? Hasher.PBKDF2_1000 : Hasher.BCRYPT4; // this is the fastest hasher we officially support", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyMjgyOQ=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI1MTg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileRealmTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1OToxN1rOIA6cGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozNTo1N1rOIBJQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODM3Nw==", "bodyText": "getFastStoredHashAlgoForTests()?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r537828377", "createdAt": "2020-12-07T20:59:17Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileRealmTests.java", "diffHunk": "@@ -61,21 +61,21 @@ public void init() throws Exception {\n         userPasswdStore = mock(FileUserPasswdStore.class);\n         userRolesStore = mock(FileUserRolesStore.class);\n         globalSettings = Settings.builder().put(\"path.home\", createTempDir()).put(\"xpack.security.authc.password_hashing.algorithm\",\n-            randomFrom(\"bcrypt9\", \"pbkdf2\")).\n+            inFipsJvm() ? \"pbkdf2\" : \"bcrypt9\").", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MTE0Mg==", "bodyText": "same as above, I'll chnage this too", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r538071142", "createdAt": "2020-12-08T06:35:57Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileRealmTests.java", "diffHunk": "@@ -61,21 +61,21 @@ public void init() throws Exception {\n         userPasswdStore = mock(FileUserPasswdStore.class);\n         userRolesStore = mock(FileUserRolesStore.class);\n         globalSettings = Settings.builder().put(\"path.home\", createTempDir()).put(\"xpack.security.authc.password_hashing.algorithm\",\n-            randomFrom(\"bcrypt9\", \"pbkdf2\")).\n+            inFipsJvm() ? \"pbkdf2\" : \"bcrypt9\").", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODM3Nw=="}, "originalCommit": {"oid": "3a0b6d01ab2676fdb297818c0b98ca00720fb4e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg0NDAyOnYy", "diffSide": "RIGHT", "path": "gradle/fips.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozNTo1OVrOIC2UkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTozNTo1OVrOIC2UkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1ODA2NQ==", "bodyText": "Not really related to this PR, but I am intrigued to see that these passwords can be less than 14 chars and I was curious about how it is possible. By briefly click through the code, it seems BCFKS internally adds padding to the password with a purpose, e.g. PRIVATE_KEY_ENCRYPTION, so that the length is always ok.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539858065", "createdAt": "2020-12-10T05:35:59Z", "author": {"login": "ywangd"}, "path": "gradle/fips.gradle", "diffHunk": "@@ -53,6 +53,9 @@ if (BuildParams.inFipsJvm) {\n           systemProperty 'javax.net.ssl.trustStorePassword', 'password'\n           systemProperty 'javax.net.ssl.keyStorePassword', 'password'\n           systemProperty 'javax.net.ssl.keyStoreType', 'BCFKS'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg2MjQ2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/yamlRestTest/resources/rest-api-spec/test/painless/71_context_api.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo0Mjo0N1rOIC2eYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0NDozMVrOIC9tKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MDU3Nw==", "bodyText": "It must be my lack of knowledge. But could you please explain a bit more about why it cannot run with FIPS when it is expected to run with OSS? Does it not run with default distribution? Or is it because the test cluster always uses OSS license?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539860577", "createdAt": "2020-12-10T05:42:47Z", "author": {"login": "ywangd"}, "path": "modules/lang-painless/src/yamlRestTest/resources/rest-api-spec/test/painless/71_context_api.yml", "diffHunk": "@@ -1,11 +1,17 @@\n \"Action to list contexts\":\n+    - skip:\n+        features: fips_140\n+        reason: \"The tests expect to be run with OSS distribution\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTA1MQ==", "bodyText": "The problem for these tests is that these expect to run in a cluster with the OSS distribution and the expected number and order of contexts, and classes order and number for the score context are different between oss and default distribution test clusters. In FIPS 140 mode we use the default distribution ( because i.e. one can't set xpack.security.fips_mode.enabled: in OSS ) , so these tests would fail.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539979051", "createdAt": "2020-12-10T08:44:31Z", "author": {"login": "jkakavas"}, "path": "modules/lang-painless/src/yamlRestTest/resources/rest-api-spec/test/painless/71_context_api.yml", "diffHunk": "@@ -1,11 +1,17 @@\n \"Action to list contexts\":\n+    - skip:\n+        features: fips_140\n+        reason: \"The tests expect to be run with OSS distribution\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MDU3Nw=="}, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg2NjA4OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo0NDoxN1rOIC2gWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0MDo1M1rOIC9j7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTA4Mw==", "bodyText": "That's interesting. It's off-topic, but I wonder why it would fail with trial license.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539861083", "createdAt": "2020-12-10T05:44:17Z", "author": {"login": "ywangd"}, "path": "modules/mapper-extras/build.gradle", "diffHunk": "@@ -29,3 +31,8 @@ restResources {\n     includeCore '_common', 'cluster', 'nodes', 'indices', 'index', 'search', 'get'\n   }\n }\n+if (BuildParams.inFipsJvm){\n+  // The cluster fails to form with a trial license and we can't test FIPS 140 mode with a basic license", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NjY4NA==", "bodyText": "The description was vague because I hadn't figured why either. I reached out to core-features and this is now resolved in #65971, so I will amend this", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539976684", "createdAt": "2020-12-10T08:40:53Z", "author": {"login": "jkakavas"}, "path": "modules/mapper-extras/build.gradle", "diffHunk": "@@ -29,3 +31,8 @@ restResources {\n     includeCore '_common', 'cluster', 'nodes', 'indices', 'index', 'search', 'get'\n   }\n }\n+if (BuildParams.inFipsJvm){\n+  // The cluster fails to form with a trial license and we can't test FIPS 140 mode with a basic license", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTA4Mw=="}, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg3NjM5OnYy", "diffSide": "RIGHT", "path": "plugins/examples/painless-whitelist/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo0Nzo1OVrOIC2lqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0NToyOFrOIC9v0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MjQ0MA==", "bodyText": "Is it not necessary since everything is disabled in the parent project's gradle file (plugins/examples/build.gradle)?", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539862440", "createdAt": "2020-12-10T05:47:59Z", "author": {"login": "ywangd"}, "path": "plugins/examples/painless-whitelist/build.gradle", "diffHunk": "@@ -31,7 +33,10 @@ esplugin {\n dependencies {\n   compileOnly \"org.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${versions.elasticsearch}\"\n }\n-\n+if (BuildParams.inFipsJvm){\n+  // This test cluster is using OSS distribution and FIPS 140 mode is not supported in OSS\n+  tasks.named(\"yamlRestTest\").configure{enabled = false }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTczMA==", "bodyText": "Good point, this must be a left over from a previous commit", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539979730", "createdAt": "2020-12-10T08:45:28Z", "author": {"login": "jkakavas"}, "path": "plugins/examples/painless-whitelist/build.gradle", "diffHunk": "@@ -31,7 +33,10 @@ esplugin {\n dependencies {\n   compileOnly \"org.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${versions.elasticsearch}\"\n }\n-\n+if (BuildParams.inFipsJvm){\n+  // This test cluster is using OSS distribution and FIPS 140 mode is not supported in OSS\n+  tasks.named(\"yamlRestTest\").configure{enabled = false }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MjQ0MA=="}, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTg4NjU3OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo1MTo1OFrOIC2rIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0NTo1M1rOIC9w0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2Mzg0MA==", "bodyText": "It might be helpful to add a comment that keystore reloading with FIPS is tested with ReloadSecureSettingsWithPasswordProtectedKeystoreRestIT, so no test coverage gap here.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539863840", "createdAt": "2020-12-10T05:51:58Z", "author": {"login": "ywangd"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java", "diffHunk": "@@ -54,6 +55,12 @@\n @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)\n public class ReloadSecureSettingsIT extends ESIntegTestCase {\n \n+    @BeforeClass\n+    public static void disableInFips() {\n+        assumeFalse(\"Cannot run in FIPS mode since the keystore will be password protected and sending a password in the reload\" +\n+            \"settings api call, require TLS to be configured for the transport layer\", inFipsJvm());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTk4Ng==", "bodyText": "will do , good idea", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539979986", "createdAt": "2020-12-10T08:45:53Z", "author": {"login": "jkakavas"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java", "diffHunk": "@@ -54,6 +55,12 @@\n @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)\n public class ReloadSecureSettingsIT extends ESIntegTestCase {\n \n+    @BeforeClass\n+    public static void disableInFips() {\n+        assumeFalse(\"Cannot run in FIPS mode since the keystore will be password protected and sending a password in the reload\" +\n+            \"settings api call, require TLS to be configured for the transport layer\", inFipsJvm());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2Mzg0MA=="}, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTkxNzA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/enrich/qa/rest-with-security/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowMTo0MVrOIC28lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0OTowMFrOIC94iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2ODMxMQ==", "bodyText": "Not sure whether this could be a problem? Does our FIPS mode cover the plugins as well? These plugins (enrich, eql etc.) are available out of the box. Ideally they should also be tested with FIPS? If license is an issue, maybe we can change it to trial or even random between them?\nWith that being said, I am happy to have this as a follow-up item (if it is an issue).", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539868311", "createdAt": "2020-12-10T06:01:41Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/enrich/qa/rest-with-security/build.gradle", "diffHunk": "@@ -1,9 +1,15 @@\n apply plugin: 'elasticsearch.java-rest-test'\n \n+import org.elasticsearch.gradle.info.BuildParams\n+\n dependencies {\n   javaRestTestImplementation project(path: xpackModule('core'))\n   javaRestTestImplementation project(path: xpackModule('enrich:qa:common'))\n }\n+if (BuildParams.inFipsJvm){\n+  // This test cluster is using a BASIC license and FIPS 140 mode is not supported in BASIC\n+  tasks.named(\"javaRestTest\").configure{enabled = false }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MTk2MQ==", "bodyText": "Does our FIPS mode cover the plugins as well?\n\nIt does. Our plugins that is. For instance, we document that ingest-attachment is not supported.\nLet's handle this in a follow up. It wasn't obvious for QA tests that use basic license if this is on purpose for some specific reason, copy paste from other QA setups, or an arbitrary decision and reaching out to folks to figure this out is time-consuming. I elected to mute these for now, and we can revisit in a follow up.", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r539981961", "createdAt": "2020-12-10T08:49:00Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/enrich/qa/rest-with-security/build.gradle", "diffHunk": "@@ -1,9 +1,15 @@\n apply plugin: 'elasticsearch.java-rest-test'\n \n+import org.elasticsearch.gradle.info.BuildParams\n+\n dependencies {\n   javaRestTestImplementation project(path: xpackModule('core'))\n   javaRestTestImplementation project(path: xpackModule('enrich:qa:common'))\n }\n+if (BuildParams.inFipsJvm){\n+  // This test cluster is using a BASIC license and FIPS 140 mode is not supported in BASIC\n+  tasks.named(\"javaRestTest\").configure{enabled = false }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2ODMxMQ=="}, "originalCommit": {"oid": "b1ae435fd96b691386c9c7d6b51818979d7805b7"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4266, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}