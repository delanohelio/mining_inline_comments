{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDQ3Mjc3", "number": 62943, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1MjoyMFrOEpzWsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1NToxOVrOEpzaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY4NDY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1MjoyMFrOHbsbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1MjoyMFrOHbsbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMTYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                localFailures.add(fail(c.field(), \"[{}] of data type [{}] cannot be used for [{}()] inside WHERE clause\",\n          \n          \n            \n                                localFailures.add(fail(c.field(), \"[{}] of data type [{}] cannot be used for [{}()] inside the WHERE clause\",", "url": "https://github.com/elastic/elasticsearch/pull/62943#discussion_r498801605", "createdAt": "2020-10-02T12:52:20Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -865,4 +867,18 @@ private static void checkMatrixStats(LogicalPlan p, Set<Failure> localFailures)\n             }\n         }, Skewness.class));\n     }\n+\n+    private static void checkCastOnInexact(LogicalPlan p, Set<Failure> localFailures) {\n+        p.forEachDown(f -> f.forEachExpressionsUp(e -> e.forEachUp((Cast c) -> {\n+            if (c.field() instanceof FieldAttribute) {\n+                EsField.Exact exactInfo = ((FieldAttribute) c.field()).getExactInfo();\n+                if (exactInfo.hasExact() == false\n+                        || ((FieldAttribute) c.field()).exactAttribute().equals(c.field()) == false) {\n+                    localFailures.add(fail(c.field(), \"[{}] of data type [{}] cannot be used for [{}()] inside WHERE clause\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7c41e40cc1b4110a0ce12f3ff4fd8c3e694fe93"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY5MzU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1NToxOVrOHbshfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowMDo1M1rOHbsspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMzA2OQ==", "bodyText": "Does the relatively not-straight WHERE clause bare any meaning to the test target (for instance, vs. some WHERE CAST(some.string AS string) = 'foo')? Just curious.", "url": "https://github.com/elastic/elasticsearch/pull/62943#discussion_r498803069", "createdAt": "2020-10-02T12:55:19Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java", "diffHunk": "@@ -1135,4 +1135,13 @@ public void testErrorMessageForMatrixStatsWithScalars() {\n         assertEquals(\"1:17: [SKEWNESS()] cannot be used on top of operators or scalars\",\n                 error(\"SELECT SKEWNESS(ABS(int * 10.123)) FROM test\"));\n     }\n+\n+    public void testCastOnInexact() {\n+        // inexact with underlying keyword\n+        assertEquals(\"1:36: [some.string] of data type [text] cannot be used for [CAST()] inside WHERE clause\",\n+                error(\"SELECT * FROM test WHERE NOT (CAST(some.string AS string) = 'foo') OR true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7c41e40cc1b4110a0ce12f3ff4fd8c3e694fe93"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNTkyNA==", "bodyText": "Yes, produces more complex tree, so the error can be caught even in such cases: (forEachUp/Down, forEachExpressionUp/Down, etc).", "url": "https://github.com/elastic/elasticsearch/pull/62943#discussion_r498805924", "createdAt": "2020-10-02T13:00:53Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java", "diffHunk": "@@ -1135,4 +1135,13 @@ public void testErrorMessageForMatrixStatsWithScalars() {\n         assertEquals(\"1:17: [SKEWNESS()] cannot be used on top of operators or scalars\",\n                 error(\"SELECT SKEWNESS(ABS(int * 10.123)) FROM test\"));\n     }\n+\n+    public void testCastOnInexact() {\n+        // inexact with underlying keyword\n+        assertEquals(\"1:36: [some.string] of data type [text] cannot be used for [CAST()] inside WHERE clause\",\n+                error(\"SELECT * FROM test WHERE NOT (CAST(some.string AS string) = 'foo') OR true\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMzA2OQ=="}, "originalCommit": {"oid": "a7c41e40cc1b4110a0ce12f3ff4fd8c3e694fe93"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3372, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}