{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTUzMTk2", "number": 56711, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo0Njo1OFrOD8zljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTowNjoyNFrOD8_Dbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg2MzUxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo0Njo1OFrOGV-DQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzozNjozNlrOGWFLVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes\n          \n          \n            \n                 * `1.0f` indicates the default behavior where throttling scales according to the number of data nodes", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425689922", "createdAt": "2020-05-15T09:46:58Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NDUyMQ==", "bodyText": "GRAMMAR! My old nemesis.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425744521", "createdAt": "2020-05-15T11:40:49Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NTkwMg==", "bodyText": "It looks like the magic value is -1.0f in the core code, not 1.0f.  Negative also makes more sense for the magic value.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425765902", "createdAt": "2020-05-15T12:26:05Z", "author": {"login": "droberts195"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjQxOA==", "bodyText": "Good point. I think null (unspecified) means use the default and in the action that is interpreted as the magic value -1.0f", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425802418", "createdAt": "2020-05-15T13:29:27Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjY3OQ==", "bodyText": "null means no throttle\n-1.0f is our \"magic\" calculation.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425806679", "createdAt": "2020-05-15T13:36:36Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk1OTY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoxNzowMVrOGV-_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTo0NjozNFrOGWBiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNTM4OA==", "bodyText": "Why not a plain Object.equals(requestsPerSecond, request.requestsPerSecond)\nI see there is a difference between compare and equals but only in terms of NANs and comparing +0 to -0\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Float.html#equals(java.lang.Object)", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425705388", "createdAt": "2020-05-15T10:17:01Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,\n+            Request::new);\n+\n+        static {\n+            PARSER.declareFloat(Request::setRequestsPerSecond, REQUESTS_PER_SECOND);\n+            PARSER.declareString((obj, value) -> obj.setTimeout(TimeValue.parseTimeValue(value, TIMEOUT.getPreferredName())),\n+                TIMEOUT);\n+        }\n+\n+        private Float requestsPerSecond;\n+        private TimeValue timeout;\n+\n         public Request() {}\n \n+        public Request(Float requestsPerSecond, TimeValue timeValue) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            this.timeout = timeValue;\n+        }\n+\n         public Request(StreamInput in) throws IOException {\n             super(in);\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+                this.requestsPerSecond = in.readOptionalFloat();\n+                this.timeout = in.readOptionalTimeValue();\n+            } else {\n+                this.requestsPerSecond = null;\n+                this.timeout = null;\n+            }\n+        }\n+\n+        public Float getRequestsPerSecond() {\n+            return requestsPerSecond;\n+        }\n+\n+        public TimeValue getTimeout() {\n+            return timeout;\n+        }\n+\n+        public Request setRequestsPerSecond(Float requestsPerSecond) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            return this;\n+        }\n+\n+        public Request setTimeout(TimeValue timeout) {\n+            this.timeout = timeout;\n+            return this;\n         }\n \n         @Override\n         public ActionRequestValidationException validate() {\n+            if (this.requestsPerSecond != null && this.requestsPerSecond != -1.0f && this.requestsPerSecond <= 0) {\n+                ActionRequestValidationException requestValidationException = new ActionRequestValidationException();\n+                requestValidationException.addValidationError(\"[requests_per_second] must either be -1 or greater than 0\");\n+                return requestValidationException;\n+            }\n             return null;\n         }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Request request = (Request) o;\n+            return Float.compare(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NzAxMw==", "bodyText": "you are correct. This is left over from when I had requestsPerSecond an unboxed value :).", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425747013", "createdAt": "2020-05-15T11:46:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,\n+            Request::new);\n+\n+        static {\n+            PARSER.declareFloat(Request::setRequestsPerSecond, REQUESTS_PER_SECOND);\n+            PARSER.declareString((obj, value) -> obj.setTimeout(TimeValue.parseTimeValue(value, TIMEOUT.getPreferredName())),\n+                TIMEOUT);\n+        }\n+\n+        private Float requestsPerSecond;\n+        private TimeValue timeout;\n+\n         public Request() {}\n \n+        public Request(Float requestsPerSecond, TimeValue timeValue) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            this.timeout = timeValue;\n+        }\n+\n         public Request(StreamInput in) throws IOException {\n             super(in);\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+                this.requestsPerSecond = in.readOptionalFloat();\n+                this.timeout = in.readOptionalTimeValue();\n+            } else {\n+                this.requestsPerSecond = null;\n+                this.timeout = null;\n+            }\n+        }\n+\n+        public Float getRequestsPerSecond() {\n+            return requestsPerSecond;\n+        }\n+\n+        public TimeValue getTimeout() {\n+            return timeout;\n+        }\n+\n+        public Request setRequestsPerSecond(Float requestsPerSecond) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            return this;\n+        }\n+\n+        public Request setTimeout(TimeValue timeout) {\n+            this.timeout = timeout;\n+            return this;\n         }\n \n         @Override\n         public ActionRequestValidationException validate() {\n+            if (this.requestsPerSecond != null && this.requestsPerSecond != -1.0f && this.requestsPerSecond <= 0) {\n+                ActionRequestValidationException requestValidationException = new ActionRequestValidationException();\n+                requestValidationException.addValidationError(\"[requests_per_second] must either be -1 or greater than 0\");\n+                return requestValidationException;\n+            }\n             return null;\n         }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Request request = (Request) o;\n+            return Float.compare(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNTM4OA=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTA0NTg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDo0NjowOFrOGV_3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjowODoxN1rOGWCJqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ==", "bodyText": "Is there a way to deregister the update consumer?\nThe consumer is added when the node becomes a master node but when it goes off master mlDailyMaintenanceService is set to null in uninstallDailyMaintenanceService() but this consumer referencing  mlDailyMaintenanceService will prevent it being garbage collected.\nMaybe make this class the consumer the set method will directly set the value on mlDailyMaintenanceService if it is not null", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425719679", "createdAt": "2020-05-15T10:46:08Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java", "diffHunk": "@@ -87,10 +87,24 @@ public String executorName() {\n \n     private synchronized void installDailyMaintenanceService() {\n         if (mlDailyMaintenanceService == null) {\n-            mlDailyMaintenanceService =\n-                new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client, clusterService, mlAssignmentNotifier);\n+            mlDailyMaintenanceService = new MlDailyMaintenanceService(\n+                settings,\n+                clusterService.getClusterName(),\n+                threadPool,\n+                client,\n+                clusterService,\n+                mlAssignmentNotifier\n+            );\n             mlDailyMaintenanceService.start();\n             clusterService.addLifecycleListener(new LifecycleListener() {\n+                @Override\n+                public void afterStart() {\n+                    clusterService.getClusterSettings().addSettingsUpdateConsumer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NTI5OQ==", "bodyText": "\ud83e\udd14 good point. The setting updater might have to be in the initialization service itself...\nTo my knowledge there is no way to deregister a setting consumer. The consumers have no unique identification.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425745299", "createdAt": "2020-05-15T11:42:36Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java", "diffHunk": "@@ -87,10 +87,24 @@ public String executorName() {\n \n     private synchronized void installDailyMaintenanceService() {\n         if (mlDailyMaintenanceService == null) {\n-            mlDailyMaintenanceService =\n-                new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client, clusterService, mlAssignmentNotifier);\n+            mlDailyMaintenanceService = new MlDailyMaintenanceService(\n+                settings,\n+                clusterService.getClusterName(),\n+                threadPool,\n+                client,\n+                clusterService,\n+                mlAssignmentNotifier\n+            );\n             mlDailyMaintenanceService.start();\n             clusterService.addLifecycleListener(new LifecycleListener() {\n+                @Override\n+                public void afterStart() {\n+                    clusterService.getClusterSettings().addSettingsUpdateConsumer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzA5Nw==", "bodyText": "Why is this being set to null anyways? I assume so it can be GC'd, but the object itself is not HUGE, and only really has references to things are referenced by the MlInitializationService.java.\nI am gonna change the code so that it does not get set null. It seems like a waste to me.\n@dimitris-athanasiou @droberts195 ^ Let me know if you have a prevailing opinion the other way.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425757097", "createdAt": "2020-05-15T12:08:17Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java", "diffHunk": "@@ -87,10 +87,24 @@ public String executorName() {\n \n     private synchronized void installDailyMaintenanceService() {\n         if (mlDailyMaintenanceService == null) {\n-            mlDailyMaintenanceService =\n-                new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client, clusterService, mlAssignmentNotifier);\n+            mlDailyMaintenanceService = new MlDailyMaintenanceService(\n+                settings,\n+                clusterService.getClusterName(),\n+                threadPool,\n+                client,\n+                clusterService,\n+                mlAssignmentNotifier\n+            );\n             mlDailyMaintenanceService.start();\n             clusterService.addLifecycleListener(new LifecycleListener() {\n+                @Override\n+                public void afterStart() {\n+                    clusterService.getClusterSettings().addSettingsUpdateConsumer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTE3OTAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStateRemover.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTozNDoyNlrOGWBNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTozNDoyNlrOGWBNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0MTU3OQ==", "bodyText": "Good \ud83d\udc40 I stared at this for a long time before I saw the difference", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425741579", "createdAt": "2020-05-15T11:34:26Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStateRemover.java", "diffHunk": "@@ -98,12 +98,12 @@ public void remove(ActionListener<Boolean> listener, Supplier<Boolean> isTimedOu\n \n     private Set<String> getJobIds() {\n         Set<String> jobIds = new HashSet<>();\n-        jobIds.addAll(getAnamalyDetectionJobIds());\n+        jobIds.addAll(getAnomalyDetectionJobIds());\n         jobIds.addAll(getDataFrameAnalyticsJobIds());\n         return jobIds;\n     }\n \n-    private Set<String> getAnamalyDetectionJobIds() {\n+    private Set<String> getAnomalyDetectionJobIds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTMyMDI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoyMzowOFrOGWCl9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzozNzowOVrOGWFMng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NDM0Mg==", "bodyText": "We would usually error on unknown fields when parsing REST requests.  Should this be false on the server side?", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425764342", "createdAt": "2020-05-15T12:23:08Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNzAwNg==", "bodyText": "yes yes, it should be false. Fixing!", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425807006", "createdAt": "2020-05-15T13:37:09Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NDM0Mg=="}, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTM3OTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0MTozM1rOGWDLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0MTozM1rOGWDLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3Mzk1NA==", "bodyText": "Maybe rename MAX_DURATION to DEFAULT_MAX_DURATION now it's not always used.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425773954", "createdAt": "2020-05-15T12:41:33Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java", "diffHunk": "@@ -73,12 +74,18 @@ public TransportDeleteExpiredDataAction(ThreadPool threadPool, TransportService\n     protected void doExecute(Task task, DeleteExpiredDataAction.Request request,\n                              ActionListener<DeleteExpiredDataAction.Response> listener) {\n         logger.info(\"Deleting expired data\");\n-        Instant timeoutTime = Instant.now(clock).plus(MAX_DURATION);\n+        Instant timeoutTime = Instant.now(clock).plus(\n+            request.getTimeout() == null ? MAX_DURATION : Duration.ofMillis(request.getTimeout().millis())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTM4NjkyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0MzozMlrOGWDP9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0MzozMlrOGWDP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NTA5NA==", "bodyText": "Might be better to test with values other than 1, as 1 is more likely to end up in the output due to the combination of a bug and a fluke.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425775094", "createdAt": "2020-05-15T12:43:32Z", "author": {"login": "droberts195"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java", "diffHunk": "@@ -214,12 +214,13 @@ public void testCloseJob() throws Exception {\n             requestEntityToString(request));\n     }\n \n-    public void testDeleteExpiredData() {\n-        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest();\n+    public void testDeleteExpiredData() throws Exception {\n+        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest(1.0f, TimeValue.timeValueHours(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca004be5554611e81cd359385dd34fa6b84065"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjczNjkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTowNDozM1rOGWQqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTowNDozM1rOGWQqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NDc1OQ==", "bodyText": "It seems dodgy to test two error conditions together: a timeout and requests per second = 0.  Maybe the .0f was a typo?  I think this test should just test the timeout.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425994759", "createdAt": "2020-05-15T19:04:33Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java", "diffHunk": "@@ -93,7 +97,7 @@ public void testDeleteExpiredDataIterationWithTimeout() {\n \n         Supplier<Boolean> isTimedOutSupplier = () -> (removersRemaining.getAndDecrement() <= 0);\n \n-        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), finalListener, isTimedOutSupplier, true);\n+        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), .0f, finalListener, isTimedOutSupplier, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjc0MjIzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTowNjoyNFrOGWQtWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTozMTozM1rOGWRYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NTYxMA==", "bodyText": "\"default\" is probably the wrong word for this comment.  The other HLRC docs say the default is null, and that's what's implemented in the HLRC.\nSo maybe \"default\" to \"standard nightly maintenance behavior\" or something like that.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425995610", "createdAt": "2020-05-15T19:06:24Z", "author": {"login": "droberts195"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `-1.0f` indicates the default behavior where throttling scales according to the number of data nodes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNjYyOQ==", "bodyText": "Definitely, saying default is a bit disingenuous.", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r426006629", "createdAt": "2020-05-15T19:31:33Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `-1.0f` indicates the default behavior where throttling scales according to the number of data nodes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NTYxMA=="}, "originalCommit": {"oid": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 390, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}