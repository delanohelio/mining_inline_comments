{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDMwNzMx", "number": 55182, "title": "EQL: Add match function implementation", "bodyText": "Closes #55178\nDiscovered that per https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html, character classes aren't supported.\n@jrodewig I think this may be worth noting in SQL and EQL docs.", "createdAt": "2020-04-14T21:46:59Z", "url": "https://github.com/elastic/elasticsearch/pull/55182", "merged": true, "mergeCommit": {"oid": "cc81fe340ef834b1f7f09b06e473f09817c6ee77"}, "closed": true, "closedAt": "2020-05-04T15:28:51Z", "author": {"login": "rw-access"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXqY6jAH2gAyNDAzNDMwNzMxOjZmODk4YTg4MjlhYjRhNzdmZDk4ZDIyNzkzYjFiYjYzYWYyZTJmNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdqBezgFqTQwNDYxMzQ3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f898a8829ab4a77fd98d22793b1bb63af2e2f5f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/6f898a8829ab4a77fd98d22793b1bb63af2e2f5f", "committedDate": "2020-04-14T21:29:34Z", "message": "EQL: Add Match function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/98d6e7a0a53843074529c26b0a5dca5de87a692f", "committedDate": "2020-04-14T21:43:34Z", "message": "EQL: Add note about character classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzE5ODE3", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-393319817", "createdAt": "2020-04-14T21:47:38Z", "commit": {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo0NzozOFrOGFiLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo0NzozOFrOGFiLUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjAxNg==", "bodyText": "Any idea why I'm getting an error here at all?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408456016", "createdAt": "2020-04-14T21:47:38Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "diffHunk": "@@ -111,8 +111,8 @@ public void testArrayFunctionsUnsupported() {\n \n     // Some functions fail with \"Unknown\" message at the parse stage\n     public void testFunctionParsingUnknown() {\n-        assertEquals(\"1:15: Unknown function [matchLite]\",\n-                error(\"process where matchLite(?'.*?net1\\\\s+localgroup\\\\s+.*?', command_line)\"));\n+        assertEquals(\"1:15: Unknown function [matchLite], did you mean any of [matchLite, match]?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzIxMTc0", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-393321174", "createdAt": "2020-04-14T21:50:12Z", "commit": {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1MDoxMlrOGFiQDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1MDoxMlrOGFiQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzIyOA==", "bodyText": "This function is just an old alias for match that was kept for compatibility. Should we drop?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408457228", "createdAt": "2020-04-14T21:50:12Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,6 +38,8 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(Match.class, Match::new, \"match\"),\n+                def(Match.class, Match::new, \"matchLite\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86468b765a236c43d48feb681a31d34bf29811b9", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/86468b765a236c43d48feb681a31d34bf29811b9", "committedDate": "2020-04-14T22:54:06Z", "message": "EQL: QueryFolderFailTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b65ff9939332953c4d313c16c52584adbeef995", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/8b65ff9939332953c4d313c16c52584adbeef995", "committedDate": "2020-04-15T01:13:27Z", "message": "EQL: Add match() fail tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjM5MTg5", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-393639189", "createdAt": "2020-04-15T10:13:48Z", "commit": {"oid": "8b65ff9939332953c4d313c16c52584adbeef995"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxMzo0OVrOGFzDuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNTo1MlrOGFzx9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjYwMQ==", "bodyText": "No test for regexes?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408732601", "createdAt": "2020-04-15T10:13:49Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,53 +62,61 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n+    public void testMatchWithText() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b65ff9939332953c4d313c16c52584adbeef995"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MjAzMw==", "bodyText": "I don't think you are correct about this statement.\nThis is a valid query in SQL: SELECT first_name FROM test_emp WHERE first_name RLIKE 'A[m-o]+.*' which gets translated into ES query DSL like this:\n    \"query\": {\n        \"regexp\": {\n            \"first_name.keyword\": {\n                \"value\": \"A[m-o]+.*\",\n                \"flags_value\": 65535,\n                \"max_determinized_states\": 10000,\n                \"boost\": 1\n            }\n        }\n    }\n\nWhich is valid and works.\nIf you are talking about shorthand character classes, yes, those are not supported by Elasticsearch.", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408742033", "createdAt": "2020-04-15T10:31:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -17,3 +17,26 @@ file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n [[queries]]\n query = 'process where string(serial_event_id) = \"1\"'\n expected_event_ids  = [1]\n+\n+[[queries]]\n+expected_event_ids  = [98]\n+notes = \"regexp doesn't support character classes\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b65ff9939332953c4d313c16c52584adbeef995"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDQzNg==", "bodyText": "There is no test here with more than one pattern. Can you add some, please?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408744436", "createdAt": "2020-04-15T10:35:52Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -17,3 +17,26 @@ file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n [[queries]]\n query = 'process where string(serial_event_id) = \"1\"'\n expected_event_ids  = [1]\n+\n+[[queries]]\n+expected_event_ids  = [98]\n+notes = \"regexp doesn't support character classes\"\n+query = '''\n+//\n+//                                ?'.*?net1\\s+localgroup.*?')\n+process where match(command_line, ?'.*?net1[ ]+localgroup.*?')\n+'''\n+\n+[[queries]]\n+expected_event_ids  = [98]\n+query = '''\n+process where match(command_line, ?'.*?net1.*?')\n+'''\n+\n+[[queries]]\n+expected_event_ids  = [98]\n+notes = \"regexp doesn't support character classes\"\n+query = '''\n+//                                ?'.*?net1\\s+\\w{4,15}\\s+.*?'\n+process where match(command_line, ?'.*?net1[ ]+[a-z]{4,15}[ ]+.*?')\n+'''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b65ff9939332953c4d313c16c52584adbeef995"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "committedDate": "2020-04-15T16:21:38Z", "message": "EQL: Add match tests and fix alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44af6a6dd84d5ff45ac0ee8b26462d88236b21b9", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/44af6a6dd84d5ff45ac0ee8b26462d88236b21b9", "committedDate": "2020-04-15T16:33:48Z", "message": "EQL: Add match verifier failure tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc7697fe010cbad43b3d23a48b8cb2e66ad75f7", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/7bc7697fe010cbad43b3d23a48b8cb2e66ad75f7", "committedDate": "2020-04-15T16:58:19Z", "message": "Merge remote-tracking branch 'origin/master' into eql/match-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf4707625020cc518aa79d4ecdc699cc69661af", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/3cf4707625020cc518aa79d4ecdc699cc69661af", "committedDate": "2020-04-22T21:18:55Z", "message": "EQL: Reorder query folder fail tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjEwMjE3", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-398610217", "createdAt": "2020-04-22T21:40:34Z", "commit": {"oid": "3cf4707625020cc518aa79d4ecdc699cc69661af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0MDozNVrOGKNB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0MDozNVrOGKNB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MjQ0Mg==", "bodyText": "I rearranged these test methods alphabetically in hopes that it makes git conflicts less likely", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r413352442", "createdAt": "2020-04-22T21:40:35Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,51 +62,78 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n-    public void testCIDRMatchNonIPField() {\n+    public void testCIDRMatchAgainstField() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf4707625020cc518aa79d4ecdc699cc69661af"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTI1OTc5", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-398925979", "createdAt": "2020-04-23T09:34:01Z", "commit": {"oid": "3cf4707625020cc518aa79d4ecdc699cc69661af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "272175b0112ce717296e356b40dd151bb16ec826", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/272175b0112ce717296e356b40dd151bb16ec826", "committedDate": "2020-04-30T19:56:57Z", "message": "Merge branch 'master' into eql/match-function"}, "afterCommit": {"oid": "774a3b231ae1d278e8d39ca913726272ed6b0105", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/774a3b231ae1d278e8d39ca913726272ed6b0105", "committedDate": "2020-04-30T20:18:14Z", "message": "Merge branch 'master' into eql/match-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1138373011db156d225ce5392dbc29e22427e95", "committedDate": "2020-04-30T20:20:05Z", "message": "Merge branch 'master' into eql/match-function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "774a3b231ae1d278e8d39ca913726272ed6b0105", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/774a3b231ae1d278e8d39ca913726272ed6b0105", "committedDate": "2020-04-30T20:18:14Z", "message": "Merge branch 'master' into eql/match-function"}, "afterCommit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1138373011db156d225ce5392dbc29e22427e95", "committedDate": "2020-04-30T20:20:05Z", "message": "Merge branch 'master' into eql/match-function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTI1MzY1", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-403925365", "createdAt": "2020-04-30T22:39:10Z", "commit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozOToxMVrOGO8w0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MDoyM1rOGO8ybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyODc4NA==", "bodyText": "is there a test where match is passed only one argument?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r418328784", "createdAt": "2020-04-30T22:39:11Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,51 +62,78 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n-    public void testCIDRMatchNonIPField() {\n+    public void testCIDRMatchAgainstField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n+            () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n+            \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n     }\n \n     public void testCIDRMatchMissingValue() {\n         ParsingException e = expectThrows(ParsingException.class,\n-                () -> plan(\"process where cidrMatch(source_address)\"));\n+            () -> plan(\"process where cidrMatch(source_address)\"));\n         String msg = e.getMessage();\n         assertEquals(\"line 1:16: error building [cidrmatch]: expects at least two arguments\", msg);\n     }\n \n-    public void testCIDRMatchAgainstField() {\n+    public void testCIDRMatchNonIPField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n+            () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n+            \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n     }\n \n     public void testCIDRMatchNonString() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n+            () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n+            \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n     }\n \n     public void testEndsWithFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n+            () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [endsWith(plain_text, \\\"foo\\\")] cannot operate on first argument field of data type \"\n-                + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n     }\n \n     public void testLengthFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where length(plain_text) > 0\"));\n+            () -> plan(\"process where length(plain_text) > 0\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [length(plain_text)] cannot operate on field of data type [text]: No keyword/multi-field \"\n-                + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithText() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(plain_text, 'foo.*')\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: [match(plain_text, 'foo.*')] cannot operate on first argument field of data type [text]: No keyword/multi-field \" +\n+            \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithNonString() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, parent_process_name)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, parent_process_name)] \" +\n+            \"must be a constant, received [parent_process_name]\", msg);\n+    }\n+\n+    public void testMatchWithNonRegex() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, 1)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, 1)] \" +\n+            \"must be [string], found value [1] type [integer]\", msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTE5Nw==", "bodyText": "what about?\nprocess where match(process_name, null)", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r418329197", "createdAt": "2020-04-30T22:40:23Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,51 +62,78 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n-    public void testCIDRMatchNonIPField() {\n+    public void testCIDRMatchAgainstField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n+            () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n+            \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n     }\n \n     public void testCIDRMatchMissingValue() {\n         ParsingException e = expectThrows(ParsingException.class,\n-                () -> plan(\"process where cidrMatch(source_address)\"));\n+            () -> plan(\"process where cidrMatch(source_address)\"));\n         String msg = e.getMessage();\n         assertEquals(\"line 1:16: error building [cidrmatch]: expects at least two arguments\", msg);\n     }\n \n-    public void testCIDRMatchAgainstField() {\n+    public void testCIDRMatchNonIPField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n+            () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n+            \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n     }\n \n     public void testCIDRMatchNonString() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n+            () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n+            \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n     }\n \n     public void testEndsWithFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n+            () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [endsWith(plain_text, \\\"foo\\\")] cannot operate on first argument field of data type \"\n-                + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n     }\n \n     public void testLengthFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where length(plain_text) > 0\"));\n+            () -> plan(\"process where length(plain_text) > 0\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [length(plain_text)] cannot operate on field of data type [text]: No keyword/multi-field \"\n-                + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithText() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(plain_text, 'foo.*')\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: [match(plain_text, 'foo.*')] cannot operate on first argument field of data type [text]: No keyword/multi-field \" +\n+            \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithNonString() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, parent_process_name)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, parent_process_name)] \" +\n+            \"must be a constant, received [parent_process_name]\", msg);\n+    }\n+\n+    public void testMatchWithNonRegex() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, 1)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, 1)] \" +\n+            \"must be [string], found value [1] type [integer]\", msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyODc4NA=="}, "originalCommit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjEzMjQx", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-404613241", "createdAt": "2020-05-03T12:24:34Z", "commit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMjoyNDozNFrOGPrmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMjoyNDozNFrOGPrmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NjIzMQ==", "bodyText": "matchLite as an alias to match?", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r419096231", "createdAt": "2020-05-03T12:24:34Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -42,6 +43,7 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(Match.class, Match::new, \"match\", \"matchlite\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjEzNDc4", "url": "https://github.com/elastic/elasticsearch/pull/55182#pullrequestreview-404613478", "createdAt": "2020-05-03T12:27:31Z", "commit": {"oid": "f1138373011db156d225ce5392dbc29e22427e95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3332, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}