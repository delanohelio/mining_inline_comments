{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTM1NTg3", "number": 65275, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMDowNFrOE7OQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMDozMlrOE7dfiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTM1MDUyOnYy", "diffSide": "RIGHT", "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMDowNFrOH2vuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTowOTowN1rOH2xuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzA0NA==", "bodyText": "Do you specifically want to check for 200, or would this be OK?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(response.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527167044", "createdAt": "2020-11-19T20:10:04Z", "author": {"login": "pugnascotia"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertThat(response.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5OTc5Nw==", "bodyText": "These were 100% copy/pasted from the Kibana plugin tests with s/kibana/fleet/g, assertOK is probably better.", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527199797", "createdAt": "2020-11-19T21:09:07Z", "author": {"login": "gwbrown"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertThat(response.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzA0NA=="}, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTM2Nzk4OnYy", "diffSide": "RIGHT", "path": "modules/fleet/src/test/java/org/elasticsearch/fleet/FleetModuleTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxNDo1M1rOH2v43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxNDo1M1rOH2v43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2OTc1OA==", "bodyText": "Maybe it would be more readable to assign module.getSystemIndexDescriptors(Settings.EMPTY) to a variable?", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527169758", "createdAt": "2020-11-19T20:14:53Z", "author": {"login": "pugnascotia"}, "path": "modules/fleet/src/test/java/org/elasticsearch/fleet/FleetModuleTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+\n+public class FleetModuleTests extends ESTestCase {\n+\n+    public void testFleetIndexNames() {\n+        FleetModule module = new FleetModule();\n+\n+        assertThat(\n+            module.getSystemIndexDescriptors(Settings.EMPTY).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTgwOTAyOnYy", "diffSide": "RIGHT", "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDoyN1rOH20EGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo0ODoyNlrOH3QVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA==", "bodyText": "These have changed slightly the following indexes are needed:\n.fleet-servers\n.fleet-policies\n.fleet-policies-leader\n.fleet-agents\n.fleet-actions\n.fleet-actions-results\n\nAs for the Agent check-ins that will occur in logs-elastic_agent.checkin-default. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527238170", "createdAt": "2020-11-19T22:14:27Z", "author": {"login": "blakerouse"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NDA1MA==", "bodyText": "Thanks, I'll update the indices shortly.\nThe dividing line is \"Should a user ever directly query, visualize, and/or write to this index?\" - if the answer is no, then it should probably be a system index. There's also a practical consideration in that there's no such thing as a \"system data stream\" (currently), so if being a data stream is a requirement, it can't be a system index.", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527244050", "createdAt": "2020-11-19T22:23:17Z", "author": {"login": "gwbrown"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MTY2MA==", "bodyText": "I've updated the plugin to use this list and removed the ones which were not on the list.", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527271660", "createdAt": "2020-11-19T23:26:33Z", "author": {"login": "gwbrown"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwMTI3NA==", "bodyText": "A user should be able to directly query and visualize the logs-elastic_agent.checkin-default.", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527701274", "createdAt": "2020-11-20T13:48:26Z", "author": {"login": "blakerouse"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA=="}, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc4MTEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzozM1rOH3HO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzozM1rOH3HO-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjI1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552251", "createdAt": "2020-11-20T09:13:33Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc4MjYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzo1OFrOH3HP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzo1OFrOH3HP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552500", "createdAt": "2020-11-20T09:13:58Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc4OTQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxNTo1NVrOH3HUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxNTo1NVrOH3HUMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MzU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527553585", "createdAt": "2020-11-20T09:15:55Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzgzNTM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNzo1NlrOH3HwIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNzo1NlrOH3HwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MDczNw==", "bodyText": "Nothing to change, but I kinda wish we could do something like:\nString.join(\"\\n\",\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"1\"))),\n\ttoJson(Map.of(\"foo\", \"bar\")),\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"2\"))),\n\ttoJson(Map.of(\"baz\", \"tag\"))\n)", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527560737", "createdAt": "2020-11-20T09:27:56Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzg0NjQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMDozMlrOH3H2pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjozNTo1OVrOH4iDug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527562406", "createdAt": "2020-11-20T09:30:32Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request dbqRequest = new Request(\"POST\", \"/_fleet/\" + indexName + \"/_delete_by_query\");\n+        dbqRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response dbqResponse = client().performRequest(dbqRequest);\n+        assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjY2Nw==", "bodyText": "There's a bunch more, but I'll stop flagging them \ud83d\ude01", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527562667", "createdAt": "2020-11-20T09:31:00Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request dbqRequest = new Request(\"POST\", \"/_fleet/\" + indexName + \"/_delete_by_query\");\n+        dbqRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response dbqResponse = client().performRequest(dbqRequest);\n+        assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg=="}, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0MDMxNA==", "bodyText": "My find/replace missed a bunch! Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r529040314", "createdAt": "2020-11-23T22:35:59Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request dbqRequest = new Request(\"POST\", \"/_fleet/\" + indexName + \"/_delete_by_query\");\n+        dbqRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response dbqResponse = client().performRequest(dbqRequest);\n+        assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg=="}, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2875, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}