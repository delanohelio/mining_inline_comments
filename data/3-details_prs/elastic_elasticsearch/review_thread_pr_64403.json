{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyOTE0MzUy", "number": 64403, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjowNDo1N1rOE1ugxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjowOToxN1rOE2-REg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzcyMDM5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjowNDo1N1rOHuKdqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjowNDo1N1rOHuKdqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2Nzk3Nw==", "bodyText": "One scenario we wanna support with this PR", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r518167977", "createdAt": "2020-11-05T16:04:57Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "diffHunk": "@@ -75,6 +75,31 @@ class TestClustersPluginFuncTest extends AbstractGradleFuncTest {\n         assertNoCustomDistro('myCluster')\n     }\n \n+    def \"can declare test cluster in lazy evaluated task configuration block\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587c796a0270d06428cc8cbbb0882f67cf5c0059"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDQyNzA4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyMTo0MlrOHwAKXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1MDo0OVrOHwqwaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjM1MQ==", "bodyText": "Do we actually ever want to do this? Seems a bit fragile and generally task configure should be as side-effect free as possible no? Is there any real significant overhead in simply declaring a cluster that would be worthwhile avoiding if the cluster is never subsequently started?", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520096351", "createdAt": "2020-11-09T20:21:42Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "diffHunk": "@@ -75,6 +75,31 @@ class TestClustersPluginFuncTest extends AbstractGradleFuncTest {\n         assertNoCustomDistro('myCluster')\n     }\n \n+    def \"can declare test cluster in lazy evaluated task configuration block\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0Mjg2OQ==", "bodyText": "The original problem we wanna fix here, is that we cannot port the RestIntegTestTask to use the task avoidance api as relying on the afterEvaluate for finalizing the test cluster, as with task avoidance api the materialisation of a RestIntegTestTask  (which creates a matching TestCluster instance) via an tasks.withType hook (see \n  \n    \n      elasticsearch/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestTestBasePlugin.java\n    \n    \n        Lines 39 to 45\n      in\n      0369def\n    \n    \n    \n    \n\n        \n          \n           project.getTasks().withType(RestIntegTestTask.class).configureEach(restIntegTestTask -> { \n        \n\n        \n          \n               @SuppressWarnings(\"unchecked\") \n        \n\n        \n          \n               NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project \n        \n\n        \n          \n                   .getExtensions() \n        \n\n        \n          \n                   .getByName(TestClustersPlugin.EXTENSION_NAME); \n        \n\n        \n          \n               ElasticsearchCluster cluster = testClusters.maybeCreate(restIntegTestTask.getName()); \n        \n\n        \n          \n               restIntegTestTask.useCluster(cluster); \n        \n    \n  \n\n) that happens to late when afterEvaluate has been already triggered.\nI think ideally we would configure those simple cluster setups that are tight to those test tasks in a 1:1 manner more in the context of this test task. something like this:\ntasks.register('someRestTest', RestIntegTestTask) {\n   cluster {\n      testDistribution = 'DEFAULT'\n      setting 'xpack.ml.enabled', 'false'\n      setting 'xpack.watcher.enabled', 'false'\n    }\n}\n\nIMO this makes things also more readable, especially for projects with multiple rest test tasks.", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520442869", "createdAt": "2020-11-10T10:11:40Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "diffHunk": "@@ -75,6 +75,31 @@ class TestClustersPluginFuncTest extends AbstractGradleFuncTest {\n         assertNoCustomDistro('myCluster')\n     }\n \n+    def \"can declare test cluster in lazy evaluated task configuration block\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjM1MQ=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1ODcwNg==", "bodyText": "Would doing .all() instead of .configureEach() trigger those tasks to be created? I suppose it would, huh. I guess there's no API to say \"do this thing for each \"registered\" task of this type\".", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520758706", "createdAt": "2020-11-10T17:55:12Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "diffHunk": "@@ -75,6 +75,31 @@ class TestClustersPluginFuncTest extends AbstractGradleFuncTest {\n         assertNoCustomDistro('myCluster')\n     }\n \n+    def \"can declare test cluster in lazy evaluated task configuration block\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjM1MQ=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5NDIxNw==", "bodyText": "I think for now this is the only way to go. Calling it good.", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520794217", "createdAt": "2020-11-10T18:50:49Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/TestClustersPluginFuncTest.groovy", "diffHunk": "@@ -75,6 +75,31 @@ class TestClustersPluginFuncTest extends AbstractGradleFuncTest {\n         assertNoCustomDistro('myCluster')\n     }\n \n+    def \"can declare test cluster in lazy evaluated task configuration block\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjM1MQ=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDc2NzU5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjowMjo1MVrOHwDYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDozNTo0NFrOHwWRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE0OTEwNw==", "bodyText": "This doesn't seem right. In both scenarios we return what is effectively an empty set of dependencies. If docker is available, or we don't consider this to be optional, we should return the configuration's build dependencies.", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520149107", "createdAt": "2020-11-09T22:02:51Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -217,22 +238,36 @@ public Configuration getExtracted() {\n \n     @Override\n     public TaskDependency getBuildDependencies() {\n-        // For non-required Docker distributions, skip building the distribution is Docker is unavailable\n-        if (isDocker() && getFailIfUnavailable() == false && dockerSupport.get().getDockerAvailability().isAvailable == false) {\n-            return task -> Collections.emptySet();\n-        }\n+        Optional<TaskDependency> dockerBuildDependencies = dockerBuildDependencies();\n+        return dockerBuildDependencies.orElseGet(() -> {\n+            maybeFreeze();\n+            return getType().shouldExtract() ? extracted.getBuildDependencies() : configuration.getBuildDependencies();\n+        });\n+    }\n \n-        return configuration.getBuildDependencies();\n+    public TaskDependency getArchiveBuildDependencies() {\n+        Optional<TaskDependency> dockerBuildDependencies = dockerBuildDependencies();\n+        return dockerBuildDependencies.orElseGet(() -> {\n+            maybeFreeze();\n+            return configuration.getBuildDependencies();\n+        });\n+    }\n+\n+    private Optional<TaskDependency> dockerBuildDependencies() {\n+        // For non-required Docker distributions, skip building the distribution is Docker is unavailable\n+        return (isDocker() && getFailIfUnavailable() == false && dockerSupport.get().getDockerAvailability().isAvailable == false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODYyNQ==", "bodyText": "reworked this", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520458625", "createdAt": "2020-11-10T10:35:44Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -217,22 +238,36 @@ public Configuration getExtracted() {\n \n     @Override\n     public TaskDependency getBuildDependencies() {\n-        // For non-required Docker distributions, skip building the distribution is Docker is unavailable\n-        if (isDocker() && getFailIfUnavailable() == false && dockerSupport.get().getDockerAvailability().isAvailable == false) {\n-            return task -> Collections.emptySet();\n-        }\n+        Optional<TaskDependency> dockerBuildDependencies = dockerBuildDependencies();\n+        return dockerBuildDependencies.orElseGet(() -> {\n+            maybeFreeze();\n+            return getType().shouldExtract() ? extracted.getBuildDependencies() : configuration.getBuildDependencies();\n+        });\n+    }\n \n-        return configuration.getBuildDependencies();\n+    public TaskDependency getArchiveBuildDependencies() {\n+        Optional<TaskDependency> dockerBuildDependencies = dockerBuildDependencies();\n+        return dockerBuildDependencies.orElseGet(() -> {\n+            maybeFreeze();\n+            return configuration.getBuildDependencies();\n+        });\n+    }\n+\n+    private Optional<TaskDependency> dockerBuildDependencies() {\n+        // For non-required Docker distributions, skip building the distribution is Docker is unavailable\n+        return (isDocker() && getFailIfUnavailable() == false && dockerSupport.get().getDockerAvailability().isAvailable == false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE0OTEwNw=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDc3MzgxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjowNDo1MVrOHwDcOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxMzoxOVrOHwXuuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MDA3Mw==", "bodyText": "I don't think either of these methods should be public. If I need to wire up dependencies I should depend on either the Distribution itself or getExtracted depending on what I'm using and then just rely on implicit dependencies.", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520150073", "createdAt": "2020-11-09T22:04:51Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -217,22 +238,36 @@ public Configuration getExtracted() {\n \n     @Override\n     public TaskDependency getBuildDependencies() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MjQ5MQ==", "bodyText": "getBuildDependencies is required as ElasticsearchDistribution is implementing Buildable, so we cannot remove this without major rework. While working on this I noticed that ElasticsearchDistribution does a little bit too much at the moment and in one point we might want to split this up a bit one day", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520482491", "createdAt": "2020-11-10T11:13:19Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -217,22 +238,36 @@ public Configuration getExtracted() {\n \n     @Override\n     public TaskDependency getBuildDependencies() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MDA3Mw=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDc3ODg4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjowNjozMFrOHwDfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxOTozNVrOHwVocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MDkwMg==", "bodyText": "Couldn't this just be Action<Distribution>? I don't see where we ever actually use the returned result of this function.", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520150902", "createdAt": "2020-11-09T22:06:30Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -103,13 +105,16 @@ public String toString() {\n     private final Property<Boolean> bundledJdk;\n     private final Property<Boolean> failIfUnavailable;\n     private final Configuration extracted;\n+    private Function<ElasticsearchDistribution, ElasticsearchDistribution> distributionFinalizer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0ODExNA==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520448114", "createdAt": "2020-11-10T10:19:35Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/ElasticsearchDistribution.java", "diffHunk": "@@ -103,13 +105,16 @@ public String toString() {\n     private final Property<Boolean> bundledJdk;\n     private final Property<Boolean> failIfUnavailable;\n     private final Configuration extracted;\n+    private Function<ElasticsearchDistribution, ElasticsearchDistribution> distributionFinalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MDkwMg=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDc4NzM4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjowOToxN1rOHwDkwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxNDowM1rOHwVaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MjI1Nw==", "bodyText": "Looking at this more, now that we make the default behavior to return the extracted archive, perhaps instead of exposing a getExtracted() method on ElasticsearchDistribution we should replace that with getArchive()?", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520152257", "createdAt": "2020-11-09T22:09:17Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -113,7 +113,8 @@ public void apply(Project project) {\n         for (ElasticsearchDistribution distribution : testDistributions) {\n             String taskname = destructiveDistroTestTaskName(distribution);\n             TaskProvider<?> depsTask = project.getTasks().register(taskname + \"#deps\");\n-            depsTask.configure(t -> t.dependsOn(distribution, examplePlugin, quotaAwareFsPlugin));\n+            // explicitly depend on the archive not on the implicit extracted distribution\n+            depsTask.configure(t -> t.dependsOn(distribution.getArchiveBuildDependencies(), examplePlugin, quotaAwareFsPlugin));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NDQyMg==", "bodyText": "having getArchive() sounds like a good idea. We still use getExtracted to have access to the files in ElasticsearchNode. We can probably rework that at one point, but I would not wanna do it as part of this PR and not broaden the focus of this PR", "url": "https://github.com/elastic/elasticsearch/pull/64403#discussion_r520444422", "createdAt": "2020-11-10T10:14:03Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -113,7 +113,8 @@ public void apply(Project project) {\n         for (ElasticsearchDistribution distribution : testDistributions) {\n             String taskname = destructiveDistroTestTaskName(distribution);\n             TaskProvider<?> depsTask = project.getTasks().register(taskname + \"#deps\");\n-            depsTask.configure(t -> t.dependsOn(distribution, examplePlugin, quotaAwareFsPlugin));\n+            // explicitly depend on the archive not on the implicit extracted distribution\n+            depsTask.configure(t -> t.dependsOn(distribution.getArchiveBuildDependencies(), examplePlugin, quotaAwareFsPlugin));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MjI1Nw=="}, "originalCommit": {"oid": "d821451e6553473422fc2e258848e4c55aa7fbc1"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}