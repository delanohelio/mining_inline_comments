{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjgxNjcy", "number": 53533, "title": "Enable support for decompression of compressed response within RestHighLevelClient", "bodyText": "This pull request is to enable the RestHighLevelClient to handle an Elasticsearch response which has compressed content. It was already possible to do this with the low level client, see here AsyncElasticsearchCompressedRequest\nCompression can enabled within a node configuration with the following property: http.compression: true Compression can be triggered by a request from a client. Therefor you also need to provide additional information within the header of the request to Elasticsearch if a client really wants to enable it. That is possible with the following RequestOptions:\nRequestOptions.Builder requestOptions = RequestOptions.DEFAULT.toBuilder()\n    .addHeader(\"Accept-Encoding\", \"gzip\")\n\nWith these two properties Elasticsearch will return a gzip compressed response body. The RestHighLevelClient can send a request with the above request options but it couldn't handle the response yet. This feature request contains the option to handle a compressed response if it is compressed with gzip.", "createdAt": "2020-03-13T09:41:59Z", "url": "https://github.com/elastic/elasticsearch/pull/53533", "merged": true, "mergeCommit": {"oid": "4a195b573ab85d4e756669c953419ebdb3003442"}, "closed": true, "closedAt": "2020-04-02T15:01:58Z", "author": {"login": "Hakky54"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNF6Y8AH2gAyMzg3NjgxNjcyOjU2NmZiMmE2MzlhYzQyNDMxYWEwYWFjZWY3ODEzN2M1NjkzZThkYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTto_wgFqTM4NjUxNTMwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "566fb2a639ac42431aa0aacef78137c5693e8dc7", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/566fb2a639ac42431aa0aacef78137c5693e8dc7", "committedDate": "2020-03-13T01:20:24Z", "message": "Added decompression of gzip when gzip value is return as an header from Elasticsearch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e74d1db57031f1f52cefc7ad39a9db2caa2664", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6e74d1db57031f1f52cefc7ad39a9db2caa2664", "committedDate": "2020-03-13T09:15:51Z", "message": "Importing only specific classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f028fee6faf7f6277948bf40733334bc4c9e6787", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/f028fee6faf7f6277948bf40733334bc4c9e6787", "committedDate": "2020-03-13T09:29:25Z", "message": "Merge pull request #1 from elastic/master\n\nPulling latest changes from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdcc7248ff9af5d8693f9d5d1fd8ecb3311eb79", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/2bdcc7248ff9af5d8693f9d5d1fd8ecb3311eb79", "committedDate": "2020-03-13T09:32:44Z", "message": "Merge branch 'master' of github.com:Hakky54/elasticsearch into feature/add-support-for-decompression-of-compressed-response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c275faef0c16f036e305dd1b1bdfe86150b04772", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/c275faef0c16f036e305dd1b1bdfe86150b04772", "committedDate": "2020-03-13T10:14:11Z", "message": "Fixed imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0191c26241022677ce2c2f17acee3e6ead03f7b3", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/0191c26241022677ce2c2f17acee3e6ead03f7b3", "committedDate": "2020-03-13T16:14:29Z", "message": "Fixed getting byte array the correct way"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47f894be8cc7d0f97b6139c6a650b58d396faf8", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/a47f894be8cc7d0f97b6139c6a650b58d396faf8", "committedDate": "2020-03-13T22:38:15Z", "message": "Fixed unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8671fc0e550d53c0f159ba8420affeaa9f0e957d", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/8671fc0e550d53c0f159ba8420affeaa9f0e957d", "committedDate": "2020-03-16T16:17:02Z", "message": "Renamed variables and method names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTY1OTkw", "url": "https://github.com/elastic/elasticsearch/pull/53533#pullrequestreview-383965990", "createdAt": "2020-03-30T15:22:00Z", "commit": {"oid": "8671fc0e550d53c0f159ba8420affeaa9f0e957d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d719b842642a2335a1d77d405298c46b404f960d", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/d719b842642a2335a1d77d405298c46b404f960d", "committedDate": "2020-03-31T08:57:00Z", "message": "Applied review remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0edc3c83b279dd487360f036d1669ce7ec0fa8d5", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/0edc3c83b279dd487360f036d1669ce7ec0fa8d5", "committedDate": "2020-03-31T09:15:58Z", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d14a9776273c5c8c888f623d1e546446953e281", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d14a9776273c5c8c888f623d1e546446953e281", "committedDate": "2020-03-31T09:32:31Z", "message": "Reverted change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1145c0a611b3135493e384a9a473af45325e079", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1145c0a611b3135493e384a9a473af45325e079", "committedDate": "2020-03-31T09:44:32Z", "message": "Removed unnecessary method as assertOk with StatusToXContentObject is sufficient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12c802d65e2b897bb8af21438b177ccd6fdfbee1", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/12c802d65e2b897bb8af21438b177ccd6fdfbee1", "committedDate": "2020-03-31T11:21:46Z", "message": "Removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01476e2c0a4889b1cf04ddbc9401251994a15db", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/f01476e2c0a4889b1cf04ddbc9401251994a15db", "committedDate": "2020-03-31T11:22:18Z", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "committedDate": "2020-04-01T08:12:03Z", "message": "Removed duplicate assertions, as that part is the same as the unit test of testParseEntity()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDg1NzUz", "url": "https://github.com/elastic/elasticsearch/pull/53533#pullrequestreview-385485753", "createdAt": "2020-04-01T11:12:28Z", "commit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToxMjoyOFrOF-73AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjowOTowMlrOF-9meA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzNjc2OA==", "bodyText": "very minor, but should we go with UTF_8 here? (to stay within the \"utf8 everywhere\" bounds)", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401536768", "createdAt": "2020-04-01T11:12:28Z", "author": {"login": "andreidan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));\n+        HttpEntity yamlEntity = new NByteArrayEntity(compress(\"---\\nfield: value\\n\"), ContentType.create(\"application/yaml\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(yamlEntity), entityParser));\n+        HttpEntity smileEntity = createCompressedBinaryEntity(SmileXContent.contentBuilder(), ContentType.create(\"application/smile\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(smileEntity), entityParser));\n+        HttpEntity cborEntity = createCompressedBinaryEntity(CborXContent.contentBuilder(), ContentType.create(\"application/cbor\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(cborEntity), entityParser));\n+    }\n+\n+    private static byte[] compress(String content) throws IOException {\n+        return compress(content.getBytes(StandardCharsets.ISO_8859_1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjYyMw==", "bodyText": "I think we can make use of ESRestHighLevelClientTestCase and have HttpCompressionIT moved to the client (org.elasticsearch.client) tests and extend it? That way we'll keep ESRestTestCase agnostic of the high level rest client as it's already quite knowledgeable, and HttpCompressionIT is essentially testing how our clients are handling the compression so I think it would fit in the client package. What do you think?", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401542623", "createdAt": "2020-04-01T11:23:56Z", "author": {"login": "andreidan"}, "path": "test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java", "diffHunk": "@@ -139,6 +141,7 @@ public static boolean hasXPack() {\n      * A client for the running Elasticsearch cluster\n      */\n     private static RestClient client;\n+    private static RestHighLevelClient restHighLevelClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzU5OA==", "bodyText": "Nice test! Should we also assert we got one hit back? (we'd read something from the payload this way)", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401553598", "createdAt": "2020-04-01T11:45:53Z", "author": {"login": "andreidan"}, "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/HttpCompressionIT.java", "diffHunk": "@@ -59,4 +66,29 @@ public void testUncompressedResponseByDefault() throws IOException {\n         assertNull(response.getHeader(HttpHeaders.CONTENT_ENCODING));\n     }\n \n+    public void testCompressesResponseIfRequestedWhileUsingRestHighLevelClient() throws IOException {\n+        String documentId = \"1\";\n+        String indexName = \"company\";\n+\n+        IndexRequest indexRequest = new IndexRequest(indexName)\n+            .source(SAMPLE_DOCUMENT, XContentType.JSON)\n+            .id(documentId);\n+        IndexResponse indexResponse = restHighLevelClient().index(indexRequest, RequestOptions.DEFAULT);\n+        assertOK(indexResponse);\n+\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder()\n+            .query(new MatchQueryBuilder(\"_id\", documentId));\n+\n+        SearchRequest searchRequest = new SearchRequest()\n+            .indices(indexName)\n+            .source(sourceBuilder);\n+\n+        RequestOptions requestOptions = RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(HttpHeaders.ACCEPT_ENCODING, GZIP_ENCODING)\n+            .build();\n+\n+        SearchResponse searchResponse = restHighLevelClient().search(searchRequest, requestOptions);\n+        assertOK(searchResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDAzNQ==", "bodyText": "Shall we convert this to a method that creates an encoded HttpEntity?\nie. HttpEntity createGzipEncodedEntity(String content)\nAnd we could use real apache entities instead of mocks/spies. We can create a BasicHttpEntity, a BasicHeader for the encoding and set the header we create on the entity using setContentEncoding(Header contentEncoding)", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401560035", "createdAt": "2020-04-01T11:58:27Z", "author": {"login": "andreidan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));\n+        HttpEntity yamlEntity = new NByteArrayEntity(compress(\"---\\nfield: value\\n\"), ContentType.create(\"application/yaml\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(yamlEntity), entityParser));\n+        HttpEntity smileEntity = createCompressedBinaryEntity(SmileXContent.contentBuilder(), ContentType.create(\"application/smile\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(smileEntity), entityParser));\n+        HttpEntity cborEntity = createCompressedBinaryEntity(CborXContent.contentBuilder(), ContentType.create(\"application/cbor\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(cborEntity), entityParser));\n+    }\n+\n+    private static byte[] compress(String content) throws IOException {\n+        return compress(content.getBytes(StandardCharsets.ISO_8859_1));\n+    }\n+\n+    private static byte[] compress(byte[] content) throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream(content.length);\n+        GZIPOutputStream gzip = new GZIPOutputStream(bos);\n+        gzip.write(content);\n+        gzip.close();\n+        bos.close();\n+\n+        return bos.toByteArray();\n+    }\n+\n+    private static HttpEntity enrichHeaderContentEncodingWithGzip(HttpEntity httpEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDY2OA==", "bodyText": "This might be subjective, but this is a bit hard to read. I find it hard to see what exactly is being tested. Would it be a bit easier to read if we extract the enriched header entities on a separate line above the assert statement?\nie. assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser)); could become\nHttpEntity jsonEntity = createGzipEncodedEntity(\"{ ... }\"); \nassertThat(restHighLevelClient.parseEntity(jsonEntity, entityParser), is(\"value));", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401560668", "createdAt": "2020-04-01T11:59:41Z", "author": {"login": "andreidan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTMwNA==", "bodyText": "super minor: shall we rename headerValue to gzipHeaderValue to point out we found the gzip encoding header?", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401565304", "createdAt": "2020-04-01T12:09:02Z", "author": {"login": "andreidan"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -1872,11 +1874,18 @@ protected final ElasticsearchStatusException parseResponseException(ResponseExce\n         return elasticsearchException;\n     }\n \n-    protected final <Resp> Resp parseEntity(final HttpEntity entity,\n+    protected final <Resp> Resp parseEntity(final HttpEntity httpEntity,\n                                       final CheckedFunction<XContentParser, Resp, IOException> entityParser) throws IOException {\n-        if (entity == null) {\n+        if (httpEntity == null) {\n             throw new IllegalStateException(\"Response body expected but not returned\");\n         }\n+\n+        final HttpEntity entity = Optional.ofNullable(httpEntity.getContentEncoding())\n+            .map(Header::getValue)\n+            .filter(\"gzip\"::equalsIgnoreCase)\n+            .map(headerValue -> (HttpEntity) new GzipDecompressingEntity(httpEntity))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a339f5de2c6ab52b963c27bd4f44bf9df2a1a6c0", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/a339f5de2c6ab52b963c27bd4f44bf9df2a1a6c0", "committedDate": "2020-04-02T08:49:32Z", "message": "Applied review remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b43a581390d344f3a3bf994aa5f573da706051", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0b43a581390d344f3a3bf994aa5f573da706051", "committedDate": "2020-04-02T09:27:44Z", "message": "Applied review remarks for excluding spied objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2943f6e277a4d0429cf89a9e5b3712c79b9802a", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/b2943f6e277a4d0429cf89a9e5b3712c79b9802a", "committedDate": "2020-04-02T09:32:44Z", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14aeb0ffa7cb54d719727d5928ba7e18c8832dfa", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/14aeb0ffa7cb54d719727d5928ba7e18c8832dfa", "committedDate": "2020-04-02T14:10:33Z", "message": "Applied review remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68f3800845991420fe77365a001b4e6d9db0b6f", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/a68f3800845991420fe77365a001b4e6d9db0b6f", "committedDate": "2020-04-02T14:11:19Z", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3045c87f0535f9e74de12308bccb6989fb36763f", "author": {"user": {"login": "Hakky54", "name": "Hakan Alt\u0131nda\u011f"}}, "url": "https://github.com/elastic/elasticsearch/commit/3045c87f0535f9e74de12308bccb6989fb36763f", "committedDate": "2020-04-02T14:17:44Z", "message": "Added static import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTE1MzA0", "url": "https://github.com/elastic/elasticsearch/pull/53533#pullrequestreview-386515304", "createdAt": "2020-04-02T15:01:09Z", "commit": {"oid": "3045c87f0535f9e74de12308bccb6989fb36763f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1388, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}