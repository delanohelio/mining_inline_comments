{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTEwOTI2", "number": 52118, "title": "Refactor license checking", "bodyText": "Improve code reuse and readability.\nRelates: #51864", "createdAt": "2020-02-10T02:25:54Z", "url": "https://github.com/elastic/elasticsearch/pull/52118", "merged": true, "mergeCommit": {"oid": "72cf242dc443f0704517f6d59d37d32e1c8a63c9"}, "closed": true, "closedAt": "2020-02-21T03:22:25Z", "author": {"login": "ywangd"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCznuogH2gAyMzcyOTEwOTI2OjhlYWJiZjFkMTMyMGZhYWEwMjg4Yzg0NmE3OTc5YmFhODIzYzYxZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGVxRRgH2gAyMzcyOTEwOTI2OmUxZWNhOTkzODlhNmY2ZTIwMjk1OTY5NWM5NThjNzgxMmZlYzkyMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/8eabbf1d1320faaa0288c846a7979baa823c61f1", "committedDate": "2020-02-10T02:22:29Z", "message": "Continue refactor license checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY1NDIx", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355665421", "createdAt": "2020-02-10T02:29:58Z", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjoyOTo1OFrOFnY5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjoyOTo1OFrOFnY5vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0Njc4Mg==", "bodyText": "Address feedback #51864 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376846782", "createdAt": "2020-02-10T02:29:58Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -343,7 +343,7 @@ public synchronized OperationMode getOperationMode() {\n     }\n \n     /** Return true if the license is currently within its time boundaries, false otherwise. */\n-    public synchronized boolean isActive() {\n+    public synchronized boolean allowForAllLicenses() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY2MDQ3", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355666047", "createdAt": "2020-02-10T02:33:17Z", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozMzoxN1rOFnY7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozMzoxN1rOFnY7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzI4Mw==", "bodyText": "Address feedback #51864 (comment)\nThe method isAllowedByLicense now does not check security at all, while isAllowedBySecurityAndLicense always checks security plus license.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847283", "createdAt": "2020-02-10T02:33:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -806,26 +804,36 @@ public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean isAllowedBySecurity() {\n-        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-    }\n-\n     /**\n-     * Test whether a feature is allowed by the status of current license and security configuration.\n+     * Test whether a feature is allowed by the status of license and security configuration.\n+     * Note the difference to {@link #isAllowedByLicense} is this method requires security\n+     * to be enabled.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n-     * @param needSecurity Whether security is required for feature to be allowed\n      * @param needActive   Whether current license needs to be active\n      * @param allowTrial   Whether the feature is allowed for trial license\n      *\n      * @return true if feature is allowed, otherwise false\n      */\n-    private synchronized boolean isAllowedByLicenseAndSecurity(\n-        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n-\n-        if (needSecurity && false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n+    private synchronized boolean isAllowedBySecurityAndLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n+        if (false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n             return false;\n         }\n+        return isAllowedByLicense(minimumMode, needActive, allowTrial);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of license. Note difference to\n+     * {@link #isAllowedBySecurityAndLicense} is this method does <b>Not</b> require security\n+     * to be enabled.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    public synchronized boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n         if (needActive && false == status.active) {\n             return false;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 348}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY2MjI1", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355666225", "createdAt": "2020-02-10T02:34:17Z", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNDoxN1rOFnY8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNDoxN1rOFnY8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQyNg==", "bodyText": "Address feedback #51864 (comment)\nSingle call to remove potential race condition.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847426", "createdAt": "2020-02-10T02:34:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,13 +243,12 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n-            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY2MzAw", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355666300", "createdAt": "2020-02-10T02:34:42Z", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNDo0M1rOFnY8dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNDo0M1rOFnY8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQ3OA==", "bodyText": "Same as above.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847478", "createdAt": "2020-02-10T02:34:43Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,13 +243,12 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n-            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {\n             return true;\n         }\n \n         // catch the rest, if the license is active and is at least the required model license\n-        return licenseState.isActive() && License.OperationMode.compare(licenseState.getOperationMode(), licenseLevel) >= 0;\n+        return licenseState.isAllowedByLicense(licenseLevel, true, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY2MzYx", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355666361", "createdAt": "2020-02-10T02:35:06Z", "commit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNTowNlrOFnY8rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozNTowNlrOFnY8rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzUzMw==", "bodyText": "Address feedback #51864 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847533", "createdAt": "2020-02-10T02:35:06Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -715,9 +715,7 @@ public synchronized boolean isTrialLicense() {\n      * @return true if security is available to be used with the current license type\n      */\n     public synchronized boolean isSecurityAvailable() {\n-        OperationMode mode = status.mode;\n-        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||\n-                mode == OperationMode.TRIAL || mode == OperationMode.BASIC || mode == OperationMode.ENTERPRISE;\n+        return status.mode != OperationMode.MISSING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 289}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c931b82b2552c3594ee90511f4376e01b8c093", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1c931b82b2552c3594ee90511f4376e01b8c093", "committedDate": "2020-02-10T02:43:38Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjY4MDEw", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355668010", "createdAt": "2020-02-10T02:44:38Z", "commit": {"oid": "f1c931b82b2552c3594ee90511f4376e01b8c093"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjo0NDozOVrOFnZCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjo0NDozOVrOFnZCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0ODkwOA==", "bodyText": "Address feedback #51864 (comment)\nSee #52118 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376848908", "createdAt": "2020-02-10T02:44:39Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -255,9 +255,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n-                    && newLicense.operationMode() != License.OperationMode.PLATINUM\n-                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE\n-                    && newLicense.operationMode() != License.OperationMode.TRIAL) {\n+                    && XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c931b82b2552c3594ee90511f4376e01b8c093"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d1164c191b3a5b27484df2ad95cf079c858521e", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d1164c191b3a5b27484df2ad95cf079c858521e", "committedDate": "2020-02-10T03:13:56Z", "message": "Fix fips license test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjczODYx", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-355673861", "createdAt": "2020-02-10T03:16:17Z", "commit": {"oid": "9d1164c191b3a5b27484df2ad95cf079c858521e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMzoxNjoxOFrOFnZUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMzoxNjoxOFrOFnZUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MzY3Ng==", "bodyText": "Address feedback #51864 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376853676", "createdAt": "2020-02-10T03:16:18Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -255,9 +255,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n-                    && newLicense.operationMode() != License.OperationMode.PLATINUM\n-                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE\n-                    && newLicense.operationMode() != License.OperationMode.TRIAL) {\n+                    && false == XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1164c191b3a5b27484df2ad95cf079c858521e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a20a970aa41d1cc56e5c5c9f24faf948b031a07", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a20a970aa41d1cc56e5c5c9f24faf948b031a07", "committedDate": "2020-02-10T10:14:34Z", "message": "More refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "committedDate": "2020-02-10T10:28:18Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Njc4MjE2", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-358678216", "createdAt": "2020-02-14T02:22:58Z", "commit": {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjoyMjo1OFrOFpp4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjozMTowNFrOFpp_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjE1NQ==", "bodyText": "I'm going to be picky and say I'd like an even simpler version of this method.\nMy absolute number 1 aim here is when an engineer needs to add a license check, they are not asked to make decisions that they shouldn't need to worry about.\nI think that means we should have:\npublic boolean isAllowedByLicense(OperationMode minimumMode) {\n    return AllowedByLicense(minimumMode, true, true);\n}\n\nand use that method everywhere we can.\nPut yourself in the shows of someone who is implementing a new license check.\nThey come here, they look for another method that has a similar license live (e.g. Platinum), and find the isCcrAllowed method. So, they model their isWorldDominationAllowed method on that.\nBut isCcrAllowed calls: isAllowedByLicense(PLATINUM, true, true)\nDo I need to pass true for those parameters as well? Well, what do they mean? Oh, needActive ... well, what counts as an active license? let's look for what that paremter does... oh, it checks status.active ... what does that mean ? etc.\nThere should be an obvious method that does the right thing for 90% of cases, and we don't ask the engineer to worry about parameters that they almost certainly don't care about, and shouldn't be asked to make a decision on.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379222155", "createdAt": "2020-02-14T02:22:58Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -806,26 +804,36 @@ public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean isAllowedBySecurity() {\n-        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-    }\n-\n     /**\n-     * Test whether a feature is allowed by the status of current license and security configuration.\n+     * Test whether a feature is allowed by the status of license and security configuration.\n+     * Note the difference to {@link #isAllowedByLicense} is this method requires security\n+     * to be enabled.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n-     * @param needSecurity Whether security is required for feature to be allowed\n      * @param needActive   Whether current license needs to be active\n      * @param allowTrial   Whether the feature is allowed for trial license\n      *\n      * @return true if feature is allowed, otherwise false\n      */\n-    private synchronized boolean isAllowedByLicenseAndSecurity(\n-        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n-\n-        if (needSecurity && false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n+    private synchronized boolean isAllowedBySecurityAndLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n+        if (false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n             return false;\n         }\n+        return isAllowedByLicense(minimumMode, needActive, allowTrial);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of license. Note difference to\n+     * {@link #isAllowedBySecurityAndLicense} is this method does <b>Not</b> require security\n+     * to be enabled.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    public synchronized boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n         if (needActive && false == status.active) {\n             return false;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzI4Mw=="}, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjY0Nw==", "bodyText": "I think the javadoc should be updated. Stricly it's accurate, but by intent this method now has a different purpose.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379222647", "createdAt": "2020-02-14T02:25:22Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -343,7 +343,7 @@ public synchronized OperationMode getOperationMode() {\n     }\n \n     /** Return true if the license is currently within its time boundaries, false otherwise. */\n-    public synchronized boolean isActive() {\n+    public synchronized boolean allowForAllLicenses() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0Njc4Mg=="}, "originalCommit": {"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzA2MQ==", "bodyText": "We can remove the comment above, since it's not accurate (we don't check missing).", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223061", "createdAt": "2020-02-14T02:27:02Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -637,23 +637,23 @@ public boolean isIndexLifecycleAllowed() {\n      *         {@code false}.\n      */\n     public boolean isEnrichAllowed() {\n-        return isActive();\n+        return allowForAllLicenses();\n     }\n \n     /**\n      * Determine if EQL support should be enabled.\n      * <p>\n      *  EQL is available for all license types except {@link OperationMode#MISSING}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzUyMA==", "bodyText": "I don't think this call should change. I think we still need a (possibly package protected) isActive method here so that the test is asserting what it says it's asserting.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223520", "createdAt": "2020-02-14T02:29:22Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java", "diffHunk": "@@ -88,7 +88,7 @@ public void onFailure(String source, @Nullable Exception e) {\n     protected void assertLicenseActive(boolean active) throws Exception {\n         assertBusy(() -> {\n             for (XPackLicenseState licenseState : internalCluster().getDataNodeInstances(XPackLicenseState.class)) {\n-                if (licenseState.isActive() == active) {\n+                if (licenseState.allowForAllLicenses() == active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzg4Mw==", "bodyText": "This isn't true any more, right?\nI mean, technically right now there's no functional difference between Platinum and Enterprise modes, but Platinum isn't actually the highest now.", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223883", "createdAt": "2020-02-14T02:31:04Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java", "diffHunk": "@@ -307,53 +309,61 @@ public void testSerializationWithCompressedLazyDefinition() throws IOException {\n \n     public void testIsAvailableWithLicense() {\n         TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n-\n         XPackLicenseState licenseState = mock(XPackLicenseState.class);\n-        when(licenseState.isActive()).thenReturn(false);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.BASIC);\n \n+        // Reject everything\n+        when(licenseState.isAllowedByLicense(any(License.OperationMode.class), anyBoolean(), anyBoolean())).thenAnswer(\n+            invocationOnMock -> {\n+                final Object[] arguments = invocationOnMock.getArguments();\n+                assertTrue((boolean) arguments[1]); // ensure the call is made to require active license\n+                return false;\n+            }\n+        );\n         assertFalse(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n         assertFalse(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n+        assertFalse(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n+        // Basic license always works not matter what\n         assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n+    }\n \n-        when(licenseState.isActive()).thenReturn(true);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.ENTERPRISE);\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n-\n-        when(licenseState.isActive()).thenReturn(false);\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n+    public void testActivePlatinumLicenseAlwaysWorks() {\n+        TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n+        XPackLicenseState licenseState = mock(XPackLicenseState.class);\n \n-        when(licenseState.isActive()).thenReturn(true);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.PLATINUM);\n+        // Active Platinum license is considered as highest and should always work", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1da1097a2994dbcce156755e99b4bcf7e643e91", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1da1097a2994dbcce156755e99b4bcf7e643e91", "committedDate": "2020-02-14T04:33:09Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "committedDate": "2020-02-14T04:33:35Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34e3ca550ea7c539000ea65b3375ce42f8c3818", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/a34e3ca550ea7c539000ea65b3375ce42f8c3818", "committedDate": "2020-02-14T04:39:58Z", "message": "Revert accidental change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzM5Mjc1", "url": "https://github.com/elastic/elasticsearch/pull/52118#pullrequestreview-362339275", "createdAt": "2020-02-21T00:55:58Z", "commit": {"oid": "a34e3ca550ea7c539000ea65b3375ce42f8c3818"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a3e62d17d2f48c4dfc5ac1d49027483cbb52c2", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/88a3e62d17d2f48c4dfc5ac1d49027483cbb52c2", "committedDate": "2020-02-21T01:41:10Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1eca99389a6f6e202959695c958c7812fec9222", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1eca99389a6f6e202959695c958c7812fec9222", "committedDate": "2020-02-21T01:51:27Z", "message": "Remove low value comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2743, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}