{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTg5NDYx", "number": 54854, "title": "value_count Aggregation optimization", "bodyText": "We found some problems during the test.\nData: 200Million docs\uff0c 1 shard\uff0c0 replica\u3002\n\n\n\nHit\navg\nsum\nvalue_count\n\n\n\n\n20k\n38ms\n33ms\n63ms\n\n\n200k\n127ms\n125ms\n334ms\n\n\n2Million\n789ms\n729ms\n3.176s\n\n\n20Million\n4.2s\n3.239s\n22.787s\n\n\n200Million(100%)\n21s\n22s\n154.917s\n\n\n\nThe performance of avg, sum and other is very close when performing statistics, but the performance of value_count has always been poor, even not on an order of magnitude. Based on some common-sense knowledge, we think that value_count and sum are similar operations, and the time consumed should be the same. Therefore, we have discussed the agg of value_count.\nThe principle of counting in es is to traverse the field of each document. If the field is an ordinary value, the count value is increased by 1. If it is an array type, the count value is increased by n. However, the problem lies in traversing each document and taking out the field, which changes from disk to an object in the Java language. We summarize its current problems with Elasticsearch as:\n\nNumber cast to string overhead, and GC problems caused by a large number of strings\nAfter the number type is converted to string, sorting and other unnecessary operations are performed\n\nHere is the proof of type conversion overhead.\n// Java long to string source code, getChars is very time-consuming.\npublic static String toString(long i) {\n        int size = stringSize(i);\n        if (COMPACT_STRINGS) {\n            byte[] buf = new byte[size];\n            getChars(i, size, buf);\n            return new String(buf, LATIN1);\n        } else {\n            byte[] buf = new byte[size * 2];\n            StringUTF16.getChars(i, size, buf);\n            return new String(buf, UTF16);\n        }\n}   \n\n\n\n\ntest type\naverage\nmin\nmax\nsum\n\n\n\n\ndouble->long\n32.2ns\n28ns\n0.024ms\n3.22s\n\n\nlong->double\n31.9ns\n28ns\n0.036ms\n3.19s\n\n\nlong->String\n163.8ns\n93ns\n1921ms\n16.3s\n\n\n\n#36752 The program heat map shows that the toString time is particularly serious.\noptimization\nOur optimization code is actually very simple. It is to manage different types separately, instead of uniformly converting to string unified processing. We added type identification in ValueCountAggregator, and made special treatment for number and geopoint types to cancel their type conversion. Because the string type is reduced and the string constant is reduced, the improvement effect is very obvious.\nresult\n\n\n\nHit\navg\nsum\nvalue_countdouble before\nvalue_countdouble after\nvalue_countkeyword before\nvalue_countkeyword after\nvalue_countgeo_point before\nvalue_countgeo_point after\n\n\n\n\n20k\n38ms\n33ms\n63ms\n26ms\n30ms\n30ms\n38ms\n15ms\n\n\n200k\n127ms\n125ms\n334ms\n78ms\n116ms\n99s\n278ms\n31ms\n\n\n2Million\n789ms\n729ms\n3.176s\n439ms\n348ms\n386ms\n3.365s\n178ms\n\n\n20Million\n4.2s\n3.239s\n22.787s\n2.7s\n2.5s\n2.6s\n25.192s\n1.278s\n\n\n200Million(100%)\n21s\n22s\n154.917s\n18.99s\n19s\n20s\n168.971s\n9.093s\n\n\n\n\nThe results are more in line with common sense. valuecount is about the same as avg, sum, etc., or even lower than these. Previously, valuecount was much larger than avg and sum, and it was not even an order of magnitude when the amount of data was large.\nWhen calculating numeric types such as double and long, the performance is improved by about 8 to 9 times; when calculating the geo_point type, the performance is improved by 18 to 20 times.", "createdAt": "2020-04-07T01:38:51Z", "url": "https://github.com/elastic/elasticsearch/pull/54854", "merged": true, "mergeCommit": {"oid": "8e8ce967757929b1f71e6a9ce4cbfbf60407867b"}, "closed": true, "closedAt": "2020-04-10T15:06:11Z", "author": {"login": "xjtushilei"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVSffpgFqTM4OTA2Njk0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWA5Z3gH2gAyMzk5OTg5NDYxOmMyNDFiZDdmNTYzZGNkZDFiZTA2NGJiNDI4M2JlOGI5Njg1ZjY3YmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDY2OTQy", "url": "https://github.com/elastic/elasticsearch/pull/54854#pullrequestreview-389066942", "createdAt": "2020-04-07T12:31:10Z", "commit": {"oid": "be80d94aa276a5c205994242676057651a464f37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMjozMToxMFrOGCBN5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMjozMToxMFrOGCBN5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MDI3OA==", "bodyText": "I think it'd be nice to have a \"value counting\" member in ValuesSource but I'd be happy to merge this as is and open up a follow up myself to do that. Or you can, if you want @xjtushilei.", "url": "https://github.com/elastic/elasticsearch/pull/54854#discussion_r404770278", "createdAt": "2020-04-07T12:31:10Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregator.java", "diffHunk": "@@ -66,6 +66,34 @@ public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,\n             return LeafBucketCollector.NO_OP_COLLECTOR;\n         }\n         final BigArrays bigArrays = context.bigArrays();\n+\n+        if (valuesSource instanceof ValuesSource.Numeric) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be80d94aa276a5c205994242676057651a464f37"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61904df3a39f5f72a5f28b7c7364300abfd452b", "author": {"user": {"login": "xjtushilei", "name": "ScriptShi"}}, "url": "https://github.com/elastic/elasticsearch/commit/f61904df3a39f5f72a5f28b7c7364300abfd452b", "committedDate": "2020-04-09T01:26:14Z", "message": "count Aggregation optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c241bd7f563dcdd1be064bb4283be8b9685f67bf", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c241bd7f563dcdd1be064bb4283be8b9685f67bf", "committedDate": "2020-04-09T18:35:07Z", "message": "Scripts change slightly. neat!"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3722, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}