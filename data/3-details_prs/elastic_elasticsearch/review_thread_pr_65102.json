{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODM2MzU1", "number": 65102, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNDoyMFrOE5_FPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozODo0OVrOE6PujQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjM3ODIyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/internal/precommit/InternalPrecommitTasks.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNDoyMFrOH0xwAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNDoyMFrOH0xwAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwMzEwNw==", "bodyText": "removing JarHellPrecommitPlugin and ThirdPartyAuditPrecommitPlugin here", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525103107", "createdAt": "2020-11-17T12:04:20Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/internal/precommit/InternalPrecommitTasks.java", "diffHunk": "@@ -16,35 +16,38 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.elasticsearch.gradle.precommit\n \n+package org.elasticsearch.gradle.internal.precommit;\n \n-import org.gradle.api.Project\n+import org.elasticsearch.gradle.precommit.LicenseHeadersPrecommitPlugin;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.gradle.api.Project;\n \n /**\n- * Validation tasks which should be run before committing. These run before tests.\n- */\n-class PrecommitTasks {\n-\n-    /** Adds a precommit task, which depends on non-test verification tasks. */\n-\n-    static void create(Project project, boolean includeDependencyLicenses) {\n+ * Internal precommit plugins that adds elasticsearch project specific\n+ * checks to the common precommit plugin.\n+ * */\n+public class InternalPrecommitTasks {\n+    /**\n+     * Adds a precommit task, which depends on non-test verification tasks.\n+     */\n+    public static void create(Project project, boolean includeDependencyLicenses) {\n+        PrecommitTasks.create(project);\n \n-        project.pluginManager.apply(CheckstylePrecommitPlugin)\n-        project.pluginManager.apply(ForbiddenApisPrecommitPlugin)\n-        project.pluginManager.apply(JarHellPrecommitPlugin)\n-        project.pluginManager.apply(ForbiddenPatternsPrecommitPlugin)\n-        project.pluginManager.apply(LicenseHeadersPrecommitPlugin)\n-        project.pluginManager.apply(FilePermissionsPrecommitPlugin)\n-        project.pluginManager.apply(ThirdPartyAuditPrecommitPlugin)\n-        project.pluginManager.apply(TestingConventionsPrecommitPlugin)\n+        project.getPluginManager().apply(CheckstylePrecommitPlugin.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjM4MTUwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNToxNFrOH0xx8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNToxNFrOH0xx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwMzYwMw==", "bodyText": "We only need this for internal builds", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525103603", "createdAt": "2020-11-17T12:05:14Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "diffHunk": "@@ -108,35 +108,38 @@ class PluginBuildPlugin implements Plugin<Project> {\n             }\n         }\n \n-        // We've ported this from multiple build scripts where we see this pattern into\n-        // an extension method as a first step of consolidation.\n-        // We might want to port this into a general pattern later on.\n-        project.ext.addQaCheckDependencies = {\n-            project.afterEvaluate {\n-                // let check depend on check tasks of qa sub-projects\n-                def checkTaskProvider = project.tasks.named(\"check\")\n-                def qaSubproject = project.subprojects.find { it.path == project.path + \":qa\" }\n-                if(qaSubproject) {\n-                    qaSubproject.subprojects.each {p ->\n-                        checkTaskProvider.configure {it.dependsOn(p.path + \":check\") }\n+        BuildParams.withInternalBuild {\n+            // We've ported this from multiple build scripts where we see this pattern into\n+            // an extension method as a first step of consolidation.\n+            // We might want to port this into a general pattern later on.\n+            project.ext.addQaCheckDependencies = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjM4OTQwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneRestTestPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowNzozN1rOH0x2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNTo0N1rOH18Ppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ==", "bodyText": "the actual change in this class except porting it to java", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525104825", "createdAt": "2020-11-17T12:07:37Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.ExportElasticsearchBuildResourcesTask;\n+import org.elasticsearch.gradle.RepositoriesSetupPlugin;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.elasticsearch.gradle.internal.precommit.InternalPrecommitTasks;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.plugins.JavaPluginExtension;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel;\n+import org.gradle.plugins.ide.idea.model.IdeaModel;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Configures the build to compile tests against Elasticsearch's test framework\n+ * and run REST tests. Use BuildPlugin if you want to build main code as well\n+ * as tests.\n+ */\n+public class StandaloneRestTestPlugin implements Plugin<Project> {\n+    @Override\n+    public void apply(Project project) {\n+        project.getPluginManager().withPlugin(\"elasticsearch.build\", appliedPlugin -> {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.standalone-test \"\n+                    + \"elasticsearch.standalone-rest-test, \"\n+                    + \"and elasticsearch.build \"\n+                    + \"are mutually exclusive\"\n+            );\n+        });\n+\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        project.getPluginManager().apply(JavaBasePlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RepositoriesSetupPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+\n+        project.getTasks().register(\"buildResources\", ExportElasticsearchBuildResourcesTask.class);\n+        ElasticsearchJavaPlugin.configureInputNormalization(project);\n+        ElasticsearchJavaPlugin.configureCompile(project);\n+\n+        project.getExtensions().getByType(JavaPluginExtension.class).setSourceCompatibility(BuildParams.getMinimumRuntimeVersion());\n+        project.getExtensions().getByType(JavaPluginExtension.class).setTargetCompatibility(BuildParams.getMinimumRuntimeVersion());\n+\n+        // only setup tests to build\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        final SourceSet testSourceSet = sourceSets.create(\"test\");\n+\n+        project.getTasks().withType(Test.class).configureEach(test -> {\n+            test.setTestClassesDirs(testSourceSet.getOutput().getClassesDirs());\n+            test.setClasspath(testSourceSet.getRuntimeClasspath());\n+        });\n+\n+        // create a compileOnly configuration as others might expect it\n+        project.getConfigurations().create(\"compileOnly\");\n+        project.getDependencies().add(\"testImplementation\", project.project(\":test:framework\"));\n+        EclipseModel eclipse = project.getExtensions().getByType(EclipseModel.class);\n+        eclipse.getClasspath().setSourceSets(Arrays.asList(testSourceSet));\n+        List<Configuration> plusConfigurations = Arrays.asList(\n+            project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME)\n+        );\n+        eclipse.getClasspath().setPlusConfigurations(plusConfigurations);\n+        IdeaModel idea = project.getExtensions().getByType(IdeaModel.class);\n+        idea.getModule()\n+            .setTestSourceDirs(\n+                Stream.of(idea.getModule().getTestSourceDirs(), testSourceSet.getJava().getSrcDirs())\n+                    .flatMap(x -> x.stream())\n+                    .collect(Collectors.toSet())\n+            );\n+        idea.getModule().getScopes().put(\"TEST\", Map.of(\"plus\", plusConfigurations));\n+\n+        BuildParams.withInternalBuild(() -> InternalPrecommitTasks.create(project, false)).orElse(() -> PrecommitTasks.create(project));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODgyNg==", "bodyText": "Since we removed jarhell and thirdpartyaudit from InternalPrecommitTasks what then applies those? Shouldn't we always apply PrecommitTasks, not just as part of this else condition?", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525538826", "createdAt": "2020-11-17T21:33:27Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.ExportElasticsearchBuildResourcesTask;\n+import org.elasticsearch.gradle.RepositoriesSetupPlugin;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.elasticsearch.gradle.internal.precommit.InternalPrecommitTasks;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.plugins.JavaPluginExtension;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel;\n+import org.gradle.plugins.ide.idea.model.IdeaModel;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Configures the build to compile tests against Elasticsearch's test framework\n+ * and run REST tests. Use BuildPlugin if you want to build main code as well\n+ * as tests.\n+ */\n+public class StandaloneRestTestPlugin implements Plugin<Project> {\n+    @Override\n+    public void apply(Project project) {\n+        project.getPluginManager().withPlugin(\"elasticsearch.build\", appliedPlugin -> {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.standalone-test \"\n+                    + \"elasticsearch.standalone-rest-test, \"\n+                    + \"and elasticsearch.build \"\n+                    + \"are mutually exclusive\"\n+            );\n+        });\n+\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        project.getPluginManager().apply(JavaBasePlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RepositoriesSetupPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+\n+        project.getTasks().register(\"buildResources\", ExportElasticsearchBuildResourcesTask.class);\n+        ElasticsearchJavaPlugin.configureInputNormalization(project);\n+        ElasticsearchJavaPlugin.configureCompile(project);\n+\n+        project.getExtensions().getByType(JavaPluginExtension.class).setSourceCompatibility(BuildParams.getMinimumRuntimeVersion());\n+        project.getExtensions().getByType(JavaPluginExtension.class).setTargetCompatibility(BuildParams.getMinimumRuntimeVersion());\n+\n+        // only setup tests to build\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        final SourceSet testSourceSet = sourceSets.create(\"test\");\n+\n+        project.getTasks().withType(Test.class).configureEach(test -> {\n+            test.setTestClassesDirs(testSourceSet.getOutput().getClassesDirs());\n+            test.setClasspath(testSourceSet.getRuntimeClasspath());\n+        });\n+\n+        // create a compileOnly configuration as others might expect it\n+        project.getConfigurations().create(\"compileOnly\");\n+        project.getDependencies().add(\"testImplementation\", project.project(\":test:framework\"));\n+        EclipseModel eclipse = project.getExtensions().getByType(EclipseModel.class);\n+        eclipse.getClasspath().setSourceSets(Arrays.asList(testSourceSet));\n+        List<Configuration> plusConfigurations = Arrays.asList(\n+            project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME)\n+        );\n+        eclipse.getClasspath().setPlusConfigurations(plusConfigurations);\n+        IdeaModel idea = project.getExtensions().getByType(IdeaModel.class);\n+        idea.getModule()\n+            .setTestSourceDirs(\n+                Stream.of(idea.getModule().getTestSourceDirs(), testSourceSet.getJava().getSrcDirs())\n+                    .flatMap(x -> x.stream())\n+                    .collect(Collectors.toSet())\n+            );\n+        idea.getModule().getScopes().put(\"TEST\", Map.of(\"plus\", plusConfigurations));\n+\n+        BuildParams.withInternalBuild(() -> InternalPrecommitTasks.create(project, false)).orElse(() -> PrecommitTasks.create(project));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzYyMw==", "bodyText": "PrecommitTasks are applied within InternalPrecommitTasks", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526323623", "createdAt": "2020-11-18T18:25:47Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.ExportElasticsearchBuildResourcesTask;\n+import org.elasticsearch.gradle.RepositoriesSetupPlugin;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.elasticsearch.gradle.internal.precommit.InternalPrecommitTasks;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.plugins.JavaPluginExtension;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel;\n+import org.gradle.plugins.ide.idea.model.IdeaModel;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Configures the build to compile tests against Elasticsearch's test framework\n+ * and run REST tests. Use BuildPlugin if you want to build main code as well\n+ * as tests.\n+ */\n+public class StandaloneRestTestPlugin implements Plugin<Project> {\n+    @Override\n+    public void apply(Project project) {\n+        project.getPluginManager().withPlugin(\"elasticsearch.build\", appliedPlugin -> {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.standalone-test \"\n+                    + \"elasticsearch.standalone-rest-test, \"\n+                    + \"and elasticsearch.build \"\n+                    + \"are mutually exclusive\"\n+            );\n+        });\n+\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        project.getPluginManager().apply(JavaBasePlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RepositoriesSetupPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+\n+        project.getTasks().register(\"buildResources\", ExportElasticsearchBuildResourcesTask.class);\n+        ElasticsearchJavaPlugin.configureInputNormalization(project);\n+        ElasticsearchJavaPlugin.configureCompile(project);\n+\n+        project.getExtensions().getByType(JavaPluginExtension.class).setSourceCompatibility(BuildParams.getMinimumRuntimeVersion());\n+        project.getExtensions().getByType(JavaPluginExtension.class).setTargetCompatibility(BuildParams.getMinimumRuntimeVersion());\n+\n+        // only setup tests to build\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        final SourceSet testSourceSet = sourceSets.create(\"test\");\n+\n+        project.getTasks().withType(Test.class).configureEach(test -> {\n+            test.setTestClassesDirs(testSourceSet.getOutput().getClassesDirs());\n+            test.setClasspath(testSourceSet.getRuntimeClasspath());\n+        });\n+\n+        // create a compileOnly configuration as others might expect it\n+        project.getConfigurations().create(\"compileOnly\");\n+        project.getDependencies().add(\"testImplementation\", project.project(\":test:framework\"));\n+        EclipseModel eclipse = project.getExtensions().getByType(EclipseModel.class);\n+        eclipse.getClasspath().setSourceSets(Arrays.asList(testSourceSet));\n+        List<Configuration> plusConfigurations = Arrays.asList(\n+            project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME)\n+        );\n+        eclipse.getClasspath().setPlusConfigurations(plusConfigurations);\n+        IdeaModel idea = project.getExtensions().getByType(IdeaModel.class);\n+        idea.getModule()\n+            .setTestSourceDirs(\n+                Stream.of(idea.getModule().getTestSourceDirs(), testSourceSet.getJava().getSrcDirs())\n+                    .flatMap(x -> x.stream())\n+                    .collect(Collectors.toSet())\n+            );\n+        idea.getModule().getScopes().put(\"TEST\", Map.of(\"plus\", plusConfigurations));\n+\n+        BuildParams.withInternalBuild(() -> InternalPrecommitTasks.create(project, false)).orElse(() -> PrecommitTasks.create(project));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjM5NjAyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/resources/checkstyle_suppressions.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowOTozMVrOH0x65Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowOTozMVrOH0x65Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNTg5Mw==", "bodyText": "address package change", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525105893", "createdAt": "2020-11-17T12:09:31Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/resources/checkstyle_suppressions.xml", "diffHunk": "@@ -49,5 +49,5 @@\n   <suppress files=\"modules[/\\\\]reindex[/\\\\]src[/\\\\]test[/\\\\]java[/\\\\]org[/\\\\]elasticsearch[/\\\\]client[/\\\\]documentation[/\\\\]ReindexDocumentationIT.java\" id=\"SnippetLength\" />\n \n   <!-- Gradle requires inputs to be seriablizable -->\n-  <suppress files=\"buildSrc[/\\\\]src[/\\\\]main[/\\\\]java[/\\\\]org[/\\\\]elasticsearch[/\\\\]gradle[/\\\\]precommit[/\\\\]TestingConventionRule.java\" checks=\"RegexpSinglelineJava\" />\n+  <suppress files=\"buildSrc[/\\\\]src[/\\\\]main[/\\\\]java[/\\\\]org[/\\\\]elasticsearch[/\\\\]gradle[/\\\\]internal[/\\\\]precommit[/\\\\]TestingConventionRule.java\" checks=\"RegexpSinglelineJava\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjM5ODAxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/testKit/testingConventions/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowOTo1OVrOH0x8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjowOTo1OVrOH0x8BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNjE4MQ==", "bodyText": "we only wanna test the testing convention plugin here", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525106181", "createdAt": "2020-11-17T12:09:59Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/testKit/testingConventions/build.gradle", "diffHunk": "@@ -4,7 +4,7 @@ plugins {\n \n allprojects {\n   apply plugin: 'java'\n-  apply plugin: 'elasticsearch.build'\n+  apply plugin: org.elasticsearch.gradle.internal.precommit.TestingConventionsPrecommitPlugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDg4MzY0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/info/BuildParams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDozNTo1N1rOH1KZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNTo1OFrOH18QMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjg2OQ==", "bodyText": "Shouldn't this be true?", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525506869", "createdAt": "2020-11-17T20:35:57Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/info/BuildParams.java", "diffHunk": "@@ -154,6 +154,36 @@ private static String propertyName(String methodName) {\n         return propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);\n     }\n \n+    public static InternalMarker withInternalBuild(Runnable configBlock) {\n+        if (isInternal()) {\n+            configBlock.run();\n+            return InternalMarker.INTERNAL;\n+        } else {\n+            return InternalMarker.EXTERNAL;\n+        }\n+    }\n+\n+    public enum InternalMarker {\n+        INTERNAL(false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzc2MQ==", "bodyText": "true, fixed", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526323761", "createdAt": "2020-11-18T18:25:58Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/info/BuildParams.java", "diffHunk": "@@ -154,6 +154,36 @@ private static String propertyName(String methodName) {\n         return propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);\n     }\n \n+    public static InternalMarker withInternalBuild(Runnable configBlock) {\n+        if (isInternal()) {\n+            configBlock.run();\n+            return InternalMarker.INTERNAL;\n+        } else {\n+            return InternalMarker.EXTERNAL;\n+        }\n+    }\n+\n+    public enum InternalMarker {\n+        INTERNAL(false),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjg2OQ=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDkyMjAyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo0NToyNVrOH1KxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyOTowMlrOH18X2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMzAxNQ==", "bodyText": "I would comment above but GitHub sucks. We should similarly wrap all the isModule stuff above in this check. For external projects it will always be a plugin, not a module, so we shouldn't accidentally treat it as such if an external author incidentally uses conflicting project naming conventions.", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525513015", "createdAt": "2020-11-17T20:45:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "diffHunk": "@@ -108,35 +108,38 @@ class PluginBuildPlugin implements Plugin<Project> {\n             }\n         }\n \n-        // We've ported this from multiple build scripts where we see this pattern into\n-        // an extension method as a first step of consolidation.\n-        // We might want to port this into a general pattern later on.\n-        project.ext.addQaCheckDependencies = {\n-            project.afterEvaluate {\n-                // let check depend on check tasks of qa sub-projects\n-                def checkTaskProvider = project.tasks.named(\"check\")\n-                def qaSubproject = project.subprojects.find { it.path == project.path + \":qa\" }\n-                if(qaSubproject) {\n-                    qaSubproject.subprojects.each {p ->\n-                        checkTaskProvider.configure {it.dependsOn(p.path + \":check\") }\n+        BuildParams.withInternalBuild {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTcyMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526325721", "createdAt": "2020-11-18T18:29:02Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "diffHunk": "@@ -108,35 +108,38 @@ class PluginBuildPlugin implements Plugin<Project> {\n             }\n         }\n \n-        // We've ported this from multiple build scripts where we see this pattern into\n-        // an extension method as a first step of consolidation.\n-        // We might want to port this into a general pattern later on.\n-        project.ext.addQaCheckDependencies = {\n-            project.afterEvaluate {\n-                // let check depend on check tasks of qa sub-projects\n-                def checkTaskProvider = project.tasks.named(\"check\")\n-                def qaSubproject = project.subprojects.find { it.path == project.path + \":qa\" }\n-                if(qaSubproject) {\n-                    qaSubproject.subprojects.each {p ->\n-                        checkTaskProvider.configure {it.dependsOn(p.path + \":check\") }\n+        BuildParams.withInternalBuild {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMzAxNQ=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA4MjQ5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersPrecommitPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMjowMlrOH1MTRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODo1M1rOH18Xfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODExOA==", "bodyText": "I'd prefer we just stick with the slightly more verbose streams api here than rely on internal Gradle util classes. Or introduce our own util method.", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525538118", "createdAt": "2020-11-17T21:32:02Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersPrecommitPlugin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.provider.ProviderFactory;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.util.CollectionUtils;\n+\n+import javax.inject.Inject;\n+\n+public class LicenseHeadersPrecommitPlugin extends PrecommitPlugin {\n+\n+    private final ProviderFactory providerFactory;\n+\n+    @Inject\n+    public LicenseHeadersPrecommitPlugin(ProviderFactory providerFactory) {\n+        this.providerFactory = providerFactory;\n+    }\n+\n+    @Override\n+    public TaskProvider<? extends Task> createTask(Project project) {\n+        return project.getTasks().register(\"licenseHeaders\", LicenseHeadersTask.class, licenseHeadersTask -> {\n+            licenseHeadersTask.getSourceFolders().addAll(providerFactory.provider(() -> {\n+                final SourceSetContainer sourceSets = GradleUtils.getJavaSourceSets(project);\n+                return CollectionUtils.collect(sourceSets, sourceSet -> sourceSet.getAllJava());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTYzMQ==", "bodyText": "For now kept this to be groovy so reverted this change", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526325631", "createdAt": "2020-11-18T18:28:53Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersPrecommitPlugin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.provider.ProviderFactory;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.util.CollectionUtils;\n+\n+import javax.inject.Inject;\n+\n+public class LicenseHeadersPrecommitPlugin extends PrecommitPlugin {\n+\n+    private final ProviderFactory providerFactory;\n+\n+    @Inject\n+    public LicenseHeadersPrecommitPlugin(ProviderFactory providerFactory) {\n+        this.providerFactory = providerFactory;\n+    }\n+\n+    @Override\n+    public TaskProvider<? extends Task> createTask(Project project) {\n+        return project.getTasks().register(\"licenseHeaders\", LicenseHeadersTask.class, licenseHeadersTask -> {\n+            licenseHeadersTask.getSourceFolders().addAll(providerFactory.provider(() -> {\n+                final SourceSetContainer sourceSets = GradleUtils.getJavaSourceSets(project);\n+                return CollectionUtils.collect(sourceSets, sourceSet -> sourceSet.getAllJava());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODExOA=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTEwNTQxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestPlugin.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozODo1MFrOH1MhJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozMjo0NVrOH18g7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTY2OA==", "bodyText": "Can we go ahead and port this to Java too?", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525541668", "createdAt": "2020-11-17T21:38:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestPlugin.groovy", "diffHunk": "@@ -20,12 +20,10 @@\n package org.elasticsearch.gradle.test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyODA0Ng==", "bodyText": "unfortunately we can't at the moment. Whats blocking porting most groovy classes here to java is the AntTask class and classes inheriting this one. It makes use of groovys ant builder. I'm sure we can rewrite the LicenseHeadersTask task in a way to not rely on ant under the hood and then move most of the precommit stuff over to plain java. But not as part of this PR", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526328046", "createdAt": "2020-11-18T18:32:45Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestPlugin.groovy", "diffHunk": "@@ -20,12 +20,10 @@\n package org.elasticsearch.gradle.test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTY2OA=="}, "originalCommit": {"oid": "7f3a76ad0a6eacf5dfe41747301be95972f79638"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2917, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}