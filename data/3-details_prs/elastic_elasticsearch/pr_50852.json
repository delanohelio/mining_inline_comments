{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDMyMjEx", "number": 50852, "title": "[ML][Inference] PUT API", "bodyText": "This adds the PUT API for creating trained models that support our format.\nThis includes\n\nHLRC change for the API\nAPI creation\nValidations of model format and call", "createdAt": "2020-01-10T12:38:48Z", "url": "https://github.com/elastic/elasticsearch/pull/50852", "merged": true, "mergeCommit": {"oid": "4cecb7a5be019bd83d3257018a05cb5487320a0e"}, "closed": true, "closedAt": "2020-01-11T21:02:57Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb49xo7gH2gAyMzYxNDMyMjExOjViNWQyMTI3ZWMxZWExZWVmYjdlOTVmNDU5NDVmNjE0YThkZjY2NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5Y-nyAH2gAyMzYxNDMyMjExOmIxMDJkMzc1YjI2ZjBhMjJlM2IyYmI4MTljMDEwOTFiMzg4ODJjYzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5b5d2127ec1ea1eefb7e95f45945f614a8df6642", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5b5d2127ec1ea1eefb7e95f45945f614a8df6642", "committedDate": "2020-01-10T12:33:07Z", "message": "[ML][Inference] PUT API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206738642c1a8825dfcda7c970790f5205d0a501", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/206738642c1a8825dfcda7c970790f5205d0a501", "committedDate": "2020-01-10T13:15:46Z", "message": "fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "325ec13df2875cbfcf60898e13dd681ec0ef7e5b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/325ec13df2875cbfcf60898e13dd681ec0ef7e5b", "committedDate": "2020-01-10T13:45:52Z", "message": "adding compression logic to hlrc for inference definitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f2e5fef6a83661fd1fb32664cfd425210e297f", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/48f2e5fef6a83661fd1fb32664cfd425210e297f", "committedDate": "2020-01-10T14:36:05Z", "message": "fixing yaml test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/f04193f245dfe487e807961c6fbfba339f0c934a", "committedDate": "2020-01-10T15:46:02Z", "message": "fixing yaml tests more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTE1Nzg1", "url": "https://github.com/elastic/elasticsearch/pull/50852#pullrequestreview-341515785", "createdAt": "2020-01-11T10:24:14Z", "commit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMDoyNDoxNFrOFclJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMTozNzo0MlrOFclV7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMzA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get trained model config asynchronously and notifies listener upon completion\n          \n          \n            \n                 * Put trained model config asynchronously and notifiy listener upon completion", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365513043", "createdAt": "2020-01-11T10:24:14Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java", "diffHunk": "@@ -2340,6 +2342,48 @@ public Cancellable getTrainedModelsAsync(GetTrainedModelsRequest request,\n             Collections.emptySet());\n     }\n \n+    /**\n+     * Put trained model config\n+     * <p>\n+     * For additional info\n+     * see <a href=\"TODO\">\n+     *     PUT Trained Model Config documentation</a>\n+     *\n+     * @param request The {@link PutTrainedModelRequest}\n+     * @param options Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return {@link PutTrainedModelResponse} response object\n+     */\n+    public PutTrainedModelResponse putTrainedModel(PutTrainedModelRequest request, RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(request,\n+            MLRequestConverters::putTrainedModel,\n+            options,\n+            PutTrainedModelResponse::fromXContent,\n+            Collections.emptySet());\n+    }\n+\n+    /**\n+     * Get trained model config asynchronously and notifies listener upon completion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMzQ1NA==", "bodyText": "I think inflate isn't called anywhere apart from InferenceToXContentCompressorTests. If it goes SimpleBoundedInputStream could also be removed?", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365513454", "createdAt": "2020-01-11T10:33:10Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/InferenceToXContentCompressor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.ml.inference;\n+\n+import org.elasticsearch.common.CheckedFunction;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+/**\n+ * Collection of helper methods. Similar to CompressedXContent, but this utilizes GZIP.\n+ */\n+public final class InferenceToXContentCompressor {\n+    private static final int BUFFER_SIZE = 4096;\n+    private static final long MAX_INFLATED_BYTES = 1_000_000_000; // 1 gb maximum\n+\n+    private InferenceToXContentCompressor() {}\n+\n+    public static <T extends ToXContentObject> String deflate(T objectToCompress) throws IOException {\n+        BytesReference reference = XContentHelper.toXContent(objectToCompress, XContentType.JSON, false);\n+        return deflate(reference);\n+    }\n+\n+    public static <T> T inflate(String compressedString,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMzYwNQ==", "bodyText": "createTime can't be null on the server side class. Are we going to set createTime automatically on PUT if not set?", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365513605", "createdAt": "2020-01-11T10:36:54Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -111,7 +112,7 @@ public static TrainedModelConfig fromXContent(XContentParser parser) throws IOEx\n         this.modelId = modelId;\n         this.createdBy = createdBy;\n         this.version = version;\n-        this.createTime = Instant.ofEpochMilli(createTime.toEpochMilli());\n+        this.createTime = createTime == null ? null : Instant.ofEpochMilli(createTime.toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNDU4Ng==", "bodyText": "validate() can only be called once on PUT as the builder will set these fields so if called on a built config it will error. Maybe add a isCreateTime flag or similar.\nPutJobAction has the same issue and does the validation of create time settings in the action", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365514586", "createdAt": "2020-01-11T11:02:57Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -466,51 +488,89 @@ public Builder setLicenseLevel(String licenseLevel) {\n             return this;\n         }\n \n-        // TODO move to REST level instead of here in the builder\n-        public void validate() {\n+        /**\n+         * Runs validations against the builder.\n+         * @return The current builder object if validations are successful\n+         * @throws ActionRequestValidationException when there are validation failures.\n+         */\n+        public Builder validate() {\n             // We require a definition to be available here even though it will be stored in a different doc\n-            ExceptionsHelper.requireNonNull(definition, DEFINITION);\n-            ExceptionsHelper.requireNonNull(modelId, MODEL_ID);\n-\n-            if (MlStrings.isValidId(modelId) == false) {\n-                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, MODEL_ID.getPreferredName(), modelId));\n+            ActionRequestValidationException validationException = null;\n+            if (definition == null) {\n+                validationException = addValidationError(\"[\" + DEFINITION.getPreferredName() + \"] must not be null.\", validationException);\n+            }\n+            if (modelId == null) {\n+                validationException = addValidationError(\"[\" + MODEL_ID.getPreferredName() + \"] must not be null.\", validationException);\n             }\n \n-            if (MlStrings.hasValidLengthForId(modelId) == false) {\n-                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.ID_TOO_LONG,\n-                    MODEL_ID.getPreferredName(),\n+            if (modelId != null && MlStrings.isValidId(modelId) == false) {\n+                validationException = addValidationError(Messages.getMessage(Messages.INVALID_ID,\n+                    TrainedModelConfig.MODEL_ID.getPreferredName(),\n+                    modelId),\n+                    validationException);\n+            }\n+            if (modelId != null && MlStrings.hasValidLengthForId(modelId) == false) {\n+                validationException = addValidationError(Messages.getMessage(Messages.ID_TOO_LONG,\n+                    TrainedModelConfig.MODEL_ID.getPreferredName(),\n                     modelId,\n-                    MlStrings.ID_LENGTH_LIMIT));\n+                    MlStrings.ID_LENGTH_LIMIT), validationException);\n+            }\n+            List<String> badTags = tags.stream()\n+                .filter(tag -> (MlStrings.isValidId(tag) && MlStrings.hasValidLengthForId(tag)) == false)\n+                .collect(Collectors.toList());\n+            if (badTags.isEmpty() == false) {\n+                validationException = addValidationError(Messages.getMessage(Messages.INFERENCE_INVALID_TAGS,\n+                    badTags,\n+                    MlStrings.ID_LENGTH_LIMIT),\n+                    validationException);\n+            }\n+\n+            for(String tag : tags) {\n+                if (tag.equals(modelId)) {\n+                    validationException = addValidationError(\"none of the tags must equal the model_id\", validationException);\n+                    break;\n+                }\n+            }\n+\n+            validationException = checkIllegalSetting(version, VERSION.getPreferredName(), validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNDc1Mw==", "bodyText": "I scrolled down \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365514753", "createdAt": "2020-01-11T11:06:21Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -111,7 +112,7 @@ public static TrainedModelConfig fromXContent(XContentParser parser) throws IOEx\n         this.modelId = modelId;\n         this.createdBy = createdBy;\n         this.version = version;\n-        this.createTime = Instant.ofEpochMilli(createTime.toEpochMilli());\n+        this.createTime = createTime == null ? null : Instant.ofEpochMilli(createTime.toEpochMilli());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMzYwNQ=="}, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNTQ3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"  \\\"created_by\\\": \\\"es_test\\\",\\n\" +\n          \n          \n            \n                    \"  \\\"created_by\\\": \\\"benwtrent\\\",\\n\" +\n          \n      \n    \n    \n  \n\nTake the glory dude", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365515479", "createdAt": "2020-01-11T11:21:39Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -518,38 +511,38 @@ public void testSimulateLangIdent() {\n         \"  }\\n\" +\n         \"}\";\n \n-    private static String buildClassificationModelDoc() throws IOException {\n-        String compressed =\n-            InferenceToXContentCompressor.deflate(new BytesArray(CLASSIFICATION_DEFINITION.getBytes(StandardCharsets.UTF_8)));\n-        return modelDocString(compressed, \"test_classification\");\n+    private TrainedModelConfig buildClassificationModel() throws IOException {\n+        try (XContentParser parser = XContentHelper.createParser(xContentRegistry(),\n+            DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n+            new BytesArray(CLASSIFICATION_CONFIG),\n+            XContentType.JSON)) {\n+            return TrainedModelConfig.LENIENT_PARSER.apply(parser, null).build();\n+        }\n     }\n \n-    private static String buildRegressionModelDoc() throws IOException {\n-        String compressed = InferenceToXContentCompressor.deflate(new BytesArray(REGRESSION_DEFINITION.getBytes(StandardCharsets.UTF_8)));\n-        return modelDocString(compressed, \"test_regression\");\n+    private TrainedModelConfig buildRegressionModel() throws IOException {\n+        try (XContentParser parser = XContentHelper.createParser(xContentRegistry(),\n+            DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n+            new BytesArray(REGRESSION_CONFIG),\n+            XContentType.JSON)) {\n+            return TrainedModelConfig.LENIENT_PARSER.apply(parser, null).build();\n+        }\n     }\n \n-    private static String modelDocString(String compressedDefinition, String modelId) {\n-        return \"\" +\n-            \"{\" +\n-            \"\\\"model_id\\\": \\\"\" + modelId + \"\\\",\\n\" +\n-            \"\\\"doc_num\\\": 0,\\n\" +\n-            \"\\\"doc_type\\\": \\\"trained_model_definition_doc\\\",\\n\" +\n-            \"  \\\"compression_version\\\": \" + 1 + \",\\n\" +\n-            \"  \\\"total_definition_length\\\": \" + compressedDefinition.length() + \",\\n\" +\n-            \"  \\\"definition_length\\\": \" + compressedDefinition.length() + \",\\n\" +\n-            \"\\\"definition\\\": \\\"\" + compressedDefinition + \"\\\"\\n\" +\n-            \"}\";\n+    @Override\n+    protected NamedXContentRegistry xContentRegistry() {\n+        return new NamedXContentRegistry(new MlInferenceNamedXContentProvider().getNamedXContentParsers());\n     }\n \n     private static final String CLASSIFICATION_CONFIG = \"\" +\n         \"{\\n\" +\n         \"  \\\"model_id\\\": \\\"test_classification\\\",\\n\" +\n         \"  \\\"input\\\":{\\\"field_names\\\":[\\\"col1\\\",\\\"col2\\\",\\\"col3\\\",\\\"col4\\\"]},\" +\n         \"  \\\"description\\\": \\\"test model for classification\\\",\\n\" +\n+        \"  \\\"definition\\\": \" + CLASSIFICATION_DEFINITION + \",\"+\n         \"  \\\"version\\\": \\\"8.0.0\\\",\\n\" +\n         \"  \\\"license_level\\\": \\\"platinum\\\",\\n\" +\n-        \"  \\\"created_by\\\": \\\"benwtrent\\\",\\n\" +\n+        \"  \\\"created_by\\\": \\\"es_test\\\",\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNjAzMA==", "bodyText": "I thought created by would be the users name (if security is enabled) but now I realise not. Maybe api rather than user. Or api_user. Our included models are createdBy: ml_admin", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365516030", "createdAt": "2020-01-11T11:31:43Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportPutTrainedModelAction.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.action;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.license.License;\n+import org.elasticsearch.license.LicenseUtils;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.XPackField;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction.Request;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction.Response;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.inference.persistence.InferenceIndexConstants;\n+import org.elasticsearch.xpack.core.ml.job.messages.Messages;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.inference.persistence.TrainedModelProvider;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.core.ClientHelper.ML_ORIGIN;\n+import static org.elasticsearch.xpack.core.ClientHelper.executeAsyncWithOrigin;\n+\n+public class TransportPutTrainedModelAction extends TransportMasterNodeAction<Request, Response> {\n+\n+    private final TrainedModelProvider trainedModelProvider;\n+    private final XPackLicenseState licenseState;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private final Client client;\n+\n+    @Inject\n+    public TransportPutTrainedModelAction(TransportService transportService, ClusterService clusterService,\n+                                          ThreadPool threadPool, XPackLicenseState licenseState, ActionFilters actionFilters,\n+                                          IndexNameExpressionResolver indexNameExpressionResolver, Client client,\n+                                          TrainedModelProvider trainedModelProvider, NamedXContentRegistry xContentRegistry) {\n+        super(PutTrainedModelAction.NAME, transportService, clusterService, threadPool, actionFilters, Request::new,\n+            indexNameExpressionResolver);\n+        this.licenseState = licenseState;\n+        this.trainedModelProvider = trainedModelProvider;\n+        this.xContentRegistry = xContentRegistry;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    protected String executor() {\n+        return ThreadPool.Names.SAME;\n+    }\n+\n+    @Override\n+    protected Response read(StreamInput in) throws IOException {\n+        return new Response(in);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task,\n+                                   PutTrainedModelAction.Request request,\n+                                   ClusterState state,\n+                                   ActionListener<Response> listener) {\n+        try {\n+            request.getTrainedModelConfig().ensureParsedDefinition(xContentRegistry);\n+            request.getTrainedModelConfig().getModelDefinition().getTrainedModel().validate();\n+        } catch (IOException ex) {\n+            listener.onFailure(ExceptionsHelper.badRequestException(\"Failed to parse definition for [{}]\",\n+                ex,\n+                request.getTrainedModelConfig().getModelId()));\n+            return;\n+        } catch (ElasticsearchException ex) {\n+            listener.onFailure(ExceptionsHelper.badRequestException(\"Definition for [{}] has validation failures.\",\n+                ex,\n+                request.getTrainedModelConfig().getModelId()));\n+            return;\n+        }\n+\n+        TrainedModelConfig trainedModelConfig = new TrainedModelConfig.Builder(request.getTrainedModelConfig())\n+            .setVersion(Version.CURRENT)\n+            .setCreateTime(Instant.now())\n+            .setCreatedBy(\"user\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxNjI3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"xpack_ml_put_data_frame_analytics_action\";\n          \n          \n            \n                    return \"xpack_ml_put_trained_model_action\";", "url": "https://github.com/elastic/elasticsearch/pull/50852#discussion_r365516270", "createdAt": "2020-01-11T11:37:42Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/inference/RestPutTrainedModelAction.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.inference;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.ml.MachineLearning;\n+\n+import java.io.IOException;\n+\n+public class RestPutTrainedModelAction extends BaseRestHandler {\n+\n+    public RestPutTrainedModelAction(RestController controller) {\n+        controller.registerHandler(RestRequest.Method.PUT,\n+            MachineLearning.BASE_PATH + \"inference/{\" + TrainedModelConfig.MODEL_ID.getPreferredName() + \"}\",\n+            this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"xpack_ml_put_data_frame_analytics_action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04193f245dfe487e807961c6fbfba339f0c934a"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b102d375b26f0a22e3b2bb819c01091b38882cc4", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b102d375b26f0a22e3b2bb819c01091b38882cc4", "committedDate": "2020-01-11T20:14:44Z", "message": "addressing PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3763, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}