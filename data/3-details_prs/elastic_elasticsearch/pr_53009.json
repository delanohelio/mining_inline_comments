{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDI2MTYz", "number": 53009, "title": "Add Clear Cache API for Searchable Snapshots", "bodyText": "This pull request adds an API to clear the cache used for searchable snapshots:\nPOST /_searchable_snapshots/cache/clear\nPOST <index>/_searchable_snapshots/cache/clear\n\nThis API is useful in tests or to simply free disk space if needed. Note that this API does not clear cache stats.\nRelates #50999", "createdAt": "2020-03-02T14:48:33Z", "url": "https://github.com/elastic/elasticsearch/pull/53009", "merged": true, "mergeCommit": {"oid": "d713b9edf5cda5d491c1cd13203cc51519e55d77"}, "closed": true, "closedAt": "2020-03-03T12:14:53Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJu1HZgH2gAyMzgyNDI2MTYzOjU3OTM3YTMxYzc4MWM4NjI1ZTZkNTYxOGE3ODYyYjQzNTdjYTdjMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKAGO8AH2gAyMzgyNDI2MTYzOjcwMjFhZjFlNTUyNWYwZDNlZWFmNDk4YzIzYTgxNjIyNGMyNWQyYzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/57937a31c781c8625e6d5618a7862b4357ca7c1f", "committedDate": "2020-03-02T14:45:03Z", "message": "Add Clear Cache API for Searchable Snapshots"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjgwODg0", "url": "https://github.com/elastic/elasticsearch/pull/53009#pullrequestreview-367280884", "createdAt": "2020-03-02T15:19:34Z", "commit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyMjo1MlrOFwjglQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozMDozN1rOFwj0-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1Nzc0OQ==", "bodyText": "Maybe unwrapCacheDirectory to be a bit more specific about how far we are unwrapping?\n(I realise this code existed beforehand, but I only just thought of this)", "url": "https://github.com/elastic/elasticsearch/pull/53009#discussion_r386457749", "createdAt": "2020-03-02T15:22:52Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/AbstractTransportSearchableSnapshotsAction.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.action;\n+\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.FilterDirectory;\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.broadcast.BroadcastRequest;\n+import org.elasticsearch.action.support.broadcast.BroadcastResponse;\n+import org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardsIterator;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.indices.IndicesService;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.searchablesnapshots.InMemoryNoOpCommitDirectory;\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.elasticsearch.index.IndexModule.INDEX_STORE_TYPE_SETTING;\n+import static org.elasticsearch.xpack.searchablesnapshots.SearchableSnapshotRepository.SNAPSHOT_CACHE_ENABLED_SETTING;\n+import static org.elasticsearch.xpack.searchablesnapshots.SearchableSnapshotRepository.SNAPSHOT_DIRECTORY_FACTORY_KEY;\n+\n+public abstract class AbstractTransportSearchableSnapshotsAction\n+    <Request extends BroadcastRequest<Request>, Response extends BroadcastResponse, ShardOperationResult extends Writeable>\n+    extends TransportBroadcastByNodeAction<Request, Response, ShardOperationResult> {\n+\n+    private final IndicesService indicesService;\n+\n+    AbstractTransportSearchableSnapshotsAction(String actionName, ClusterService clusterService, TransportService transportService,\n+                                               ActionFilters actionFilters, IndexNameExpressionResolver resolver,\n+                                               Writeable.Reader<Request> request, String executor, IndicesService indicesService) {\n+        super(actionName, clusterService, transportService, actionFilters, resolver, request, executor);\n+        this.indicesService = indicesService;\n+    }\n+\n+    AbstractTransportSearchableSnapshotsAction(String actionName, ClusterService clusterService, TransportService transportService,\n+                                               ActionFilters actionFilters, IndexNameExpressionResolver resolver,\n+                                               Writeable.Reader<Request> request, String executor, IndicesService indicesService,\n+                                               boolean canTripCircuitBreaker) {\n+        super(actionName, clusterService, transportService, actionFilters, resolver, request, executor, canTripCircuitBreaker);\n+        this.indicesService = indicesService;\n+    }\n+\n+    @Override\n+    protected ClusterBlockException checkGlobalBlock(ClusterState state, Request request) {\n+        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);\n+    }\n+\n+    @Override\n+    protected ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] indices) {\n+        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indices);\n+    }\n+\n+    @Override\n+    protected ShardsIterator shards(ClusterState state, Request request, String[] concreteIndices) {\n+        final List<String> searchableSnapshotIndices = new ArrayList<>();\n+        for (String concreteIndex : concreteIndices) {\n+            IndexMetaData indexMetaData = state.metaData().index(concreteIndex);\n+            if (indexMetaData != null) {\n+                Settings indexSettings = indexMetaData.getSettings();\n+                if (INDEX_STORE_TYPE_SETTING.get(indexSettings).equals(SNAPSHOT_DIRECTORY_FACTORY_KEY)) {\n+                    if (SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings)) {\n+                        searchableSnapshotIndices.add(concreteIndex);\n+                    }\n+                }\n+            }\n+        }\n+        if (searchableSnapshotIndices.isEmpty()) {\n+            throw new ResourceNotFoundException(\"No searchable snapshots indices found\");\n+        }\n+        return state.routingTable().allShards(searchableSnapshotIndices.toArray(new String[0]));\n+    }\n+\n+    @Override\n+    protected ShardOperationResult shardOperation(Request request, ShardRouting shardRouting) throws IOException {\n+        final IndexShard indexShard = indicesService.indexServiceSafe(shardRouting.index()).getShard(shardRouting.id());\n+        final CacheDirectory cacheDirectory = unwrap(indexShard.store().directory());\n+        assert cacheDirectory != null;\n+        assert cacheDirectory.getShardId().equals(shardRouting.shardId());\n+        return executeShardOperation(request, shardRouting, cacheDirectory);\n+    }\n+\n+    protected abstract ShardOperationResult executeShardOperation(Request request, ShardRouting shardRouting,\n+                                                                  CacheDirectory cacheDirectory) throws IOException;\n+\n+    @Nullable\n+    private static CacheDirectory unwrap(Directory dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDA1Mw==", "bodyText": "I think we should have cache in the  name here somewhere. I tried a couple of different word orders and none was perfect. Maybe this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"clear_searchable_snapshots_indices_action\";\n          \n          \n            \n                    return \"clear_indices_searchable_snapshots_cache_action\";", "url": "https://github.com/elastic/elasticsearch/pull/53009#discussion_r386460053", "createdAt": "2020-03-02T15:26:14Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/rest/RestClearSearchableSnapshotsCacheAction.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.rest;\n+\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.xpack.searchablesnapshots.action.ClearSearchableSnapshotsCacheAction;\n+import org.elasticsearch.xpack.searchablesnapshots.action.ClearSearchableSnapshotsCacheRequest;\n+\n+import java.util.List;\n+\n+public class RestClearSearchableSnapshotsCacheAction extends BaseRestHandler {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(RestRequest.Method.POST, \"/_searchable_snapshots/cache/clear\"),\n+            new Route(RestRequest.Method.POST, \"/{index}/_searchable_snapshots/cache/clear\")\n+        );\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"clear_searchable_snapshots_indices_action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDc2MQ==", "bodyText": "nit: seems unnecessary,  and we use the fully-qualified  name below.", "url": "https://github.com/elastic/elasticsearch/pull/53009#discussion_r386460761", "createdAt": "2020-03-02T15:27:16Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/AbstractSearchableSnapshotsRestTestCase.java", "diffHunk": "@@ -61,7 +64,7 @@ private void runSearchableSnapshotsTest(SearchableSnapshotsTestCaseBody testCase\n \n         logger.info(\"creating index [{}]\", indexName);\n         createIndex(indexName, Settings.builder()\n-            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards)\n+            .put(SETTING_NUMBER_OF_SHARDS, numberOfShards)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2Mjk3MA==", "bodyText": "I wonder whether it'd be better to do this whole test in the YAML suite. I think that's possible. WDYT?", "url": "https://github.com/elastic/elasticsearch/pull/53009#discussion_r386462970", "createdAt": "2020-03-02T15:30:37Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/AbstractSearchableSnapshotsRestTestCase.java", "diffHunk": "@@ -162,6 +161,51 @@ public void testCloseAndReopen() throws Exception {\n         });\n     }\n \n+    public void testStats() throws Exception {\n+        runSearchableSnapshotsTest((restoredIndexName, numDocs) -> {\n+            final Map<String, Object> stats = searchableSnapshotStats(restoredIndexName);\n+            assertThat(\"Expected searchable snapshots stats for [\" + restoredIndexName + ']', stats.size(), greaterThan(0));\n+\n+            final int nbShards = Integer.valueOf(extractValue(indexSettings(restoredIndexName), IndexMetaData.SETTING_NUMBER_OF_SHARDS));\n+            assertThat(\"Expected searchable snapshots stats for \" + nbShards + \" shards but got \" + stats, stats.size(), equalTo(nbShards));\n+        });\n+    }\n+\n+    public void testClearCache() throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        final Function<Map<?, ?>, Long> sumCachedBytesWritten = stats -> stats.values().stream()\n+            .filter(o -> o instanceof List)\n+            .flatMap(o -> ((List) o).stream())\n+            .filter(o -> o instanceof Map)\n+            .map(o -> ((Map<?,?>)o).get(\"files\"))\n+            .filter(o -> o instanceof List)\n+            .flatMap(o -> ((List) o).stream())\n+            .filter(o -> o instanceof Map)\n+            .map(o -> ((Map<?,?>)o).get(\"cached_bytes_written\"))\n+            .filter(o -> o instanceof Map)\n+            .map(o -> ((Map<?,?>)o).get(\"sum\"))\n+            .mapToLong(o -> ((Number) o).longValue())\n+            .sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57937a31c781c8625e6d5618a7862b4357ca7c1f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544f0565c315c317585db9961cb654f5e81efcac", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/544f0565c315c317585db9961cb654f5e81efcac", "committedDate": "2020-03-02T15:54:06Z", "message": "unwrapCacheDirectory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ce506f4605ebf0fe669db0a74e6c2e61fc765a", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1ce506f4605ebf0fe669db0a74e6c2e61fc765a", "committedDate": "2020-03-02T15:54:37Z", "message": "clear_indices_searchable_snapshots_cache_action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "244b89e1278f52e5ff2d1f7b3b550b7cafaf56f6", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/244b89e1278f52e5ff2d1f7b3b550b7cafaf56f6", "committedDate": "2020-03-02T15:55:26Z", "message": "Qualify index nb of shard setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587819a2c8cbdd0048c4c4c24a762367ea0e5969", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/587819a2c8cbdd0048c4c4c24a762367ea0e5969", "committedDate": "2020-03-02T16:03:00Z", "message": "Ru same query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7021af1e5525f0d3eeaf498c23a816224c25d2c1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/7021af1e5525f0d3eeaf498c23a816224c25d2c1", "committedDate": "2020-03-03T10:52:08Z", "message": "Merge branch 'feature/searchable-snapshots' into add-clear-cache-api"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1894, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}