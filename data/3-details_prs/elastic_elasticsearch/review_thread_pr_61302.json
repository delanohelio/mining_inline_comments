{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Nzc1ODUy", "number": 61302, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1OTozMVrOEaEdKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNTowMFrOEaEpow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcxNDM0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1OTozMVrOHDQ4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1OTozMVrOHDQ4rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NDQyOQ==", "bodyText": "There are only a handful of usages of this ctor, so can we please convert the existing usages so we don't now have 2?", "url": "https://github.com/elastic/elasticsearch/pull/61302#discussion_r473184429", "createdAt": "2020-08-19T16:59:31Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java", "diffHunk": "@@ -47,10 +47,17 @@\n     final Policy untrusted;\n     final Policy system;\n     final PermissionCollection dynamic;\n+    final PermissionCollection dataPathPermission;\n     final Map<String,Policy> plugins;\n \n     ESPolicy(Map<String, URL> codebases, PermissionCollection dynamic, Map<String,Policy> plugins, boolean filterBadDefaults) {\n+        this(codebases, dynamic, plugins, filterBadDefaults, new Permissions());\n+    }\n+\n+    ESPolicy(Map<String, URL> codebases, PermissionCollection dynamic, Map<String,Policy> plugins, boolean filterBadDefaults,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce84c096292f9a371cd6dc3206426d9828a6844"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcyNzMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/bootstrap/FilePermissionUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMTo0NFrOHDRBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMTo0NFrOHDRBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjcwNA==", "bodyText": "similar comment: can we please modify the few places calling the existing method instead of adding another variant?", "url": "https://github.com/elastic/elasticsearch/pull/61302#discussion_r473186704", "createdAt": "2020-08-19T17:01:44Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/bootstrap/FilePermissionUtils.java", "diffHunk": "@@ -63,25 +63,45 @@ public static void addSingleFilePath(Permissions policy, Path path, String permi\n      */\n     @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n     public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions) throws IOException {\n+        addDirectoryPath(policy, configurationName, path, permissions, false);\n+    }\n+\n+    /**\n+     * Add access to path with direct and/or recursive access. This also creates the directory if it does not exist.\n+     *\n+     * @param policy            current policy to add permissions to\n+     * @param configurationName the configuration name associated with the path (for error messages only)\n+     * @param path              the path itself\n+     * @param permissions       set of file permissions to grant to the path\n+     * @param recursiveAccessOnly   indicates if the permission should provide recursive access to files underneath\n+     */\n+    @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n+    public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce84c096292f9a371cd6dc3206426d9828a6844"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzc0NjI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/bootstrap/FilePermissionUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNTowMFrOHDROXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo1ODoxOFrOHE9m6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTk4Mw==", "bodyText": "Why are we no longer adding the path itself?", "url": "https://github.com/elastic/elasticsearch/pull/61302#discussion_r473189983", "createdAt": "2020-08-19T17:05:00Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/bootstrap/FilePermissionUtils.java", "diffHunk": "@@ -63,25 +63,45 @@ public static void addSingleFilePath(Permissions policy, Path path, String permi\n      */\n     @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n     public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions) throws IOException {\n+        addDirectoryPath(policy, configurationName, path, permissions, false);\n+    }\n+\n+    /**\n+     * Add access to path with direct and/or recursive access. This also creates the directory if it does not exist.\n+     *\n+     * @param policy            current policy to add permissions to\n+     * @param configurationName the configuration name associated with the path (for error messages only)\n+     * @param path              the path itself\n+     * @param permissions       set of file permissions to grant to the path\n+     * @param recursiveAccessOnly   indicates if the permission should provide recursive access to files underneath\n+     */\n+    @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n+    public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions,\n+                                        boolean recursiveAccessOnly) throws IOException {\n         // paths may not exist yet, this also checks accessibility\n         try {\n             Security.ensureDirectoryExists(path);\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to access '\" + configurationName + \"' (\" + path + \")\", e);\n         }\n \n-        // add each path twice: once for itself, again for files underneath it\n-        policy.add(new FilePermission(path.toString(), permissions));\n+        if (recursiveAccessOnly == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce84c096292f9a371cd6dc3206426d9828a6844"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2NTczOQ==", "bodyText": "Can you please add a comment about how we only need to check concrete paths, and so the dir itself just adds an additional check that is overhead?", "url": "https://github.com/elastic/elasticsearch/pull/61302#discussion_r474965739", "createdAt": "2020-08-21T20:58:18Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/bootstrap/FilePermissionUtils.java", "diffHunk": "@@ -63,25 +63,45 @@ public static void addSingleFilePath(Permissions policy, Path path, String permi\n      */\n     @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n     public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions) throws IOException {\n+        addDirectoryPath(policy, configurationName, path, permissions, false);\n+    }\n+\n+    /**\n+     * Add access to path with direct and/or recursive access. This also creates the directory if it does not exist.\n+     *\n+     * @param policy            current policy to add permissions to\n+     * @param configurationName the configuration name associated with the path (for error messages only)\n+     * @param path              the path itself\n+     * @param permissions       set of file permissions to grant to the path\n+     * @param recursiveAccessOnly   indicates if the permission should provide recursive access to files underneath\n+     */\n+    @SuppressForbidden(reason = \"only place where creating Java-9 compatible FilePermission objects is possible\")\n+    public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions,\n+                                        boolean recursiveAccessOnly) throws IOException {\n         // paths may not exist yet, this also checks accessibility\n         try {\n             Security.ensureDirectoryExists(path);\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to access '\" + configurationName + \"' (\" + path + \")\", e);\n         }\n \n-        // add each path twice: once for itself, again for files underneath it\n-        policy.add(new FilePermission(path.toString(), permissions));\n+        if (recursiveAccessOnly == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTk4Mw=="}, "originalCommit": {"oid": "3ce84c096292f9a371cd6dc3206426d9828a6844"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 843, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}