{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5OTU1MDk4", "number": 60502, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzowNzo1NlrOEiG05Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjowMDo1MVrOElIV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTk4ODg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AbstractConfusionMatrixMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzowNzo1N1rOHPyrlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODoyNjoyNVrOHRJITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMTA0Ng==", "bodyText": "Many of these classes return the same thing in getRequiredFields. Consider making it a default method of EvaluationMetric", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r486321046", "createdAt": "2020-09-10T13:07:57Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AbstractConfusionMatrixMetric.java", "diffHunk": "@@ -65,13 +67,19 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         return builder;\n     }\n \n+    @Override\n+    public Set<String> getRequiredFields() {\n+        return Set.of(EvaluationFields.ACTUAL_FIELD.getPreferredName(), EvaluationFields.PREDICTED_PROBABILITY_FIELD.getPreferredName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c27a1000c15439c9db0b169294ff74de4008aba"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzczNzQyMA==", "bodyText": "Many of these classes return the same thing in getRequiredFields\n\nThat's true.\n\nclassification metrics (with the exception of the new AucRoc metric) require actual and predicted\nregression metrics require actual and predicted\noutlier detection metrics require actual and predicted probability\n\n\nConsider making it a default method of EvaluationMetric\n\nThe reason I did not use default is that I didn't want to distinguish any of the analyses. I could re-introduce base abstract classes like ClassificationMetric and put the default there but I don't think it's (so far) worth it.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487737420", "createdAt": "2020-09-14T08:26:25Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AbstractConfusionMatrixMetric.java", "diffHunk": "@@ -65,13 +67,19 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         return builder;\n     }\n \n+    @Override\n+    public Set<String> getRequiredFields() {\n+        return Set.of(EvaluationFields.ACTUAL_FIELD.getPreferredName(), EvaluationFields.PREDICTED_PROBABILITY_FIELD.getPreferredName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMTA0Ng=="}, "originalCommit": {"oid": "0c27a1000c15439c9db0b169294ff74de4008aba"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjAwOTkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/OutlierDetection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxMjozMlrOHPy4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozMjoxOFrOHRJWww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNDI2Nw==", "bodyText": "actual field is a number or bool?\npredicted field is a number?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r486324267", "createdAt": "2020-09-10T13:12:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/OutlierDetection.java", "diffHunk": "@@ -50,30 +51,33 @@ public static OutlierDetection fromXContent(XContentParser parser) {\n         return PARSER.apply(parser, null);\n     }\n \n-    static QueryBuilder actualIsTrueQuery(String actualField) {\n+    public static QueryBuilder actualIsTrueQuery(String actualField) {\n         return QueryBuilders.queryStringQuery(actualField + \": (1 OR true)\");\n     }\n \n     /**\n-     * The field where the actual class is marked up.\n-     * The value of this field is assumed to either be 1 or 0, or true or false.\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to either be 1 or 0, or true or false.\n+     *   fields.getPredictedField() is assumed to be a number in [0.0, 1.0].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c384b15ad75b6b1a2b143a8c19193b49ff4ffca0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0MTEyMw==", "bodyText": "actual field is a number or bool?\n\nIt can either be a number of bool (it was like this from the beginning of Evaluate API).\nHere is the query that select positive docs:\n    public static QueryBuilder actualIsTrueQuery(String actualField) {\n        return QueryBuilders.queryStringQuery(actualField + \": (1 OR true)\");\n    }\n\n\npredicted field is a number?\n\nThere was a mistake in this comment. I've just fixed it.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487741123", "createdAt": "2020-09-14T08:32:18Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/OutlierDetection.java", "diffHunk": "@@ -50,30 +51,33 @@ public static OutlierDetection fromXContent(XContentParser parser) {\n         return PARSER.apply(parser, null);\n     }\n \n-    static QueryBuilder actualIsTrueQuery(String actualField) {\n+    public static QueryBuilder actualIsTrueQuery(String actualField) {\n         return QueryBuilders.queryStringQuery(actualField + \": (1 OR true)\");\n     }\n \n     /**\n-     * The field where the actual class is marked up.\n-     * The value of this field is assumed to either be 1 or 0, or true or false.\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to either be 1 or 0, or true or false.\n+     *   fields.getPredictedField() is assumed to be a number in [0.0, 1.0].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNDI2Nw=="}, "originalCommit": {"oid": "c384b15ad75b6b1a2b143a8c19193b49ff4ffca0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI2NTIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/MlEvaluationNamedXContentProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0NzoxMVrOHRP_tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTozNzoxOFrOHRxZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTkwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            registeredMetricName(Classification.NAME, AbstractAucRoc.NAME),\n          \n          \n            \n                            registeredMetricName(Classification.NAME, AucRoc.NAME),\n          \n      \n    \n    \n  \n\nI am not sure we should randomly choose AbstraceAucRoc here.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487849909", "createdAt": "2020-09-14T11:47:11Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/MlEvaluationNamedXContentProvider.java", "diffHunk": "@@ -163,29 +173,27 @@ public static String registeredMetricName(String evaluationName, String metricNa\n                 RSquared::new),\n \n             // Evaluation metrics results\n-            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n-                registeredMetricName(OutlierDetection.NAME, AucRoc.NAME),\n-                AucRoc.Result::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ScoreByThresholdResult.NAME),\n                 ScoreByThresholdResult::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ConfusionMatrix.NAME),\n                 ConfusionMatrix.Result::new),\n+            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n+                registeredMetricName(Classification.NAME, AbstractAucRoc.NAME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5NzEwNw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488397107", "createdAt": "2020-09-15T05:37:18Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/MlEvaluationNamedXContentProvider.java", "diffHunk": "@@ -163,29 +173,27 @@ public static String registeredMetricName(String evaluationName, String metricNa\n                 RSquared::new),\n \n             // Evaluation metrics results\n-            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n-                registeredMetricName(OutlierDetection.NAME, AucRoc.NAME),\n-                AucRoc.Result::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ScoreByThresholdResult.NAME),\n                 ScoreByThresholdResult::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ConfusionMatrix.NAME),\n                 ConfusionMatrix.Result::new),\n+            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n+                registeredMetricName(Classification.NAME, AbstractAucRoc.NAME),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTkwOQ=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI2ODU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0ODoyMFrOHRQB4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTo0MTo0OFrOHRxe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final ParseField NAME = new ParseField(\"auc_roc\");\n          \n      \n    \n    \n  \n\nI don't think this class should provide this. Either all subclasses respect it and use it (i.e. don't supply their own name), or we should provide it at all.\nThe mix between the two will only cause bugs.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487850466", "createdAt": "2020-09-14T11:48:20Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5ODU4Nw==", "bodyText": "Good spot, a copy-paste error.\nI decided to use the field from AbstractAucRoc everywhere and remove the field from subclasses.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488398587", "createdAt": "2020-09-15T05:41:48Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDQ2Ng=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI2OTQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0ODozN1rOHRQCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTo0Mjo0NlrOHRxgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDYwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public String getName() {\n          \n          \n            \n                    return NAME.getPreferredName();\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487850602", "createdAt": "2020-09-14T11:48:37Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5ODg3Ng==", "bodyText": "I've left this method in the base class but removed it from subclasses.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488398876", "createdAt": "2020-09-15T05:42:46Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDYwMg=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI3NzI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1MDo1NVrOHRQHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTo0NTo0MVrOHRxkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTgyMg==", "bodyText": "As mentioned in the comment on AbstractAucRoc.\nHaving both supply this parsefield name is going to lead to confusion. I think a cleaner abstraction would be that only one supplies the writable and xcontent names.\nI could go either way it being only supplied by the abstract class or only by the concrete class.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487851822", "createdAt": "2020-09-14T11:50:55Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.filter.Filter;\n+import org.elasticsearch.search.aggregations.bucket.nested.Nested;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationFields;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public class AucRoc extends AbstractAucRoc {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5OTg5MA==", "bodyText": "I could go either way it being only supplied by the abstract class or only by the concrete class.\n\nAgree, I chose the former approach (supplied by the abstract class).", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488399890", "createdAt": "2020-09-15T05:45:41Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.filter.Filter;\n+import org.elasticsearch.search.aggregations.bucket.nested.Nested;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationFields;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public class AucRoc extends AbstractAucRoc {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTgyMg=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI4ODEzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1NDowN1rOHRQNjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1Mjo1OVrOHRzQnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (out.getVersion().onOrAfter(Version.CURRENT)) {\n          \n          \n            \n                    if (out.getVersion().onOrAfter(Version.V_8_0_0)) {", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487853454", "createdAt": "2020-09-14T11:54:07Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -109,17 +154,34 @@ public String getWriteableName() {\n \n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n-        out.writeString(actualField);\n-        out.writeString(predictedField);\n+        out.writeString(fields.getActualField());\n+        if (out.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzY3Ng==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488427676", "createdAt": "2020-09-15T06:52:59Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -109,17 +154,34 @@ public String getWriteableName() {\n \n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n-        out.writeString(actualField);\n-        out.writeString(predictedField);\n+        out.writeString(fields.getActualField());\n+        if (out.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzQ1NA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI4ODU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1NDoxNFrOHRQNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1Mjo1M1rOHRzQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (in.getVersion().onOrAfter(Version.CURRENT)) {\n          \n          \n            \n                    if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487853518", "createdAt": "2020-09-14T11:54:14Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -77,8 +122,13 @@ public Classification(String actualField, String predictedField, @Nullable List<\n     }\n \n     public Classification(StreamInput in) throws IOException {\n-        this.actualField = in.readString();\n-        this.predictedField = in.readString();\n+        if (in.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzYzNQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488427635", "createdAt": "2020-09-15T06:52:53Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -77,8 +122,13 @@ public Classification(String actualField, String predictedField, @Nullable List<\n     }\n \n     public Classification(StreamInput in) throws IOException {\n-        this.actualField = in.readString();\n-        this.predictedField = in.readString();\n+        if (in.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzUxOA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI5Mzc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1NTo0NVrOHRQQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1MzoxNlrOHRzRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NDI5Ng==", "bodyText": "See previous comment around abstract writable names vs concrete ones.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487854296", "createdAt": "2020-09-14T11:55:45Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AucRoc.java", "diffHunk": "@@ -58,30 +53,29 @@\n  * When this is used for multi-class classification, it will calculate the ROC\n  * curve of each class versus the rest.\n  */\n-public class AucRoc implements EvaluationMetric {\n+public class AucRoc extends AbstractAucRoc {\n \n     public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzc5OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488427799", "createdAt": "2020-09-15T06:53:16Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AucRoc.java", "diffHunk": "@@ -58,30 +53,29 @@\n  * When this is used for multi-class classification, it will calculate the ROC\n  * curve of each class versus the rest.\n  */\n-public class AucRoc implements EvaluationMetric {\n+public class AucRoc extends AbstractAucRoc {\n \n     public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NDI5Ng=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMxMjY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMToxN1rOHRQcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1NTozNFrOHRzVgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzIyNQ==", "bodyText": "I understand that removing the abstract auc_roc NAME might cause issues here. But the subclasses could supply a concrete version of these results class or the abstract is the thing that supplies the serialization names.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487857225", "createdAt": "2020-09-14T12:01:17Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    protected static double[] percentilesArray(Percentiles percentiles, String errorIfUndefined) {\n+        double[] result = new double[99];\n+        percentiles.forEach(percentile -> {\n+            if (Double.isNaN(percentile.getValue())) {\n+                throw ExceptionsHelper.badRequestException(errorIfUndefined);\n+            }\n+            result[((int) percentile.getPercent()) - 1] = percentile.getValue();\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static List<AucRocPoint> buildAucRocCurve(double[] tpPercentiles, double[] fpPercentiles) {\n+        assert tpPercentiles.length == fpPercentiles.length;\n+        assert tpPercentiles.length == 99;\n+\n+        List<AucRocPoint> aucRocCurve = new ArrayList<>();\n+        aucRocCurve.add(new AucRocPoint(0.0, 0.0, 1.0));\n+        aucRocCurve.add(new AucRocPoint(1.0, 1.0, 0.0));\n+        RateThresholdCurve tpCurve = new RateThresholdCurve(tpPercentiles, true);\n+        RateThresholdCurve fpCurve = new RateThresholdCurve(fpPercentiles, false);\n+        aucRocCurve.addAll(tpCurve.scanPoints(fpCurve));\n+        aucRocCurve.addAll(fpCurve.scanPoints(tpCurve));\n+        Collections.sort(aucRocCurve);\n+        return aucRocCurve;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static double calculateAucScore(List<AucRocPoint> rocCurve) {\n+        // Calculates AUC based on the trapezoid rule\n+        double aucRoc = 0.0;\n+        for (int i = 1; i < rocCurve.size(); i++) {\n+            AucRocPoint left = rocCurve.get(i - 1);\n+            AucRocPoint right = rocCurve.get(i);\n+            aucRoc += (right.fpr - left.fpr) * (right.tpr + left.tpr) / 2;\n+        }\n+        return aucRoc;\n+    }\n+\n+    private static class RateThresholdCurve {\n+\n+        private final double[] percentiles;\n+        private final boolean isTp;\n+\n+        private RateThresholdCurve(double[] percentiles, boolean isTp) {\n+            this.percentiles = percentiles;\n+            this.isTp = isTp;\n+        }\n+\n+        private double getRate(int index) {\n+            return 1 - 0.01 * (index + 1);\n+        }\n+\n+        private double getThreshold(int index) {\n+            return percentiles[index];\n+        }\n+\n+        private double interpolateRate(double threshold) {\n+            int binarySearchResult = Arrays.binarySearch(percentiles, threshold);\n+            if (binarySearchResult >= 0) {\n+                return getRate(binarySearchResult);\n+            } else {\n+                int right = (binarySearchResult * -1) -1;\n+                int left = right - 1;\n+                if (right >= percentiles.length) {\n+                    return 0.0;\n+                } else if (left < 0) {\n+                    return 1.0;\n+                } else {\n+                    double rightRate = getRate(right);\n+                    double leftRate = getRate(left);\n+                    return interpolate(threshold, percentiles[left], leftRate, percentiles[right], rightRate);\n+                }\n+            }\n+        }\n+\n+        private List<AucRocPoint> scanPoints(RateThresholdCurve againstCurve) {\n+            List<AucRocPoint> points = new ArrayList<>();\n+            for (int index = 0; index < percentiles.length; index++) {\n+                double rate = getRate(index);\n+                double scannedThreshold = getThreshold(index);\n+                double againstRate = againstCurve.interpolateRate(scannedThreshold);\n+                AucRocPoint point;\n+                if (isTp) {\n+                    point = new AucRocPoint(rate, againstRate, scannedThreshold);\n+                } else {\n+                    point = new AucRocPoint(againstRate, rate, scannedThreshold);\n+                }\n+                points.add(point);\n+            }\n+            return points;\n+        }\n+    }\n+\n+    public static final class AucRocPoint implements Comparable<AucRocPoint>, ToXContentObject, Writeable {\n+\n+        private final double tpr;\n+        private final double fpr;\n+        private final double threshold;\n+\n+        AucRocPoint(double tpr, double fpr, double threshold) {\n+            this.tpr = tpr;\n+            this.fpr = fpr;\n+            this.threshold = threshold;\n+        }\n+\n+        private AucRocPoint(StreamInput in) throws IOException {\n+            this.tpr = in.readDouble();\n+            this.fpr = in.readDouble();\n+            this.threshold = in.readDouble();\n+        }\n+\n+        @Override\n+        public int compareTo(AucRocPoint o) {\n+            return Comparator.comparingDouble((AucRocPoint p) -> p.threshold).reversed()\n+                .thenComparing(p -> p.fpr)\n+                .thenComparing(p -> p.tpr)\n+                .compare(this, o);\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            out.writeDouble(tpr);\n+            out.writeDouble(fpr);\n+            out.writeDouble(threshold);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(\"tpr\", tpr);\n+            builder.field(\"fpr\", fpr);\n+            builder.field(\"threshold\", threshold);\n+            builder.endObject();\n+            return builder;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            AucRocPoint that = (AucRocPoint) o;\n+            return tpr == that.tpr\n+                && fpr == that.fpr\n+                && threshold == that.threshold;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tpr, fpr, threshold);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Strings.toString(this);\n+        }\n+    }\n+\n+    private static double interpolate(double x, double x1, double y1, double x2, double y2) {\n+        return y1 + (x - x1) * (y2 - y1) / (x2 - x1);\n+    }\n+\n+    public static class Result implements EvaluationMetricResult {\n+\n+        private final double score;\n+        private final List<AucRocPoint> curve;\n+\n+        public Result(double score, List<AucRocPoint> curve) {\n+            this.score = score;\n+            this.curve = Objects.requireNonNull(curve);\n+        }\n+\n+        public Result(StreamInput in) throws IOException {\n+            this.score = in.readDouble();\n+            this.curve = in.readList(AucRocPoint::new);\n+        }\n+\n+        public double getScore() {\n+            return score;\n+        }\n+\n+        public List<AucRocPoint> getCurve() {\n+            return Collections.unmodifiableList(curve);\n+        }\n+\n+        @Override\n+        public String getWriteableName() {\n+            return registeredMetricName(Classification.NAME, NAME);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODkzMQ==", "bodyText": "I left NAME field and  getName method in the base class.\nI would leave the classification prefix in the result though as classification is where auc_roc metric really belongs (outlier_detection can be viewed as just one kind of classification  task).", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488428931", "createdAt": "2020-09-15T06:55:34Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    protected static double[] percentilesArray(Percentiles percentiles, String errorIfUndefined) {\n+        double[] result = new double[99];\n+        percentiles.forEach(percentile -> {\n+            if (Double.isNaN(percentile.getValue())) {\n+                throw ExceptionsHelper.badRequestException(errorIfUndefined);\n+            }\n+            result[((int) percentile.getPercent()) - 1] = percentile.getValue();\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static List<AucRocPoint> buildAucRocCurve(double[] tpPercentiles, double[] fpPercentiles) {\n+        assert tpPercentiles.length == fpPercentiles.length;\n+        assert tpPercentiles.length == 99;\n+\n+        List<AucRocPoint> aucRocCurve = new ArrayList<>();\n+        aucRocCurve.add(new AucRocPoint(0.0, 0.0, 1.0));\n+        aucRocCurve.add(new AucRocPoint(1.0, 1.0, 0.0));\n+        RateThresholdCurve tpCurve = new RateThresholdCurve(tpPercentiles, true);\n+        RateThresholdCurve fpCurve = new RateThresholdCurve(fpPercentiles, false);\n+        aucRocCurve.addAll(tpCurve.scanPoints(fpCurve));\n+        aucRocCurve.addAll(fpCurve.scanPoints(tpCurve));\n+        Collections.sort(aucRocCurve);\n+        return aucRocCurve;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static double calculateAucScore(List<AucRocPoint> rocCurve) {\n+        // Calculates AUC based on the trapezoid rule\n+        double aucRoc = 0.0;\n+        for (int i = 1; i < rocCurve.size(); i++) {\n+            AucRocPoint left = rocCurve.get(i - 1);\n+            AucRocPoint right = rocCurve.get(i);\n+            aucRoc += (right.fpr - left.fpr) * (right.tpr + left.tpr) / 2;\n+        }\n+        return aucRoc;\n+    }\n+\n+    private static class RateThresholdCurve {\n+\n+        private final double[] percentiles;\n+        private final boolean isTp;\n+\n+        private RateThresholdCurve(double[] percentiles, boolean isTp) {\n+            this.percentiles = percentiles;\n+            this.isTp = isTp;\n+        }\n+\n+        private double getRate(int index) {\n+            return 1 - 0.01 * (index + 1);\n+        }\n+\n+        private double getThreshold(int index) {\n+            return percentiles[index];\n+        }\n+\n+        private double interpolateRate(double threshold) {\n+            int binarySearchResult = Arrays.binarySearch(percentiles, threshold);\n+            if (binarySearchResult >= 0) {\n+                return getRate(binarySearchResult);\n+            } else {\n+                int right = (binarySearchResult * -1) -1;\n+                int left = right - 1;\n+                if (right >= percentiles.length) {\n+                    return 0.0;\n+                } else if (left < 0) {\n+                    return 1.0;\n+                } else {\n+                    double rightRate = getRate(right);\n+                    double leftRate = getRate(left);\n+                    return interpolate(threshold, percentiles[left], leftRate, percentiles[right], rightRate);\n+                }\n+            }\n+        }\n+\n+        private List<AucRocPoint> scanPoints(RateThresholdCurve againstCurve) {\n+            List<AucRocPoint> points = new ArrayList<>();\n+            for (int index = 0; index < percentiles.length; index++) {\n+                double rate = getRate(index);\n+                double scannedThreshold = getThreshold(index);\n+                double againstRate = againstCurve.interpolateRate(scannedThreshold);\n+                AucRocPoint point;\n+                if (isTp) {\n+                    point = new AucRocPoint(rate, againstRate, scannedThreshold);\n+                } else {\n+                    point = new AucRocPoint(againstRate, rate, scannedThreshold);\n+                }\n+                points.add(point);\n+            }\n+            return points;\n+        }\n+    }\n+\n+    public static final class AucRocPoint implements Comparable<AucRocPoint>, ToXContentObject, Writeable {\n+\n+        private final double tpr;\n+        private final double fpr;\n+        private final double threshold;\n+\n+        AucRocPoint(double tpr, double fpr, double threshold) {\n+            this.tpr = tpr;\n+            this.fpr = fpr;\n+            this.threshold = threshold;\n+        }\n+\n+        private AucRocPoint(StreamInput in) throws IOException {\n+            this.tpr = in.readDouble();\n+            this.fpr = in.readDouble();\n+            this.threshold = in.readDouble();\n+        }\n+\n+        @Override\n+        public int compareTo(AucRocPoint o) {\n+            return Comparator.comparingDouble((AucRocPoint p) -> p.threshold).reversed()\n+                .thenComparing(p -> p.fpr)\n+                .thenComparing(p -> p.tpr)\n+                .compare(this, o);\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            out.writeDouble(tpr);\n+            out.writeDouble(fpr);\n+            out.writeDouble(threshold);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(\"tpr\", tpr);\n+            builder.field(\"fpr\", fpr);\n+            builder.field(\"threshold\", threshold);\n+            builder.endObject();\n+            return builder;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            AucRocPoint that = (AucRocPoint) o;\n+            return tpr == that.tpr\n+                && fpr == that.fpr\n+                && threshold == that.threshold;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tpr, fpr, threshold);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Strings.toString(this);\n+        }\n+    }\n+\n+    private static double interpolate(double x, double x1, double y1, double x2, double y2) {\n+        return y1 + (x - x1) * (y2 - y1) / (x2 - x1);\n+    }\n+\n+    public static class Result implements EvaluationMetricResult {\n+\n+        private final double score;\n+        private final List<AucRocPoint> curve;\n+\n+        public Result(double score, List<AucRocPoint> curve) {\n+            this.score = score;\n+            this.curve = Objects.requireNonNull(curve);\n+        }\n+\n+        public Result(StreamInput in) throws IOException {\n+            this.score = in.readDouble();\n+            this.curve = in.readList(AucRocPoint::new);\n+        }\n+\n+        public double getScore() {\n+            return score;\n+        }\n+\n+        public List<AucRocPoint> getCurve() {\n+            return Collections.unmodifiableList(curve);\n+        }\n+\n+        @Override\n+        public String getWriteableName() {\n+            return registeredMetricName(Classification.NAME, NAME);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzIyNQ=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQyMTQ0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMDoyOFrOHRRcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1ODoyN1rOHRzbLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzYxOQ==", "bodyText": "Let's not use Map.of as it doesn't backport well to 7.x", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487873619", "createdAt": "2020-09-14T12:30:28Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMDM4Mw==", "bodyText": "Done.\nI've also changed Set.of to Sets.newHashSet.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488430383", "createdAt": "2020-09-15T06:58:27Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzYxOQ=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQyNjAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMTozMVrOHRRevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowOToyNFrOHRzwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NDIzOA==", "bodyText": "to be complete, shall we also include mappings for the probability field?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487874238", "createdAt": "2020-09-14T12:31:31Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(\n+                \"type\", ObjectMapper.NESTED_CONTENT_TYPE,\n+                \"properties\", Map.of(\"class_name\", dependentVariableMapping)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNTg5Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488435897", "createdAt": "2020-09-15T07:09:24Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(\n+                \"type\", ObjectMapper.NESTED_CONTENT_TYPE,\n+                \"properties\", Map.of(\"class_name\", dependentVariableMapping)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NDIzOA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ1NjQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozODo1NFrOHRRwGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzozNzozMFrOHR0vGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODY4Mg==", "bodyText": "extract in a method checkRequiredFieldsAreSet or similar?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487878682", "createdAt": "2020-09-14T12:38:54Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -59,6 +57,22 @@\n             throw ExceptionsHelper.badRequestException(\"[{}] must have one or more metrics\", getName());\n         }\n         Collections.sort(metrics, Comparator.comparing(EvaluationMetric::getName));\n+        for (Tuple<String, String> requiredField : getFields().listAll()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1MTg2Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488451867", "createdAt": "2020-09-15T07:37:30Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -59,6 +57,22 @@\n             throw ExceptionsHelper.badRequestException(\"[{}] must have one or more metrics\", getName());\n         }\n         Collections.sort(metrics, Comparator.comparing(EvaluationMetric::getName));\n+        for (Tuple<String, String> requiredField : getFields().listAll()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODY4Mg=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjQ4MzQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0NTozNFrOHRSAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo0MTo0M1rOHR040Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MjgxOQ==", "bodyText": "Could we have a method List<QueryBuilder> EvaluationFields.buildExistsQueries()? Would that allow us to delete the explicit getters from EvaluationFields?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487882819", "createdAt": "2020-09-14T12:45:34Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -70,16 +84,46 @@ default SearchSourceBuilder buildSearch(EvaluationParameters parameters, QueryBu\n         Objects.requireNonNull(userProvidedQueryBuilder);\n         BoolQueryBuilder boolQuery =\n             QueryBuilders.boolQuery()\n-                // Verify existence of required fields\n-                .filter(QueryBuilders.existsQuery(getActualField()))\n-                .filter(QueryBuilders.existsQuery(getPredictedField()))\n-                // Apply user-provided query\n-                .filter(userProvidedQueryBuilder);\n+                // Verify existence of the actual field (which is always required)\n+                .filter(QueryBuilders.existsQuery(getFields().getActualField()));\n+        if (getFields().getPredictedField() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1NDM1Mw==", "bodyText": "Could we have a method List EvaluationFields.buildExistsQueries()?\n\nWe could. I don't see much value in doing so though. EvaluationFields is a simple placeholder without any logic and there are benefits (simplicity) if it stays like this.\n\nWould that allow us to delete the explicit getters from EvaluationFields?\n\nNo, the individual fields are still accessed in aggs methods in metrics so that metrics can build their aggregations.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488454353", "createdAt": "2020-09-15T07:41:43Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -70,16 +84,46 @@ default SearchSourceBuilder buildSearch(EvaluationParameters parameters, QueryBu\n         Objects.requireNonNull(userProvidedQueryBuilder);\n         BoolQueryBuilder boolQuery =\n             QueryBuilders.boolQuery()\n-                // Verify existence of required fields\n-                .filter(QueryBuilders.existsQuery(getActualField()))\n-                .filter(QueryBuilders.existsQuery(getPredictedField()))\n-                // Apply user-provided query\n-                .filter(userProvidedQueryBuilder);\n+                // Verify existence of the actual field (which is always required)\n+                .filter(QueryBuilders.existsQuery(getFields().getActualField()));\n+        if (getFields().getPredictedField() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MjgxOQ=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU0MTc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1ODoyN1rOHRSiAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTo1Njo0M1rOHRxz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTQ1OQ==", "bodyText": "I wonder if we need this validation. We already validate that all fields required by the metrics are specified. Don't those two overlap?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487891459", "createdAt": "2020-09-14T12:58:27Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -50,25 +61,59 @@ public static Classification fromXContent(XContentParser parser) {\n     }\n \n     /**\n-     * The field containing the actual value\n-     * The value of this field is assumed to be categorical\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to be a ground truth label.\n+     *   fields.getPredictedField() is assumed to be a predicted label.\n+     *   fields.getPredictedClassNameField() is assumed to be nested under fields.getResultsNestedField().\n+     *   fields.getPredictedProbabilityField() is assumed to be nested under fields.getResultsNestedField().\n      */\n-    private final String actualField;\n-\n-    /**\n-     * The field containing the predicted value\n-     * The value of this field is assumed to be categorical\n-     */\n-    private final String predictedField;\n+    private final EvaluationFields fields;\n \n     /**\n      * The list of metrics to calculate\n      */\n     private final List<EvaluationMetric> metrics;\n \n-    public Classification(String actualField, String predictedField, @Nullable List<EvaluationMetric> metrics) {\n-        this.actualField = ExceptionsHelper.requireNonNull(actualField, ACTUAL_FIELD);\n-        this.predictedField = ExceptionsHelper.requireNonNull(predictedField, PREDICTED_FIELD);\n+    public Classification(String actualField,\n+                          @Nullable String predictedField,\n+                          @Nullable String resultsNestedField,\n+                          @Nullable String predictedClassNameField,\n+                          @Nullable String predictedProbabilityField,\n+                          @Nullable List<EvaluationMetric> metrics) {\n+        // If any of these fields is specified, all of them must be specified.\n+        if (resultsNestedField != null || predictedClassNameField != null || predictedProbabilityField != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwMzkzNg==", "bodyText": "This validation is independent of metrics that are provided by metrics argument.\nMy reasoning here was that for Classification this set of fields (resultsNestedField, predictedClassNameField, predictedProbabilityField) only makes sense if all three are provided. But you may be right, such a strict check is not needed, and when there is no auc_roc in metrics, we shouldn't care which of these three fields are set.\nI've removed this validation.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488403936", "createdAt": "2020-09-15T05:56:43Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -50,25 +61,59 @@ public static Classification fromXContent(XContentParser parser) {\n     }\n \n     /**\n-     * The field containing the actual value\n-     * The value of this field is assumed to be categorical\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to be a ground truth label.\n+     *   fields.getPredictedField() is assumed to be a predicted label.\n+     *   fields.getPredictedClassNameField() is assumed to be nested under fields.getResultsNestedField().\n+     *   fields.getPredictedProbabilityField() is assumed to be nested under fields.getResultsNestedField().\n      */\n-    private final String actualField;\n-\n-    /**\n-     * The field containing the predicted value\n-     * The value of this field is assumed to be categorical\n-     */\n-    private final String predictedField;\n+    private final EvaluationFields fields;\n \n     /**\n      * The list of metrics to calculate\n      */\n     private final List<EvaluationMetric> metrics;\n \n-    public Classification(String actualField, String predictedField, @Nullable List<EvaluationMetric> metrics) {\n-        this.actualField = ExceptionsHelper.requireNonNull(actualField, ACTUAL_FIELD);\n-        this.predictedField = ExceptionsHelper.requireNonNull(predictedField, PREDICTED_FIELD);\n+    public Classification(String actualField,\n+                          @Nullable String predictedField,\n+                          @Nullable String resultsNestedField,\n+                          @Nullable String predictedClassNameField,\n+                          @Nullable String predictedProbabilityField,\n+                          @Nullable List<EvaluationMetric> metrics) {\n+        // If any of these fields is specified, all of them must be specified.\n+        if (resultsNestedField != null || predictedClassNameField != null || predictedProbabilityField != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTQ1OQ=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1MTQzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMDozOVrOHRSnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoyNzoyMVrOHR_TzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjkzOA==", "bodyText": "I think we should explain here that this calculates AUC ROC for a specific class. Plus, we need to think where we explain what happens to the docs that don't have the target class in the top classes.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487892938", "createdAt": "2020-09-14T13:00:39Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -164,6 +164,11 @@ belongs.\n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve. Default value is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2MTczMw==", "bodyText": "I think we should explain here that this calculates AUC ROC for a specific class.\n\nDone. Although @lcawl or @szabosteve may want to take a look at it. Do you think auc_roc now deserves a separate section (It has two fields now: class_name and include_curve).\n\nPlus, we need to think where we explain what happens to the docs that don't have the target class in the top classes.\n\nAgree. This is still on my list. Let me experiment with this case a little bit.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488461733", "createdAt": "2020-09-15T07:54:14Z", "author": {"login": "przemekwitek"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -164,6 +164,11 @@ belongs.\n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve. Default value is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjkzOA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4OTgwOQ==", "bodyText": "@przemekwitek Yes, I think it is a good idea to haveclass_name and include_curve as separated items under auc_roc.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488489809", "createdAt": "2020-09-15T08:38:44Z", "author": {"login": "szabosteve"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -164,6 +164,11 @@ belongs.\n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve. Default value is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjkzOA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyNTEwMQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488625101", "createdAt": "2020-09-15T12:27:21Z", "author": {"login": "przemekwitek"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -164,6 +164,11 @@ belongs.\n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve. Default value is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjkzOA=="}, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjQwMjE2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyODoyMVrOHR2pZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoxMjoxMlrOHR-xJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4MzE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                It is calculated for a particular class X (provided as \"class_name\")\n          \n          \n            \n                It is calculated for a specific class (provided as \"class_name\")\n          \n      \n    \n    \n  \n\nSmall change that might simplify the sentence.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488483175", "createdAt": "2020-09-15T08:28:21Z", "author": {"login": "szabosteve"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,36 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`results_nested_field`::\n+  (Optional, string) The field of the `index` which is a nested array of results.\n+\n+`predicted_class_name_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+  Must be nested under `results_nested_field`.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+  Must be nested under `results_nested_field`.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a particular class X (provided as \"class_name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNjIyOA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488616228", "createdAt": "2020-09-15T12:12:12Z", "author": {"login": "przemekwitek"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,36 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`results_nested_field`::\n+  (Optional, string) The field of the `index` which is a nested array of results.\n+\n+`predicted_class_name_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+  Must be nested under `results_nested_field`.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+  Must be nested under `results_nested_field`.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a particular class X (provided as \"class_name\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4MzE3NQ=="}, "originalCommit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzY3OTc1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo1Njo1MVrOHUdHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODo0Nzo0NlrOHVF_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMDY1NQ==", "bodyText": "predicted_class_field\n\nWe can fix this in a subsequent PR if necessary, but this option doesn't appear in the right order alphabetically.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491210655", "createdAt": "2020-09-18T21:56:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg4MDM0NQ==", "bodyText": "Done.\nBut this makes me think how will the user understand the difference between predicted_field and predicted_class_field. The former is non-nested (and used for precision, recall, etc.) while the latter is nested (and used for AucRoc).\nDo you have an idea on how to express the difference clearly?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491880345", "createdAt": "2020-09-21T08:47:46Z", "author": {"login": "przemekwitek"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMDY1NQ=="}, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzY5NDQ2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjowMDo1MVrOHUdROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODo0NzoxOVrOHVF-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMzExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (i.e. in the auc_roc.doc_count field).\n          \n          \n            \n                  (`auc_roc.doc_count` field).", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491213112", "createdAt": "2020-09-18T22:00:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a specific class (provided as \"class_name\")\n+    treated as positive.\n+\n+    `class_name`::::\n+      (Required, string) Name of the only class that will be treated as\n+      positive during AUC ROC calculation. Other classes will be treated as\n+      negative (\"one-vs-all\" strategy). Documents which do not have `class_name`\n+      in the list of their top classes will not be taken into account for evaluation.\n+      The number of documents taken into account is returned in the evaluation result\n+      (i.e. in the auc_roc.doc_count field).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg4MDA3MQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491880071", "createdAt": "2020-09-21T08:47:19Z", "author": {"login": "przemekwitek"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a specific class (provided as \"class_name\")\n+    treated as positive.\n+\n+    `class_name`::::\n+      (Required, string) Name of the only class that will be treated as\n+      positive during AUC ROC calculation. Other classes will be treated as\n+      negative (\"one-vs-all\" strategy). Documents which do not have `class_name`\n+      in the list of their top classes will not be taken into account for evaluation.\n+      The number of documents taken into account is returned in the evaluation result\n+      (i.e. in the auc_roc.doc_count field).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMzExMg=="}, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2666, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}