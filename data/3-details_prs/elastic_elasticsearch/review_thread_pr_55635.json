{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjAxMzMx", "number": 55635, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1ODo0MlrOD1DXHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1OToyOFrOD1DX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTU2MTkxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/JavaUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1ODo0MlrOGKTLOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1ODo0MlrOGKTLOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MzExMw==", "bodyText": "This could be simplified to java.orElseThrow(() -> new GradleException(\"message\"))", "url": "https://github.com/elastic/elasticsearch/pull/55635#discussion_r413453113", "createdAt": "2020-04-23T01:58:42Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/JavaUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.util;\n+\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.JavaHome;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class JavaUtil {\n+\n+    /** A convenience method for getting java home for a version of java and requiring that version for the given task to execute */\n+    static String getJavaHome(final Task task, final int version) {\n+        List<JavaHome> javaHomes = BuildParams.getJavaVersions();\n+        Optional<JavaHome> java = javaHomes.stream().filter(j -> j.getVersion() == version).findFirst();\n+        // check directly if the version is present since we are already executing\n+        if (java.isEmpty()) {\n+            throw new GradleException(\"JAVA\" + version + \"_HOME required to run task \" + task.getPath());\n+        }\n+        return java.get().getJavaHome().get().getAbsolutePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d516f86649d8c359b779dbe3c03249dd88f511"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTU2Mzk4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/JavaUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1OToyOFrOGKTMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1OToyOFrOGKTMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MzM4NQ==", "bodyText": "Give we are ditching all the task graph stuff I think we can even just avoid the Task parameter here. If this blows up at runtime in a task action the exception cause chain will include the failing task so no need to have it here just for the purpose of including it in the exception message.", "url": "https://github.com/elastic/elasticsearch/pull/55635#discussion_r413453385", "createdAt": "2020-04-23T01:59:28Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/JavaUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.util;\n+\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.JavaHome;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class JavaUtil {\n+\n+    /** A convenience method for getting java home for a version of java and requiring that version for the given task to execute */\n+    static String getJavaHome(final Task task, final int version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d516f86649d8c359b779dbe3c03249dd88f511"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2678, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}