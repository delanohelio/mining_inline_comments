{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Mjg4MzM1", "number": 64503, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0NDoxN1rOE9PBpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0NDoxN1rOE9PBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ0Nzc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocCountFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0NDoxN1rOH50CZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOToxODo0NFrOH9RY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4MzQ2MA==", "bodyText": "maybe add the value that was parsed to the error message? this would make issues easier to investigate", "url": "https://github.com/elastic/elasticsearch/pull/64503#discussion_r530383460", "createdAt": "2020-11-25T13:44:17Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocCountFieldMapper.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.document.Field;\n+import org.apache.lucene.document.NumericDocValuesField;\n+import org.apache.lucene.search.DocValuesFieldExistsQuery;\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentParserUtils;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.query.QueryShardException;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Mapper for the doc_count field. */\n+public class DocCountFieldMapper extends MetadataFieldMapper {\n+\n+    public static final String NAME = \"_doc_count\";\n+    public static final String CONTENT_TYPE = \"_doc_count\";\n+\n+    public static final TypeParser PARSER = new ConfigurableTypeParser(\n+        c -> new DocCountFieldMapper(),\n+        c -> new DocCountFieldMapper.Builder());\n+\n+    static class Builder extends MetadataFieldMapper.Builder {\n+\n+        Builder() {\n+            super(NAME);\n+        }\n+\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return Collections.emptyList();\n+        }\n+\n+        @Override\n+        public DocCountFieldMapper build(BuilderContext context) {\n+            return new DocCountFieldMapper();\n+        }\n+    }\n+\n+    public static final class DocCountFieldType extends MappedFieldType {\n+\n+        public static final DocCountFieldType INSTANCE = new DocCountFieldType();\n+\n+        private static final Long defaultValue = 1L;\n+\n+        public DocCountFieldType() {\n+            super(NAME, false, false, true, TextSearchInfo.NONE,  Collections.emptyMap());\n+        }\n+\n+        @Override\n+        public String typeName() {\n+            return CONTENT_TYPE;\n+        }\n+\n+        @Override\n+        public String familyTypeName() {\n+            return NumberFieldMapper.NumberType.LONG.typeName();\n+        }\n+\n+        @Override\n+        public Query existsQuery(QueryShardContext context) {\n+            return new DocValuesFieldExistsQuery(NAME);\n+        }\n+\n+        @Override\n+        public Query termQuery(Object value, QueryShardContext context) {\n+            throw new QueryShardException(context, \"Field [\" + name() + \"] of type [\" + typeName() + \"] is not searchable\");\n+        }\n+\n+        @Override\n+        public ValueFetcher valueFetcher(MapperService mapperService, SearchLookup searchLookup, String format) {\n+            if (format != null) {\n+                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n+            }\n+\n+            return new SourceValueFetcher(name(), mapperService, defaultValue) {\n+                @Override\n+                protected Object parseSourceValue(Object value) {\n+                    if (\"\".equals(value)) {\n+                        return defaultValue;\n+                    } else {\n+                        return NumberFieldMapper.NumberType.objectToLong(value, false);\n+                    }\n+                }\n+            };\n+        }\n+    }\n+\n+    private DocCountFieldMapper() {\n+        super(DocCountFieldType.INSTANCE);\n+    }\n+\n+    @Override\n+    protected void parseCreateField(ParseContext context) throws IOException {\n+        XContentParser parser = context.parser();\n+        XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, parser.currentToken(), parser);\n+\n+        long value = parser.longValue(false);\n+        if (value <= 0) {\n+            throw new IllegalArgumentException(\"Field [\" + fieldType().name() + \"] must be a positive integer.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "330d2b74f93c71707e4192ad07c9a6a47d451575"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAxMDEwMA==", "bodyText": "@jpountz thanks for the input. Now that this has been merged, I will push this change in a subsequent PR.", "url": "https://github.com/elastic/elasticsearch/pull/64503#discussion_r534010100", "createdAt": "2020-12-02T09:18:44Z", "author": {"login": "csoulios"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocCountFieldMapper.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.document.Field;\n+import org.apache.lucene.document.NumericDocValuesField;\n+import org.apache.lucene.search.DocValuesFieldExistsQuery;\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentParserUtils;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.query.QueryShardException;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Mapper for the doc_count field. */\n+public class DocCountFieldMapper extends MetadataFieldMapper {\n+\n+    public static final String NAME = \"_doc_count\";\n+    public static final String CONTENT_TYPE = \"_doc_count\";\n+\n+    public static final TypeParser PARSER = new ConfigurableTypeParser(\n+        c -> new DocCountFieldMapper(),\n+        c -> new DocCountFieldMapper.Builder());\n+\n+    static class Builder extends MetadataFieldMapper.Builder {\n+\n+        Builder() {\n+            super(NAME);\n+        }\n+\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return Collections.emptyList();\n+        }\n+\n+        @Override\n+        public DocCountFieldMapper build(BuilderContext context) {\n+            return new DocCountFieldMapper();\n+        }\n+    }\n+\n+    public static final class DocCountFieldType extends MappedFieldType {\n+\n+        public static final DocCountFieldType INSTANCE = new DocCountFieldType();\n+\n+        private static final Long defaultValue = 1L;\n+\n+        public DocCountFieldType() {\n+            super(NAME, false, false, true, TextSearchInfo.NONE,  Collections.emptyMap());\n+        }\n+\n+        @Override\n+        public String typeName() {\n+            return CONTENT_TYPE;\n+        }\n+\n+        @Override\n+        public String familyTypeName() {\n+            return NumberFieldMapper.NumberType.LONG.typeName();\n+        }\n+\n+        @Override\n+        public Query existsQuery(QueryShardContext context) {\n+            return new DocValuesFieldExistsQuery(NAME);\n+        }\n+\n+        @Override\n+        public Query termQuery(Object value, QueryShardContext context) {\n+            throw new QueryShardException(context, \"Field [\" + name() + \"] of type [\" + typeName() + \"] is not searchable\");\n+        }\n+\n+        @Override\n+        public ValueFetcher valueFetcher(MapperService mapperService, SearchLookup searchLookup, String format) {\n+            if (format != null) {\n+                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n+            }\n+\n+            return new SourceValueFetcher(name(), mapperService, defaultValue) {\n+                @Override\n+                protected Object parseSourceValue(Object value) {\n+                    if (\"\".equals(value)) {\n+                        return defaultValue;\n+                    } else {\n+                        return NumberFieldMapper.NumberType.objectToLong(value, false);\n+                    }\n+                }\n+            };\n+        }\n+    }\n+\n+    private DocCountFieldMapper() {\n+        super(DocCountFieldType.INSTANCE);\n+    }\n+\n+    @Override\n+    protected void parseCreateField(ParseContext context) throws IOException {\n+        XContentParser parser = context.parser();\n+        XContentParserUtils.ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, parser.currentToken(), parser);\n+\n+        long value = parser.longValue(false);\n+        if (value <= 0) {\n+            throw new IllegalArgumentException(\"Field [\" + fieldType().name() + \"] must be a positive integer.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4MzQ2MA=="}, "originalCommit": {"oid": "330d2b74f93c71707e4192ad07c9a6a47d451575"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4028, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}