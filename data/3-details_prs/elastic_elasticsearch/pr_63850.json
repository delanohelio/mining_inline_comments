{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDgxNTQw", "number": 63850, "title": "DocumentMapperParser to no longer depend directly on MapperService", "bodyText": "This change was mainly triggered by the need for MapperService to pass this during its constructor when creating DocumentMapperParser. Also, MapperService is carried around in some places where only a subset of it is needed.\nWith this change we rather carry around the components that are strictly needed, in a couple of cases functions that MapperService provides, which helps clarifying the dependency between DocumentMapperParser, DocumentMapper and MapperService, as well as removing the need for MapperService to pass this to DocumentMapperParser.\nSome more details about the choices made:\n\nAvoid carrying DocumentMapperParser around (and expose it through a getter) in DocumentMapper: this was mostly to create a parser context, which is a functionality that can be provided specifically by mapper service and exposed through a supplier\nAllow to create DocumentMapperParser without passing in the whole MapperService, although it is still possible as it is handy in some places\nMove creation of parser context from DocumentMapperParser as it requires multiple dependencies that are already available in MapperService and otherwise need to be passed through to DocumentMapperParser.", "createdAt": "2020-10-16T20:16:03Z", "url": "https://github.com/elastic/elasticsearch/pull/63850", "merged": true, "mergeCommit": {"oid": "1878cafdb92181521e8fbb06226e61a2f2df212e"}, "closed": true, "closedAt": "2020-10-20T09:10:05Z", "author": {"login": "javanna"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTMAvcAH2gAyNTA1MDgxNTQwOmIzMWE1YTAwM2ExNjkyZTk4Y2M2NmQ0Mzg2MjhhNTExZWY3MzJhYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUTkbDAH2gAyNTA1MDgxNTQwOjk4ZjgwNDc4YjI4YzkzYTRkMmM4NGE1NzYyMTQ4YzhiNzA2NDI0MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b31a5a003a1692e98cc66d438628a511ef732ac0", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/b31a5a003a1692e98cc66d438628a511ef732ac0", "committedDate": "2020-10-16T20:01:28Z", "message": "DocumentMapperParser to no longer depend directly on MapperService\n\nThis change was mainly triggered by the need for `MapperService` to pass `this` during its constructor when creating `DocumentMapperParser`. Also, `MapperService` is carried around in some places where only a subset of it is needed.\n\nWith this change we rather carry around the components that are strictly needed, in a couple of cases functions that `MapperService` provides, which helps clarifying the dependency between `DocumentMapperParser`, `DocumentMapper` and `MapperService`, as well as removing the need for MapperService to pass `this` to `DocumentMapperParser`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/fda4652d2affe40275096400454ae5854a3ce39f", "committedDate": "2020-10-16T20:12:22Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzczOTY1", "url": "https://github.com/elastic/elasticsearch/pull/63850#pullrequestreview-510773965", "createdAt": "2020-10-16T20:19:12Z", "commit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxOToxM1rOHjOoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxOToxM1rOHjOoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTkyNw==", "bodyText": "This is not perfect, but it gets the job done. The need for these two suppliers and a function here is a bad signal I think, but it's the best I could come up with for now.", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r506701927", "createdAt": "2020-10-16T20:19:13Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java", "diffHunk": "@@ -22,57 +22,42 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.compress.CompressedXContent;\n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.xcontent.XContentHelper;\n import org.elasticsearch.common.xcontent.XContentType;\n import org.elasticsearch.index.IndexSettings;\n-import org.elasticsearch.index.query.QueryShardContext;\n-import org.elasticsearch.index.similarity.SimilarityService;\n-import org.elasticsearch.indices.mapper.MapperRegistry;\n-import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.index.analysis.IndexAnalyzers;\n \n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n public class DocumentMapperParser {\n-\n-    final MapperService mapperService;\n-    private final SimilarityService similarityService;\n-    private final Supplier<QueryShardContext> queryShardContextSupplier;\n+    private final IndexSettings indexSettings;\n+    private final IndexAnalyzers indexAnalyzers;\n+    private final Function<String, String> documentTypeResolver;\n+    private final DocumentParser documentParser;\n+    private final Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier;\n+    private final Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier;\n     private final RootObjectMapper.TypeParser rootObjectTypeParser = new RootObjectMapper.TypeParser();\n-    private final Version indexVersionCreated;\n-    private final Map<String, Mapper.TypeParser> typeParsers;\n     private final Map<String, MetadataFieldMapper.TypeParser> rootTypeParsers;\n-    private final ScriptService scriptService;\n-\n-    public DocumentMapperParser(IndexSettings indexSettings,\n-                                MapperService mapperService,\n-                                SimilarityService similarityService,\n-                                MapperRegistry mapperRegistry,\n-                                Supplier<QueryShardContext> queryShardContextSupplier,\n-                                ScriptService scriptService) {\n-        this.mapperService = mapperService;\n-        this.similarityService = similarityService;\n-        this.queryShardContextSupplier = queryShardContextSupplier;\n-        this.scriptService = scriptService;\n-        this.typeParsers = mapperRegistry.getMapperParsers();\n-        this.indexVersionCreated = indexSettings.getIndexVersionCreated();\n-        this.rootTypeParsers = mapperRegistry.getMetadataMapperParsers(indexVersionCreated);\n-    }\n-\n-    public Mapper.TypeParser.ParserContext parserContext() {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, null, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n-    }\n \n-    public Mapper.TypeParser.ParserContext parserContext(DateFormatter dateFormatter) {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, dateFormatter, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n+    DocumentMapperParser(IndexSettings indexSettings,\n+                         IndexAnalyzers indexAnalyzers,\n+                         Function<String, String> documentTypeResolver,\n+                         DocumentParser documentParser,\n+                         Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier,\n+                         Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzgzNzQ5", "url": "https://github.com/elastic/elasticsearch/pull/63850#pullrequestreview-510783749", "createdAt": "2020-10-16T20:37:30Z", "commit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozNzozMVrOHjPGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozNzozMVrOHjPGNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ==", "bodyText": "it is not fantastic that this is now moved to MapperService. On the other hand this code block required DocumentMapper as well as DocumentMapperParser (which is also one of the callers) and a bunch of other components that are easily available in MapperService and need to be carried around otherwise through DocumentMapperParser. So this is an ok compromise I thought. We may want to think about further cleanups around how we share the most common objects.", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r506709559", "createdAt": "2020-10-16T20:37:31Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -37,57 +37,44 @@\n import org.elasticsearch.index.IndexSettings;\n import org.elasticsearch.index.analysis.IndexAnalyzers;\n import org.elasticsearch.index.mapper.MapperService.MergeReason;\n-import org.elasticsearch.index.mapper.MetadataFieldMapper.TypeParser;\n import org.elasticsearch.search.internal.SearchContext;\n \n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.stream.Stream;\n \n \n-public class DocumentMapper implements ToXContentFragment {\n+public final class DocumentMapper implements ToXContentFragment {\n \n-    public static class Builder {\n-\n-        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();\n+    public static final class Builder {\n+        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers;\n         private final RootObjectMapper rootObjectMapper;\n         private final Mapper.BuilderContext builderContext;\n         private final IndexSettings indexSettings;\n         private final IndexAnalyzers indexAnalyzers;\n-        private final DocumentMapperParser documentMapperParser;\n         private final DocumentParser documentParser;\n \n         private Map<String, Object> meta;\n \n         public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {\n-            this.indexSettings = mapperService.getIndexSettings();\n-            this.indexAnalyzers = mapperService.getIndexAnalyzers();\n-            this.documentMapperParser = mapperService.documentMapperParser();\n-            this.documentParser = mapperService.documentParser();\n+            this(builder, mapperService.getIndexSettings(), mapperService.getIndexAnalyzers(), mapperService.documentParser(),\n+                mapperService.getMetadataMappers());\n+        }\n+\n+        Builder(RootObjectMapper.Builder builder,\n+                IndexSettings indexSettings,\n+                IndexAnalyzers indexAnalyzers,\n+                DocumentParser documentParser,\n+                Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers) {\n+            this.indexSettings = indexSettings;\n+            this.indexAnalyzers = indexAnalyzers;\n+            this.documentParser = documentParser;\n             this.builderContext = new Mapper.BuilderContext(indexSettings.getSettings(), new ContentPath(1));\n             this.rootObjectMapper = builder.build(builderContext);\n-\n-            final DocumentMapper existingMapper = mapperService.documentMapper();\n-            final Map<String, TypeParser> metadataMapperParsers =\n-                mapperService.mapperRegistry.getMetadataMapperParsers(indexSettings.getIndexVersionCreated());\n-            for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : metadataMapperParsers.entrySet()) {\n-                final String name = entry.getKey();\n-                final MetadataFieldMapper existingMetadataMapper = existingMapper == null\n-                        ? null\n-                        : (MetadataFieldMapper) existingMapper.mappers().getMapper(name);\n-                final MetadataFieldMapper metadataMapper;\n-                if (existingMetadataMapper == null) {\n-                    final TypeParser parser = entry.getValue();\n-                    metadataMapper = parser.getDefault(mapperService.documentMapperParser().parserContext());\n-                } else {\n-                    metadataMapper = existingMetadataMapper;\n-                }\n-                metadataMappers.put(metadataMapper.getClass(), metadataMapper);\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cbffef662a747c5e7d89a82ae484f063af3141e", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/2cbffef662a747c5e7d89a82ae484f063af3141e", "committedDate": "2020-10-16T20:39:27Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjAzMzA4", "url": "https://github.com/elastic/elasticsearch/pull/63850#pullrequestreview-511603308", "createdAt": "2020-10-19T10:03:01Z", "commit": {"oid": "2cbffef662a747c5e7d89a82ae484f063af3141e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDowMzowMVrOHkG9sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDowNzoxNFrOHkHHGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDg4MQ==", "bodyText": "I wonder if we can make this neater by changing the signature of MetadataFieldMapper.getDefault()? Looking at the various implementations, we only need indexVersionCreated() and isIdFieldDataEnabled(), which we can abstract into a MetadataParseContext interface - that removes the reliance on DocumentMapperParser at least.", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507624881", "createdAt": "2020-10-19T10:03:01Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -37,57 +37,44 @@\n import org.elasticsearch.index.IndexSettings;\n import org.elasticsearch.index.analysis.IndexAnalyzers;\n import org.elasticsearch.index.mapper.MapperService.MergeReason;\n-import org.elasticsearch.index.mapper.MetadataFieldMapper.TypeParser;\n import org.elasticsearch.search.internal.SearchContext;\n \n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.stream.Stream;\n \n \n-public class DocumentMapper implements ToXContentFragment {\n+public final class DocumentMapper implements ToXContentFragment {\n \n-    public static class Builder {\n-\n-        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();\n+    public static final class Builder {\n+        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers;\n         private final RootObjectMapper rootObjectMapper;\n         private final Mapper.BuilderContext builderContext;\n         private final IndexSettings indexSettings;\n         private final IndexAnalyzers indexAnalyzers;\n-        private final DocumentMapperParser documentMapperParser;\n         private final DocumentParser documentParser;\n \n         private Map<String, Object> meta;\n \n         public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {\n-            this.indexSettings = mapperService.getIndexSettings();\n-            this.indexAnalyzers = mapperService.getIndexAnalyzers();\n-            this.documentMapperParser = mapperService.documentMapperParser();\n-            this.documentParser = mapperService.documentParser();\n+            this(builder, mapperService.getIndexSettings(), mapperService.getIndexAnalyzers(), mapperService.documentParser(),\n+                mapperService.getMetadataMappers());\n+        }\n+\n+        Builder(RootObjectMapper.Builder builder,\n+                IndexSettings indexSettings,\n+                IndexAnalyzers indexAnalyzers,\n+                DocumentParser documentParser,\n+                Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers) {\n+            this.indexSettings = indexSettings;\n+            this.indexAnalyzers = indexAnalyzers;\n+            this.documentParser = documentParser;\n             this.builderContext = new Mapper.BuilderContext(indexSettings.getSettings(), new ContentPath(1));\n             this.rootObjectMapper = builder.build(builderContext);\n-\n-            final DocumentMapper existingMapper = mapperService.documentMapper();\n-            final Map<String, TypeParser> metadataMapperParsers =\n-                mapperService.mapperRegistry.getMetadataMapperParsers(indexSettings.getIndexVersionCreated());\n-            for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : metadataMapperParsers.entrySet()) {\n-                final String name = entry.getKey();\n-                final MetadataFieldMapper existingMetadataMapper = existingMapper == null\n-                        ? null\n-                        : (MetadataFieldMapper) existingMapper.mappers().getMapper(name);\n-                final MetadataFieldMapper metadataMapper;\n-                if (existingMetadataMapper == null) {\n-                    final TypeParser parser = entry.getValue();\n-                    metadataMapper = parser.getDefault(mapperService.documentMapperParser().parserContext());\n-                } else {\n-                    metadataMapper = existingMetadataMapper;\n-                }\n-                metadataMappers.put(metadataMapper.getClass(), metadataMapper);\n-            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, "originalCommit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNzI4OA==", "bodyText": "Can we merge these two by just calling the function with null if there's no date formatter?", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507627288", "createdAt": "2020-10-19T10:07:14Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -119,12 +121,20 @@ public MapperService(IndexSettings indexSettings, IndexAnalyzers indexAnalyzers,\n         super(indexSettings);\n         this.indexVersionCreated = indexSettings.getIndexVersionCreated();\n         this.indexAnalyzers = indexAnalyzers;\n-        this.documentParser = new DocumentParser(xContentRegistry);\n-        this.documentMapperParser = new DocumentMapperParser(indexSettings, this, similarityService, mapperRegistry,\n-                queryShardContextSupplier, scriptService);\n         this.indexAnalyzer = new MapperAnalyzerWrapper(indexAnalyzers.getDefaultIndexAnalyzer(), MappedFieldType::indexAnalyzer);\n         this.mapperRegistry = mapperRegistry;\n-        this.idFieldDataEnabled = idFieldDataEnabled;\n+        Function<DateFormatter, Mapper.TypeParser.ParserContext> parserContextFunction =\n+            dateFormatter -> new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, mapperRegistry.getMapperParsers()::get,\n+                indexVersionCreated, queryShardContextSupplier, dateFormatter, scriptService, indexAnalyzers, indexSettings,\n+                idFieldDataEnabled);\n+        this.documentParser = new DocumentParser(xContentRegistry, parserContextFunction);\n+        this.parserContextSupplier = () -> new Mapper.TypeParser.ParserContext(similarityService::getSimilarity,\n+            mapperRegistry.getMapperParsers()::get, indexVersionCreated,\n+            queryShardContextSupplier, null, scriptService, indexAnalyzers, indexSettings, idFieldDataEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbffef662a747c5e7d89a82ae484f063af3141e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbed2af11d8030dfc180bdaf049beb8346b9ac45", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/dbed2af11d8030dfc180bdaf049beb8346b9ac45", "committedDate": "2020-10-19T12:28:49Z", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6771df808fc170b2c393895dc22d2292d5ace02", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6771df808fc170b2c393895dc22d2292d5ace02", "committedDate": "2020-10-19T12:29:15Z", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f40331dd96da3a44c9d57f9bf0d68f027145df", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/08f40331dd96da3a44c9d57f9bf0d68f027145df", "committedDate": "2020-10-19T13:06:20Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6", "committedDate": "2020-10-19T14:15:25Z", "message": "boolean supplier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODk4NTAx", "url": "https://github.com/elastic/elasticsearch/pull/63850#pullrequestreview-511898501", "createdAt": "2020-10-19T15:38:24Z", "commit": {"oid": "9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTozODoyNFrOHkU5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo0Mjo1NVrOHkVGQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MzA2Mg==", "bodyText": "Does the metadata mappers map need to be a Supplier?", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507853062", "createdAt": "2020-10-19T15:38:24Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java", "diffHunk": "@@ -22,57 +22,42 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.compress.CompressedXContent;\n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.xcontent.XContentHelper;\n import org.elasticsearch.common.xcontent.XContentType;\n import org.elasticsearch.index.IndexSettings;\n-import org.elasticsearch.index.query.QueryShardContext;\n-import org.elasticsearch.index.similarity.SimilarityService;\n-import org.elasticsearch.indices.mapper.MapperRegistry;\n-import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.index.analysis.IndexAnalyzers;\n \n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n public class DocumentMapperParser {\n-\n-    final MapperService mapperService;\n-    private final SimilarityService similarityService;\n-    private final Supplier<QueryShardContext> queryShardContextSupplier;\n+    private final IndexSettings indexSettings;\n+    private final IndexAnalyzers indexAnalyzers;\n+    private final Function<String, String> documentTypeResolver;\n+    private final DocumentParser documentParser;\n+    private final Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier;\n+    private final Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier;\n     private final RootObjectMapper.TypeParser rootObjectTypeParser = new RootObjectMapper.TypeParser();\n-    private final Version indexVersionCreated;\n-    private final Map<String, Mapper.TypeParser> typeParsers;\n     private final Map<String, MetadataFieldMapper.TypeParser> rootTypeParsers;\n-    private final ScriptService scriptService;\n-\n-    public DocumentMapperParser(IndexSettings indexSettings,\n-                                MapperService mapperService,\n-                                SimilarityService similarityService,\n-                                MapperRegistry mapperRegistry,\n-                                Supplier<QueryShardContext> queryShardContextSupplier,\n-                                ScriptService scriptService) {\n-        this.mapperService = mapperService;\n-        this.similarityService = similarityService;\n-        this.queryShardContextSupplier = queryShardContextSupplier;\n-        this.scriptService = scriptService;\n-        this.typeParsers = mapperRegistry.getMapperParsers();\n-        this.indexVersionCreated = indexSettings.getIndexVersionCreated();\n-        this.rootTypeParsers = mapperRegistry.getMetadataMapperParsers(indexVersionCreated);\n-    }\n-\n-    public Mapper.TypeParser.ParserContext parserContext() {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, null, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n-    }\n \n-    public Mapper.TypeParser.ParserContext parserContext(DateFormatter dateFormatter) {\n-        return new Mapper.TypeParser.ParserContext(similarityService::getSimilarity, typeParsers::get, indexVersionCreated,\n-            queryShardContextSupplier, dateFormatter, scriptService, mapperService.getIndexAnalyzers(), mapperService.getIndexSettings(),\n-            mapperService::isIdFieldDataEnabled);\n+    DocumentMapperParser(IndexSettings indexSettings,\n+                         IndexAnalyzers indexAnalyzers,\n+                         Function<String, String> documentTypeResolver,\n+                         DocumentParser documentParser,\n+                         Supplier<Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersSupplier,\n+                         Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTkyNw=="}, "originalCommit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NDg4NA==", "bodyText": "I think this can be simplified as follows:\n\nif the existing mapper is null, iterate through mapperRegistry.getMetadataMapperParsers and call getDefault on each one.\nif not, just return the metadata mappers from the existing mapper\n\nThe mixing and matching is unnecessary, because the index created version is fixed between the new mapper and the previous mapper, and so the set of metadata mappers for the two will be the same.", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507854884", "createdAt": "2020-10-19T15:40:48Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -139,14 +147,41 @@ public NamedAnalyzer getNamedAnalyzer(String analyzerName) {\n         return this.indexAnalyzers.get(analyzerName);\n     }\n \n+    //TODO This is only used in tests, we may want to look into replacing those usages?\n     public DocumentMapperParser documentMapperParser() {\n         return this.documentMapperParser;\n     }\n \n+    public Mapper.TypeParser.ParserContext parserContext() {\n+        return parserContextSupplier.get();\n+    }\n+\n     DocumentParser documentParser() {\n         return this.documentParser;\n     }\n \n+    Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> getMetadataMappers() {\n+        Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd2fb49bae2ba24dccdd2076b8c4fc28d9ab1a6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NjQ1MQ==", "bodyText": "This is definitely better.  I'm not completely happy with the metadata field builder abstractions, but maybe that will become clearer as we go on.", "url": "https://github.com/elastic/elasticsearch/pull/63850#discussion_r507856451", "createdAt": "2020-10-19T15:42:55Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -37,57 +37,44 @@\n import org.elasticsearch.index.IndexSettings;\n import org.elasticsearch.index.analysis.IndexAnalyzers;\n import org.elasticsearch.index.mapper.MapperService.MergeReason;\n-import org.elasticsearch.index.mapper.MetadataFieldMapper.TypeParser;\n import org.elasticsearch.search.internal.SearchContext;\n \n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.stream.Stream;\n \n \n-public class DocumentMapper implements ToXContentFragment {\n+public final class DocumentMapper implements ToXContentFragment {\n \n-    public static class Builder {\n-\n-        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();\n+    public static final class Builder {\n+        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers;\n         private final RootObjectMapper rootObjectMapper;\n         private final Mapper.BuilderContext builderContext;\n         private final IndexSettings indexSettings;\n         private final IndexAnalyzers indexAnalyzers;\n-        private final DocumentMapperParser documentMapperParser;\n         private final DocumentParser documentParser;\n \n         private Map<String, Object> meta;\n \n         public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {\n-            this.indexSettings = mapperService.getIndexSettings();\n-            this.indexAnalyzers = mapperService.getIndexAnalyzers();\n-            this.documentMapperParser = mapperService.documentMapperParser();\n-            this.documentParser = mapperService.documentParser();\n+            this(builder, mapperService.getIndexSettings(), mapperService.getIndexAnalyzers(), mapperService.documentParser(),\n+                mapperService.getMetadataMappers());\n+        }\n+\n+        Builder(RootObjectMapper.Builder builder,\n+                IndexSettings indexSettings,\n+                IndexAnalyzers indexAnalyzers,\n+                DocumentParser documentParser,\n+                Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers) {\n+            this.indexSettings = indexSettings;\n+            this.indexAnalyzers = indexAnalyzers;\n+            this.documentParser = documentParser;\n             this.builderContext = new Mapper.BuilderContext(indexSettings.getSettings(), new ContentPath(1));\n             this.rootObjectMapper = builder.build(builderContext);\n-\n-            final DocumentMapper existingMapper = mapperService.documentMapper();\n-            final Map<String, TypeParser> metadataMapperParsers =\n-                mapperService.mapperRegistry.getMetadataMapperParsers(indexSettings.getIndexVersionCreated());\n-            for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : metadataMapperParsers.entrySet()) {\n-                final String name = entry.getKey();\n-                final MetadataFieldMapper existingMetadataMapper = existingMapper == null\n-                        ? null\n-                        : (MetadataFieldMapper) existingMapper.mappers().getMapper(name);\n-                final MetadataFieldMapper metadataMapper;\n-                if (existingMetadataMapper == null) {\n-                    final TypeParser parser = entry.getValue();\n-                    metadataMapper = parser.getDefault(mapperService.documentMapperParser().parserContext());\n-                } else {\n-                    metadataMapper = existingMetadataMapper;\n-                }\n-                metadataMappers.put(metadataMapper.getClass(), metadataMapper);\n-            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTU1OQ=="}, "originalCommit": {"oid": "fda4652d2affe40275096400454ae5854a3ce39f"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30271a4730ddf5eaa072eb9623b10867de08a30e", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/30271a4730ddf5eaa072eb9623b10867de08a30e", "committedDate": "2020-10-19T16:27:31Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTUyNjM0", "url": "https://github.com/elastic/elasticsearch/pull/63850#pullrequestreview-511952634", "createdAt": "2020-10-19T16:37:20Z", "commit": {"oid": "30271a4730ddf5eaa072eb9623b10867de08a30e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "162a768c3f39e4eb38828cf3890fef47d47062f2", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/162a768c3f39e4eb38828cf3890fef47d47062f2", "committedDate": "2020-10-20T07:18:19Z", "message": "Merge branch 'master' into refactoring/doc_mapper_parser_service_this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f80478b28c93a4d2c84a5762148c8b70642415", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/98f80478b28c93a4d2c84a5762148c8b70642415", "committedDate": "2020-10-20T07:23:42Z", "message": "iter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3905, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}