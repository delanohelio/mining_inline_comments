{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODUwMDg5", "number": 54838, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMToxNlrODvp9vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowOTowNFrODvqKfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk3MjEyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMToxNlrOGCNUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NjowNFrOGCVyow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2ODU2NQ==", "bodyText": "Super minor indentation nit here", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404968565", "createdAt": "2020-04-07T17:01:16Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -909,6 +914,36 @@ public Cancellable putTemplateAsync(PutIndexTemplateRequest putIndexTemplateRequ\n             AcknowledgedResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Puts an index template using the Index Templates API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param putIndexTemplateRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse putIndexTemplate(PutIndexTemplateV2Request putIndexTemplateRequest, RequestOptions options)\n+        throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putIndexTemplate,\n+            options, AcknowledgedResponse::fromXContent, emptySet());\n+    }\n+\n+    /**\n+     * Asynchronously puts an index template using the Index Templates API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param putIndexTemplateRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable putIndexTemplateAsync(PutIndexTemplateV2Request putIndexTemplateRequest,\n+                                        RequestOptions options, ActionListener<AcknowledgedResponse> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzM2Mw==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405107363", "createdAt": "2020-04-07T20:56:04Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -909,6 +914,36 @@ public Cancellable putTemplateAsync(PutIndexTemplateRequest putIndexTemplateRequ\n             AcknowledgedResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Puts an index template using the Index Templates API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param putIndexTemplateRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse putIndexTemplate(PutIndexTemplateV2Request putIndexTemplateRequest, RequestOptions options)\n+        throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putIndexTemplate,\n+            options, AcknowledgedResponse::fromXContent, emptySet());\n+    }\n+\n+    /**\n+     * Asynchronously puts an index template using the Index Templates API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param putIndexTemplateRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable putIndexTemplateAsync(PutIndexTemplateV2Request putIndexTemplateRequest,\n+                                        RequestOptions options, ActionListener<AcknowledgedResponse> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2ODU2NQ=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk3OTUwOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMzoxMVrOGCNZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NjozNFrOGCVzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2OTgwMA==", "bodyText": "Another minor indentation nit here", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404969800", "createdAt": "2020-04-07T17:03:11Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1006,6 +1071,37 @@ public Cancellable existsTemplateAsync(IndexTemplatesExistRequest indexTemplates\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     *\n+     * @param indexTemplatesRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return true if any index templates in the request exist, false otherwise\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public boolean existsIndexTemplate(IndexTemplateV2ExistRequest indexTemplatesRequest,\n+                                  RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzY1Ng==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405107656", "createdAt": "2020-04-07T20:56:34Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1006,6 +1071,37 @@ public Cancellable existsTemplateAsync(IndexTemplatesExistRequest indexTemplates\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     *\n+     * @param indexTemplatesRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return true if any index templates in the request exist, false otherwise\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public boolean existsIndexTemplate(IndexTemplateV2ExistRequest indexTemplatesRequest,\n+                                  RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2OTgwMA=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk3OTkxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMzoxOFrOGCNZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NjoxMFrOGCVy2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2OTg3NA==", "bodyText": "Same here", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404969874", "createdAt": "2020-04-07T17:03:18Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1006,6 +1071,37 @@ public Cancellable existsTemplateAsync(IndexTemplatesExistRequest indexTemplates\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     *\n+     * @param indexTemplatesRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return true if any index templates in the request exist, false otherwise\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public boolean existsIndexTemplate(IndexTemplateV2ExistRequest indexTemplatesRequest,\n+                                  RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequest(indexTemplatesRequest,\n+            IndicesRequestConverters::templatesExist, options,\n+            RestHighLevelClient::convertExistsResponse, emptySet());\n+    }\n+\n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     * @param indexTemplatesExistRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable existsIndexTemplateAsync(IndexTemplateV2ExistRequest indexTemplatesExistRequest,\n+                                                  RequestOptions options,\n+                                                  ActionListener<Boolean> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzQxOA==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405107418", "createdAt": "2020-04-07T20:56:10Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1006,6 +1071,37 @@ public Cancellable existsTemplateAsync(IndexTemplatesExistRequest indexTemplates\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     *\n+     * @param indexTemplatesRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return true if any index templates in the request exist, false otherwise\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public boolean existsIndexTemplate(IndexTemplateV2ExistRequest indexTemplatesRequest,\n+                                  RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequest(indexTemplatesRequest,\n+            IndicesRequestConverters::templatesExist, options,\n+            RestHighLevelClient::convertExistsResponse, emptySet());\n+    }\n+\n+    /**\n+     * Uses the Index Templates API to determine if index templates exist\n+     * @param indexTemplatesExistRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable existsIndexTemplateAsync(IndexTemplateV2ExistRequest indexTemplatesExistRequest,\n+                                                  RequestOptions options,\n+                                                  ActionListener<Boolean> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2OTg3NA=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4MjEzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMzo0MFrOGCNa9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NjoxNVrOGCVzDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDIyOQ==", "bodyText": "Same here", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404970229", "createdAt": "2020-04-07T17:03:40Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1112,6 +1208,35 @@ public Cancellable deleteTemplateAsync(DeleteIndexTemplateRequest request, Reque\n             options, AcknowledgedResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Delete an index template using the Index Templates API\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     *\n+     * @param request the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse deleteIndexTemplate(DeleteIndexTemplateV2Request request, RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::deleteIndexTemplate,\n+            options, AcknowledgedResponse::fromXContent, emptySet());\n+    }\n+\n+    /**\n+     * Asynchronously delete an index template using the Index Templates API\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param request  the request\n+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable deleteIndexTemplateAsync(DeleteIndexTemplateV2Request request, RequestOptions options,\n+                                           ActionListener<AcknowledgedResponse> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzQ2OA==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405107468", "createdAt": "2020-04-07T20:56:15Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -1112,6 +1208,35 @@ public Cancellable deleteTemplateAsync(DeleteIndexTemplateRequest request, Reque\n             options, AcknowledgedResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Delete an index template using the Index Templates API\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     *\n+     * @param request the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse deleteIndexTemplate(DeleteIndexTemplateV2Request request, RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::deleteIndexTemplate,\n+            options, AcknowledgedResponse::fromXContent, emptySet());\n+    }\n+\n+    /**\n+     * Asynchronously delete an index template using the Index Templates API\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html\"> Index Templates API\n+     * on elastic.co</a>\n+     * @param request  the request\n+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable deleteIndexTemplateAsync(DeleteIndexTemplateV2Request request, RequestOptions options,\n+                                           ActionListener<AcknowledgedResponse> listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDIyOQ=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4NTkyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNDozNFrOGCNdRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NjoyOFrOGCVziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDgyMQ==", "bodyText": "To match what we have in core, I think we should name this GetIndexTemplateV2Request (no 's').", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404970821", "createdAt": "2020-04-07T17:04:34Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+/**\n+ * A request to read the content of component templates\n+ */\n+public class GetIndexTemplatesV2Request implements Validatable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzU5NQ==", "bodyText": "Good idea, changed", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405107595", "createdAt": "2020-04-07T20:56:28Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+/**\n+ * A request to read the content of component templates\n+ */\n+public class GetIndexTemplatesV2Request implements Validatable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDgyMQ=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4OTUxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNToyM1rOGCNfpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNToyM1rOGCNfpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MTQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"must provide component template name\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"must provide index template name\");", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404971429", "createdAt": "2020-04-07T17:05:23Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.common.Strings;\n+\n+/**\n+ * A request to check for the existence of component templates\n+ */\n+public class IndexTemplateV2ExistRequest extends GetComponentTemplatesRequest {\n+\n+    /**\n+     * Create a request to check for the existence of component template. Name must be provided\n+     *\n+     * @param name the name of template to check for the existence of\n+     */\n+    public IndexTemplateV2ExistRequest(String name) {\n+        super(name);\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"must provide component template name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4OTk1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNTozMVrOGCNf9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNTozMVrOGCNf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MTUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A request to check for the existence of component templates\n          \n          \n            \n             * A request to check for the existence of index templates", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404971511", "createdAt": "2020-04-07T17:05:31Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.common.Strings;\n+\n+/**\n+ * A request to check for the existence of component templates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5MDUwOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNTozOVrOGCNgTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNTozOVrOGCNgTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MTU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create a request to check for the existence of component template. Name must be provided\n          \n          \n            \n                 * Create a request to check for the existence of index template. Name must be provided", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404971598", "createdAt": "2020-04-07T17:05:39Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/IndexTemplateV2ExistRequest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.common.Strings;\n+\n+/**\n+ * A request to check for the existence of component templates\n+ */\n+public class IndexTemplateV2ExistRequest extends GetComponentTemplatesRequest {\n+\n+    /**\n+     * Create a request to check for the existence of component template. Name must be provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5MjIzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjowNFrOGCNhXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjowNFrOGCNhXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MTg3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create a request to read the content of component template. If no template name is provided, all templates will\n          \n          \n            \n                 * Create a request to read the content of index template. If no template name is provided, all templates will", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404971871", "createdAt": "2020-04-07T17:06:04Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+/**\n+ * A request to read the content of component templates\n+ */\n+public class GetIndexTemplatesV2Request implements Validatable {\n+\n+    private final String name;\n+\n+    private TimeValue masterNodeTimeout = TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT;\n+    private boolean local = false;\n+\n+    /**\n+     * Create a request to read the content of component template. If no template name is provided, all templates will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5Mjc5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjoxMlrOGCNhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjoxMlrOGCNhwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MTk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the name of component template this request is requesting\n          \n          \n            \n                 * @return the name of index template this request is requesting", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404971968", "createdAt": "2020-04-07T17:06:12Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+/**\n+ * A request to read the content of component templates\n+ */\n+public class GetIndexTemplatesV2Request implements Validatable {\n+\n+    private final String name;\n+\n+    private TimeValue masterNodeTimeout = TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT;\n+    private boolean local = false;\n+\n+    /**\n+     * Create a request to read the content of component template. If no template name is provided, all templates will\n+     * be read\n+     *\n+     * @param name the name of template to read\n+     */\n+    public GetIndexTemplatesV2Request(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the name of component template this request is requesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NDA0OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjoyN1rOGCNicA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjoyN1rOGCNicA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A request to create an component template.\n          \n          \n            \n             * A request to create an index template.", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972144", "createdAt": "2020-04-07T17:06:27Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NDc5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjozNVrOGCNi4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjozNVrOGCNi4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjI1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the name of the component template.\n          \n          \n            \n                 * Sets the name of the index template.", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972259", "createdAt": "2020-04-07T17:06:35Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutIndexTemplateV2Request extends TimedRequest implements ToXContentObject {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private IndexTemplateV2 indexTemplate;\n+\n+    /**\n+     * Sets the name of the component template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NTM3OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjo0M1rOGCNjOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjo0M1rOGCNjOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjM0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The name of the component template.\n          \n          \n            \n                 * The name of the index template.", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972345", "createdAt": "2020-04-07T17:06:43Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutIndexTemplateV2Request extends TimedRequest implements ToXContentObject {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private IndexTemplateV2 indexTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutIndexTemplateV2Request name(String name) {\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"name cannot be null or empty\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NjEzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjo1MVrOGCNjpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNjo1MVrOGCNjpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set to {@code true} to force only creation, not an update of an component template. If it already\n          \n          \n            \n                 * Set to {@code true} to force only creation, not an update of an index template. If it already", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972455", "createdAt": "2020-04-07T17:06:51Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutIndexTemplateV2Request extends TimedRequest implements ToXContentObject {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private IndexTemplateV2 indexTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutIndexTemplateV2Request name(String name) {\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"name cannot be null or empty\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NjgxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzowMlrOGCNkDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzowMlrOGCNkDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The component template to create.\n          \n          \n            \n                 * The index template to create.", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972559", "createdAt": "2020-04-07T17:07:02Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutIndexTemplateV2Request extends TimedRequest implements ToXContentObject {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private IndexTemplateV2 indexTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutIndexTemplateV2Request name(String name) {\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"name cannot be null or empty\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutIndexTemplateV2Request create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5NzQ1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzoxM1rOGCNkeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzoxM1rOGCNkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The cause for this component template creation.\n          \n          \n            \n                 * The cause for this index template creation.", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972666", "createdAt": "2020-04-07T17:07:13Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutIndexTemplateV2Request.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutIndexTemplateV2Request extends TimedRequest implements ToXContentObject {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private IndexTemplateV2 indexTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutIndexTemplateV2Request name(String name) {\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"name cannot be null or empty\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutIndexTemplateV2Request create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutIndexTemplateV2Request indexTemplate(IndexTemplateV2 indexTemplate) {\n+        this.indexTemplate = indexTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk5ODM3OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzoyOVrOGCNlGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNzoyOVrOGCNlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    exist = exist = execute(indexTemplateV2ExistRequest,\n          \n          \n            \n                    exist = execute(indexTemplateV2ExistRequest,", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404972824", "createdAt": "2020-04-07T17:07:29Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java", "diffHunk": "@@ -1560,4 +1568,50 @@ public void testDeleteAlias() throws IOException {\n         assertThat(aliasExists(index, alias), equalTo(false));\n         assertThat(aliasExists(index, alias2), equalTo(true));\n     }\n+    \n+    public void testIndexTemplates() throws Exception {\n+        String templateName = \"my-template\";\n+        Settings settings = Settings.builder().put(\"index.number_of_shards\", 1).build();\n+        CompressedXContent mappings = new CompressedXContent(\"{\\\"properties\\\":{\\\"host_name\\\":{\\\"type\\\":\\\"keyword\\\"}}}\");\n+        AliasMetadata alias = AliasMetadata.builder(\"alias\").writeIndex(true).build();\n+        Template template = new Template(settings, mappings, Map.of(\"alias\", alias));\n+        List<String> pattern = List.of(\"pattern\");\n+        IndexTemplateV2 indexTemplate = new IndexTemplateV2(pattern, template, Collections.emptyList(), 1L, 1L, new HashMap<>());\n+        PutIndexTemplateV2Request putIndexTemplateV2Request =\n+            new PutIndexTemplateV2Request().name(templateName).create(true).indexTemplate(indexTemplate);\n+\n+        AcknowledgedResponse response = execute(putIndexTemplateV2Request,\n+            highLevelClient().indices()::putIndexTemplate, highLevelClient().indices()::putIndexTemplateAsync);\n+        assertThat(response.isAcknowledged(), equalTo(true));\n+\n+        IndexTemplateV2ExistRequest indexTemplateV2ExistRequest = new IndexTemplateV2ExistRequest(templateName);\n+        boolean exist = execute(indexTemplateV2ExistRequest,\n+            highLevelClient().indices()::existsIndexTemplate, highLevelClient().indices()::existsIndexTemplateAsync);\n+\n+        assertTrue(exist);\n+\n+        GetIndexTemplatesV2Request getIndexTemplatesV2Request = new GetIndexTemplatesV2Request(templateName);\n+        GetIndexTemplatesV2Response getResponse = execute(getIndexTemplatesV2Request,\n+            highLevelClient().indices()::getIndexTemplate, highLevelClient().indices()::getIndexTemplateAsync);\n+\n+        assertThat(getResponse.getIndexTemplates().size(), equalTo(1));\n+        assertThat(getResponse.getIndexTemplates().containsKey(templateName), equalTo(true));\n+        assertThat(getResponse.getIndexTemplates().get(templateName), equalTo(indexTemplate));\n+\n+        DeleteIndexTemplateV2Request deleteIndexTemplateV2Request = new DeleteIndexTemplateV2Request(templateName);\n+        response = execute(deleteIndexTemplateV2Request, highLevelClient().indices()::deleteIndexTemplate,\n+            highLevelClient().indices()::deleteIndexTemplateAsync);\n+        assertThat(response.isAcknowledged(), equalTo(true));\n+\n+        ElasticsearchStatusException statusException = expectThrows(ElasticsearchStatusException.class,\n+            () -> execute(getIndexTemplatesV2Request,\n+                highLevelClient().indices()::getIndexTemplate, highLevelClient().indices()::getIndexTemplateAsync));\n+\n+        assertThat(statusException.status(), equalTo(RestStatus.NOT_FOUND));\n+\n+        exist = exist = execute(indexTemplateV2ExistRequest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzAwMTk2OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexTemplatesV2ResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowODoyNVrOGCNnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNTo0NlrOGCWHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MzQyMw==", "bodyText": "I think these methods (the randomization) can be reused from the component template tests you already added to the HLRC?", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404973423", "createdAt": "2020-04-07T17:08:25Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexTemplatesV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.AliasMetadata;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.compress.CompressedXContent;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;\n+\n+public class GetIndexTemplatesV2ResponseTests extends ESTestCase {\n+\n+    public void testFromXContent() throws Exception {\n+        xContentTester(\n+            this::createParser,\n+            GetIndexTemplatesV2ResponseTests::createTestInstance,\n+            GetIndexTemplatesV2ResponseTests::toXContent,\n+            GetIndexTemplatesV2Response::fromXContent)\n+            .supportsUnknownFields(true)\n+            .randomFieldsExcludeFilter(a -> true)\n+            .test();\n+    }\n+\n+    private static GetIndexTemplatesV2Response createTestInstance() {\n+        Map<String, IndexTemplateV2> templates = new HashMap<>();\n+        if (randomBoolean()) {\n+            int count = randomInt(10);\n+            for (int i = 0; i < count; i++) {\n+                templates.put(randomAlphaOfLength(10), randomTemplate());\n+            }\n+        }\n+        return new GetIndexTemplatesV2Response(templates);\n+    }\n+\n+    private static void toXContent(GetIndexTemplatesV2Response response, XContentBuilder builder) throws IOException {\n+        builder.startObject();\n+        builder.startArray(\"index_templates\");\n+        for (Map.Entry<String, IndexTemplateV2> e : response.getIndexTemplates().entrySet()) {\n+            builder.startObject();\n+            builder.field(\"name\", e.getKey());\n+            builder.field(\"index_template\");\n+            e.getValue().toXContent(builder, null);\n+            builder.endObject();\n+        }\n+        builder.endArray();\n+        builder.endObject();\n+    }\n+\n+    private static IndexTemplateV2 randomTemplate() {\n+        Settings settings = null;\n+        CompressedXContent mappings = null;\n+        Map<String, AliasMetadata> aliases = null;\n+        List<String> patterns = Arrays.asList(generateRandomStringArray(10, 10, false, false));\n+        List<String> composedOf = null;\n+        if (randomBoolean()) {\n+            settings = randomSettings();\n+        }\n+        if (randomBoolean()) {\n+            mappings = randomMappings();\n+        }\n+        if (randomBoolean()) {\n+            aliases = randomAliases();\n+        }\n+        if (randomBoolean()) {\n+            composedOf = Arrays.asList(generateRandomStringArray(10, 10, false, false));\n+        }\n+        Template template = new Template(settings, mappings, aliases);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMjY1OA==", "bodyText": "Yep, that's a good idea, I've changed it", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r405112658", "createdAt": "2020-04-07T21:05:46Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexTemplatesV2ResponseTests.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.AliasMetadata;\n+import org.elasticsearch.cluster.metadata.IndexTemplateV2;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.compress.CompressedXContent;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;\n+\n+public class GetIndexTemplatesV2ResponseTests extends ESTestCase {\n+\n+    public void testFromXContent() throws Exception {\n+        xContentTester(\n+            this::createParser,\n+            GetIndexTemplatesV2ResponseTests::createTestInstance,\n+            GetIndexTemplatesV2ResponseTests::toXContent,\n+            GetIndexTemplatesV2Response::fromXContent)\n+            .supportsUnknownFields(true)\n+            .randomFieldsExcludeFilter(a -> true)\n+            .test();\n+    }\n+\n+    private static GetIndexTemplatesV2Response createTestInstance() {\n+        Map<String, IndexTemplateV2> templates = new HashMap<>();\n+        if (randomBoolean()) {\n+            int count = randomInt(10);\n+            for (int i = 0; i < count; i++) {\n+                templates.put(randomAlphaOfLength(10), randomTemplate());\n+            }\n+        }\n+        return new GetIndexTemplatesV2Response(templates);\n+    }\n+\n+    private static void toXContent(GetIndexTemplatesV2Response response, XContentBuilder builder) throws IOException {\n+        builder.startObject();\n+        builder.startArray(\"index_templates\");\n+        for (Map.Entry<String, IndexTemplateV2> e : response.getIndexTemplates().entrySet()) {\n+            builder.startObject();\n+            builder.field(\"name\", e.getKey());\n+            builder.field(\"index_template\");\n+            e.getValue().toXContent(builder, null);\n+            builder.endObject();\n+        }\n+        builder.endArray();\n+        builder.endObject();\n+    }\n+\n+    private static IndexTemplateV2 randomTemplate() {\n+        Settings settings = null;\n+        CompressedXContent mappings = null;\n+        Map<String, AliasMetadata> aliases = null;\n+        List<String> patterns = Arrays.asList(generateRandomStringArray(10, 10, false, false));\n+        List<String> composedOf = null;\n+        if (randomBoolean()) {\n+            settings = randomSettings();\n+        }\n+        if (randomBoolean()) {\n+            mappings = randomMappings();\n+        }\n+        if (randomBoolean()) {\n+            aliases = randomAliases();\n+        }\n+        if (randomBoolean()) {\n+            composedOf = Arrays.asList(generateRandomStringArray(10, 10, false, false));\n+        }\n+        Template template = new Template(settings, mappings, aliases);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MzQyMw=="}, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzAwNDc5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowOTowNFrOGCNpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowOTowNFrOGCNpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3Mzg2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A request to read the content of component templates\n          \n          \n            \n             * A request to read the content of index templates", "url": "https://github.com/elastic/elasticsearch/pull/54838#discussion_r404973863", "createdAt": "2020-04-07T17:09:04Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetIndexTemplatesV2Request.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+/**\n+ * A request to read the content of component templates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9dcbe2aafb4af9b4a8d4f4fe1e06316f3194fc"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1260, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}