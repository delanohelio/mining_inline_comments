{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjUzOTk2", "number": 53037, "title": "Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry", "bodyText": "This commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\nrelates to the values-source refactoring meta issue #42949.", "createdAt": "2020-03-02T23:03:39Z", "url": "https://github.com/elastic/elasticsearch/pull/53037", "merged": true, "mergeCommit": {"oid": "7ed6a7ecde32fb05ce190894485c58b8ce95a1c4"}, "closed": true, "closedAt": "2020-03-09T19:46:02Z", "author": {"login": "talevy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ18NYAH2gAyMzgyNjUzOTk2OmJlZGZjYmFiNDVjYWY0MzEwNmNhNmE5ZTNlY2ViMWUwZDJjNmJhOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLH_kSgFqTM3MDY2ODg3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bedfcbab45caf43106ca6a9e3eceb1e0d2c6ba99", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/bedfcbab45caf43106ca6a9e3eceb1e0d2c6ba99", "committedDate": "2020-03-02T23:02:08Z", "message": "Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd8c89550e879ee1facc71d219cc8abf348ac92", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/1cd8c89550e879ee1facc71d219cc8abf348ac92", "committedDate": "2020-03-02T23:09:59Z", "message": "Merge remote-tracking branch 'elastic/feature/extensible-values-source' into evs-geogrid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c503fe8e93755153c1570357514270a4df7591da", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/c503fe8e93755153c1570357514270a4df7591da", "committedDate": "2020-03-02T23:15:02Z", "message": "add supportedFieldType testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b35aa191f9224b6d7d9b3b9c26d000ef9518d27", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/4b35aa191f9224b6d7d9b3b9c26d000ef9518d27", "committedDate": "2020-03-03T18:42:21Z", "message": "Merge remote-tracking branch 'elastic/feature/extensible-values-source' into evs-geogrid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2f63bfa507a5b89a2dcffa8298b875d69c6239", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c2f63bfa507a5b89a2dcffa8298b875d69c6239", "committedDate": "2020-03-03T18:54:40Z", "message": "update supplier to use generic ValuesSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODA0Mjg4", "url": "https://github.com/elastic/elasticsearch/pull/53037#pullrequestreview-368804288", "createdAt": "2020-03-04T14:07:03Z", "commit": {"oid": "7c2f63bfa507a5b89a2dcffa8298b875d69c6239"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowNzowM1rOFxujtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDozNzo0NlrOFxvwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzM0OA==", "bodyText": "I didn't know you could type cast a lambda, that's a really elegant solution.   I kind of want to go back and change some of the others to use this pattern.", "url": "https://github.com/elastic/elasticsearch/pull/53037#discussion_r387687348", "createdAt": "2020-03-04T14:07:03Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java", "diffHunk": "@@ -79,15 +83,26 @@ protected Aggregator doCreateInternal(final ValuesSource valuesSource,\n                                             boolean collectsFromSingleBucket,\n                                             List<PipelineAggregator> pipelineAggregators,\n                                             Map<String, Object> metaData) throws IOException {\n-        if (valuesSource instanceof ValuesSource.GeoPoint  == false) {\n-            throw new AggregationExecutionException(\"ValuesSource type \" + valuesSource.toString() + \"is not supported for aggregation \" +\n-                this.name());\n+        AggregatorSupplier aggregatorSupplier = queryShardContext.getValuesSourceRegistry()\n+            .getAggregator(config.valueSourceType(), GeoHashGridAggregationBuilder.NAME);\n+        if (aggregatorSupplier instanceof GeoGridAggregatorSupplier == false) {\n+            throw new AggregationExecutionException(\"Registry miss-match - expected \"\n+                + GeoGridAggregatorSupplier.class.getName() + \", found [\" + aggregatorSupplier.getClass().toString() + \"]\");\n         }\n         if (collectsFromSingleBucket == false) {\n             return asMultiBucketAggregator(this, searchContext, parent);\n         }\n         CellIdSource cellIdSource = new CellIdSource((ValuesSource.GeoPoint) valuesSource, precision, geoBoundingBox, Geohash::longEncode);\n-        return new GeoHashGridAggregator(name, factories, cellIdSource, requiredSize, shardSize,\n+\n+        return ((GeoGridAggregatorSupplier) aggregatorSupplier).build(name, factories, cellIdSource, requiredSize, shardSize,\n             searchContext, parent, pipelineAggregators, metaData);\n     }\n+\n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(GeoHashGridAggregationBuilder.NAME, CoreValuesSourceType.GEOPOINT,\n+            (GeoGridAggregatorSupplier) (name, factories, valuesSource, requiredSize, shardSize, aggregationContext, parent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2f63bfa507a5b89a2dcffa8298b875d69c6239"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5Mjc5Ng==", "bodyText": "I think we need to move creating the CellIdSource into the supplier.  This line is casting to a GeoPoint, but we don't know that we always have a GeoPoint here, because we can't know at compile time what Values Sources have been registered for this aggregation.  My guideline has been that we should only care about ValuesSource subclasses at the supplier layer or the aggregator itself, not the factory or the builder.", "url": "https://github.com/elastic/elasticsearch/pull/53037#discussion_r387692796", "createdAt": "2020-03-04T14:16:20Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java", "diffHunk": "@@ -79,15 +83,26 @@ protected Aggregator doCreateInternal(final ValuesSource valuesSource,\n                                             boolean collectsFromSingleBucket,\n                                             List<PipelineAggregator> pipelineAggregators,\n                                             Map<String, Object> metaData) throws IOException {\n-        if (valuesSource instanceof ValuesSource.GeoPoint  == false) {\n-            throw new AggregationExecutionException(\"ValuesSource type \" + valuesSource.toString() + \"is not supported for aggregation \" +\n-                this.name());\n+        AggregatorSupplier aggregatorSupplier = queryShardContext.getValuesSourceRegistry()\n+            .getAggregator(config.valueSourceType(), GeoHashGridAggregationBuilder.NAME);\n+        if (aggregatorSupplier instanceof GeoGridAggregatorSupplier == false) {\n+            throw new AggregationExecutionException(\"Registry miss-match - expected \"\n+                + GeoGridAggregatorSupplier.class.getName() + \", found [\" + aggregatorSupplier.getClass().toString() + \"]\");\n         }\n         if (collectsFromSingleBucket == false) {\n             return asMultiBucketAggregator(this, searchContext, parent);\n         }\n         CellIdSource cellIdSource = new CellIdSource((ValuesSource.GeoPoint) valuesSource, precision, geoBoundingBox, Geohash::longEncode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2f63bfa507a5b89a2dcffa8298b875d69c6239"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNjk4Mg==", "bodyText": "My preference is to PR these tests separately against master first, so we can validate that the type support hasn't changed in the registry branch.", "url": "https://github.com/elastic/elasticsearch/pull/53037#discussion_r387706982", "createdAt": "2020-03-04T14:37:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregatorTestCase.java", "diffHunk": "@@ -240,4 +243,14 @@ private void testCase(Query query, int precision, GeoBoundingBox geoBoundingBox,\n         indexReader.close();\n         directory.close();\n     }\n+\n+    @Override\n+    protected AggregationBuilder createAggBuilderForTypeTest(MappedFieldType fieldType, String fieldName) {\n+        return createBuilder(\"foo\").field(fieldName);\n+    }\n+\n+    @Override\n+    protected List<ValuesSourceType> getSupportedValuesSourceTypes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2f63bfa507a5b89a2dcffa8298b875d69c6239"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94e9b770997ef54f4febf984d5684a8048382a0", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/c94e9b770997ef54f4febf984d5684a8048382a0", "committedDate": "2020-03-05T18:25:56Z", "message": "respond to review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f09b34b1b3d7f53aecab4fae46619afaf58bbf0", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f09b34b1b3d7f53aecab4fae46619afaf58bbf0", "committedDate": "2020-03-06T00:00:11Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22379a4c42e5b9804133ba3fd0c0f332131f4fe3", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/22379a4c42e5b9804133ba3fd0c0f332131f4fe3", "committedDate": "2020-03-06T21:04:13Z", "message": "Merge remote-tracking branch 'elastic/feature/extensible-values-source' into evs-geogrid"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjY4ODc4", "url": "https://github.com/elastic/elasticsearch/pull/53037#pullrequestreview-370668878", "createdAt": "2020-03-06T22:38:01Z", "commit": {"oid": "22379a4c42e5b9804133ba3fd0c0f332131f4fe3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}