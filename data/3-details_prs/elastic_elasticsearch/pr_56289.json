{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTkyNDcx", "number": 56289, "title": "Use snapshot information to build searchable snapshot store MetadataSnapshot", "bodyText": "While investigating possible optimizations to speed up searchable snapshots shard restores, we noticed that Elasticsearch builds the list of shard files on local disk in order to compare it with the list of files contained in the snapshot to restore. This list of files is materialized with a MetadataSnapshot object whose construction involves to read the footer checksum of every files of the shard using Store.checksumFromLuceneFile() method.\nFurther investigation shows that a MetadataSnapshot object is also created for other types of operations like building the list of files to recover in a peer recovery (and primary shard relocation)\nor in order to assign a shard to a node. These operations use the Store.getMetadata(IndexCommit) method to build the list of files and checksums.\nIn the case of searchable snapshots building the MetadataSnapshot object can potentially trigger cache misses, which in turn can cause the download and the writing in cache of the last range of the file in order to check the 16 bytes footer. This in turn can cause more evictions.\nSince searchable snapshots already contains the footer information of every file in BlobStoreIndexShardSnapshot it can directly read the checksum from it and avoid to use the cache at all to create a MetadataSnapshot for the operations mentioned above.\nThis pull request adds a shortcut to the SearchableSnapshotDirectory.openInput() method - similarly to what already exists for segment infos - so that it creates a specific IndexInput for checksum reading operation.", "createdAt": "2020-05-06T16:09:05Z", "url": "https://github.com/elastic/elasticsearch/pull/56289", "merged": true, "mergeCommit": {"oid": "e1dbe2606ce740507bb7cfd405630f0da071179f"}, "closed": true, "closedAt": "2020-05-08T07:41:13Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcequywAH2gAyNDE0MTkyNDcxOjBhYmFhOGQ5MjJkYzBkMTI2NjZjNGUwMWIzYjFmM2I2MTQ1NWVhNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfAbGUAFqTQwNzY2OTYwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "committedDate": "2020-05-06T15:50:56Z", "message": "Use ChecksumBlobContainerIndexInput"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzYzMDg3", "url": "https://github.com/elastic/elasticsearch/pull/56289#pullrequestreview-407363087", "createdAt": "2020-05-07T10:57:56Z", "commit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1Nzo1NlrOGR5SVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMDozOFrOGR5X1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzU1OA==", "bodyText": "Not sure EOFException is right here, maybe an IAE would be appropriate. I think it'd be good to assert that this doesn't happen too.", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417558", "createdAt": "2020-05-07T10:57:56Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzcyMQ==", "bodyText": "Can we assert that this is not called as well?", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417721", "createdAt": "2020-05-07T10:58:14Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzc0Mw==", "bodyText": "Can we assert that this is not called as well?", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417743", "createdAt": "2020-05-07T10:58:16Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IndexInput clone() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ==", "bodyText": "Should we set position = -offset here too? I think it's strange, although probably irrelevant, that a newly-opened index input has a nonzero file pointer.", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421418965", "createdAt": "2020-05-07T11:00:38Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709e64424108b0863a96884cc682ad7bbae61d5a", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/709e64424108b0863a96884cc682ad7bbae61d5a", "committedDate": "2020-05-07T13:50:55Z", "message": "feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f0a49d1d496f0ca95f338a590c224c673b580a", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/35f0a49d1d496f0ca95f338a590c224c673b580a", "committedDate": "2020-05-07T14:27:04Z", "message": "Merge branch 'master' into checksum-footers-searchable-snapshots"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjY5NjA0", "url": "https://github.com/elastic/elasticsearch/pull/56289#pullrequestreview-407669604", "createdAt": "2020-05-07T17:07:20Z", "commit": {"oid": "35f0a49d1d496f0ca95f338a590c224c673b580a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 292, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}