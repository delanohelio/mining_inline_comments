{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTM5NjIw", "number": 54380, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NDozM1rODsvECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzowNTozMlrODvVjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM1MDE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0NDozM1rOF9wJRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NzowOFrOGAyWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ==", "bodyText": "I think (per a slack conversation) that we'll handle case-sensitivity separately, so no need for the argument?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400296261", "createdAt": "2020-03-30T15:44:33Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzMyMg==", "bodyText": "yeah, was not clear on this last week, so left it here for now. will remove as needed.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400297322", "createdAt": "2020-03-30T15:46:05Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODIxMw==", "bodyText": "Removed the optional parameter.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478213", "createdAt": "2020-04-04T14:47:08Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg0NjE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0MTozNFrOF90-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0Njo1M1rOGAyWsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NTM3Ng==", "bodyText": "Package I think should be org.elasticsearch.xpack.eql.expression.function.scalar.string.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400375376", "createdAt": "2020-03-30T17:41:34Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODE5NQ==", "bodyText": "Moved to the scalar.string package.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478195", "createdAt": "2020-04-04T14:46:53Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NTM3Ng=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg1ODg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0NDo0OVrOF91GVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NzozMlrOGAyW7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ==", "bodyText": "Personally, I find haystack and needle inappropriate here. I know that it fits with the purpose of the function :-), but I prefer string and pattern  or substring.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400377429", "createdAt": "2020-03-30T17:44:49Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMTg3OA==", "bodyText": "http://man7.org/linux/man-pages/man3/strstr.3.html :-)", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400531878", "createdAt": "2020-03-30T22:26:53Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODI1NQ==", "bodyText": "Renamed params to string and substring.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478255", "createdAt": "2020-04-04T14:47:32Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg3MjQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0ODowOFrOF91OpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0ODowM1rOGAyXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTU1Nw==", "bodyText": "I'm not convinced this method is really needed. It's just a short one-liner... Maybe other reviewers thing otherwise, but I would keep using the ternary operator inline.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400379557", "createdAt": "2020-03-30T17:48:08Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {\n+        super(source, Arrays.asList(haystack, needle, toDefault(caseSensitive)));\n+        this.haystack = haystack;\n+        this.needle = needle;\n+        this.caseSensitive = arguments().get(2);\n+    }\n+\n+    private static Expression toDefault(Expression exp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODMyMg==", "bodyText": "Removed the method since no more optional param.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478322", "createdAt": "2020-04-04T14:48:03Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {\n+        super(source, Arrays.asList(haystack, needle, toDefault(caseSensitive)));\n+        this.haystack = haystack;\n+        this.needle = needle;\n+        this.caseSensitive = arguments().get(2);\n+    }\n+\n+    private static Expression toDefault(Expression exp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTU1Nw=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg3OTU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionPipe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0OTo1MFrOF91TCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0ODoyNVrOGAyXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDY4MQ==", "bodyText": "No caseSensitive?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400380681", "createdAt": "2020-03-30T17:49:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionPipe.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionPipe extends Pipe {\n+\n+    private final Pipe haystack, needle, caseSensitive;\n+\n+    public StringContainsFunctionPipe(Source source, Expression expression, Pipe haystack, Pipe needle, Pipe caseSensitive) {\n+        super(source, expression, Arrays.asList(haystack, needle));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODM2MA==", "bodyText": "Removed caseSensitive param completely.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478360", "createdAt": "2020-04-04T14:48:25Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionPipe.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionPipe extends Pipe {\n+\n+    private final Pipe haystack, needle, caseSensitive;\n+\n+    public StringContainsFunctionPipe(Source source, Expression expression, Pipe haystack, Pipe needle, Pipe caseSensitive) {\n+        super(source, expression, Arrays.asList(haystack, needle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDY4MQ=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg4MzIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1MDo0OFrOF91VXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0ODo1M1rOGAyXnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTI3Ng==", "bodyText": "sstc maybe?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400381276", "createdAt": "2020-03-30T17:50:48Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstringcontains\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQyOQ==", "bodyText": "Updated the NAME", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478429", "createdAt": "2020-04-04T14:48:53Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstringcontains\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTI3Ng=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg4OTczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1MjozNVrOF91Ziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0OToyNFrOGAyX0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw==", "bodyText": "Why this class? Shouldn't this method belong to a class that has other String utility method like this one here? And is this really needed to be placed in a separate class?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400382347", "createdAt": "2020-03-30T17:52:35Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import java.util.Locale;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringContainsUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyODM2MA==", "bodyText": "I think these methods could be in function.scalar.string.StringUtils", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400528360", "createdAt": "2020-03-30T22:18:19Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import java.util.Locale;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringContainsUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQ4Mg==", "bodyText": "Moved the method to function.scalar.string.StringUtils.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478482", "createdAt": "2020-04-04T14:49:24Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import java.util.Locale;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringContainsUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw=="}, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgxMDgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxOToxMVrOF9-VXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxOToxMVrOF9-VXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyODczMw==", "bodyText": "same convention as the existing? I believe function names are looked up case insensitive anyway\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            def(StringContains.class, StringContains::new, \"stringcontains\"),\n          \n          \n            \n                            def(StringContains.class, StringContains::new, \"stringContains\"),", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400528733", "createdAt": "2020-03-30T22:19:11Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -23,6 +24,7 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(StringContains.class, StringContains::new, \"stringcontains\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODMyNzg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContains.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjozODo1OVrOGBgagg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozMzowN1rOGBiiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMjgzNA==", "bodyText": "we can probably remove this link since Elasticsearch will eventually be the authoritative documentation", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404232834", "createdAt": "2020-04-06T16:38:59Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContains.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NzU4Mw==", "bodyText": "Removed.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404267583", "createdAt": "2020-04-06T17:33:07Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContains.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMjgzNA=="}, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODMzMDc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjozOTozNVrOGBgcPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozOToxN1rOGBixHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (string == null) {\n          \n          \n            \n                    if (string == null || substring == null) {", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404233278", "createdAt": "2020-04-06T16:39:35Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstc\";\n+\n+    private final Processor string, substring;\n+\n+    public StringContainsFunctionProcessor(Processor string, Processor substring) {\n+        this.string = string;\n+        this.substring = substring;\n+    }\n+\n+    public StringContainsFunctionProcessor(StreamInput in) throws IOException {\n+        string = in.readNamedWriteable(Processor.class);\n+        substring = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(string);\n+        out.writeNamedWriteable(substring);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(string.process(input), substring.process(input));\n+    }\n+\n+    public static Object doProcess(Object string, Object substring) {\n+        if (string == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjEwNA==", "bodyText": "throwing exception for now if the second param is null, consistent across all 3 functions that I implemented so far", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404266104", "createdAt": "2020-04-06T17:30:40Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstc\";\n+\n+    private final Processor string, substring;\n+\n+    public StringContainsFunctionProcessor(Processor string, Processor substring) {\n+        this.string = string;\n+        this.substring = substring;\n+    }\n+\n+    public StringContainsFunctionProcessor(StreamInput in) throws IOException {\n+        string = in.readNamedWriteable(Processor.class);\n+        substring = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(string);\n+        out.writeNamedWriteable(substring);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(string.process(input), substring.process(input));\n+    }\n+\n+    public static Object doProcess(Object string, Object substring) {\n+        if (string == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA=="}, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MTM4OA==", "bodyText": "are we leaning towards returning nulls more often and not throwing exceptions?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404271388", "createdAt": "2020-04-06T17:39:17Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstc\";\n+\n+    private final Processor string, substring;\n+\n+    public StringContainsFunctionProcessor(Processor string, Processor substring) {\n+        this.string = string;\n+        this.substring = substring;\n+    }\n+\n+    public StringContainsFunctionProcessor(StreamInput in) throws IOException {\n+        string = in.readNamedWriteable(Processor.class);\n+        substring = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(string);\n+        out.writeNamedWriteable(substring);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(string.process(input), substring.process(input));\n+    }\n+\n+    public static Object doProcess(Object string, Object substring) {\n+        if (string == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA=="}, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODMzNTc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0MDo0N1rOGBgfWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozNzozNVrOGBis1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDA3NA==", "bodyText": "before substring for alphabetical order", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404234074", "createdAt": "2020-04-06T16:40:47Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -36,4 +37,9 @@ public static Boolean startsWith(String s, String pattern) {\n     public static String substring(String s, Number start, Number end) {\n         return (String) SubstringFunctionProcessor.doProcess(s, start, end);\n     }\n+\n+    public static Boolean stringContains(String string, String substring) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDI5NQ==", "bodyText": "Moved.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404270295", "createdAt": "2020-04-06T17:37:35Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -36,4 +37,9 @@ public static Boolean startsWith(String s, String pattern) {\n     public static String substring(String s, Number start, Number end) {\n         return (String) SubstringFunctionProcessor.doProcess(s, start, end);\n     }\n+\n+    public static Boolean stringContains(String string, String substring) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDA3NA=="}, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM0MDMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0MTo1MFrOGBgiGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozODoxM1rOGBiuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDc3OQ==", "bodyText": "between startswith and substring?", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404234779", "createdAt": "2020-04-06T16:41:50Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -103,6 +103,13 @@ InternalEqlScriptUtils.substring(InternalQlScriptUtils.docValue(doc,params.v0),p\n \"params\":{\"v0\":\"file_name.keyword\",\"v1\":-4,\"v2\":null,\"v3\":\".exe\"}\n \n \n+stringContains", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDY4Nw==", "bodyText": "Moved.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404270687", "createdAt": "2020-04-06T17:38:13Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -103,6 +103,13 @@ InternalEqlScriptUtils.substring(InternalQlScriptUtils.docValue(doc,params.v0),p\n \"params\":{\"v0\":\"file_name.keyword\",\"v1\":-4,\"v2\":null,\"v3\":\".exe\"}\n \n \n+stringContains", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDc3OQ=="}, "originalCommit": {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTYxODM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzowMToyMVrOGBs_8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MDozNFrOGCM3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzOTAyNQ==", "bodyText": "string == null ? null : true", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404439025", "createdAt": "2020-04-06T23:01:21Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessorTests.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class StringContainsFunctionProcessorTests extends ESTestCase {\n+\n+    // TODO (AM): consolidate with other functions tests in previous PRs where I already used this pattern once they are merged\n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    protected static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {\n+            callable.call();\n+        }\n+    }\n+\n+    public void testNullOrEmptyParameters() throws Exception {\n+        run(() -> {\n+            String substring = randomBoolean() ? null : randomAlphaOfLength(10);\n+            String str = randomBoolean() ? null : randomAlphaOfLength(10);\n+            if (str != null && substring != null) {\n+                str += substring;\n+                str += randomAlphaOfLength(10);\n+            }\n+            final String string = str;\n+\n+            // The string parameter can be null. Expect exception if any of other parameters is null.\n+            if ((string != null) && (substring == null)) {\n+                EqlIllegalArgumentException e = expectThrows(EqlIllegalArgumentException.class,\n+                        () -> StringContainsFunctionProcessor.doProcess(string, substring));\n+                    assertThat(e.getMessage(), equalTo(\"A string/char is required; received [null]\"));\n+            } else {\n+                assertThat(StringContainsFunctionProcessor.doProcess(string, substring),\n+                        equalTo(string == null? null : true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MTIwMA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404961200", "createdAt": "2020-04-07T16:50:34Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessorTests.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class StringContainsFunctionProcessorTests extends ESTestCase {\n+\n+    // TODO (AM): consolidate with other functions tests in previous PRs where I already used this pattern once they are merged\n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    protected static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {\n+            callable.call();\n+        }\n+    }\n+\n+    public void testNullOrEmptyParameters() throws Exception {\n+        run(() -> {\n+            String substring = randomBoolean() ? null : randomAlphaOfLength(10);\n+            String str = randomBoolean() ? null : randomAlphaOfLength(10);\n+            if (str != null && substring != null) {\n+                str += substring;\n+                str += randomAlphaOfLength(10);\n+            }\n+            final String string = str;\n+\n+            // The string parameter can be null. Expect exception if any of other parameters is null.\n+            if ((string != null) && (substring == null)) {\n+                EqlIllegalArgumentException e = expectThrows(EqlIllegalArgumentException.class,\n+                        () -> StringContainsFunctionProcessor.doProcess(string, substring));\n+                    assertThat(e.getMessage(), equalTo(\"A string/char is required; received [null]\"));\n+            } else {\n+                assertThat(StringContainsFunctionProcessor.doProcess(string, substring),\n+                        equalTo(string == null? null : true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzOTAyNQ=="}, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTYyNzE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzowNTowNFrOGBtE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo0ODoxMVrOGCMxKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDMxNQ==", "bodyText": "Imo, I don't think we need this high degree of unit tests for this particular functionality, but wait for @costin's take on this before modifying this or leaving it as is.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404440315", "createdAt": "2020-04-06T23:05:04Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -8,10 +8,21 @@\n \n import org.elasticsearch.test.ESTestCase;\n \n+import java.util.concurrent.Callable;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.stringContains;\n import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n \n public class StringUtilsTests extends ESTestCase {\n \n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    private static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTUzMQ==", "bodyText": "Removed.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404959531", "createdAt": "2020-04-07T16:48:11Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -8,10 +8,21 @@\n \n import org.elasticsearch.test.ESTestCase;\n \n+import java.util.concurrent.Callable;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.stringContains;\n import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n \n public class StringUtilsTests extends ESTestCase {\n \n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    private static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDMxNQ=="}, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTYyODA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzowNTozMlrOGBtFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1MToxM1rOGCM5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDQ1NA==", "bodyText": "I think this line fits inside the previous one.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404440454", "createdAt": "2020-04-06T23:05:32Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -11,6 +11,23 @@\n import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n \n public class QueryFolderFailTests extends AbstractQueryFolderTestCase {\n+\n+    private String error(String query) {\n+        VerificationException e = expectThrows(VerificationException.class,\n+                () -> plan(query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MTU3Mw==", "bodyText": "Updated.", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404961573", "createdAt": "2020-04-07T16:51:13Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -11,6 +11,23 @@\n import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n \n public class QueryFolderFailTests extends AbstractQueryFolderTestCase {\n+\n+    private String error(String query) {\n+        VerificationException e = expectThrows(VerificationException.class,\n+                () -> plan(query));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDQ1NA=="}, "originalCommit": {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4046, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}