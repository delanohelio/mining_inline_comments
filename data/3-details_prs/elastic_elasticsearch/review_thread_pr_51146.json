{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDg4MjIw", "number": 51146, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTo1NDoyNVrODYy6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyOToyOVrODYzZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzI2NTI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTo1NDoyNVrOFe23Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDo0MTowNlrOFe7Avg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwMDUwMg==", "bodyText": "We have square brackets about the second number in this message but not the first. Should we make it consistent?", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367900502", "createdAt": "2020-01-17T11:54:25Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -135,6 +135,8 @@\n             \"Adjust the analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n     public static final String JOB_AUDIT_MEMORY_STATUS_HARD_LIMIT_PRE_7_2 = \"Job memory status changed to hard_limit at {0}; adjust the \" +\n         \"analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n+    public static final String JOB_AUDIT_EXCESSIVE_EARLY_CATEGORIES = \"{0} categories observed in the first [{1}] buckets.\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2ODQ0Ng==", "bodyText": "The reason I didn't put the first one in square brackets is that it won't vary (at least for a particular version of the product).  The first number will always be 1000 unless somebody changes the code, whereas the second number can vary between different occurrences of the audit message.", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367968446", "createdAt": "2020-01-17T14:41:06Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -135,6 +135,8 @@\n             \"Adjust the analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n     public static final String JOB_AUDIT_MEMORY_STATUS_HARD_LIMIT_PRE_7_2 = \"Job memory status changed to hard_limit at {0}; adjust the \" +\n         \"analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n+    public static final String JOB_AUDIT_EXCESSIVE_EARLY_CATEGORIES = \"{0} categories observed in the first [{1}] buckets.\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwMDUwMg=="}, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzMzODU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyNjo1OFrOFe3i0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDo1NzowNFrOFe7iZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw==", "bodyText": "should we take this chance and make this a long as well? It seems like something that could hit overflow problems.", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367911633", "createdAt": "2020-01-17T12:26:58Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -87,7 +90,9 @@\n     private final FlushListener flushListener;\n     private volatile boolean processKilled;\n     private volatile boolean failed;\n-    private int bucketCount; // only used from the process() thread, so doesn't need to be volatile\n+    private long priorRunsBucketCount;\n+    private int currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2OTE1OQ==", "bodyText": "With a 1 second bucket span it will take 68 years to overflow, so pretty unlikely.  But maybe I can avoid some casting by making it long, which will make the code cleaner.  If so I'll change it.", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367969159", "createdAt": "2020-01-17T14:42:27Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -87,7 +90,9 @@\n     private final FlushListener flushListener;\n     private volatile boolean processKilled;\n     private volatile boolean failed;\n-    private int bucketCount; // only used from the process() thread, so doesn't need to be volatile\n+    private long priorRunsBucketCount;\n+    private int currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw=="}, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3NzA2Mw==", "bodyText": "There wasn't much casting but I changed it anyway just so both variables have the same type.", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367977063", "createdAt": "2020-01-17T14:57:04Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -87,7 +90,9 @@\n     private final FlushListener flushListener;\n     private volatile boolean processKilled;\n     private volatile boolean failed;\n-    private int bucketCount; // only used from the process() thread, so doesn't need to be volatile\n+    private long priorRunsBucketCount;\n+    private int currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw=="}, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzMzOTg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyNzozNlrOFe3jpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyNzozNlrOFe3jpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTg0Ng==", "bodyText": "I was wondering where we'd get this from but it's cool we already pass it in!", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367911846", "createdAt": "2020-01-17T12:27:36Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -122,6 +127,7 @@ public AutodetectResultProcessor(Client client,\n         this.bulkResultsPersister = persister.bulkPersisterBuilder(jobId, this::isAlive);\n         this.timingStatsReporter = new TimingStatsReporter(timingStats, bulkResultsPersister);\n         this.deleteInterimRequired = true;\n+        this.priorRunsBucketCount = timingStats.getBucketCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzM0NDQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyOToyOVrOFe3mKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyOToyOVrOFe3mKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMjQ4OA==", "bodyText": "Now that all this has become more complex than a single call to the persister, I'd be tempted to extract this in a handleCategoryDefinition method.", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367912488", "createdAt": "2020-01-17T12:29:29Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -225,6 +231,18 @@ void processResult(AutodetectResult result) {\n         CategoryDefinition categoryDefinition = result.getCategoryDefinition();\n         if (categoryDefinition != null) {\n             persister.persistCategoryDefinition(categoryDefinition, this::isAlive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4525, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}