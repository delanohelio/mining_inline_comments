{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjUyMDY0", "number": 60070, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMDo1M1rOERU7rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMzo0M1rOERU-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA0MjA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMDo1M1rOG1-ZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1ODo1OVrOG2TbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MDA3Mg==", "bodyText": "Should we add this to CcrRequests.putMappingRequest instead? There is one other caller of that method that does something similar (setting it to 30 minutes, mainly because that felt like \"unbounded\" at the time)", "url": "https://github.com/elastic/elasticsearch/pull/60070#discussion_r459250072", "createdAt": "2020-07-23T07:00:53Z", "author": {"login": "ywelsch"}, "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "diffHunk": "@@ -158,7 +181,8 @@ protected void innerUpdateMapping(long minRequiredMappingVersion, LongConsumer h\n                             return;\n                         }\n                         MappingMetadata mappingMetadata = indexMetadata.mapping();\n-                        PutMappingRequest putMappingRequest = CcrRequests.putMappingRequest(followerIndex.getName(), mappingMetadata);\n+                        PutMappingRequest putMappingRequest = CcrRequests.putMappingRequest(followerIndex.getName(), mappingMetadata)\n+                            .masterNodeTimeout(UNBOUNDED_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a308e4bc9b50ac19534ab7c21af42891820656"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5NDUyMg==", "bodyText": "++. Adjusted in 6ad4d4f.", "url": "https://github.com/elastic/elasticsearch/pull/60070#discussion_r459594522", "createdAt": "2020-07-23T16:58:59Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "diffHunk": "@@ -158,7 +181,8 @@ protected void innerUpdateMapping(long minRequiredMappingVersion, LongConsumer h\n                             return;\n                         }\n                         MappingMetadata mappingMetadata = indexMetadata.mapping();\n-                        PutMappingRequest putMappingRequest = CcrRequests.putMappingRequest(followerIndex.getName(), mappingMetadata);\n+                        PutMappingRequest putMappingRequest = CcrRequests.putMappingRequest(followerIndex.getName(), mappingMetadata)\n+                            .masterNodeTimeout(UNBOUNDED_TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MDA3Mg=="}, "originalCommit": {"oid": "42a308e4bc9b50ac19534ab7c21af42891820656"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA0ODc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMzo0M1rOG1-dsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1ODo0NFrOG2TaoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MTEyMA==", "bodyText": "Instead of checking this here, could we add a transport interceptor in the CCR IT tests that asserts the same thing?", "url": "https://github.com/elastic/elasticsearch/pull/60070#discussion_r459251120", "createdAt": "2020-07-23T07:03:43Z", "author": {"login": "ywelsch"}, "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "diffHunk": "@@ -137,7 +144,23 @@ protected AllocatedPersistentTask createTask(long id, String type, String action\n                                                  PersistentTasksCustomMetadata.PersistentTask<ShardFollowTask> taskInProgress,\n                                                  Map<String, String> headers) {\n         ShardFollowTask params = taskInProgress.getParams();\n-        Client followerClient = wrapClient(client, params.getHeaders());\n+        final Client followerClient;\n+        if (Assertions.ENABLED) {\n+            followerClient = new FilterClient(wrapClient(client, params.getHeaders())) {\n+                @Override\n+                protected <Request extends ActionRequest, Response extends ActionResponse>\n+                void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n+                    if (request instanceof MasterNodeRequest) {\n+                        final TimeValue masterTimeout = ((MasterNodeRequest<?>) request).masterNodeTimeout();\n+                        assert masterTimeout.nanos() == Long.MAX_VALUE :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a308e4bc9b50ac19534ab7c21af42891820656"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5NDQwMQ==", "bodyText": "ok, I've moved this check to tests. See de4fc61.", "url": "https://github.com/elastic/elasticsearch/pull/60070#discussion_r459594401", "createdAt": "2020-07-23T16:58:44Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java", "diffHunk": "@@ -137,7 +144,23 @@ protected AllocatedPersistentTask createTask(long id, String type, String action\n                                                  PersistentTasksCustomMetadata.PersistentTask<ShardFollowTask> taskInProgress,\n                                                  Map<String, String> headers) {\n         ShardFollowTask params = taskInProgress.getParams();\n-        Client followerClient = wrapClient(client, params.getHeaders());\n+        final Client followerClient;\n+        if (Assertions.ENABLED) {\n+            followerClient = new FilterClient(wrapClient(client, params.getHeaders())) {\n+                @Override\n+                protected <Request extends ActionRequest, Response extends ActionResponse>\n+                void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n+                    if (request instanceof MasterNodeRequest) {\n+                        final TimeValue masterTimeout = ((MasterNodeRequest<?>) request).masterNodeTimeout();\n+                        assert masterTimeout.nanos() == Long.MAX_VALUE :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MTEyMA=="}, "originalCommit": {"oid": "42a308e4bc9b50ac19534ab7c21af42891820656"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2109, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}