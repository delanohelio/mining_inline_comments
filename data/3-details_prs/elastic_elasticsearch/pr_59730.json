{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDkwNTU2", "number": 59730, "title": "[DOCS] Updating snapshot/restore pages to align with API changes", "bodyText": "While adding new pages for the snapshot/restore APIs for #56069, it became apparent that the pages related to snapshot/restore (such as Taking a snapshot) contain information that is outdated, incorrect, or needs consolidation. This PR seeks to:\n\nConsolidate and streamline snapshot/restore information\nRemove redundant information\nAdd links to new snapshot/restore API pages\nCorrect erroneous documentation\n\nSpecific changes:\n\nStreamline Create a snapshot and moving GET + DELETE information to respective pages\nIntroduce a dedicated Delete a snapshot page\nRestructure Monitor snapshot and restore page, plus create new section for Retrieving snapshot status\n\nAfter creating a new page for the Restore snapshot API, I'll add links to that page from Restore a snapshot.\nBackports:\n\n7.x #59803\n7.9 #59804\n7.8 #59885", "createdAt": "2020-07-16T20:28:35Z", "url": "https://github.com/elastic/elasticsearch/pull/59730", "merged": true, "mergeCommit": {"oid": "c143bb56cb1bdf82a1b5e8c268f69e528d3f2ed4"}, "closed": true, "closedAt": "2020-07-17T17:08:14Z", "author": {"login": "lockewritesdocs"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1lKUzAH2gAyNDUwNDkwNTU2OjUwZGRmNDUwZmVkZDlkMGM0ZDFlMjU1MGNhMjMyNTE1NDc5ZDg4ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc12mccAH2gAyNDUwNDkwNTU2OjU5OGMwNmMyOWM3NGViNzFjYzNlNDljYjcwOGNiNmYwNWNlMjQyYjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "50ddf450fedd9d0c4d1e2550ca232515479d88e2", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/50ddf450fedd9d0c4d1e2550ca232515479d88e2", "committedDate": "2020-07-16T20:21:50Z", "message": "Updating snapshot/restore pages to align with API changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fab5ab7144a1e44d024758a09e727950178664", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/45fab5ab7144a1e44d024758a09e727950178664", "committedDate": "2020-07-16T21:11:47Z", "message": "Fixing texts in delete snapshot page."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52d6ffce6264d8cc0a23d53923850bb170be3a0d", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/52d6ffce6264d8cc0a23d53923850bb170be3a0d", "committedDate": "2020-07-16T21:57:17Z", "message": "Removing duplicate code sample and making editorial changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDMyNzgy", "url": "https://github.com/elastic/elasticsearch/pull/59730#pullrequestreview-450432782", "createdAt": "2020-07-17T07:28:48Z", "commit": {"oid": "52d6ffce6264d8cc0a23d53923850bb170be3a0d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzoyODo0OVrOGzIYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozMzo1M1rOGzIh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2Nzg3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            snapshot and not used by any other snapshots. If the deleted snapshot operation is started while the snapshot is being\n          \n          \n            \n            snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456267877", "createdAt": "2020-07-17T07:28:49Z", "author": {"login": "original-brownbear"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------\n+\n+When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n+snapshot and not used by any other snapshots. If the deleted snapshot operation is started while the snapshot is being", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d6ffce6264d8cc0a23d53923850bb170be3a0d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2OTI5MQ==", "bodyText": "Hmm, this is a weird sentence now but it wasn't great before either. We simply don't have a good API to monitor restores yet (I'm on it though in #59233). Maybe just remove the restore bit from this sentence for now?", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456269291", "createdAt": "2020-07-17T07:31:41Z", "author": {"login": "original-brownbear"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -1,11 +1,10 @@\n [[snapshots-monitor-snapshot-restore]]\n == Monitor snapshot and restore progress\n-\n ++++\n <titleabbrev>Monitor snapshot and restore</titleabbrev>\n ++++\n \n-There are several ways to monitor the progress of the snapshot and restore processes while they are running. Both\n+Use the <<get-snapshot-api,Get snapshot API>> or the <<get-snapshot-status-api,Get snapshot status API>> to monitor the progress of the snapshot and restore processes while they are running. Both", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d6ffce6264d8cc0a23d53923850bb170be3a0d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MDMwMA==", "bodyText": "status information\n\nThis is not true, you get the status. You just don't get the error message(s) in case it's not SUCCESS.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456270300", "createdAt": "2020-07-17T07:33:53Z", "author": {"login": "original-brownbear"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +19,152 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` will omit all other information\n+about the snapshot, such as status information and the number of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d6ffce6264d8cc0a23d53923850bb170be3a0d"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b80aece7d30c432e63ed954b3be783615e4e92d", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/9b80aece7d30c432e63ed954b3be783615e4e92d", "committedDate": "2020-07-17T12:03:55Z", "message": "Change \"deleted\" to \"delete\"\n\nCo-authored-by: Armin Braun <me@obrown.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/2abba42e4152c1704fa43c81a14c1049f56d41f8", "committedDate": "2020-07-17T14:10:36Z", "message": "Incorporating review feedback and making minor editorial changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzA4NzUz", "url": "https://github.com/elastic/elasticsearch/pull/59730#pullrequestreview-450708753", "createdAt": "2020-07-17T14:32:41Z", "commit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "state": "APPROVED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDozMjo0MVrOGzVXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1MjoxNVrOGzWG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDU5MQ==", "bodyText": "We may want to be clearer by what we mean by expensive here. Memory consumption, storage space, latency, etc.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456480591", "createdAt": "2020-07-17T14:32:41Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/get-snapshot-status-api.asciidoc", "diffHunk": "@@ -88,9 +88,12 @@ Use the get snapshot status API to retrieve detailed information about snapshots\n \n If you specify both the repository name and snapshot, the request retrieves detailed status information for the given snapshot, even if not currently running.\n \n-WARNING: Using this API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n-+\n+[WARNING]\n+====\n+Using this API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MTQwMw==", "bodyText": "I'd remove the title abbrev. Other pages in this section don't use them.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ++++\n          \n          \n            \n            <titleabbrev>Delete snapshot</titleabbrev>\n          \n          \n            \n            ++++", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456481403", "createdAt": "2020-07-17T14:34:03Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MTgyMQ==", "bodyText": "We don't capitalize API names unless they contain a proper noun.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n          \n          \n            \n            Use the <<delete-snapshot-api,delete snapshot API>> to delete a snapshot", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456481821", "createdAt": "2020-07-17T14:34:49Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MjI0Mg==", "bodyText": "I don't think the longer delimiters here help. I keep it to the minimum, which is four.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -----------------------------------\n          \n          \n            \n            DELETE /_snapshot/my_backup/snapshot_1\n          \n          \n            \n            -----------------------------------\n          \n          \n            \n            ----\n          \n          \n            \n            DELETE /_snapshot/my_backup/snapshot_1\n          \n          \n            \n            ----", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456482242", "createdAt": "2020-07-17T14:35:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MzE3Mg==", "bodyText": "I'd break the para here. Seems like a different set of thoughts.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n          \n          \n            \n            snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being\n          \n          \n            \n            When a snapshot is deleted from a repository, {es} deletes all files associated with the\n          \n          \n            \n            snapshot that are not in-use by other snapshots.\n          \n          \n            \n            \n          \n          \n            \n            If the delete snapshot operation starts while the snapshot is being", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456483172", "createdAt": "2020-07-17T14:36:56Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------\n+\n+When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n+snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MzMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            created, the snapshot process halts and all files created as part of the snapshotting process are\n          \n          \n            \n            created, the snapshot process halts and all files created as part of the process are", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456483330", "createdAt": "2020-07-17T14:37:10Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------\n+\n+When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n+snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being\n+created, the snapshot process halts and all files created as part of the snapshotting process are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MzgwMw==", "bodyText": "The second link seems redundant. I also think your Use the... sentence probably belongs before the proceeding one.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            removed. Use the <<delete-snapshot-api,Delete snapshot API>> to cancel long running snapshot operations that were\n          \n          \n            \n            removed. Use the delete snapshot API to cancel long running snapshot operations that were", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456483803", "createdAt": "2020-07-17T14:38:00Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------\n+\n+When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n+snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being\n+created, the snapshot process halts and all files created as part of the snapshotting process are\n+removed. Use the <<delete-snapshot-api,Delete snapshot API>> to cancel long running snapshot operations that were", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4NTIwNA==", "bodyText": "Wildcards and comma-separated values aren't mutually exclusive. snapshot*,my_other_snapshot* is valid. However, you could interpret this section that way.\nI'd reword and maybe add an example of two comma-separated wildcard expressions.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456485204", "createdAt": "2020-07-17T14:40:22Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/delete-snapshot.asciidoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[[delete-snapshots]]\n+== Delete a snapshot\n+++++\n+<titleabbrev>Delete snapshot</titleabbrev>\n+++++\n+\n+////\n+[source,console]\n+-----------------------------------\n+PUT /_snapshot/my_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n+\n+PUT /_snapshot/my_backup/snapshot_3?wait_for_completion=true\n+-----------------------------------\n+// TESTSETUP\n+\n+////\n+\n+Use the <<delete-snapshot-api,Delete snapshot API>> to delete a snapshot\n+from the repository:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_1\n+-----------------------------------\n+\n+When a snapshot is deleted from a repository, {es} deletes all files that are associated with the deleted\n+snapshot and not used by any other snapshots. If the delete snapshot operation is started while the snapshot is being\n+created, the snapshot process halts and all files created as part of the snapshotting process are\n+removed. Use the <<delete-snapshot-api,Delete snapshot API>> to cancel long running snapshot operations that were\n+started by mistake.\n+\n+To delete multiple snapshots from a repository, separate snapshot names by commas or use wildcards:\n+\n+[source,console]\n+-----------------------------------\n+DELETE /_snapshot/my_backup/snapshot_2,snapshot_3\n+DELETE /_snapshot/my_backup/snap*\n+-----------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4NjIwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the <<get-snapshot-api,Get snapshot API>> or the\n          \n          \n            \n            <<get-snapshot-status-api,Get snapshot status API>> to monitor the\n          \n          \n            \n            Use the <<get-snapshot-api,get snapshot API>> or the\n          \n          \n            \n            <<get-snapshot-status-api,get snapshot status API>> to monitor the", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456486203", "createdAt": "2020-07-17T14:42:03Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -1,13 +1,15 @@\n [[snapshots-monitor-snapshot-restore]]\n == Monitor snapshot and restore progress\n-\n ++++\n <titleabbrev>Monitor snapshot and restore</titleabbrev>\n ++++\n \n-There are several ways to monitor the progress of the snapshot and restore processes while they are running. Both\n-operations support `wait_for_completion` parameter that would block client until the operation is completed. This is\n-the simplest method that can be used to get notified about operation completion.\n+Use the <<get-snapshot-api,Get snapshot API>> or the\n+<<get-snapshot-status-api,Get snapshot status API>> to monitor the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Njc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the `_current` parameter to retrieve all currently running\n          \n          \n            \n            Use the `_current` parameter to retrieve information about all currently running", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456486759", "createdAt": "2020-07-17T14:42:58Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4NzA0Mg==", "bodyText": "Bulleted list?", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456487042", "createdAt": "2020-07-17T14:43:27Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4NzYxMA==", "bodyText": "Similar to repositories,\n\nSince you don't mention repositories earlier on this page, I would cut this.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456487610", "createdAt": "2020-07-17T14:44:27Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4Nzk0OA==", "bodyText": "See earlier comment.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456487948", "createdAt": "2020-07-17T14:44:56Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4ODI3OQ==", "bodyText": "An example snippet would help.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456488279", "createdAt": "2020-07-17T14:45:25Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4ODQ5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            both from a cost and performance perspective.  If the only information required is\n          \n          \n            \n            both from a cost and performance perspective. If the only information required is", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456488491", "createdAt": "2020-07-17T14:45:44Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTAxMA==", "bodyText": "A snippet example would be helpful here.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456489010", "createdAt": "2020-07-17T14:46:34Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTM0NQ==", "bodyText": "I don't think this needs to be in a note.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456489345", "createdAt": "2020-07-17T14:47:03Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTY5MQ==", "bodyText": "We try to avoid gerund titles if possible\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Retrieving snapshot status\n          \n          \n            \n            === Retrieve snapshot status", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456489691", "createdAt": "2020-07-17T14:47:35Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDM3NA==", "bodyText": "Missing some articles here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n          \n          \n            \n            To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,get snapshot status API>>. While a snapshot request returns basic information about the snapshot in progress, the snapshot status request returns a", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456490374", "createdAt": "2020-07-17T14:48:33Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDY2Mw==", "bodyText": "See earlier comment re: expensive.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n          \n          \n            \n            Using the get snapshot status API to retrieve any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456490663", "createdAt": "2020-07-17T14:49:02Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n complete breakdown of the current state for each shard participating in the snapshot.\n \n-The restore process piggybacks on the standard recovery mechanism of the\n-Elasticsearch. As a result, standard recovery monitoring services can be used\n-to monitor the state of restore. When the restore operation is executed the\n+[WARNING]\n+====\n+Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTE2Nw==", "bodyText": "Avoid gerund titles. This also needs an explicit anchor, like [[monitor-restore-operations]].\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Monitoring restore operations\n          \n          \n            \n            === Monitor restore operations", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456491167", "createdAt": "2020-07-17T14:49:42Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n complete breakdown of the current state for each shard participating in the snapshot.\n \n-The restore process piggybacks on the standard recovery mechanism of the\n-Elasticsearch. As a result, standard recovery monitoring services can be used\n-to monitor the state of restore. When the restore operation is executed the\n+[WARNING]\n+====\n+Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n+\n+For example, if you have 100 snapshots with 1,000 shards each, the API request will result in 100,000 file reads (100 snapshots * 1,000 shards). Depending on the latency of your file storage, the request can take extremely long to retrieve results.\n+====\n+\n+The following request retrieves all currently running snapshots with\n+detailed status information:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_status\n+-----------------------------------\n+\n+By specifying a repository name, it's possible\n+to limit the results to a particular repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_status\n+-----------------------------------\n+\n+If both repository name and snapshot name are specified, the request\n+returns detailed status information for the given snapshot, even\n+if not currently running:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/snapshot_1/_status\n+-----------------------------------\n+\n+[discrete]\n+=== Monitoring restore operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTU0NA==", "bodyText": "Needs an explicit anchor too.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456491544", "createdAt": "2020-07-17T14:50:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n complete breakdown of the current state for each shard participating in the snapshot.\n \n-The restore process piggybacks on the standard recovery mechanism of the\n-Elasticsearch. As a result, standard recovery monitoring services can be used\n-to monitor the state of restore. When the restore operation is executed the\n+[WARNING]\n+====\n+Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n+\n+For example, if you have 100 snapshots with 1,000 shards each, the API request will result in 100,000 file reads (100 snapshots * 1,000 shards). Depending on the latency of your file storage, the request can take extremely long to retrieve results.\n+====\n+\n+The following request retrieves all currently running snapshots with\n+detailed status information:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_status\n+-----------------------------------\n+\n+By specifying a repository name, it's possible\n+to limit the results to a particular repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_status\n+-----------------------------------\n+\n+If both repository name and snapshot name are specified, the request\n+returns detailed status information for the given snapshot, even\n+if not currently running:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/snapshot_1/_status\n+-----------------------------------\n+\n+[discrete]\n+=== Monitoring restore operations\n+\n+The restore process piggybacks on the standard recovery mechanism of\n+{es}. As a result, standard recovery monitoring services can be used\n+to monitor the state of restore. When the restore operation starts, the\n cluster typically goes into `yellow` state because the restore operation works\n-by recovering primary shards of the restored indices. Once the recovery of the\n-primary shards is completed Elasticsearch switches to the standard replication\n-process that creates the required number of replicas. Once all required\n+by recovering primary shards of the restored indices. After the recovery of the\n+primary shards is completed, {es} switches to the standard replication\n+process that creates the required number of replicas. When all required\n replicas are created, the cluster switches to the `green` states.\n \n The cluster health operation provides only a high level status of the restore process. It's possible to get more\n detailed insight into the current state of the recovery process by using <<indices-recovery, index recovery>> and\n <<cat-recovery, cat recovery>> APIs.\n \n-[float]\n+[discrete]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTY0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            running snapshot was started by mistake, or takes unusually long, it can be stopped using the <<delete-snapshot-api,Delete snapshot API>>.\n          \n          \n            \n            running snapshot was started by mistake, or takes unusually long, it can be stopped using the <<delete-snapshot-api,delete snapshot API>>.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456491643", "createdAt": "2020-07-17T14:50:26Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n complete breakdown of the current state for each shard participating in the snapshot.\n \n-The restore process piggybacks on the standard recovery mechanism of the\n-Elasticsearch. As a result, standard recovery monitoring services can be used\n-to monitor the state of restore. When the restore operation is executed the\n+[WARNING]\n+====\n+Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n+\n+For example, if you have 100 snapshots with 1,000 shards each, the API request will result in 100,000 file reads (100 snapshots * 1,000 shards). Depending on the latency of your file storage, the request can take extremely long to retrieve results.\n+====\n+\n+The following request retrieves all currently running snapshots with\n+detailed status information:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_status\n+-----------------------------------\n+\n+By specifying a repository name, it's possible\n+to limit the results to a particular repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_status\n+-----------------------------------\n+\n+If both repository name and snapshot name are specified, the request\n+returns detailed status information for the given snapshot, even\n+if not currently running:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/snapshot_1/_status\n+-----------------------------------\n+\n+[discrete]\n+=== Monitoring restore operations\n+\n+The restore process piggybacks on the standard recovery mechanism of\n+{es}. As a result, standard recovery monitoring services can be used\n+to monitor the state of restore. When the restore operation starts, the\n cluster typically goes into `yellow` state because the restore operation works\n-by recovering primary shards of the restored indices. Once the recovery of the\n-primary shards is completed Elasticsearch switches to the standard replication\n-process that creates the required number of replicas. Once all required\n+by recovering primary shards of the restored indices. After the recovery of the\n+primary shards is completed, {es} switches to the standard replication\n+process that creates the required number of replicas. When all required\n replicas are created, the cluster switches to the `green` states.\n \n The cluster health operation provides only a high level status of the restore process. It's possible to get more\n detailed insight into the current state of the recovery process by using <<indices-recovery, index recovery>> and\n <<cat-recovery, cat recovery>> APIs.\n \n-[float]\n+[discrete]\n === Stop snapshot and restore operations\n \n The snapshot and restore framework allows running only one snapshot or one restore operation at a time. If a currently\n-running snapshot was executed by mistake, or takes unusually long, it can be terminated using the snapshot delete operation.\n-The snapshot delete operation checks if the deleted snapshot is currently running and if it does, the delete operation stops\n+running snapshot was started by mistake, or takes unusually long, it can be stopped using the <<delete-snapshot-api,Delete snapshot API>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTk2Mw==", "bodyText": "Needs an explicit anchor.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456491963", "createdAt": "2020-07-17T14:50:55Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/monitor-snapshot-restore.asciidoc", "diffHunk": "@@ -20,71 +22,151 @@ PUT /_snapshot/my_backup\n   }\n }\n \n+PUT /_snapshot/my_fs_backup\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_other_backup_location\"\n+  }\n+}\n+\n PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true\n -----------------------------------\n // TESTSETUP\n \n ////\n \n-The snapshot operation can be also monitored by periodic calls to the snapshot info:\n+Use the `_current` parameter to retrieve all currently running\n+snapshots in the cluster:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_current\n+-----------------------------------\n+\n+Including a snapshot name in the request retrieves information about a single snapshot:\n \n [source,console]\n -----------------------------------\n GET /_snapshot/my_backup/snapshot_1\n -----------------------------------\n \n-Please note that snapshot info operation uses the same resources and thread pool as the snapshot operation. So,\n-executing a snapshot info operation while large shards are being snapshotted can cause the snapshot info operation to wait\n-for available resources before returning the result. On very large shards the wait time can be significant.\n+This request retrieves basic information about the snapshot, including start and end time, version of\n+{es} that created the snapshot, the list of included data streams and indices, the current state of the\n+snapshot and the list of failures that occurred during the snapshot.\n \n-To get more immediate and complete information about snapshots the snapshot status command can be used instead:\n+Similar to repositories, you can retrieve information about multiple snapshots in a single request, and wildcards are supported:\n \n [source,console]\n -----------------------------------\n-GET /_snapshot/my_backup/snapshot_1/_status\n+GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n+-----------------------------------\n+\n+Separate repository names with commas or use wildcards to retrieve snapshots from multiple repositories:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_all\n+GET /_snapshot/my_backup,my_fs_backup\n+GET /_snapshot/my*/snap*\n+-----------------------------------\n+\n+Add the `_all` parameter to the request to list all snapshots currently stored in the repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_all\n -----------------------------------\n-// TEST[continued]\n \n-While snapshot info method returns only basic information about the snapshot in progress, the snapshot status returns\n+This request fails if some of the snapshots are unavailable. Use the boolean parameter `ignore_unavailable` to\n+return all snapshots that are currently available.\n+\n+Getting all snapshots in the repository can be costly on cloud-based repositories,\n+both from a cost and performance perspective.  If the only information required is\n+the snapshot names or UUIDs in the repository and the data streams and indices in each snapshot, then\n+the optional boolean parameter `verbose` can be set to `false` to execute a more\n+performant and cost-effective retrieval of the snapshots in the repository.\n+\n+NOTE: Setting `verbose` to `false` omits additional information\n+about the snapshot, such as metadata, start and end time, number of shards that include the snapshot, and error messages. The default value of the `verbose` parameter is `true`.\n+\n+[discrete]\n+[[get-snapshot-detailed-status]]\n+=== Retrieving snapshot status\n+To retrieve more detailed information about snapshots, use the <<get-snapshot-status-api,Get snapshot status API>>. While snapshot request returns only basic information about the snapshot in progress, the snapshot status request returns\n complete breakdown of the current state for each shard participating in the snapshot.\n \n-The restore process piggybacks on the standard recovery mechanism of the\n-Elasticsearch. As a result, standard recovery monitoring services can be used\n-to monitor the state of restore. When the restore operation is executed the\n+[WARNING]\n+====\n+Using the Get snapshot status API to return any status results other than the currently running snapshots (`_current`) can be very expensive. Each request to retrieve snapshot status results in file reads from every shard in a snapshot, for each snapshot.\n+\n+For example, if you have 100 snapshots with 1,000 shards each, the API request will result in 100,000 file reads (100 snapshots * 1,000 shards). Depending on the latency of your file storage, the request can take extremely long to retrieve results.\n+====\n+\n+The following request retrieves all currently running snapshots with\n+detailed status information:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/_status\n+-----------------------------------\n+\n+By specifying a repository name, it's possible\n+to limit the results to a particular repository:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/_status\n+-----------------------------------\n+\n+If both repository name and snapshot name are specified, the request\n+returns detailed status information for the given snapshot, even\n+if not currently running:\n+\n+[source,console]\n+-----------------------------------\n+GET /_snapshot/my_backup/snapshot_1/_status\n+-----------------------------------\n+\n+[discrete]\n+=== Monitoring restore operations\n+\n+The restore process piggybacks on the standard recovery mechanism of\n+{es}. As a result, standard recovery monitoring services can be used\n+to monitor the state of restore. When the restore operation starts, the\n cluster typically goes into `yellow` state because the restore operation works\n-by recovering primary shards of the restored indices. Once the recovery of the\n-primary shards is completed Elasticsearch switches to the standard replication\n-process that creates the required number of replicas. Once all required\n+by recovering primary shards of the restored indices. After the recovery of the\n+primary shards is completed, {es} switches to the standard replication\n+process that creates the required number of replicas. When all required\n replicas are created, the cluster switches to the `green` states.\n \n The cluster health operation provides only a high level status of the restore process. It's possible to get more\n detailed insight into the current state of the recovery process by using <<indices-recovery, index recovery>> and\n <<cat-recovery, cat recovery>> APIs.\n \n-[float]\n+[discrete]\n === Stop snapshot and restore operations\n \n The snapshot and restore framework allows running only one snapshot or one restore operation at a time. If a currently\n-running snapshot was executed by mistake, or takes unusually long, it can be terminated using the snapshot delete operation.\n-The snapshot delete operation checks if the deleted snapshot is currently running and if it does, the delete operation stops\n+running snapshot was started by mistake, or takes unusually long, it can be stopped using the <<delete-snapshot-api,Delete snapshot API>>.\n+This operation checks whether the deleted snapshot is currently running. If it is, the delete snapshot operation stops\n that snapshot before deleting the snapshot data from the repository.\n \n [source,console]\n -----------------------------------\n DELETE /_snapshot/my_backup/snapshot_1\n -----------------------------------\n-// TEST[continued]\n \n The restore operation uses the standard shard recovery mechanism. Therefore, any currently running restore operation can\n-be canceled by deleting data streams and indices that are being restored. Please note that data for all deleted data streams and indices will be removed\n+be canceled by deleting data streams and indices that are being restored. Data for all deleted data streams and indices will be removed\n from the cluster as a result of this operation.\n \n-[float]\n-=== Effect of cluster blocks on snapshot and restore \n+[discrete]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MjIwNQ==", "bodyText": "I don't this is needed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ++++\n          \n          \n            \n            <titleabbrev>Restore snapshot</titleabbrev>\n          \n          \n            \n            ++++", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456492205", "createdAt": "2020-07-17T14:51:18Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/restore-snapshot.asciidoc", "diffHunk": "@@ -1,5 +1,8 @@\n [[snapshots-restore-snapshot]]\n == Restore a snapshot\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MjMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ++++\n          \n          \n            \n            <titleabbrev>Create snapshot</titleabbrev>\n          \n          \n            \n            ++++", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456492328", "createdAt": "2020-07-17T14:51:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/take-snapshot.asciidoc", "diffHunk": "@@ -1,9 +1,15 @@\n [[snapshots-take-snapshot]]\n-== Take a snapshot\n+== Create a snapshot\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MjQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the <<put-snapshot-repo-api,Put snapshot repository API>> to register or update a snapshot repository, and then use the <<create-snapshot-api,Create snapshot API>> to create a snapshot in a repository.\n          \n          \n            \n            Use the <<put-snapshot-repo-api,put snapshot repository API>> to register or update a snapshot repository, and then use the <<create-snapshot-api,create snapshot API>> to create a snapshot in a repository.", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456492458", "createdAt": "2020-07-17T14:51:42Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/take-snapshot.asciidoc", "diffHunk": "@@ -1,9 +1,15 @@\n [[snapshots-take-snapshot]]\n-== Take a snapshot\n+== Create a snapshot\n+++++\n+<titleabbrev>Create snapshot</titleabbrev>\n+++++\n \n A repository can contain multiple snapshots of the same cluster. Snapshots are identified by unique names within the\n-cluster. A snapshot with the name `snapshot_1` in the repository `my_backup` can be created by executing the following\n-command:\n+cluster.\n+\n+Use the <<put-snapshot-repo-api,Put snapshot repository API>> to register or update a snapshot repository, and then use the <<create-snapshot-api,Create snapshot API>> to create a snapshot in a repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5Mjc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, use the <<create-snapshot-api,Create snapshot API>> to create\n          \n          \n            \n            For example, use the <<create-snapshot-api,create snapshot API>> to create", "url": "https://github.com/elastic/elasticsearch/pull/59730#discussion_r456492798", "createdAt": "2020-07-17T14:52:15Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/take-snapshot.asciidoc", "diffHunk": "@@ -47,167 +53,78 @@ PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n -----------------------------------\n // TEST[skip:cannot complete subsequent snapshot]\n \n-The list of data streams and indices that should be included into the snapshot can be specified using the `indices` parameter that\n-supports <<multi-index,multi-target syntax>>, although the options which control the behavior of multi index syntax\n+Use the `indices` parameter to list the data streams and indices that should be included in the snapshot. This parameter supports\n+<<multi-index,multi-target syntax>>, although the options that control the behavior of multi-index syntax\n must be supplied in the body of the request, rather than as request parameters.\n \n-Data stream backups include the stream's backing indices and metadata, such as \n+Data stream backups include the stream's backing indices and metadata, such as\n the current <<data-streams-generation,generation>> and timestamp field.\n \n You can also choose to include only specific backing indices in a snapshot.\n However, these backups do not include the associated data stream's\n metadata or its other backing indices.\n \n-The snapshot request also supports the\n-`ignore_unavailable` option. Setting it to `true` will cause data streams and indices that do not exist to be ignored during snapshot\n-creation. By default, when the `ignore_unavailable` option is not set and a data stream or index is missing, the snapshot request will fail.\n-\n-By setting `include_global_state` to false it's possible to prevent the cluster global state to be stored as part of\n-the snapshot.\n-\n-IMPORTANT: The global cluster state includes the cluster's index\n-templates, such as those <<create-a-data-stream-template,matching a data\n-streams>>. If your snapshot includes data streams, we recommend storing the\n-cluster state as part of the snapshot. This lets you later restored any\n-templates required for a data stream.\n-\n-By default, the entire snapshot will fail if one or more indices participating in the snapshot don't have\n-all primary shards available. This behaviour can be changed by setting `partial` to `true`. The `expand_wildcards`\n-option can be used to control whether hidden and closed indices will be included in the snapshot, and defaults to `all`.\n-\n-The `metadata` field can be used to attach arbitrary metadata to the snapshot. This may be a record of who took the snapshot,\n-why it was taken, or any other data that might be useful.\n-\n-Snapshot names can be automatically derived using <<date-math-index-names,date math expressions>>, similarly as when creating\n-new data streams or indices. Note that special characters need to be URI encoded.\n-\n-For example, creating a snapshot with the current day in the name, like `snapshot-2018.05.11`, can be achieved with\n-the following command:\n-\n-[source,console]\n------------------------------------\n-# PUT /_snapshot/my_backup/<snapshot-{now/d}>\n-PUT /_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E\n------------------------------------\n-// TEST[continued]\n-\n-\n+[discrete]\n+[[create-snapshot-process-details]]\n+=== Snapshot process details\n The snapshot process is incremental. In the process of making the snapshot, {es} analyses\n the list of the data stream and index files that are already stored in the repository and copies only files that were created or\n-changed since the last snapshot. That allows multiple snapshots to be preserved in the repository in a compact form.\n-Snapshotting process is executed in non-blocking fashion. All indexing and searching operation can continue to be\n-executed against the data stream or index that is being snapshotted. However, a snapshot represents a point-in-time view\n+changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.\n+\n+The snapshot process is executed in non-blocking fashion. All indexing and searching operations can continue to run against the data stream or index\n+that is being snapshotted. However, a snapshot represents a point-in-time view\n at the moment when snapshot was created, so no records that were added to the data stream or index after the snapshot process was started\n-will be present in the snapshot. The snapshot process starts immediately for the primary shards that has been started\n-and are not relocating at the moment. Before version 1.2.0, the snapshot operation fails if the cluster has any relocating or\n-initializing primaries of indices participating in the snapshot. Starting with version 1.2.0, Elasticsearch waits for\n+will be included in the snapshot.\n+\n+The snapshot process starts immediately for the primary shards that have been started and are not relocating at the moment. {es} waits for\n relocation or initialization of shards to complete before snapshotting them.\n \n Besides creating a copy of each data stream and index, the snapshot process can also store global cluster metadata, which includes persistent\n cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of\n the snapshot.\n \n-Only one snapshot process can be executed in the cluster at any time. While snapshot of a particular shard is being\n-created this shard cannot be moved to another node, which can interfere with rebalancing process and allocation\n-filtering. Elasticsearch will only be able to move a shard to another node (according to the current allocation\n-filtering settings and rebalancing algorithm) once the snapshot is finished.\n-\n-Once a snapshot is created information about this snapshot can be obtained using the following command:\n-\n-[source,console]\n------------------------------------\n-GET /_snapshot/my_backup/snapshot_1\n------------------------------------\n-// TEST[continued]\n-\n-This command returns basic information about the snapshot including start and end time, version of\n-Elasticsearch that created the snapshot, the list of included data streams and indices, the current state of the\n-snapshot and the list of failures that occurred during the snapshot. The snapshot `state` can be\n-\n-[horizontal]\n-`IN_PROGRESS`::\n-  The snapshot is currently running.\n-\n-`SUCCESS`::\n-  The snapshot finished and all shards were stored successfully.\n-\n-`FAILED`::\n-  The snapshot finished with an error and failed to store any data.\n+Only one snapshot process can be started in the cluster at any time. While a\n+snapshot of a particular shard is being\n+created, this shard cannot be moved to another node, which can interfere with rebalancing and allocation\n+filtering. {es} can only move a shard to another node (according to the current allocation\n+filtering settings and rebalancing algorithm) after the snapshot process\n+is finished.\n \n-`PARTIAL`::\n-  The global cluster state was stored, but data of at least one shard was not stored successfully.\n-  The `failures` section of the response contains more detailed information about shards\n-  that were not processed correctly.\n+After a snapshot is created, use the <<get-snapshot-api,Get snapshot API>> to retrieve information about a snapshot. See <<snapshots-monitor-snapshot-restore,Monitor snapshot and restore progress>> to learn more about retrieving snapshot status.\n \n-`INCOMPATIBLE`::\n-  The snapshot was created with an old version of {es} and is incompatible with\n-  the current version of the cluster.\n-\n-Similar as for repositories, information about multiple snapshots can be queried in a single request, supporting wildcards as well:\n-\n-[source,console]\n------------------------------------\n-GET /_snapshot/my_backup/snapshot_*,some_other_snapshot\n------------------------------------\n-// TEST[continued]\n-\n-All snapshots currently stored in the repository can be listed using the following command:\n-\n-[source,console]\n------------------------------------\n-GET /_snapshot/my_backup/_all\n------------------------------------\n-// TEST[continued]\n-\n-The command fails if some of the snapshots are unavailable. The boolean parameter `ignore_unavailable` can be used to\n-return all snapshots that are currently available.\n+[discrete]\n+[[create-snapshot-options]]\n+=== Options for creating a snapshot\n+The create snapshot request supports the\n+`ignore_unavailable` option. Setting it to `true` will cause data streams and indices that do not exist to be ignored during snapshot\n+creation. By default, when the `ignore_unavailable` option is not set and a data stream or index is missing, the snapshot request will fail.\n \n-Getting all snapshots in the repository can be costly on cloud-based repositories,\n-both from a cost and performance perspective.  If the only information required is\n-the snapshot names/uuids in the repository and the data streams and indices in each snapshot, then\n-the optional boolean parameter `verbose` can be set to `false` to execute a more\n-performant and cost-effective retrieval of the snapshots in the repository.  Note\n-that setting `verbose` to `false` will omit all other information about the snapshot\n-such as status information, the number of snapshotted shards, etc.  The default\n-value of the `verbose` parameter is `true`.\n+By setting `include_global_state` to `false` it's possible to prevent the cluster global state to be stored as part of\n+the snapshot.\n \n-It is also possible to retrieve snapshots from multiple repositories in one go, for example:\n+IMPORTANT: The global cluster state includes the cluster's index\n+templates, such as those <<create-a-data-stream-template,matching a data\n+stream>>. If your snapshot includes data streams, we recommend storing the\n+cluster state as part of the snapshot. This lets you later restored any\n+templates required for a data stream.\n \n-[source,console]\n------------------------------------\n-GET /_snapshot/_all\n-GET /_snapshot/my_backup,my_fs_backup\n-GET /_snapshot/my*/snap*\n------------------------------------\n-// TEST[skip:no my_fs_backup]\n+By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have\n+all primary shards available. You can change this behaviour by setting `partial` to `true`. The `expand_wildcards`\n+option can be used to control whether hidden and closed indices will be included in the snapshot, and defaults to `all`.\n \n-A currently running snapshot can be retrieved using the following command:\n+Use the `metadata` field to attach arbitrary metadata to the snapsho,\n+such as who took the snapshot,\n+why it was taken, or any other data that might be useful.\n \n-[source,console]\n------------------------------------\n-GET /_snapshot/my_backup/_current\n------------------------------------\n-// TEST[continued]\n+Snapshot names can be automatically derived using <<date-math-index-names,date math expressions>>, similarly as when creating\n+new data streams or indices. Special characters must be URI encoded.\n \n-A snapshot can be deleted from the repository using the following command:\n+For example, use the <<create-snapshot-api,Create snapshot API>> to create", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzMzMzY3", "url": "https://github.com/elastic/elasticsearch/pull/59730#pullrequestreview-450733367", "createdAt": "2020-07-17T15:02:53Z", "commit": {"oid": "2abba42e4152c1704fa43c81a14c1049f56d41f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628b4786fadf14df3d1bccd95765573ae47f3d90", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/628b4786fadf14df3d1bccd95765573ae47f3d90", "committedDate": "2020-07-17T15:31:30Z", "message": "Remove titleabbrev\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1469d847e177dedbc5d1717ecce1b12716217daa", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/1469d847e177dedbc5d1717ecce1b12716217daa", "committedDate": "2020-07-17T15:31:56Z", "message": "Add paragraph break\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62a2bc03fa5e4f4e13a964916fe07b84a66cce4", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/c62a2bc03fa5e4f4e13a964916fe07b84a66cce4", "committedDate": "2020-07-17T15:32:36Z", "message": "Remove titleabbrev from restore page\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262cdf2893c12fcb6444da64dd54406bd4707e68", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/262cdf2893c12fcb6444da64dd54406bd4707e68", "committedDate": "2020-07-17T15:32:53Z", "message": "Remove titleabbrev from create page\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d4d2056b578cfda585fd4a73659aac914edc1b", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/74d4d2056b578cfda585fd4a73659aac914edc1b", "committedDate": "2020-07-17T15:33:23Z", "message": "Change \"Create\" to lowercase\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e5704b3b88ab563c178784ebf38542843d594a", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0e5704b3b88ab563c178784ebf38542843d594a", "committedDate": "2020-07-17T15:33:52Z", "message": "Change API names to lowercase\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56d75c9758390b34ece3cd982ef7ffd8649210cc", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/56d75c9758390b34ece3cd982ef7ffd8649210cc", "committedDate": "2020-07-17T15:34:12Z", "message": "Remove extraneous delimiters\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b259b78951d58d83172c453b2b93d77543e9137", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/4b259b78951d58d83172c453b2b93d77543e9137", "committedDate": "2020-07-17T15:34:27Z", "message": "Change \"Delete\" to lowercase\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598c06c29c74eb71cc3e49cb708cb6f05ce242b4", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/598c06c29c74eb71cc3e49cb708cb6f05ce242b4", "committedDate": "2020-07-17T16:40:56Z", "message": "Single-sourcing warning and clarifying warning text."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4308, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}