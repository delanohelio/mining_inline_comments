{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODM0OTA2", "number": 57666, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyODo1M1rOECj1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDowNDozMVrOEFraMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTE5NjcxOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyODo1M1rOGfFvtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyODo1M1rOGfFvtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MzE3NQ==", "bodyText": "The fact that we only have a single type helps simplify a lot here", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435253175", "createdAt": "2020-06-04T13:28:53Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -56,66 +55,46 @@\n         Setting.boolSetting(\"index.mapping.ignore_malformed\", false, Property.IndexScope);\n     public static final Setting<Boolean> COERCE_SETTING =\n         Setting.boolSetting(\"index.mapping.coerce\", false, Property.IndexScope);\n-    public abstract static class Builder<T extends Builder> extends Mapper.Builder<T> {\n+    public abstract static class Builder<T extends Builder<T>> extends Mapper.Builder<T> {\n \n-        protected final MappedFieldType fieldType;\n-        protected final MappedFieldType defaultFieldType;\n-        private final IndexOptions defaultOptions;\n+        protected final FieldType fieldType;\n         protected boolean omitNormsSet = false;\n         protected boolean indexOptionsSet = false;\n-        protected boolean docValuesSet = false;\n+        protected boolean hasDocValues = true;\n+        protected boolean indexed = true;\n         protected final MultiFields.Builder multiFieldsBuilder;\n         protected CopyTo copyTo = CopyTo.empty();\n-\n-        protected Builder(String name, MappedFieldType fieldType, MappedFieldType defaultFieldType) {\n+        protected float boost = 1.0f;\n+        protected Map<String, String> meta = Collections.emptyMap();\n+        // TODO move to KeywordFieldMapper.Builder\n+        protected boolean eagerGlobalOrdinals;\n+        // TODO move to text-specific builder base class\n+        protected NamedAnalyzer indexAnalyzer;\n+        protected NamedAnalyzer searchAnalyzer;\n+        protected NamedAnalyzer searchQuoteAnalyzer;\n+        protected SimilarityProvider similarity;\n+\n+        protected Builder(String name, FieldType fieldType) {\n             super(name);\n-            this.fieldType = fieldType.clone();\n-            this.defaultFieldType = defaultFieldType.clone();\n-            this.defaultOptions = fieldType.indexOptions(); // we have to store it the fieldType is mutable\n-            this.docValuesSet = fieldType.hasDocValues();\n+            this.fieldType = new FieldType(fieldType);\n             multiFieldsBuilder = new MultiFields.Builder();\n         }\n \n-        public MappedFieldType fieldType() {\n-            return fieldType;\n-        }\n-\n         public T index(boolean index) {\n-            if (index) {\n-                if (fieldType.indexOptions() == IndexOptions.NONE) {\n-                    /*\n-                     * the logic here is to reset to the default options only if we are not indexed ie. options are null\n-                     * if the fieldType has a non-null option we are all good it might have been set through a different\n-                     * call.\n-                     */\n-                    IndexOptions options = getDefaultIndexOption();\n-                    if (options == IndexOptions.NONE) {\n-                        // can happen when an existing type on the same index has disabled indexing\n-                        // since we inherit the default field type from the first mapper that is\n-                        // created on an index\n-                        throw new IllegalArgumentException(\"mapper [\" + name + \"] has different [index] values from other types\"\n-                            + \" of the same index\");\n-                    }\n-                    fieldType.setIndexOptions(options);\n-                }\n-            } else {\n-                fieldType.setIndexOptions(IndexOptions.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTIyMDAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNDoyNlrOGfF-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNDoyNlrOGfF-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1Njk5Nw==", "bodyText": "We have a few places that were doing instanceof checks on lucene IndexableField fieldtypes - this allows us to continue doing those for now, as we can instead do an instanceof check for KeywordField", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435256997", "createdAt": "2020-06-04T13:34:26Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -72,23 +75,36 @@\n \n         public static final String NULL_VALUE = null;\n         public static final int IGNORE_ABOVE = Integer.MAX_VALUE;\n+        public static final boolean EAGER_GLOBAL_ORDINALS = false;\n+        public static final boolean SPLIT_QUERIES_ON_WHITESPACE = false;\n+    }\n+\n+    public static class KeywordField extends Field {\n+\n+        public KeywordField(String field, BytesRef term, FieldType ft) {\n+            super(field, term, ft);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTIyODg0OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjozMlrOGfGEZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjozMlrOGfGEZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODQ2OQ==", "bodyText": "nullValue and nullValueAsString are now dealt with directly by FieldMappers that require it", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435258469", "createdAt": "2020-06-04T13:36:32Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -54,52 +52,45 @@\n \n import java.io.IOException;\n import java.time.ZoneId;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * This defines the core properties and functions to operate on a field.\n  */\n-public abstract class MappedFieldType extends FieldType {\n+public abstract class MappedFieldType {\n \n-    private String name;\n+    private final String name;\n+    private final boolean docValues;\n+    private final boolean isSearchable;\n     private float boost;\n-    // TODO: remove this docvalues flag and use docValuesType\n-    private boolean docValues;\n     private NamedAnalyzer indexAnalyzer;\n     private NamedAnalyzer searchAnalyzer;\n     private NamedAnalyzer searchQuoteAnalyzer;\n     private SimilarityProvider similarity;\n-    private Object nullValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTIyOTE5OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjozN1rOGfGEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNjo0NFrOGfGE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODUyMA==", "bodyText": "I super hate all of these instanceofs!", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435258520", "createdAt": "2020-06-04T13:36:37Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java", "diffHunk": "@@ -179,7 +179,7 @@ private static Analyzer getAnalyzer(AnalyzeAction.Request request, AnalysisRegis\n             }\n             MappedFieldType fieldType = indexService.mapperService().fieldType(request.field());\n             if (fieldType != null) {\n-                if (fieldType.tokenized() || fieldType instanceof KeywordFieldMapper.KeywordFieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODYwNQ==", "bodyText": "But you are making it better.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435258605", "createdAt": "2020-06-04T13:36:44Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java", "diffHunk": "@@ -179,7 +179,7 @@ private static Analyzer getAnalyzer(AnalyzeAction.Request request, AnalysisRegis\n             }\n             MappedFieldType fieldType = indexService.mapperService().fieldType(request.field());\n             if (fieldType != null) {\n-                if (fieldType.tokenized() || fieldType instanceof KeywordFieldMapper.KeywordFieldType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1ODUyMA=="}, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTIzNjU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNzo1MVrOGfGJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNzo1MVrOGfGJUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1OTcyOQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435259729", "createdAt": "2020-06-04T13:37:51Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -54,52 +52,45 @@\n \n import java.io.IOException;\n import java.time.ZoneId;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * This defines the core properties and functions to operate on a field.\n  */\n-public abstract class MappedFieldType extends FieldType {\n+public abstract class MappedFieldType {\n \n-    private String name;\n+    private final String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI0NTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozOToxMFrOGfGOkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODozNVrOGfHVRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2MTA3NQ==", "bodyText": "This is a bit of an unfortunate hack - there are still places that require access directly to the lucene field type, particularly in the highlighter code.  They can almost certainly be refactored to use either information from the MappedFieldType or from the Mapper, but this PR is big enough already.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435261075", "createdAt": "2020-06-04T13:39:10Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -166,6 +167,17 @@ public DocumentMapperParser documentMapperParser() {\n         return this.documentParser;\n     }\n \n+    public FieldType getLuceneFieldType(String field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTE3NA==", "bodyText": "++.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435279174", "createdAt": "2020-06-04T13:58:35Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -166,6 +167,17 @@ public DocumentMapperParser documentMapperParser() {\n         return this.documentParser;\n     }\n \n+    public FieldType getLuceneFieldType(String field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2MTA3NQ=="}, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI0NjQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozOToyMVrOGfGPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODoyNDozN1rOGiTcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2MTI3Ng==", "bodyText": "I've always been a fan of if (o == null || getClass() != o.getClass()) for this. Every equals implementation is ugly, but at least mine bails early if the subtypes don't line up.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435261276", "createdAt": "2020-06-04T13:39:21Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -130,7 +121,9 @@ public ValuesSourceType getValuesSourceType() {\n \n     @Override\n     public boolean equals(Object o) {\n-        if (!super.equals(o)) return false;\n+        if (o instanceof MappedFieldType == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMzI0NQ==", "bodyText": "+1 to check classes directly instead of using instanceof, I expect that MappedFieldType instances should never be considered equal if they are different implementations?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r438623245", "createdAt": "2020-06-11T08:24:37Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -130,7 +121,9 @@ public ValuesSourceType getValuesSourceType() {\n \n     @Override\n     public boolean equals(Object o) {\n-        if (!super.equals(o)) return false;\n+        if (o instanceof MappedFieldType == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2MTI3Ng=="}, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI2MDM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0MTozNFrOGfGYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0MTozNFrOGfGYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2MzQ5NA==", "bodyText": "Could Mapper has a method that returns null if it isn't a FieldMapper?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435263494", "createdAt": "2020-06-04T13:41:34Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -166,6 +167,17 @@ public DocumentMapperParser documentMapperParser() {\n         return this.documentParser;\n     }\n \n+    public FieldType getLuceneFieldType(String field) {\n+        Mapper mapper = documentMapper().mappers().getMapper(field);\n+        if (mapper == null) {\n+            return null;\n+        }\n+        if (mapper instanceof FieldMapper == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI3OTcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NDozOFrOGfGkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NDozOFrOGfGkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2NjYxNQ==", "bodyText": "Maybe just run the formatter on the method declaration while you are here. It isn't really my favorite formatter, but we're going to hit the whole code base with it eventually.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435266615", "createdAt": "2020-06-04T13:44:38Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapper.java", "diffHunk": "@@ -441,11 +420,11 @@ public PrefixTreeStrategy resolvePrefixTreeStrategy(String strategyName) {\n         }\n     }\n \n-    public LegacyGeoShapeFieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType,\n-                               Explicit<Boolean> ignoreMalformed, Explicit<Boolean> coerce, Explicit<Orientation> orientation,\n-                               Explicit<Boolean> ignoreZValue, Settings indexSettings,\n-                               MultiFields multiFields, CopyTo copyTo) {\n-        super(simpleName, fieldType, defaultFieldType, ignoreMalformed, coerce, ignoreZValue, orientation, indexSettings,\n+    public LegacyGeoShapeFieldMapper(String simpleName, FieldType fieldType, MappedFieldType mappedFieldType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI4NjUwOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NTo0NVrOGfGooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NTo0NVrOGfGooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2Nzc0NA==", "bodyText": "Formatter and Resolution are non-modifiable, so the tests on DateFieldMapperTests replace these bits", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435267744", "createdAt": "2020-06-04T13:45:45Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java", "diffHunk": "@@ -53,67 +51,46 @@\n import org.elasticsearch.index.query.QueryRewriteContext;\n import org.elasticsearch.index.query.QueryShardContext;\n import org.joda.time.DateTimeZone;\n-import org.junit.Before;\n \n import java.io.IOException;\n import java.time.Instant;\n import java.time.ZoneOffset;\n+import java.util.Collections;\n+import java.util.Map;\n \n public class DateFieldTypeTests extends FieldTypeTestCase<DateFieldType> {\n-    @Override\n-    protected DateFieldType createDefaultFieldType() {\n-        return new DateFieldType();\n-    }\n \n-    @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTI5OTUwOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTextAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0Nzo0MlrOGfGwtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0Nzo0MlrOGfGwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2OTgxMg==", "bodyText": "This ends up making this TODO official", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435269812", "createdAt": "2020-06-04T13:47:42Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTextAggregatorTests.java", "diffHunk": "@@ -76,10 +77,7 @@ protected AggregationBuilder createAggBuilderForTypeTest(MappedFieldType fieldTy\n     @Override\n     protected List<ValuesSourceType> getSupportedValuesSourceTypes() {\n         // TODO it is likely accidental that SigText supports anything other than Bytes, and then only text fields\n-        return List.of(CoreValuesSourceType.NUMERIC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTMwNzM4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/DateRangeAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0ODo1OFrOGfG19w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0ODo1OFrOGfG19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3MTE1OQ==", "bodyText": "So it turns out that these tests didn't test what they thought they were testing, and the functionality they should have been testing for is broken.  I opened #57651 to deal with them separately.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435271159", "createdAt": "2020-06-04T13:48:58Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/DateRangeAggregatorTests.java", "diffHunk": "@@ -70,6 +71,7 @@ public void testNoMatchingField() throws IOException {\n         });\n     }\n \n+    @AwaitsFix(bugUrl=\"https://github.com/elastic/elasticsearch/issues/57651\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTMzMTc1OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1MzoxOVrOGfHFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1MzoxOVrOGfHFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NTE5MA==", "bodyText": "This is a bit slow, unfortunately - the idea is to check that serializing a mapper and then using it as a merge input always ends up with the same mapper, for each possible modification.  But we need a new MapperService for each test, because some modifications are unmergeable.  And that means we have to rebuild a whole new index each time, so that we load mappers from plugins, etc.  Which is slow.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435275190", "createdAt": "2020-06-04T13:53:19Z", "author": {"login": "romseygeek"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase.java", "diffHunk": "@@ -205,4 +203,47 @@ protected String contentType() {\n         }\n     }\n \n+    public void testSerialization() throws IOException {\n+        for (Modifier modifier : modifiers) {\n+            if (unsupportedProperties().contains(modifier.property)) {\n+                continue;\n+            }\n+            T builder1 = newBuilder();\n+            T builder2 = newBuilder();\n+            modifier.apply(builder1, builder2);\n+            assertSerializes(modifier.property + \"-a\", builder1);\n+            assertSerializes(modifier.property + \"-b\", builder2);\n+        }\n+    }\n+\n+    protected Settings getIndexMapperSettings() {\n+        return Settings.EMPTY;\n+    }\n+\n+    protected void assertSerializes(String indexname, T builder) throws IOException {\n+\n+        // TODO can we do this without building an entire index?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTYyODM0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NjozN1rOGfKEoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNjozN1rOGjyeOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDA2NA==", "bodyText": "maybe as a follow-up we'll want to rename this, I assume that the reason why its name ends with FieldType is that it extended FieldType.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r435324064", "createdAt": "2020-06-04T14:56:37Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -54,52 +52,45 @@\n \n import java.io.IOException;\n import java.time.ZoneId;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * This defines the core properties and functions to operate on a field.\n  */\n-public abstract class MappedFieldType extends FieldType {\n+public abstract class MappedFieldType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1Njg4Mw==", "bodyText": "Yup, plan is to rename it to SearchField", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440156883", "createdAt": "2020-06-15T12:58:55Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -54,52 +52,45 @@\n \n import java.io.IOException;\n import java.time.ZoneId;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * This defines the core properties and functions to operate on a field.\n  */\n-public abstract class MappedFieldType extends FieldType {\n+public abstract class MappedFieldType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDA2NA=="}, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MDI4MQ==", "bodyText": "cool", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440180281", "createdAt": "2020-06-15T13:36:37Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -54,52 +52,45 @@\n \n import java.io.IOException;\n import java.time.ZoneId;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * This defines the core properties and functions to operate on a field.\n  */\n-public abstract class MappedFieldType extends FieldType {\n+public abstract class MappedFieldType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDA2NA=="}, "originalCommit": {"oid": "ac2cc4a58982e13e8758cf8c6e8cb6bec76e18b9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI3NjMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNDowN1rOGhCm0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNjowMFrOGhCq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5ODg5OA==", "bodyText": "How hard would it be to get rid of FieldType here? It's a bit annoying because usually there isn't a single FieldType that applies, e.g. numeric fields leverage both points and numeric doc values, but it's impossible to configure both on a FieldType, which is why we create different Fields for points and doc values.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r437298898", "createdAt": "2020-06-09T10:14:07Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -210,44 +189,30 @@ protected boolean defaultDocValues(Version indexCreated) {\n             return fieldType.tokenized() == false;\n         }\n \n-        protected void setupFieldType(BuilderContext context) {\n-            fieldType.setName(buildFullName(context));\n-            if (fieldType.indexAnalyzer() == null && fieldType.tokenized() == false && fieldType.indexOptions() != IndexOptions.NONE) {\n-                fieldType.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);\n-                fieldType.setSearchAnalyzer(Lucene.KEYWORD_ANALYZER);\n-            }\n-            boolean defaultDocValues = defaultDocValues(context.indexCreatedVersion());\n-            defaultFieldType.setHasDocValues(defaultDocValues);\n-            if (docValuesSet == false) {\n-                fieldType.setHasDocValues(defaultDocValues);\n-            }\n-        }\n-\n         /** Set metadata on this field. */\n         public T meta(Map<String, String> meta) {\n-            fieldType.setMeta(meta);\n+            this.meta = meta;\n             return (T) this;\n         }\n     }\n \n     protected final Version indexCreatedVersion;\n-    protected MappedFieldType fieldType;\n-    protected final MappedFieldType defaultFieldType;\n+    protected FieldType fieldType;\n+    protected MappedFieldType mappedFieldType;\n     protected MultiFields multiFields;\n     protected CopyTo copyTo;\n \n-    protected FieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType,\n+    protected FieldMapper(String simpleName, FieldType fieldType, MappedFieldType mappedFieldType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e6ce42d7ab85044fb2fe0aa23ffb18c85c1e222"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTkyNQ==", "bodyText": "Oh apologies, I just saw your previous message where you explain exactly this. +1 for progress over perfection and keeping it for a follow-up refactoring.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r437299925", "createdAt": "2020-06-09T10:16:00Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -210,44 +189,30 @@ protected boolean defaultDocValues(Version indexCreated) {\n             return fieldType.tokenized() == false;\n         }\n \n-        protected void setupFieldType(BuilderContext context) {\n-            fieldType.setName(buildFullName(context));\n-            if (fieldType.indexAnalyzer() == null && fieldType.tokenized() == false && fieldType.indexOptions() != IndexOptions.NONE) {\n-                fieldType.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);\n-                fieldType.setSearchAnalyzer(Lucene.KEYWORD_ANALYZER);\n-            }\n-            boolean defaultDocValues = defaultDocValues(context.indexCreatedVersion());\n-            defaultFieldType.setHasDocValues(defaultDocValues);\n-            if (docValuesSet == false) {\n-                fieldType.setHasDocValues(defaultDocValues);\n-            }\n-        }\n-\n         /** Set metadata on this field. */\n         public T meta(Map<String, String> meta) {\n-            fieldType.setMeta(meta);\n+            this.meta = meta;\n             return (T) this;\n         }\n     }\n \n     protected final Version indexCreatedVersion;\n-    protected MappedFieldType fieldType;\n-    protected final MappedFieldType defaultFieldType;\n+    protected FieldType fieldType;\n+    protected MappedFieldType mappedFieldType;\n     protected MultiFields multiFields;\n     protected CopyTo copyTo;\n \n-    protected FieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType,\n+    protected FieldMapper(String simpleName, FieldType fieldType, MappedFieldType mappedFieldType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5ODg5OA=="}, "originalCommit": {"oid": "5e6ce42d7ab85044fb2fe0aa23ffb18c85c1e222"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTYzMDE1OnYy", "diffSide": "LEFT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozNDowMFrOGjqhjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNjozMlrOGjyeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDA2Mg==", "bodyText": "intuitively, this has been replaced by the newly added docValuesByDefault method ? But why doesn't indexedByDefault also replace the index options bit above?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440050062", "createdAt": "2020-06-15T09:34:00Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -41,12 +42,11 @@\n     public static final String CONTENT_TYPE = \"rank_features\";\n \n     public static class Defaults {\n-        public static final MappedFieldType FIELD_TYPE = new RankFeaturesFieldType();\n+        public static final FieldType FIELD_TYPE = new FieldType();\n \n         static {\n             FIELD_TYPE.setTokenized(false);\n             FIELD_TYPE.setIndexOptions(IndexOptions.NONE);\n-            FIELD_TYPE.setHasDocValues(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1ODMwMA==", "bodyText": "This is because setting docvalues on lucene's FieldType doesn't have any effect at the API level, as adding a DocValues field explicitly will set things later.  But you do need to set index options separately.  A follow up will remove this entirely (RankFeaturesFieldMapper, along with many many other field mappers, doesn't actually need a lucene FieldType at all).", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440158300", "createdAt": "2020-06-15T13:01:19Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -41,12 +42,11 @@\n     public static final String CONTENT_TYPE = \"rank_features\";\n \n     public static class Defaults {\n-        public static final MappedFieldType FIELD_TYPE = new RankFeaturesFieldType();\n+        public static final FieldType FIELD_TYPE = new FieldType();\n \n         static {\n             FIELD_TYPE.setTokenized(false);\n             FIELD_TYPE.setIndexOptions(IndexOptions.NONE);\n-            FIELD_TYPE.setHasDocValues(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDA2Mg=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MDIyOA==", "bodyText": "thanks for clarifying", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440180228", "createdAt": "2020-06-15T13:36:32Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -41,12 +42,11 @@\n     public static final String CONTENT_TYPE = \"rank_features\";\n \n     public static class Defaults {\n-        public static final MappedFieldType FIELD_TYPE = new RankFeaturesFieldType();\n+        public static final FieldType FIELD_TYPE = new FieldType();\n \n         static {\n             FIELD_TYPE.setTokenized(false);\n             FIELD_TYPE.setIndexOptions(IndexOptions.NONE);\n-            FIELD_TYPE.setHasDocValues(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDA2Mg=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTYzNzU0OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozNjowNlrOGjqmLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxMTowOVrOGkBD6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTI0Nw==", "bodyText": "I got lost on where this error was returned before, can you help me out?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440051247", "createdAt": "2020-06-15T09:36:06Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -55,35 +55,37 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n-        public RankFeaturesFieldType fieldType() {\n-            return (RankFeaturesFieldType) super.fieldType();\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [rank_features] does not support doc values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTg2NA==", "bodyText": "Double checking, it wasn't an error before, it was just silently ignored.  Will change it back.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440175864", "createdAt": "2020-06-15T13:29:54Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -55,35 +55,37 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n-        public RankFeaturesFieldType fieldType() {\n-            return (RankFeaturesFieldType) super.fieldType();\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [rank_features] does not support doc values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTI0Nw=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTAyMA==", "bodyText": "ok, I suspect there are other similar errors, I had the same question but I refrained from asking it as I may have missed something.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440179020", "createdAt": "2020-06-15T13:34:42Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -55,35 +55,37 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n-        public RankFeaturesFieldType fieldType() {\n-            return (RankFeaturesFieldType) super.fieldType();\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [rank_features] does not support doc values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTI0Nw=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxOTMwNw==", "bodyText": "I left a bunch of new questions/comments wherever I saw errors that I am not sure we were previously returning.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440419307", "createdAt": "2020-06-15T20:11:09Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapper.java", "diffHunk": "@@ -55,35 +55,37 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n-        public RankFeaturesFieldType fieldType() {\n-            return (RankFeaturesFieldType) super.fieldType();\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [rank_features] does not support doc values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MTI0Nw=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTcwMjQxOnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo1Mzo1MlrOGjrO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo1MDoxMFrOGjzCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTY0OQ==", "bodyText": "for my info, are these newly introduced checks or were they just moved?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440061649", "createdAt": "2020-06-15T09:53:52Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +212,14 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");\n+        }\n+        if (Objects.equals(this.nullValue, ((TokenCountFieldMapper)other).nullValue) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [null_value] setting\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODM2Mw==", "bodyText": "I thought I had moved this from the root mapper, but I've looked again and there was no check, which meant that null_value could be changed.  However, null_value is an index-time setting and so we shouldn't really allow it to be updated on merge - I can remove the check and allow an update, but that feels like re-introducing a bug?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440178363", "createdAt": "2020-06-15T13:33:41Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +212,14 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");\n+        }\n+        if (Objects.equals(this.nullValue, ((TokenCountFieldMapper)other).nullValue) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [null_value] setting\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTY0OQ=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTk2MQ==", "bodyText": "I would address this separately, in the effort of keeping this PR on point as well as  promoting the bugfix.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440179961", "createdAt": "2020-06-15T13:36:08Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +212,14 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");\n+        }\n+        if (Objects.equals(this.nullValue, ((TokenCountFieldMapper)other).nullValue) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [null_value] setting\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTY0OQ=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4Njc4Nw==", "bodyText": "Actually looking again, an update to null_value was previously being ignored - it wouldn't be copied across on merge at all.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440186787", "createdAt": "2020-06-15T13:46:10Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +212,14 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");\n+        }\n+        if (Objects.equals(this.nullValue, ((TokenCountFieldMapper)other).nullValue) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [null_value] setting\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTY0OQ=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4OTYwOQ==", "bodyText": "not great, yet better than allowing to update it :) lets open an issue and fix this as a followup?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440189609", "createdAt": "2020-06-15T13:50:10Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +212,14 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");\n+        }\n+        if (Objects.equals(this.nullValue, ((TokenCountFieldMapper)other).nullValue) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [null_value] setting\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTY0OQ=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc3ODM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxNjowNVrOGjr-5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNzoyN1rOGjygcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3Mzk1OA==", "bodyText": "I find this confusing given that soon we'll have searchable fields that are not indexed. Should we rather rename it to failIfNotSearchable ? And the error message? Or maybe isSearchable should rather be isIndexed ?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440073958", "createdAt": "2020-06-15T10:16:05Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -378,7 +342,7 @@ protected final void failIfNoDocValues() {\n     }\n \n     protected final void failIfNotIndexed() {\n-        if (indexOptions() == IndexOptions.NONE && pointDimensionCount() == 0) {\n+        if (isSearchable == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTk5Nw==", "bodyText": "I'll change the various to be isIndexed - I think the isSearchable method should stay named as it is though?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440179997", "createdAt": "2020-06-15T13:36:11Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -378,7 +342,7 @@ protected final void failIfNoDocValues() {\n     }\n \n     protected final void failIfNotIndexed() {\n-        if (indexOptions() == IndexOptions.NONE && pointDimensionCount() == 0) {\n+        if (isSearchable == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3Mzk1OA=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MDg1MA==", "bodyText": "yes the existing method that is used by field_caps , I would leave unchanged", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440180850", "createdAt": "2020-06-15T13:37:27Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -378,7 +342,7 @@ protected final void failIfNoDocValues() {\n     }\n \n     protected final void failIfNotIndexed() {\n-        if (indexOptions() == IndexOptions.NONE && pointDimensionCount() == 0) {\n+        if (isSearchable == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3Mzk1OA=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjE0MTU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoxNToxNlrOGjvk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozODoyOVrOGjyi-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjg0OQ==", "bodyText": "Am I correct that these methods are only used for serialization? Should we also rely on these default for parsing?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440132849", "createdAt": "2020-06-15T12:15:16Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -431,6 +398,18 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         return builder.endObject();\n     }\n \n+    protected boolean indexedByDefault() {\n+        return true;\n+    }\n+\n+    protected boolean docValuesByDefault() {\n+        return true;\n+    }\n+\n+    protected boolean storedByDefault() {\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MTQ5OQ==", "bodyText": "Unfortunately we can't use them for parsing because the builders/parsers are static.  I think builder parameters/parsing/serialization/merging can all be cleaned up a lot though; I have some ideas which I'll sketch out in a separate issue.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440181499", "createdAt": "2020-06-15T13:38:29Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -431,6 +398,18 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         return builder.endObject();\n     }\n \n+    protected boolean indexedByDefault() {\n+        return true;\n+    }\n+\n+    protected boolean docValuesByDefault() {\n+        return true;\n+    }\n+\n+    protected boolean storedByDefault() {\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjg0OQ=="}, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjU2NTU4OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDowNjowMVrOGjzuMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDowNjowMVrOGjzuMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwMDc1NA==", "bodyText": "This is so much better!", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440200754", "createdAt": "2020-06-15T14:06:01Z", "author": {"login": "nik9000"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -111,11 +114,16 @@ public Builder coerce(boolean coerce) {\n         }\n \n         public Builder scalingFactor(double scalingFactor) {\n-            ((ScaledFloatFieldType) fieldType).setScalingFactor(scalingFactor);\n+            this.scalingFactor = scalingFactor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjYyMTI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoxODozN1rOGj0RCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoxODozN1rOGj0RCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwOTY3NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440209675", "createdAt": "2020-06-15T14:18:37Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -592,35 +595,34 @@ protected void parseCreateField(ParseContext context) throws IOException {\n             dateAsString = context.parser().textOrNull();\n         }\n \n-        if (dateAsString == null) {\n-            dateAsString = fieldType().nullValueAsString();\n-        }\n-\n-        if (dateAsString == null) {\n-            return;\n-        }\n-\n         long timestamp;\n-        try {\n-            timestamp = fieldType().parse(dateAsString);\n-        } catch (IllegalArgumentException | ElasticsearchParseException | DateTimeException e) {\n-            if (ignoreMalformed.value()) {\n-                context.addIgnoredField(fieldType.name());\n+        if (dateAsString == null) {\n+            if (nullValue == null) {\n                 return;\n-            } else {\n-                throw e;\n+            }\n+            timestamp = nullValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjYyNDYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoxOToyNFrOGj0TMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoxOToyNFrOGj0TMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxMDIyNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440210227", "createdAt": "2020-06-15T14:19:24Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -56,66 +55,46 @@\n         Setting.boolSetting(\"index.mapping.ignore_malformed\", false, Property.IndexScope);\n     public static final Setting<Boolean> COERCE_SETTING =\n         Setting.boolSetting(\"index.mapping.coerce\", false, Property.IndexScope);\n-    public abstract static class Builder<T extends Builder> extends Mapper.Builder<T> {\n+    public abstract static class Builder<T extends Builder<T>> extends Mapper.Builder<T> {\n \n-        protected final MappedFieldType fieldType;\n-        protected final MappedFieldType defaultFieldType;\n-        private final IndexOptions defaultOptions;\n+        protected final FieldType fieldType;\n         protected boolean omitNormsSet = false;\n         protected boolean indexOptionsSet = false;\n-        protected boolean docValuesSet = false;\n+        protected boolean hasDocValues = true;\n+        protected boolean indexed = true;\n         protected final MultiFields.Builder multiFieldsBuilder;\n         protected CopyTo copyTo = CopyTo.empty();\n-\n-        protected Builder(String name, MappedFieldType fieldType, MappedFieldType defaultFieldType) {\n+        protected float boost = 1.0f;\n+        protected Map<String, String> meta = Collections.emptyMap();\n+        // TODO move to KeywordFieldMapper.Builder\n+        protected boolean eagerGlobalOrdinals;\n+        // TODO move to text-specific builder base class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjY2MjgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyODoxMVrOGj0rSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyODoxMVrOGj0rSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNjM5Mw==", "bodyText": "I don't think we meant to support it, no. We probably should deprecate it and drop it in 8.0.\nI think it is probably worth adding a comment that this won't cause us to make an index of the text representation of the keyword.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440216393", "createdAt": "2020-06-15T14:28:11Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "diffHunk": "@@ -893,12 +903,15 @@ private static double objectToDouble(Object value) {\n \n         private final NumberType type;\n \n-        public NumberFieldType(NumberType type) {\n-            super();\n+        public NumberFieldType(String name, NumberType type, boolean isSearchable, boolean hasDocValues, Map<String, String> meta) {\n+            super(name, isSearchable, hasDocValues, meta);\n             this.type = Objects.requireNonNull(type);\n-            setTokenized(false);\n-            setHasDocValues(true);\n-            setOmitNorms(true);\n+            this.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);     // allows number fields in significant text aggs - do we need this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjY2NDY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyODozNFrOGj0sbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyODozNFrOGj0sbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNjY4Ng==", "bodyText": "Huh! That feels like a \"funny\" abstraction being invoked.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440216686", "createdAt": "2020-06-15T14:28:34Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "diffHunk": "@@ -893,12 +903,15 @@ private static double objectToDouble(Object value) {\n \n         private final NumberType type;\n \n-        public NumberFieldType(NumberType type) {\n-            super();\n+        public NumberFieldType(String name, NumberType type, boolean isSearchable, boolean hasDocValues, Map<String, String> meta) {\n+            super(name, isSearchable, hasDocValues, meta);\n             this.type = Objects.requireNonNull(type);\n-            setTokenized(false);\n-            setHasDocValues(true);\n-            setOmitNorms(true);\n+            this.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);     // allows number fields in significant text aggs - do we need this?\n+            this.setSearchAnalyzer(Lucene.KEYWORD_ANALYZER);    // allows match queries on number fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97840e27eb50236c2f82b64855ccb87e67d61c1"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY3MTMzOnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1NDo1MlrOGj-qVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NTozOVrOGtOqmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3OTk4OQ==", "bodyText": "is it ok that the includeDefaults condition is gone here?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440379989", "createdAt": "2020-06-15T18:54:52Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -446,17 +456,16 @@ protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n     protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {\n         super.doXContentBody(builder, includeDefaults, params);\n \n-        builder.field(\"scaling_factor\", fieldType().getScalingFactor());\n+        builder.field(\"scaling_factor\", scalingFactor);\n \n         if (includeDefaults || ignoreMalformed.explicit()) {\n             builder.field(\"ignore_malformed\", ignoreMalformed.value());\n         }\n         if (includeDefaults || coerce.explicit()) {\n             builder.field(\"coerce\", coerce.value());\n         }\n-\n-        if (includeDefaults || fieldType().nullValue() != null) {\n-            builder.field(\"null_value\", fieldType().nullValue());\n+        if (nullValue != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MTU5Ng==", "bodyText": "This is a slightly tricky one, in that null is not accepted as a value for null_value in mappings; so if we emit null here, then you can't use the output to set up mappings elsewhere.  FieldMapperTestBase in this PR adds a check that for each modified parameter, serialization/deserialization produces the same mapper configuration, both with and without including defaults, and this test will fail if null is emitted at this point.  It is a change, but I think it's a correct one?  I can open a separate issue regarding null values here, and mark it as team-discuss if we want to have a wider discussion about it.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448261596", "createdAt": "2020-07-01T10:12:35Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -446,17 +456,16 @@ protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n     protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {\n         super.doXContentBody(builder, includeDefaults, params);\n \n-        builder.field(\"scaling_factor\", fieldType().getScalingFactor());\n+        builder.field(\"scaling_factor\", scalingFactor);\n \n         if (includeDefaults || ignoreMalformed.explicit()) {\n             builder.field(\"ignore_malformed\", ignoreMalformed.value());\n         }\n         if (includeDefaults || coerce.explicit()) {\n             builder.field(\"coerce\", coerce.value());\n         }\n-\n-        if (includeDefaults || fieldType().nullValue() != null) {\n-            builder.field(\"null_value\", fieldType().nullValue());\n+        if (nullValue != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3OTk4OQ=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTM4NA==", "bodyText": "thanks for explaining, it sounds to me like no discussion is needed and this is a required change.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r450079384", "createdAt": "2020-07-06T08:55:39Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -446,17 +456,16 @@ protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n     protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {\n         super.doXContentBody(builder, includeDefaults, params);\n \n-        builder.field(\"scaling_factor\", fieldType().getScalingFactor());\n+        builder.field(\"scaling_factor\", scalingFactor);\n \n         if (includeDefaults || ignoreMalformed.explicit()) {\n             builder.field(\"ignore_malformed\", ignoreMalformed.value());\n         }\n         if (includeDefaults || coerce.explicit()) {\n             builder.field(\"coerce\", coerce.value());\n         }\n-\n-        if (includeDefaults || fieldType().nullValue() != null) {\n-            builder.field(\"null_value\", fieldType().nullValue());\n+        if (nullValue != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3OTk4OQ=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY3NTI3OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1NTo1NlrOGj-svg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NzowOFrOGtOuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MDYwNg==", "bodyText": "is this an existing error or was it silently rejected before?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440380606", "createdAt": "2020-06-15T18:55:56Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -147,23 +148,26 @@ public Builder maxShingleSize(int maxShingleSize) {\n         }\n \n         @Override\n-        public SearchAsYouTypeFieldType fieldType() {\n-            return (SearchAsYouTypeFieldType) this.fieldType;\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [search_as_you_type] does not support doc values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2Mjk3OQ==", "bodyText": "It was silently ignored before - I think an error message is better, but maybe it should just issue a warning in 7.x?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448262979", "createdAt": "2020-07-01T10:15:12Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -147,23 +148,26 @@ public Builder maxShingleSize(int maxShingleSize) {\n         }\n \n         @Override\n-        public SearchAsYouTypeFieldType fieldType() {\n-            return (SearchAsYouTypeFieldType) this.fieldType;\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [search_as_you_type] does not support doc values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MDYwNg=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MDMwMA==", "bodyText": "for all of these subtle changes, on one hand we could consider them bugfixes. but I am afraid that users may rely on us silently accepting wrong mappings and we should rather deprecate first and remove in 8.0, if possible", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r450080300", "createdAt": "2020-07-06T08:57:08Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -147,23 +148,26 @@ public Builder maxShingleSize(int maxShingleSize) {\n         }\n \n         @Override\n-        public SearchAsYouTypeFieldType fieldType() {\n-            return (SearchAsYouTypeFieldType) this.fieldType;\n+        public Builder docValues(boolean docValues) {\n+            if (docValues) {\n+                throw new IllegalArgumentException(\"mapper [\" + name() + \"] of type [search_as_you_type] does not support doc values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MDYwNg=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4MTA3OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1NzozOFrOGj-wcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozODoxNlrOGrggYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTU1Mw==", "bodyText": "was this also thrown before?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440381553", "createdAt": "2020-06-15T18:57:38Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -681,6 +703,9 @@ protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n                 this.shingleFields[i] = (ShingleFieldMapper) this.shingleFields[i].merge(m.shingleFields[i]);\n             }\n         }\n+        if (Objects.equals(this.fieldType().similarity(), other.fieldType().similarity()) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has different [similarity] settings\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NDUzMQ==", "bodyText": "As above, it was silently ignored.  I'll open an issue to make this emit a warning in 7x", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448274531", "createdAt": "2020-07-01T10:38:16Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -681,6 +703,9 @@ protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n                 this.shingleFields[i] = (ShingleFieldMapper) this.shingleFields[i].merge(m.shingleFields[i]);\n             }\n         }\n+        if (Objects.equals(this.fieldType().similarity(), other.fieldType().similarity()) == false) {\n+            conflicts.add(\"mapper [\" + name() + \"] has different [similarity] settings\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTU1Mw=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4NDQ1OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1ODo0MlrOGj-ytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozOTo1M1rOGrgjFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjEzMg==", "bodyText": "this seems like a new error that was not returned before?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440382132", "createdAt": "2020-06-15T18:58:42Z", "author": {"login": "javanna"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +211,11 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers and null values as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NTIyMw==", "bodyText": "You're right.  I think this is the right choice (if you've indexed some docs while disabling increments, and then you index further docs after they have been enabled, the numbers stored in the two docs won't be comparable), but it should be a warning in 7x instead of an error.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448275223", "createdAt": "2020-07-01T10:39:53Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java", "diffHunk": "@@ -202,8 +211,11 @@ protected String contentType() {\n \n     @Override\n     protected void mergeOptions(FieldMapper other, List<String> conflicts) {\n-        this.analyzer = ((TokenCountFieldMapper) other).analyzer;\n-        this.enablePositionIncrements = ((TokenCountFieldMapper) other).enablePositionIncrements;\n+        // TODO we should ban updating analyzers and null values as well\n+        if (this.enablePositionIncrements != ((TokenCountFieldMapper)other).enablePositionIncrements) {\n+            conflicts.add(\"mapper [\" + name() + \"] has a different [enable_position_increments] setting\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjEzMg=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgxMDQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozNzowN1rOGkABJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0MToyOVrOGrgmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjIxMg==", "bodyText": "what happens with these checks once isSearchable returns true yet there is no index? Do we need to distinguish between the two?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440402212", "createdAt": "2020-06-15T19:37:07Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java", "diffHunk": "@@ -328,13 +306,13 @@ public void parse(ParseContext context) throws IOException {\n             }\n \n             List<IndexableField> fields = new ArrayList<>();\n-            if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.hasDocValues()) {\n+            if (mappedFieldType.isSearchable() || mappedFieldType.hasDocValues()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NTk3Ng==", "bodyText": "We will need to distinguish between them in the future, yes.  This is something of a shim though - the plan is to eventually move everything to parametrized mappers (see #58663) which will change how this works again.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448275976", "createdAt": "2020-07-01T10:41:29Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java", "diffHunk": "@@ -328,13 +306,13 @@ public void parse(ParseContext context) throws IOException {\n             }\n \n             List<IndexableField> fields = new ArrayList<>();\n-            if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.hasDocValues()) {\n+            if (mappedFieldType.isSearchable() || mappedFieldType.hasDocValues()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjIxMg=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgxMzgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozODowOVrOGkADQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0MjozMVrOGrgoMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjc1Mw==", "bodyText": "is this a new error that gets returned compared to before?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440402753", "createdAt": "2020-06-15T19:38:09Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java", "diffHunk": "@@ -65,16 +67,23 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n         public BinaryFieldMapper build(BuilderContext context) {\n-            setupFieldType(context);\n-            return new BinaryFieldMapper(name, fieldType, defaultFieldType,\n+            return new BinaryFieldMapper(name, fieldType, new BinaryFieldType(buildFullName(context), hasDocValues, meta),\n                     context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);\n         }\n+\n+        @Override\n+        public Builder index(boolean index) {\n+            if (index) {\n+                throw new MapperParsingException(\"Binary field [\" + name() + \"] cannot be indexed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjUyOA==", "bodyText": "It would have previously been caught by the rather byzantine logic in the base class.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448276528", "createdAt": "2020-07-01T10:42:31Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java", "diffHunk": "@@ -65,16 +67,23 @@\n     public static class Builder extends FieldMapper.Builder<Builder> {\n \n         public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);\n+            super(name, Defaults.FIELD_TYPE);\n             builder = this;\n         }\n \n         @Override\n         public BinaryFieldMapper build(BuilderContext context) {\n-            setupFieldType(context);\n-            return new BinaryFieldMapper(name, fieldType, defaultFieldType,\n+            return new BinaryFieldMapper(name, fieldType, new BinaryFieldType(buildFullName(context), hasDocValues, meta),\n                     context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);\n         }\n+\n+        @Override\n+        public Builder index(boolean index) {\n+            if (index) {\n+                throw new MapperParsingException(\"Binary field [\" + name() + \"] cannot be indexed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjc1Mw=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgxNjg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozOToxMVrOGkAFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0NDo1MlrOGrgtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzI2Nw==", "bodyText": "new error?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440403267", "createdAt": "2020-06-15T19:39:11Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -411,13 +422,21 @@ private void checkCompletionContextsLimit(BuilderContext context) {\n                 }\n             }\n         }\n+\n+        @Override\n+        public Builder index(boolean index) {\n+            if (index == false) {\n+                throw new MapperParsingException(\"Completion field type must be indexed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3Nzc5NQ==", "bodyText": "It was ignored before, should be a warning in 7x", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448277795", "createdAt": "2020-07-01T10:44:52Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -411,13 +422,21 @@ private void checkCompletionContextsLimit(BuilderContext context) {\n                 }\n             }\n         }\n+\n+        @Override\n+        public Builder index(boolean index) {\n+            if (index == false) {\n+                throw new MapperParsingException(\"Completion field type must be indexed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzI2Nw=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgzNDQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0NDozOFrOGkAQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo1MTowMVrOGrg4uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNjEwNw==", "bodyText": "new or existing error?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440406107", "createdAt": "2020-06-15T19:44:38Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -372,18 +334,23 @@ private void mergeSharedOptions(FieldMapper mergeWith, List<String> conflicts) {\n                 + \"] to [\" + mergeWith.contentType() + \"]\");\n         }\n \n-        MappedFieldType other = mergeWith.fieldType;\n+        FieldType other = mergeWith.fieldType;\n+        MappedFieldType otherm = mergeWith.mappedFieldType;\n+        this.mappedFieldType.updateMeta(otherm.meta());\n \n         boolean indexed =  fieldType.indexOptions() != IndexOptions.NONE;\n         boolean mergeWithIndexed = other.indexOptions() != IndexOptions.NONE;\n-        // TODO: should be validating if index options go \"up\" (but \"down\" is ok)\n         if (indexed != mergeWithIndexed) {\n             conflicts.add(\"mapper [\" + name() + \"] has different [index] values\");\n         }\n+        // TODO: should be validating if index options go \"up\" (but \"down\" is ok)\n+        if (fieldType.indexOptions() != other.indexOptions()) {\n+            conflicts.add(\"mapper [\" + name() + \"] has different [index_options] values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MDc2Mw==", "bodyText": "Hm, I thought this was an existing error but it looks like it's a new one.  I'll add to the 'warnings in 7x' list.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448280763", "createdAt": "2020-07-01T10:51:01Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -372,18 +334,23 @@ private void mergeSharedOptions(FieldMapper mergeWith, List<String> conflicts) {\n                 + \"] to [\" + mergeWith.contentType() + \"]\");\n         }\n \n-        MappedFieldType other = mergeWith.fieldType;\n+        FieldType other = mergeWith.fieldType;\n+        MappedFieldType otherm = mergeWith.mappedFieldType;\n+        this.mappedFieldType.updateMeta(otherm.meta());\n \n         boolean indexed =  fieldType.indexOptions() != IndexOptions.NONE;\n         boolean mergeWithIndexed = other.indexOptions() != IndexOptions.NONE;\n-        // TODO: should be validating if index options go \"up\" (but \"down\" is ok)\n         if (indexed != mergeWithIndexed) {\n             conflicts.add(\"mapper [\" + name() + \"] has different [index] values\");\n         }\n+        // TODO: should be validating if index options go \"up\" (but \"down\" is ok)\n+        if (fieldType.indexOptions() != other.indexOptions()) {\n+            conflicts.add(\"mapper [\" + name() + \"] has different [index_options] values\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNjEwNw=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg0MDQwOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0NjoyMlrOGkAUEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo1MTo0M1rOGrg6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzA1OQ==", "bodyText": "have we changed behaviour here?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440407059", "createdAt": "2020-06-15T19:46:22Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "diffHunk": "@@ -160,9 +169,6 @@ public Query termsQuery(List<?> values, QueryShardContext context) {\n \n         @Override\n         public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n-            if (indexOptions() == IndexOptions.NONE) {\n-                throw new IllegalArgumentException(\"Fielddata access on the _id field is disallowed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTEzNg==", "bodyText": "No, the ID field is always indexed (you can't configure metadata).", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448281136", "createdAt": "2020-07-01T10:51:43Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "diffHunk": "@@ -160,9 +169,6 @@ public Query termsQuery(List<?> values, QueryShardContext context) {\n \n         @Override\n         public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n-            if (indexOptions() == IndexOptions.NONE) {\n-                throw new IllegalArgumentException(\"Fielddata access on the _id field is disallowed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzA1OQ=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg1NzA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MTo1N1rOGkAerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo1MjoyMFrOGrg7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwOTc3NQ==", "bodyText": "new error?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440409775", "createdAt": "2020-06-15T19:51:57Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "diffHunk": "@@ -46,16 +47,24 @@\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    public abstract static class Builder<T extends Builder> extends FieldMapper.Builder<T> {\n-        public Builder(String name, MappedFieldType fieldType, MappedFieldType defaultFieldType) {\n-            super(name, fieldType, defaultFieldType);\n+    public abstract static class Builder<T extends Builder<T>> extends FieldMapper.Builder<T> {\n+        public Builder(String name, FieldType fieldType) {\n+            super(name, fieldType);\n+        }\n+\n+        @Override\n+        public T index(boolean index) {\n+            if (index == false) {\n+                throw new IllegalArgumentException(\"Metadata fields must be indexed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTQyMA==", "bodyText": "It should be an assertion really - you can't configure metadata fields, so this should never be called.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448281420", "createdAt": "2020-07-01T10:52:20Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "diffHunk": "@@ -46,16 +47,24 @@\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    public abstract static class Builder<T extends Builder> extends FieldMapper.Builder<T> {\n-        public Builder(String name, MappedFieldType fieldType, MappedFieldType defaultFieldType) {\n-            super(name, fieldType, defaultFieldType);\n+    public abstract static class Builder<T extends Builder<T>> extends FieldMapper.Builder<T> {\n+        public Builder(String name, FieldType fieldType) {\n+            super(name, fieldType);\n+        }\n+\n+        @Override\n+        public T index(boolean index) {\n+            if (index == false) {\n+                throw new IllegalArgumentException(\"Metadata fields must be indexed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwOTc3NQ=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2MDEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1Mjo1NVrOGkAgiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1Mjo1NVrOGkAgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDI0OQ==", "bodyText": "is it ok that includeDefaults is no longer checked?", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440410249", "createdAt": "2020-06-15T19:52:55Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java", "diffHunk": "@@ -1114,8 +1129,8 @@ protected void doXContentBody(XContentBuilder builder, boolean includeDefaults,\n             builder.field(\"coerce\", coerce.value());\n         }\n \n-        if (includeDefaults || fieldType().nullValue() != null) {\n-            builder.field(\"null_value\", fieldType().nullValue());\n+        if (nullValue != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg5NTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDowNDozMVrOGkA3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo1NTo0NFrOGrhBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNjAxMA==", "bodyText": "I got lost trying to figure out if the updated if is equivalent to the previous one.", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r440416010", "createdAt": "2020-06-15T20:04:31Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java", "diffHunk": "@@ -333,10 +332,12 @@ private static Fields generateTermVectorsFromDoc(IndexShard indexShard, TermVect\n     public static String[] getValues(IndexableField[] fields) {\n         List<String> result = new ArrayList<>();\n         for (IndexableField field : fields) {\n-            if (field.fieldType() instanceof KeywordFieldMapper.KeywordFieldType) {\n-                result.add(field.binaryValue().utf8ToString());\n-            } else if (field.fieldType() instanceof StringFieldType) {\n-                result.add(field.stringValue());\n+            if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n+                if (field.binaryValue() != null) {\n+                    result.add(field.binaryValue().utf8ToString());\n+                } else {\n+                    result.add(field.stringValue());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MzA3Mw==", "bodyText": "Point fields all have IndexOptions.NONE set, so we should only encounter keyword (binary) fields and text fields here.  Text fields return null from field.binaryValue(), so we check that first to see if it's a keyword field and if so extract the binary value; otherwise it's a text field and so we get the string value.  The tests all seem happy...", "url": "https://github.com/elastic/elasticsearch/pull/57666#discussion_r448283073", "createdAt": "2020-07-01T10:55:44Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java", "diffHunk": "@@ -333,10 +332,12 @@ private static Fields generateTermVectorsFromDoc(IndexShard indexShard, TermVect\n     public static String[] getValues(IndexableField[] fields) {\n         List<String> result = new ArrayList<>();\n         for (IndexableField field : fields) {\n-            if (field.fieldType() instanceof KeywordFieldMapper.KeywordFieldType) {\n-                result.add(field.binaryValue().utf8ToString());\n-            } else if (field.fieldType() instanceof StringFieldType) {\n-                result.add(field.stringValue());\n+            if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n+                if (field.binaryValue() != null) {\n+                    result.add(field.binaryValue().utf8ToString());\n+                } else {\n+                    result.add(field.stringValue());\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNjAxMA=="}, "originalCommit": {"oid": "0ac318dbcf7a767e370e8a36417dcc22796ede0c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3678, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}