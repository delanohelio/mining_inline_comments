{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzQwMDgy", "number": 54439, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MTo0OFrODsvQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MDoyNFrODtDTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM4MzI2OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotShardStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MTo0OFrOF9wd7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1MTo0OFrOF9wd7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTU1MQ==", "bodyText": "The \"inner open count\" information is obsolete since #53860 and has been removed", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400301551", "createdAt": "2020-03-30T15:51:48Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotShardStats.java", "diffHunk": "@@ -137,17 +135,17 @@ public int hashCode() {\n         private final Counter cachedBytesRead;\n         private final TimedCounter cachedBytesWritten;\n         private final TimedCounter directBytesRead;\n+        private final TimedCounter optimizedBytesRead;\n \n-        public CacheIndexInputStats(String fileName, long fileLength, long openCount, long innerCount, long closeCount,\n+        public CacheIndexInputStats(String fileName, long fileLength, long openCount, long closeCount,\n                                     Counter forwardSmallSeeks, Counter backwardSmallSeeks,\n                                     Counter forwardLargeSeeks, Counter backwardLargeSeeks,\n                                     Counter contiguousReads, Counter nonContiguousReads,\n                                     Counter cachedBytesRead, TimedCounter cachedBytesWritten,\n-                                    TimedCounter directBytesRead) {\n+                                    TimedCounter directBytesRead, TimedCounter optimizedBytesRead) {\n             this.fileName = fileName;\n             this.fileLength = fileLength;\n             this.openCount = openCount;\n-            this.innerCount = innerCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM4Nzg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotShardStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Mjo0NVrOF9wguA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Mjo0NVrOF9wguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMjI2NA==", "bodyText": "This new timed counter is added to track information about optimized read operations executed in DirectBlobContainerIndexInput", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400302264", "createdAt": "2020-03-30T15:52:45Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotShardStats.java", "diffHunk": "@@ -158,13 +156,13 @@ public CacheIndexInputStats(String fileName, long fileLength, long openCount, lo\n             this.cachedBytesRead = cachedBytesRead;\n             this.cachedBytesWritten = cachedBytesWritten;\n             this.directBytesRead = directBytesRead;\n+            this.optimizedBytesRead = optimizedBytesRead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM5MzQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Mzo1M1rOF9wkIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Mzo1M1rOF9wkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzEzOQ==", "bodyText": "offset and length are common attributes and that's why they are added to BaseSearchableSnapshotIndexInput (sorry for the extra noise in ctors)", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400303139", "createdAt": "2020-03-30T15:53:53Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "diffHunk": "@@ -14,33 +14,90 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n public abstract class BaseSearchableSnapshotIndexInput extends BufferedIndexInput {\n \n+    protected final SearchableSnapshotDirectory directory;\n     protected final BlobContainer blobContainer;\n     protected final FileInfo fileInfo;\n     protected final IOContext context;\n+    protected final IndexInputStats stats;\n+    protected final long offset;\n+    protected final long length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM5OTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NToxOFrOF9woQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MDo0NlrOF-QAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDE5NQ==", "bodyText": "I noticed this while writing tests: we don't align the buffer size in the same way than BufferedIndexInput would do (ie, based on the IOContext)", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400304195", "createdAt": "2020-03-30T15:55:18Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -244,7 +244,7 @@ public IndexInput openInput(final String name, final IOContext context) throws I\n         if (useCache && isExcludedFromCache(name) == false) {\n             return new CachedBlobContainerIndexInput(this, fileInfo, context, inputStats);\n         } else {\n-            return new DirectBlobContainerIndexInput(blobContainer, fileInfo, context, uncachedChunkSize, BufferedIndexInput.BUFFER_SIZE);\n+            return new DirectBlobContainerIndexInput(this, fileInfo, context, inputStats, uncachedChunkSize, bufferSize(context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxODIxOA==", "bodyText": "Good catch \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400818218", "createdAt": "2020-03-31T10:50:46Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -244,7 +244,7 @@ public IndexInput openInput(final String name, final IOContext context) throws I\n         if (useCache && isExcludedFromCache(name) == false) {\n             return new CachedBlobContainerIndexInput(this, fileInfo, context, inputStats);\n         } else {\n-            return new DirectBlobContainerIndexInput(blobContainer, fileInfo, context, uncachedChunkSize, BufferedIndexInput.BUFFER_SIZE);\n+            return new DirectBlobContainerIndexInput(this, fileInfo, context, inputStats, uncachedChunkSize, bufferSize(context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDE5NQ=="}, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwMjE1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/CachedBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NTo0NlrOF9wpgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NTo0NlrOF9wpgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDUxMg==", "bodyText": "This is not necessary but I added it for consistency", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400304512", "createdAt": "2020-03-30T15:55:46Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/CachedBlobContainerIndexInput.java", "diffHunk": "@@ -185,28 +160,26 @@ protected void seekInternal(long pos) throws IOException {\n \n     @Override\n     public CachedBlobContainerIndexInput clone() {\n-        final CachedBlobContainerIndexInput clone = (CachedBlobContainerIndexInput) super.clone();\n-        clone.closed = new AtomicBoolean(false);\n-        clone.isClone = true;\n-        return clone;\n+        return (CachedBlobContainerIndexInput) super.clone();\n     }\n \n     @Override\n     public IndexInput slice(String sliceDescription, long offset, long length) {\n-        if (offset < 0 || length < 0 || offset + length > this.length()) {\n+        if (offset < 0 || length < 0 || offset + length > length()) {\n             throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: offset=\" + offset\n-                + \",length=\" + length + \",fileLength=\" + this.length() + \": \" + this);\n+                + \",length=\" + length + \",fileLength=\" + length() + \": \" + this);\n         }\n-        return new CachedBlobContainerIndexInput(getFullSliceDescription(sliceDescription), directory, fileInfo, context, stats,\n-            this.offset + offset, length, true, cacheFileReference);\n+        final CachedBlobContainerIndexInput slice = new CachedBlobContainerIndexInput(getFullSliceDescription(sliceDescription), directory,\n+            fileInfo, context, stats, this.offset + offset, length, cacheFileReference);\n+        slice.isClone = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwNDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NjoyMFrOF9wrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NjoyMFrOF9wrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDkzNw==", "bodyText": "This is were \"direct_read_bytes\" are captured for direct index inputs.", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400304937", "createdAt": "2020-03-30T15:56:20Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "diffHunk": "@@ -118,12 +119,15 @@ private void readInternalBytes(final int part, long pos, final byte[] b, int off\n \n         if (optimizedReadSize < length) {\n             // we did not read everything in an optimized fashion, so read the remainder directly\n+            final long startTimeNanos = directory.statsCurrentTimeNanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQxMTY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Nzo0OFrOF9wvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Nzo0OFrOF9wvbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNjAyOQ==", "bodyText": "This is were \"optimized_read_bytes\" are captured for direct index inputs. Note that they are only added to stats when the stream is closed. This is useful in case the inner input stream reads all remaining bytes on closing (though there is no test for this).", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400306029", "createdAt": "2020-03-30T15:57:48Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "diffHunk": "@@ -190,10 +194,38 @@ private int readFromNewSequentialStream(int part, long pos, byte[] b, int offset\n             return 0;\n         }\n \n+        final long startTimeNanos = directory.statsCurrentTimeNanos();\n+\n         // if we open a stream of length streamLength then it will not be completely consumed by this read, so it is worthwhile to open\n         // it and keep it open for future reads\n         final InputStream inputStream = openBlobStream(part, pos, streamLength);\n-        streamForSequentialReads = new StreamForSequentialReads(inputStream, part, pos, streamLength);\n+        streamForSequentialReads = new StreamForSequentialReads(new FilterInputStream(inputStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY1Njk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInputTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0NzozM1rOF-P55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo1MDowN1rOF-ZoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNjYxMw==", "bodyText": "As far as I can see, we pass the whole SearchableSnapshotDirectory into the IndexInput so that the IndexInput has access to the current time for stats purposes, leading to this mocking here -- otherwise we could continue to pass in just the BlobContainer. I think it would be neater to keep passing the BlobContainer and either pass in a LongSupplier for the current time, or else attach the current time supplier to the IndexInputStats.", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400816613", "createdAt": "2020-03-31T10:47:33Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInputTests.java", "diffHunk": "@@ -94,7 +96,9 @@ public int read(byte[] b, int off, int len) throws IOException {\n                     };\n                 }\n             });\n-        return new DirectBlobContainerIndexInput(blobContainer, fileInfo, newIOContext(random()), minimumReadSize,\n+        final SearchableSnapshotDirectory directory = mock(SearchableSnapshotDirectory.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3NTkxNg==", "bodyText": "attach the current time supplier to the IndexInputStats\n\nI like this one, so I pushed 47d7e4c", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400975916", "createdAt": "2020-03-31T14:50:07Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInputTests.java", "diffHunk": "@@ -94,7 +96,9 @@ public int read(byte[] b, int off, int len) throws IOException {\n                     };\n                 }\n             });\n-        return new DirectBlobContainerIndexInput(blobContainer, fileInfo, newIOContext(random()), minimumReadSize,\n+        final SearchableSnapshotDirectory directory = mock(SearchableSnapshotDirectory.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNjYxMw=="}, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY2NTg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MDoyNFrOF-P_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0ODo1MFrOF-Wslw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxODA0Mw==", "bodyText": "This also includes the time spent waiting for sequential reads to be requested by the caller. What do you think about timing each read call instead and adding all those timings up?", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400818043", "createdAt": "2020-03-31T10:50:24Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "diffHunk": "@@ -190,10 +194,38 @@ private int readFromNewSequentialStream(int part, long pos, byte[] b, int offset\n             return 0;\n         }\n \n+        final long startTimeNanos = directory.statsCurrentTimeNanos();\n+\n         // if we open a stream of length streamLength then it will not be completely consumed by this read, so it is worthwhile to open\n         // it and keep it open for future reads\n         final InputStream inputStream = openBlobStream(part, pos, streamLength);\n-        streamForSequentialReads = new StreamForSequentialReads(inputStream, part, pos, streamLength);\n+        streamForSequentialReads = new StreamForSequentialReads(new FilterInputStream(inputStream) {\n+            private int bytesRead = 0;\n+\n+            @Override\n+            public int read() throws IOException {\n+                final int result = super.read();\n+                if (result != -1) {\n+                    bytesRead += result;\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public int read(byte[] b, int off, int len) throws IOException {\n+                final int result = super.read(b, off, len);\n+                if (result != -1) {\n+                    bytesRead += result;\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                super.close();\n+                stats.addOptimizedBytesRead(bytesRead, directory.statsCurrentTimeNanos() - startTimeNanos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyNzg5NQ==", "bodyText": "You're right. I pushed a940930 which accumulates numbers for each read operation before adding the sums when the stream is closed. This way the stat will reflect a single read operation that consumed the total bytes of the stream with a more accurate timing.\nI adapted the test.", "url": "https://github.com/elastic/elasticsearch/pull/54439#discussion_r400927895", "createdAt": "2020-03-31T13:48:50Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/direct/DirectBlobContainerIndexInput.java", "diffHunk": "@@ -190,10 +194,38 @@ private int readFromNewSequentialStream(int part, long pos, byte[] b, int offset\n             return 0;\n         }\n \n+        final long startTimeNanos = directory.statsCurrentTimeNanos();\n+\n         // if we open a stream of length streamLength then it will not be completely consumed by this read, so it is worthwhile to open\n         // it and keep it open for future reads\n         final InputStream inputStream = openBlobStream(part, pos, streamLength);\n-        streamForSequentialReads = new StreamForSequentialReads(inputStream, part, pos, streamLength);\n+        streamForSequentialReads = new StreamForSequentialReads(new FilterInputStream(inputStream) {\n+            private int bytesRead = 0;\n+\n+            @Override\n+            public int read() throws IOException {\n+                final int result = super.read();\n+                if (result != -1) {\n+                    bytesRead += result;\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public int read(byte[] b, int off, int len) throws IOException {\n+                final int result = super.read(b, off, len);\n+                if (result != -1) {\n+                    bytesRead += result;\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                super.close();\n+                stats.addOptimizedBytesRead(bytesRead, directory.statsCurrentTimeNanos() - startTimeNanos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxODA0Mw=="}, "originalCommit": {"oid": "1263b07456a364c2581c4a7ff75dc7c793c4ec3e"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3983, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}