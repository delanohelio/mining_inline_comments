{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTI5NjM1", "number": 53459, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDozMFrODnh-ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxMzoyN1rODnjZfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3NzAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDozMFrOF1laAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoyOToxNlrOF17K4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTcxMw==", "bodyText": "I think this might need to remain within the try block, as indexShard() can throw an exception.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391731713", "createdAt": "2020-03-12T16:14:30Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "diffHunk": "@@ -171,11 +171,13 @@ private void doRecovery(final long recoveryId) {\n             final RecoveryTarget recoveryTarget = recoveryRef.target();\n             timer = recoveryTarget.state().getTimer();\n             cancellableThreads = recoveryTarget.cancellableThreads();\n+            final IndexShard indexShard = recoveryTarget.indexShard();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4ODI4OA==", "bodyText": "Good catch - I should not have moved that", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r392088288", "createdAt": "2020-03-13T08:29:16Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "diffHunk": "@@ -171,11 +171,13 @@ private void doRecovery(final long recoveryId) {\n             final RecoveryTarget recoveryTarget = recoveryRef.target();\n             timer = recoveryTarget.state().getTimer();\n             cancellableThreads = recoveryTarget.cancellableThreads();\n+            final IndexShard indexShard = recoveryTarget.indexShard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTcxMw=="}, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzk5NTYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzowOTozN1rOF1nlUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODozMzozNFrOF17Rkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NzM3Ng==", "bodyText": "More for my curiosity than something that needs changing: why can we not assert state == IndexShardState.RECOVERING here? The lifecycle of an IndexShard is still a bit opaque to me.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391767376", "createdAt": "2020-03-12T17:09:37Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShard.java", "diffHunk": "@@ -1313,6 +1313,13 @@ public void close(String reason, boolean flushEngine) throws IOException {\n         }\n     }\n \n+    public void preRecovery() {\n+        if (state != IndexShardState.RECOVERING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MDAwMw==", "bodyText": "I think it makes more sense to assert here, there's no reason to not do it.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r392090003", "createdAt": "2020-03-13T08:33:34Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShard.java", "diffHunk": "@@ -1313,6 +1313,13 @@ public void close(String reason, boolean flushEngine) throws IOException {\n         }\n     }\n \n+    public void preRecovery() {\n+        if (state != IndexShardState.RECOVERING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NzM3Ng=="}, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODAxMDIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxMzoyN1rOF1nuXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNDozNlrOF18a5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2OTY5NQ==", "bodyText": "Suggest adding a big warning in a comment here saying how dangerous it is to specify the translog UUID and that it should only be used for shards that will see no indexing.\nI'm also idly wondering about how hard it would be to make this Translog read-only when it's not been created with a fresh UUID. Probably too hard to be worth doing, but thought I'd mention it anyway.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391769695", "createdAt": "2020-03-12T17:13:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "diffHunk": "@@ -1838,20 +1840,41 @@ public static String createEmptyTranslog(final Path location, final long initial\n \n     static String createEmptyTranslog(Path location, long initialGlobalCheckpoint, ShardId shardId,\n                                       ChannelFactory channelFactory, long primaryTerm) throws IOException {\n+        return createEmptyTranslog(location, shardId, initialGlobalCheckpoint, primaryTerm, null, channelFactory);\n+    }\n+\n+    public static String createEmptyTranslog(final Path location,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODc3NQ==", "bodyText": "Suggest adding a big warning in a comment here saying how dangerous it is to specify the translog UUID and that it should only be used for shards that will see no indexing.\n\nSure, I added some doc in 557d924\n\nI'm also idly wondering about how hard it would be to make this Translog read-only when it's not been created with a fresh UUID. Probably too hard to be worth doing, but thought I'd mention it anyway.\n\nI find the idea interesting but I'm not sure if it worths it; I'd prefer to not create translogs at all if they were not to be used.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r392108775", "createdAt": "2020-03-13T09:14:36Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "diffHunk": "@@ -1838,20 +1840,41 @@ public static String createEmptyTranslog(final Path location, final long initial\n \n     static String createEmptyTranslog(Path location, long initialGlobalCheckpoint, ShardId shardId,\n                                       ChannelFactory channelFactory, long primaryTerm) throws IOException {\n+        return createEmptyTranslog(location, shardId, initialGlobalCheckpoint, primaryTerm, null, channelFactory);\n+    }\n+\n+    public static String createEmptyTranslog(final Path location,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2OTY5NQ=="}, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3319, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}