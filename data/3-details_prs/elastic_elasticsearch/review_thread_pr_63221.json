{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDIzNTg1", "number": 63221, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0Nzo1M1rOEqQ0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNDoxNlrOEqc1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzUxMTA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0Nzo1M1rOHcXiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowMzowNVrOHceiXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNzkwNQ==", "bodyText": "nit: I would add a comment as it is not obvious why we would generate the id ( in the same way it would be autogenerated as the doc id ) here", "url": "https://github.com/elastic/elasticsearch/pull/63221#discussion_r499507905", "createdAt": "2020-10-05T10:47:53Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequest.java", "diffHunk": "@@ -45,13 +49,19 @@ public CreateApiKeyRequest() {}\n      * @param expiration to specify expiration for the API key\n      */\n     public CreateApiKeyRequest(String name, @Nullable List<RoleDescriptor> roleDescriptors, @Nullable TimeValue expiration) {\n+        this.id = UUIDs.base64UUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea139c73d11803f10b21cea16db6bc0d858f038"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMjQ5Mw==", "bodyText": "Yes, I'll do that, I wanted to do that, thanks.", "url": "https://github.com/elastic/elasticsearch/pull/63221#discussion_r499622493", "createdAt": "2020-10-05T14:03:05Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequest.java", "diffHunk": "@@ -45,13 +49,19 @@ public CreateApiKeyRequest() {}\n      * @param expiration to specify expiration for the API key\n      */\n     public CreateApiKeyRequest(String name, @Nullable List<RoleDescriptor> roleDescriptors, @Nullable TimeValue expiration) {\n+        this.id = UUIDs.base64UUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNzkwNQ=="}, "originalCommit": {"oid": "5ea139c73d11803f10b21cea16db6bc0d858f038"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzYwNTg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequestTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToxNjo1NFrOHcYb8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowNjozMlrOHcersA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMjU0Ng==", "bodyText": "Uncomment the randomBoolean()?", "url": "https://github.com/elastic/elasticsearch/pull/63221#discussion_r499522546", "createdAt": "2020-10-05T11:16:54Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequestTests.java", "diffHunk": "@@ -96,11 +97,22 @@ public void testSerialization() throws IOException {\n         }\n         request.setRoleDescriptors(descriptorList);\n \n+        boolean testV710Bwc = true;// randomBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea139c73d11803f10b21cea16db6bc0d858f038"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNDg4MA==", "bodyText": "Aaarg, it should be randomBoolean . Thanks for catching Yang!", "url": "https://github.com/elastic/elasticsearch/pull/63221#discussion_r499624880", "createdAt": "2020-10-05T14:06:32Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/CreateApiKeyRequestTests.java", "diffHunk": "@@ -96,11 +97,22 @@ public void testSerialization() throws IOException {\n         }\n         request.setRoleDescriptors(descriptorList);\n \n+        boolean testV710Bwc = true;// randomBoolean();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMjU0Ng=="}, "originalCommit": {"oid": "5ea139c73d11803f10b21cea16db6bc0d858f038"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ4MjE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNDoxNlrOHcqmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNDoxNlrOHcqmiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMDE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        assert indexResponse.getId() == request.getId();\n          \n          \n            \n                                        assert request.getId().equals(indexResponse.getId());", "url": "https://github.com/elastic/elasticsearch/pull/63221#discussion_r499820168", "createdAt": "2020-10-05T19:24:16Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -232,15 +232,19 @@ private void createApiKeyAndIndexIt(Authentication authentication, CreateApiKeyR\n             final IndexRequest indexRequest =\n                 client.prepareIndex(SECURITY_MAIN_ALIAS)\n                     .setSource(builder)\n+                    .setId(request.getId())\n                     .setRefreshPolicy(request.getRefreshPolicy())\n                     .request();\n             final BulkRequest bulkRequest = toSingleItemBulkRequest(indexRequest);\n \n             securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->\n                 executeAsyncWithOrigin(client, SECURITY_ORIGIN, BulkAction.INSTANCE, bulkRequest,\n                     TransportSingleItemBulkWriteAction.<IndexResponse>wrapBulkResponse(ActionListener.wrap(\n-                        indexResponse -> listener.onResponse(\n-                            new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),\n+                        indexResponse -> {\n+                            assert indexResponse.getId() == request.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823056503c2f8a9af77eab158b92a2d40ea63086"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3170, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}