{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTQ0NjIw", "number": 64428, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMTowN1rOE0RQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjowMzo1N1rOE8DEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjQ0MDc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMTowN1rOHr500w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjowMDo1NlrOH39idw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5ODIyNw==", "bodyText": "I left this in this PR, but can certainly split it out for greater visibility if you prefer.", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r515798227", "createdAt": "2020-11-02T08:11:07Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java", "diffHunk": "@@ -264,7 +264,7 @@ private static ByteSizeValue parse(final String initialInput, final String norma\n                          initialInput, settingName);\n                     return new ByteSizeValue((long) (doubleValue * unit.toBytes(1)));\n                 } catch (final NumberFormatException ignored) {\n-                    throw new ElasticsearchParseException(\"failed to parse [{}]\", e, initialInput);\n+                    throw new ElasticsearchParseException(\"failed to parse setting [{}] with value [{}]\", e, settingName, initialInput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656d474fcf23b3fd689d9244b7dad8bcda4df292"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MTk3NQ==", "bodyText": "Yeah, let's take this to another PR so that the core/infra team can have visibility on the change.", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528441975", "createdAt": "2020-11-23T02:00:56Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java", "diffHunk": "@@ -264,7 +264,7 @@ private static ByteSizeValue parse(final String initialInput, final String norma\n                          initialInput, settingName);\n                     return new ByteSizeValue((long) (doubleValue * unit.toBytes(1)));\n                 } catch (final NumberFormatException ignored) {\n-                    throw new ElasticsearchParseException(\"failed to parse [{}]\", e, initialInput);\n+                    throw new ElasticsearchParseException(\"failed to parse setting [{}] with value [{}]\", e, settingName, initialInput);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5ODIyNw=="}, "originalCommit": {"oid": "656d474fcf23b3fd689d9244b7dad8bcda4df292"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDAwMDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjowMjoyOFrOH39jZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1MjoxM1rOH4MIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjIxMw==", "bodyText": "Can you add a Javadoc describing the purpose of this interface?", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528442213", "createdAt": "2020-11-23T02:02:28Z", "author": {"login": "jasontedor"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+public interface PolicyValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTA4Ng==", "bodyText": "++, added in b9d87c5", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528681086", "createdAt": "2020-11-23T12:52:13Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+public interface PolicyValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjIxMw=="}, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDAwMTA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjowMjo0MlrOH39jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1MjoyMVrOH4MI0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjI0Mw==", "bodyText": "Could you add a Javadoc for this method?", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528442243", "createdAt": "2020-11-23T02:02:42Z", "author": {"login": "jasontedor"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+public interface PolicyValidator {\n+    void validate(AutoscalingPolicy policy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTE2OQ==", "bodyText": "++, added in b9d87c5", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528681169", "createdAt": "2020-11-23T12:52:21Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/PolicyValidator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling.action;\n+\n+import org.elasticsearch.xpack.autoscaling.policy.AutoscalingPolicy;\n+\n+public interface PolicyValidator {\n+    void validate(AutoscalingPolicy policy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjI0Mw=="}, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDAwMTk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/capacity/AutoscalingCalculateCapacityService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjowMzo1N1rOH39kBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1MjoyOVrOH4MJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjM3NA==", "bodyText": "Maybe a comment to indicate this method throws when there's an issue with the setting, and that's what we are testing for here? That is, make the purpose of this line clear?", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528442374", "createdAt": "2020-11-23T02:03:57Z", "author": {"login": "jasontedor"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/capacity/AutoscalingCalculateCapacityService.java", "diffHunk": "@@ -30,14 +33,40 @@\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-public class AutoscalingCalculateCapacityService {\n-    private Map<String, AutoscalingDeciderService<? extends AutoscalingDeciderConfiguration>> deciderByName;\n+public class AutoscalingCalculateCapacityService implements PolicyValidator {\n+    private final Map<String, AutoscalingDeciderService> deciderByName;\n \n-    public AutoscalingCalculateCapacityService(Set<AutoscalingDeciderService<? extends AutoscalingDeciderConfiguration>> deciders) {\n+    public AutoscalingCalculateCapacityService(Set<AutoscalingDeciderService> deciders) {\n         assert deciders.size() >= 1; // always have fixed\n         this.deciderByName = deciders.stream().collect(Collectors.toMap(AutoscalingDeciderService::name, Function.identity()));\n     }\n \n+    public void validate(AutoscalingPolicy policy) {\n+        policy.deciders().forEach(this::validate);\n+    }\n+\n+    private void validate(final String deciderName, final Settings configuration) {\n+        AutoscalingDeciderService deciderService = deciderByName.get(deciderName);\n+        if (deciderService == null) {\n+            throw new IllegalArgumentException(\"unknown decider [\" + deciderName + \"]\");\n+        }\n+\n+        Map<String, Setting<?>> deciderSettings = deciderService.deciderSettings()\n+            .stream()\n+            .collect(Collectors.toMap(s -> s.getKey(), Function.identity()));\n+\n+        configuration.keySet().forEach(key -> validateSetting(key, configuration, deciderSettings, deciderName));\n+    }\n+\n+    private void validateSetting(String key, Settings configuration, Map<String, Setting<?>> deciderSettings, String decider) {\n+        Setting<?> setting = deciderSettings.get(key);\n+        if (setting == null) {\n+            throw new IllegalArgumentException(\"unknown setting [\" + key + \"] for decider [\" + decider + \"]\");\n+        }\n+\n+        setting.get(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTI0NA==", "bodyText": "++, added in b9d87c5", "url": "https://github.com/elastic/elasticsearch/pull/64428#discussion_r528681244", "createdAt": "2020-11-23T12:52:29Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/capacity/AutoscalingCalculateCapacityService.java", "diffHunk": "@@ -30,14 +33,40 @@\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-public class AutoscalingCalculateCapacityService {\n-    private Map<String, AutoscalingDeciderService<? extends AutoscalingDeciderConfiguration>> deciderByName;\n+public class AutoscalingCalculateCapacityService implements PolicyValidator {\n+    private final Map<String, AutoscalingDeciderService> deciderByName;\n \n-    public AutoscalingCalculateCapacityService(Set<AutoscalingDeciderService<? extends AutoscalingDeciderConfiguration>> deciders) {\n+    public AutoscalingCalculateCapacityService(Set<AutoscalingDeciderService> deciders) {\n         assert deciders.size() >= 1; // always have fixed\n         this.deciderByName = deciders.stream().collect(Collectors.toMap(AutoscalingDeciderService::name, Function.identity()));\n     }\n \n+    public void validate(AutoscalingPolicy policy) {\n+        policy.deciders().forEach(this::validate);\n+    }\n+\n+    private void validate(final String deciderName, final Settings configuration) {\n+        AutoscalingDeciderService deciderService = deciderByName.get(deciderName);\n+        if (deciderService == null) {\n+            throw new IllegalArgumentException(\"unknown decider [\" + deciderName + \"]\");\n+        }\n+\n+        Map<String, Setting<?>> deciderSettings = deciderService.deciderSettings()\n+            .stream()\n+            .collect(Collectors.toMap(s -> s.getKey(), Function.identity()));\n+\n+        configuration.keySet().forEach(key -> validateSetting(key, configuration, deciderSettings, deciderName));\n+    }\n+\n+    private void validateSetting(String key, Settings configuration, Map<String, Setting<?>> deciderSettings, String decider) {\n+        Setting<?> setting = deciderSettings.get(key);\n+        if (setting == null) {\n+            throw new IllegalArgumentException(\"unknown setting [\" + key + \"] for decider [\" + decider + \"]\");\n+        }\n+\n+        setting.get(configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MjM3NA=="}, "originalCommit": {"oid": "69b0ac8153d54d5c693ecc4bfa68d702dac80d32"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}