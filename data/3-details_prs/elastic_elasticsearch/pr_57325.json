{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODExMjU4", "number": 57325, "title": "Include hidden indices in snapshots by default", "bodyText": "Previously, hidden indices were not included in snapshots by default, unless\nspecified using one of the usual methods for doing so: naming indices directly,\nusing index patterns starting with a ., or specifying expand_wildcards to\na value that includes hidden (e.g. all or hidden,open).\nThis commit changes the default expand_wildcards value to include hidden\nindices.\nRelates #57208", "createdAt": "2020-05-29T00:01:18Z", "url": "https://github.com/elastic/elasticsearch/pull/57325", "merged": true, "mergeCommit": {"oid": "7d3a7afd16a44f2c5dbdf24954986ffeda8b58e4"}, "closed": true, "closedAt": "2020-06-03T23:09:34Z", "author": {"login": "gwbrown"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl26aEgH2gAyNDI0ODExMjU4OjE5M2UyNTE4YjFkYTMxOTkxNGRkMjc0ZjI3Y2NiZGI5NzRhNmE3NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnv0G9gH2gAyNDI0ODExMjU4OjFkZWQyMWNhNTcwY2RkZTA5NTg2YzQwNDkwMTMxZWZjYTNmNDAwMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/193e2518b1da319914dd274f27ccbdb974a6a748", "committedDate": "2020-05-28T23:59:57Z", "message": "Include hidden indices in snapshots by default\n\nPreviously, hidden indices were not included in snapshots by default, unless\nspecified using one of the usual methods for doing so: naming indices directly,\nusing index patterns starting with a `.`, or specifying `expand_wildcards` to\na value that includes hidden (e.g. `all` or `hidden,open`).\n\nThis commit changes the default `expand_wildcards` value to include hidden\nindices."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTcwNzcx", "url": "https://github.com/elastic/elasticsearch/pull/57325#pullrequestreview-420570771", "createdAt": "2020-05-29T00:03:18Z", "commit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowMzoxOFrOGcKquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowMzoxOFrOGcKquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODA5MQ==", "bodyText": "This line is the only functionality change, the rest of this PR is tests.", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r432188091", "createdAt": "2020-05-29T00:03:18Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "diffHunk": "@@ -72,7 +72,7 @@\n \n     private String[] indices = EMPTY_ARRAY;\n \n-    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandHidden();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1NzUx", "url": "https://github.com/elastic/elasticsearch/pull/57325#pullrequestreview-421475751", "createdAt": "2020-05-31T09:11:42Z", "commit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOToxMTo0MlrOGc3uxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOToxMTo0MlrOGc3uxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjQwNg==", "bodyText": "This test failed because the .security index could not be restored (either because it was never deleted as part of the test or auto re-created).", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r432926406", "createdAt": "2020-05-31T09:11:42Z", "author": {"login": "original-brownbear"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SnapshotIT.java", "diffHunk": "@@ -285,6 +286,49 @@ public void testRestoreSnapshot() throws IOException {\n         assertThat(restoreInfo.failedShards(), equalTo(0));\n     }\n \n+    public void testSnapshotHidden() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112ae0746328ea06b89d70ca5ee8ed6548b20257", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/112ae0746328ea06b89d70ca5ee8ed6548b20257", "committedDate": "2020-06-02T00:49:41Z", "message": "Fix SnapshotIT test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3f1e4f0db9815a5dfea809ba8c2bdc78d97d50", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/ab3f1e4f0db9815a5dfea809ba8c2bdc78d97d50", "committedDate": "2020-06-02T00:49:42Z", "message": "Implement deprecation warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62eea3fdd3e7f3e28553346131da13a2977e260", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/c62eea3fdd3e7f3e28553346131da13a2977e260", "committedDate": "2020-06-02T02:27:50Z", "message": "Minor wording fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDUwNjc1", "url": "https://github.com/elastic/elasticsearch/pull/57325#pullrequestreview-422450675", "createdAt": "2020-06-02T08:24:14Z", "commit": {"oid": "c62eea3fdd3e7f3e28553346131da13a2977e260"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODoyNDoxNVrOGdnPMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODoyNDoxNVrOGdnPMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDc1NA==", "bodyText": "This seems kind of wrong to me. We're adding something to the request here only so that we can log the deprecation warning accordingly?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r433704754", "createdAt": "2020-06-02T08:24:15Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "diffHunk": "@@ -72,7 +73,9 @@\n \n     private String[] indices = EMPTY_ARRAY;\n \n-    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandHidden();\n+\n+    private boolean defaultExpandWildcards = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62eea3fdd3e7f3e28553346131da13a2977e260"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5701974bdf5083afdda1156cdf5f68f7eeb7a64", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/d5701974bdf5083afdda1156cdf5f68f7eeb7a64", "committedDate": "2020-06-02T21:40:16Z", "message": "Revert \"Implement deprecation warning\"\n\nThis reverts commit ab3f1e4f0db9815a5dfea809ba8c2bdc78d97d50."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7b29cfa8819db62f3e8ddf52fdddd960edc5ea", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/1d7b29cfa8819db62f3e8ddf52fdddd960edc5ea", "committedDate": "2020-06-02T21:40:37Z", "message": "Merge branch 'master' into change-snapshot-wildcards-default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/17e7ad3b6753b5b8d5af8008e14ff8594b5cde88", "committedDate": "2020-06-02T22:28:25Z", "message": "Merge branch 'master' into change-snapshot-wildcards-default"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjA0MDg1", "url": "https://github.com/elastic/elasticsearch/pull/57325#pullrequestreview-423204085", "createdAt": "2020-06-03T04:07:10Z", "commit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowNzoxMFrOGeLVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowODo0MlrOGeLWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjE3OA==", "bodyText": "NIT: extra empty line", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296178", "createdAt": "2020-06-03T04:07:10Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(dottedHiddenIndex);\n+        }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjM0Mw==", "bodyText": "No need  to manually wipe these in the last step of the test as the tear-down logic will take care of it?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296343", "createdAt": "2020-06-03T04:07:58Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(dottedHiddenIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjQ5MQ==", "bodyText": "Can we use get instead of actionGet here and in other places in the new test to get full stack traces on failures?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296491", "createdAt": "2020-06-03T04:08:42Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b7956dd4cd2c4d504badb794d42d33f50d8a16e", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/9b7956dd4cd2c4d504badb794d42d33f50d8a16e", "committedDate": "2020-06-03T20:51:29Z", "message": "Cleanup per review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ded21ca570cdde09586c40490131efca3f4000a", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ded21ca570cdde09586c40490131efca3f4000a", "committedDate": "2020-06-03T20:51:35Z", "message": "Merge branch 'master' into change-snapshot-wildcards-default"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4146, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}