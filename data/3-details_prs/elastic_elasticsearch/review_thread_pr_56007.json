{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMjg2MzI4", "number": 56007, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0ODo1OFrOD4-PSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMzoxOFrOD5FGtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY2NTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0ODo1OFrOGP-w3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyMDozMFrOGQClZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMDE0Mw==", "bodyText": "I am not a big fan of a settings clause in the configuration.\nThe whole configuration is settings. It's settings for a transform.\nAdditionally, if we are ever going to say there are more transforms than pivot, this means those other transforms will have to abide by whatever settings are in this object.\nIt seems to me that these options should be in the pivot configuration.", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419410143", "createdAt": "2020-05-04T12:48:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.transform.transforms;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+public class SettingsConfig implements Writeable, ToXContentObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3Mjc0Mg==", "bodyText": "Perhaps ThrottlingConfig\nAs max_page_search_size is already in PivotConfig it is tempting to add docs_per_second as a loose field in PivotConfig and avoid deprecating PivotConfig.max_page_search_size and the associated BWC code. Possibly I am just a lazy programmer", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419472742", "createdAt": "2020-05-04T14:20:30Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.transform.transforms;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+public class SettingsConfig implements Writeable, ToXContentObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMDE0Mw=="}, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDcwNTQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportUpdateTransformAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1OToxNVrOGP_JVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1OToxNVrOGP_JVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxNjQwNQ==", "bodyText": "Early return might end up being more readable.", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419416405", "createdAt": "2020-05-04T12:59:15Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportUpdateTransformAction.java", "diffHunk": "@@ -132,68 +149,121 @@ protected TransportUpdateTransformAction(\n             clusterService.getNodeName(),\n             License.OperationMode.BASIC.description()\n         );\n+        this.threadPool = threadPool;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n     }\n \n     @Override\n-    protected String executor() {\n-        return ThreadPool.Names.SAME;\n-    }\n-\n-    @Override\n-    protected Response read(StreamInput in) throws IOException {\n-        return new Response(in);\n-    }\n-\n-    @Override\n-    protected void masterOperation(Task task, Request request, ClusterState clusterState, ActionListener<Response> listener) {\n-\n+    protected void doExecute(Task task, Request request, ActionListener<Response> listener) {\n         if (!licenseState.isAllowed(XPackLicenseState.Feature.TRANSFORM)) {\n             listener.onFailure(LicenseUtils.newComplianceException(XPackField.TRANSFORM));\n             return;\n         }\n \n+        final ClusterState clusterState = clusterService.state();\n         XPackPlugin.checkReadyForXPackCustomMetadata(clusterState);\n \n-        // set headers to run transform as calling user\n-        Map<String, String> filteredHeaders = threadPool.getThreadContext()\n-            .getHeaders()\n-            .entrySet()\n-            .stream()\n-            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n-            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-\n-        TransformConfigUpdate update = request.getUpdate();\n-        update.setHeaders(filteredHeaders);\n-\n-        // GET transform and attempt to update\n-        // We don't want the update to complete if the config changed between GET and INDEX\n-        transformConfigManager.getTransformConfigurationForUpdate(request.getId(), ActionListener.wrap(configAndVersion -> {\n-            final TransformConfig config = configAndVersion.v1();\n-            // If it is a noop don't bother even writing the doc, save the cycles, just return here.\n-            if (update.isNoop(config)) {\n-                listener.onResponse(new Response(config));\n-                return;\n+        final DiscoveryNodes nodes = clusterState.nodes();\n+\n+        if (nodes.isLocalNodeElectedMaster() == false) {\n+            // Delegates update transform to elected master node so it becomes the coordinating node.\n+            if (nodes.getMasterNode() == null) {\n+                listener.onFailure(new MasterNotDiscoveredException());\n+            } else {\n+                transportService.sendRequest(\n+                    nodes.getMasterNode(),\n+                    actionName,\n+                    request,\n+                    new ActionListenerResponseHandler<>(listener, Response::fromStreamWithBWC)\n+                );\n             }\n-            TransformConfig updatedConfig = update.apply(config);\n-            sourceDestValidator.validate(\n-                clusterState,\n-                updatedConfig.getSource().getIndex(),\n-                updatedConfig.getDestination().getIndex(),\n-                request.isDeferValidation() ? SourceDestValidations.NON_DEFERABLE_VALIDATIONS : SourceDestValidations.ALL_VALIDATIONS,\n-                ActionListener.wrap(\n-                    validationResponse -> {\n-                        checkPriviledgesAndUpdateTransform(request, clusterState, updatedConfig, configAndVersion.v2(), listener);\n-                    },\n-                    listener::onFailure\n-                )\n-            );\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDczODI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzowODoxN1rOGP_d6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo0MjoxMlrOGQDk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMTY3NA==", "bodyText": "It seems to me that a null passed in here is where you want to set the default values back. Otherwise, it becomes complicated to know when a null means \"not supplied\" vs \"revert to default\"\nSimilar comment for setMaxPageSearchSize", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419421674", "createdAt": "2020-05-04T13:08:17Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.transform.transforms;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+public class SettingsConfig implements Writeable, ToXContentObject {\n+    public static final ConstructingObjectParser<SettingsConfig, Void> STRICT_PARSER = createParser(false);\n+    public static final ConstructingObjectParser<SettingsConfig, Void> LENIENT_PARSER = createParser(true);\n+\n+    private static final int DEFAULT_MAX_PAGE_SEARCH_SIZE = -1;\n+    private static final float DEFAULT_DOCS_PER_SECOND = -1F;\n+\n+    private static ConstructingObjectParser<SettingsConfig, Void> createParser(boolean lenient) {\n+        ConstructingObjectParser<SettingsConfig, Void> parser = new ConstructingObjectParser<>(\n+            \"transform_config_settings\",\n+            lenient,\n+            args -> new SettingsConfig((Integer) args[0], (Float) args[1])\n+        );\n+        parser.declareIntOrNull(optionalConstructorArg(), DEFAULT_MAX_PAGE_SEARCH_SIZE, TransformField.MAX_PAGE_SEARCH_SIZE);\n+        parser.declareFloatOrNull(optionalConstructorArg(), DEFAULT_DOCS_PER_SECOND, TransformField.DOCS_PER_SECOND);\n+        return parser;\n+    }\n+\n+    private final Integer maxPageSearchSize;\n+    private final Float docsPerSecond;\n+\n+    public SettingsConfig() {\n+        this(null, null);\n+    }\n+\n+    public SettingsConfig(Integer maxPageSearchSize, Float docsPerSecond) {\n+        this.maxPageSearchSize = maxPageSearchSize;\n+        this.docsPerSecond = docsPerSecond;\n+    }\n+\n+    public SettingsConfig(final StreamInput in) throws IOException {\n+        this.maxPageSearchSize = in.readOptionalInt();\n+        this.docsPerSecond = in.readOptionalFloat();\n+    }\n+\n+    public Integer getMaxPageSearchSize() {\n+        return maxPageSearchSize;\n+    }\n+\n+    public Float getDocsPerSecond() {\n+        return docsPerSecond;\n+    }\n+\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeOptionalInt(maxPageSearchSize);\n+        out.writeOptionalFloat(docsPerSecond);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        // do not write default values\n+        if (maxPageSearchSize != null && (maxPageSearchSize.equals(DEFAULT_MAX_PAGE_SEARCH_SIZE) == false)) {\n+            builder.field(TransformField.MAX_PAGE_SEARCH_SIZE.getPreferredName(), maxPageSearchSize);\n+        }\n+        if (docsPerSecond != null && (docsPerSecond.equals(DEFAULT_DOCS_PER_SECOND) == false)) {\n+            builder.field(TransformField.DOCS_PER_SECOND.getPreferredName(), docsPerSecond);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        }\n+        if (other == null || other.getClass() != getClass()) {\n+            return false;\n+        }\n+\n+        SettingsConfig that = (SettingsConfig) other;\n+        return Objects.equals(maxPageSearchSize, that.maxPageSearchSize) && Objects.equals(docsPerSecond, that.docsPerSecond);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(maxPageSearchSize, docsPerSecond);\n+    }\n+\n+    public static SettingsConfig fromXContent(final XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.apply(parser, null) : STRICT_PARSER.apply(parser, null);\n+    }\n+\n+    public static class Builder {\n+        private Integer maxPageSearchSize;\n+        private Float docsPerSecond;\n+\n+        /**\n+         * Default builder\n+         */\n+        public Builder() {\n+\n+        }\n+\n+        /**\n+         * Builder starting from existing settings as base, for the purpose of partially updating settings.\n+         *\n+         * @param base base settings\n+         */\n+        public Builder(SettingsConfig base) {\n+            this.maxPageSearchSize = base.maxPageSearchSize;\n+            this.docsPerSecond = base.docsPerSecond;\n+        }\n+\n+        /**\n+         * Sets the paging maximum paging maxPageSearchSize that transform can use when\n+         * pulling the data from the source index.\n+         *\n+         * If OOM is triggered, the paging maxPageSearchSize is dynamically reduced so that the transform can continue to gather data.\n+         *\n+         * @param maxPageSearchSize Integer value between 10 and 10_000\n+         * @return the {@link Builder} with the paging maxPageSearchSize set.\n+         */\n+        public Builder setMaxPageSearchSize(Integer maxPageSearchSize) {\n+            this.maxPageSearchSize = maxPageSearchSize;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the docs per second that transform can use when pulling the data from the source index.\n+         *\n+         * This setting throttles transform by issuing queries less often, however processing still happens in\n+         * batches. A value of 0 disables throttling (default).\n+         *\n+         * @param docsPerSecond Integer value\n+         * @return the {@link Builder} with requestsPerSecond set.\n+         */\n+        public Builder setRequestsPerSecond(Float docsPerSecond) {\n+            this.docsPerSecond = docsPerSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4ODk4Mg==", "bodyText": "I just found this to be a problem in hlrc (and fixed it there, not pushed yet).\nHowever I wonder if this is really a problem in this place, both setters are not used, but only update. Maybe I rename this class to Updater and remove the setters.", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419488982", "createdAt": "2020-05-04T14:42:12Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/SettingsConfig.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.transform.transforms;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+public class SettingsConfig implements Writeable, ToXContentObject {\n+    public static final ConstructingObjectParser<SettingsConfig, Void> STRICT_PARSER = createParser(false);\n+    public static final ConstructingObjectParser<SettingsConfig, Void> LENIENT_PARSER = createParser(true);\n+\n+    private static final int DEFAULT_MAX_PAGE_SEARCH_SIZE = -1;\n+    private static final float DEFAULT_DOCS_PER_SECOND = -1F;\n+\n+    private static ConstructingObjectParser<SettingsConfig, Void> createParser(boolean lenient) {\n+        ConstructingObjectParser<SettingsConfig, Void> parser = new ConstructingObjectParser<>(\n+            \"transform_config_settings\",\n+            lenient,\n+            args -> new SettingsConfig((Integer) args[0], (Float) args[1])\n+        );\n+        parser.declareIntOrNull(optionalConstructorArg(), DEFAULT_MAX_PAGE_SEARCH_SIZE, TransformField.MAX_PAGE_SEARCH_SIZE);\n+        parser.declareFloatOrNull(optionalConstructorArg(), DEFAULT_DOCS_PER_SECOND, TransformField.DOCS_PER_SECOND);\n+        return parser;\n+    }\n+\n+    private final Integer maxPageSearchSize;\n+    private final Float docsPerSecond;\n+\n+    public SettingsConfig() {\n+        this(null, null);\n+    }\n+\n+    public SettingsConfig(Integer maxPageSearchSize, Float docsPerSecond) {\n+        this.maxPageSearchSize = maxPageSearchSize;\n+        this.docsPerSecond = docsPerSecond;\n+    }\n+\n+    public SettingsConfig(final StreamInput in) throws IOException {\n+        this.maxPageSearchSize = in.readOptionalInt();\n+        this.docsPerSecond = in.readOptionalFloat();\n+    }\n+\n+    public Integer getMaxPageSearchSize() {\n+        return maxPageSearchSize;\n+    }\n+\n+    public Float getDocsPerSecond() {\n+        return docsPerSecond;\n+    }\n+\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeOptionalInt(maxPageSearchSize);\n+        out.writeOptionalFloat(docsPerSecond);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        // do not write default values\n+        if (maxPageSearchSize != null && (maxPageSearchSize.equals(DEFAULT_MAX_PAGE_SEARCH_SIZE) == false)) {\n+            builder.field(TransformField.MAX_PAGE_SEARCH_SIZE.getPreferredName(), maxPageSearchSize);\n+        }\n+        if (docsPerSecond != null && (docsPerSecond.equals(DEFAULT_DOCS_PER_SECOND) == false)) {\n+            builder.field(TransformField.DOCS_PER_SECOND.getPreferredName(), docsPerSecond);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        }\n+        if (other == null || other.getClass() != getClass()) {\n+            return false;\n+        }\n+\n+        SettingsConfig that = (SettingsConfig) other;\n+        return Objects.equals(maxPageSearchSize, that.maxPageSearchSize) && Objects.equals(docsPerSecond, that.docsPerSecond);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(maxPageSearchSize, docsPerSecond);\n+    }\n+\n+    public static SettingsConfig fromXContent(final XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.apply(parser, null) : STRICT_PARSER.apply(parser, null);\n+    }\n+\n+    public static class Builder {\n+        private Integer maxPageSearchSize;\n+        private Float docsPerSecond;\n+\n+        /**\n+         * Default builder\n+         */\n+        public Builder() {\n+\n+        }\n+\n+        /**\n+         * Builder starting from existing settings as base, for the purpose of partially updating settings.\n+         *\n+         * @param base base settings\n+         */\n+        public Builder(SettingsConfig base) {\n+            this.maxPageSearchSize = base.maxPageSearchSize;\n+            this.docsPerSecond = base.docsPerSecond;\n+        }\n+\n+        /**\n+         * Sets the paging maximum paging maxPageSearchSize that transform can use when\n+         * pulling the data from the source index.\n+         *\n+         * If OOM is triggered, the paging maxPageSearchSize is dynamically reduced so that the transform can continue to gather data.\n+         *\n+         * @param maxPageSearchSize Integer value between 10 and 10_000\n+         * @return the {@link Builder} with the paging maxPageSearchSize set.\n+         */\n+        public Builder setMaxPageSearchSize(Integer maxPageSearchSize) {\n+            this.maxPageSearchSize = maxPageSearchSize;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the docs per second that transform can use when pulling the data from the source index.\n+         *\n+         * This setting throttles transform by issuing queries less often, however processing still happens in\n+         * batches. A value of 0 disables throttling (default).\n+         *\n+         * @param docsPerSecond Integer value\n+         * @return the {@link Builder} with requestsPerSecond set.\n+         */\n+        public Builder setRequestsPerSecond(Float docsPerSecond) {\n+            this.docsPerSecond = docsPerSecond;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMTY3NA=="}, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDc0Mjk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzowOToyOFrOGP_g4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1OTowNlrOGQEVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMjQzMg==", "bodyText": "How can the user revert the page size to the default?", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419422432", "createdAt": "2020-05-04T13:09:28Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -440,6 +458,23 @@ public synchronized boolean maybeTriggerAsyncJob(long now) {\n         return super.maybeTriggerAsyncJob(now);\n     }\n \n+    /**\n+     * Handle new settings at runtime, this is triggered by a call to _transform/id/_update\n+     *\n+     * @param newSettings The new settings that should be applied\n+     */\n+    public void applyNewSettings(SettingsConfig newSettings) {\n+        auditor.info(transformConfig.getId(), \"Transform settings have been updated.\");\n+        logger.info(\"[{}] transform settings have been updated.\", transformConfig.getId());\n+\n+        docsPerSecond = newSettings.getDocsPerSecond() != null ? newSettings.getDocsPerSecond() : -1;\n+        if (newSettings.getMaxPageSearchSize() != null) {\n+            pageSize = newSettings.getMaxPageSearchSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMTQ3MQ==", "bodyText": "in case the user sets null, the parsing function sets a \"null default\", so newSettings.getMaxPageSearchSize() will not return null for this case.\nHowever, I think there might still be some bug in here, will investigate.", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419501471", "createdAt": "2020-05-04T14:59:06Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -440,6 +458,23 @@ public synchronized boolean maybeTriggerAsyncJob(long now) {\n         return super.maybeTriggerAsyncJob(now);\n     }\n \n+    /**\n+     * Handle new settings at runtime, this is triggered by a call to _transform/id/_update\n+     *\n+     * @param newSettings The new settings that should be applied\n+     */\n+    public void applyNewSettings(SettingsConfig newSettings) {\n+        auditor.info(transformConfig.getId(), \"Transform settings have been updated.\");\n+        logger.info(\"[{}] transform settings have been updated.\", transformConfig.getId());\n+\n+        docsPerSecond = newSettings.getDocsPerSecond() != null ? newSettings.getDocsPerSecond() : -1;\n+        if (newSettings.getMaxPageSearchSize() != null) {\n+            pageSize = newSettings.getMaxPageSearchSize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMjQzMg=="}, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAwOTk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/action/UpdateTransformAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowNzowMlrOGQB_5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowNzowMlrOGQB_5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MzE0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419463141", "createdAt": "2020-05-04T14:07:02Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/action/UpdateTransformAction.java", "diffHunk": "@@ -161,12 +223,14 @@ public boolean equals(Object obj) {\n                 return false;\n             }\n             Response other = (Response) obj;\n-            return Objects.equals(config, other.config);\n+            return Objects.equals(config, other.config) && super.equals(obj);\n         }\n \n         @Override\n         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            super.toXContentCommon(builder, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTI4MTA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/TransformConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTowNTo0NVrOGQEokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTowNTo0NVrOGQEokA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwNjMyMA==", "bodyText": "if settings is optional shouldn't this assign null.\nI guess it is effectively the same as the default ctor has null values for SettingsConfig fields so it won't cause an update but would help with the isNoOp function\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        settings = new SettingsConfig();\n          \n          \n            \n                        settings = null;", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419506320", "createdAt": "2020-05-04T15:05:45Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/TransformConfigUpdate.java", "diffHunk": "@@ -98,6 +103,12 @@ public TransformConfigUpdate(final StreamInput in) throws IOException {\n         if (in.readBoolean()) {\n             setHeaders(in.readMap(StreamInput::readString, StreamInput::readString));\n         }\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {  // todo: V_7_8_0\n+            settings = in.readOptionalWriteable(SettingsConfig::new);\n+        } else {\n+            settings = new SettingsConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTMyNjU4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/transform/transforms/SettingsConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToxNjoxNlrOGQFFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToxNjoxNlrOGQFFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxMzcwOQ==", "bodyText": "Can you deprecate the client PivotConfig.Builder.setMaxPageSearchSize method", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419513709", "createdAt": "2020-05-04T15:16:16Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/transform/transforms/SettingsConfig.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.transform.transforms;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+public class SettingsConfig implements ToXContentObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc5MDYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/action/UpdateTransformAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMzoxOFrOGQJjWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMzoxOFrOGQJjWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NjkwNQ==", "bodyText": "Now this is a Tasks request it should override public boolean match(Task task) so that the transform ID in the request can be mapped to the transfrom task.\nI scrolled down and see that this is handled in the action", "url": "https://github.com/elastic/elasticsearch/pull/56007#discussion_r419586905", "createdAt": "2020-05-04T17:03:18Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/action/UpdateTransformAction.java", "diffHunk": "@@ -38,23 +41,36 @@ private UpdateTransformAction() {\n         super(NAME, Response::new);\n     }\n \n-    public static class Request extends AcknowledgedRequest<Request> {\n+    public static class Request extends BaseTasksRequest<Request> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2fd2df0e3b794edac68afd470b37ceb81c0b7c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2414, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}