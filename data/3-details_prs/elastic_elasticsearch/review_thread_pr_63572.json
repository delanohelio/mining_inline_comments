{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzI2MjU4", "number": 63572, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDozMVrOEsvGKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzowNDozM1rOE7V93w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ0NDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDozMVrOHgI_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDozMzo0OFrOH2hb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg==", "bodyText": "null looks is going to cause this to fail on runtime fields. Do we filter those out other places?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503463812", "createdAt": "2020-10-12T18:24:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MjYyNQ==", "bodyText": "I meant to highlight this with a comment of 'not sure about this' - I'm pretty sure that we filter out non-text fields further up the stack, but I need to double-check.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503482625", "createdAt": "2020-10-12T19:08:50Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MjkzNA==", "bodyText": "I think we do try to highlight runtime fields. I'm not sure how we manage not to fail here. Runtime fields really need the SearchLookup to do anything.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r504282934", "createdAt": "2020-10-13T21:59:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNTc4Ng==", "bodyText": "I vaguely remember looking at this too, and finding that for runtime fields we simply don't return anything highlighted rather than failing, as they are not in _source nor stored.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r504515786", "createdAt": "2020-10-14T08:58:57Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMjk4Nw==", "bodyText": "Given that runtime fields can't be highlighted anyway, I just added a null check for SearchLookup inside the value fetcher in AbstractScriptFieldType.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526932987", "createdAt": "2020-11-19T14:33:48Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ0ODI4OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNjowNVrOHgJCBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo1OToxOVrOHgaH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg==", "bodyText": "Dropping this is a behavior change - this behavior of defaulting to stored fields was something folks were really keen on historically.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503464452", "createdAt": "2020-10-12T18:26:05Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MzM2MQ==", "bodyText": "Is this something that we can build into the ValueFetchers themselves? If it's a performance enhancement here, then it presumably will be elsewhere as well?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503483361", "createdAt": "2020-10-12T19:10:39Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4Nzc0NQ==", "bodyText": "Is this something that we can build into the ValueFetchers themselves? If it's a performance enhancement here, then it presumably will be elsewhere as well?\n\nIt'd be super nice to have one way to think about this. So, hopefully!", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503487745", "createdAt": "2020-10-12T19:21:24Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwMTgyNg==", "bodyText": "+1 to explore automatically loading stored fields when they're available. Beyond highlighting, this would simplify some field retrieval workflows where users currently need to request both _source and stored_fields. This seems like it'd be a bigger change, maybe it'd make sense as a follow-up issue or PR ?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503501826", "createdAt": "2020-10-12T19:53:52Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMTg0MA==", "bodyText": "I think that using stored fields if they exist is kind of a blocker for this change, or, at least, for the part of this change that drops the stored fields stuff.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503511840", "createdAt": "2020-10-12T20:15:54Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMDA4NQ==", "bodyText": "Yes, I think we want to make that change first.  The tricky part will be communicating to the SourceLookup (or whatever stored-fields equivalent we come up with) which fields we want to load up-front.  I wonder what the cost of just automatically reading all stored fields in the Visitor would be?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503530085", "createdAt": "2020-10-12T21:01:12Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMjc2OA==", "bodyText": "Could we just restore the conditional if (forceSource == false && fieldType.isStored()) { ...  here in order not to block this change on a larger one around stored fields ?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503532768", "createdAt": "2020-10-12T21:07:47Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzkyOQ==", "bodyText": "I think that means we need to add back in the 'ignoreAbove' logic, which was the main reason I tried this out.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503533929", "createdAt": "2020-10-12T21:10:46Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjM1Mg==", "bodyText": "I don't think so, because stored fields already respect the ignore_above option for keywords, so they'll be naturally excluded.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503536352", "createdAt": "2020-10-12T21:16:57Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0NDQ2OA==", "bodyText": "That was the crux that I was missing, thank you!  Have pushed an update", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503744468", "createdAt": "2020-10-13T07:59:19Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, "originalCommit": {"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDA0MTgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/SourceValueFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNjoxOVrOH2jBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1MDoxMVrOH2xFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1ODk0NA==", "bodyText": "This was a bug - if the first of multiple source paths didn't have any values, we returned early instead of continuing to check further paths.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526958944", "createdAt": "2020-11-19T15:06:19Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/SourceValueFetcher.java", "diffHunk": "@@ -60,7 +60,7 @@ public SourceValueFetcher(String fieldName, QueryShardContext context, Object nu\n         for (String path : sourcePaths) {\n             Object sourceValue = lookup.extractValue(path, nullValue);\n             if (sourceValue == null) {\n-                return List.of();\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4OTM4Mw==", "bodyText": "Thank you for catching this! Maybe we could fix this in a separate PR (with a quick test) to keep this one scoped to highlighting?", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527189383", "createdAt": "2020-11-19T20:50:11Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/SourceValueFetcher.java", "diffHunk": "@@ -60,7 +60,7 @@ public SourceValueFetcher(String fieldName, QueryShardContext context, Object nu\n         for (String path : sourcePaths) {\n             Object sourceValue = lookup.extractValue(path, nullValue);\n             if (sourceValue == null) {\n-                return List.of();\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1ODk0NA=="}, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDA1NDk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowOTowMVrOH2jJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMjozNFrOH2tqyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2MTA2Mw==", "bodyText": "Another option here would be to pass the Fetch-phase search lookup through all the highlighting code to HighlightUtils.loadValues(), and I think we probably will want to do that eventually, but it's not really ready yet given our uncertainty around how that lookup is built and passed around anyway.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526961063", "createdAt": "2020-11-19T15:09:01Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -198,6 +199,9 @@ protected final void checkAllowExpensiveQueries(QueryShardContext context) {\n \n     @Override\n     public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup lookup, String format) {\n+        if (lookup == null) {\n+            return v -> Collections.emptyList();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzM4NA==", "bodyText": "I was going to ask why it is null, the supplier could throw unsupported operation exception and not be null, but it is no supplier in this case. I am not liking that much that it can be null, but I am not sure how we can avoid that in this scenario.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527133384", "createdAt": "2020-11-19T19:12:34Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -198,6 +199,9 @@ protected final void checkAllowExpensiveQueries(QueryShardContext context) {\n \n     @Override\n     public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup lookup, String format) {\n+        if (lookup == null) {\n+            return v -> Collections.emptyList();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2MTA2Mw=="}, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTUyNjc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1OToxMlrOH2xY2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1OToxMlrOH2xY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5NDMyOA==", "bodyText": "To me it'd be best to keep the original forceSource name and value -- it matches the  force_source REST option that this value comes and avoids having mixed concepts in the code.", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527194328", "createdAt": "2020-11-19T20:59:12Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +48,17 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n+                                               QueryShardContext qsc,\n                                                FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n+                                               boolean storedFieldsAvailable) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjYxMzQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzowNDozM1rOH27v1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzowNDozM1rOH27v1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2NDA1NA==", "bodyText": "I just opened #65292 -- if we like the direction and it gets merged, then MappedFieldType#valueFetcher won't need a dedicated SearchLookup at all. I think highlighting on runtime fields would 'just work' here (although it'd be worth a test!)", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527364054", "createdAt": "2020-11-20T03:04:33Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +48,17 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n+                                               QueryShardContext qsc,\n                                                FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n+                                               boolean storedFieldsAvailable) throws IOException {\n+        if (storedFieldsAvailable && fieldType.isStored()) {\n             CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n             hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n+            List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n+            return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n         }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}