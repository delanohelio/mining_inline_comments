{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzkxMDAy", "number": 52880, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyNjo0OFrODjz_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyNzoyOVrODj0AfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc4NjY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyNjo0OFrOFv04hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyNTo0M1rOFwYdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MzgyOA==", "bodyText": "I think so!", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r385693828", "createdAt": "2020-02-28T13:26:48Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java", "diffHunk": "@@ -51,13 +52,11 @@\n \n     public static final boolean ADJUST_PURE_NEGATIVE_DEFAULT = true;\n \n-    private static final String MUSTNOT = \"mustNot\";\n-    private static final String MUST_NOT = \"must_not\";\n-    private static final String FILTER = \"filter\";\n-    private static final String SHOULD = \"should\";\n-    private static final String MUST = \"must\";\n-    private static final ParseField DISABLE_COORD_FIELD = new ParseField(\"disable_coord\")\n-            .withAllDeprecated(\"disable_coord has been removed\");\n+    private static final ParseField MUSTNOT = new ParseField(\"mustNot\");    // TODO deprecate?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec59f9784978926435fcf746808f57ff4436a56d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NjYzMw==", "bodyText": "I think I'll do this in a followup to get more eyes on it.", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r386276633", "createdAt": "2020-03-02T09:25:43Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java", "diffHunk": "@@ -51,13 +52,11 @@\n \n     public static final boolean ADJUST_PURE_NEGATIVE_DEFAULT = true;\n \n-    private static final String MUSTNOT = \"mustNot\";\n-    private static final String MUST_NOT = \"must_not\";\n-    private static final String FILTER = \"filter\";\n-    private static final String SHOULD = \"should\";\n-    private static final String MUST = \"must\";\n-    private static final ParseField DISABLE_COORD_FIELD = new ParseField(\"disable_coord\")\n-            .withAllDeprecated(\"disable_coord has been removed\");\n+    private static final ParseField MUSTNOT = new ParseField(\"mustNot\");    // TODO deprecate?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MzgyOA=="}, "originalCommit": {"oid": "ec59f9784978926435fcf746808f57ff4436a56d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc4ODQ1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyNzoyOVrOFv05rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozMTozMlrOFwYpYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDEyNg==", "bodyText": "Might be worth asserting on the \"inner\" exception too. Or something. Because this message isn't nearly a nice as the other one.", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r385694126", "createdAt": "2020-02-28T13:27:29Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java", "diffHunk": "@@ -277,14 +277,20 @@ public void testFromJson() throws IOException {\n         assertEquals(query, \"kimchy\", ((TermQueryBuilder)queryBuilder.must().get(0)).value());\n     }\n \n+    public void testMinimumShouldMatchNumber() throws IOException {\n+        String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"term\\\" : { \\\"field\\\" : \\\"value\\\" } }, \\\"minimum_should_match\\\" : 1 } }\";\n+        BoolQueryBuilder builder = (BoolQueryBuilder) parseQuery(query);\n+        assertEquals(\"1\", builder.minimumShouldMatch());\n+    }\n+\n     /**\n      * test that unknown query names in the clauses throw an error\n      */\n     public void testUnknownQueryName() throws IOException {\n         String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"unknown_query\\\" : { } } } }\";\n \n-        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query));\n-        assertEquals(\"unknown query [unknown_query]\", ex.getMessage());\n+        XContentParseException ex = expectThrows(XContentParseException.class, () -> parseQuery(query));\n+        assertEquals(\"[1:41] [bool] failed to parse field [must]\", ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec59f9784978926435fcf746808f57ff4436a56d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTc3OQ==", "bodyText": "++ I pushed f0f9b15", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r386279779", "createdAt": "2020-03-02T09:31:32Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java", "diffHunk": "@@ -277,14 +277,20 @@ public void testFromJson() throws IOException {\n         assertEquals(query, \"kimchy\", ((TermQueryBuilder)queryBuilder.must().get(0)).value());\n     }\n \n+    public void testMinimumShouldMatchNumber() throws IOException {\n+        String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"term\\\" : { \\\"field\\\" : \\\"value\\\" } }, \\\"minimum_should_match\\\" : 1 } }\";\n+        BoolQueryBuilder builder = (BoolQueryBuilder) parseQuery(query);\n+        assertEquals(\"1\", builder.minimumShouldMatch());\n+    }\n+\n     /**\n      * test that unknown query names in the clauses throw an error\n      */\n     public void testUnknownQueryName() throws IOException {\n         String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"unknown_query\\\" : { } } } }\";\n \n-        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query));\n-        assertEquals(\"unknown query [unknown_query]\", ex.getMessage());\n+        XContentParseException ex = expectThrows(XContentParseException.class, () -> parseQuery(query));\n+        assertEquals(\"[1:41] [bool] failed to parse field [must]\", ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDEyNg=="}, "originalCommit": {"oid": "ec59f9784978926435fcf746808f57ff4436a56d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3689, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}