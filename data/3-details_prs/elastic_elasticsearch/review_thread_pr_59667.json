{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzI4Mjk4", "number": 59667, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNjoxOFrOEO3CWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxNjoyOFrOEqcshg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDE3MjQyOnYy", "diffSide": "RIGHT", "path": "distribution/src/config/jvm.options", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNjoxOFrOGyQEVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MDo0OFrOG5FpyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTIzOQ==", "bodyText": "Drive by comment (sorry!), but the comment in jvm.options would be incorrect after this change, since the user would no longer be uncommenting the lines to use G1", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r455345239", "createdAt": "2020-07-15T21:06:18Z", "author": {"login": "dakrone"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,7 +42,6 @@\n # following three lines to your version of the JDK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0OTY3MA==", "bodyText": "hmm, I wonder what we want to add instead.. we want to users to be able to use G1GC before jdk 14, but if they specifically add -XX:+UseG1GC the ergonomics choice won't kick in..", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r461649670", "createdAt": "2020-07-28T14:57:38Z", "author": {"login": "ebadyano"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,7 +42,6 @@\n # following three lines to your version of the JDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTIzOQ=="}, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MjEyNQ==", "bodyText": "Isn't the point fo the change to make ergonomics choose which GC to use? It doesn't just have to be based on small heaps, it can be based on java version as well?", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r461752125", "createdAt": "2020-07-28T17:30:56Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,7 +42,6 @@\n # following three lines to your version of the JDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTIzOQ=="}, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDYzMg==", "bodyText": "I updated the jvm.options, any comments/thoughts are welcome!", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r462514632", "createdAt": "2020-07-29T18:50:48Z", "author": {"login": "ebadyano"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,7 +42,6 @@\n # following three lines to your version of the JDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTIzOQ=="}, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg5NDE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyNzoxMlrOG0eEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyNzoxMlrOG0eEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MTg2NQ==", "bodyText": "Can we use Booleans.parseBoolean? Also, please use == false for negation.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r457671865", "createdAt": "2020-07-20T20:27:12Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -69,7 +69,10 @@\n     private final Map<String, CircuitBreaker> breakers;\n \n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n-        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", true, Property.NodeScope);\n+        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n+            // turn real memory circuit breaker off for ParallelGC\n+            return String.valueOf(!JvmInfo.jvmInfo().useParallelGC().equals(\"true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ1MjEzOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzozMFrOG2COzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzozMFrOG2COzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjg0Ng==", "bodyText": "Drive-by comment, feel free to ignore - should we pass Pattern.COMMENTS here so that we can break up the regex with whitespace, to make it easier to read?", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r459312846", "createdAt": "2020-07-23T09:07:30Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,53 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        // Use ParallelGC for heaps <= 4GB unless the user has explicitly set the garbage collector\n+        JvmOption g1 = finalJvmOptions.get(\"UseG1GC\");\n+        if (heapSize <= 4 * 1024 * 1024 * 1024 && g1.getMandatoryValue().equals(\"true\") && g1.isCommandLineOrigin() == false) {\n+            ergonomicChoices.add(\"-XX:+UseParallelGC\");\n+        }\n+        System.out.println(\"HEre inn\");\n         return ergonomicChoices;\n     }\n \n     private static final Pattern OPTION = Pattern.compile(\n-        \"^\\\\s*\\\\S+\\\\s+(?<flag>\\\\S+)\\\\s+:?=\\\\s+(?<value>\\\\S+)?\\\\s+\\\\{[^}]+?\\\\}\\\\s+\\\\{[^}]+}\"\n+        \"^\\\\s*\\\\S+\\\\s+(?<flag>\\\\S+)\\\\s+:?=\\\\s+(?<value>\\\\S+)?\\\\s+\\\\{[^}]+?\\\\}\\\\s+\\\\{(?<origin>[^}]+)}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTUyMzM2OnYy", "diffSide": "RIGHT", "path": "distribution/src/config/jvm.options", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzo0MzozNlrOG6Qu1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowOTowN1rOG6TFrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NDcyNQ==", "bodyText": "won't these G1 options break the system if parallelGC is selected?", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r463744725", "createdAt": "2020-07-31T17:43:36Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -38,13 +38,16 @@\n 8-13:-XX:+UseCMSInitiatingOccupancyOnly\n \n ## G1GC Configuration\n-# to use G1GC, uncomment the next two lines and update the version on the\n-# following three lines to your version of the JDK\n+# to use G1GC (ParallelGC for heaps smaller than 4G),\n+# uncomment the next three lines and update the version on the\n+# following two lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n 14-:-XX:G1ReservePercent=25", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d033a498deaf7081b1e93fb54dd0a273da753ee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3Njk0MA==", "bodyText": "with -XX:+UseParallelGC java seem to ignore -XX:G1ReservePercent=25 and XX:InitiatingHeapOccupancyPercent  them as long as -XX:+UseG1GC is not specified. On the other hand it might be confusing to have G1GC options there when running ParallelGC.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r463776940", "createdAt": "2020-07-31T18:54:16Z", "author": {"login": "ebadyano"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -38,13 +38,16 @@\n 8-13:-XX:+UseCMSInitiatingOccupancyOnly\n \n ## G1GC Configuration\n-# to use G1GC, uncomment the next two lines and update the version on the\n-# following three lines to your version of the JDK\n+# to use G1GC (ParallelGC for heaps smaller than 4G),\n+# uncomment the next three lines and update the version on the\n+# following two lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n 14-:-XX:G1ReservePercent=25", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NDcyNQ=="}, "originalCommit": {"oid": "4d033a498deaf7081b1e93fb54dd0a273da753ee"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MzM0MA==", "bodyText": "Have you tested if that is true for all G1 options? I wonder if we should completely move all GC options into ergonomics.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r463783340", "createdAt": "2020-07-31T19:09:07Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -38,13 +38,16 @@\n 8-13:-XX:+UseCMSInitiatingOccupancyOnly\n \n ## G1GC Configuration\n-# to use G1GC, uncomment the next two lines and update the version on the\n-# following three lines to your version of the JDK\n+# to use G1GC (ParallelGC for heaps smaller than 4G),\n+# uncomment the next three lines and update the version on the\n+# following two lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n 14-:-XX:G1ReservePercent=25", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NDcyNQ=="}, "originalCommit": {"oid": "4d033a498deaf7081b1e93fb54dd0a273da753ee"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzIyNjc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzowNzo1N1rOG7T0hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzowNzo1N1rOG7T0hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MzkwOQ==", "bodyText": "In #46751, a check is made purely against the parent breaker, relying on this being the real memory circuit breaker. This PR disables that PR by default for small heaps.\nI seem to remember seeing that approach (just checking the parent breaker, now that we have real memory circuit breaker) has come up a few times.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r464843909", "createdAt": "2020-08-04T07:07:57Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -69,7 +69,10 @@\n     private final Map<String, CircuitBreaker> breakers;\n \n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n-        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", true, Property.NodeScope);\n+        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n+            // turn real memory circuit breaker off for ParallelGC\n+            return String.valueOf(Booleans.parseBoolean(JvmInfo.jvmInfo().useParallelGC()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d033a498deaf7081b1e93fb54dd0a273da753ee"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA2NzI5OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOToyMFrOHbwNAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxNjozMVrOHb6b0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzM2MQ==", "bodyText": "I think we should turn the heap size check into heapSize < 8L << 30, since java before version 15 will round the region size down, causing a 7.99GB heap to have a region size of 2MB.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498863361", "createdAt": "2020-10-02T14:39:20Z", "author": {"login": "henningandersen"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -116,12 +146,30 @@ private JvmErgonomics() {\n     }\n \n     // package private for testing\n-    static Long extractHeapSize(final Map<String, Optional<String>> finalJvmOptions) {\n-        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").get());\n+    static Long extractHeapSize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").getMandatoryValue());\n+    }\n+\n+    static long extractMaxDirectMemorySize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxDirectMemorySize\").getMandatoryValue());\n+    }\n+\n+    // Tune G1GC options for heaps <= 4GB unless the user has explicitly set G1HeapRegionSize\n+    static boolean tuneG1GCForSmallHeap(final Map<String, JvmOption> finalJvmOptions, final long heapSize) {\n+        JvmOption g1GC = finalJvmOptions.get(\"UseG1GC\");\n+        JvmOption g1GCHeapRegion = finalJvmOptions.get(\"G1HeapRegionSize\");\n+        return (heapSize <= 4L << 30 && g1GC.getMandatoryValue().equals(\"true\") && g1GCHeapRegion.isCommandLineOrigin() == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMDk5Mw==", "bodyText": "Sorry missread the comment. Make sense, so the tuning options will be for heaps strictly smaller than 8G.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499030993", "createdAt": "2020-10-02T20:16:31Z", "author": {"login": "ebadyano"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -116,12 +146,30 @@ private JvmErgonomics() {\n     }\n \n     // package private for testing\n-    static Long extractHeapSize(final Map<String, Optional<String>> finalJvmOptions) {\n-        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").get());\n+    static Long extractHeapSize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").getMandatoryValue());\n+    }\n+\n+    static long extractMaxDirectMemorySize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxDirectMemorySize\").getMandatoryValue());\n+    }\n+\n+    // Tune G1GC options for heaps <= 4GB unless the user has explicitly set G1HeapRegionSize\n+    static boolean tuneG1GCForSmallHeap(final Map<String, JvmOption> finalJvmOptions, final long heapSize) {\n+        JvmOption g1GC = finalJvmOptions.get(\"UseG1GC\");\n+        JvmOption g1GCHeapRegion = finalJvmOptions.get(\"G1HeapRegionSize\");\n+        return (heapSize <= 4L << 30 && g1GC.getMandatoryValue().equals(\"true\") && g1GCHeapRegion.isCommandLineOrigin() == false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzM2MQ=="}, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE3NDQwOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNzozMlrOHbxQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNzozMlrOHbxQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDcyMw==", "bodyText": "As mentioned on another channel, I think we should make reserve pct 15 rather than the default 10 - to stay safely clear of real memory circuit breaker exceptions.\nI also think we should add in the IHOP always if it is not defined, just to be safe. It should not matter for performance since G1 will adaptively adjust the value.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498880723", "createdAt": "2020-10-02T15:07:32Z", "author": {"login": "henningandersen"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,55 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY1MjgwOnYy", "diffSide": "RIGHT", "path": "distribution/src/config/jvm.options", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzozNzoyNlrOHb2BNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxMDoxNVrOHb6RWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1ODY0Ng==", "bodyText": "Since we are not choosing the actual GC implementation in ergonomics, doesn't this need to stay uncommented?", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498958646", "createdAt": "2020-10-02T17:37:26Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,9 +42,7 @@\n # following three lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n-14-:-XX:G1ReservePercent=25\n-14-:-XX:InitiatingHeapOccupancyPercent=30\n+# 14-:-XX:+UseG1GC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1OTY3Mg==", "bodyText": "Or if we are relying on G1GC being the default now, then do we still need this line in the jvm options at all? Will the ergonomics detect using G1GC when it is not explicitly added to the options?", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498959672", "createdAt": "2020-10-02T17:39:33Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,9 +42,7 @@\n # following three lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n-14-:-XX:G1ReservePercent=25\n-14-:-XX:InitiatingHeapOccupancyPercent=30\n+# 14-:-XX:+UseG1GC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1ODY0Ng=="}, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODMxNQ==", "bodyText": "Thank you for catching this. I should've uncommented the line 14-:-XX:+UseG1GC. I think we still want to keep it uncommented in case someone wants to use G1GC with jdk older than jdk14. Then the comment above still makes sense.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499028315", "createdAt": "2020-10-02T20:10:15Z", "author": {"login": "ebadyano"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -42,9 +42,7 @@\n # following three lines to your version of the JDK\n # 8-13:-XX:-UseConcMarkSweepGC\n # 8-13:-XX:-UseCMSInitiatingOccupancyOnly\n-14-:-XX:+UseG1GC\n-14-:-XX:G1ReservePercent=25\n-14-:-XX:InitiatingHeapOccupancyPercent=30\n+# 14-:-XX:+UseG1GC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1ODY0Ng=="}, "originalCommit": {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQyNjAwOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTowNjozNFrOHcqDWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTowNjozNFrOHcqDWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxMTE2Mw==", "bodyText": "I think we should use 30 in this case too.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499811163", "createdAt": "2020-10-05T19:06:34Z", "author": {"login": "henningandersen"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ1NDQ4OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxNToyNlrOHcqVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxNToyNlrOHcqVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTc3NA==", "bodyText": "I think it is surprising that if you manually specify any of the 3 parameters you loose all 3. For instance if they decide to raise G1ReservePercent to 20, the region size adjustment is lost.\nI think the check in tuneG1GCForSmallHeap should only check heap size and maybe that G1 is in use.\nThe code below should then only add options where there is no existing command line origin option.\nAlternatively (to the last part), we could swap the two lines here:\n\n  \n    \n      elasticsearch/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n    \n    \n         Line 144\n      in\n      01dc110\n    \n    \n    \n    \n\n        \n          \n           finalJvmOptions.addAll(substitutedJvmOptions); \n        \n    \n  \n\n\nto be:\n        finalJvmOptions.addAll(ergonomicJvmOptions);\n        finalJvmOptions.addAll(substitutedJvmOptions);\n\nsince that would ensure that the original command line options override the ergonomics picked here.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499815774", "createdAt": "2020-10-05T19:15:26Z", "author": {"login": "henningandersen"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ1Nzk4OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxNjoyOFrOHcqXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMToxN1rOHcsuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjMxOQ==", "bodyText": "Same comment as above, is surprising that if one of them is specified you loose the other. In particular if IHOP is specified, it seems quite dangerous to no longer set G1ReservePercent.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499816319", "createdAt": "2020-10-05T19:16:28Z", "author": {"login": "henningandersen"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n+        } else if (tuneG1GCForLargeHeap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NDg2Ng==", "bodyText": "Thank you for catching this, I updated the pr.", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499854866", "createdAt": "2020-10-05T20:31:17Z", "author": {"login": "ebadyano"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n+        } else if (tuneG1GCForLargeHeap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjMxOQ=="}, "originalCommit": {"oid": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2241, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}