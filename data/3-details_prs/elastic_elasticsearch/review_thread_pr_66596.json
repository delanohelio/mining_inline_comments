{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNTUzOTI3", "number": 66596, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1MDo0MVrOFHMQyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyMTo1NFrOFHzv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDg1MjU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/querydsl/container/FieldExtractorRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1MDo0MVrOIIjmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1MDo0MVrOIIjmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0MjcyOQ==", "bodyText": "This is a subtle one that otherwise a lot of things don't work. For example grouping a text field should only occur on a keyword.", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r545842729", "createdAt": "2020-12-18T13:50:41Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/querydsl/container/FieldExtractorRegistry.java", "diffHunk": "@@ -24,14 +24,14 @@\n public class FieldExtractorRegistry {\n \n     private final Map<String, FieldExtraction> cache = new HashMap<>();\n-    \n+\n     public FieldExtraction fieldExtraction(Expression expression) {\n         return cache.computeIfAbsent(Expressions.id(expression), k -> createFieldExtractionFor(expression));\n     }\n \n     private FieldExtraction createFieldExtractionFor(Expression expression) {\n         if (expression instanceof FieldAttribute) {\n-            FieldAttribute fa = (FieldAttribute) expression;\n+            FieldAttribute fa = ((FieldAttribute) expression).exactAttribute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff0bb6e6e8bb67639e226a1e40b51c755008a01"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTUzODk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/BoxedQueryRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjozMToyMFrOIIp-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjozMToyMFrOIIp-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0NzE5OQ==", "bodyText": "if (ql's CollectionUtils.isEmpty(values)) { and same below with keyFilters?", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r545947199", "createdAt": "2020-12-18T16:31:20Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/BoxedQueryRequest.java", "diffHunk": "@@ -70,6 +90,78 @@ public BoxedQueryRequest to(Ordinal end) {\n         return this;\n     }\n \n+    /**\n+     * Sets keys / terms to filter on.\n+     * Accepts the unwrapped SequenceKey as a list of values matching an instance of a given\n+     * event.\n+     * Can be removed through null.\n+     */\n+    public BoxedQueryRequest keys(List<List<Object>> values) {\n+        List<QueryBuilder> newFilters;\n+\n+        if (values == null || values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff0bb6e6e8bb67639e226a1e40b51c755008a01"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzI5MzkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/BoxedQueryRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxNDoyN1rOIJZpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxNDoyN1rOIJZpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyODIyNg==", "bodyText": "The key here is needed further down after the max_terms size check is performed on keyValues size. You could move the key initialization further down after you initialize the query QueryBuilder with null.", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r546728226", "createdAt": "2020-12-21T14:14:27Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/BoxedQueryRequest.java", "diffHunk": "@@ -70,6 +90,78 @@ public BoxedQueryRequest to(Ordinal end) {\n         return this;\n     }\n \n+    /**\n+     * Sets keys / terms to filter on.\n+     * Accepts the unwrapped SequenceKey as a list of values matching an instance of a given\n+     * event.\n+     * Can be removed through null.\n+     */\n+    public BoxedQueryRequest keys(List<List<Object>> values) {\n+        List<QueryBuilder> newFilters;\n+\n+        if (values == null || values.isEmpty()) {\n+            // no keys have been specified and none have been set\n+            if (keyFilters == null || keyFilters.isEmpty()) {\n+                return this;\n+            }\n+            newFilters = emptyList();\n+        }\n+        else {\n+            // iterate on all possible values for a given key\n+            newFilters = new ArrayList<>(values.size());\n+            for (int keyIndex = 0; keyIndex < keys.size(); keyIndex++) {\n+                String key = keys.get(keyIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd152e909f62582191b3f704a1ca1fed74925657"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzMxMjc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxOToxMlrOIJZzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxOToxMlrOIJZzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDg4Ng==", "bodyText": "else { should be on the same line as the closing curly bracket from the if statement, no?", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r546730886", "createdAt": "2020-12-21T14:19:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "diffHunk": "@@ -65,13 +68,30 @@ public Executable assemble(List<List<Attribute>> listOfKeys,\n         for (int i = 0; i < plans.size(); i++) {\n             List<Attribute> keys = listOfKeys.get(i);\n             List<HitExtractor> keyExtractors = hitExtractors(keys, extractorRegistry);\n+            List<String> keyFields = new ArrayList<>(keyExtractors.size());\n+\n+            // extract top-level fields used as keys to optimize query lookups\n+            // this process gets skipped for nested fields\n+            for (HitExtractor extractor : keyExtractors) {\n+                if (extractor instanceof AbstractFieldHitExtractor) {\n+                    AbstractFieldHitExtractor hitExtractor = (AbstractFieldHitExtractor) extractor;\n+                    // no nested fields\n+                    if (hitExtractor.hitName() == null) {\n+                        keyFields.add(hitExtractor.fieldName());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd152e909f62582191b3f704a1ca1fed74925657"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzMyMTgzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyMTo1NFrOIJZ4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTowMzoxM1rOIJbSTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMjIwOA==", "bodyText": "Why is this skipped for nested fields? It's because of the complexity added by creating a nested query?", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r546732208", "createdAt": "2020-12-21T14:21:54Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "diffHunk": "@@ -65,13 +68,30 @@ public Executable assemble(List<List<Attribute>> listOfKeys,\n         for (int i = 0; i < plans.size(); i++) {\n             List<Attribute> keys = listOfKeys.get(i);\n             List<HitExtractor> keyExtractors = hitExtractors(keys, extractorRegistry);\n+            List<String> keyFields = new ArrayList<>(keyExtractors.size());\n+\n+            // extract top-level fields used as keys to optimize query lookups\n+            // this process gets skipped for nested fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd152e909f62582191b3f704a1ca1fed74925657"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1NTE1MA==", "bodyText": "We don't support nested fields in general since they are a 1:n relationship. The check is currently performed in createExtractor (and really should be moved into the Verifier instead).", "url": "https://github.com/elastic/elasticsearch/pull/66596#discussion_r546755150", "createdAt": "2020-12-21T15:03:13Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "diffHunk": "@@ -65,13 +68,30 @@ public Executable assemble(List<List<Attribute>> listOfKeys,\n         for (int i = 0; i < plans.size(); i++) {\n             List<Attribute> keys = listOfKeys.get(i);\n             List<HitExtractor> keyExtractors = hitExtractors(keys, extractorRegistry);\n+            List<String> keyFields = new ArrayList<>(keyExtractors.size());\n+\n+            // extract top-level fields used as keys to optimize query lookups\n+            // this process gets skipped for nested fields", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMjIwOA=="}, "originalCommit": {"oid": "dd152e909f62582191b3f704a1ca1fed74925657"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4477, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}