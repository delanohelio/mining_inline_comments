{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDgyMDkx", "number": 51031, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNTozMVrODYKPJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNjozNVrODYKQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjYwMTM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNTozMVrOFd24KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNTozMVrOFd24KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1MjEzNw==", "bodyText": "Should we also extract the analyzers set on the fields ? This could be useful to check the usage of the pre-built analyzers ?", "url": "https://github.com/elastic/elasticsearch/pull/51031#discussion_r366852137", "createdAt": "2020-01-15T12:35:31Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.oss;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    @Inject\n+    public IndexUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n+                                     ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(XPackUsageFeatureAction.INDEX.name(), transportService, clusterService, threadPool, actionFilters,\n+            indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n+                                   ActionListener<XPackUsageFeatureResponse> listener) {\n+\n+        final Set<String> usedFieldTypes = new HashSet<>();\n+        final Set<String> usedCharFilters = new HashSet<>();\n+        final Set<String> usedTokenizers = new HashSet<>();\n+        final Set<String> usedTokenFilters = new HashSet<>();\n+        final Set<String> usedAnalyzers = new HashSet<>();\n+\n+        for (IndexMetaData indexMetaData : state.metaData()) {\n+            MappingMetaData mappingMetaData = indexMetaData.mapping();\n+            if (mappingMetaData != null) {\n+                populateFieldTypesFromObject(mappingMetaData.sourceAsMap(), usedFieldTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1297bb701db1af1459fc770deda3d5ba7ac2cb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjYwMzk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNjozNVrOFd25tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjozNjozNVrOFd25tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1MjUzNA==", "bodyText": "Should we also extract the pre-built tokenizer, filters and char_filters from custom analyzers ?", "url": "https://github.com/elastic/elasticsearch/pull/51031#discussion_r366852534", "createdAt": "2020-01-15T12:36:35Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.oss;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    @Inject\n+    public IndexUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n+                                     ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(XPackUsageFeatureAction.INDEX.name(), transportService, clusterService, threadPool, actionFilters,\n+            indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n+                                   ActionListener<XPackUsageFeatureResponse> listener) {\n+\n+        final Set<String> usedFieldTypes = new HashSet<>();\n+        final Set<String> usedCharFilters = new HashSet<>();\n+        final Set<String> usedTokenizers = new HashSet<>();\n+        final Set<String> usedTokenFilters = new HashSet<>();\n+        final Set<String> usedAnalyzers = new HashSet<>();\n+\n+        for (IndexMetaData indexMetaData : state.metaData()) {\n+            MappingMetaData mappingMetaData = indexMetaData.mapping();\n+            if (mappingMetaData != null) {\n+                populateFieldTypesFromObject(mappingMetaData.sourceAsMap(), usedFieldTypes);\n+            }\n+\n+            Settings indexSettings = indexMetaData.getSettings();\n+\n+            Map<String, Settings> charFilterSettings = indexSettings.getGroups(\"index.analysis.char_filter\");\n+            aggregateAnalysisTypes(charFilterSettings.values(), usedCharFilters);\n+\n+            Map<String, Settings> tokenizerSettings = indexSettings.getGroups(\"index.analysis.tokenizer\");\n+            aggregateAnalysisTypes(tokenizerSettings.values(), usedTokenizers);\n+\n+            Map<String, Settings> tokenFilterSettings = indexSettings.getGroups(\"index.analysis.filter\");\n+            aggregateAnalysisTypes(tokenFilterSettings.values(), usedTokenFilters);\n+\n+            Map<String, Settings> analyzerSettings = indexSettings.getGroups(\"index.analysis.analyzer\");\n+            aggregateAnalysisTypes(analyzerSettings.values(), usedAnalyzers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1297bb701db1af1459fc770deda3d5ba7ac2cb"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4601, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}