{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjc3NTM1", "number": 57869, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MjoyM1rOED9_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowNDoxNVrOERpSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTk2ODM3OnYy", "diffSide": "LEFT", "path": "buildSrc/src/integTest/java/org/elasticsearch/gradle/DistributionDownloadPluginIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MjoyM1rOGhTPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0MjoyM1rOGhTPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MTQ0Mw==", "bodyText": "not used before this PR already", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r437571443", "createdAt": "2020-06-09T16:42:23Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/java/org/elasticsearch/gradle/DistributionDownloadPluginIT.java", "diffHunk": "@@ -164,14 +164,6 @@ private void checkService(\n         }\n     }\n \n-    private void assertFileDistro(String version, String type, String platform, String flavor, Boolean bundledJdk, String... sysProps)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ee0aac5548183f22802016721a17e2b7a8ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY3MjYyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxNjo1OFrOGzNo6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyOToxOFrOG0zumw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg==", "bodyText": "We kicked the can of differentiating between internal and external builds further to here for now.\nIs this plugin even considered to be used externally. Otherwise we can remove this differentiation here and just apply the internal plugin", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r456354026", "createdAt": "2020-07-17T10:16:58Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1MjMwNg==", "bodyText": "I believe it is since it's needed for integration testing plugin projects. It's applied by the TestClusters plugin which in turn is used by PluginBuildPlugin which is the primary \"external\" plugin folks use.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r456552306", "createdAt": "2020-07-17T16:38:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTYwMg==", "bodyText": "DistroTestPlugin is only used in :qa:os, I don't see where it is part of PluginBuildPlugin or TestClusters. I don't think we need to support running distro tests for plugins, since they are about testing the distribution's platform specific behavior, not any individual plugin. Thus I think we can assume internal, and fail otherwise.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r457661602", "createdAt": "2020-07-20T20:07:11Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NzkzNQ==", "bodyText": "I was referring to DistributionDownloadPlugin which is the plugin that's affected by this line change, not DistroTestPlugin, which is simply utilizing the download plugin.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r457687935", "createdAt": "2020-07-20T20:58:40Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMTk0OQ==", "bodyText": "I thought the original question was whether we needed to have internal/external behavior here, in DistroTestPlugin?", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r457721949", "createdAt": "2020-07-20T22:14:40Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDE5MA==", "bodyText": "Oh. In that case, no. But in DistroDownloadPlugin, yes. Sorry, I got confused.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r457730190", "createdAt": "2020-07-20T22:36:27Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNjY1MQ==", "bodyText": "thank you guys for clarification.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r458026651", "createdAt": "2020-07-21T11:29:18Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -89,7 +90,11 @@\n     @Override\n     public void apply(Project project) {\n         project.getRootProject().getPluginManager().apply(DockerSupportPlugin.class);\n-        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDAyNg=="}, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY3NDc5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxNzo0NFrOGzNqNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxNzo0NFrOGzNqNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NDM1OQ==", "bodyText": "We kicked the can of differentiating between internal and external builds further to here for now. We might want to apply similar internal / external plugin distinction later for that plugin too", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r456354359", "createdAt": "2020-07-17T10:17:44Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java", "diffHunk": "@@ -49,7 +52,13 @@\n \n     @Override\n     public void apply(Project project) {\n-        project.getPlugins().apply(DistributionDownloadPlugin.class);\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b378d1f45d97a822e7c406dd4502be8733b68589"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM1ODY4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1NjowOVrOG2eSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0MzoyOVrOG3Vhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MjQ4Mw==", "bodyText": "This mixed snake-case/kebab-case naming is making my brain hurt. I think I originally made an objection to using snake-case when this plugin was introduced but didn't make much of a fuss. Alternatively could we make the resolutions configuration a config item under the elasticsearch_distributions extension rather than have two separate extensions?", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r459772483", "createdAt": "2020-07-23T22:56:09Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "diffHunk": "@@ -45,71 +41,83 @@\n import org.gradle.authentication.http.HttpHeaderAuthentication;\n \n import java.io.File;\n-import java.util.HashMap;\n+import java.util.Comparator;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.function.Supplier;\n \n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n import static org.elasticsearch.gradle.util.Util.capitalize;\n \n /**\n  * A plugin to manage getting and extracting distributions of Elasticsearch.\n  *\n- * The source of the distribution could be from a local snapshot, a locally built\n- * bwc snapshot, or the Elastic downloads service.\n+ * The plugin provides hooks to register custom distribution resolutions.\n+ * This plugin resolves distributions from the Elastic downloads service if\n+ * no registered resolution strategy can resolve to a distribution.\n  */\n public class DistributionDownloadPlugin implements Plugin<Project> {\n \n+    static final String RESOLUTION_CONTAINER_NAME = \"elasticsearch_distributions-resolutions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDYwNw==", "bodyText": "Or perhaps it doesn't really matter since we don't really expect folks to configure this in build scripts?", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r459774607", "createdAt": "2020-07-23T23:02:46Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "diffHunk": "@@ -45,71 +41,83 @@\n import org.gradle.authentication.http.HttpHeaderAuthentication;\n \n import java.io.File;\n-import java.util.HashMap;\n+import java.util.Comparator;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.function.Supplier;\n \n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n import static org.elasticsearch.gradle.util.Util.capitalize;\n \n /**\n  * A plugin to manage getting and extracting distributions of Elasticsearch.\n  *\n- * The source of the distribution could be from a local snapshot, a locally built\n- * bwc snapshot, or the Elastic downloads service.\n+ * The plugin provides hooks to register custom distribution resolutions.\n+ * This plugin resolves distributions from the Elastic downloads service if\n+ * no registered resolution strategy can resolve to a distribution.\n  */\n public class DistributionDownloadPlugin implements Plugin<Project> {\n \n+    static final String RESOLUTION_CONTAINER_NAME = \"elasticsearch_distributions-resolutions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MjQ4Mw=="}, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NzUyNw==", "bodyText": "I fixed the name to not be mixed. Working it into the elasticsearch_distributions extensions is more work as this is just a plain named container. We don't even use the name in the plugins and I don't expect anyone to configure this in a script.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r460677527", "createdAt": "2020-07-27T06:43:29Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "diffHunk": "@@ -45,71 +41,83 @@\n import org.gradle.authentication.http.HttpHeaderAuthentication;\n \n import java.io.File;\n-import java.util.HashMap;\n+import java.util.Comparator;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.function.Supplier;\n \n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n import static org.elasticsearch.gradle.util.Util.capitalize;\n \n /**\n  * A plugin to manage getting and extracting distributions of Elasticsearch.\n  *\n- * The source of the distribution could be from a local snapshot, a locally built\n- * bwc snapshot, or the Elastic downloads service.\n+ * The plugin provides hooks to register custom distribution resolutions.\n+ * This plugin resolves distributions from the Elastic downloads service if\n+ * no registered resolution strategy can resolve to a distribution.\n  */\n public class DistributionDownloadPlugin implements Plugin<Project> {\n \n+    static final String RESOLUTION_CONTAINER_NAME = \"elasticsearch_distributions-resolutions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MjQ4Mw=="}, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM2MjE5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1Nzo0OFrOG2eUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0MTozOVrOG3VfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzAyMg==", "bodyText": "Should this be \"bwc\"?", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r459773022", "createdAt": "2020-07-23T22:57:48Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal;\n+\n+import org.elasticsearch.gradle.Architecture;\n+import org.elasticsearch.gradle.BwcVersions;\n+import org.elasticsearch.gradle.DistributionDownloadPlugin;\n+import org.elasticsearch.gradle.DistributionResolution;\n+import org.elasticsearch.gradle.ElasticsearchDistribution;\n+import org.elasticsearch.gradle.Version;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+\n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n+\n+/**\n+ * An internal elasticsearch build plugin that registers additional\n+ * distribution resolution strategies to the 'elasticsearch.download-distribution' plugin\n+ * to resolve distributions from a local snapshot or a locally built bwc snapshot.\n+ */\n+public class InternalDistributionDownloadPlugin implements Plugin<Project> {\n+\n+    private BwcVersions bwcVersions = null;\n+\n+    @Override\n+    public void apply(Project project) {\n+        // this is needed for isInternal\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (!BuildParams.isInternal()) {\n+            throw new GradleException(\n+                \"Plugin 'elasticsearch.internal-distribution-download' is not supported. \"\n+                    + \"Use 'elasticsearch.distribution-download' plugin instead.\"\n+            );\n+        }\n+        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        this.bwcVersions = BuildParams.getBwcVersions();\n+        registerInternalDistributionResolutions(DistributionDownloadPlugin.getRegistrationsContainer(project));\n+    }\n+\n+    /**\n+     * Registers internal distribution resolutions.\n+     *\n+     * Elasticsearch distributions are resolved as project dependencies either representing\n+     * the current version pointing to a project either under `:distribution:archives` or :distribution:packages`.\n+     *\n+     * BWC versions are resolved as project to projects under `:distribution:bwc`.\n+     * */\n+    private void registerInternalDistributionResolutions(NamedDomainObjectContainer<DistributionResolution> resolutions) {\n+\n+        resolutions.register(\"localBuild\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            if (VersionProperties.getElasticsearch().equals(distribution.getVersion())) {\n+                // non-external project, so depend on local build\n+                return projectDependency(project, distributionProjectPath(distribution), \"default\");\n+            }\n+            return null;\n+        }));\n+\n+        resolutions.register(\"bwb\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NjkxNQ==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r460676915", "createdAt": "2020-07-27T06:41:39Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal;\n+\n+import org.elasticsearch.gradle.Architecture;\n+import org.elasticsearch.gradle.BwcVersions;\n+import org.elasticsearch.gradle.DistributionDownloadPlugin;\n+import org.elasticsearch.gradle.DistributionResolution;\n+import org.elasticsearch.gradle.ElasticsearchDistribution;\n+import org.elasticsearch.gradle.Version;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+\n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n+\n+/**\n+ * An internal elasticsearch build plugin that registers additional\n+ * distribution resolution strategies to the 'elasticsearch.download-distribution' plugin\n+ * to resolve distributions from a local snapshot or a locally built bwc snapshot.\n+ */\n+public class InternalDistributionDownloadPlugin implements Plugin<Project> {\n+\n+    private BwcVersions bwcVersions = null;\n+\n+    @Override\n+    public void apply(Project project) {\n+        // this is needed for isInternal\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (!BuildParams.isInternal()) {\n+            throw new GradleException(\n+                \"Plugin 'elasticsearch.internal-distribution-download' is not supported. \"\n+                    + \"Use 'elasticsearch.distribution-download' plugin instead.\"\n+            );\n+        }\n+        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        this.bwcVersions = BuildParams.getBwcVersions();\n+        registerInternalDistributionResolutions(DistributionDownloadPlugin.getRegistrationsContainer(project));\n+    }\n+\n+    /**\n+     * Registers internal distribution resolutions.\n+     *\n+     * Elasticsearch distributions are resolved as project dependencies either representing\n+     * the current version pointing to a project either under `:distribution:archives` or :distribution:packages`.\n+     *\n+     * BWC versions are resolved as project to projects under `:distribution:bwc`.\n+     * */\n+    private void registerInternalDistributionResolutions(NamedDomainObjectContainer<DistributionResolution> resolutions) {\n+\n+        resolutions.register(\"localBuild\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            if (VersionProperties.getElasticsearch().equals(distribution.getVersion())) {\n+                // non-external project, so depend on local build\n+                return projectDependency(project, distributionProjectPath(distribution), \"default\");\n+            }\n+            return null;\n+        }));\n+\n+        resolutions.register(\"bwb\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzAyMg=="}, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM2Nzc3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowMDoxNVrOG2eXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0Mzo0M1rOG3ViBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzgzOA==", "bodyText": "Should we add a message here so that if folks incorrectly configure a snapshot bwc distribution w/o bundled JDK that we return an error as such?", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r459773838", "createdAt": "2020-07-23T23:00:15Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal;\n+\n+import org.elasticsearch.gradle.Architecture;\n+import org.elasticsearch.gradle.BwcVersions;\n+import org.elasticsearch.gradle.DistributionDownloadPlugin;\n+import org.elasticsearch.gradle.DistributionResolution;\n+import org.elasticsearch.gradle.ElasticsearchDistribution;\n+import org.elasticsearch.gradle.Version;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+\n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n+\n+/**\n+ * An internal elasticsearch build plugin that registers additional\n+ * distribution resolution strategies to the 'elasticsearch.download-distribution' plugin\n+ * to resolve distributions from a local snapshot or a locally built bwc snapshot.\n+ */\n+public class InternalDistributionDownloadPlugin implements Plugin<Project> {\n+\n+    private BwcVersions bwcVersions = null;\n+\n+    @Override\n+    public void apply(Project project) {\n+        // this is needed for isInternal\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (!BuildParams.isInternal()) {\n+            throw new GradleException(\n+                \"Plugin 'elasticsearch.internal-distribution-download' is not supported. \"\n+                    + \"Use 'elasticsearch.distribution-download' plugin instead.\"\n+            );\n+        }\n+        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        this.bwcVersions = BuildParams.getBwcVersions();\n+        registerInternalDistributionResolutions(DistributionDownloadPlugin.getRegistrationsContainer(project));\n+    }\n+\n+    /**\n+     * Registers internal distribution resolutions.\n+     *\n+     * Elasticsearch distributions are resolved as project dependencies either representing\n+     * the current version pointing to a project either under `:distribution:archives` or :distribution:packages`.\n+     *\n+     * BWC versions are resolved as project to projects under `:distribution:bwc`.\n+     * */\n+    private void registerInternalDistributionResolutions(NamedDomainObjectContainer<DistributionResolution> resolutions) {\n+\n+        resolutions.register(\"localBuild\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            if (VersionProperties.getElasticsearch().equals(distribution.getVersion())) {\n+                // non-external project, so depend on local build\n+                return projectDependency(project, distributionProjectPath(distribution), \"default\");\n+            }\n+            return null;\n+        }));\n+\n+        resolutions.register(\"bwb\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            BwcVersions.UnreleasedVersionInfo unreleasedInfo = bwcVersions.unreleasedInfo(Version.fromString(distribution.getVersion()));\n+            if (unreleasedInfo != null) {\n+                assert distribution.getBundledJdk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NzYzOQ==", "bodyText": "I changed this to throw a proper GradleException with an error message.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r460677639", "createdAt": "2020-07-27T06:43:43Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal;\n+\n+import org.elasticsearch.gradle.Architecture;\n+import org.elasticsearch.gradle.BwcVersions;\n+import org.elasticsearch.gradle.DistributionDownloadPlugin;\n+import org.elasticsearch.gradle.DistributionResolution;\n+import org.elasticsearch.gradle.ElasticsearchDistribution;\n+import org.elasticsearch.gradle.Version;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+\n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n+\n+/**\n+ * An internal elasticsearch build plugin that registers additional\n+ * distribution resolution strategies to the 'elasticsearch.download-distribution' plugin\n+ * to resolve distributions from a local snapshot or a locally built bwc snapshot.\n+ */\n+public class InternalDistributionDownloadPlugin implements Plugin<Project> {\n+\n+    private BwcVersions bwcVersions = null;\n+\n+    @Override\n+    public void apply(Project project) {\n+        // this is needed for isInternal\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (!BuildParams.isInternal()) {\n+            throw new GradleException(\n+                \"Plugin 'elasticsearch.internal-distribution-download' is not supported. \"\n+                    + \"Use 'elasticsearch.distribution-download' plugin instead.\"\n+            );\n+        }\n+        project.getPluginManager().apply(DistributionDownloadPlugin.class);\n+        this.bwcVersions = BuildParams.getBwcVersions();\n+        registerInternalDistributionResolutions(DistributionDownloadPlugin.getRegistrationsContainer(project));\n+    }\n+\n+    /**\n+     * Registers internal distribution resolutions.\n+     *\n+     * Elasticsearch distributions are resolved as project dependencies either representing\n+     * the current version pointing to a project either under `:distribution:archives` or :distribution:packages`.\n+     *\n+     * BWC versions are resolved as project to projects under `:distribution:bwc`.\n+     * */\n+    private void registerInternalDistributionResolutions(NamedDomainObjectContainer<DistributionResolution> resolutions) {\n+\n+        resolutions.register(\"localBuild\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            if (VersionProperties.getElasticsearch().equals(distribution.getVersion())) {\n+                // non-external project, so depend on local build\n+                return projectDependency(project, distributionProjectPath(distribution), \"default\");\n+            }\n+            return null;\n+        }));\n+\n+        resolutions.register(\"bwb\", distributionResolution -> distributionResolution.setResolver((project, distribution) -> {\n+            BwcVersions.UnreleasedVersionInfo unreleasedInfo = bwcVersions.unreleasedInfo(Version.fromString(distribution.getVersion()));\n+            if (unreleasedInfo != null) {\n+                assert distribution.getBundledJdk();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzgzOA=="}, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM3NjI0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowNDoxNVrOG2ecZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowNDoxNVrOG2ecZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTA3OQ==", "bodyText": "Nice. At least for now until we physically separate this code such that we don't publish internal stuff this seems like a good pattern to ensure that folks don't \"accidentally\" leverage internal plugins.", "url": "https://github.com/elastic/elasticsearch/pull/57869#discussion_r459775079", "createdAt": "2020-07-23T23:04:15Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/internal/InternalDistributionDownloadPlugin.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.internal;\n+\n+import org.elasticsearch.gradle.Architecture;\n+import org.elasticsearch.gradle.BwcVersions;\n+import org.elasticsearch.gradle.DistributionDownloadPlugin;\n+import org.elasticsearch.gradle.DistributionResolution;\n+import org.elasticsearch.gradle.ElasticsearchDistribution;\n+import org.elasticsearch.gradle.Version;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+\n+import static org.elasticsearch.gradle.util.GradleUtils.projectDependency;\n+\n+/**\n+ * An internal elasticsearch build plugin that registers additional\n+ * distribution resolution strategies to the 'elasticsearch.download-distribution' plugin\n+ * to resolve distributions from a local snapshot or a locally built bwc snapshot.\n+ */\n+public class InternalDistributionDownloadPlugin implements Plugin<Project> {\n+\n+    private BwcVersions bwcVersions = null;\n+\n+    @Override\n+    public void apply(Project project) {\n+        // this is needed for isInternal\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        if (!BuildParams.isInternal()) {\n+            throw new GradleException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb25536f48e35502d45ec9dc85dcbd66e2774d7"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1728, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}