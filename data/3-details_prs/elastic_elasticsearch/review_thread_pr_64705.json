{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzI1NTg3", "number": 64705, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo1ODozNlrOE2E4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo1ODozNlrOE2E4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTM4NTY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo1ODozNlrOHutEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNDo0NVrOHutQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNDg3OQ==", "bodyText": "You can also use the source method, which simplifies this a bit:\nSourceToParse sourceToParser = source(b -> {\n    b.startObject(FIELD_NAME).field(\"x\", 2000.1).field(\"y\", 305.6).endObject();\n});", "url": "https://github.com/elastic/elasticsearch/pull/64705#discussion_r518734879", "createdAt": "2020-11-06T12:58:36Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.spatial.index.mapper;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.mapper.DocumentMapper;\n+import org.elasticsearch.index.mapper.Mapper;\n+import org.elasticsearch.index.mapper.ParsedDocument;\n+import org.elasticsearch.index.mapper.SourceToParse;\n+import org.elasticsearch.xpack.spatial.common.CartesianPoint;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+public class PointFieldMapperTests extends CartesianFieldMapperTests {\n+\n+    @Override\n+    protected String getFieldName() {\n+        return \"point\";\n+    }\n+\n+    @Override\n+    protected void registerParameters(ParameterChecker checker) throws IOException {\n+        checker.registerConflictCheck(\"doc_values\", b -> b.field(\"doc_values\", false));\n+        checker.registerConflictCheck(\"index\", b -> b.field(\"index\", false));\n+        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n+            PointFieldMapper gpfm = (PointFieldMapper) m;\n+            assertTrue(gpfm.ignoreMalformed());\n+        });\n+        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n+            PointFieldMapper gpfm = (PointFieldMapper) m;\n+            assertFalse(gpfm.ignoreZValue());\n+        });\n+    }\n+\n+    public void testValuesStored() throws Exception {\n+        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> {\n+            b.field(\"type\", \"point\");\n+            b.field(\"store\", true);\n+        }));\n+\n+        SourceToParse sourceToParse = new SourceToParse(\"test\", \"1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a7c7f71bdc41586b2eb64ee9a02d865302a7aa"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNzk5OA==", "bodyText": "I am changing it, I was unhappy with that.", "url": "https://github.com/elastic/elasticsearch/pull/64705#discussion_r518737998", "createdAt": "2020-11-06T13:04:45Z", "author": {"login": "iverase"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.spatial.index.mapper;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.mapper.DocumentMapper;\n+import org.elasticsearch.index.mapper.Mapper;\n+import org.elasticsearch.index.mapper.ParsedDocument;\n+import org.elasticsearch.index.mapper.SourceToParse;\n+import org.elasticsearch.xpack.spatial.common.CartesianPoint;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+public class PointFieldMapperTests extends CartesianFieldMapperTests {\n+\n+    @Override\n+    protected String getFieldName() {\n+        return \"point\";\n+    }\n+\n+    @Override\n+    protected void registerParameters(ParameterChecker checker) throws IOException {\n+        checker.registerConflictCheck(\"doc_values\", b -> b.field(\"doc_values\", false));\n+        checker.registerConflictCheck(\"index\", b -> b.field(\"index\", false));\n+        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n+            PointFieldMapper gpfm = (PointFieldMapper) m;\n+            assertTrue(gpfm.ignoreMalformed());\n+        });\n+        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n+            PointFieldMapper gpfm = (PointFieldMapper) m;\n+            assertFalse(gpfm.ignoreZValue());\n+        });\n+    }\n+\n+    public void testValuesStored() throws Exception {\n+        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> {\n+            b.field(\"type\", \"point\");\n+            b.field(\"store\", true);\n+        }));\n+\n+        SourceToParse sourceToParse = new SourceToParse(\"test\", \"1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNDg3OQ=="}, "originalCommit": {"oid": "b0a7c7f71bdc41586b2eb64ee9a02d865302a7aa"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3103, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}