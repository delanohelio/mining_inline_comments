{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDcwMTc3", "number": 51675, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxODo0NVrODcDDSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoyMzowNVrODcDH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM2NzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/StringUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxODo0NVrOFj4oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxODo0NVrOFj4oyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MjQyNg==", "bodyText": "Same here.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373172426", "createdAt": "2020-01-30T20:18:45Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/StringUtils.java", "diffHunk": "@@ -129,8 +129,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM3MzYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/util/DateUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoyMToxN1rOFj4s3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowMTo0NlrOFj5zUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MzQ3MQ==", "bodyText": "Alternatively you could just iterate on the string millis from end->start and remove all zeroes.\nDon't know if performance wise makes sense...", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373173471", "createdAt": "2020-01-30T20:21:17Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/util/DateUtils.java", "diffHunk": "@@ -136,8 +136,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5MTUwNA==", "bodyText": "I've also fluttered a bit between the two approaches. I went with this approach since generally arithmetic operations should be faster. But anyways, micro-optimisations.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373191504", "createdAt": "2020-01-30T21:01:46Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/util/DateUtils.java", "diffHunk": "@@ -136,8 +136,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MzQ3MQ=="}, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM3ODkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/literal/interval/Intervals.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoyMzowNVrOFj4wDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowMTo1MFrOFj5zaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NDI4NA==", "bodyText": "Same concept here, you could avoid the multiplication by creating a string with right zero padding and then read is as number.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373174284", "createdAt": "2020-01-30T20:23:05Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/literal/interval/Intervals.java", "diffHunk": "@@ -341,6 +341,10 @@ TemporalAmount parse(Source source, String string) {\n                                             + \": negative value [{}] not allowed (negate the entire interval instead)\",\n                                     v);\n                         }\n+                        if (units.get(unitIndex) == TimeUnit.MILLISECOND && number.length() < 3) {\n+                            // normalize the number past DOT to millis\n+                            v *= number.length() < 2 ? 100 : 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5MTUyOA==", "bodyText": "This might be changed later if we ever bring the nanos to intervals and a multiplication might be more succinct. But yes, also here debatable.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373191528", "createdAt": "2020-01-30T21:01:50Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/literal/interval/Intervals.java", "diffHunk": "@@ -341,6 +341,10 @@ TemporalAmount parse(Source source, String string) {\n                                             + \": negative value [{}] not allowed (negate the entire interval instead)\",\n                                     v);\n                         }\n+                        if (units.get(unitIndex) == TimeUnit.MILLISECOND && number.length() < 3) {\n+                            // normalize the number past DOT to millis\n+                            v *= number.length() < 2 ? 100 : 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NDI4NA=="}, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 139, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}