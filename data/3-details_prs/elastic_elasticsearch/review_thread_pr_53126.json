{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzE3MjI1", "number": 53126, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyMToyNFrODlK8vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NDoyOFrODlMkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAzMjkyOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyMToyNFrOFx6XrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyMToyNFrOFx6XrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MDg3Ng==", "bodyText": "I see what you did there!", "url": "https://github.com/elastic/elasticsearch/pull/53126#discussion_r387880876", "createdAt": "2020-03-04T19:21:24Z", "author": {"login": "jasontedor"}, "path": "build.gradle", "diffHunk": "@@ -115,6 +115,7 @@ subprojects {\n       ':distribution:tools:launchers',\n       ':distribution:tools:plugin-cli',\n       ':qa:os',\n+      ':qa:wildfly',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a872efcfca258eb2a13c4076ca9414a718719a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzI4NjEzOnYy", "diffSide": "RIGHT", "path": "qa/wildfly/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0MDo1OFrOFx822w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTowNjowMVrOFx9nbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMTYyNw==", "bodyText": "Why change from a String to a GString?", "url": "https://github.com/elastic/elasticsearch/pull/53126#discussion_r387921627", "createdAt": "2020-03-04T20:40:58Z", "author": {"login": "mark-vieira"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -73,177 +45,52 @@ dependencies {\n   compile \"org.apache.logging.log4j:log4j-api:${versions.log4j}\"\n   compile \"org.apache.logging.log4j:log4j-core:${versions.log4j}\"\n   compile project(path: ':client:rest-high-level', configuration: 'shadow')\n-  wildfly \"org.jboss:wildfly:${wildflyVersion}@zip\"\n   testCompile project(':test:framework')\n }\n \n-task unzipWildfly(type: Sync) {\n-  into wildflyDir\n-  from { zipTree(configurations.wildfly.singleFile) }\n+war {\n+  archiveName \"example-app.war\"\n }\n \n-task deploy(type: Copy) {\n-  dependsOn unzipWildfly, war\n-  from war\n-  into \"${wildflyInstall}/standalone/deployments\"\n-}\n-\n-task writeElasticsearchProperties(type: DefaultTestClustersTask) {\n-  onlyIf { !Os.isFamily(Os.FAMILY_WINDOWS) }\n-  useCluster testClusters.integTest\n-  dependsOn deploy\n-  doLast {\n-    final File elasticsearchProperties = file(\"${wildflyInstall}/standalone/configuration/elasticsearch.properties\")\n-    elasticsearchProperties.write(\n-      [\n-        \"http.uri=${-> testClusters.integTest.getAllHttpSocketURI().get(0)}\"\n-      ].join(\"\\n\"))\n+elasticsearch_distributions {\n+  docker {\n+    type = 'docker'\n+    flavor = System.getProperty('tests.distribution', 'default')\n+    version = VersionProperties.getElasticsearch()\n+    failIfUnavailable = false // This ensures we skip this testing if Docker is unavailable\n   }\n }\n \n-// the default configuration ships with IPv6 disabled but our cluster could be bound to IPv6 if the host supports it\n-task enableIPv6 {\n-  dependsOn unzipWildfly\n-  doLast {\n-    final File standaloneConf = file(\"${wildflyInstall}/bin/standalone.conf\")\n-    final List<String> lines =\n-      Files.readAllLines(standaloneConf.toPath())\n-        .collect { line -> line.replace(\"-Djava.net.preferIPv4Stack=true\", \"-Djava.net.preferIPv4Stack=false\") }\n-    standaloneConf.write(lines.join(\"\\n\"))\n-  }\n+preProcessFixture {\n+  dependsOn elasticsearch_distributions.docker\n }\n \n-task startWildfly {\n-  dependsOn enableIPv6, writeElasticsearchProperties\n-  doLast {\n-    // we skip these tests on Windows so we do no need to worry about compatibility here\n-    final ProcessBuilder wildfly = new ProcessBuilder(\n-      \"${wildflyInstall}/bin/standalone.sh\",\n-      \"-Djboss.http.port=0\",\n-      \"-Djboss.https.port=0\",\n-      \"-Djboss.management.http.port=0\")\n-    final Process process = wildfly.start()\n-    new BufferedReader(new InputStreamReader(process.getInputStream())).withReader { br ->\n-      String line\n-      int httpPort = 0\n-      while ((line = br.readLine()) != null) {\n-        logger.info(line)\n-        if (line.matches('.*Undertow HTTP listener default listening on .*:\\\\d+$')) {\n-          assert httpPort == 0\n-          final int index = line.lastIndexOf(\":\")\n-          assert index >= 0\n-          httpPort = Integer.parseInt(line.substring(index + 1))\n-          // set this system property so the test runner knows the port Wildfly is listening for HTTP requests on\n-          integTestRunner.systemProperty(\"tests.jboss.root\", \"http://localhost:$httpPort/wildfly-$version/transport\")\n-        } else if (line.matches('.*Http management interface listening on http://.*:\\\\d+/management$')) {\n-          assert managementPort == 0\n-          final int colonIndex = line.lastIndexOf(\":\")\n-          assert colonIndex >= 0\n-          final int slashIndex = line.lastIndexOf(\"/\")\n-          assert slashIndex >= 0\n-          managementPort = Integer.parseInt(line.substring(colonIndex + 1, slashIndex))\n-\n-          /*\n-           * As soon as we know the management port, we fork a process that will ensure the Wildfly process is killed if we\n-           * teardown abnormally. We skip these tests on Windows so we do not need to worry about CLI compatibility here.\n-           */\n-          final File script = new File(project.buildDir, \"wildfly/wildfly.killer.sh\")\n-          script.setText(\n-            [\"function shutdown {\",\n-             \"  ${wildflyInstall}/bin/jboss-cli.sh --controller=localhost:${-> managementPort} --connect command=shutdown\",\n-             \"}\",\n-             \"trap shutdown EXIT\",\n-             // will wait indefinitely for input, but we never pass input, and the pipe is only closed when the build dies\n-             \"read line\\n\"].join('\\n'), 'UTF-8')\n-          final ProcessBuilder killer = new ProcessBuilder(\"bash\", script.absolutePath)\n-          killer.start()\n-\n-        } else if (line.matches(\".*WildFly Full \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.Final \\\\(WildFly Core \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.Final\\\\) started.*\")) {\n-          break\n-        }\n-      }\n-\n-      if (httpPort == 0 || managementPort == 0) {\n-        String portType = httpPort == 0 ? \"http\" : \"management\"\n-        throw new GradleException(\"Failed to find ${portType} port in wildfly log\")\n-      }\n-    }\n+dockerCompose {\n+  if ('default'.equalsIgnoreCase(System.getProperty('tests.distribution', 'default'))) {\n+    useComposeFiles = ['docker-compose.yml']\n+  } else {\n+    useComposeFiles = ['docker-compose-oss.yml']\n   }\n }\n \n-task configureClient(type: LoggedExec) {\n-  dependsOn startWildfly\n-  // we skip these tests on Windows so we do not need to worry about compatibility here\n-  commandLine \"${wildflyInstall}/bin/jboss-cli.sh\",\n-    \"--controller=localhost:${-> managementPort}\",\n-    \"--connect\",\n-    \"--command=/system-property=elasticsearch.properties:add(value=\\${jboss.server.config.dir}/elasticsearch.properties)\"\n-}\n-\n-task stopWildfly(type: LoggedExec) {\n-  // we skip these tests on Windows so we do not need to worry about CLI compatibility here\n-  commandLine \"${wildflyInstall}/bin/jboss-cli.sh\", \"--controller=localhost:${-> managementPort}\", \"--connect\", \"command=shutdown\"\n-}\n-\n-if (!Os.isFamily(Os.FAMILY_WINDOWS)) {\n-  integTestRunner.dependsOn(configureClient)\n-  final TaskExecutionAdapter logDumpListener = new TaskExecutionAdapter() {\n-    @Override\n-    void afterExecute(final Task task, final TaskState state) {\n-      if (task != startWildfly && task != integTestRunner) {\n-        // we might have been called from a parallel, unrelated task\n-        return\n-      }\n-      if (state.failure != null) {\n-        final File logFile = new File(wildflyInstall, \"standalone/log/server.log\")\n-        println(\"\\nWildfly server log (from ${logFile}):\")\n-        println('-----------------------------------------')\n-        final Stream<String> stream = Files.lines(logFile.toPath(), StandardCharsets.UTF_8)\n-        try {\n-          for (String line : stream) {\n-            println(line)\n-          }\n-        } finally {\n-          stream.close()\n-        }\n-        println('=========================================')\n-      }\n-    }\n-  }\n-  startWildfly.doFirst {\n-    project.gradle.addListener(logDumpListener)\n-  }\n-  integTestRunner.doFirst {\n-    project.gradle.addListener(logDumpListener)\n-  }\n-  integTestRunner.doLast {\n-    project.gradle.removeListener(logDumpListener)\n-  }\n-  startWildfly.doLast {\n-    project.gradle.removeListener(logDumpListener)\n-  }\n-  integTestRunner.finalizedBy(stopWildfly)\n-} else {\n-  integTest.enabled = false\n-  testingConventions.enabled = false\n+task integTest(type: Test) {\n+  outputs.doNotCacheIf('Build cache is disabled for Docker tests') { true }\n+  maxParallelForks = '1'\n+  include '**/*IT.class'\n }\n \n-check.dependsOn(integTest)\n+check.dependsOn integTest\n \n test.enabled = false\n-\n dependencyLicenses.enabled = false\n dependenciesInfo.enabled = false\n-\n thirdPartyAudit.enabled = false\n \n-\n testingConventions {\n   naming.clear()\n-  // We only have one \"special\" integration test here to connect to wildfly\n   naming {\n     IT {\n-      baseClass 'org.apache.lucene.util.LuceneTestCase'\n+      baseClass \"org.apache.lucene.util.LuceneTestCase\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47918cfe202d20027f8065dc10178423dd5072d"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDA2Mw==", "bodyText": "What actually happened here is that a stripped a ton of stuff out of this file, then added stuff back in when I discovered that I needed it. This was such a piece, which is why it looks like all I did was change the quotes.", "url": "https://github.com/elastic/elasticsearch/pull/53126#discussion_r387934063", "createdAt": "2020-03-04T21:06:01Z", "author": {"login": "pugnascotia"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -73,177 +45,52 @@ dependencies {\n   compile \"org.apache.logging.log4j:log4j-api:${versions.log4j}\"\n   compile \"org.apache.logging.log4j:log4j-core:${versions.log4j}\"\n   compile project(path: ':client:rest-high-level', configuration: 'shadow')\n-  wildfly \"org.jboss:wildfly:${wildflyVersion}@zip\"\n   testCompile project(':test:framework')\n }\n \n-task unzipWildfly(type: Sync) {\n-  into wildflyDir\n-  from { zipTree(configurations.wildfly.singleFile) }\n+war {\n+  archiveName \"example-app.war\"\n }\n \n-task deploy(type: Copy) {\n-  dependsOn unzipWildfly, war\n-  from war\n-  into \"${wildflyInstall}/standalone/deployments\"\n-}\n-\n-task writeElasticsearchProperties(type: DefaultTestClustersTask) {\n-  onlyIf { !Os.isFamily(Os.FAMILY_WINDOWS) }\n-  useCluster testClusters.integTest\n-  dependsOn deploy\n-  doLast {\n-    final File elasticsearchProperties = file(\"${wildflyInstall}/standalone/configuration/elasticsearch.properties\")\n-    elasticsearchProperties.write(\n-      [\n-        \"http.uri=${-> testClusters.integTest.getAllHttpSocketURI().get(0)}\"\n-      ].join(\"\\n\"))\n+elasticsearch_distributions {\n+  docker {\n+    type = 'docker'\n+    flavor = System.getProperty('tests.distribution', 'default')\n+    version = VersionProperties.getElasticsearch()\n+    failIfUnavailable = false // This ensures we skip this testing if Docker is unavailable\n   }\n }\n \n-// the default configuration ships with IPv6 disabled but our cluster could be bound to IPv6 if the host supports it\n-task enableIPv6 {\n-  dependsOn unzipWildfly\n-  doLast {\n-    final File standaloneConf = file(\"${wildflyInstall}/bin/standalone.conf\")\n-    final List<String> lines =\n-      Files.readAllLines(standaloneConf.toPath())\n-        .collect { line -> line.replace(\"-Djava.net.preferIPv4Stack=true\", \"-Djava.net.preferIPv4Stack=false\") }\n-    standaloneConf.write(lines.join(\"\\n\"))\n-  }\n+preProcessFixture {\n+  dependsOn elasticsearch_distributions.docker\n }\n \n-task startWildfly {\n-  dependsOn enableIPv6, writeElasticsearchProperties\n-  doLast {\n-    // we skip these tests on Windows so we do no need to worry about compatibility here\n-    final ProcessBuilder wildfly = new ProcessBuilder(\n-      \"${wildflyInstall}/bin/standalone.sh\",\n-      \"-Djboss.http.port=0\",\n-      \"-Djboss.https.port=0\",\n-      \"-Djboss.management.http.port=0\")\n-    final Process process = wildfly.start()\n-    new BufferedReader(new InputStreamReader(process.getInputStream())).withReader { br ->\n-      String line\n-      int httpPort = 0\n-      while ((line = br.readLine()) != null) {\n-        logger.info(line)\n-        if (line.matches('.*Undertow HTTP listener default listening on .*:\\\\d+$')) {\n-          assert httpPort == 0\n-          final int index = line.lastIndexOf(\":\")\n-          assert index >= 0\n-          httpPort = Integer.parseInt(line.substring(index + 1))\n-          // set this system property so the test runner knows the port Wildfly is listening for HTTP requests on\n-          integTestRunner.systemProperty(\"tests.jboss.root\", \"http://localhost:$httpPort/wildfly-$version/transport\")\n-        } else if (line.matches('.*Http management interface listening on http://.*:\\\\d+/management$')) {\n-          assert managementPort == 0\n-          final int colonIndex = line.lastIndexOf(\":\")\n-          assert colonIndex >= 0\n-          final int slashIndex = line.lastIndexOf(\"/\")\n-          assert slashIndex >= 0\n-          managementPort = Integer.parseInt(line.substring(colonIndex + 1, slashIndex))\n-\n-          /*\n-           * As soon as we know the management port, we fork a process that will ensure the Wildfly process is killed if we\n-           * teardown abnormally. We skip these tests on Windows so we do not need to worry about CLI compatibility here.\n-           */\n-          final File script = new File(project.buildDir, \"wildfly/wildfly.killer.sh\")\n-          script.setText(\n-            [\"function shutdown {\",\n-             \"  ${wildflyInstall}/bin/jboss-cli.sh --controller=localhost:${-> managementPort} --connect command=shutdown\",\n-             \"}\",\n-             \"trap shutdown EXIT\",\n-             // will wait indefinitely for input, but we never pass input, and the pipe is only closed when the build dies\n-             \"read line\\n\"].join('\\n'), 'UTF-8')\n-          final ProcessBuilder killer = new ProcessBuilder(\"bash\", script.absolutePath)\n-          killer.start()\n-\n-        } else if (line.matches(\".*WildFly Full \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.Final \\\\(WildFly Core \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.Final\\\\) started.*\")) {\n-          break\n-        }\n-      }\n-\n-      if (httpPort == 0 || managementPort == 0) {\n-        String portType = httpPort == 0 ? \"http\" : \"management\"\n-        throw new GradleException(\"Failed to find ${portType} port in wildfly log\")\n-      }\n-    }\n+dockerCompose {\n+  if ('default'.equalsIgnoreCase(System.getProperty('tests.distribution', 'default'))) {\n+    useComposeFiles = ['docker-compose.yml']\n+  } else {\n+    useComposeFiles = ['docker-compose-oss.yml']\n   }\n }\n \n-task configureClient(type: LoggedExec) {\n-  dependsOn startWildfly\n-  // we skip these tests on Windows so we do not need to worry about compatibility here\n-  commandLine \"${wildflyInstall}/bin/jboss-cli.sh\",\n-    \"--controller=localhost:${-> managementPort}\",\n-    \"--connect\",\n-    \"--command=/system-property=elasticsearch.properties:add(value=\\${jboss.server.config.dir}/elasticsearch.properties)\"\n-}\n-\n-task stopWildfly(type: LoggedExec) {\n-  // we skip these tests on Windows so we do not need to worry about CLI compatibility here\n-  commandLine \"${wildflyInstall}/bin/jboss-cli.sh\", \"--controller=localhost:${-> managementPort}\", \"--connect\", \"command=shutdown\"\n-}\n-\n-if (!Os.isFamily(Os.FAMILY_WINDOWS)) {\n-  integTestRunner.dependsOn(configureClient)\n-  final TaskExecutionAdapter logDumpListener = new TaskExecutionAdapter() {\n-    @Override\n-    void afterExecute(final Task task, final TaskState state) {\n-      if (task != startWildfly && task != integTestRunner) {\n-        // we might have been called from a parallel, unrelated task\n-        return\n-      }\n-      if (state.failure != null) {\n-        final File logFile = new File(wildflyInstall, \"standalone/log/server.log\")\n-        println(\"\\nWildfly server log (from ${logFile}):\")\n-        println('-----------------------------------------')\n-        final Stream<String> stream = Files.lines(logFile.toPath(), StandardCharsets.UTF_8)\n-        try {\n-          for (String line : stream) {\n-            println(line)\n-          }\n-        } finally {\n-          stream.close()\n-        }\n-        println('=========================================')\n-      }\n-    }\n-  }\n-  startWildfly.doFirst {\n-    project.gradle.addListener(logDumpListener)\n-  }\n-  integTestRunner.doFirst {\n-    project.gradle.addListener(logDumpListener)\n-  }\n-  integTestRunner.doLast {\n-    project.gradle.removeListener(logDumpListener)\n-  }\n-  startWildfly.doLast {\n-    project.gradle.removeListener(logDumpListener)\n-  }\n-  integTestRunner.finalizedBy(stopWildfly)\n-} else {\n-  integTest.enabled = false\n-  testingConventions.enabled = false\n+task integTest(type: Test) {\n+  outputs.doNotCacheIf('Build cache is disabled for Docker tests') { true }\n+  maxParallelForks = '1'\n+  include '**/*IT.class'\n }\n \n-check.dependsOn(integTest)\n+check.dependsOn integTest\n \n test.enabled = false\n-\n dependencyLicenses.enabled = false\n dependenciesInfo.enabled = false\n-\n thirdPartyAudit.enabled = false\n \n-\n testingConventions {\n   naming.clear()\n-  // We only have one \"special\" integration test here to connect to wildfly\n   naming {\n     IT {\n-      baseClass 'org.apache.lucene.util.LuceneTestCase'\n+      baseClass \"org.apache.lucene.util.LuceneTestCase\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMTYyNw=="}, "originalCommit": {"oid": "f47918cfe202d20027f8065dc10178423dd5072d"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzI5Nzk2OnYy", "diffSide": "RIGHT", "path": "qa/wildfly/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NDoyOFrOFx893A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTowNjowNFrOFx9njg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzQyMA==", "bodyText": "We should also depend on war here as well, as otherwise there's nothing to actually ensure we build the war artifact before spinning up the docker test fixture. I suspect this is why we are failing in CI here.", "url": "https://github.com/elastic/elasticsearch/pull/53126#discussion_r387923420", "createdAt": "2020-03-04T20:44:28Z", "author": {"login": "mark-vieira"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -73,177 +45,52 @@ dependencies {\n   compile \"org.apache.logging.log4j:log4j-api:${versions.log4j}\"\n   compile \"org.apache.logging.log4j:log4j-core:${versions.log4j}\"\n   compile project(path: ':client:rest-high-level', configuration: 'shadow')\n-  wildfly \"org.jboss:wildfly:${wildflyVersion}@zip\"\n   testCompile project(':test:framework')\n }\n \n-task unzipWildfly(type: Sync) {\n-  into wildflyDir\n-  from { zipTree(configurations.wildfly.singleFile) }\n+war {\n+  archiveName \"example-app.war\"\n }\n \n-task deploy(type: Copy) {\n-  dependsOn unzipWildfly, war\n-  from war\n-  into \"${wildflyInstall}/standalone/deployments\"\n-}\n-\n-task writeElasticsearchProperties(type: DefaultTestClustersTask) {\n-  onlyIf { !Os.isFamily(Os.FAMILY_WINDOWS) }\n-  useCluster testClusters.integTest\n-  dependsOn deploy\n-  doLast {\n-    final File elasticsearchProperties = file(\"${wildflyInstall}/standalone/configuration/elasticsearch.properties\")\n-    elasticsearchProperties.write(\n-      [\n-        \"http.uri=${-> testClusters.integTest.getAllHttpSocketURI().get(0)}\"\n-      ].join(\"\\n\"))\n+elasticsearch_distributions {\n+  docker {\n+    type = 'docker'\n+    flavor = System.getProperty('tests.distribution', 'default')\n+    version = VersionProperties.getElasticsearch()\n+    failIfUnavailable = false // This ensures we skip this testing if Docker is unavailable\n   }\n }\n \n-// the default configuration ships with IPv6 disabled but our cluster could be bound to IPv6 if the host supports it\n-task enableIPv6 {\n-  dependsOn unzipWildfly\n-  doLast {\n-    final File standaloneConf = file(\"${wildflyInstall}/bin/standalone.conf\")\n-    final List<String> lines =\n-      Files.readAllLines(standaloneConf.toPath())\n-        .collect { line -> line.replace(\"-Djava.net.preferIPv4Stack=true\", \"-Djava.net.preferIPv4Stack=false\") }\n-    standaloneConf.write(lines.join(\"\\n\"))\n-  }\n+preProcessFixture {\n+  dependsOn elasticsearch_distributions.docker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47918cfe202d20027f8065dc10178423dd5072d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDA5NA==", "bodyText": "Added", "url": "https://github.com/elastic/elasticsearch/pull/53126#discussion_r387934094", "createdAt": "2020-03-04T21:06:04Z", "author": {"login": "pugnascotia"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -73,177 +45,52 @@ dependencies {\n   compile \"org.apache.logging.log4j:log4j-api:${versions.log4j}\"\n   compile \"org.apache.logging.log4j:log4j-core:${versions.log4j}\"\n   compile project(path: ':client:rest-high-level', configuration: 'shadow')\n-  wildfly \"org.jboss:wildfly:${wildflyVersion}@zip\"\n   testCompile project(':test:framework')\n }\n \n-task unzipWildfly(type: Sync) {\n-  into wildflyDir\n-  from { zipTree(configurations.wildfly.singleFile) }\n+war {\n+  archiveName \"example-app.war\"\n }\n \n-task deploy(type: Copy) {\n-  dependsOn unzipWildfly, war\n-  from war\n-  into \"${wildflyInstall}/standalone/deployments\"\n-}\n-\n-task writeElasticsearchProperties(type: DefaultTestClustersTask) {\n-  onlyIf { !Os.isFamily(Os.FAMILY_WINDOWS) }\n-  useCluster testClusters.integTest\n-  dependsOn deploy\n-  doLast {\n-    final File elasticsearchProperties = file(\"${wildflyInstall}/standalone/configuration/elasticsearch.properties\")\n-    elasticsearchProperties.write(\n-      [\n-        \"http.uri=${-> testClusters.integTest.getAllHttpSocketURI().get(0)}\"\n-      ].join(\"\\n\"))\n+elasticsearch_distributions {\n+  docker {\n+    type = 'docker'\n+    flavor = System.getProperty('tests.distribution', 'default')\n+    version = VersionProperties.getElasticsearch()\n+    failIfUnavailable = false // This ensures we skip this testing if Docker is unavailable\n   }\n }\n \n-// the default configuration ships with IPv6 disabled but our cluster could be bound to IPv6 if the host supports it\n-task enableIPv6 {\n-  dependsOn unzipWildfly\n-  doLast {\n-    final File standaloneConf = file(\"${wildflyInstall}/bin/standalone.conf\")\n-    final List<String> lines =\n-      Files.readAllLines(standaloneConf.toPath())\n-        .collect { line -> line.replace(\"-Djava.net.preferIPv4Stack=true\", \"-Djava.net.preferIPv4Stack=false\") }\n-    standaloneConf.write(lines.join(\"\\n\"))\n-  }\n+preProcessFixture {\n+  dependsOn elasticsearch_distributions.docker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzQyMA=="}, "originalCommit": {"oid": "f47918cfe202d20027f8065dc10178423dd5072d"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}