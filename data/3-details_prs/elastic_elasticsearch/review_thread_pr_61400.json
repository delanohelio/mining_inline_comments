{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMzkxNTc5", "number": 61400, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMjoyM1rOEa0U9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoyMDo1NlrOEdKCjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU1NzY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMjoyM1rOHEeAzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMjoyM1rOHEeAzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0ODA3OA==", "bodyText": "I'd prefer the try{} block only to contain the call to nodeEnv.nodeDataPaths(), would you reduce its scope? That way you don't need a local lockAssertionFailed, you can set brokenLock and exit immediately.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r474448078", "createdAt": "2020-08-21T07:02:23Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -150,32 +153,39 @@ public void run() {\n \n         private void monitorFSHealth() {\n             Set<Path> currentUnhealthyPaths = null;\n-            for (Path path : nodeEnv.nodeDataPaths()) {\n-                long executionStartTime = currentTimeMillisSupplier.getAsLong();\n-                try {\n-                    if (Files.exists(path)) {\n-                        Path tempDataPath = path.resolve(TEMP_FILE_NAME);\n-                        Files.deleteIfExists(tempDataPath);\n-                        try (OutputStream os = Files.newOutputStream(tempDataPath, StandardOpenOption.CREATE_NEW)) {\n-                            os.write(byteToWrite);\n-                            IOUtils.fsync(tempDataPath, false);\n+            boolean lockAssertionFailed = false;\n+            try {\n+                for (Path path : nodeEnv.nodeDataPaths()) {\n+                    long executionStartTime = currentTimeMillisSupplier.getAsLong();\n+                    try {\n+                        if (Files.exists(path)) {\n+                            Path tempDataPath = path.resolve(TEMP_FILE_NAME);\n+                            Files.deleteIfExists(tempDataPath);\n+                            try (OutputStream os = Files.newOutputStream(tempDataPath, StandardOpenOption.CREATE_NEW)) {\n+                                os.write(byteToWrite);\n+                                IOUtils.fsync(tempDataPath, false);\n+                            }\n+                            Files.delete(tempDataPath);\n+                            final long elapsedTime = currentTimeMillisSupplier.getAsLong() - executionStartTime;\n+                            if (elapsedTime > slowPathLoggingThreshold.millis()) {\n+                                logger.warn(\"health check of [{}] took [{}ms] which is above the warn threshold of [{}]\",\n+                                    path, elapsedTime, slowPathLoggingThreshold);\n+                            }\n                         }\n-                        Files.delete(tempDataPath);\n-                        final long elapsedTime = currentTimeMillisSupplier.getAsLong() - executionStartTime;\n-                        if (elapsedTime > slowPathLoggingThreshold.millis()) {\n-                            logger.warn(\"health check of [{}] took [{}ms] which is above the warn threshold of [{}]\",\n-                                path, elapsedTime, slowPathLoggingThreshold);\n+                    } catch (Exception ex) {\n+                        logger.error(new ParameterizedMessage(\"health check of [{}] failed\", path), ex);\n+                        if (currentUnhealthyPaths == null) {\n+                            currentUnhealthyPaths = new HashSet<>(1);\n                         }\n+                        currentUnhealthyPaths.add(path);\n                     }\n-                } catch (Exception ex) {\n-                    logger.error(new ParameterizedMessage(\"health check of [{}] failed\", path), ex);\n-                    if (currentUnhealthyPaths == null) {\n-                        currentUnhealthyPaths = new HashSet<>(1);\n-                    }\n-                    currentUnhealthyPaths.add(path);\n                 }\n+            } catch (IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU3OTgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNjo1OVrOHEeOiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNjo1OVrOHEeOiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MTU5Mg==", "bodyText": "Minor wording nit: specify which lock was broken (and remove redundant on node), suggest this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        statusInfo = new StatusInfo(UNHEALTHY, \"health check failed on node due to broken locks\");\n          \n          \n            \n                        statusInfo = new StatusInfo(UNHEALTHY, \"health check failed due to broken node lock\");", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r474451592", "createdAt": "2020-08-21T07:06:59Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -117,6 +118,8 @@ public StatusInfo getHealth() {\n         Set<Path> unhealthyPaths = this.unhealthyPaths;\n         if (enabled == false) {\n             statusInfo = new StatusInfo(HEALTHY, \"health check disabled\");\n+        } else if (brokenLock == true) {\n+            statusInfo = new StatusInfo(UNHEALTHY, \"health check failed on node due to broken locks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU5NjU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxMDoyN1rOHEeY9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxMDoyN1rOHEeY9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NDI2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r474454262", "createdAt": "2020-08-21T07:10:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -254,7 +383,8 @@ public int getInjectedPathCount(){\n         public OutputStream newOutputStream(Path path, OpenOption... options) throws IOException {\n             if (injectIOException.get()){\n                 assert pathPrefix != null : \"must set pathPrefix before starting disruptions\";\n-                if (path.toString().startsWith(pathPrefix) && path.toString().endsWith(\".es_temp_file\")) {\n+                if (path.toString().startsWith(pathPrefix) && path.toString().\n+                    endsWith(FsHealthService.FsHealthMonitor.TEMP_FILE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU5Njk2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxMDozMVrOHEeZMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxMDozMVrOHEeZMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NDMyMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r474454322", "createdAt": "2020-08-21T07:10:31Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -289,7 +419,8 @@ public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options,\n                 public void force(boolean metaData) throws IOException {\n                     if (injectIOException.get()) {\n                         assert pathPrefix != null : \"must set pathPrefix before starting disruptions\";\n-                        if (path.toString().startsWith(pathPrefix) && path.toString().endsWith(\".es_temp_file\")) {\n+                        if (path.toString().startsWith(pathPrefix) && path.toString().\n+                            endsWith(FsHealthService.FsHealthMonitor.TEMP_FILE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTYyMDQ0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxNTowOVrOHEeneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNDo1NFrOHFgduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Nzk3OA==", "bodyText": "Thorough tests \ud83d\ude04 However they're not really testing anything in the FsHealthService so much as testing the details of the implementation of the NativeFSLock. Let's just have one of these here, and maybe consider filling in any gaps in Lucene's TestNativeFSLockFactory separately.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r474457978", "createdAt": "2020-08-21T07:15:09Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -231,6 +234,132 @@ public void testFailsHealthOnSinglePathWriteFailure() throws IOException {\n         }\n     }\n \n+    public void testFailsHealthOnMissingLockFile() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTg0Ng==", "bodyText": "Thanks, i am thinking to keep two of them where one throws an IOException and another for AlreadyClosedException.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r475515846", "createdAt": "2020-08-24T10:51:21Z", "author": {"login": "amoghRZP"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -231,6 +234,132 @@ public void testFailsHealthOnSinglePathWriteFailure() throws IOException {\n         }\n     }\n \n+    public void testFailsHealthOnMissingLockFile() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Nzk3OA=="}, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTQxOQ==", "bodyText": "No, one is all we need here.\nNodeEnvironmentTests would be the right place to verify that NodeEnvironment#assertEnvIsLocked throws an IllegalStateException in both of those cases. I think we don't do that today, but again that's a question for a separate PR.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r475525419", "createdAt": "2020-08-24T11:11:35Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -231,6 +234,132 @@ public void testFailsHealthOnSinglePathWriteFailure() throws IOException {\n         }\n     }\n \n+    public void testFailsHealthOnMissingLockFile() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Nzk3OA=="}, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjgyNA==", "bodyText": "ok, Got it.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r475536824", "createdAt": "2020-08-24T11:34:54Z", "author": {"login": "amoghRZP"}, "path": "server/src/test/java/org/elasticsearch/monitor/fs/FsHealthServiceTests.java", "diffHunk": "@@ -231,6 +234,132 @@ public void testFailsHealthOnSinglePathWriteFailure() throws IOException {\n         }\n     }\n \n+    public void testFailsHealthOnMissingLockFile() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Nzk3OA=="}, "originalCommit": {"oid": "9478e2bd17d0ac700fe28cb7e22c892cc4d58999"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA4MjQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoxOTo0MFrOHIJ3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNToyMzoxOFrOHIp3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjM1NQ==", "bodyText": "Clearing this flag here may mean the node reports itself as healthy even though it hasn't actually passed this health check yet. I think we should clear this flag only after setting unhealthyPaths at the very bottom of this method.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r478312355", "createdAt": "2020-08-27T10:19:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -150,7 +153,17 @@ public void run() {\n \n         private void monitorFSHealth() {\n             Set<Path> currentUnhealthyPaths = null;\n-            for (Path path : nodeEnv.nodeDataPaths()) {\n+            brokenLock = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43b6fb219f356bbb85990042856480534f49a75"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNjU5NQ==", "bodyText": "sure, done.", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r478836595", "createdAt": "2020-08-28T05:23:18Z", "author": {"login": "amoghRZP"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -150,7 +153,17 @@ public void run() {\n \n         private void monitorFSHealth() {\n             Set<Path> currentUnhealthyPaths = null;\n-            for (Path path : nodeEnv.nodeDataPaths()) {\n+            brokenLock = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjM1NQ=="}, "originalCommit": {"oid": "c43b6fb219f356bbb85990042856480534f49a75"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDA4NjUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDoyMDo1NlrOHIJ6Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNToyMzo0MFrOHIp30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjk3NA==", "bodyText": "Minor wording nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Lock assertions failed due to\", e);\n          \n          \n            \n                            logger.error(\"health check failed\", e);", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r478312974", "createdAt": "2020-08-27T10:20:56Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -150,7 +153,17 @@ public void run() {\n \n         private void monitorFSHealth() {\n             Set<Path> currentUnhealthyPaths = null;\n-            for (Path path : nodeEnv.nodeDataPaths()) {\n+            brokenLock = false;\n+            Path[] paths = null;\n+            try {\n+                paths = nodeEnv.nodeDataPaths();\n+            } catch (IllegalStateException e) {\n+                logger.error(\"Lock assertions failed due to\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43b6fb219f356bbb85990042856480534f49a75"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNjY5MQ==", "bodyText": "changed \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61400#discussion_r478836691", "createdAt": "2020-08-28T05:23:40Z", "author": {"login": "amoghRZP"}, "path": "server/src/main/java/org/elasticsearch/monitor/fs/FsHealthService.java", "diffHunk": "@@ -150,7 +153,17 @@ public void run() {\n \n         private void monitorFSHealth() {\n             Set<Path> currentUnhealthyPaths = null;\n-            for (Path path : nodeEnv.nodeDataPaths()) {\n+            brokenLock = false;\n+            Path[] paths = null;\n+            try {\n+                paths = nodeEnv.nodeDataPaths();\n+            } catch (IllegalStateException e) {\n+                logger.error(\"Lock assertions failed due to\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjk3NA=="}, "originalCommit": {"oid": "c43b6fb219f356bbb85990042856480534f49a75"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 893, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}