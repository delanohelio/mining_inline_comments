{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTU3MzA1", "number": 54528, "title": "Convert RestIntegTestTask to Java", "bodyText": "This commit migrates the RestIntegTestTask from groovy to Java.\nNo changes to logic should be included, however the following changes\nare needed:\n\nMove Fixture interface to Java (Java can not depend on Groovy classes)\nSupport lazy evaluation of non-input System parameters (can not use Groovy strings)\nUse constants for system property names\nRemove dead System property pass through code (the build plugin does this already)\n\n=======\nI couldn't get git to track the file name change, so included a intermediate commit that makes this a bit easier to diff.", "createdAt": "2020-03-31T19:43:06Z", "url": "https://github.com/elastic/elasticsearch/pull/54528", "merged": true, "mergeCommit": {"oid": "55aeefa5001121f6ed4358f60027bf3f88bbe10e"}, "closed": true, "closedAt": "2020-04-01T15:04:31Z", "author": {"login": "jakelandis"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTIVEnAH2gAyMzk2NTU3MzA1OmUxOGI1YmZiYjJkNmM5MDNjNWRjZDczNTZmMDdlY2FlMzYyZTVmNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTLeG0gFqTM4NTE2Njk5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e18b5bfbb2d6c903c5dcd7356f07ecae362e5f5c", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/e18b5bfbb2d6c903c5dcd7356f07ecae362e5f5c", "committedDate": "2020-03-31T19:32:54Z", "message": "move files and add supplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609026d5f4d130ba3ac4dbce6df0554cec598aec", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/609026d5f4d130ba3ac4dbce6df0554cec598aec", "committedDate": "2020-03-31T19:33:17Z", "message": "RestIntegTestTask to java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9", "committedDate": "2020-03-31T19:40:58Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDUxOTEx", "url": "https://github.com/elastic/elasticsearch/pull/54528#pullrequestreview-385051911", "createdAt": "2020-03-31T19:47:49Z", "commit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0Nzo0OVrOF-ljpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDozN1rOF-ly7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MTM2NQ==", "bodyText": "Let's provide an overloaded method that takes a Supplier<String> so we don't have to do this explicit cast here.", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401171365", "createdAt": "2020-03-31T19:47:49Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MjQ3OQ==", "bodyText": "Let's use TestClustersPlugin.EXTENSION_NAME here instead of hard-coding.", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401172479", "createdAt": "2020-03-31T19:49:44Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDAzNw==", "bodyText": "Gross. Let's replace this with something like:\nrunner.onlyIf(t -> this.getEnabled())", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401174037", "createdAt": "2020-03-31T19:52:31Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user\n+            runner.systemProperty(TESTS_REST_CLUSTER, System.getProperty(TESTS_REST_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER, System.getProperty(TESTS_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER_NAME, System.getProperty(TESTS_CLUSTER_NAME));\n+        }\n+        // this must run after all projects have been configured, so we know any project\n+        // references can be accessed as a fully configured\n+        project.getGradle().projectsEvaluated(x -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTI3OA==", "bodyText": "I'm now not sure this is even necessary. We already by default pass thru any system properties with the prefix tests.\n\n  \n    \n      elasticsearch/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy\n    \n    \n        Lines 676 to 680\n      in\n      ecdbd37\n    \n    \n    \n    \n\n        \n          \n           System.getProperties().each { key, value -> \n        \n\n        \n          \n               if ((key.toString().startsWith('tests.') || key.toString().startsWith('es.'))) { \n        \n\n        \n          \n                   test.systemProperty key.toString(), value \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401175278", "createdAt": "2020-03-31T19:54:37Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "784d95340dd2bd01ab7957034922a3cfb1d96543", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/784d95340dd2bd01ab7957034922a3cfb1d96543", "committedDate": "2020-03-31T20:32:40Z", "message": "fix test failure (wrong depends) and review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d4b5d72407ac5eeceb749a314cb9ca178c8330", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/78d4b5d72407ac5eeceb749a314cb9ca178c8330", "committedDate": "2020-03-31T20:41:19Z", "message": "fix warning, remove uneeded code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "205ed0017dbf6e926e5d8d0d12e0fa80f0e8ee50", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/205ed0017dbf6e926e5d8d0d12e0fa80f0e8ee50", "committedDate": "2020-03-31T21:07:15Z", "message": "bring back isEnabled setEnabled to pass validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTY2OTk4", "url": "https://github.com/elastic/elasticsearch/pull/54528#pullrequestreview-385166998", "createdAt": "2020-03-31T23:12:29Z", "commit": {"oid": "205ed0017dbf6e926e5d8d0d12e0fa80f0e8ee50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1413, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}