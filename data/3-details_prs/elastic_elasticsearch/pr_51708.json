{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzA4NjAz", "number": 51708, "title": "Always rewrite search shard request outside of the search thread pool", "bodyText": "This change ensures that the rewrite of the shard request is executed in the network thread or in the refresh listener when waiting for an active shard. This allows queries that rewrite to match_no_docs to bypass the search thread pool entirely even if the can_match phase was skipped (pre_filter_shard_size > number of shards).\nCoordinating nodes don't have the ability to create empty responses so this change also ensures that at least one shard creates a full empty response while the other can return null ones. This is needed since creating true empty responses on shards require to create concrete aggregators which would be too costly to build on a network thread. We should move this functionality to aggregation builders in a follow up but that would be a much bigger change.\nThis change is also important for #49601 since we want to add the ability to use the result of other shards to rewrite the request of subsequent ones. For instance if the first M shards have their top N computed, the top worst document in the global queue can be pass to subsequent shards that can then rewrite to match_no_docs if they can guarantee that they don't have any document better than the provided one.", "createdAt": "2020-01-30T21:55:14Z", "url": "https://github.com/elastic/elasticsearch/pull/51708", "merged": true, "mergeCommit": {"oid": "eb69c6fe7cf5620e1726ceecb77b35cd0f4e016d"}, "closed": true, "closedAt": "2020-02-06T07:55:21Z", "author": {"login": "jimczi"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_hwn0AH2gAyMzY5MzA4NjAzOjI4ZmEyM2I4Y2I2OWRjMmU3OGQ2YWFmNDkxZDA4ZDQ3YjExNjRlNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBavjqgFqTM1Mzk1NTk0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "28fa23b8cb69dc2e78d6aaf491d08d47b1164e43", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/28fa23b8cb69dc2e78d6aaf491d08d47b1164e43", "committedDate": "2020-01-30T21:52:08Z", "message": "Always rewrite search shard request outside of the search thread pool\n\nThis change ensures that the rewrite of the shard request is executed in the network thread or in the refresh listener\nwhen waiting for an active shard. This allows queries that rewrite to match_no_docs to bypass the search thread pool\nentirely even if the can_match phase was skipped (pre_filter_shard_size > number of shards). Coordinating nodes\ndon't have the ability to create empty responses so this change also ensures that at least one shard creates a full empty\nresponse while the other can return null ones. This is needed since creating true empty responses on shards require to create\nconcrete aggregators which would be too costly to build on a network thread. We should move this functionality to aggregation\nbuilders in a follow up but that would be a much bigger change.\nThis change is also important for #49601 since we want to add the ability to use the result of other shards to rewrite the request\nof subsequent ones. For instance if the first M shards have their top N computed, the top worst document in the global queue can be pass\nto subsequent shards that can then rewrite to match_no_docs if they can guarantee that they don't have any document better than the provided\none."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "534b5525ed54f1e4efbe6267bb154b9be578a6f7", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/534b5525ed54f1e4efbe6267bb154b9be578a6f7", "committedDate": "2020-01-30T22:03:28Z", "message": "add serialization test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c02f352fe574de396eef1c89f98de74314a35133", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/c02f352fe574de396eef1c89f98de74314a35133", "committedDate": "2020-01-30T22:40:32Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "010ec08d4c01c55b49a5584e6ee2b57d5b67a180", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/010ec08d4c01c55b49a5584e6ee2b57d5b67a180", "committedDate": "2020-01-30T22:41:02Z", "message": "Merge branch 'master' into rewrite_shard_request_no_rejection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "committedDate": "2020-01-30T23:35:04Z", "message": "fix bwc issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDE5OTA5", "url": "https://github.com/elastic/elasticsearch/pull/51708#pullrequestreview-352019909", "createdAt": "2020-02-03T04:50:33Z", "commit": {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDo1MDozM1rOFkmWLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDo1MjoxMVrOFkmXDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTMyNw==", "bodyText": "Can we skip these steps entirely? If so, we might not need to acquire an engine searcher, which potentially triggers a refresh.", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921327", "createdAt": "2020-02-03T04:50:33Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -340,15 +360,59 @@ private void loadOrExecuteQueryPhase(final ShardSearchRequest request, final Sea\n     }\n \n     public void executeQueryPhase(ShardSearchRequest request, SearchShardTask task, ActionListener<SearchPhaseResult> listener) {\n-        rewriteShardRequest(request, ActionListener.map(listener, r -> executeQueryPhase(r, task)));\n+        assert request.isMatchNoDocsReturnNullResponse() == false || request.numberOfShards() > 1\n+            : \"empty responses require more than one shard\";\n+        rewriteShardRequest(request, ActionListener.wrap(\n+            context -> {\n+                try {\n+                    ShardSearchRequest rewritten = context.request;\n+                    if (rewritten.isMatchNoDocsReturnNullResponse()\n+                            && canRewriteToMatchNone(rewritten.source())\n+                            && rewritten.source().query() instanceof MatchNoneQueryBuilder) {\n+                        onMatchNoDocs(context, listener);\n+                    } else {\n+                        // fork the execution in the search thread pool and wraps the searcher\n+                        // to execute the query\n+                        context.wrapSearcher().execute(() -> {\n+                            final SearchPhaseResult result;\n+                            try {\n+                                result = executeQueryPhase(context, task);\n+                            } catch (Exception exc) {\n+                                listener.onFailure(exc);\n+                                return;\n+                            }\n+                            listener.onResponse(result);\n+                        });\n+                    }\n+                } catch (Exception exc) {\n+                    // if the execution is rejected we need to close the searcher\n+                    IOUtils.closeWhileHandlingException(context.searcher);\n+                    listener.onFailure(exc);\n+                }\n+            }, listener::onFailure));\n+    }\n+\n+    private void onMatchNoDocs(SearchRewriteContext rewriteContext, ActionListener<SearchPhaseResult> listener) {\n+        // creates a lightweight search context that we use to inform context listeners\n+        // before closing\n+        SearchContext searchContext = createSearchContext(rewriteContext, defaultSearchTimeout);\n+        try (searchContext) {\n+            onNewContext(searchContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTQyMA==", "bodyText": "nit: can we use successfulOps instead? Also, I think we can have up to maxConcurrentRequestsPerNode responses instead of one. But I don't see a way to avoid this as any shard request can fail.", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921420", "createdAt": "2020-02-03T04:51:14Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java", "diffHunk": "@@ -462,9 +464,10 @@ public final void onShardFailure(final int shardIndex, @Nullable SearchShardTarg\n      * @param result the result returned form the shard\n      * @param shardIt the shard iterator\n      */\n-    private void onShardResult(Result result, SearchShardIterator shardIt) {\n+    protected void onShardResult(Result result, SearchShardIterator shardIt) {\n         assert result.getShardIndex() != -1 : \"shard index is not set\";\n         assert result.getSearchShardTarget() != null : \"search shard target must not be null\";\n+        hasShardResponse.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTU0OA==", "bodyText": "nit: I think canReturnNullResponseIfMatchNoDocs is a better name.", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921548", "createdAt": "2020-02-03T04:52:11Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ShardSearchRequest.java", "diffHunk": "@@ -275,6 +286,19 @@ public String preference() {\n         return preference;\n     }\n \n+    /**\n+     * Returns true if the caller can handle null response {@link QuerySearchResult#nullInstance()}.\n+     * Defaults to false since the coordinator node needs at least one shard response to build the global\n+     * response.\n+     */\n+    public boolean isMatchNoDocsReturnNullResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0acf244b16fc4a7e9bbfeb64160b71d1ae1a7535", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/0acf244b16fc4a7e9bbfeb64160b71d1ae1a7535", "committedDate": "2020-02-03T10:17:08Z", "message": "address review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6016fa43c844868940c1cf4f5b8572ab69093d52", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/6016fa43c844868940c1cf4f5b8572ab69093d52", "committedDate": "2020-02-03T10:49:40Z", "message": "adapt test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0581270a25c6a11182a5eae9ec2cdeec39e2a07", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/a0581270a25c6a11182a5eae9ec2cdeec39e2a07", "committedDate": "2020-02-03T10:52:09Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8534ed25df43ced97d8ff983caaaec115f6d0ea6", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/8534ed25df43ced97d8ff983caaaec115f6d0ea6", "committedDate": "2020-02-03T14:24:37Z", "message": "fix topNSize when size is reset to 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27cdf19dfe2c98cd9939cb15f1cab7b34a6e5254", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/27cdf19dfe2c98cd9939cb15f1cab7b34a6e5254", "committedDate": "2020-02-03T19:44:59Z", "message": "add more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a313d1d002930b1f3cc93c925ec7c4607997870e", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/a313d1d002930b1f3cc93c925ec7c4607997870e", "committedDate": "2020-02-03T19:45:23Z", "message": "Merge branch 'master' into rewrite_shard_request_no_rejection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTM2NzA2", "url": "https://github.com/elastic/elasticsearch/pull/51708#pullrequestreview-352536706", "createdAt": "2020-02-03T20:22:13Z", "commit": {"oid": "a313d1d002930b1f3cc93c925ec7c4607997870e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDoyMjoxM1rOFk-u3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDoyMzoyMFrOFk-w8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMDg2MQ==", "bodyText": "nit: I think both results and onShardResult() can stay private.", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374320861", "createdAt": "2020-02-03T20:22:13Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java", "diffHunk": "@@ -462,11 +464,12 @@ public final void onShardFailure(final int shardIndex, @Nullable SearchShardTarg\n      * @param result the result returned form the shard\n      * @param shardIt the shard iterator\n      */\n-    private void onShardResult(Result result, SearchShardIterator shardIt) {\n+    protected void onShardResult(Result result, SearchShardIterator shardIt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a313d1d002930b1f3cc93c925ec7c4607997870e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTM5Mw==", "bodyText": "Since we no longer execute requests concurrently, we can drop both latches and use a blocking get() instead of non-blocking execute().", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374321393", "createdAt": "2020-02-03T20:23:20Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/frozen-indices/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java", "diffHunk": "@@ -122,26 +123,48 @@ public void testSearchAndGetAPIsAreThrottled() throws InterruptedException, IOEx\n         int numRefreshes = 0;\n         for (int i = 0; i < numRequests; i++) {\n             numRefreshes++;\n-            switch (randomIntBetween(0, 3)) {\n+            // make sure that we don't share the frozen reader in concurrent requests since we acquire the\n+            // searcher and rewrite the request outside of the search-throttle thread pool\n+            CountDownLatch reqLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a313d1d002930b1f3cc93c925ec7c4607997870e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "662972cf2de9b2ad36077b886c4930c8d2a08468", "author": {"user": {"login": "jimczi", "name": "Jim Ferenczi"}}, "url": "https://github.com/elastic/elasticsearch/commit/662972cf2de9b2ad36077b886c4930c8d2a08468", "committedDate": "2020-02-03T20:36:16Z", "message": "more review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTU1OTQ1", "url": "https://github.com/elastic/elasticsearch/pull/51708#pullrequestreview-353955945", "createdAt": "2020-02-05T18:49:29Z", "commit": {"oid": "662972cf2de9b2ad36077b886c4930c8d2a08468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3122, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}