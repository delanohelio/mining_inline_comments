{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTA4MDc1", "number": 64546, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNDo1N1rOE1HQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNToyNVrOE1HRMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTI4ODg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNDo1N1rOHtNGWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjowNTo1MlrOHtrYMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MjU4NA==", "bodyText": "This test might be a good fit in x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/PostOptimizerVerifierTests.java?", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517162584", "createdAt": "2020-11-04T08:14:57Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1ODY3NA==", "bodyText": "The logic I test here is in the ExpressionTranslators (QueryTranslator -> ExpressionTranslators call path) and not in the Verifier. Although the PostOptimizerVerifierTests also exercise the QueryTranslator, so far (and based on the name) that class only tests the Verifier logic.", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517658674", "createdAt": "2020-11-04T22:05:52Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MjU4NA=="}, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTI5MDc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNToyNVrOHtNHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDozNDo0N1rOHuGJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mjg0MQ==", "bodyText": "This might be suitable for x-pack/plugin/sql/qa/server/src/main/resources/filter.sql-spec.", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517162841", "createdAt": "2020-11-04T08:15:25Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {\n+        QlIllegalArgumentException ex = expectThrows(QlIllegalArgumentException.class,\n+            () -> optimizeAndPlan(\"SELECT int FROM test WHERE int IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\"));\n+        assertThat(ex.getMessage(), is(\"[\" + Long.MAX_VALUE + \"] out of [integer] range\"));\n+    }\n+\n+    public void testInInRangeValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1OTUyMw==", "bodyText": "I can add the positive case to the integration tests too.", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517659523", "createdAt": "2020-11-04T22:07:49Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {\n+        QlIllegalArgumentException ex = expectThrows(QlIllegalArgumentException.class,\n+            () -> optimizeAndPlan(\"SELECT int FROM test WHERE int IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\"));\n+        assertThat(ex.getMessage(), is(\"[\" + Long.MAX_VALUE + \"] out of [integer] range\"));\n+    }\n+\n+    public void testInInRangeValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mjg0MQ=="}, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MjgyMg==", "bodyText": "One problem though: I don't see any long type fields in the test_emp dataset -> I cannot test it there (and IMHO it does not worth to change the dataset for this one testcase that I can test in a unit test).", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517672822", "createdAt": "2020-11-04T22:38:55Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {\n+        QlIllegalArgumentException ex = expectThrows(QlIllegalArgumentException.class,\n+            () -> optimizeAndPlan(\"SELECT int FROM test WHERE int IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\"));\n+        assertThat(ex.getMessage(), is(\"[\" + Long.MAX_VALUE + \"] out of [integer] range\"));\n+    }\n+\n+    public void testInInRangeValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mjg0MQ=="}, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMTQxNw==", "bodyText": "Not the most straightforward construct but casts should work;  something like ...WHERE salary::LONG IN (1, 2::LONG). But anyways, I think the tests are OK as they have been merged too.", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r517931417", "createdAt": "2020-11-05T10:06:27Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {\n+        QlIllegalArgumentException ex = expectThrows(QlIllegalArgumentException.class,\n+            () -> optimizeAndPlan(\"SELECT int FROM test WHERE int IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\"));\n+        assertThat(ex.getMessage(), is(\"[\" + Long.MAX_VALUE + \"] out of [integer] range\"));\n+    }\n+\n+    public void testInInRangeValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mjg0MQ=="}, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5NzE2MQ==", "bodyText": "Good idea, will remember this one next time.", "url": "https://github.com/elastic/elasticsearch/pull/64546#discussion_r518097161", "createdAt": "2020-11-05T14:34:47Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2239,4 +2260,16 @@ public void testScriptsInsideAggregateFunctions_WithDateField_AndExtendedStats()\n             + \"InternalSqlScriptUtils.asDateTime(params.a0),InternalSqlScriptUtils.asDateTime(params.v0)))\\\",\\\"lang\\\":\\\"painless\\\",\"\n             + \"\\\"params\\\":{\\\"v0\\\":\\\"2020-05-03T00:00:00.000Z\\\"}},\\\"gap_policy\\\":\\\"skip\\\"}}}}}}\"));\n     }\n+\n+    public void testInOutOfRangeValues() {\n+        QlIllegalArgumentException ex = expectThrows(QlIllegalArgumentException.class,\n+            () -> optimizeAndPlan(\"SELECT int FROM test WHERE int IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\"));\n+        assertThat(ex.getMessage(), is(\"[\" + Long.MAX_VALUE + \"] out of [integer] range\"));\n+    }\n+\n+    public void testInInRangeValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mjg0MQ=="}, "originalCommit": {"oid": "573a271121a3d0a125661b1fc56b534b9915874c"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4054, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}