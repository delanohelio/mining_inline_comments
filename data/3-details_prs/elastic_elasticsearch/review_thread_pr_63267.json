{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTk0ODM1", "number": 63267, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1Nzo1N1rOEq245A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxMzowN1rOEq3Qvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc0OTQ4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1Nzo1N1rOHdTiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDowNDo0NlrOHeugNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDc4Ng==", "bodyText": "This is weird.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500490786", "createdAt": "2020-10-06T17:57:57Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MTIzOA==", "bodyText": "Agreed, updated scoping to improve the handling for this unique case.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501981238", "createdAt": "2020-10-08T20:04:46Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDc4Ng=="}, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1ODg4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDoyN1rOHdToSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1NDoxM1rOHeuJ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjM2Mg==", "bodyText": "Why does method stuff things into the write scope to just pull them out?  Maybe visitTryCatchBlock can take in a WriteScope?", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500492362", "createdAt": "2020-10-06T18:00:27Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));\n         }\n \n-        methodWriter.visitTryCatchBlock(begin, end, jump, variable.getAsmType().getInternalName());\n+        methodWriter.visitTryCatchBlock(\n+                writeScope.getTryBeginLabel(), writeScope.getTryEndLabel(), jump, variable.getAsmType().getInternalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NTU1MA==", "bodyText": "This is the actual method to write the ASM instruction for a try/catch block and requires all these labels.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501975550", "createdAt": "2020-10-08T19:54:13Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));\n         }\n \n-        methodWriter.visitTryCatchBlock(begin, end, jump, variable.getAsmType().getInternalName());\n+        methodWriter.visitTryCatchBlock(\n+                writeScope.getTryBeginLabel(), writeScope.getTryEndLabel(), jump, variable.getAsmType().getInternalName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjM2Mg=="}, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc4NDE2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowNjo1MlrOHdT3PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDowNTozMlrOHeuiEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NjE4OA==", "bodyText": "This doesn't seem relevant to this PR.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500496188", "createdAt": "2020-10-06T18:06:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -19,15 +19,85 @@\n \n package org.elasticsearch.painless.ir;\n \n-import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n public abstract class IRNode {\n \n-    /* ---- begin node data ---- */\n+    /* ---- begin decorations ---- */\n+\n+    public interface IRDecoration {\n+\n+    }\n+\n+    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MTcxMw==", "bodyText": "Yup, this is for the next PR. (Oops!) Removed.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501981713", "createdAt": "2020-10-08T20:05:32Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -19,15 +19,85 @@\n \n package org.elasticsearch.painless.ir;\n \n-import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n public abstract class IRNode {\n \n-    /* ---- begin node data ---- */\n+    /* ---- begin decorations ---- */\n+\n+    public interface IRDecoration {\n+\n+    }\n+\n+    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NjE4OA=="}, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzgwNzI0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxMjoyMFrOHdUEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDowNjoxN1rOHeujsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTU4Mg==", "bodyText": "Why?", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500499582", "createdAt": "2020-10-06T18:12:20Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1727,6 +1727,7 @@ public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n             }\n \n             InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MjEzMA==", "bodyText": "Removed. Accidental.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501982130", "createdAt": "2020-10-08T20:06:17Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1727,6 +1727,7 @@ public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n             }\n \n             InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTU4Mg=="}, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzgxMDU1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxMzowN1rOHdUGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNToxNFrOHeu1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMDA4OA==", "bodyText": "jdoc for each of these protected constructors, just a line.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500500088", "createdAt": "2020-10-06T18:13:07Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java", "diffHunk": "@@ -64,21 +66,138 @@ public int getSlot() {\n     }\n \n     protected final WriteScope parent;\n+    protected final ClassWriter classWriter;\n+    protected final MethodWriter methodWriter;\n+    protected final Label continueLabel;\n+    protected final Label breakLabel;\n+    protected final Label tryBeginLabel;\n+    protected final Label tryEndLabel;\n+    protected final Label catchesEndLabel;\n     protected final Map<String, Variable> variables = new HashMap<>();\n     protected int nextSlot;\n \n-    public WriteScope() {\n+    protected WriteScope() {\n         this.parent = null;\n+        this.classWriter = null;\n+        this.methodWriter = null;\n+        this.continueLabel = null;\n+        this.breakLabel = null;\n+        this.tryBeginLabel = null;\n+        this.tryEndLabel = null;\n+        this.catchesEndLabel = null;\n         this.nextSlot = 0;\n     }\n \n-    protected WriteScope(WriteScope parent, int nextSlot) {\n+    protected WriteScope(WriteScope parent, ClassWriter classWriter) {\n         this.parent = parent;\n-        this.nextSlot = nextSlot;\n+        this.classWriter = classWriter;\n+        this.methodWriter = parent.methodWriter;\n+        this.continueLabel = parent.continueLabel;\n+        this.breakLabel = parent.breakLabel;\n+        this.tryBeginLabel = parent.tryBeginLabel;\n+        this.tryEndLabel = parent.tryEndLabel;\n+        this.catchesEndLabel = parent.catchesEndLabel;\n+        this.nextSlot = parent.nextSlot;\n     }\n \n-    public WriteScope newScope() {\n-        return new WriteScope(this, nextSlot);\n+    protected WriteScope(WriteScope parent, MethodWriter methodWriter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjU3OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501986578", "createdAt": "2020-10-08T20:15:14Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java", "diffHunk": "@@ -64,21 +66,138 @@ public int getSlot() {\n     }\n \n     protected final WriteScope parent;\n+    protected final ClassWriter classWriter;\n+    protected final MethodWriter methodWriter;\n+    protected final Label continueLabel;\n+    protected final Label breakLabel;\n+    protected final Label tryBeginLabel;\n+    protected final Label tryEndLabel;\n+    protected final Label catchesEndLabel;\n     protected final Map<String, Variable> variables = new HashMap<>();\n     protected int nextSlot;\n \n-    public WriteScope() {\n+    protected WriteScope() {\n         this.parent = null;\n+        this.classWriter = null;\n+        this.methodWriter = null;\n+        this.continueLabel = null;\n+        this.breakLabel = null;\n+        this.tryBeginLabel = null;\n+        this.tryEndLabel = null;\n+        this.catchesEndLabel = null;\n         this.nextSlot = 0;\n     }\n \n-    protected WriteScope(WriteScope parent, int nextSlot) {\n+    protected WriteScope(WriteScope parent, ClassWriter classWriter) {\n         this.parent = parent;\n-        this.nextSlot = nextSlot;\n+        this.classWriter = classWriter;\n+        this.methodWriter = parent.methodWriter;\n+        this.continueLabel = parent.continueLabel;\n+        this.breakLabel = parent.breakLabel;\n+        this.tryBeginLabel = parent.tryBeginLabel;\n+        this.tryEndLabel = parent.tryEndLabel;\n+        this.catchesEndLabel = parent.catchesEndLabel;\n+        this.nextSlot = parent.nextSlot;\n     }\n \n-    public WriteScope newScope() {\n-        return new WriteScope(this, nextSlot);\n+    protected WriteScope(WriteScope parent, MethodWriter methodWriter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMDA4OA=="}, "originalCommit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3192, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}