{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDMyMTMy", "number": 53450, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDowOFrODn7yMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDo1N1rODn7zQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjAwNTYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDowOFrOF2OSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDowOFrOF2OSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMTYwMA==", "bodyText": "For readability can a isEmpty method be added on the CompositeAuditTrail so that this would change to compositeAuditTrail.isEmpty()?", "url": "https://github.com/elastic/elasticsearch/pull/53450#discussion_r392401600", "createdAt": "2020-03-13T18:30:08Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -19,219 +19,276 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class AuditTrailService implements AuditTrail {\n+public class AuditTrailService {\n \n+    private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n+    private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n-    private final List<AuditTrail> auditTrails;\n-\n-    @Override\n-    public String name() {\n-        return \"service\";\n-    }\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n-        this.auditTrails = Collections.unmodifiableList(auditTrails);\n+        this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n-    /** Returns the audit trail implementations that this service delegates to. */\n+    public AuditTrail get() {\n+        if (compositeAuditTrail.auditTrails.isEmpty() == false && licenseState.isAuditingAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjAwODMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDo1N1rOF2OUYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDo1N1rOF2OUYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMjAxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private List<AuditTrail> auditTrails;\n          \n          \n            \n                    private final List<AuditTrail> auditTrails;", "url": "https://github.com/elastic/elasticsearch/pull/53450#discussion_r392402016", "createdAt": "2020-03-13T18:30:57Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -19,219 +19,276 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class AuditTrailService implements AuditTrail {\n+public class AuditTrailService {\n \n+    private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n+    private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n-    private final List<AuditTrail> auditTrails;\n-\n-    @Override\n-    public String name() {\n-        return \"service\";\n-    }\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n-        this.auditTrails = Collections.unmodifiableList(auditTrails);\n+        this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n-    /** Returns the audit trail implementations that this service delegates to. */\n+    public AuditTrail get() {\n+        if (compositeAuditTrail.auditTrails.isEmpty() == false && licenseState.isAuditingAllowed()) {\n+            return compositeAuditTrail;\n+        } else {\n+            return NOOP_AUDIT_TRAIL;\n+        }\n+    }\n+\n+    // TODO: this method only exists for access to LoggingAuditTrail in a Node for testing.\n+    // DO NOT USE IT, IT WILL BE REMOVED IN THE FUTURE\n     public List<AuditTrail> getAuditTrails() {\n-        return auditTrails;\n+        return compositeAuditTrail.auditTrails;\n+    }\n+\n+    private static class NoopAuditTrail implements AuditTrail {\n+\n+        @Override\n+        public String name() {\n+            return \"noop\";\n+        }\n+\n+        @Override\n+        public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void anonymousAccessDenied(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void anonymousAccessDenied(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String realm, AuthenticationToken token,\n+                                         String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request) {}\n+\n+        @Override\n+        public void accessGranted(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                  AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                 AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, User user, String action, TransportMessage request) {}\n+\n+        @Override\n+        public void connectionGranted(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {}\n+\n+        @Override\n+        public void connectionDenied(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {}\n+\n+        @Override\n+        public void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                 AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void runAsDenied(String requestId, Authentication authentication, RestRequest request,\n+                                AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication,\n+                                             String action, String indices, String requestName, TransportAddress remoteAddress,\n+                                             AuthorizationInfo authorizationInfo) {}\n     }\n \n-    @Override\n-    public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {\n-        if (licenseState.isAuditingAllowed()) {\n+    private static class CompositeAuditTrail implements AuditTrail {\n+\n+        private List<AuditTrail> auditTrails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}