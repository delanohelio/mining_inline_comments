{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjMxODAw", "number": 54805, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1MjoxMFrODvQtag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1OTozMFrODvQ3yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgzNDM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1MjoxMFrOGBlaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowMjo0MFrOGLb-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNDY1OQ==", "bodyText": "This test does not fail if you comment out the return; in the production code above, which I would expect it to. I think we need some more thorough verification here.", "url": "https://github.com/elastic/elasticsearch/pull/54805#discussion_r404314659", "createdAt": "2020-04-06T18:52:10Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "diffHunk": "@@ -209,6 +213,64 @@ public void onFailure(Exception e) {\n         Mockito.verify(indicesClient, Mockito.only()).rolloverIndex(Mockito.any(), Mockito.any());\n     }\n \n+    public void testPerformActionWriteIndexIsFalse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b29eadf5625588a1c1daaa12c097ff8384cb02e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTkxOQ==", "bodyText": "thanks for the suggestion, adding a verify on the client mock", "url": "https://github.com/elastic/elasticsearch/pull/54805#discussion_r414645919", "createdAt": "2020-04-24T15:02:40Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "diffHunk": "@@ -209,6 +213,64 @@ public void onFailure(Exception e) {\n         Mockito.verify(indicesClient, Mockito.only()).rolloverIndex(Mockito.any(), Mockito.any());\n     }\n \n+    public void testPerformActionWriteIndexIsFalse() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNDY1OQ=="}, "originalCommit": {"oid": "6b29eadf5625588a1c1daaa12c097ff8384cb02e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODg0NDA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NDo0OVrOGBlgTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NDo0OVrOGBlgTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjIzOQ==", "bodyText": "I think this would be more readable if the object was separated out rather than having an anonymous inner class inline.  We have VerifyingClient private classes in a few test suites, might be worth using a similar approach here (assuming this test remains here rather than being folded into testEvaluateCondition as suggested above).", "url": "https://github.com/elastic/elasticsearch/pull/54805#discussion_r404316239", "createdAt": "2020-04-06T18:54:49Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "diffHunk": "@@ -209,6 +213,64 @@ public void onFailure(Exception e) {\n         Mockito.verify(indicesClient, Mockito.only()).rolloverIndex(Mockito.any(), Mockito.any());\n     }\n \n+    public void testPerformActionWriteIndexIsFalse() {\n+        String alias = randomAlphaOfLength(5);\n+        IndexMetadata indexMetadata = IndexMetadata.builder(randomAlphaOfLength(10))\n+            .putAlias(AliasMetadata.builder(alias).writeIndex(false))\n+            .settings(settings(Version.CURRENT)\n+                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias))\n+            .numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build();\n+\n+        WaitForRolloverReadyStep step = createRandomInstance();\n+        step.evaluateCondition(indexMetadata, new AsyncWaitStep.Listener() {\n+\n+            @Override\n+            public void onResponse(boolean complete, ToXContentObject infomationContext) {\n+                fail(\"expecting failure as the write index must be set to true or null\");\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                assertThat(e.getMessage(), is(String.format(Locale.ROOT, \"index [%s] is not the write index for alias [%s]\",\n+                    indexMetadata.getIndex().getName(), alias)));\n+            }\n+        }, MASTER_TIMEOUT);\n+    }\n+\n+    public void testPerformActionWriteIndexIsNullOrTrue() {\n+        String alias = randomAlphaOfLength(5);\n+        IndexMetadata indexMetadata = IndexMetadata.builder(randomAlphaOfLength(10))\n+            .putAlias(AliasMetadata.builder(alias).writeIndex(randomFrom(true, null)))\n+            .settings(settings(Version.CURRENT)\n+                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias))\n+            .numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build();\n+\n+        try (NoOpClient noOpClient = new NoOpClient(getTestName()) {\n+            @Override\n+            protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(ActionType<Response> action,\n+                                                                                                      Request request,\n+                                                                                                      ActionListener<Response> listener) {\n+                listener.onResponse((Response) new RolloverResponse(null, null, Map.of(\"condition\", true), true, true, true, true));\n+            }\n+        }) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b29eadf5625588a1c1daaa12c097ff8384cb02e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODg2MDg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1OTozMFrOGBlrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNTo0OVrOGLcHpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODk5NQ==", "bodyText": "Why not modify testEvaluateCondition to randomly set the writeIndex flag, rather than having a whole separate test case? Or even parameterizing testEvaluateCondition and running it once with each option?", "url": "https://github.com/elastic/elasticsearch/pull/54805#discussion_r404318995", "createdAt": "2020-04-06T18:59:30Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "diffHunk": "@@ -209,6 +213,64 @@ public void onFailure(Exception e) {\n         Mockito.verify(indicesClient, Mockito.only()).rolloverIndex(Mockito.any(), Mockito.any());\n     }\n \n+    public void testPerformActionWriteIndexIsFalse() {\n+        String alias = randomAlphaOfLength(5);\n+        IndexMetadata indexMetadata = IndexMetadata.builder(randomAlphaOfLength(10))\n+            .putAlias(AliasMetadata.builder(alias).writeIndex(false))\n+            .settings(settings(Version.CURRENT)\n+                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias))\n+            .numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build();\n+\n+        WaitForRolloverReadyStep step = createRandomInstance();\n+        step.evaluateCondition(indexMetadata, new AsyncWaitStep.Listener() {\n+\n+            @Override\n+            public void onResponse(boolean complete, ToXContentObject infomationContext) {\n+                fail(\"expecting failure as the write index must be set to true or null\");\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                assertThat(e.getMessage(), is(String.format(Locale.ROOT, \"index [%s] is not the write index for alias [%s]\",\n+                    indexMetadata.getIndex().getName(), alias)));\n+            }\n+        }, MASTER_TIMEOUT);\n+    }\n+\n+    public void testPerformActionWriteIndexIsNullOrTrue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b29eadf5625588a1c1daaa12c097ff8384cb02e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODIyOA==", "bodyText": "good shout! (I like to see unit tests as specification, collapse them and just by reading the test names understand what the invariants are, but in this case I think it makes sense to drop the extra test) Thanks for the suggestion", "url": "https://github.com/elastic/elasticsearch/pull/54805#discussion_r414648228", "createdAt": "2020-04-24T15:05:49Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStepTests.java", "diffHunk": "@@ -209,6 +213,64 @@ public void onFailure(Exception e) {\n         Mockito.verify(indicesClient, Mockito.only()).rolloverIndex(Mockito.any(), Mockito.any());\n     }\n \n+    public void testPerformActionWriteIndexIsFalse() {\n+        String alias = randomAlphaOfLength(5);\n+        IndexMetadata indexMetadata = IndexMetadata.builder(randomAlphaOfLength(10))\n+            .putAlias(AliasMetadata.builder(alias).writeIndex(false))\n+            .settings(settings(Version.CURRENT)\n+                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias))\n+            .numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build();\n+\n+        WaitForRolloverReadyStep step = createRandomInstance();\n+        step.evaluateCondition(indexMetadata, new AsyncWaitStep.Listener() {\n+\n+            @Override\n+            public void onResponse(boolean complete, ToXContentObject infomationContext) {\n+                fail(\"expecting failure as the write index must be set to true or null\");\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                assertThat(e.getMessage(), is(String.format(Locale.ROOT, \"index [%s] is not the write index for alias [%s]\",\n+                    indexMetadata.getIndex().getName(), alias)));\n+            }\n+        }, MASTER_TIMEOUT);\n+    }\n+\n+    public void testPerformActionWriteIndexIsNullOrTrue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODk5NQ=="}, "originalCommit": {"oid": "6b29eadf5625588a1c1daaa12c097ff8384cb02e"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1238, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}