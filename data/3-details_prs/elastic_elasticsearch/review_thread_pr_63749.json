{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MTY3NTI0", "number": 63749, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNDo1NVrOEuDNOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNTowN1rOEuDNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzIyNDkxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNDo1NVrOHiNckg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNDo1NVrOHiNckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzMzkzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    backingIndices.add(createIndexMetadata(\"not-in-order-2\", true));\n          \n          \n            \n                    backingIndices.add(createIndexMetadata(\"not-in-order-1\", true));\n          \n          \n            \n                    backingIndices.add(createIndexMetadata(DataStream.getDefaultBackingIndexName(dataStreamName, 3), true));\n          \n          \n            \n                    String[] names = new String[]{\"not-in-order-2\", \"not-in-order-1\", DataStream.getDefaultBackingIndexName(dataStreamName, 3)};\n          \n          \n            \n                    List<IndexMetadata> backingIndices = Arrays.stream(names).map(n -> createIndexMetadata(n, true)).collect(Collectors.toList());", "url": "https://github.com/elastic/elasticsearch/pull/63749#discussion_r505633938", "createdAt": "2020-10-15T15:24:55Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexTests.java", "diffHunk": "@@ -169,6 +169,34 @@ public void testResolveWithMultipleNames() {\n         validateDataStreams(dataStreams, \"logs-mysql-test\");\n     }\n \n+    public void testResolvePreservesBackingIndexOrdering() {\n+        Metadata.Builder builder = Metadata.builder();\n+        String dataStreamName = \"my-data-stream\";\n+        List<IndexMetadata> backingIndices = new ArrayList<>();\n+        backingIndices.add(createIndexMetadata(\"not-in-order-2\", true));\n+        backingIndices.add(createIndexMetadata(\"not-in-order-1\", true));\n+        backingIndices.add(createIndexMetadata(DataStream.getDefaultBackingIndexName(dataStreamName, 3), true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf078c8f9c0117b38b3d2b78dc15038cc408c07"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzIyNjAzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNTowN1rOHiNdQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyNTowN1rOHiNdQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzNDExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(dataStreams.get(0).getBackingIndices().length, equalTo(3));\n          \n          \n            \n                    assertThat(dataStreams.get(0).getBackingIndices()[0], equalTo(backingIndices.get(0).getIndex().getName()));\n          \n          \n            \n                    assertThat(dataStreams.get(0).getBackingIndices()[1], equalTo(backingIndices.get(1).getIndex().getName()));\n          \n          \n            \n                    assertThat(dataStreams.get(0).getBackingIndices()[2], equalTo(backingIndices.get(2).getIndex().getName()));\n          \n          \n            \n                    assertThat(dataStreams.get(0).getBackingIndices(), arrayContaining(names));", "url": "https://github.com/elastic/elasticsearch/pull/63749#discussion_r505634112", "createdAt": "2020-10-15T15:25:07Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexTests.java", "diffHunk": "@@ -169,6 +169,34 @@ public void testResolveWithMultipleNames() {\n         validateDataStreams(dataStreams, \"logs-mysql-test\");\n     }\n \n+    public void testResolvePreservesBackingIndexOrdering() {\n+        Metadata.Builder builder = Metadata.builder();\n+        String dataStreamName = \"my-data-stream\";\n+        List<IndexMetadata> backingIndices = new ArrayList<>();\n+        backingIndices.add(createIndexMetadata(\"not-in-order-2\", true));\n+        backingIndices.add(createIndexMetadata(\"not-in-order-1\", true));\n+        backingIndices.add(createIndexMetadata(DataStream.getDefaultBackingIndexName(dataStreamName, 3), true));\n+        for (IndexMetadata index : backingIndices) {\n+            builder.put(index, false);\n+        }\n+\n+        DataStream ds = new DataStream(dataStreamName, createTimestampField(\"@timestamp\"),\n+            backingIndices.stream().map(IndexMetadata::getIndex).collect(Collectors.toList()));\n+        builder.put(ds);\n+\n+        IndicesOptions indicesOptions = IndicesOptions.LENIENT_EXPAND_OPEN_CLOSED_HIDDEN;\n+        List<ResolvedIndex> indices = new ArrayList<>();\n+        List<ResolvedAlias> aliases = new ArrayList<>();\n+        List<ResolvedDataStream> dataStreams = new ArrayList<>();\n+        TransportAction.resolveIndices(new String[]{\"*\"}, indicesOptions, builder.build(), resolver, indices, aliases, dataStreams, true);\n+\n+        assertThat(dataStreams.size(), equalTo(1));\n+        assertThat(dataStreams.get(0).getBackingIndices().length, equalTo(3));\n+        assertThat(dataStreams.get(0).getBackingIndices()[0], equalTo(backingIndices.get(0).getIndex().getName()));\n+        assertThat(dataStreams.get(0).getBackingIndices()[1], equalTo(backingIndices.get(1).getIndex().getName()));\n+        assertThat(dataStreams.get(0).getBackingIndices()[2], equalTo(backingIndices.get(2).getIndex().getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf078c8f9c0117b38b3d2b78dc15038cc408c07"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2903, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}