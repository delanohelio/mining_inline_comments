{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjI2MTYx", "number": 65026, "reviewThreads": {"totalCount": 88, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozODo0OFrOE4iZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMzo1OVrOE7jZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzE5MjEwOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozODo0OFrOHyhVDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0NTo1OVrOH1MwRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczNjkwOQ==", "bodyText": "This needs rework; optional means can be omitted. We rarely use text in the docs.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`\n          \n          \n            \n            <3> optional string literal to indicate the percentile computation algorithm. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522736909", "createdAt": "2020-11-13T07:38:48Z", "author": {"login": "costin"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    numeric_exp[,       <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n <2> a numeric expression (must be a constant and not based on a field)\n+<3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NTU0Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525545542", "createdAt": "2020-11-17T21:45:59Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    numeric_exp[,       <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n <2> a numeric expression (must be a constant and not based on a field)\n+<3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczNjkwOQ=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzIxNDYxOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzo0MzowNVrOHyhkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTowMzoxMVrOH0Cy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc0MDc4MQ==", "bodyText": "Same as above:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`\n          \n          \n            \n            <4> optional numeric expression (can be omitted, must be a constant). For the `tdigest` method it sets the `compression` parameter, while for the `hdr` method it is used to set the `number_of_significant_value_digits` parameter. If not specified the algorithm's default parameter value will be used.\n          \n          \n            \n            <3> optional string literal indicating the algorithm used for the percentile computation. Possible values: `tdigest` or `hdr`. Default `tdigest`.\n          \n          \n            \n            <4> optional numeric literal for configuring the percentile algorithm. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522740781", "createdAt": "2020-11-13T07:43:05Z", "author": {"login": "costin"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -510,14 +514,19 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE_RANK(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    numeric_exp[,       <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n <2> a numeric expression (must be a constant and not based on a field)\n+<3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`\n+<4> optional numeric expression (can be omitted, must be a constant). For the `tdigest` method it sets the `compression` parameter, while for the `hdr` method it is used to set the `number_of_significant_value_digits` parameter. If not specified the algorithm's default parameter value will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzMzc4OQ==", "bodyText": "Thanks for the suggestions, updated. Also, strictly speaking, <4> can be an expression, does not have to be a literal. I would leave both <4> and <2> as expression, or would change both to literal. The latter seems more reasonable.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524333789", "createdAt": "2020-11-16T15:03:11Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -510,14 +514,19 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE_RANK(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    numeric_exp[,       <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n <2> a numeric expression (must be a constant and not based on a field)\n+<3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`\n+<4> optional numeric expression (can be omitted, must be a constant). For the `tdigest` method it sets the `compression` parameter, while for the `hdr` method it is used to set the `number_of_significant_value_digits` parameter. If not specified the algorithm's default parameter value will be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc0MDc4MQ=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzI0MTUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/agg.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzo0Nzo0MlrOHyh2BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzo0Nzo0MlrOHyh2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc0NTM0OA==", "bodyText": "Extra formatting makes this diff much larger than it actually is. Please revert extra formatting.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522745348", "createdAt": "2020-11-13T07:47:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/agg.csv-spec", "diffHunk": "@@ -8,61 +8,133 @@ singlePercentileWithoutComma\n SELECT gender, PERCENTILE(emp_no, 90 + 7) p1 FROM test_emp GROUP BY gender;\n \n gender:s             | p1:d\n-null                 |10019.0           \n-F                    |10099.51          \n+null                 |10019.0\n+F                    |10099.51", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzMyNjI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/PercentilesAgg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzo1OTozOVrOHyivHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyMDo1M1rOH0Gb3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc1OTk2NA==", "bodyText": "Percentiles and PercentilesRanks are coupled yet they have a different style in declaration. Looking at the code I can't remember why that is however the TODO can be important - unless you have a conclusion for it and the impact of keyed, do not remove it.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522759964", "createdAt": "2020-11-13T07:59:39Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/PercentilesAgg.java", "diffHunk": "@@ -16,21 +15,18 @@\n public class PercentilesAgg extends DefaultAggSourceLeafAgg {\n \n     private final List<Double> percents;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public PercentilesAgg(String id, AggSource source, List<Double> percents) {\n+    public PercentilesAgg(String id, AggSource source, List<Double> percents, PercentilesConfig percentilesConfig) {\n         super(id, source);\n         this.percents = percents;\n-    }\n-    \n-    @Override\n-    AggregationBuilder toBuilder() {\n-        // TODO: look at keyed\n-        PercentilesAggregationBuilder builder = (PercentilesAggregationBuilder) super.toBuilder();\n-        return builder.percentiles(percents.stream().mapToDouble(Double::doubleValue).toArray());\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     Function<String, ValuesSourceAggregationBuilder<?>> builder() {\n-        return AggregationBuilders::percentiles;\n+        return s -> AggregationBuilders.percentiles(s)\n+            .percentiles(percents.stream().mapToDouble(Double::doubleValue).toArray())\n+            .percentilesConfig(percentilesConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MzQzOQ==", "bodyText": "About the TODO: Based on commit history this TODO was last touched last time in this feature branch merge 3 years ago. Keyed refers to keyed here. I am not changing behaviour here, by default keyed: true is used both for Percentiles and PercentileRanks before and after this change. Although the TODO might be important, it is 3 years old and it does not describe how could we resolve it and I don't see why we would switch to keyed: false. I'd remove it.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524393439", "createdAt": "2020-11-16T16:20:53Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/PercentilesAgg.java", "diffHunk": "@@ -16,21 +15,18 @@\n public class PercentilesAgg extends DefaultAggSourceLeafAgg {\n \n     private final List<Double> percents;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public PercentilesAgg(String id, AggSource source, List<Double> percents) {\n+    public PercentilesAgg(String id, AggSource source, List<Double> percents, PercentilesConfig percentilesConfig) {\n         super(id, source);\n         this.percents = percents;\n-    }\n-    \n-    @Override\n-    AggregationBuilder toBuilder() {\n-        // TODO: look at keyed\n-        PercentilesAggregationBuilder builder = (PercentilesAggregationBuilder) super.toBuilder();\n-        return builder.percentiles(percents.stream().mapToDouble(Double::doubleValue).toArray());\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     Function<String, ValuesSourceAggregationBuilder<?>> builder() {\n-        return AggregationBuilders::percentiles;\n+        return s -> AggregationBuilders.percentiles(s)\n+            .percentiles(percents.stream().mapToDouble(Double::doubleValue).toArray())\n+            .percentilesConfig(percentilesConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc1OTk2NA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ2OTMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMjoyMlrOHykNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0OTo0M1rOH1M4DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDAzNg==", "bodyText": "Unless this method is used in multiple places, I would not promote it to TypeResolution.\nThe name also looks incorrect, isEnum but there's no enum in the args - if I'm guessing the intent correctly, pass an Enum along side a translating function so the object/string mapping is generalized:\n<E extends Enum<E>> isStringInEnum(Expression e, Function<Enum<E>, String> value, Enum<E> e, String operationName, ParamOrdinal paramOrd)\nThis however seems too complicated for a narrow case, just checking a string inside a list of strings is much more common but that should be reflected in the name.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522784036", "createdAt": "2020-11-13T08:22:22Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NzUzMg==", "bodyText": "Removed from TypeResolutions.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525547532", "createdAt": "2020-11-17T21:49:43Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDAzNg=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ3MzM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMzowNFrOHykPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0OTo0OVrOH1M4Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDY5Mw==", "bodyText": "Yet again an issue with formatting - please fix it.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522784693", "createdAt": "2020-11-13T08:23:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {\n+        TypeResolution resolution = isFoldable(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        resolution = isString(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        String value = (String)e.fold();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NzU5MA==", "bodyText": "Thanks. Reimported formatting options from buildSrc.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525547590", "createdAt": "2020-11-17T21:49:49Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {\n+        TypeResolution resolution = isFoldable(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        resolution = isString(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        String value = (String)e.fold();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDY5Mw=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ4NjU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNTowNlrOHykYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1MDoyNVrOH1M5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NjkxNg==", "bodyText": "The initial order is more readable - start with OptionalArgument, second TwoOptionalArguments", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522786916", "createdAt": "2020-11-13T08:25:06Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -420,16 +420,23 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n     public static <T extends Function> FunctionDefinition def(Class<T> function,\n             FourParametersFunctionBuilder<T> ctorRef, String... names) {\n         FunctionBuilder builder = (source, children, distinct, cfg) -> {\n-            boolean hasMinimumThree = OptionalArgument.class.isAssignableFrom(function);\n-            if (hasMinimumThree && (children.size() > 4 || children.size() < 3)) {\n-                throw new QlIllegalArgumentException(\"expects three or four arguments\");\n-            } else if (!hasMinimumThree && children.size() != 4) {\n+            if (TwoOptionalArguments.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 2) {\n+                    throw new QlIllegalArgumentException(\"expects minimum two, maximum four arguments\");\n+                }\n+            } else if (OptionalArgument.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 3) {\n+                    throw new QlIllegalArgumentException(\"expects three or four arguments\");\n+                }\n+            } else if (children.size() != 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NzkzOQ==", "bodyText": "\ud83d\udc4d  flipped.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525547939", "createdAt": "2020-11-17T21:50:25Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -420,16 +420,23 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n     public static <T extends Function> FunctionDefinition def(Class<T> function,\n             FourParametersFunctionBuilder<T> ctorRef, String... names) {\n         FunctionBuilder builder = (source, children, distinct, cfg) -> {\n-            boolean hasMinimumThree = OptionalArgument.class.isAssignableFrom(function);\n-            if (hasMinimumThree && (children.size() > 4 || children.size() < 3)) {\n-                throw new QlIllegalArgumentException(\"expects three or four arguments\");\n-            } else if (!hasMinimumThree && children.size() != 4) {\n+            if (TwoOptionalArguments.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 2) {\n+                    throw new QlIllegalArgumentException(\"expects minimum two, maximum four arguments\");\n+                }\n+            } else if (OptionalArgument.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 3) {\n+                    throw new QlIllegalArgumentException(\"expects three or four arguments\");\n+                }\n+            } else if (children.size() != 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NjkxNg=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ5MzQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNjowOVrOHykdRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNjowOVrOHykdRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4ODE2Nw==", "bodyText": "Extract the children extraction the ifs above - it's easier to understand what branch did what.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522788167", "createdAt": "2020-11-13T08:26:09Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -420,16 +420,23 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n     public static <T extends Function> FunctionDefinition def(Class<T> function,\n             FourParametersFunctionBuilder<T> ctorRef, String... names) {\n         FunctionBuilder builder = (source, children, distinct, cfg) -> {\n-            boolean hasMinimumThree = OptionalArgument.class.isAssignableFrom(function);\n-            if (hasMinimumThree && (children.size() > 4 || children.size() < 3)) {\n-                throw new QlIllegalArgumentException(\"expects three or four arguments\");\n-            } else if (!hasMinimumThree && children.size() != 4) {\n+            if (TwoOptionalArguments.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 2) {\n+                    throw new QlIllegalArgumentException(\"expects minimum two, maximum four arguments\");\n+                }\n+            } else if (OptionalArgument.class.isAssignableFrom(function)) {\n+                if (children.size() > 4 || children.size() < 3) {\n+                    throw new QlIllegalArgumentException(\"expects three or four arguments\");\n+                }\n+            } else if (children.size() != 4) {\n                 throw new QlIllegalArgumentException(\"expects exactly four arguments\");\n             }\n             if (distinct) {\n                 throw new QlIllegalArgumentException(\"does not support DISTINCT yet it was specified\");\n             }\n-            return ctorRef.build(source, children.get(0), children.get(1), children.get(2), children.size() == 4 ? children.get(3) : null);\n+            return ctorRef.build(source, children.get(0), children.get(1),\n+                children.size() > 2 ? children.get(2) : null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ5ODY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/Functions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNjo1N1rOHykgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzozNFrOH1NIYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4OTA3MA==", "bodyText": "This method is not tied to functions, has a clunky name and bad names - countOf -> return shift?.\nPlease remove it.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522789070", "createdAt": "2020-11-13T08:26:57Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/Functions.java", "diffHunk": "@@ -18,4 +18,12 @@ public static boolean isAggregate(Expression e) {\n     public static boolean isGrouping(Expression e) {\n         return e instanceof GroupingFunction;\n     }\n-}\n\\ No newline at end of file\n+\n+    public static int countOfNonNullOptionalArgs(Object... args) {\n+        int shift = 0;\n+        for (Object a : args) {\n+            shift += a == null ? 0 : 1;\n+        }\n+        return shift;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTcxNQ==", "bodyText": "Removed.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525551715", "createdAt": "2020-11-17T21:57:34Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/Functions.java", "diffHunk": "@@ -18,4 +18,12 @@ public static boolean isAggregate(Expression e) {\n     public static boolean isGrouping(Expression e) {\n         return e instanceof GroupingFunction;\n     }\n-}\n\\ No newline at end of file\n+\n+    public static int countOfNonNullOptionalArgs(Object... args) {\n+        int shift = 0;\n+        for (Object a : args) {\n+            shift += a == null ? 0 : 1;\n+        }\n+        return shift;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4OTA3MA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzUxNzM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyOTozOFrOHyktWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNToyOFrOH1NYWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MjI4MA==", "bodyText": "Instead of an in-line stream creation/filtering/collection inside a super invocation (a no-no), extract this into a static utility method.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522792280", "createdAt": "2020-11-13T08:29:38Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -16,31 +17,44 @@\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.ql.expression.function.Functions.countOfNonNullOptionalArgs;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethod;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethodParameter;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.resolvePercentileConfiguration;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Stream.of(percent, (method = defaultMethod(source, method)),\n+            (methodParameter = defaultMethodParameter(methodParameter))).filter(Objects::nonNull).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTgwMw==", "bodyText": "After making the method and methodParameter a property only, this change is not required.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525555803", "createdAt": "2020-11-17T22:05:28Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -16,31 +17,44 @@\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.ql.expression.function.Functions.countOfNonNullOptionalArgs;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethod;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethodParameter;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.resolvePercentileConfiguration;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Stream.of(percent, (method = defaultMethod(source, method)),\n+            (methodParameter = defaultMethodParameter(methodParameter))).filter(Objects::nonNull).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MjI4MA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzUyMjIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozMDoyMVrOHykwng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNToxOFrOH1NYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MzExOA==", "bodyText": "This should be static check not a dynamic one.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522793118", "createdAt": "2020-11-13T08:30:21Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -16,31 +17,44 @@\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.ql.expression.function.Functions.countOfNonNullOptionalArgs;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethod;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethodParameter;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.resolvePercentileConfiguration;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Stream.of(percent, (method = defaultMethod(source, method)),\n+            (methodParameter = defaultMethodParameter(methodParameter))).filter(Objects::nonNull).collect(Collectors.toList()));\n         this.percent = percent;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method, methodParameter);\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (children().size() != newChildren.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTcyMQ==", "bodyText": "After I moved the method and methodParameter to properties only, this code change is not required.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525555721", "createdAt": "2020-11-17T22:05:18Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -16,31 +17,44 @@\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.ql.expression.function.Functions.countOfNonNullOptionalArgs;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethod;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethodParameter;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.resolvePercentileConfiguration;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Stream.of(percent, (method = defaultMethod(source, method)),\n+            (methodParameter = defaultMethodParameter(methodParameter))).filter(Objects::nonNull).collect(Collectors.toList()));\n         this.percent = percent;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method, methodParameter);\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (children().size() != newChildren.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MzExOA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzUzNTUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozMjozMVrOHyk5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo0NToxNVrOH0HjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NTQ0NA==", "bodyText": "Why is there a need for isEnum if the methodParam is checked again to be folded and then checked against the enum values itself?\nFurther more the point of type resolution is to not throw exceptions but return error messages.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522795444", "createdAt": "2020-11-13T08:32:31Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxMTcyMw==", "bodyText": "Will simplify this part.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524411723", "createdAt": "2020-11-16T16:45:15Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NTQ0NA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU0OTM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozNDo0M1rOHylCbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNDoyOVrOH1NWCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NzY3OQ==", "bodyText": "This class needs rework - it's hard to understand its purpose and style. The code both goes multiple checks and does either enum to string or directly on string validation.\nThere should be only one way and if there's a dedicated class, make that customized for the enum it tries to handle.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522797679", "createdAt": "2020-11-13T08:34:43Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTIxMQ==", "bodyText": "Agreed, dissolved this class and tried to simplify the code.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525555211", "createdAt": "2020-11-17T22:04:29Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NzY3OQ=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU1MDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozNTowOFrOHylDUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozNTowOFrOHylDUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NzkwNA==", "bodyText": "Two methods doing similar checks for null and folding.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522797904", "createdAt": "2020-11-13T08:35:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return (T) null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    private static Expression nullIfUnspecified(Expression e) {\n+        return e == null || (e.foldable() && e.fold() == null) ? null : e;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU3ODY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0MzoyOFrOHylUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjozMjo0M1rOH1ONEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMjIyOA==", "bodyText": "arguments -> args", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522802228", "createdAt": "2020-11-13T08:43:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1008,37 +1008,34 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentiles extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(Percentile per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n-            // percentile per field/expression\n-            Map<Expression, Set<Expression>> percentsPerField = new LinkedHashMap<>();\n+            // percentile per (field/expression, method, methodparameters)\n+            Map<List<Expression>, Set<Expression>> percentsPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof Percentile) {\n                     Percentile per = (Percentile) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentsPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentsPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.percent());\n+                    percentsPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.percent());\n                 }\n             });\n \n-            Map<Expression, Percentiles> percentilesPerField = new LinkedHashMap<>();\n-            // create a Percentile agg for each field (and its associated percents)\n-            percentsPerField.forEach((k, v) -> {\n-                percentilesPerField.put(k, new Percentiles(v.iterator().next().source(), k, new ArrayList<>(v)));\n-            });\n+            // create a Percentile agg for each argument combination\n+            Map<List<Expression>, Percentiles> percentilesPerArgs = new LinkedHashMap<>();\n+            percentsPerArgs.forEach((arguments, percents) -> percentilesPerArgs.put(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2OTI5OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525569299", "createdAt": "2020-11-17T22:32:43Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1008,37 +1008,34 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentiles extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(Percentile per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n-            // percentile per field/expression\n-            Map<Expression, Set<Expression>> percentsPerField = new LinkedHashMap<>();\n+            // percentile per (field/expression, method, methodparameters)\n+            Map<List<Expression>, Set<Expression>> percentsPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof Percentile) {\n                     Percentile per = (Percentile) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentsPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentsPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.percent());\n+                    percentsPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.percent());\n                 }\n             });\n \n-            Map<Expression, Percentiles> percentilesPerField = new LinkedHashMap<>();\n-            // create a Percentile agg for each field (and its associated percents)\n-            percentsPerField.forEach((k, v) -> {\n-                percentilesPerField.put(k, new Percentiles(v.iterator().next().source(), k, new ArrayList<>(v)));\n-            });\n+            // create a Percentile agg for each argument combination\n+            Map<List<Expression>, Percentiles> percentilesPerArgs = new LinkedHashMap<>();\n+            percentsPerArgs.forEach((arguments, percents) -> percentilesPerArgs.put(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMjIyOA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU4NTAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NDozOFrOHylYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjozMzoyN1rOH1OOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMzIzMA==", "bodyText": "Readjust the comments.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522803230", "createdAt": "2020-11-13T08:44:38Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1049,37 +1046,33 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentileRanks extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(PercentileRank per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n             // percentile per field/expression\n-            final Map<Expression, Set<Expression>> percentPerField = new LinkedHashMap<>();\n+            final Map<List<Expression>, Set<Expression>> valuesPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof PercentileRank) {\n                     PercentileRank per = (PercentileRank) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.value());\n+                    valuesPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.value());\n                 }\n             });\n \n-            Map<Expression, PercentileRanks> ranksPerField = new LinkedHashMap<>();\n-            // create a PercentileRanks agg for each field (and its associated values)\n-            percentPerField.forEach((k, v) -> {\n-                ranksPerField.put(k, new PercentileRanks(v.iterator().next().source(), k, new ArrayList<>(v)));\n-            });\n+            Map<List<Expression>, PercentileRanks> ranksPerArgs = new LinkedHashMap<>();\n+            valuesPerArgs.forEach((arguments, values) -> ranksPerArgs.put(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2OTU5OQ==", "bodyText": "Reorganized the code a bit, after that removed the comments that seemed redundant.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525569599", "createdAt": "2020-11-17T22:33:27Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1049,37 +1046,33 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentileRanks extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(PercentileRank per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n             // percentile per field/expression\n-            final Map<Expression, Set<Expression>> percentPerField = new LinkedHashMap<>();\n+            final Map<List<Expression>, Set<Expression>> valuesPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof PercentileRank) {\n                     PercentileRank per = (PercentileRank) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.value());\n+                    valuesPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.value());\n                 }\n             });\n \n-            Map<Expression, PercentileRanks> ranksPerField = new LinkedHashMap<>();\n-            // create a PercentileRanks agg for each field (and its associated values)\n-            percentPerField.forEach((k, v) -> {\n-                ranksPerField.put(k, new PercentileRanks(v.iterator().next().source(), k, new ArrayList<>(v)));\n-            });\n+            Map<List<Expression>, PercentileRanks> ranksPerArgs = new LinkedHashMap<>();\n+            valuesPerArgs.forEach((arguments, values) -> ranksPerArgs.put(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMzIzMA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU4NTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NDo0N1rOHylYiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NDo0N1rOHylYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMzMzNw==", "bodyText": "arguments -> args", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522803337", "createdAt": "2020-11-13T08:44:47Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1049,37 +1046,33 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentileRanks extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(PercentileRank per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n             // percentile per field/expression\n-            final Map<Expression, Set<Expression>> percentPerField = new LinkedHashMap<>();\n+            final Map<List<Expression>, Set<Expression>> valuesPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof PercentileRank) {\n                     PercentileRank per = (PercentileRank) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.value());\n+                    valuesPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.value());\n                 }\n             });\n \n-            Map<Expression, PercentileRanks> ranksPerField = new LinkedHashMap<>();\n-            // create a PercentileRanks agg for each field (and its associated values)\n-            percentPerField.forEach((k, v) -> {\n-                ranksPerField.put(k, new PercentileRanks(v.iterator().next().source(), k, new ArrayList<>(v)));\n-            });\n+            Map<List<Expression>, PercentileRanks> ranksPerArgs = new LinkedHashMap<>();\n+            valuesPerArgs.forEach((arguments, values) -> ranksPerArgs.put(\n+                arguments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU4NzA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NTowMFrOHylZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NTowMFrOHylZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMzUyOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522803529", "createdAt": "2020-11-13T08:45:00Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1049,37 +1046,33 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentileRanks extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(PercentileRank per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n             // percentile per field/expression\n-            final Map<Expression, Set<Expression>> percentPerField = new LinkedHashMap<>();\n+            final Map<List<Expression>, Set<Expression>> valuesPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof PercentileRank) {\n                     PercentileRank per = (PercentileRank) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.value());\n+                    valuesPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU4ODIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NToxMFrOHylaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0NToxMFrOHylaCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMzcyMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r522803722", "createdAt": "2020-11-13T08:45:10Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1008,37 +1008,34 @@ public LogicalPlan apply(LogicalPlan p) {\n \n     static class ReplaceAggsWithPercentiles extends OptimizerBasicRule {\n \n+        private List<Expression> keyOf(Percentile per) {\n+            return Arrays.asList(per.field(), per.method(), per.methodParameter());\n+        }\n+\n         @Override\n         public LogicalPlan apply(LogicalPlan p) {\n-            // percentile per field/expression\n-            Map<Expression, Set<Expression>> percentsPerField = new LinkedHashMap<>();\n+            // percentile per (field/expression, method, methodparameters)\n+            Map<List<Expression>, Set<Expression>> percentsPerArgs = new LinkedHashMap<>();\n \n             // count gather the percents for each field\n             p.forEachExpressionsUp(e -> {\n                 if (e instanceof Percentile) {\n                     Percentile per = (Percentile) e;\n-                    Expression field = per.field();\n-                    Set<Expression> percentiles = percentsPerField.get(field);\n-\n-                    if (percentiles == null) {\n-                        percentiles = new LinkedHashSet<>();\n-                        percentsPerField.put(field, percentiles);\n-                    }\n-\n-                    percentiles.add(per.percent());\n+                    percentsPerArgs.computeIfAbsent(keyOf(per), k -> new LinkedHashSet<>()).add(per.percent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE3OTAxOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozNDozOFrOHz-73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozNDozOFrOHz-73g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MDU1OA==", "bodyText": "I would add links to the aggregation documentation where tdigest and hdr are documented. Same goes for percentile_rank function.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524270558", "createdAt": "2020-11-16T13:34:38Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    numeric_exp[,       <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n <2> a numeric expression (must be a constant and not based on a field)\n+<3> optional text expression (can be omitted, must be a constant). Possible values if specified: `tdigest` or `hdr`, representing the algorithm used for the percentile calculation. Default: `tdigest`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzE4NDgxOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzozNjoxNFrOHz-_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0NTo0MFrOH1MvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MTQ4Ng==", "bodyText": "I would add two examples that use tdigest and hdr explicitly.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524271486", "createdAt": "2020-11-16T13:36:14Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NTM4OQ==", "bodyText": "Thanks, added.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525545389", "createdAt": "2020-11-17T21:45:40Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MTQ4Ng=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzQ2NTczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozODoyOFrOH0BpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMzo0NFrOH1NUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxNDk0MA==", "bodyText": "You could place this method in Percentile class and then re-use it in other places as well.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524314940", "createdAt": "2020-11-16T14:38:28Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDgxMA==", "bodyText": "Removed, not needed anymore.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525554810", "createdAt": "2020-11-17T22:03:44Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxNDk0MA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzUwNDc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo0NjozMlrOH0CBUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMTo0NlrOH1NQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyMTEwNw==", "bodyText": "(thinking out loud here) Isn't there a difference between a foldable-to-null expression and a null expression in this context? Meaning, a null parameter for a function that has that parameter optional is different than the expression being there, being foldable and being folded to null.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524321107", "createdAt": "2020-11-16T14:46:32Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return (T) null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    private static Expression nullIfUnspecified(Expression e) {\n+        return e == null || (e.foldable() && e.fold() == null) ? null : e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Mzg4OQ==", "bodyText": "There is a difference, but see the tests, I don't want to differentiate between specifying NULL for the methodParameter or not specifying the methodParameter at all. Nonetheless, removed this method with the latest change.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525553889", "createdAt": "2020-11-17T22:01:46Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return (T) null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    private static Expression nullIfUnspecified(Expression e) {\n+        return e == null || (e.foldable() && e.fold() == null) ? null : e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyMTEwNw=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzUxNDI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo0ODoyNVrOH0CHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo0ODoyNVrOH0CHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyMjU3MQ==", "bodyText": "If this method is really needed, it should belong to Expressions class.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524322571", "createdAt": "2020-11-16T14:48:25Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return (T) null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    private static Expression nullIfUnspecified(Expression e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzU0NTYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1NDo0MlrOH0CZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMzoxOFrOH1NTuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzMzMQ==", "bodyText": "After this line you could break.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524327331", "createdAt": "2020-11-16T14:54:42Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDYxOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525554619", "createdAt": "2020-11-17T22:03:18Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzMzMQ=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcyMjUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMTo1MVrOH0EGtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMzoyNlrOH1NT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTI1Mg==", "bodyText": "I think here you need to not throw an exception, but create a TypeResolution to express the inconsistency.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524355252", "createdAt": "2020-11-16T15:31:51Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDY3OQ==", "bodyText": "Removed this one.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525554679", "createdAt": "2020-11-17T22:03:26Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTI1Mg=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcyNDg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMjoxNlrOH0EICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowMjo1NFrOH1NTEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTU5NA==", "bodyText": "Here the same. About TypeResolution instead of Exception.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524355594", "createdAt": "2020-11-16T15:32:16Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDQ0OA==", "bodyText": "Moved this method elsewhere and converted to IllegalStateException (can only happen if the code does not handle all the possible PercentileMethods).", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525554448", "createdAt": "2020-11-17T22:02:54Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileMethodConfiguration.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isEnum;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+\n+public abstract class PercentileMethodConfiguration {\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    public static Expression defaultMethod(Source source, Expression method) {\n+        return method == null\n+            ? new Literal(source, PercentilesMethod.TDIGEST.getParseField().getPreferredName(), DataTypes.KEYWORD)\n+            : method;\n+    }\n+\n+    public static Expression defaultMethodParameter(Expression methodParameter) {\n+        return nullIfUnspecified(methodParameter);\n+    }\n+\n+    public static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        Expression.TypeResolution resolution = isEnum(method, sourceText, methodOrdinal, ACCEPTED_METHODS);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (methodParameter != null) {\n+            resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+            switch (percentilesMethod) {\n+                case TDIGEST:\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                case HDR:\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                    break;\n+                default:\n+                    throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");\n+            }\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+        }\n+        return resolution;\n+    }\n+\n+    private static PercentilesMethod asPercentilesMethod(Expression method) {\n+        PercentilesMethod percentilesMethod = null;\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new QlIllegalArgumentException(\"specified method [ \" + methodName + \" ] is not one of the allowed methods \"\n+                + Arrays.toString(PercentilesMethod.values()));\n+        }\n+        return percentilesMethod;\n+    }\n+\n+    public static PercentilesConfig asPercentileConfig(Expression method, Expression methodParameter) {\n+        PercentilesMethod percentilesMethod = asPercentilesMethod(method);\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new QlIllegalArgumentException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTU5NA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4MjU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0MzozN1rOH0Eq7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1MDowOVrOH1M5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NDUyNA==", "bodyText": "The error message is a bit messed up. This is how it looks with actual values in it: third argument of [PERCENTILE(int, 50, null)] must be a string, one of [tdigest, hdr], received [null]. How about third argument of [PERCENTILE(int, 50, null)] must be one of [tdigest, hdr], received [null]? To me it seems more clear and concise.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524364524", "createdAt": "2020-11-16T15:43:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {\n+        TypeResolution resolution = isFoldable(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        resolution = isString(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        String value = (String)e.fold();\n+        if (acceptedValues.contains(value) == false) {\n+            return new TypeResolution(format(null, \"{}argument of [{}] must be a string, one of {}, received [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0Nzc3Nw==", "bodyText": "Thanks for the suggestion, updated the error message.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525547777", "createdAt": "2020-11-17T21:50:09Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/TypeResolutions.java", "diffHunk": "@@ -45,6 +46,29 @@ public static TypeResolution isIP(Expression e, String operationName, ParamOrdin\n         return isType(e, dt -> dt == IP, operationName, paramOrd, \"ip\");\n     }\n \n+    public static TypeResolution isEnum(Expression e, String operationName, ParamOrdinal paramOrd, Set<String> acceptedValues) {\n+        TypeResolution resolution = isFoldable(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        resolution = isString(e, operationName, paramOrd);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        String value = (String)e.fold();\n+        if (acceptedValues.contains(value) == false) {\n+            return new TypeResolution(format(null, \"{}argument of [{}] must be a string, one of {}, received [{}]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NDUyNA=="}, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODAxNzkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjozMToxN1rOH0G5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjozMToxN1rOH0G5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwMTA2NA==", "bodyText": "Callout: I have switched the parent class, so the part of Percentile and PercentileRank is the same. Any reason not to?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r524401064", "createdAt": "2020-11-16T16:31:17Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -8,40 +8,52 @@\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n-import org.elasticsearch.xpack.ql.expression.function.aggregate.AggregateFunction;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.ql.expression.function.Functions.countOfNonNullOptionalArgs;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethod;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.defaultMethodParameter;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileMethodConfiguration.resolvePercentileConfiguration;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a39395f8ef683770e7834a1cbbae6470f2e5f2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzQ5Mjc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyNTozNFrOH1kdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyNTozNFrOH1kdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMzk0NQ==", "bodyText": "seems superfluous.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525933945", "createdAt": "2020-11-18T09:25:34Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -72,4 +103,74 @@ public String innerName() {\n         Double value = (Double) SqlDataTypeConverter.convert(Foldables.valueOf(percent), DataTypes.DOUBLE);\n         return Double.toString(value);\n     }\n+\n+    private static final Set<String> ACCEPTED_METHODS =\n+        Arrays.stream(PercentilesMethod.values()).map(pm -> pm.getParseField().getPreferredName()).collect(Collectors.toSet());\n+\n+    static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            if (ACCEPTED_METHODS.contains(methodName) == false) {\n+                return new Expression.TypeResolution(format(\n+                    null,\n+                    \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \",\n+                    sourceText,\n+                    Stream.of(PercentilesMethod.values()).map(p -> p.getParseField().getPreferredName()).collect(Collectors.toList()),\n+                    methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                if (PercentilesMethod.TDIGEST.getParseField().getPreferredName().equals(methodName)) {\n+                    resolution = isNumeric(methodParameter, sourceText, methodParameterOrdinal);\n+                } else if (PercentilesMethod.HDR.getParseField().getPreferredName().equals(methodName)) {\n+                    resolution = isInteger(methodParameter, sourceText, methodParameterOrdinal);\n+                } else {\n+                    throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+                }\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzUwOTg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/PercentileRanksAgg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyOTozN1rOH1koFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyOTozN1rOH1koFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzNjY2MQ==", "bodyText": "superfluous?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525936661", "createdAt": "2020-11-18T09:29:37Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/PercentileRanksAgg.java", "diffHunk": "@@ -5,24 +5,30 @@\n  */\n package org.elasticsearch.xpack.sql.querydsl.agg;\n \n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n \n import java.util.List;\n import java.util.function.Function;\n \n-import static org.elasticsearch.search.aggregations.AggregationBuilders.percentileRanks;\n-\n public class PercentileRanksAgg extends DefaultAggSourceLeafAgg {\n \n     private final List<Double> values;\n+    private final PercentilesConfig percentilesConfig;\n+\n+    public static PercentilesConfig DEFAULT_PERCENTILES_CONFIG =\n+        AggregationBuilders.percentileRanks(\"not_important\", new double[1]).percentilesConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzUyNTExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTozMzoxOFrOH1kxmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTozMzoxOFrOH1kxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzOTA5Ng==", "bodyText": "not sure if this had been the target of a previous comment, but I would myself deduplicate the tests that only differ in the name of the function (like this and testPercentileRankNullOrUnspecifiedMethodOrDefaultMethodParameterIsTheSame or testPercentileOptimization and testPercentileRankOptimization) with a simple two steps loop.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525939096", "createdAt": "2020-11-18T09:33:18Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2338,4 +2345,138 @@ public void testInInRangeValues() {\n         PhysicalPlan p = testContext.optimizeAndPlan(\"SELECT long FROM test WHERE long IN (1, 2, 3, \" + Long.MAX_VALUE + \", 5, 6, 7)\");\n         assertEquals(EsQueryExec.class, p.getClass());\n     }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> List<T> metricAggsByField(Supplier<PhysicalPlan> physicalPlanSupplier, int fieldCount) {\n+        PhysicalPlan p = physicalPlanSupplier.get();\n+        assertEquals(EsQueryExec.class, p.getClass());\n+        EsQueryExec ee = (EsQueryExec) p;\n+        AggregationBuilder aggregationBuilder = ee.queryContainer().aggs().asAggBuilder();\n+        assertEquals(fieldCount, ee.output().size());\n+        assertEquals(ReferenceAttribute.class, ee.output().get(0).getClass());\n+        assertEquals(fieldCount, ee.queryContainer().fields().size());\n+        assertThat(fieldCount, greaterThanOrEqualTo(ee.queryContainer().aggs().asAggBuilder().getSubAggregations().size()));\n+        Map<String, AggregationBuilder> aggsByName =\n+            aggregationBuilder.getSubAggregations().stream().collect(Collectors.toMap(AggregationBuilder::getName, ab -> ab));\n+        return IntStream.range(0, fieldCount).mapToObj(i -> {\n+            String percentileAggName = ((MetricAggRef) ee.queryContainer().fields().get(i).v1()).name();\n+            return (T) aggsByName.get(percentileAggName);\n+        }).collect(Collectors.toList());\n+    }\n+\n+    public void testPercentileNullOrUnspecifiedMethodOrDefaultMethodParameterIsTheSame() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Nzg5MzA2OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1OToxNlrOH1oRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1ODoxOVrOH2FwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NjM0OQ==", "bodyText": "There is a slight difference between a \"numeric expression\" that's \"not based on a field\" and a \"numeric literal\". Meaning, 1+2/5 vs. 123. I would keep the description for this argument as it was before. You don't seem to have changed it to a literal and the tests still pass (PERCENTILE(emp_no, 90 + 7) for example) so I don't see a justification for changing the argument description.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r525996349", "createdAt": "2020-11-18T10:59:16Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQzMQ==", "bodyText": "I'll change <2> back to \"numeric expression\", but the same stands for the <4>, that can also be an expression, does not have to be a literal (although most probably users will simply pass in a literal only).", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526479431", "createdAt": "2020-11-18T22:58:19Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NjM0OQ=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE3MDg0OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxMjowNFrOH1q4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowMjozMVrOH2F22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzOTE4Nw==", "bodyText": "Based on the same idea as the second argument (not being a literal only), here I would not use \"numeric literal\".", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526039187", "createdAt": "2020-11-18T12:12:04Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n+<4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MTExNA==", "bodyText": "Same as above, technically <3> and <4> can be expressions too.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526481114", "createdAt": "2020-11-18T23:02:31Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n+<4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzOTE4Nw=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODk3Nzg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxNTo0OVrOH1yrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxNTo0OVrOH1yrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2Njg5Nw==", "bodyText": "Would different parameters results slightly better results (as in less digits)?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526166897", "createdAt": "2020-11-18T15:15:49Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -1511,6 +1511,26 @@ null           |6249.916666666667\n // end::aggPercentileScalars\n ;\n \n+aggPercentileWithPercentileConfig\n+// tag::aggPercentileWithPercentileConfig\n+SELECT\n+    languages,\n+    PERCENTILE(salary, 95, 'tdigest', 100.0) AS \"95th_TDigest\",\n+    PERCENTILE(salary, 95, 'hdr', 3) AS \"95th_HDR\"\n+FROM emp\n+GROUP BY languages;\n+\n+   languages   |   95th_TDigest  |     95th_HDR\n+---------------+-----------------+-----------------\n+null           |74999.0          |74992.0\n+1              |72790.5          |70000.0\n+2              |71924.70000000001|69936.0\n+3              |73638.25         |71152.0\n+4              |72115.59999999999|68464.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODk4Njk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxNzozNVrOH1yxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxNzozNVrOH1yxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODMzOA==", "bodyText": "Same here - wrap the results with a ROUND or potentially use different args to have only 3 decimals vs 14.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526168338", "createdAt": "2020-11-18T15:17:35Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -1542,6 +1562,26 @@ null           |66.91240875912409\n // end::aggPercentileRankScalars\n ;\n \n+aggPercentileRankWithPercentileConfig\n+// tag::aggPercentileRankWithPercentileConfig\n+SELECT\n+    languages,\n+    PERCENTILE_RANK(salary, 65000, 'tdigest', 100.0) AS \"rank_TDigest\",\n+    PERCENTILE_RANK(salary, 65000, 'hdr', 3) AS \"rank_HDR\"\n+FROM emp\n+GROUP BY languages;\n+\n+   languages   |   rank_TDigest  |     rank_HDR\n+---------------+-----------------+-----------------\n+null           |73.65766569962062|80.0\n+1              |73.7291625157734 |73.33333333333333\n+2              |88.88005607010643|89.47368421052632\n+3              |79.43662623295829|76.47058823529412\n+4              |85.70446389643493|83.33333333333333\n+5              |100.0            |95.23809523809524", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODk4OTcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxODoxMlrOH1yzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxODoxMlrOH1yzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODgzOA==", "bodyText": "Keep the static import.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526168838", "createdAt": "2020-11-18T15:18:12Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -5,42 +5,58 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(percent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODk5MjMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentileConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxODo0NVrOH1y0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo0ODozNlrOH2Ffuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTI1OQ==", "bodyText": "Since it returns a PercentilesConfig object why not call the method percentilesConfig() for consistency?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526169259", "createdAt": "2020-11-18T15:18:45Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentileConfig.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+public interface HasPercentileConfig {\n+\n+    Expression method();\n+\n+    Expression methodParameter();\n+\n+    default PercentilesConfig percentileConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NTE5NQ==", "bodyText": "Typo, fixed.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526475195", "createdAt": "2020-11-18T22:48:36Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentileConfig.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+public interface HasPercentileConfig {\n+\n+    Expression method();\n+\n+    Expression methodParameter();\n+\n+    default PercentilesConfig percentileConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTI1OQ=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTAwMDE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMDoxM1rOH1y5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMDoxM1rOH1y5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MDQ1Nw==", "bodyText": "The code style is making use of import static and only when there is an ambiguity, use the class name as well.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526170457", "createdAt": "2020-11-18T15:20:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -5,42 +5,58 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(percent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTAyMTk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyNDozMVrOH1zHVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo0OTo1OFrOH2FiUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NDAzNg==", "bodyText": "I'm not following.  Why this change?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526174036", "createdAt": "2020-11-18T15:24:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -5,42 +5,58 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(percent));\n         this.percent = percent;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method, methodParameter);\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n+        if (children().size() != 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NTg1OA==", "bodyText": "\ud83d\udc4d  good catch", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526475858", "createdAt": "2020-11-18T22:49:58Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -5,42 +5,58 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import static java.util.Collections.singletonList;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression percent;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(percent));\n         this.percent = percent;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method, methodParameter);\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n+        if (children().size() != 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NDAzNg=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA0MjExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyODozMlrOH1zUDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyODozMlrOH1zUDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NzI5Mg==", "bodyText": "Same here about import static vs. using the class name as well.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526177292", "createdAt": "2020-11-18T15:28:32Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -8,40 +8,45 @@\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n-import org.elasticsearch.xpack.ql.expression.function.aggregate.AggregateFunction;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.Percentile.resolvePercentileConfiguration;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression value;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRank(Source source, Expression field, Expression value) {\n-        super(source, field, singletonList(value));\n+    public PercentileRank(Source source, Expression field, Expression value, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA3MTE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozNDoxM1rOH1zlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNTozNFrOH2F7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4MTgzNQ==", "bodyText": "Shouldn't the list of new children be checked against a certain size?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526181835", "createdAt": "2020-11-18T15:34:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -8,40 +8,45 @@\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n-import org.elasticsearch.xpack.ql.expression.function.aggregate.AggregateFunction;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.Percentile.resolvePercentileConfiguration;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression value;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRank(Source source, Expression field, Expression value) {\n-        super(source, field, singletonList(value));\n+    public PercentileRank(Source source, Expression field, Expression value, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(value));\n         this.value = value;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRank> info() {\n-        return NodeInfo.create(this, PercentileRank::new, field(), value);\n+        return NodeInfo.create(this, PercentileRank::new, field(), value, method, methodParameter);\n     }\n \n     @Override\n     public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (children().size() < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjMxNA==", "bodyText": "\ud83d\udc4d  yes, good catch", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526482314", "createdAt": "2020-11-18T23:05:34Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -8,40 +8,45 @@\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n import org.elasticsearch.xpack.ql.expression.Foldables;\n-import org.elasticsearch.xpack.ql.expression.function.aggregate.AggregateFunction;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n \n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n-import static java.util.Collections.singletonList;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n+import static org.elasticsearch.xpack.sql.expression.function.aggregate.Percentile.resolvePercentileConfiguration;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments, HasPercentileConfig {\n \n     private final Expression value;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRank(Source source, Expression field, Expression value) {\n-        super(source, field, singletonList(value));\n+    public PercentileRank(Source source, Expression field, Expression value, Expression method, Expression methodParameter) {\n+        super(source, field, Collections.singletonList(value));\n         this.value = value;\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRank> info() {\n-        return NodeInfo.create(this, PercentileRank::new, field(), value);\n+        return NodeInfo.create(this, PercentileRank::new, field(), value, method, methodParameter);\n     }\n \n     @Override\n     public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (children().size() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4MTgzNQ=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA5NDQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozODo0MVrOH1zz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozODo0MVrOH1zz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NTQ2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == o) return true;\n          \n          \n            \n                    if (o == null || getClass() != o.getClass()) return false;\n          \n          \n            \n                    if (!super.equals(o)) return false;\n          \n          \n            \n                    if (this == o) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (o == null || getClass() != o.getClass()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (super.equals(o) == false) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526185469", "createdAt": "2020-11-18T15:38:41Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -64,13 +74,35 @@ public Expression value() {\n     }\n \n     @Override\n-    public DataType dataType() {\n-        return DataTypes.DOUBLE;\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n     }\n \n     @Override\n     public String innerName() {\n         Double doubleValue = (Double) SqlDataTypeConverter.convert(Foldables.valueOf(value), DataTypes.DOUBLE);\n         return Double.toString(doubleValue);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA5Nzg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozOToxOFrOH1z2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozOToxOFrOH1z2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NTk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.hash(getClass(), children(), method, methodParameter);\n          \n          \n            \n                    return Objects.hash(super.hashCode(), method, methodParameter);", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526185987", "createdAt": "2020-11-18T15:39:18Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -64,13 +74,35 @@ public Expression value() {\n     }\n \n     @Override\n-    public DataType dataType() {\n-        return DataTypes.DOUBLE;\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n     }\n \n     @Override\n     public String innerName() {\n         Double doubleValue = (Double) SqlDataTypeConverter.convert(Foldables.valueOf(value), DataTypes.DOUBLE);\n         return Double.toString(doubleValue);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PercentileRank that = (PercentileRank) o;\n+\n+        return Objects.equals(method, that.method)\n+            && Objects.equals(methodParameter, that.methodParameter);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getClass(), children(), method, methodParameter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTEwMjIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDowM1rOH1z4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDowM1rOH1z4rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NjY2OQ==", "bodyText": "Put these two after values initialization (same order as they are in the constructor declaration).", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526186669", "createdAt": "2020-11-18T15:40:03Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -10,30 +10,63 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class PercentileRanks extends CompoundNumericAggregate {\n+public class PercentileRanks extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> values;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, Expression method, Expression methodParameter) {\n         super(source, field, values);\n+        this.method = method;\n+        this.methodParameter = methodParameter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTEwNTc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDo0NFrOH1z63Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDo0NFrOH1z63Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NzIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == o) return true;\n          \n          \n            \n                    if (o == null || getClass() != o.getClass()) return false;\n          \n          \n            \n                    if (!super.equals(o)) return false;\n          \n          \n            \n                    if (this == o) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (o == null || getClass() != o.getClass()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (super.equals(o) == false) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526187229", "createdAt": "2020-11-18T15:40:44Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -10,30 +10,63 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class PercentileRanks extends CompoundNumericAggregate {\n+public class PercentileRanks extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> values;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, Expression method, Expression methodParameter) {\n         super(source, field, values);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n         this.values = values;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRanks> info() {\n-        return NodeInfo.create(this, PercentileRanks::new, field(), values);\n+        return NodeInfo.create(this, PercentileRanks::new, field(), values, method, methodParameter);\n     }\n \n     @Override\n     public PercentileRanks replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n             throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), method, methodParameter);\n     }\n \n     public List<Expression> values() {\n         return values;\n     }\n+\n+    @Override\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTEwNzc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MTowOFrOH1z8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MTowOFrOH1z8KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NzU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.hash(getClass(), children(), method, methodParameter);\n          \n          \n            \n                    return Objects.hash(super.hashCode(), method, methodParameter);", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526187561", "createdAt": "2020-11-18T15:41:08Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -10,30 +10,63 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class PercentileRanks extends CompoundNumericAggregate {\n+public class PercentileRanks extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> values;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, Expression method, Expression methodParameter) {\n         super(source, field, values);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n         this.values = values;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRanks> info() {\n-        return NodeInfo.create(this, PercentileRanks::new, field(), values);\n+        return NodeInfo.create(this, PercentileRanks::new, field(), values, method, methodParameter);\n     }\n \n     @Override\n     public PercentileRanks replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n             throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), method, methodParameter);\n     }\n \n     public List<Expression> values() {\n         return values;\n     }\n+\n+    @Override\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        PercentileRanks that = (PercentileRanks) o;\n+\n+        return Objects.equals(method, that.method)\n+            && Objects.equals(methodParameter, that.methodParameter);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getClass(), children(), method, methodParameter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTEwOTg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MTozNFrOH1z9iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MTozNFrOH1z9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NzkxMg==", "bodyText": "Keep percents initialization before method and methodParameter.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526187912", "createdAt": "2020-11-18T15:41:34Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "diffHunk": "@@ -10,30 +10,62 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class Percentiles extends CompoundNumericAggregate {\n+public class Percentiles extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> percents;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentiles(Source source, Expression field, List<Expression> percents) {\n+    public Percentiles(Source source, Expression field, List<Expression> percents, Expression method, Expression methodParameter) {\n         super(source, field, percents);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n         this.percents = percents;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTExMzY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MjoxNVrOH1z_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MjoxNVrOH1z_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4ODUxMA==", "bodyText": "Same change here as with the other suggestions.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526188510", "createdAt": "2020-11-18T15:42:15Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "diffHunk": "@@ -10,30 +10,62 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class Percentiles extends CompoundNumericAggregate {\n+public class Percentiles extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> percents;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentiles(Source source, Expression field, List<Expression> percents) {\n+    public Percentiles(Source source, Expression field, List<Expression> percents, Expression method, Expression methodParameter) {\n         super(source, field, percents);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n         this.percents = percents;\n     }\n \n     @Override\n     protected NodeInfo<Percentiles> info() {\n-        return NodeInfo.create(this, Percentiles::new, field(), percents);\n+        return NodeInfo.create(this, Percentiles::new, field(), percents, method, methodParameter);\n     }\n \n     @Override\n     public Percentiles replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n-            throw new IllegalArgumentException(\"expected more than one child but received [\" + newChildren.size() + \"]\");\n+            throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), method, methodParameter);\n     }\n \n     public List<Expression> percents() {\n         return percents;\n     }\n+\n+    @Override\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTExNDM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MjoyMlrOH10ASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MjoyMlrOH10ASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4ODYxNw==", "bodyText": "Same change here as with the other suggestions.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526188617", "createdAt": "2020-11-18T15:42:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "diffHunk": "@@ -10,30 +10,62 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n-public class Percentiles extends CompoundNumericAggregate {\n+public class Percentiles extends CompoundNumericAggregate implements HasPercentileConfig {\n \n     private final List<Expression> percents;\n+    private final Expression method;\n+    private final Expression methodParameter;\n \n-    public Percentiles(Source source, Expression field, List<Expression> percents) {\n+    public Percentiles(Source source, Expression field, List<Expression> percents, Expression method, Expression methodParameter) {\n         super(source, field, percents);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n         this.percents = percents;\n     }\n \n     @Override\n     protected NodeInfo<Percentiles> info() {\n-        return NodeInfo.create(this, Percentiles::new, field(), percents);\n+        return NodeInfo.create(this, Percentiles::new, field(), percents, method, methodParameter);\n     }\n \n     @Override\n     public Percentiles replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n-            throw new IllegalArgumentException(\"expected more than one child but received [\" + newChildren.size() + \"]\");\n+            throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), method, methodParameter);\n     }\n \n     public List<Expression> percents() {\n         return percents;\n     }\n+\n+    @Override\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    @Override\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        Percentiles that = (Percentiles) o;\n+\n+        return Objects.equals(method, that.method)\n+            && Objects.equals(methodParameter, that.methodParameter);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getClass(), children(), method, methodParameter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTE5NTQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo1NzozNVrOH100Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo1NzozNVrOH100Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwMTg5MQ==", "bodyText": "I'm wondering (not strictly related to this private class) if Percentile and PercentileRank could have a common base class that abstract away most of the common code in these two classes...", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526201891", "createdAt": "2020-11-18T15:57:35Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1006,39 +1008,68 @@ public LogicalPlan apply(LogicalPlan p) {\n         }\n     }\n \n+    private static class PercentileArgumentCombination {\n+        final Expression field;\n+        final PercentilesConfig config;\n+        final Expression method;\n+        final Expression methodParameter;\n+\n+        PercentileArgumentCombination(Percentile per) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQ1MTMwOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDozNjoyN1rOH2BJyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDozNjoyN1rOH2BJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNDA0Mw==", "bodyText": "Current copy is fine as is, but this is a little more clear.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n          \n          \n            \n            <3> optional string literal for the\n          \n          \n            \n            <<search-aggregations-metrics-percentile-aggregation-approximation,percentile\n          \n          \n            \n            algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526404043", "createdAt": "2020-11-18T20:36:27Z", "author": {"login": "jrodewig"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQ1NzM0OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDozODoxNlrOH2BNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1NDo1MVrOH2FqZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNTAwNQ==", "bodyText": "Based on Andrei's comment, integer may be a good replacement for numeric literal? I'd also streamline the wording slightly and remove the repeated link.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.\n          \n          \n            \n            <4> optional integer that configures the percentile algorithm. Configures\n          \n          \n            \n            `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`.\n          \n          \n            \n            Uses the same defaults as the\n          \n          \n            \n            <<search-aggregations-metrics-percentile-aggregation,percentiles aggregation>>.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526405005", "createdAt": "2020-11-18T20:38:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n+<4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NzkyNg==", "bodyText": "I'll leave it as literal, because tdigest allows double, while hdr only allows integer (code checks for the type required, so users cannot pass in double for hdr). I'll make the other changes.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526477926", "createdAt": "2020-11-18T22:54:51Z", "author": {"login": "palesz"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -477,14 +477,18 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n [source, sql]\n --------------------------------------------------\n PERCENTILE(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    percentile[,        <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n+<4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNTAwNQ=="}, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQ1ODcxOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDozODozOVrOH2BOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDozODozOVrOH2BOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNTIwMA==", "bodyText": "Same as above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n          \n          \n            \n            <3> optional string literal for the\n          \n          \n            \n            <<search-aggregations-metrics-percentile-aggregation-approximation,percentile\n          \n          \n            \n            algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526405200", "createdAt": "2020-11-18T20:38:39Z", "author": {"login": "jrodewig"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -503,21 +507,31 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentile]\n include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileScalars]\n --------------------------------------------------\n \n+[\"source\",\"sql\",subs=\"attributes,macros\"]\n+--------------------------------------------------\n+include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileWithPercentileConfig]\n+--------------------------------------------------\n+\n [[sql-functions-aggs-percentile-rank]]\n ==== `PERCENTILE_RANK`\n \n .Synopsis:\n [source, sql]\n --------------------------------------------------\n PERCENTILE_RANK(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    value[,             <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQ2NDYzOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/aggs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDo0MDowOVrOH2BR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDo0MDowOVrOH2BR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNjEwMQ==", "bodyText": "Same as above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.\n          \n          \n            \n            <4> optional integer that configures the percentile algorithm. Configures\n          \n          \n            \n            `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`.\n          \n          \n            \n            Uses the same defaults as the\n          \n          \n            \n            <<search-aggregations-metrics-percentile-aggregation,percentiles aggregation>>.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526406101", "createdAt": "2020-11-18T20:40:09Z", "author": {"login": "jrodewig"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -503,21 +507,31 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentile]\n include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileScalars]\n --------------------------------------------------\n \n+[\"source\",\"sql\",subs=\"attributes,macros\"]\n+--------------------------------------------------\n+include-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileWithPercentileConfig]\n+--------------------------------------------------\n+\n [[sql-functions-aggs-percentile-rank]]\n ==== `PERCENTILE_RANK`\n \n .Synopsis:\n [source, sql]\n --------------------------------------------------\n PERCENTILE_RANK(\n-    field_name,  <1>\n-    numeric_exp) <2>\n+    field_name,         <1>\n+    value[,             <2>\n+    method[,            <3>\n+    method_parameter]]) <4>\n --------------------------------------------------\n \n *Input*:\n \n <1> a numeric field\n-<2> a numeric expression (must be a constant and not based on a field)\n+<2> a numeric literal\n+<3> optional string literal to indicate the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n+<4> optional numeric literal for configuring the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c0a68a07d34a37e4b1928e1d9197e92aa0770c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY1MTI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowNDo0OFrOH2Vfyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowNDo0OFrOH2Vfyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNzM1NQ==", "bodyText": "Function.identity()", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526737355", "createdAt": "2020-11-19T10:04:48Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY2NzE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowOTowNVrOH2VpkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowOTowNVrOH2VpkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczOTg1Nw==", "bodyText": "Expressions.ParamOrdinal -> ParamOrdinal and import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526739857", "createdAt": "2020-11-19T10:09:05Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY2ODk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowOToyNlrOH2VqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowOToyNlrOH2VqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0MDEwMQ==", "bodyText": "import org.elasticsearch.xpack.ql.expression.Expression; and use TypeResolution.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526740101", "createdAt": "2020-11-19T10:09:26Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY3MTQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDowMFrOH2Vr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDowMFrOH2Vr8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0MDQ2NQ==", "bodyText": ".size() + 1", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526740465", "createdAt": "2020-11-19T10:10:00Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY3MjMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDoxMVrOH2VsdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDoxMVrOH2VsdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0MDU5Ng==", "bodyText": "size() + 2", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526740596", "createdAt": "2020-11-19T10:10:11Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc1MTg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoyOTozOFrOH2WdiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoyOTozOFrOH2WdiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1MzE2MQ==", "bodyText": "The phrasing is probably a mix of leftover from a first version and the final one... ...that can we are capable...", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526753161", "createdAt": "2020-11-19T10:29:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc3MTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDoxOVrOH2WpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDoxOVrOH2WpFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NjExNg==", "bodyText": "I think mehtodParameterOrdinal needs to be the second argument for format? methodName needs to be the first and sourceText the last one?\nSomething like the [future_compression_method_name] method can only be used with the default parameters, please omit the fourth argument of PERCENTILE(x, 50, future..., blabla).", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526756116", "createdAt": "2020-11-19T10:34:19Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc3ODQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNTo1MFrOH2WtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNTo1MFrOH2WtFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NzE0MA==", "bodyText": "Again, remove Expression.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526757140", "createdAt": "2020-11-19T10:35:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc4MTk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNjo0NFrOH2WvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1MzozMFrOH2iYig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NzY3OA==", "bodyText": "I like this idea. Not sure how frequently they will add new methods, but I think it's a safety net that's worth adding.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526757678", "createdAt": "2020-11-19T10:36:44Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk0ODQ5MA==", "bodyText": "Sadly, I have to remove it. Looking at it more we cannot future proof automagically. The asPercentilesConfig won't be able to translate the enum to a PercentilesConfig class anyways (we will hit the default case that will result in IllegalArgumentException). The best I can do is to add a unit test whether all the methods are handled, but server team might not be happy about that.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526948490", "createdAt": "2020-11-19T14:53:30Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NzY3OA=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc4Mzg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNzowOVrOH2WwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNzowOVrOH2WwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1Nzk2NA==", "bodyText": "I think this can be private.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526757964", "createdAt": "2020-11-19T10:37:09Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc5MzA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozOToyNFrOH2W1qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozOToyNFrOH2W1qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTMzOA==", "bodyText": "I would define a static final DEFAULT_METHOD (or whatever name we choose) and use that here (and if it's used in other places, there as well) for code-visibility purposes. The constants at the top of the class definition just have a greater visibility than looking throughout the code for how to set the default.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526759338", "createdAt": "2020-11-19T10:39:24Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjgyNDczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo0Njo1OFrOH2XI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowNDozN1rOH2aP0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NDI0Mg==", "bodyText": "If the class is not an interface anymore but the base for Percentile and PercentileRank, its name is not that great anymore. How about PercentileNumericAggregate?\nWe'd have Percentile/PercentileRank -> PercentileNumericAggregate -> NumericAggregate -> AggregateFunction ->...", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526764242", "createdAt": "2020-11-19T10:46:58Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxNTE4Nw==", "bodyText": "\ud83d\udc4d  Or just PercentileAggregate. The class should be protected, same as the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526815187", "createdAt": "2020-11-19T12:04:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NDI0Mg=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjgyNjgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo0NzoyM1rOH2XKAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo0NzoyM1rOH2XKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2NDU0NA==", "bodyText": "Remove these two empty lines.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526764544", "createdAt": "2020-11-19T10:47:23Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -72,4 +71,6 @@ public String innerName() {\n         Double value = (Double) SqlDataTypeConverter.convert(Foldables.valueOf(percent), DataTypes.DOUBLE);\n         return Double.toString(value);\n     }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg0MjU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1MDo1NlrOH2XTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1OToxNFrOH2irYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2Njg4NA==", "bodyText": "Why is < 2 here and != 2 for Percentile?\nIf both should have an identic behavior and the above difference is just an overlook when it comes to replaceChildren I think you can move this method to HasPercentilesConfig.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526766884", "createdAt": "2020-11-19T10:50:56Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -22,26 +19,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends HasPercentilesConfig {\n \n     private final Expression value;\n \n-    public PercentileRank(Source source, Expression field, Expression value) {\n-        super(source, field, singletonList(value));\n+    public PercentileRank(Source source, Expression field, Expression value, Expression method, Expression methodParameter) {\n+        super(source, field, singletonList(value), method, methodParameter);\n         this.value = value;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRank> info() {\n-        return NodeInfo.create(this, PercentileRank::new, field(), value);\n+        return NodeInfo.create(this, PercentileRank::new, field(), value, method(), methodParameter());\n     }\n \n     @Override\n     public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (newChildren.size() < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MzMxMg==", "bodyText": "I will keep this check in the Percentile and PercentileRank classes. The HasPercentilesConfig class does not have explicit static (rather only dynamic) knowledge about the children count of the child classes. Right now it just happens to be that only Percentile and PercentileRank are the child classes, each with two children.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526953312", "createdAt": "2020-11-19T14:59:14Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -22,26 +19,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends HasPercentilesConfig {\n \n     private final Expression value;\n \n-    public PercentileRank(Source source, Expression field, Expression value) {\n-        super(source, field, singletonList(value));\n+    public PercentileRank(Source source, Expression field, Expression value, Expression method, Expression methodParameter) {\n+        super(source, field, singletonList(value), method, methodParameter);\n         this.value = value;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRank> info() {\n-        return NodeInfo.create(this, PercentileRank::new, field(), value);\n+        return NodeInfo.create(this, PercentileRank::new, field(), value, method(), methodParameter());\n     }\n \n     @Override\n     public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        if (newChildren.size() < 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2Njg4NA=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg1MzcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1Mzo1MFrOH2XaJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1Mzo1MFrOH2XaJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2ODY3Ng==", "bodyText": "The dataType() method of this class returns DOUBLE but so it does dataType() from NumericAggregate. Can you check if both Percentile and PercentileRank don't need to override dataType()?", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526768676", "createdAt": "2020-11-19T10:53:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -21,26 +20,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends HasPercentilesConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg2MDMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NToxOFrOH2XeCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NToxOFrOH2XeCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2OTY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PercentileRanks that = (PercentileRanks) o;\n          \n          \n            \n            \n          \n          \n            \n                    return Objects.equals(percentilesConfig, that.percentilesConfig);\n          \n          \n            \n                    return Objects.equals(percentilesConfig, ((PercentileRanks) o).percentilesConfig);", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526769675", "createdAt": "2020-11-19T10:55:18Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -5,35 +5,66 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class PercentileRanks extends CompoundNumericAggregate {\n \n     private final List<Expression> values;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, PercentilesConfig percentilesConfig) {\n         super(source, field, values);\n         this.values = values;\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRanks> info() {\n-        return NodeInfo.create(this, PercentileRanks::new, field(), values);\n+        return NodeInfo.create(this, PercentileRanks::new, field(), values, percentilesConfig);\n     }\n \n     @Override\n     public PercentileRanks replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n             throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), percentilesConfig);\n     }\n \n     public List<Expression> values() {\n         return values;\n     }\n+    \n+    public PercentilesConfig percentilesConfig() {\n+        return percentilesConfig;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+\n+        PercentileRanks that = (PercentileRanks) o;\n+\n+        return Objects.equals(percentilesConfig, that.percentilesConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg2MjY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NTo1MlrOH2Xfkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NTo1MlrOH2Xfkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MDA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Percentiles that = (Percentiles) o;\n          \n          \n            \n            \n          \n          \n            \n                    return Objects.equals(percentilesConfig, that.percentilesConfig);\n          \n          \n            \n                    return Objects.equals(percentilesConfig, ((Percentiles) o).percentilesConfig);", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526770066", "createdAt": "2020-11-19T10:55:52Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentiles.java", "diffHunk": "@@ -5,35 +5,65 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class Percentiles extends CompoundNumericAggregate {\n \n     private final List<Expression> percents;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public Percentiles(Source source, Expression field, List<Expression> percents) {\n+    public Percentiles(Source source, Expression field, List<Expression> percents, PercentilesConfig percentilesConfig) {\n         super(source, field, percents);\n         this.percents = percents;\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     protected NodeInfo<Percentiles> info() {\n-        return NodeInfo.create(this, Percentiles::new, field(), percents);\n+        return NodeInfo.create(this, Percentiles::new, field(), percents, percentilesConfig);\n     }\n \n     @Override\n     public Percentiles replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n-            throw new IllegalArgumentException(\"expected more than one child but received [\" + newChildren.size() + \"]\");\n+            throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new Percentiles(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), percentilesConfig);\n     }\n \n     public List<Expression> percents() {\n         return percents;\n     }\n+    \n+    public PercentilesConfig percentilesConfig() {\n+        return percentilesConfig;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+\n+        Percentiles that = (Percentiles) o;\n+\n+        return Objects.equals(percentilesConfig, that.percentilesConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzE0NDMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowMzozNVrOH2aNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowMzozNVrOH2aNYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxNDU2MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526814560", "createdAt": "2020-11-19T12:03:35Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -1511,6 +1511,26 @@ null           |6249.916666666667\n // end::aggPercentileScalars\n ;\n \n+aggPercentileWithPercentileConfig\n+// tag::aggPercentileWithPercentileConfig\n+SELECT\n+    languages, \n+    PERCENTILE(salary, 97.3, 'tdigest', 100.0) AS \"97.3_TDigest\", \n+    PERCENTILE(salary, 97.3, 'hdr', 3) AS \"97.3_HDR\" \n+FROM emp \n+GROUP BY languages;\n+\n+   languages   | 97.3_TDigest  |   97.3_HDR    \n+---------------+---------------+---------------\n+null           |74999.0        |74992.0        \n+1              |73717.0        |73712.0        \n+2              |73530.238      |69936.0        \n+3              |74970.0        |74992.0        \n+4              |74572.0        |74608.0        \n+5              |66117.118      |56368.0        \n+// end::aggPercentileWithPercentileConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzE2MTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowNjo1NFrOH2aYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowNjo1NFrOH2aYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxNzM3Mg==", "bodyText": "hashcode before equals", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526817372", "createdAt": "2020-11-19T12:06:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();\n+        }\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+        PercentilesMethod percentilesMethod = null;\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+                break;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new IllegalStateException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"], type resolution needs fix\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+\n+        HasPercentilesConfig that = (HasPercentilesConfig) o;\n+\n+        return Objects.equals(method, that.method)\n+            && Objects.equals(methodParameter, that.methodParameter);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), method, methodParameter);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzE2ODYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowNzo1MFrOH2adFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjowNzo1MFrOH2adFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxODU4MA==", "bodyText": "Map.of will create issues when backporting to 7.11", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526818580", "createdAt": "2020-11-19T12:07:50Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzIyODc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoxNjoyMlrOH2bF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzowMFrOH2nLAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgyOTAyNA==", "bodyText": "There's no value in making this method static - in fact it hurts. The method/params should be taken from the enclosing class simplifying the signature.\nThe NAME_TO_METHOD (has little meaning to say ENUM_RESOLUTION) can contain Function<Enum,TypeResolution> and the declaration can just pick up the arguments from the enclosing context inside the lambda.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526829024", "createdAt": "2020-11-19T12:16:22Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNjk0NA==", "bodyText": "Inlined the static method.\nAbout NAME_TO_METHOD: Lambda can only pick up the fields method and methodParameter if the NAME_TO_METHOD is not static, otherwise the it has no access to the instance fields. Making it non-static on the other hand feels a bit wasteful.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527026944", "createdAt": "2020-11-19T16:33:00Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgyOTAyNA=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI0NjM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMTowNFrOH2bQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowMToxOVrOH2lt5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMTcxNg==", "bodyText": "If super.equals is called, no need to call == or do the getClass() comparison since the super does it already.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526831716", "createdAt": "2020-11-19T12:21:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();\n+        }\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+        PercentilesMethod percentilesMethod = null;\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+                break;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new IllegalStateException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"], type resolution needs fix\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMzExMQ==", "bodyText": "True. Removed. On the same note: Function.equals() seems copy of Node.equals(), I will remove that in a cleanup PR separately.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527003111", "createdAt": "2020-11-19T16:01:19Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();\n+        }\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+        PercentilesMethod percentilesMethod = null;\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+                break;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new IllegalStateException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"], type resolution needs fix\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMTcxNg=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI0OTg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMjowNFrOH2bSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowMjo1NFrOH2lyuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMjI3OA==", "bodyText": "I believe this method is the same for Percentile/PercentileRanks so it can be extracted into the parent.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526832278", "createdAt": "2020-11-19T12:22:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -21,26 +20,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends HasPercentilesConfig {\n \n     private final Expression percent;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, singletonList(percent), method, methodParameter);\n         this.percent = percent;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method(), methodParameter());\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() != 2) {\n             throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new Percentile(source(), newChildren.get(0), newChildren.get(1));\n+        return new Percentile(source(), newChildren.get(0), newChildren.get(1), method(), methodParameter());\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNDM0NA==", "bodyText": "See #65026 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527004344", "createdAt": "2020-11-19T16:02:54Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -21,26 +20,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends HasPercentilesConfig {\n \n     private final Expression percent;\n \n-    public Percentile(Source source, Expression field, Expression percent) {\n-        super(source, field, singletonList(percent));\n+    public Percentile(Source source, Expression field, Expression percent, Expression method, Expression methodParameter) {\n+        super(source, field, singletonList(percent), method, methodParameter);\n         this.percent = percent;\n     }\n \n     @Override\n     protected NodeInfo<Percentile> info() {\n-        return NodeInfo.create(this, Percentile::new, field(), percent);\n+        return NodeInfo.create(this, Percentile::new, field(), percent, method(), methodParameter());\n     }\n \n     @Override\n     public Percentile replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() != 2) {\n             throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new Percentile(source(), newChildren.get(0), newChildren.get(1));\n+        return new Percentile(source(), newChildren.get(0), newChildren.get(1), method(), methodParameter());\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMjI3OA=="}, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI1MTM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMjoyNlrOH2bThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMjoyNlrOH2bThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMjUxNw==", "bodyText": "again, hashcode before equals", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526832517", "createdAt": "2020-11-19T12:22:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -5,35 +5,66 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class PercentileRanks extends CompoundNumericAggregate {\n \n     private final List<Expression> values;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, PercentilesConfig percentilesConfig) {\n         super(source, field, values);\n         this.values = values;\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRanks> info() {\n-        return NodeInfo.create(this, PercentileRanks::new, field(), values);\n+        return NodeInfo.create(this, PercentileRanks::new, field(), values, percentilesConfig);\n     }\n \n     @Override\n     public PercentileRanks replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n             throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), percentilesConfig);\n     }\n \n     public List<Expression> values() {\n         return values;\n     }\n+    \n+    public PercentilesConfig percentilesConfig() {\n+        return percentilesConfig;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+\n+        PercentileRanks that = (PercentileRanks) o;\n+\n+        return Objects.equals(percentilesConfig, that.percentilesConfig);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), percentilesConfig);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI1MzM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMzowMFrOH2bUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyMzowMFrOH2bUyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMjg0MA==", "bodyText": "by calling super, the getClass() and == check are redundant.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526832840", "createdAt": "2020-11-19T12:23:00Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -5,35 +5,66 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class PercentileRanks extends CompoundNumericAggregate {\n \n     private final List<Expression> values;\n+    private final PercentilesConfig percentilesConfig;\n \n-    public PercentileRanks(Source source, Expression field, List<Expression> values) {\n+    public PercentileRanks(Source source, Expression field, List<Expression> values, PercentilesConfig percentilesConfig) {\n         super(source, field, values);\n         this.values = values;\n+        this.percentilesConfig = percentilesConfig;\n     }\n \n     @Override\n     protected NodeInfo<PercentileRanks> info() {\n-        return NodeInfo.create(this, PercentileRanks::new, field(), values);\n+        return NodeInfo.create(this, PercentileRanks::new, field(), values, percentilesConfig);\n     }\n \n     @Override\n     public PercentileRanks replaceChildren(List<Expression> newChildren) {\n         if (newChildren.size() < 2) {\n             throw new IllegalArgumentException(\"expected at least [2] children but received [\" + newChildren.size() + \"]\");\n         }\n-        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()));\n+        return new PercentileRanks(source(), newChildren.get(0), newChildren.subList(1, newChildren.size()), percentilesConfig);\n     }\n \n     public List<Expression> values() {\n         return values;\n     }\n+    \n+    public PercentilesConfig percentilesConfig() {\n+        return percentilesConfig;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI2MjI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyNToyOFrOH2baZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyNToyOFrOH2baZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNDI3OQ==", "bodyText": "Percentile is already an agg making PercentileAgg redundant - just call the tuple PercentileKey.\nAlso the methods should be all private/protected where possible.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526834279", "createdAt": "2020-11-19T12:25:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1006,39 +1009,46 @@ public LogicalPlan apply(LogicalPlan p) {\n         }\n     }\n \n+    private static class PercentileAggKey extends Tuple<Expression, PercentilesConfig> {\n+        PercentileAggKey(HasPercentilesConfig per) {\n+            super(per.field(), per.percentilesConfig());\n+        }\n+        \n+        public Expression field() {\n+            return v1();\n+        }\n+        \n+        public PercentilesConfig percentilesConfig() {\n+            return v2();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI4MDcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozMDoxM1rOH2blVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozMDoxM1rOH2blVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNzA3OQ==", "bodyText": "return e == null ?  null : SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526837079", "createdAt": "2020-11-19T12:30:13Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();\n+        }\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+        PercentilesMethod percentilesMethod = null;\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+                break;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new IllegalStateException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"], type resolution needs fix\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {\n+        if (e == null) {\n+            return null;\n+        }\n+        return (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzI4NDM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozMTowM1rOH2bnog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozMTowM1rOH2bnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNzY2Ng==", "bodyText": "The name is misleading since nullable means something else. rename to foldNullSafe", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r526837666", "createdAt": "2020-11-19T12:31:03Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/HasPercentilesConfig.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+public abstract class HasPercentilesConfig extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    // extensive list of all the possible PercentilesMethods (all can be used with default method parameters)\n+    private static final Map<String, PercentilesMethod> NAME_TO_METHOD = stream(PercentilesMethod.values()).collect(toMap(\n+        pm -> pm.getParseField().getPreferredName(),\n+        pm -> pm\n+    ));\n+\n+    // list of all the possible PercentileMethods that can we are capable of parameterizing as of now\n+    private static final Map<PercentilesMethod, MethodParameterResolver> METHOD_TO_RESOLVER = Map.of(\n+        PercentilesMethod.TDIGEST, TypeResolutions::isNumeric,\n+        PercentilesMethod.HDR, TypeResolutions::isInteger\n+    );\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    public HasPercentilesConfig(Source source, Expression field, List<Expression> parameters, \n+        Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        return resolvePercentileConfiguration(sourceText(), method, Expressions.ParamOrdinal.fromIndex(parameters().size()+1), \n+            methodParameter, Expressions.ParamOrdinal.fromIndex(parameters().size()+2));\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        return asPercentilesConfig(method, methodParameter);\n+    }\n+\n+    @FunctionalInterface\n+    interface MethodParameterResolver {\n+        Expression.TypeResolution resolve(Expression methodParameter, String sourceText, Expressions.ParamOrdinal methodParameterOrdinal);\n+    }\n+\n+    private static Expression.TypeResolution resolvePercentileConfiguration(\n+        String sourceText, Expression method, Expressions.ParamOrdinal methodOrdinal,\n+        Expression methodParameter, Expressions.ParamOrdinal methodParameterOrdinal) {\n+\n+        if (method != null) {\n+            Expression.TypeResolution resolution = isFoldable(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText, methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            PercentilesMethod percentilesMethod = NAME_TO_METHOD.get(methodName);\n+            if (percentilesMethod == null) {\n+                return new Expression.TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText, NAME_TO_METHOD.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText, methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                MethodParameterResolver resolver = METHOD_TO_RESOLVER.get(percentilesMethod);\n+                if (resolver == null) {\n+                    // so in the future if a new method is added, at least the users will be able to use it with \n+                    // the default parameters, but won't be able to configure it until the resolver is added\n+                    return new Expression.TypeResolution(format(null,\n+                        \"the [{}] method can only be used with the default method parameters, please omit the {} argument of [{}]\",\n+                        methodParameterOrdinal.name().toLowerCase(Locale.ROOT), sourceText, methodName));\n+                }\n+                resolution = resolver.resolve(methodParameter, sourceText, methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return Expression.TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    private static PercentilesConfig asPercentilesConfig(Expression method, Expression methodParameter) {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return new PercentilesConfig.TDigest();\n+        }\n+        String methodName = foldOptionalNullable(method, DataTypes.KEYWORD);\n+        PercentilesMethod percentilesMethod = null;\n+        for (PercentilesMethod m : PercentilesMethod.values()) {\n+            if (m.getParseField().getPreferredName().equals(methodName)) {\n+                percentilesMethod = m;\n+                break;\n+            }\n+        }\n+        if (percentilesMethod == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        switch (percentilesMethod) {\n+            case TDIGEST:\n+                Double compression = foldOptionalNullable(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            case HDR:\n+                Integer numOfDigits = foldOptionalNullable(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            default:\n+                throw new IllegalStateException(\"Not handled PercentilesMethod [\" + percentilesMethod + \"], type resolution needs fix\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldOptionalNullable(Expression e, DataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964ed9a5c250e461a1d09c7551dcc77a71aba639"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODc1MjAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo0ODozN1rOH3QVkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo0ODozN1rOH3QVkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwMTM5NA==", "bodyText": "This field as well as resolveType and innerName() are similar across Percentile and PercentileRank - they should be moved to PercentileAggregate, the subclasses acting really as a marker and implementing percent()/value() as an alias to the internal field.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527701394", "createdAt": "2020-11-20T13:48:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java", "diffHunk": "@@ -21,26 +19,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class Percentile extends NumericAggregate implements EnclosedAgg {\n+public class Percentile extends PercentileAggregate {\n \n     private final Expression percent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODc1MzQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo0ODo1NFrOH3QWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo0ODo1NFrOH3QWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwMTYwOQ==", "bodyText": "See my comments in Percentile", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527701609", "createdAt": "2020-11-20T13:48:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java", "diffHunk": "@@ -22,26 +19,26 @@\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isNumeric;\n \n-public class PercentileRank extends AggregateFunction implements EnclosedAgg {\n+public class PercentileRank extends PercentileAggregate {\n \n     private final Expression value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODc5MTU4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo1ODowNlrOH3QstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo1ODowNlrOH3QstA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNzMxNg==", "bodyText": "Move this towards the top of the class where the rest of the static fields are being declared", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527707316", "createdAt": "2020-11-20T13:58:06Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileAggregate.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.Foldables;\n+import org.elasticsearch.xpack.ql.expression.TypeResolutions;\n+import org.elasticsearch.xpack.ql.expression.function.TwoOptionalArguments;\n+import org.elasticsearch.xpack.ql.expression.function.aggregate.EnclosedAgg;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.sql.type.SqlDataTypeConverter;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isFoldable;\n+\n+abstract class PercentileAggregate extends NumericAggregate implements EnclosedAgg, TwoOptionalArguments {\n+\n+    private static final PercentilesConfig.TDigest DEFAULT_PERCENTILES_CONFIG = new PercentilesConfig.TDigest();\n+\n+    // preferred method name to configurator mapping (type resolution, method parameter -> config)\n+    // contains all the possible PercentilesMethods that we know of and are capable of parameterizing at the moment\n+    private static final Map<String, MethodConfigurator> METHOD_CONFIGURATORS = new LinkedHashMap<>();\n+    static {\n+        Arrays.asList(\n+            new MethodConfigurator(PercentilesMethod.TDIGEST, TypeResolutions::isNumeric, methodParameter -> {\n+                Double compression = foldNullSafe(methodParameter, DataTypes.DOUBLE);\n+                return compression == null ? new PercentilesConfig.TDigest() : new PercentilesConfig.TDigest(compression);\n+            }), \n+            new MethodConfigurator(PercentilesMethod.HDR, TypeResolutions::isInteger, methodParameter -> {\n+                Integer numOfDigits = foldNullSafe(methodParameter, DataTypes.INTEGER);\n+                return numOfDigits == null ? new PercentilesConfig.Hdr() : new PercentilesConfig.Hdr(numOfDigits);\n+            }))\n+            .forEach(c -> METHOD_CONFIGURATORS.put(c.method.getParseField().getPreferredName(), c));\n+    }\n+    \n+    private final Expression method;\n+    private final Expression methodParameter;\n+    \n+    PercentileAggregate(Source source, Expression field, List<Expression> parameters, Expression method, Expression methodParameter) \n+    {\n+        super(source, field, parameters);\n+        this.method = method;\n+        this.methodParameter = methodParameter;\n+    }\n+\n+    @Override \n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = super.resolveType();\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        ParamOrdinal methodOrdinal = ParamOrdinal.fromIndex(parameters().size() + 1);\n+        ParamOrdinal methodParameterOrdinal = ParamOrdinal.fromIndex(parameters().size() + 2);\n+        \n+        if (method != null) {\n+            resolution = isFoldable(method, sourceText(), methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+            resolution = TypeResolutions.isString(method, sourceText(), methodOrdinal);\n+            if (resolution.unresolved()) {\n+                return resolution;\n+            }\n+\n+            String methodName = (String) method.fold();\n+\n+            MethodConfigurator methodConfigurator = METHOD_CONFIGURATORS.get(methodName);\n+            if (methodConfigurator == null) {\n+                return new TypeResolution(format(null, \"{}argument of [{}] must be one of {}, received [{}]\",\n+                    methodOrdinal.name().toLowerCase(Locale.ROOT) + \" \", sourceText(),\n+                    METHOD_CONFIGURATORS.keySet(), methodName));\n+            }\n+\n+            // if method is null, the method parameter is not checked\n+            if (methodParameter != null && Expressions.isNull(methodParameter) == false) {\n+                resolution = isFoldable(methodParameter, sourceText(), methodParameterOrdinal);\n+                if (resolution.unresolved()) {\n+                    return resolution;\n+                }\n+\n+                resolution = methodConfigurator.resolver.resolve(methodParameter, sourceText(), methodParameterOrdinal);\n+                return resolution;\n+            }\n+        }\n+\n+        return TypeResolution.TYPE_RESOLVED;\n+    }\n+\n+    public Expression method() {\n+        return method;\n+    }\n+\n+    public Expression methodParameter() {\n+        return methodParameter;\n+    }\n+\n+    @Override\n+    public DataType dataType() {\n+        return DataTypes.DOUBLE;\n+    }\n+\n+    public PercentilesConfig percentilesConfig() {\n+        if (method == null) {\n+            // sadly we had to set the default here, the PercentilesConfig does not provide a default\n+            return DEFAULT_PERCENTILES_CONFIG;\n+        }\n+        String methodName = foldNullSafe(method, DataTypes.KEYWORD);\n+        MethodConfigurator methodConfigurator = METHOD_CONFIGURATORS.get(methodName);\n+        if (methodConfigurator == null) {\n+            throw new IllegalStateException(\"Not handled PercentilesMethod [\" + methodName + \"], type resolution needs fix\");\n+        }\n+        return methodConfigurator.parameterToConfig.apply(methodParameter);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T foldNullSafe(Expression e, DataType dataType) {\n+        return e == null ? null : (T) SqlDataTypeConverter.convert(Foldables.valueOf(e), dataType);\n+    }\n+\n+    private static class MethodConfigurator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODgwMzc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMTowOVrOH3Q0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTo0MzoxNlrOH4ghdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwOTIwNg==", "bodyText": "Considering this file and Percentiles have grew in size and have two properties plus the associated equals/hashCode is worth extracting the functionlity into a common base class that extends CompoundNumericAggregate and just like their function equivalent, the actual implementations only inherit and declare the values/fields as a synonim to the internal expressions list and handle the info and replaceChildren methods.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527709206", "createdAt": "2020-11-20T14:01:09Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -5,35 +5,64 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class PercentileRanks extends CompoundNumericAggregate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxNTE1OQ==", "bodyText": "While implementing this suggested change, found the following:\n    public InnerAggregate(Source source, AggregateFunction inner, CompoundAggregate outer, Expression innerKey) {\n        super(source, outer.field(), outer.arguments());\nWhere the outer.arguments() delegates to children() which already contains the field(), so the InnerAggregate will have two fields in the children list.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r529015159", "createdAt": "2020-11-23T21:43:16Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRanks.java", "diffHunk": "@@ -5,35 +5,64 @@\n  */\n package org.elasticsearch.xpack.sql.expression.function.aggregate;\n \n+import org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n import org.elasticsearch.xpack.ql.expression.Expression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n \n import java.util.List;\n+import java.util.Objects;\n \n public class PercentileRanks extends CompoundNumericAggregate {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwOTIwNg=="}, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODgxNDIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMzo1OVrOH3Q6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMzo1OVrOH3Q6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMDgyNg==", "bodyText": "A small nit - to avoid having two constructors, it would be possible make the base class public so that percentilesConfig can be accessed. Since the rest of the methods are not, it keeps the encapsulation while removing redundancy.", "url": "https://github.com/elastic/elasticsearch/pull/65026#discussion_r527710826", "createdAt": "2020-11-20T14:03:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1006,39 +1008,50 @@ public LogicalPlan apply(LogicalPlan p) {\n         }\n     }\n \n+    private static class PercentileKey extends Tuple<Expression, PercentilesConfig> {\n+        PercentileKey(Percentile per) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19099ec55b43ca07a14a86a09da6684cc9e6a59e"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3008, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}