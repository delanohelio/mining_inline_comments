{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDM3NzQ4", "number": 51137, "title": "Add ranged readBlob to S3BlobContainer", "bodyText": "Implements InputStream readBlob(final String blobName, final long position, final int length) on the S3BlobContainer.", "createdAt": "2020-01-17T09:02:55Z", "url": "https://github.com/elastic/elasticsearch/pull/51137", "merged": true, "mergeCommit": {"oid": "e419d9197b410eeefff22ed4f54a6823bef476ea"}, "closed": true, "closedAt": "2020-01-21T09:54:14Z", "author": {"login": "ywelsch"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7K7d-AH2gAyMzY0MDM3NzQ4OmM3NWEyYTAwMDY5MjA4YzY4YjRlYmIxMjQ2ODBiMWQxMjY3MzE0NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8T-wuAH2gAyMzY0MDM3NzQ4OmNmMTkzNzQyY2ZmNmI5ZGFiYWNlMjExYjU1OWU3YWM0OGE2YzYxYWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/c75a2a00069208c68b4ebb124680b1d126731471", "committedDate": "2020-01-17T09:00:28Z", "message": "Add ranged readBlob to S3BlobContainer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDY4NTE3", "url": "https://github.com/elastic/elasticsearch/pull/51137#pullrequestreview-344468517", "createdAt": "2020-01-17T09:54:06Z", "commit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDowNlrOFez5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjoyN1rOFe0ISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTkzOA==", "bodyText": "It should be read_blob_incomplete", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367851938", "createdAt": "2020-01-17T09:54:06Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +291,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_no_response\", 0, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU2OA==", "bodyText": "Maybe just randomize the call to range/non-range read instead of doing both?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853568", "createdAt": "2020-01-17T09:57:40Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n+        Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n         assertThat(exception.getMessage().toLowerCase(Locale.ROOT), containsString(\"blob object [read_nonexistent_blob] not found\"));\n+        final long position = randomLongBetween(0, Long.MAX_VALUE - 1);\n+        final int length = randomIntBetween(0, Math.toIntExact(Math.min(Integer.MAX_VALUE, Long.MAX_VALUE - 1 - position)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDk3OQ==", "bodyText": "Maybe rename read_blob_max_retries ->  read_range_blob_max_retries so that each test uses a dedicated Http context (this is no mandatory but can avoid some confusion maybe)?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854979", "createdAt": "2020-01-17T10:00:44Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -178,6 +187,50 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomInt(5);\n+        final CountDown countDown = new CountDown(maxRetries + 1);\n+\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/bucket/read_blob_max_retries\", exchange -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTY5MQ==", "bodyText": "It pops up here and there, maybe we should put this value in a constant?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367855691", "createdAt": "2020-01-17T10:02:27Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -397,23 +463,47 @@ public void testWriteLargeBlob() throws Exception {\n         return randomByteArrayOfLength(randomIntBetween(1, frequently() ? 512 : 1 << 20)); // rarely up to 1mb\n     }\n \n-    private static int getRangeStart(HttpExchange exchange) {\n+    private static Tuple<Long, Long> getRange(HttpExchange exchange) {\n         final String rangeHeader = exchange.getRequestHeaders().getFirst(\"Range\");\n         if (rangeHeader == null) {\n-            return 0;\n+            return Tuple.tuple(0L, Long.MAX_VALUE - 1);\n         }\n \n-        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-9223372036854775806$\").matcher(rangeHeader);\n+        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-([0-9]+)$\").matcher(rangeHeader);\n         assertTrue(rangeHeader + \" matches expected pattern\", matcher.matches());\n-        return Math.toIntExact(Long.parseLong(matcher.group(1)));\n+        long rangeStart = Long.parseLong(matcher.group(1));\n+        long rangeEnd = Long.parseLong(matcher.group(2));\n+        assertThat(rangeStart, lessThanOrEqualTo(rangeEnd));\n+        return Tuple.tuple(rangeStart, rangeEnd);\n+    }\n+\n+    private static int getRangeStart(HttpExchange exchange) {\n+        return Math.toIntExact(getRange(exchange).v1());\n+    }\n+\n+    private static Optional<Integer> getRangeEnd(HttpExchange exchange) {\n+        final long rangeEnd = getRange(exchange).v2();\n+        if (rangeEnd == Long.MAX_VALUE - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDY4OTU1", "url": "https://github.com/elastic/elasticsearch/pull/51137#pullrequestreview-344468955", "createdAt": "2020-01-17T09:54:50Z", "commit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDo1MVrOFez67Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1ODozNlrOFe0Bzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ==", "bodyText": "I think we could reasonably drop this constructor and use the ranged one everywhere.", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367852269", "createdAt": "2020-01-17T09:54:51Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU1MQ==", "bodyText": "end < 0L is redundant since 0 \u2264 start and we're also checking for end < start.", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853551", "createdAt": "2020-01-17T09:57:38Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {\n+        this(blobStore, blobKey, 0, Long.MAX_VALUE - 1);\n+    }\n+\n+    // both start and end are inclusive bounds, following the definition in GetObjectRequest.setRange\n+    S3RetryingInputStream(S3BlobStore blobStore, String blobKey, long start, long end) throws IOException {\n+        if (start < 0L) {\n+            throw new IllegalArgumentException(\"start must be non-negative\");\n+        }\n+        if (end < 0L || end == Long.MAX_VALUE || end < start) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDAzMQ==", "bodyText": "Can still be final?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854031", "createdAt": "2020-01-17T09:58:36Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea74062339fdfcf972ed07fe4e686f364afefce", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ea74062339fdfcf972ed07fe4e686f364afefce", "committedDate": "2020-01-17T10:52:28Z", "message": "Simple review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff4361f8f7b6d85631b92c7fbafae679989e265b", "committedDate": "2020-01-17T14:41:49Z", "message": "Consume stream when not fully consumed yet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzA5Mjc2", "url": "https://github.com/elastic/elasticsearch/pull/51137#pullrequestreview-344709276", "createdAt": "2020-01-17T16:50:46Z", "commit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MDo0NlrOFe_Elg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1OTo1NlrOFe_VZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDk2Ng==", "bodyText": "ok", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368034966", "createdAt": "2020-01-17T16:50:46Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ=="}, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjE2NQ==", "bodyText": "I think we need it the other way round:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        e2.addSuppressed(e);\n          \n          \n            \n                        e.addSuppressed(e2);", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368036165", "createdAt": "2020-01-17T16:53:10Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -122,20 +140,33 @@ private void ensureOpen() {\n \n     private void reopenStreamOrFail(IOException e) throws IOException {\n         if (attempt >= maxAttempts) {\n+            logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], giving up\",\n+                blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n             throw addSuppressedExceptions(e);\n         }\n         logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], retrying\",\n-            blobStore.bucket(), blobKey, currentOffset, attempt, maxAttempts), e);\n+            blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n         attempt += 1;\n         if (failures.size() < MAX_SUPPRESSED_EXCEPTIONS) {\n             failures.add(e);\n         }\n+        try {\n+            Streams.consumeFully(currentStream);\n+        } catch (Exception e2) {\n+            e2.addSuppressed(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzOTI3MA==", "bodyText": "Apparently this results in a different exception?\njava.lang.AssertionError: \nExpected: a string containing \"premature end of content-length delimited message body\"\n     but: was \"premature end of chunk coded message body: closing chunk expected\"", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368039270", "createdAt": "2020-01-17T16:59:56Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +339,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_incomplete\", 0, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 197}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ec202c332927d1f3cfaf1053102496fc84cc5d3", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ec202c332927d1f3cfaf1053102496fc84cc5d3", "committedDate": "2020-01-17T17:24:50Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b733f010e737199194f8bdbb90138ecc09ca33a", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/0b733f010e737199194f8bdbb90138ecc09ca33a", "committedDate": "2020-01-17T17:25:47Z", "message": "no need for suppressed exception, already logged"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b2b69319f39cacbd210423cc6b573fef6b65333", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b2b69319f39cacbd210423cc6b573fef6b65333", "committedDate": "2020-01-20T15:56:30Z", "message": "Merge branch 'feature/searchable-snapshots' into repo-range-requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b532d554b5a8e4f2790802a1d1efbaf85c22dc", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/65b532d554b5a8e4f2790802a1d1efbaf85c22dc", "committedDate": "2020-01-20T20:36:49Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee2d9ffe1f0eeb44bfd1be9e1cd6dcd78331131", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ee2d9ffe1f0eeb44bfd1be9e1cd6dcd78331131", "committedDate": "2020-01-20T20:56:57Z", "message": "moar fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf193742cff6b9dabace211b559e7ac48a6c61ad", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/cf193742cff6b9dabace211b559e7ac48a6c61ad", "committedDate": "2020-01-20T22:07:08Z", "message": "yet more fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2960, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}