{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjYyNTUy", "number": 64062, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozMzo1NFrOEx0WAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozNzoyMlrOEx0bXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjczMjgxOnYy", "diffSide": "RIGHT", "path": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ForEachProcessorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozMzo1NFrOHoHUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozMzo1NFrOHoHUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTAwOA==", "bodyText": "Maybe also add a nested for each tests for maps like the existing testNestedForEach() test?", "url": "https://github.com/elastic/elasticsearch/pull/64062#discussion_r511825008", "createdAt": "2020-10-26T09:33:54Z", "author": {"login": "martijnvg"}, "path": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ForEachProcessorTests.java", "diffHunk": "@@ -311,6 +312,56 @@ public void testRemovingFromTheSameField() {\n         assertThat(ingestDocument, equalTo(originalIngestDocument));\n     }\n \n+    public void testMapIteration() {\n+        Map<String, Object> mapValue = Map.of(\"foo\", 1, \"bar\", 2, \"baz\", 3);\n+        IngestDocument ingestDocument = new IngestDocument(\"_index\", \"_id\", null, null, null, Map.of(\"field\", mapValue));\n+\n+        List<String> encounteredKeys = new ArrayList<>();\n+        List<Object> encounteredValues = new ArrayList<>();\n+        TestProcessor testProcessor = new TestProcessor(id -> {\n+            String key = (String) id.getIngestMetadata().get(\"_key\");\n+            Object value = id.getIngestMetadata().get(\"_value\");\n+            encounteredKeys.add(key);\n+            encounteredValues.add(value);\n+            if (key.equals(\"bar\")) {\n+                id.setFieldValue(\"_ingest._key\", \"bar2\");\n+            }\n+            if (key.equals(\"baz\")) {\n+                id.setFieldValue(\"_ingest._value\", 33);\n+            }\n+        });\n+        ForEachProcessor processor = new ForEachProcessor(\"_tag\", null, \"field\", testProcessor, true);\n+        processor.execute(ingestDocument, (result, e) -> {});\n+        assertThat(testProcessor.getInvokedCounter(), equalTo(3));\n+        assertThat(encounteredKeys.toArray(), arrayContainingInAnyOrder(\"foo\", \"bar\", \"baz\"));\n+        assertThat(encounteredValues.toArray(), arrayContainingInAnyOrder(1, 2, 3));\n+        assertThat(ingestDocument.getFieldValue(\"field\", Map.class).entrySet().toArray(),\n+            arrayContainingInAnyOrder(Map.entry(\"foo\", 1), Map.entry(\"bar2\", 2), Map.entry(\"baz\", 33)));\n+    }\n+\n+    public void testRemovalOfMapKey() {\n+        Map<String, Object> mapValue = Map.of(\"foo\", 1, \"bar\", 2, \"baz\", 3);\n+        IngestDocument ingestDocument = new IngestDocument(\"_index\", \"_id\", null, null, null, Map.of(\"field\", mapValue));\n+\n+        List<String> encounteredKeys = new ArrayList<>();\n+        List<Object> encounteredValues = new ArrayList<>();\n+        TestProcessor testProcessor = new TestProcessor(id -> {\n+            String key = (String) id.getIngestMetadata().get(\"_key\");\n+            encounteredKeys.add(key);\n+            encounteredValues.add(id.getIngestMetadata().get(\"_value\"));\n+            if (key.equals(\"bar\")) {\n+                id.setFieldValue(\"_ingest._key\", \"\");\n+            }\n+        });\n+        ForEachProcessor processor = new ForEachProcessor(\"_tag\", null, \"field\", testProcessor, true);\n+        processor.execute(ingestDocument, (result, e) -> {});\n+        assertThat(testProcessor.getInvokedCounter(), equalTo(3));\n+        assertThat(encounteredKeys.toArray(), arrayContainingInAnyOrder(\"foo\", \"bar\", \"baz\"));\n+        assertThat(encounteredValues.toArray(), arrayContainingInAnyOrder(1, 2, 3));\n+        assertThat(ingestDocument.getFieldValue(\"field\", Map.class).entrySet().toArray(),\n+            arrayContainingInAnyOrder(Map.entry(\"foo\", 1), Map.entry(\"baz\", 3)));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac7c5f1e7d7cb297849e7644575197577a58e05"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjc0NjUzOnYy", "diffSide": "RIGHT", "path": "modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ForEachProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozNzoyMlrOHoHc5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozNzoyMlrOHoHc5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNzE3NA==", "bodyText": "I think we can cast to Map<?, ?> instead? Then the SuppressWarnings can be removed. In order to get the key a cast to String would required, but that shouldn't generate warnings.", "url": "https://github.com/elastic/elasticsearch/pull/64062#discussion_r511827174", "createdAt": "2020-10-26T09:37:22Z", "author": {"login": "martijnvg"}, "path": "modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ForEachProcessor.java", "diffHunk": "@@ -67,20 +67,61 @@ boolean isIgnoreMissing() {\n \n     @Override\n     public void execute(IngestDocument ingestDocument, BiConsumer<IngestDocument, Exception> handler) {\n-        List<?> values = ingestDocument.getFieldValue(field, List.class, ignoreMissing);\n-        if (values == null) {\n+        Object o = ingestDocument.getFieldValue(field, Object.class, ignoreMissing);\n+        if (o == null) {\n             if (ignoreMissing) {\n                 handler.accept(ingestDocument, null);\n             } else {\n                 handler.accept(null, new IllegalArgumentException(\"field [\" + field + \"] is null, cannot loop over its elements.\"));\n             }\n+        } else if (o instanceof Map) {\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, ?> map = (Map<String, ?>) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac7c5f1e7d7cb297849e7644575197577a58e05"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4286, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}