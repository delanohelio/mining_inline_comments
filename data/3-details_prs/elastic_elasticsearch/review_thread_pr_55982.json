{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTYwNTI3", "number": 55982, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NDozOFrOD38_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NDozOFrOD38_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk3NjM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NDozOFrOGOgB-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyOTo1MlrOGOr-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1ODA0Mw==", "bodyText": "If I understand this correctly it can be simplified:\nstatic Map<String, Object> mergeIgnoringDots(Map<String, Object> first, Map<String, Object> second) {\n    Objects.requireNonNull(first, \"merging requires two non-null maps but the first map was null\");\n    Objects.requireNonNull(second, \"merging requires two non-null maps but the second map was null\");\n    Map<String, Object> results = new HashMap<>(first);\n    Set<String> prefixes = second.keySet().stream().map(MetadataCreateIndexService::prefix).collect(Collectors.toSet());\n    results.keySet().removeIf(k -> prefixes.contains(prefix(k)));\n    results.putAll(second);\n    return results;\n}\n\nprivate static String prefix(String s) {\n    return s.split(\"\\\\.\", 2)[0];\n}", "url": "https://github.com/elastic/elasticsearch/pull/55982#discussion_r417858043", "createdAt": "2020-04-30T08:54:38Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -596,6 +597,52 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n         return Collections.singletonMap(MapperService.SINGLE_MAPPING_NAME, finalMappings);\n     }\n \n+    /**\n+     * Add the objects in the second map to the first, where the keys in the {@code second} map have\n+     * higher predecence and overwrite the keys in the {@code first} map. In the event of a key with\n+     * a dot in it (ie, \"foo.bar\"), the keys are treated as only the prefix counting towards\n+     * equality. If the {@code second} map has a key such as \"foo\", all keys starting from \"foo.\" in\n+     * the {@code first} map are discarded.\n+     */\n+    static Map<String, Object> mergeIgnoringDots(Map<String, Object> first, Map<String, Object> second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a0851e3346ce6c4b2f3a35b08bfbe7ad311a83"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1MzcxMw==", "bodyText": "Sounds good, that works and passes the tests, updated the function.", "url": "https://github.com/elastic/elasticsearch/pull/55982#discussion_r418053713", "createdAt": "2020-04-30T14:29:52Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -596,6 +597,52 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n         return Collections.singletonMap(MapperService.SINGLE_MAPPING_NAME, finalMappings);\n     }\n \n+    /**\n+     * Add the objects in the second map to the first, where the keys in the {@code second} map have\n+     * higher predecence and overwrite the keys in the {@code first} map. In the event of a key with\n+     * a dot in it (ie, \"foo.bar\"), the keys are treated as only the prefix counting towards\n+     * equality. If the {@code second} map has a key such as \"foo\", all keys starting from \"foo.\" in\n+     * the {@code first} map are discarded.\n+     */\n+    static Map<String, Object> mergeIgnoringDots(Map<String, Object> first, Map<String, Object> second) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1ODA0Mw=="}, "originalCommit": {"oid": "f5a0851e3346ce6c4b2f3a35b08bfbe7ad311a83"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2552, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}