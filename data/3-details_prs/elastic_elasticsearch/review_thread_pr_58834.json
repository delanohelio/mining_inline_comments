{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjgzODg4", "number": 58834, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0NDo1OFrOEKyIqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0NDo1OFrOEKyIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzQyNjMyOnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0NDo1OFrOGsBOcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoyMTozOVrOGsKa9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ==", "bodyText": "Are we using a Supplier here so that the SnapshotInfo end time is updated when it is built?", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448810609", "createdAt": "2020-07-02T07:44:58Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MDc1MQ==", "bodyText": "Exactly that's why. Now that you're asking I wonder if that's even necessary ... the actual finalisation step on the repository is super parallelised these days anyway and will take a trivial amount of time. Could also just pass in the full SnapshotInfo I guess ... but then again, it gets all weird if someone actually finds a way of creating a situation where finalisation is slow (huge number of indices could maybe cause this).\n... I think for now I like this best because it doesn't change behaviour :)", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448840751", "createdAt": "2020-07-02T08:37:03Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ=="}, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MDA4OQ==", "bodyText": "What do you think of passing a SnapshotInfo instance to the finalizeSnapshot() but update the end time of this one right before it's written to the repository?\nexecutor.execute(ActionRunnable.supply(allMetaListener, () -> {\n                final SnapshotInfo finalSnapshotInfo = SnapshotInfoBuilder.builder(snapshotInfo)\n                                .withEndTime(threadPool.absoluteTimeInMillis())\n                                .build();\n                snapshotFormat.write(snapshotInfo, blobContainer(), snapshotId.getUUID(), false);\n                return snapshotInfo;\n            }));", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448860089", "createdAt": "2020-07-02T09:08:21Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ=="}, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2Mzc4OA==", "bodyText": "Hmm, then we still have some of the responsibility for setting up the correct SnapshotInfo in the blob store and repository implementations in general which I tried to avoid. But :)\nI just realized that my above comment doesn't make 100% sense these days ...  we are writing the SnapshotInfo concurrently to index metadata and global metadata blobs with no defined order so the timestamp in it isn't really 100% correct in the first place. And, even if we were to write it last it wouldn't be because we still have to do two CS updates and the write of the new index-N in between those afterwards.\n=> how about we just pass SnapshotInfo and not care about the precision of this timestamp since it can never be 100% correct anyway?", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448863788", "createdAt": "2020-07-02T09:14:36Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ=="}, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NDU5Mg==", "bodyText": "Sold!", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448864592", "createdAt": "2020-07-02T09:16:02Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ=="}, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2MTI3MQ==", "bodyText": "Alrighty did this now :) Constructing SnapshotInfo in the snapshots service simplified things massively it turns out. See 123a0dd", "url": "https://github.com/elastic/elasticsearch/pull/58834#discussion_r448961271", "createdAt": "2020-07-02T12:21:39Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -240,16 +238,15 @@\n     private final AtomicReference<Scheduler.Cancellable> finalizationFuture = new AtomicReference<>();\n \n     @Override\n-    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long startTime, String failure, int totalShards,\n-                                 List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState,\n-                                 Metadata clusterMetadata, Map<String, Object> userMetadata, Version repositoryMetaVersion,\n+    public void finalizeSnapshot(SnapshotId snapshotId, ShardGenerations shardGenerations, long repositoryStateId, Metadata clusterMetadata,\n+                                 Supplier<SnapshotInfo> buildSnapshotInfo, Version repositoryMetaVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDYwOQ=="}, "originalCommit": {"oid": "cb96c3a4d40c15c11bf1d414efa0e498a28fd6c7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2194, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}