{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzQyMDUz", "number": 61504, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNToyOVrOEbucmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzoxNVrOEcI8yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTA3OTk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/qa/rest/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/rest/CoreTestsWithRuntimeFieldsIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNToyOVrOHF0rQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNToyOVrOHF0rQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2Nzk2OA==", "bodyText": "The if is temporary and it'll become all the time once it is done.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475867968", "createdAt": "2020-08-24T20:15:29Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/qa/rest/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/rest/CoreTestsWithRuntimeFieldsIT.java", "diffHunk": "@@ -166,6 +166,9 @@ private static String painlessToLoadFromSource(String name, String type) {\n             return null;\n         }\n         StringBuilder b = new StringBuilder();\n+        if (\"double\".equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTA4MTc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractLongScriptFieldScript.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNjowNVrOHF0sdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNjowNVrOHF0sdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODI3OQ==", "bodyText": "Because I'm only doing one of them I have to move the old execute method decalarations into the subclasses.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868279", "createdAt": "2020-08-24T20:16:05Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractLongScriptFieldScript.java", "diffHunk": "@@ -23,6 +23,8 @@ public AbstractLongScriptFieldScript(Map<String, Object> params, SearchLookup se\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract void execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTA4NTMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractDoubleScriptFieldQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNzoxMFrOHF0uow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNzoxMFrOHF0uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODgzNQ==", "bodyText": "We don't need the count any more because we use the whole array.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868835", "createdAt": "2020-08-24T20:17:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractDoubleScriptFieldQuery.java", "diffHunk": "@@ -36,7 +36,7 @@\n     /**\n      * Does the value match this query?\n      */\n-    protected abstract boolean matches(double[] values, int count);\n+    protected abstract boolean matches(double[] values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODc3MjcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo0OToxMlrOHGY_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDo1MVrOHGh24A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA==", "bodyText": "oh boy I was hoping we would not need this sort of stuff, but I guess we do? I mean the instanceof as well as the cast to double array", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476462930", "createdAt": "2020-08-25T13:49:12Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NzY1Mg==", "bodyText": "\ud83d\ude22 Me too! I imagine the painless folk are thinking about it, but I'm not sure. This seems like a perfect spot for invokedynamic, but I'm not an expert at all.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476487652", "createdAt": "2020-08-25T14:21:23Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NzE0NA==", "bodyText": "what happens if we do without this conversion? Really bad I guess?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476557144", "createdAt": "2020-08-25T15:55:22Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MTI2Mw==", "bodyText": "@javanna without it you can't really return def. You get a lot of funny class cast exceptions.\n@stu-elastic or @jdconrad do we have plans indy-ify this or something? So it'd call the converter based on the def type. Is that what #61389 is all about?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476561263", "createdAt": "2020-08-25T16:01:07Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzcxNA==", "bodyText": "We needed to get this in your hands ASAP.  We'll be improving it: #61389", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476563714", "createdAt": "2020-08-25T16:04:42Z", "author": {"login": "stu-elastic"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2ODExNQ==", "bodyText": "Indy for this is really challenging. We are going to look into it, but allowing you to do def conversions this way ensures we have something for runtime fields now that doesn't use reflection invocation. I would recommend that this cover all numeric cases including byte through long as well. Check out something like DefMath.plus.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476568115", "createdAt": "2020-08-25T16:11:02Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMxNw==", "bodyText": "Gotcha. So if I implement convertFromDef returning a def type is all on me at the moment. I have to do what DefMath does, basically.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476581317", "createdAt": "2020-08-25T16:31:09Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzM5OQ==", "bodyText": "@nik9000 Yes, that's correct. Again we are going to rectify this, but wanted to make sure we had something that was usable now.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476607399", "createdAt": "2020-08-25T17:13:35Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODIyNA==", "bodyText": "\ud83e\udd18", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476608224", "createdAt": "2020-08-25T17:14:51Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODc4MzM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1MToxN1rOHGZFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1NTo0NFrOHGhJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg==", "bodyText": "I was hoping that this file would go away completely. can you remind what the remaining lines are for?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476464542", "createdAt": "2020-08-25T13:51:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4ODgyMg==", "bodyText": "I'll try one more time to drop it. I tried and it blew up. But I'll try without it entirely.\nI think these are required so painless can use the classes that we defined. But these might should all be \"implied\" because they are part of the script context.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476488822", "createdAt": "2020-08-25T14:22:57Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxMTI4Mg==", "bodyText": "I checked - it is still required.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476511282", "createdAt": "2020-08-25T14:51:56Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Njk1NA==", "bodyText": "@stu-elastic and @jdconrad  - I think we still need this file because without it painless can't find the factory class. I think that is because is part of a plugin and not in painless's classloader. Or something like that. Is that how the world is supposed to be? Could these classes be implied by default because the context mentions them directly?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476566954", "createdAt": "2020-08-25T16:09:14Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2OTA3Nw==", "bodyText": "Painless has no way to load these classes w/o explicitly stating them as part of SPI.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476569077", "createdAt": "2020-08-25T16:12:36Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTc4NQ==", "bodyText": "\ud83d\udc4d.\nCould you dig them out of the ScriptContext, I wonder?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476579785", "createdAt": "2020-08-25T16:28:47Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NjY4Ng==", "bodyText": "That's something worth looking into. Agreed.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476596686", "createdAt": "2020-08-25T16:55:44Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQyMjE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzoxNVrOHGfQjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNDoxN1rOHGfiUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY0Nw==", "bodyText": "@stu-elastic and @jdconrad do these look right? I borrowed them from FactoryTests.\nI see right now you force the converters to be static - would it be possible to make them non-static on the script?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476565647", "createdAt": "2020-08-25T16:07:15Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,40 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDE5NA==", "bodyText": "Not easily because the only \"this\" pointer we have is through class bindings.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476570194", "createdAt": "2020-08-25T16:14:17Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,40 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY0Nw=="}, "originalCommit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 814, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}