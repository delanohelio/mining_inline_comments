{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzMxNDg5", "number": 51977, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjoyMToxMVrODdvpiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozNToxN1rODd_owA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTE1OTc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjoyMToxMVrOFmhXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozOTo0MlrOFmnwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzNjc5Mw==", "bodyText": "can we avoid sending this field if indexId != null (i.e. in the non-bwc case)", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r375936793", "createdAt": "2020-02-06T16:21:11Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "diffHunk": "@@ -252,6 +278,9 @@ protected void writeAdditionalFields(StreamOutput out) throws IOException {\n             snapshot.writeTo(out);\n             Version.writeVersion(version, out);\n             out.writeString(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6f7a4a585eba9e75f1a8aaee78cb0131eb67b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY1MQ==", "bodyText": "Not sure, see the other question, seems to me we need to write the uuid string as optional, maybe not?", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376041651", "createdAt": "2020-02-06T19:39:42Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "diffHunk": "@@ -252,6 +278,9 @@ protected void writeAdditionalFields(StreamOutput out) throws IOException {\n             snapshot.writeTo(out);\n             Version.writeVersion(version, out);\n             out.writeString(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzNjc5Mw=="}, "originalCommit": {"oid": "f6a6f7a4a585eba9e75f1a8aaee78cb0131eb67b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTE3NjkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjoyNToxMVrOFmhhpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMjoyOFrOFm2T6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzOTQ5NA==", "bodyText": "the approach here does not allow us to later switch to just reading directly IndexId from stream after backport to 7.x.\nCan you change things so that you conditionally do in.readString(); or new IndexId(in)", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r375939494", "createdAt": "2020-02-06T16:25:11Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "diffHunk": "@@ -214,20 +216,44 @@ public String toString() {\n         private final String restoreUUID;\n         private final Snapshot snapshot;\n         private final String index;\n+\n+        @Nullable\n+        private final IndexId indexId;\n         private final Version version;\n \n-        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, String index) {\n+        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, IndexId indexId) {\n             this.restoreUUID = restoreUUID;\n             this.snapshot = Objects.requireNonNull(snapshot);\n             this.version = Objects.requireNonNull(version);\n-            this.index = Objects.requireNonNull(index);\n+            this.indexId = Objects.requireNonNull(indexId);\n+            this.index = indexId.getName();\n         }\n \n         SnapshotRecoverySource(StreamInput in) throws IOException {\n             restoreUUID = in.readString();\n             snapshot = new Snapshot(in);\n             version = Version.readVersion(in);\n             index = in.readString();\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6f7a4a585eba9e75f1a8aaee78cb0131eb67b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTAxMg==", "bodyText": "Tell me if I'm missing something here. But doesn't this break in the edge case of:\n\nRunning mixed cluster with old version master\nFail over to new version master\nNew version master sends the existing recovery source over the wire because it still has null for the uuid because the old master didn't add that when creating the RecoverySource? (am I missing a spot where this is upgraded/recreated during master fail-over?", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376041012", "createdAt": "2020-02-06T19:38:21Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "diffHunk": "@@ -214,20 +216,44 @@ public String toString() {\n         private final String restoreUUID;\n         private final Snapshot snapshot;\n         private final String index;\n+\n+        @Nullable\n+        private final IndexId indexId;\n         private final Version version;\n \n-        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, String index) {\n+        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, IndexId indexId) {\n             this.restoreUUID = restoreUUID;\n             this.snapshot = Objects.requireNonNull(snapshot);\n             this.version = Objects.requireNonNull(version);\n-            this.index = Objects.requireNonNull(index);\n+            this.indexId = Objects.requireNonNull(indexId);\n+            this.index = indexId.getName();\n         }\n \n         SnapshotRecoverySource(StreamInput in) throws IOException {\n             restoreUUID = in.readString();\n             snapshot = new Snapshot(in);\n             version = Version.readVersion(in);\n             index = in.readString();\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzOTQ5NA=="}, "originalCommit": {"oid": "f6a6f7a4a585eba9e75f1a8aaee78cb0131eb67b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDA0MA==", "bodyText": "Maybe we should differentiate the in.readString() / new IndexId(in) serialization part and make the logic only rely on IndexId, both on master and 7.x, and INDEX_UUID_NA_VALUE to resolve the index id later when needed?", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376280040", "createdAt": "2020-02-07T09:02:28Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java", "diffHunk": "@@ -214,20 +216,44 @@ public String toString() {\n         private final String restoreUUID;\n         private final Snapshot snapshot;\n         private final String index;\n+\n+        @Nullable\n+        private final IndexId indexId;\n         private final Version version;\n \n-        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, String index) {\n+        public SnapshotRecoverySource(String restoreUUID, Snapshot snapshot, Version version, IndexId indexId) {\n             this.restoreUUID = restoreUUID;\n             this.snapshot = Objects.requireNonNull(snapshot);\n             this.version = Objects.requireNonNull(version);\n-            this.index = Objects.requireNonNull(index);\n+            this.indexId = Objects.requireNonNull(indexId);\n+            this.index = indexId.getName();\n         }\n \n         SnapshotRecoverySource(StreamInput in) throws IOException {\n             restoreUUID = in.readString();\n             snapshot = new Snapshot(in);\n             version = Version.readVersion(in);\n             index = in.readString();\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzOTQ5NA=="}, "originalCommit": {"oid": "f6a6f7a4a585eba9e75f1a8aaee78cb0131eb67b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzc3NTkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozMzo1OFrOFm6Wnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozMzo1OFrOFm6Wnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0NjI3MQ==", "bodyText": "Maybe just final IndexId indexId = restoreSource.index();", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376346271", "createdAt": "2020-02-07T11:33:58Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "diffHunk": "@@ -473,20 +475,33 @@ private void restore(IndexShard indexShard, Repository repository, SnapshotRecov\n             translogState.totalOperationsOnStart(0);\n             indexShard.prepareForIndexRecovery();\n             final ShardId snapshotShardId;\n-            final String indexName = restoreSource.index();\n-            if (!shardId.getIndexName().equals(indexName)) {\n-                snapshotShardId = new ShardId(indexName, IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());\n-            } else {\n+            final IndexId indexIdFromCS = restoreSource.index();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274a7e5db0d611051b2b0f57c88f2e2cb9a94716"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzc3NzE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozNDoyOVrOFm6XRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozNDoyOVrOFm6XRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0NjQzNg==", "bodyText": "typo buy", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376346436", "createdAt": "2020-02-07T11:34:29Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "diffHunk": "@@ -473,20 +475,33 @@ private void restore(IndexShard indexShard, Repository repository, SnapshotRecov\n             translogState.totalOperationsOnStart(0);\n             indexShard.prepareForIndexRecovery();\n             final ShardId snapshotShardId;\n-            final String indexName = restoreSource.index();\n-            if (!shardId.getIndexName().equals(indexName)) {\n-                snapshotShardId = new ShardId(indexName, IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());\n-            } else {\n+            final IndexId indexIdFromCS = restoreSource.index();\n+            if (shardId.getIndexName().equals(indexIdFromCS.getName())) {\n                 snapshotShardId = shardId;\n+            } else {\n+                snapshotShardId = new ShardId(indexIdFromCS.getName(), IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());\n+            }\n+            // If the index UUID was not found in the recovery source we will have to load RepositoryData and resolve it buy index name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274a7e5db0d611051b2b0f57c88f2e2cb9a94716"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzc3OTIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozNToxN1rOFm6YYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTozNToxN1rOFm6YYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0NjcyMQ==", "bodyText": "Maybe final boolean resolveIndexId = IndexMetaData.INDEX_UUID_NA_VALUE.equals(indexId.getId());", "url": "https://github.com/elastic/elasticsearch/pull/51977#discussion_r376346721", "createdAt": "2020-02-07T11:35:17Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java", "diffHunk": "@@ -473,20 +475,33 @@ private void restore(IndexShard indexShard, Repository repository, SnapshotRecov\n             translogState.totalOperationsOnStart(0);\n             indexShard.prepareForIndexRecovery();\n             final ShardId snapshotShardId;\n-            final String indexName = restoreSource.index();\n-            if (!shardId.getIndexName().equals(indexName)) {\n-                snapshotShardId = new ShardId(indexName, IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());\n-            } else {\n+            final IndexId indexIdFromCS = restoreSource.index();\n+            if (shardId.getIndexName().equals(indexIdFromCS.getName())) {\n                 snapshotShardId = shardId;\n+            } else {\n+                snapshotShardId = new ShardId(indexIdFromCS.getName(), IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());\n+            }\n+            // If the index UUID was not found in the recovery source we will have to load RepositoryData and resolve it buy index name\n+            final boolean indexUUIDUnavailable = indexIdFromCS.getId().equals(IndexMetaData.INDEX_UUID_NA_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274a7e5db0d611051b2b0f57c88f2e2cb9a94716"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4947, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}