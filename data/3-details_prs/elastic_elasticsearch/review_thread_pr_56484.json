{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTQ3NDk1", "number": 56484, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozNjo0NlrOD8EboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMjo1NlrOEA8FLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzEzNzYwOnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozNjo0NlrOGUx8xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0MDo0N1rOGXmmZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzA3OQ==", "bodyText": "One suggestion: maybe we could use splitSmart(input, \",\", true) here, I believe this would allow to cover the (admittedly very unlikely) case where ppl need a comma in their rules. I believe a rule like a\\\\,b would then be resolved to a key a,b. If you think thats worth the troube we'd also need a small test for this (see other comment around unit testing).", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424443079", "createdAt": "2020-05-13T13:36:46Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);\n             }\n \n-            if (key.isEmpty() || override.isEmpty()) {\n+            List<String> keys = Strings.splitSmart(sides.get(0), \",\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMzYxMg==", "bodyText": "@cbuescher\nUgh... Honestly, I didn't even look at what splitSmart does and I simply used that because it was used to split rules on =>. Now I took a look (although that helper itself does not have any test) and I'm confused.\nUnlike String.split splitSmart does not return empty tokens. So the result of splitting this:\n=>one=>two=>=>\n\nis [one, two] which is considered a valid rule. IMO it should not.\nI believe a regular String.split should be used. If we want to support \"a\\\\,b\" tokens then we should split on \"\"(?<!\\\\\\\\),\" regexp and then we should unescape each token before adding it - this is something that I would normally use StringEscapeUtils.unescapeJava from apache commons-text, but you don't seem to use it. What do you suggest in this case? Do you have a similar helper?", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r426303612", "createdAt": "2020-05-17T20:51:40Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);\n             }\n \n-            if (key.isEmpty() || override.isEmpty()) {\n+            List<String> keys = Strings.splitSmart(sides.get(0), \",\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzA3OQ=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwMjg1NQ==", "bodyText": "=>one=>two=>=>\n\nGood point, maybe we should use simple String.split for the LHS/RHS separation and reject invalid patterns indeed.\nFor the LHS split on , I'm find both ways. If \"splitSmart\" works for this and supports escaping we can still consider using that, but simple String splitting on , is also fine if other solutions add too much complexity. I don't think we really need to support commas in LHS entries if its too complicated.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r427402855", "createdAt": "2020-05-19T15:40:47Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);\n             }\n \n-            if (key.isEmpty() || override.isEmpty()) {\n+            List<String> keys = Strings.splitSmart(sides.get(0), \",\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzA3OQ=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzE0MDgxOnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozNzoyNlrOGUx-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyOTo1NlrOGVWF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzU4NQ==", "bodyText": "Could you add unit testing for this (and the later) exception?", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424443585", "createdAt": "2020-05-13T13:37:26Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzI0MQ==", "bodyText": "Sure, I'll do it tonight.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r425027241", "createdAt": "2020-05-14T10:15:27Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzU4NQ=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzcxOQ==", "bodyText": "BTW - what do you need about having more precise error messages (telling exactly what's wrong)?", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r425027719", "createdAt": "2020-05-14T10:16:18Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzU4NQ=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzNTI0MA==", "bodyText": "Sure, feel free to extend the message with more details if you think its helpful and doesn't add to much complexity.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r425035240", "createdAt": "2020-05-14T10:29:56Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzU4NQ=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIzMTk4OnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NzoxMFrOGUy5Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTozNTo1MVrOGXmY8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng==", "bodyText": "Since this is a static method, it should be possible to unit test it directly. I think it would also be an improvement to make it return the StemmerOverrideFilter.Builder instead of passing it in and adding to it inside the method. That way you could use the returned builder to create a StemmerOverrideMap from it, which I think can be queried for testing. Its a Lucene class so not so easy to directly work with, but I lifted some parts from StemmerOverrideFilter and something like this should work:\n       StemmerOverrideMap map = builder.build();\n        BytesReader fstReader = map.getBytesReader();\n        final Arc<BytesRef> scratchArc = new FST.Arc<>();\n        String key = \"something\"\n        BytesRef bytesRef = map.get(key.toCharArray(), key.length() , scratchArc, fstReader);\n        assertEquals(\"someValue\", bytesRef.utf8ToString());\n\nIt would be nice to test a few more cases (with commas, trimming of whitespaces etc...) and the exception cases in a new unit test for StemmerOverrideTokenFilterFactory (that is a new StemmerOverrideTokenFilterFactoryTests) in the analysis-common module.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424458586", "createdAt": "2020-05-13T13:57:10Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODY3MA==", "bodyText": "@cbuescher yes, the only reason I didn't write any tests was that I didn't find any unit test classes for this token filter. But I agree that it needs it, even more now that there is some extra logic.\nI'll take a look how you test token filters and address your comments.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r425028670", "createdAt": "2020-05-14T10:17:56Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzODczMQ==", "bodyText": "I think there's no need to emulate what other token filters are testing at this point (unless you like to), just adding StemmerOverrideTokenFilterFactoryTests to org.elasticsearch.analysis.common and add tests for the static method should be okay. Looks like most similar \"*FactoryTests\" extend ESTokenStreamTestCase, which might be a good idea to do as well, then it might be easier to add more test functionality going forward. There's some more info on how to run certain tests only in the TESTING.asciidoc, if you have other questions let me know.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r425038731", "createdAt": "2020-05-14T10:36:08Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNTE2NQ==", "bodyText": "@cbuescher is it really worth to use the complicated StemmerOverrideMap lookup API to verify that parseRules added the right key and value?\nTo test unhappy cases I would simply try to instantiate StemmerOverrideTokenFilterFactory and check if it throws (I would do it with a loop and expectThrows as you don't seem to use JUnit's parameterized tests).\nHappy case (valid rules) could be tested with analysis output of its TokenStream.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r426305165", "createdAt": "2020-05-17T21:07:58Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5OTQwOA==", "bodyText": "Sure, use anything you think makes sense. The StemmerOverrideMap API was just a thought.  Any approach that is easy to set up and read and that doesn't need to spin up a whole cluster (i.e. integration test) is fine. Testing some valid and invalid cases is the most important thing I think.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r427399408", "createdAt": "2020-05-19T15:35:51Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng=="}, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU0Mjc1OnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0MTozMlrOGcHwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0MTozMlrOGcHwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MDMyNA==", "bodyText": "This case was valid before when split still happened with smartSplit but it's not anymore.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r432140324", "createdAt": "2020-05-28T21:41:32Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.analysis.common;\n+\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.WhitespaceTokenizer;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.analysis.AnalysisTestsHelper;\n+import org.elasticsearch.index.analysis.TokenFilterFactory;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.ESTokenStreamTestCase;\n+import org.junit.Rule;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+public class StemmerOverrideTokenFilterFactoryTests extends ESTokenStreamTestCase {\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    public TokenFilterFactory create(String... rules) throws IOException {\n+        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(\n+            Settings.builder()\n+                .put(\"index.analysis.filter.my_stemmer_override.type\", \"stemmer_override\")\n+                .putList(\"index.analysis.filter.my_stemmer_override.rules\", rules)\n+                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+                .build(),\n+            new CommonAnalysisPlugin());\n+\n+        return analysis.tokenFilter.get(\"my_stemmer_override\");\n+    }\n+\n+    public void testRuleError() {\n+        for (String rule : List.of(\n+            \"\",        // empty\n+            \"a\",       // no arrow\n+            \"a=>b=>c\", // multiple arrows\n+            \"=>a=>b\",  // multiple arrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91be65109cd5612955a6dbb70812abbf1e76cd29"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE5ODIyOnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMjo1NlrOGchvGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo0MjoxM1rOGciFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NjA0Mg==", "bodyText": "Another small complaint coming from CI here:\n\"Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale]\"\nThe \"forbiddenAPIs\" plugin is configured to require several string-related methods to specify the locale explicitely, e.g. using Locale.ROOT here would work.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r432566042", "createdAt": "2020-05-29T15:32:56Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.analysis.common;\n+\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.WhitespaceTokenizer;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.analysis.AnalysisTestsHelper;\n+import org.elasticsearch.index.analysis.TokenFilterFactory;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.ESTokenStreamTestCase;\n+import org.junit.Rule;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+public class StemmerOverrideTokenFilterFactoryTests extends ESTokenStreamTestCase {\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    public static TokenFilterFactory create(String... rules) throws IOException {\n+        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(\n+            Settings.builder()\n+                .put(\"index.analysis.filter.my_stemmer_override.type\", \"stemmer_override\")\n+                .putList(\"index.analysis.filter.my_stemmer_override.rules\", rules)\n+                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+                .build(),\n+            new CommonAnalysisPlugin());\n+\n+        return analysis.tokenFilter.get(\"my_stemmer_override\");\n+    }\n+\n+    public void testRuleError() {\n+        for (String rule : List.of(\n+            \"\",        // empty\n+            \"a\",       // no arrow\n+            \"a=>b=>c\", // multiple arrows\n+            \"=>a=>b\",  // multiple arrows\n+            \"a=>\",     // no override\n+            \"a=>b,c\",  // multiple overrides\n+            \"=>a\",     // no keys\n+            \"a,=>b\"    // empty key\n+        )) {\n+            expectThrows(RuntimeException.class, String.format(\"Should fail for invalid rule: '%s'\", rule), () -> create(rule));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MTc5OA==", "bodyText": "ok, I've just pushed a fix", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r432571798", "createdAt": "2020-05-29T15:42:13Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.analysis.common;\n+\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.WhitespaceTokenizer;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.analysis.AnalysisTestsHelper;\n+import org.elasticsearch.index.analysis.TokenFilterFactory;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.ESTokenStreamTestCase;\n+import org.junit.Rule;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+public class StemmerOverrideTokenFilterFactoryTests extends ESTokenStreamTestCase {\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    public static TokenFilterFactory create(String... rules) throws IOException {\n+        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(\n+            Settings.builder()\n+                .put(\"index.analysis.filter.my_stemmer_override.type\", \"stemmer_override\")\n+                .putList(\"index.analysis.filter.my_stemmer_override.rules\", rules)\n+                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+                .build(),\n+            new CommonAnalysisPlugin());\n+\n+        return analysis.tokenFilter.get(\"my_stemmer_override\");\n+    }\n+\n+    public void testRuleError() {\n+        for (String rule : List.of(\n+            \"\",        // empty\n+            \"a\",       // no arrow\n+            \"a=>b=>c\", // multiple arrows\n+            \"=>a=>b\",  // multiple arrows\n+            \"a=>\",     // no override\n+            \"a=>b,c\",  // multiple overrides\n+            \"=>a\",     // no keys\n+            \"a,=>b\"    // empty key\n+        )) {\n+            expectThrows(RuntimeException.class, String.format(\"Should fail for invalid rule: '%s'\", rule), () -> create(rule));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NjA0Mg=="}, "originalCommit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}