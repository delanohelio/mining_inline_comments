{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzYyODU0", "number": 61825, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo0NTozN1rOEfkGMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoyMTowM1rOEfk5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTMyNzIwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BinaryImplNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo0NTozN1rOHL6buQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjowNzo0NFrOHMttFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Mzc1Mw==", "bodyText": "Brief comment on what this node is", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482253753", "createdAt": "2020-09-02T17:45:37Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BinaryImplNode.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.phase.IRTreeVisitor;\n+import org.elasticsearch.painless.symbol.WriteScope;\n+\n+public class BinaryImplNode extends BinaryNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5Mzc4MA==", "bodyText": "Added.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483093780", "createdAt": "2020-09-03T16:07:44Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BinaryImplNode.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.phase.IRTreeVisitor;\n+import org.elasticsearch.painless.symbol.WriteScope;\n+\n+public class BinaryImplNode extends BinaryNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Mzc1Mw=="}, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQ0NzExOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxODo1MVrOHL7n3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoxMDo1N1rOHMt1hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MzI0Ng==", "bodyText": "add a line about the subtlety here.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482273246", "createdAt": "2020-09-02T18:18:51Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -427,89 +426,63 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n-        ExpressionNode irExpressionNode;\n-\n-        // this load/store is only a load (read)\n-        if (irStoreNode == null) {\n-            ExpressionNode irAccessNode;\n-\n-            // this load is a symbol or dot load with no index node\n-            if (irIndexNode == null) {\n-                irAccessNode = irLoadNode;\n-            // this load is a dot or brace load with an index node\n-            } else {\n-                BinaryNode irBinaryNode = new BinaryNode();\n-                irBinaryNode.setLocation(location);\n-                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n-                irBinaryNode.setLeftNode(irIndexNode);\n-                irBinaryNode.setRightNode(irLoadNode);\n-\n-                irAccessNode = irBinaryNode;\n+        // build out the load structure for load/compound assignment or the store structure for just store\n+        ExpressionNode irExpressionNode = irLoadNode != null ? irLoadNode : irStoreNode;\n+\n+        // this load/store is a dot or brace load\n+        if (irPrefixNode != null) {\n+            // this load/store requires and index\n+            if (irIndexNode != null) {\n+                BinaryImplNode binaryImplNode = new BinaryImplNode();\n+                binaryImplNode.setLocation(location);\n+                binaryImplNode.setExpressionType(void.class);\n+\n+                if (isNullSafe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5NTk0MQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483095941", "createdAt": "2020-09-03T16:10:57Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -427,89 +426,63 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n-        ExpressionNode irExpressionNode;\n-\n-        // this load/store is only a load (read)\n-        if (irStoreNode == null) {\n-            ExpressionNode irAccessNode;\n-\n-            // this load is a symbol or dot load with no index node\n-            if (irIndexNode == null) {\n-                irAccessNode = irLoadNode;\n-            // this load is a dot or brace load with an index node\n-            } else {\n-                BinaryNode irBinaryNode = new BinaryNode();\n-                irBinaryNode.setLocation(location);\n-                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n-                irBinaryNode.setLeftNode(irIndexNode);\n-                irBinaryNode.setRightNode(irLoadNode);\n-\n-                irAccessNode = irBinaryNode;\n+        // build out the load structure for load/compound assignment or the store structure for just store\n+        ExpressionNode irExpressionNode = irLoadNode != null ? irLoadNode : irStoreNode;\n+\n+        // this load/store is a dot or brace load\n+        if (irPrefixNode != null) {\n+            // this load/store requires and index\n+            if (irIndexNode != null) {\n+                BinaryImplNode binaryImplNode = new BinaryImplNode();\n+                binaryImplNode.setLocation(location);\n+                binaryImplNode.setExpressionType(void.class);\n+\n+                if (isNullSafe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MzI0Ng=="}, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQ1Njc0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoyMDozNFrOHL7uDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoxMjoxNFrOHMt4yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NDgzMA==", "bodyText": "maybe put these after the control structure on the same line so intellij doesn't keep \"intelligently\" moving them.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482274830", "createdAt": "2020-09-02T18:20:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -862,7 +835,7 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 stringConcatenationNode.setLocation(irStoreNode.getLocation());\n                 stringConcatenationNode.setExpressionType(String.class);\n                 irCompoundNode = stringConcatenationNode;\n-            // handles when the operation is mathematical\n+                // handles when the operation is mathematical", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5Njc3OA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483096778", "createdAt": "2020-09-03T16:12:14Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -862,7 +835,7 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 stringConcatenationNode.setLocation(irStoreNode.getLocation());\n                 stringConcatenationNode.setExpressionType(String.class);\n                 irCompoundNode = stringConcatenationNode;\n-            // handles when the operation is mathematical\n+                // handles when the operation is mathematical", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NDgzMA=="}, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQ1OTMxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoyMTowM1rOHL7vuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoxMjoxOFrOHMt48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NTI1OQ==", "bodyText": "indented", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482275259", "createdAt": "2020-09-02T18:21:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -938,9 +911,11 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 irBinaryMathNode.setLeftNode(irLoadNode);\n                 irBinaryMathNode.setRightNode(irValueNode);\n             }\n-        // handles a standard assignment\n+\n+            irAssignmentNode = irStoreNode;\n+            // handles a standard assignment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5NjgxOQ==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483096819", "createdAt": "2020-09-03T16:12:18Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -938,9 +911,11 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 irBinaryMathNode.setLeftNode(irLoadNode);\n                 irBinaryMathNode.setRightNode(irValueNode);\n             }\n-        // handles a standard assignment\n+\n+            irAssignmentNode = irStoreNode;\n+            // handles a standard assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NTI1OQ=="}, "originalCommit": {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed"}, "originalPosition": 240}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}