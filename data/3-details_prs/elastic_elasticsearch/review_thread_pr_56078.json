{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDY0NjE3", "number": 56078, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo1MToyNFrOETzZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0MDowMVrOET0XXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjAwNTgxOnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/io/Streams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo1MToyNFrOG5vp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo1MToyNFrOG5vp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMjc4Nw==", "bodyText": "Can we name this method copy and also move the try/catch/finally logic here? I guess we can add a flag about whether to close the streams and you can various methods like:\npublic static long copy(final InputStream in, final OutputStream out) throws IOException {\n    copy(in, out, buffer.get(), true);\n}\n\npublic static long copy(final InputStream in, final OutputStream out, boolean close) throws IOException {\n    copy(in, out, buffer.get(), close);\n}\n\npublic static long copy(final InputStream in, final OutputStream out, byte[] buffer) {\n    copy(in, out, buffer, true);\n}\n\npublic static long copy(final InputStream in, final OutputStream out, byte[] buffer, boolean close) throws IOException {\n    Exception err = null;\n    try {\n        long byteCount = 0;\n        int bytesRead;\n        while ((bytesRead = in.read(buffer)) != -1) {\n            out.write(buffer, 0, bytesRead);\n            byteCount += bytesRead;\n        }\n        out.flush();\n        return byteCount;\n    } catch (Exception e) {\n        err = e;\n        throw e;\n    } finally {\n        if (close) {\n            IOUtils.close(err, in, out);\n        }\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463202787", "createdAt": "2020-07-30T18:51:24Z", "author": {"login": "jaymode"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/io/Streams.java", "diffHunk": "@@ -56,4 +56,21 @@ public static long copy(final InputStream in, final OutputStream out) throws IOE\n         }\n     }\n \n+    /**\n+     * Returns a temporary thread local buffer.\n+     */\n+    public static byte[] getTemporaryBuffer() {\n+        return tempBuffer.get();\n+    }\n+\n+    public static long doCopy(InputStream in, OutputStream out, byte[] buffer) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb30d7fcd9e966f986621ab1ec40784b05ff9f9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjA3NTE2OnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/io/Streams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxMjo0OFrOG5wU5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxMjo0OFrOG5wU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMzc5OA==", "bodyText": "Can we do without this method? I think exposing a buffer from this class could be error prone", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463213798", "createdAt": "2020-07-30T19:12:48Z", "author": {"login": "jaymode"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/io/Streams.java", "diffHunk": "@@ -56,4 +56,21 @@ public static long copy(final InputStream in, final OutputStream out) throws IOE\n         }\n     }\n \n+    /**\n+     * Returns a temporary thread local buffer.\n+     */\n+    public static byte[] getTemporaryBuffer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb30d7fcd9e966f986621ab1ec40784b05ff9f9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjExNjc4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContentGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToyNToyN1rOG5wuKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToyNToyN1rOG5wuKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMDI2Ng==", "bodyText": "I think we should just be able to remove this method and use Streams#copy?", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463220266", "createdAt": "2020-07-30T19:25:27Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContentGenerator.java", "diffHunk": "@@ -487,24 +475,15 @@ public boolean isClosed() {\n      *\n      * @param in  the stream to copy from\n      * @param out the stream to copy to\n-     * @return the number of bytes copied\n      * @throws IOException in case of I/O errors\n      */\n-    private static long copyStream(InputStream in, OutputStream out) throws IOException {\n+    private static void copyStream(InputStream in, OutputStream out) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fd331b2e99fd97cde716ccd7d9be77c4a2baf9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjEyODI4OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToyODo1NlrOG5w1Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToyODo1NlrOG5w1Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMjA3OQ==", "bodyText": "With my suggestion, we can just let Streams.copy handle the closing here?", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463222079", "createdAt": "2020-07-30T19:28:56Z", "author": {"login": "jaymode"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java", "diffHunk": "@@ -309,7 +309,9 @@ public boolean isOpen() {\n                     public void close() throws IOException {\n                         SocketAccess.doPrivilegedVoidIOException(writeChannel::close);\n                     }\n-                }), buffer);\n+                })) {\n+                    org.elasticsearch.core.internal.io.Streams.doCopy(inputStream, out, buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fd331b2e99fd97cde716ccd7d9be77c4a2baf9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjE2MzUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0MDowMVrOG5xLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzo0NToyN1rOG5_JTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzY4OQ==", "bodyText": "I think we should consolidate the two Streams classes since the internal class was added for splitting the method out for a MR jar to take advantage of JDK9's transferTo method in #29322, but we don't use transferTo anymore for copying and on master we are already at JDK11 for a minimum.", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463227689", "createdAt": "2020-07-30T19:40:01Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java", "diffHunk": "@@ -212,7 +212,8 @@ public void writeBlobAtomic(final String blobName, final InputStream inputStream\n     private void writeToPath(InputStream inputStream, Path tempBlobPath, long blobSize) throws IOException {\n         try (OutputStream outputStream = Files.newOutputStream(tempBlobPath, StandardOpenOption.CREATE_NEW)) {\n             final int bufferSize = blobStore.bufferSizeInBytes();\n-            Streams.copy(inputStream, outputStream, new byte[blobSize < bufferSize ? Math.toIntExact(blobSize) : bufferSize]);\n+            org.elasticsearch.core.internal.io.Streams.doCopy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fd331b2e99fd97cde716ccd7d9be77c4a2baf9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1NjU5MQ==", "bodyText": "++ to that idea but maybe do it in another PR since that involves quite a few unrelated changes I think (since the one in :server uses BytesReference in a bunch of places and such).", "url": "https://github.com/elastic/elasticsearch/pull/56078#discussion_r463456591", "createdAt": "2020-07-31T07:45:27Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java", "diffHunk": "@@ -212,7 +212,8 @@ public void writeBlobAtomic(final String blobName, final InputStream inputStream\n     private void writeToPath(InputStream inputStream, Path tempBlobPath, long blobSize) throws IOException {\n         try (OutputStream outputStream = Files.newOutputStream(tempBlobPath, StandardOpenOption.CREATE_NEW)) {\n             final int bufferSize = blobStore.bufferSizeInBytes();\n-            Streams.copy(inputStream, outputStream, new byte[blobSize < bufferSize ? Math.toIntExact(blobSize) : bufferSize]);\n+            org.elasticsearch.core.internal.io.Streams.doCopy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzY4OQ=="}, "originalCommit": {"oid": "69fd331b2e99fd97cde716ccd7d9be77c4a2baf9"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2445, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}