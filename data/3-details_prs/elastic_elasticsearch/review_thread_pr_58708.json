{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjkwMjMz", "number": 58708, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyODo0OFrOEKGM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDoyODowMVrOEKW3fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDIyODQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyODo0OFrOGq8Vwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyODo0OFrOGq8Vwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MTk4Ng==", "bodyText": "Nit: The name or value is usually placed inside a pair of brackets in error messages, .e.g ... but was [xxx].", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447681986", "createdAt": "2020-06-30T13:28:48Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }\n+            } else {\n+                tokensListener.onFailure(new ElasticsearchSecurityException(\"Failed to exchange code for Id Token using Token Endpoint.\" +\n+                    \"Expected client authentication method to be one of \" + OpenIdConnectRealmSettings.CLIENT_AUTH_METHODS + \" but was \" +\n+                    rpConfig.getClientAuthenticationMethod()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI1MzU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzo0OVrOGq8kxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMTo1OVrOGq_SvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA==", "bodyText": "Maybe I am missing something obvious. But client_id is not added as one of the request parameters? The map returned from ClientSecretJWT.toParameters() only contains client_assertion and client_assertion_type if I read the code correctly.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447685828", "createdAt": "2020-06-30T13:33:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTQ0NA==", "bodyText": "But client_id is not added as one of the request parameters?\n\nIt's not, it doesn't need to be. It is added as the iss claim of the JWT and validated from there.\n\nonly contains client_assertion and client_assertion_type\n\nyes, these are the two parameters needed, see https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447719444", "createdAt": "2020-06-30T14:18:14Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTM2NA==", "bodyText": "You are right. For a moment, I forgot how JWT is organized. It's too late for me ...", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447725364", "createdAt": "2020-06-30T14:25:43Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDM2NQ==", "bodyText": "I know that feeling !!! :) No need to go through this today, it can definitely wait. I raised the PR because I had it ready since last week", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447730365", "createdAt": "2020-06-30T14:31:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI2ODcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNzoxMVrOGq8uRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNzoxMVrOGq8uRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4ODI2Mg==", "bodyText": "Nit: need a blank line before this method.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447688262", "createdAt": "2020-06-30T13:37:11Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticatorTests.java", "diffHunk": "@@ -841,6 +842,8 @@ private RelyingPartyConfiguration getDefaultRpConfig() throws URISyntaxException\n             new ResponseType(\"id_token\", \"token\"),\n             new Scope(\"openid\"),\n             JWSAlgorithm.RS384,\n+            ClientAuthenticationMethod.CLIENT_SECRET_BASIC,\n+            JWSAlgorithm.HS384,\n             new URI(\"https://rp.elastic.co/successfull_logout\"));\n     }\n     private RelyingPartyConfiguration getRpConfig(String alg) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMxMzcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealmSettingsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0NjozN1rOGq9J0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyNjoxNlrOGq_Auw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTMxMg==", "bodyText": "\"none\", \"None\", \"noNe\", \"nOnE\", \"NonE\" ... \ud83d\udc4d that we will not have this issue.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447695312", "createdAt": "2020-06-30T13:46:37Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealmSettingsTests.java", "diffHunk": "@@ -327,6 +362,45 @@ public void testInvalidProxyHostThrowsError() {\n         ));\n     }\n \n+    public void testInvalidClientAuthenticationMethodThrowsError() {\n+        final Settings.Builder settingsBuilder = Settings.builder()\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_AUTHORIZATION_ENDPOINT), \"https://op.example.com/login\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_ISSUER), \"https://op.example.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_JWKSET_PATH), \"https://op.example.com/jwks.json\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_TOKEN_ENDPOINT), \"https://op.example.com/token\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.PRINCIPAL_CLAIM.getClaim()), \"sub\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_REDIRECT_URI), \"https://rp.my.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_ID), \"rp-my\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_AUTH_METHOD), \"none\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTc1NQ==", "bodyText": "This would be testing the OP though, not our implementation, as it is the OP that should not validate a client JWT with none algorithm. We do not disallow none specifically, we use an allowlist that only allows \"HS256\", \"HS384\", \"HS512\"\nI like the suggestion though, we can use it in OpenIdConnectAuthenticatorTests.testImplicitFlowFailsWithNoneAlgorithm which tests our implementation", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447725755", "createdAt": "2020-06-30T14:26:16Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealmSettingsTests.java", "diffHunk": "@@ -327,6 +362,45 @@ public void testInvalidProxyHostThrowsError() {\n         ));\n     }\n \n+    public void testInvalidClientAuthenticationMethodThrowsError() {\n+        final Settings.Builder settingsBuilder = Settings.builder()\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_AUTHORIZATION_ENDPOINT), \"https://op.example.com/login\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_ISSUER), \"https://op.example.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_JWKSET_PATH), \"https://op.example.com/jwks.json\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_TOKEN_ENDPOINT), \"https://op.example.com/token\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.PRINCIPAL_CLAIM.getClaim()), \"sub\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_REDIRECT_URI), \"https://rp.my.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_ID), \"rp-my\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_AUTH_METHOD), \"none\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTMxMg=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQzNDA2OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxMTo1NFrOGq-U-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMjowMlrOGq_S8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA==", "bodyText": "I don't see test.fixtures.elasticsearch-node.9200 get set anywhere. How does this work?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447714554", "createdAt": "2020-06-30T14:11:54Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -65,16 +71,31 @@\n     private static final String REALM_NAME = \"c2id\";\n     private static final String REALM_NAME_IMPLICIT = \"c2id-implicit\";\n     private static final String REALM_NAME_PROXY = \"c2id-proxy\";\n+    private static final String REALM_NAME_CLIENT_POST_AUTH = \"c2id-post\";\n+    private static final String REALM_NAME_CLIENT_JWT_AUTH = \"c2id-jwt\";\n     private static final String FACILITATOR_PASSWORD = \"f@cilit@t0r\";\n-    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id/clients\";\n-    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id-login/api/\";\n+    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id/clients\";\n+    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id-login/api/\";\n+    private static final String ES_PORT = getEphemeralTcpPortFromProperty(\"elasticsearch-node\", \"9200\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNzUyNA==", "bodyText": "elasticsearch-node is the name of the elasticsearch service in https://github.com/elastic/elasticsearch/pull/58708/files#diff-2be63811028f90650408e594c29099b9R3 and 9200 is defined there in the ports section. I assume it is the gradle docker compose plugin that handles this magic or something in our buildSrc , Mark can probably share more details", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447727524", "createdAt": "2020-06-30T14:28:34Z", "author": {"login": "jkakavas"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -65,16 +71,31 @@\n     private static final String REALM_NAME = \"c2id\";\n     private static final String REALM_NAME_IMPLICIT = \"c2id-implicit\";\n     private static final String REALM_NAME_PROXY = \"c2id-proxy\";\n+    private static final String REALM_NAME_CLIENT_POST_AUTH = \"c2id-post\";\n+    private static final String REALM_NAME_CLIENT_JWT_AUTH = \"c2id-jwt\";\n     private static final String FACILITATOR_PASSWORD = \"f@cilit@t0r\";\n-    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id/clients\";\n-    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id-login/api/\";\n+    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id/clients\";\n+    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id-login/api/\";\n+    private static final String ES_PORT = getEphemeralTcpPortFromProperty(\"elasticsearch-node\", \"9200\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDQxNg==", "bodyText": "Ah awesome! buildSrc magic. TIL", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447730416", "createdAt": "2020-06-30T14:32:02Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -65,16 +71,31 @@\n     private static final String REALM_NAME = \"c2id\";\n     private static final String REALM_NAME_IMPLICIT = \"c2id-implicit\";\n     private static final String REALM_NAME_PROXY = \"c2id-proxy\";\n+    private static final String REALM_NAME_CLIENT_POST_AUTH = \"c2id-post\";\n+    private static final String REALM_NAME_CLIENT_JWT_AUTH = \"c2id-jwt\";\n     private static final String FACILITATOR_PASSWORD = \"f@cilit@t0r\";\n-    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id/clients\";\n-    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id-login/api/\";\n+    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id/clients\";\n+    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id-login/api/\";\n+    private static final String ES_PORT = getEphemeralTcpPortFromProperty(\"elasticsearch-node\", \"9200\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA=="}, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5OTAwOnYy", "diffSide": "RIGHT", "path": "x-pack/test/idp-fixture/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDoxM1rOGrKbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDoxM1rOGrKbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjg0OA==", "bodyText": "I wonder if we can remove elasticsearch.build plugin. This project contains no code or tests, it's simply a test fixture.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447912848", "createdAt": "2020-06-30T19:00:13Z", "author": {"login": "mark-vieira"}, "path": "x-pack/test/idp-fixture/build.gradle", "diffHunk": "@@ -1,4 +1,36 @@\n+import org.elasticsearch.gradle.VersionProperties\n+import org.elasticsearch.gradle.Architecture\n+\n apply plugin: 'elasticsearch.build'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjkxMDUxOnYy", "diffSide": "RIGHT", "path": "x-pack/test/idp-fixture/docker-compose.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzo1NjozM1rOGrV6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozMzoxNFrOGrj8wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwMTAwNA==", "bodyText": "Is this an image that we maintain? If so, where can I find the Dockerfile that builds the image?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448101004", "createdAt": "2020-07-01T03:56:33Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/docker-compose.yml", "diffHunk": "@@ -40,11 +153,13 @@ services:\n       - ./idp/shib-jetty-base/start.d/ssl.ini:/opt/shib-jetty-base/start.d/ssl.ini\n \n   oidc-provider:\n-    image: \"c2id/c2id-server:7.8\"\n+    image: \"c2id/c2id-server:9.5\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4NzgwMA==", "bodyText": "Nope, we use the official one that the folks from connect2id ( who implement the OP ) publish in Dockerhub. I dont think they publish the Dockerfile, some details are in https://connect2id.com/products/server/docs/guides/docker", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448187800", "createdAt": "2020-07-01T08:02:44Z", "author": {"login": "jkakavas"}, "path": "x-pack/test/idp-fixture/docker-compose.yml", "diffHunk": "@@ -40,11 +153,13 @@ services:\n       - ./idp/shib-jetty-base/start.d/ssl.ini:/opt/shib-jetty-base/start.d/ssl.ini\n \n   oidc-provider:\n-    image: \"c2id/c2id-server:7.8\"\n+    image: \"c2id/c2id-server:9.5\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwMTAwNA=="}, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMDk0NA==", "bodyText": "Thanks! I checked the image on Dockerhub and it has zero documentation. I found it hard to believe it was the official image ... apparently I am wrong.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448330944", "createdAt": "2020-07-01T12:33:14Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/docker-compose.yml", "diffHunk": "@@ -40,11 +153,13 @@ services:\n       - ./idp/shib-jetty-base/start.d/ssl.ini:/opt/shib-jetty-base/start.d/ssl.ini\n \n   oidc-provider:\n-    image: \"c2id/c2id-server:7.8\"\n+    image: \"c2id/c2id-server:9.5\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwMTAwNA=="}, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjk1MTM3OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDoyMzo0M1rOGrWSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowMDozOFrOGrbJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNzA0MA==", "bodyText": "Not sure where this Bearer token is picked from. I guess it has something to do with the docker image?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448107040", "createdAt": "2020-07-01T04:23:43Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -95,30 +117,71 @@ public static void registerClients() throws Exception {\n                 \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n                 \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"]\" +\n                 \"}\";\n+            String postClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_post\\\"\" +\n+                \"}\";\n+            String jwtClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post-jwt\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_jwt\\\"\" +\n+                \"}\";\n             HttpPost httpPost = new HttpPost(REGISTRATION_URL);\n             final BasicHttpContext context = new BasicHttpContext();\n             httpPost.setEntity(new StringEntity(codeClient, ContentType.APPLICATION_JSON));\n             httpPost.setHeader(\"Accept\", \"application/json\");\n             httpPost.setHeader(\"Content-type\", \"application/json\");\n             httpPost.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost, context));\n-            assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\n-            httpPost.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n+\n             HttpPost httpPost2 = new HttpPost(REGISTRATION_URL);\n             httpPost2.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n             httpPost2.setHeader(\"Accept\", \"application/json\");\n             httpPost2.setHeader(\"Content-type\", \"application/json\");\n             httpPost2.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response2 = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost2, context));\n-            assertThat(response2.getStatusLine().getStatusCode(), equalTo(200));\n+\n+            HttpPost httpPost3 = new HttpPost(REGISTRATION_URL);\n+            httpPost3.setEntity(new StringEntity(postClient, ContentType.APPLICATION_JSON));\n+            httpPost3.setHeader(\"Accept\", \"application/json\");\n+            httpPost3.setHeader(\"Content-type\", \"application/json\");\n+            httpPost3.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4NjcwMw==", "bodyText": "We define this in override.properties which we bind mount to the container, see the docker compose file and it is used as a static credential to talk to the OPs API , I'll add a comment here when I get to merge this", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448186703", "createdAt": "2020-07-01T08:00:38Z", "author": {"login": "jkakavas"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -95,30 +117,71 @@ public static void registerClients() throws Exception {\n                 \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n                 \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"]\" +\n                 \"}\";\n+            String postClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_post\\\"\" +\n+                \"}\";\n+            String jwtClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post-jwt\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_jwt\\\"\" +\n+                \"}\";\n             HttpPost httpPost = new HttpPost(REGISTRATION_URL);\n             final BasicHttpContext context = new BasicHttpContext();\n             httpPost.setEntity(new StringEntity(codeClient, ContentType.APPLICATION_JSON));\n             httpPost.setHeader(\"Accept\", \"application/json\");\n             httpPost.setHeader(\"Content-type\", \"application/json\");\n             httpPost.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost, context));\n-            assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\n-            httpPost.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n+\n             HttpPost httpPost2 = new HttpPost(REGISTRATION_URL);\n             httpPost2.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n             httpPost2.setHeader(\"Accept\", \"application/json\");\n             httpPost2.setHeader(\"Content-type\", \"application/json\");\n             httpPost2.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response2 = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost2, context));\n-            assertThat(response2.getStatusLine().getStatusCode(), equalTo(200));\n+\n+            HttpPost httpPost3 = new HttpPost(REGISTRATION_URL);\n+            httpPost3.setEntity(new StringEntity(postClient, ContentType.APPLICATION_JSON));\n+            httpPost3.setHeader(\"Accept\", \"application/json\");\n+            httpPost3.setHeader(\"Content-type\", \"application/json\");\n+            httpPost3.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNzA0MA=="}, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjk1ODY4OnYy", "diffSide": "RIGHT", "path": "x-pack/test/idp-fixture/oidc/override.properties", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDoyODowMVrOGrWWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozNzo0MVrOGrkGyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwODEwNQ==", "bodyText": "Same here. Would be great to learn how these configurations work.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448108105", "createdAt": "2020-07-01T04:28:01Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/oidc/override.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-op.issuer=http://localhost:8080\n-op.authz.endpoint=http://localhost:8080/c2id-login/\n+op.issuer=http://oidc-provider:8080/c2id\n+op.authz.endpoint=http://oidc-provider:8080/c2id-login/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDgyMg==", "bodyText": "See https://connect2id.com/products/server/docs/guides/docker for some details. Issuer is the OPs issuer string that it will use to populate the iss claim in the ID Token. The OP also uses this to determine the token  endpoint and userinfo endpoint it expects to be listening on by adding the proper suffix.\nThe authz.endpoint is an API endpoint that we use to programmatically authenticate users with the OP.\nWe use the docker compose service name oidc-provider so that es which also runs in docker can access it via it (docker networking magic :) )", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448190822", "createdAt": "2020-07-01T08:08:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/test/idp-fixture/oidc/override.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-op.issuer=http://localhost:8080\n-op.authz.endpoint=http://localhost:8080/c2id-login/\n+op.issuer=http://oidc-provider:8080/c2id\n+op.authz.endpoint=http://oidc-provider:8080/c2id-login/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwODEwNQ=="}, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMzUxNQ==", "bodyText": "Sorry for not being clear here. I wasn't asking about oidc-provider, which I understand it's docker's doing. Was more about property names, e.g. op.authz.endpoint and what do they mean to the OP. The guide you link should answer all my questions. Thanks!", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448333515", "createdAt": "2020-07-01T12:37:41Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/oidc/override.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-op.issuer=http://localhost:8080\n-op.authz.endpoint=http://localhost:8080/c2id-login/\n+op.issuer=http://oidc-provider:8080/c2id\n+op.authz.endpoint=http://oidc-provider:8080/c2id-login/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwODEwNQ=="}, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2267, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}