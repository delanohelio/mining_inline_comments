{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDU4NzQ4", "number": 53730, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0Mzo0NlrODqh5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MTozNVrODq5tQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTIyMTMwOnYy", "diffSide": "RIGHT", "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0Mzo0NlrOF6VZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzo0NVrOF69UGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMjQxMA==", "bodyText": "Hmm, should we maybe split this out into it's own test?  Just thinking that long multi-step yaml tests can be tricky to debug sometimes.\nHaven't looked at the rest of the tests in this yaml though, so it might not be easy to move the indexing (or whatever else) steps up to the setup though.", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r396712410", "createdAt": "2020-03-23T19:43:46Z", "author": {"login": "polyfractal"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzEyMw==", "bodyText": "I'll move it, sure! They can get hard to debug.", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397347123", "createdAt": "2020-03-24T17:47:35Z", "author": {"login": "nik9000"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMjQxMA=="}, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NDkxNQ==", "bodyText": "Ok - this is a test that doesn't clear indices after it runs. So moving things around is a bit more complex than we'd like to be honest. I can do it, but I think it should wait for a followup.", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397354915", "createdAt": "2020-03-24T17:59:22Z", "author": {"login": "nik9000"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMjQxMA=="}, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjI5Nw==", "bodyText": "Ah ok, no worries then.  not worth re-arranging everything for \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397366297", "createdAt": "2020-03-24T18:17:45Z", "author": {"login": "polyfractal"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMjQxMA=="}, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTI3MTI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo1NzozNlrOF6V5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0Nzo1M1rOF68KBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDUzNQ==", "bodyText": "Looks like the comment trails off without finishing it's thought :)", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r396720535", "createdAt": "2020-03-23T19:57:36Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java", "diffHunk": "@@ -54,35 +59,56 @@\n         }\n     };\n \n-    private final List<SiblingPipelineAggregator> topLevelPipelineAggregators;\n+    /**\n+     * The way to build a tree of pipeline aggregators. Used only for\n+     * serialization backwards compatibility.\n+     */\n+    private final Supplier<PipelineAggregator.PipelineTree> pipelineTreeForBwcSerialization;\n \n     /**\n      * Constructs a new aggregation.\n      */\n     public InternalAggregations(List<InternalAggregation> aggregations) {\n         super(aggregations);\n-        this.topLevelPipelineAggregators = Collections.emptyList();\n+        this.pipelineTreeForBwcSerialization = null;\n     }\n \n     /**\n-     * Constructs a new aggregation providing its {@link InternalAggregation}s and {@link SiblingPipelineAggregator}s\n+     * Constructs a node in the aggregation tree.\n+     * @param pipelineTreeSource must be null inside the tree or after final reduction. Should reference the\n+     *                           search request otherwise so we can properly serialize the response to\n+     *                           versions of Elasticsearch that require the pipelines to be serialized.\n      */\n-    public InternalAggregations(List<InternalAggregation> aggregations, List<SiblingPipelineAggregator> topLevelPipelineAggregators) {\n+    public InternalAggregations(List<InternalAggregation> aggregations, Supplier<PipelineAggregator.PipelineTree> pipelineTreeSource) {\n         super(aggregations);\n-        this.topLevelPipelineAggregators = Objects.requireNonNull(topLevelPipelineAggregators);\n+        this.pipelineTreeForBwcSerialization = pipelineTreeSource;\n     }\n \n     public InternalAggregations(StreamInput in) throws IOException {\n         super(in.readList(stream -> in.readNamedWriteable(InternalAggregation.class)));\n-        this.topLevelPipelineAggregators = in.readList(\n-            stream -> (SiblingPipelineAggregator)in.readNamedWriteable(PipelineAggregator.class));\n+        if (in.getVersion().before(Version.V_8_0_0)) { // TODO switch to 7.7.0 before merging\n+            in.readNamedWriteableList(PipelineAggregator.class); \n+        }\n+        /*\n+         * Setting the pipeline tree source to null is here is correct but\n+         * only because we don't immediately pass the InternalAggregations\n+         * off to another node. Instead, we always reduce together with\n+         * many aggregations and that always adds the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzMzNA==", "bodyText": "Thanks! I do that somet", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397347334", "createdAt": "2020-03-24T17:47:53Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java", "diffHunk": "@@ -54,35 +59,56 @@\n         }\n     };\n \n-    private final List<SiblingPipelineAggregator> topLevelPipelineAggregators;\n+    /**\n+     * The way to build a tree of pipeline aggregators. Used only for\n+     * serialization backwards compatibility.\n+     */\n+    private final Supplier<PipelineAggregator.PipelineTree> pipelineTreeForBwcSerialization;\n \n     /**\n      * Constructs a new aggregation.\n      */\n     public InternalAggregations(List<InternalAggregation> aggregations) {\n         super(aggregations);\n-        this.topLevelPipelineAggregators = Collections.emptyList();\n+        this.pipelineTreeForBwcSerialization = null;\n     }\n \n     /**\n-     * Constructs a new aggregation providing its {@link InternalAggregation}s and {@link SiblingPipelineAggregator}s\n+     * Constructs a node in the aggregation tree.\n+     * @param pipelineTreeSource must be null inside the tree or after final reduction. Should reference the\n+     *                           search request otherwise so we can properly serialize the response to\n+     *                           versions of Elasticsearch that require the pipelines to be serialized.\n      */\n-    public InternalAggregations(List<InternalAggregation> aggregations, List<SiblingPipelineAggregator> topLevelPipelineAggregators) {\n+    public InternalAggregations(List<InternalAggregation> aggregations, Supplier<PipelineAggregator.PipelineTree> pipelineTreeSource) {\n         super(aggregations);\n-        this.topLevelPipelineAggregators = Objects.requireNonNull(topLevelPipelineAggregators);\n+        this.pipelineTreeForBwcSerialization = pipelineTreeSource;\n     }\n \n     public InternalAggregations(StreamInput in) throws IOException {\n         super(in.readList(stream -> in.readNamedWriteable(InternalAggregation.class)));\n-        this.topLevelPipelineAggregators = in.readList(\n-            stream -> (SiblingPipelineAggregator)in.readNamedWriteable(PipelineAggregator.class));\n+        if (in.getVersion().before(Version.V_8_0_0)) { // TODO switch to 7.7.0 before merging\n+            in.readNamedWriteableList(PipelineAggregator.class); \n+        }\n+        /*\n+         * Setting the pipeline tree source to null is here is correct but\n+         * only because we don't immediately pass the InternalAggregations\n+         * off to another node. Instead, we always reduce together with\n+         * many aggregations and that always adds the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDUzNQ=="}, "originalCommit": {"oid": "b9f4cda693655193d7b60e4bf176902ec7ebb161"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzExNzgwOnYy", "diffSide": "RIGHT", "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MDoyNFrOF672Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0OToxMFrOF68NUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MjI2Nw==", "bodyText": "Should we have a similar test for the rolling-upgrade module?  Theoretically it should be the same as CCS, but it might also smoke out different issues due to heterogeneous serialization inside the same cluster (instead of funneling through a gateway).", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397342267", "createdAt": "2020-03-24T17:40:24Z", "author": {"login": "polyfractal"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg\n+  - do:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff7a673c19fd9f723d87896d844b58604b1452f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0ODE3Ng==", "bodyText": "It'd be great to have a \"mixed cluster CCS\" test. I talked that one through with @javanna and we don't have one now and probably don't want to build one just for this.", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397348176", "createdAt": "2020-03-24T17:49:10Z", "author": {"login": "nik9000"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg\n+  - do:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MjI2Nw=="}, "originalCommit": {"oid": "cff7a673c19fd9f723d87896d844b58604b1452f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEyMjU4OnYy", "diffSide": "RIGHT", "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MTozNVrOF675Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0OTo1M1rOF68O1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MzA3NQ==", "bodyText": "Should we add a non-top-level pipeline agg just to confirm they aren't affected?", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397343075", "createdAt": "2020-03-24T17:41:35Z", "author": {"login": "polyfractal"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg\n+  - do:\n+      search:\n+        rest_total_hits_as_int: true\n+        index: test_index,my_remote_cluster:test_index\n+        body:\n+          seq_no_primary_term: true\n+          aggs:\n+            cluster:\n+              terms:\n+                field: f1.keyword\n+              aggs:\n+                s:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff7a673c19fd9f723d87896d844b58604b1452f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0ODU2NA==", "bodyText": "I figured I'd get it in my next PR about non-top-level pipeline aggs, but I'm happy to do it now!", "url": "https://github.com/elastic/elasticsearch/pull/53730#discussion_r397348564", "createdAt": "2020-03-24T17:49:53Z", "author": {"login": "nik9000"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml", "diffHunk": "@@ -115,6 +115,39 @@\n   - match: { aggregations.cluster.buckets.0.key: \"local_cluster\" }\n   - match: { aggregations.cluster.buckets.0.doc_count: 5 }\n \n+  # once more, this time with a pipeline agg\n+  - do:\n+      search:\n+        rest_total_hits_as_int: true\n+        index: test_index,my_remote_cluster:test_index\n+        body:\n+          seq_no_primary_term: true\n+          aggs:\n+            cluster:\n+              terms:\n+                field: f1.keyword\n+              aggs:\n+                s:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MzA3NQ=="}, "originalCommit": {"oid": "cff7a673c19fd9f723d87896d844b58604b1452f"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4329, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}