{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTI4NDcy", "number": 62490, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo0MjowMFrOEkzZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDozNjowNVrOEuO4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDI2MjMzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo0MjowMFrOHT84-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MTozMlrOHb2ItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4MjYxNg==", "bodyText": "An actual authentication object is needed here instead of null for better test coverage.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490682616", "createdAt": "2020-09-18T03:42:00Z", "author": {"login": "ywangd"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -37,7 +37,7 @@\n     protected org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse createServerTestInstance(\n         XContentType xContentType) {\n         return new org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse(randomAlphaOfLength(6),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDU2NQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960565", "createdAt": "2020-10-02T17:41:32Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -37,7 +37,7 @@\n     protected org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse createServerTestInstance(\n         XContentType xContentType) {\n         return new org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse(randomAlphaOfLength(6),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4MjYxNg=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDI4NjYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo0ODoyNVrOHT9FhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MzowMFrOHb2LbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.principal = principal;\n          \n          \n            \n                    this.principal = authentication.getUser().principal();", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490685828", "createdAt": "2020-09-18T03:48:25Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -17,12 +18,15 @@\n     private String accessTokenString;\n     private String refreshTokenString;\n     private TimeValue expiresIn;\n+    private Authentication authentication;\n \n-    public OpenIdConnectAuthenticateResponse(String principal, String accessTokenString, String refreshTokenString, TimeValue expiresIn) {\n+    public OpenIdConnectAuthenticateResponse(Authentication authentication, String accessTokenString, String refreshTokenString,\n+                                             TimeValue expiresIn) {\n         this.principal = principal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTI2MQ==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498961261", "createdAt": "2020-10-02T17:43:00Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -17,12 +18,15 @@\n     private String accessTokenString;\n     private String refreshTokenString;\n     private TimeValue expiresIn;\n+    private Authentication authentication;\n \n-    public OpenIdConnectAuthenticateResponse(String principal, String accessTokenString, String refreshTokenString, TimeValue expiresIn) {\n+    public OpenIdConnectAuthenticateResponse(Authentication authentication, String accessTokenString, String refreshTokenString,\n+                                             TimeValue expiresIn) {\n         this.principal = principal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTgyOA=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDI5ODg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NToyOVrOHT9MaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MTo0NVrOHb2JIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzU5Mw==", "bodyText": "The authentication object should be deserialised from the stream as well, i.e. authentication = new Authentication(in);.\nSince this is a new field, which does not exist in previous version, we need to protect the read with version check, i.e.:\nif (in.getVersion().onOrAfter(Version.V_7_10_0) {\n    authentication = new Authentication(in);\n}\nTechically, I don't think class like OpenIdConnectAuthenticateResponse travel across nodes, so whether reader/writer interfaces are really necessary for them  is debatable. But that is a separate issue, for consistency, it's better to have it here. (Edit: in fact, given the presense of TransportClient in 7.x, these interfaces could still be actually necessary)", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490687593", "createdAt": "2020-09-18T03:55:29Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -31,6 +35,7 @@ public OpenIdConnectAuthenticateResponse(StreamInput in) throws IOException {\n         accessTokenString = in.readString();\n         refreshTokenString = in.readString();\n         expiresIn = in.readTimeValue();\n+        authentication = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDY3NA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960674", "createdAt": "2020-10-02T17:41:45Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -31,6 +35,7 @@ public OpenIdConnectAuthenticateResponse(StreamInput in) throws IOException {\n         accessTokenString = in.readString();\n         refreshTokenString = in.readString();\n         expiresIn = in.readTimeValue();\n+        authentication = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzU5Mw=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDMwMDU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NjoxOVrOHT9NRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0Mjo0OFrOHb2LFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzgxMw==", "bodyText": "Similarly, serialisation should handle the new authentication field as well plus version check.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490687813", "createdAt": "2020-09-18T03:56:19Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,6 +54,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTE3NA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498961174", "createdAt": "2020-10-02T17:42:48Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,6 +54,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzgxMw=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDMxMzUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDowNDoyNFrOHT9Uhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MjowM1rOHb2Jyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTY3MQ==", "bodyText": "Same here, I think we could use a real authentication object instead of null.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490689671", "createdAt": "2020-09-18T04:04:24Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,7 +35,7 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDg0Mw==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960843", "createdAt": "2020-10-02T17:42:03Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,7 +35,7 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTY3MQ=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM1NTc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozMDoyNFrOHT9r7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MjoxN1rOHb2KKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTY2MQ==", "bodyText": "Similar to TransportCreateTokenAction#createToken, there are two authentication involved. One is used to authenticate the request and the other is the one being refreshed. securityContext#getAuthentication is used for the first one, which is not what we want to return in the response.\nThe authentication that should be in the response is the one that gets refreshed. It is not directly available here, but can be derived from the access token (tuple.v1()).  TokenService#authenticateToken can take the access token and decode it for the authentication object.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490695661", "createdAt": "2020-09-18T04:30:24Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -21,19 +22,23 @@\n public class TransportRefreshTokenAction extends HandledTransportAction<CreateTokenRequest, CreateTokenResponse> {\n \n     private final TokenService tokenService;\n+    private final SecurityContext securityContext;\n \n     @Inject\n-    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService) {\n+    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService,\n+                                       SecurityContext securityContext) {\n         super(RefreshTokenAction.NAME, transportService, actionFilters, CreateTokenRequest::new);\n         this.tokenService = tokenService;\n+        this.securityContext = securityContext;\n     }\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n         tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n             final String scope = getResponseScopeValue(request.getScope());\n             final CreateTokenResponse response =\n-                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null);\n+                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n+                        securityContext.getAuthentication());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDkzNg==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960936", "createdAt": "2020-10-02T17:42:17Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -21,19 +22,23 @@\n public class TransportRefreshTokenAction extends HandledTransportAction<CreateTokenRequest, CreateTokenResponse> {\n \n     private final TokenService tokenService;\n+    private final SecurityContext securityContext;\n \n     @Inject\n-    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService) {\n+    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService,\n+                                       SecurityContext securityContext) {\n         super(RefreshTokenAction.NAME, transportService, actionFilters, CreateTokenRequest::new);\n         this.tokenService = tokenService;\n+        this.securityContext = securityContext;\n     }\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n         tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n             final String scope = getResponseScopeValue(request.getScope());\n             final CreateTokenResponse response =\n-                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null);\n+                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n+                        securityContext.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTY2MQ=="}, "originalCommit": {"oid": "346695a05aa04f439f41ecf25e5d3a20e29ade39"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjU4MTYxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjoxOToxNFrOHcO1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo1MjoyOFrOHfy98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NTIzNg==", "bodyText": "It's minor, but I think it reads better to replace these arbitrary strings with randomAlphaOfLength(...).", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499365236", "createdAt": "2020-10-05T06:19:14Z", "author": {"login": "ywangd"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java", "diffHunk": "@@ -38,6 +40,9 @@ public void testFromXContent() throws IOException {\n         final String scope = randomBoolean() ? null : randomAlphaOfLength(4);\n         final String type = randomAlphaOfLength(6);\n         final String kerberosAuthenticationResponseToken = randomBoolean() ? null : randomAlphaOfLength(7);\n+        final AuthenticateResponse authenticateResponse = new AuthenticateResponse(new User(\"abcdefg\", Arrays.asList( \"kdjklsd\" )),\n+            true, new AuthenticateResponse.RealmInfo(\"abcd\", \"ghjk\" ), new AuthenticateResponse.RealmInfo(\"xfhfhgc\", \"sgdhfhg\" ),\n+            \"realm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMjk2MQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503102961", "createdAt": "2020-10-12T07:52:28Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java", "diffHunk": "@@ -38,6 +40,9 @@ public void testFromXContent() throws IOException {\n         final String scope = randomBoolean() ? null : randomAlphaOfLength(4);\n         final String type = randomAlphaOfLength(6);\n         final String kerberosAuthenticationResponseToken = randomBoolean() ? null : randomAlphaOfLength(7);\n+        final AuthenticateResponse authenticateResponse = new AuthenticateResponse(new User(\"abcdefg\", Arrays.asList( \"kdjklsd\" )),\n+            true, new AuthenticateResponse.RealmInfo(\"abcd\", \"ghjk\" ), new AuthenticateResponse.RealmInfo(\"xfhfhgc\", \"sgdhfhg\" ),\n+            \"realm\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NTIzNg=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjU4OTQ2OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjoyMzoxM1rOHcO6PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1MzozNVrOHf9feg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NjQ2MA==", "bodyText": "Nit: method should begin with lowercase letter, i.e. createServerAuthenticationResponse(...).", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499366460", "createdAt": "2020-10-05T06:23:13Z", "author": {"login": "ywangd"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -51,5 +59,52 @@ protected void assertInstances(org.elasticsearch.xpack.core.security.action.Dele\n         assertThat(serverTestInstance.getAccessToken(), is(clientInstance.getAccessToken()));\n         assertThat(serverTestInstance.getExpiresIn(), is(clientInstance.getExpiresIn()));\n         assertThat(clientInstance.getType(), is(\"Bearer\"));\n+        AuthenticateResponse serverAuthenticationResponse = CreateServerAuthenticationResponse(serverTestInstance.getAuthentication());\n+        User user = serverTestInstance.getAuthentication().getUser();\n+        assertThat(serverAuthenticationResponse, equalTo(clientInstance.getAuthenticationResponse()));\n+    }\n+\n+    protected Authentication createAuthentication() {\n+        final String username = randomAlphaOfLengthBetween(1, 4);\n+        final String[] roles = generateRandomStringArray(4, 4, false, true);\n+        final Map<String, Object> metadata;\n+        metadata = new HashMap<>();\n+        if (randomBoolean()) {\n+            metadata.put(\"string\", null);\n+        } else {\n+            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n+        }\n+        if (randomBoolean()) {\n+            metadata.put(\"string_list\", null);\n+        } else {\n+            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n+        }\n+        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final boolean enabled = randomBoolean();\n+        final String authenticationRealmName = randomAlphaOfLength(5);\n+        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String lookupRealmName = randomAlphaOfLength(5);\n+        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String nodeName = randomAlphaOfLengthBetween(1, 10);\n+        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n+        return new Authentication(\n+            new User(username, roles, fullName, email, metadata, true),\n+            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n+            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n+    }\n+\n+    AuthenticateResponse CreateServerAuthenticationResponse(Authentication authentication){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTM4Ng==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503275386", "createdAt": "2020-10-12T12:53:35Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -51,5 +59,52 @@ protected void assertInstances(org.elasticsearch.xpack.core.security.action.Dele\n         assertThat(serverTestInstance.getAccessToken(), is(clientInstance.getAccessToken()));\n         assertThat(serverTestInstance.getExpiresIn(), is(clientInstance.getExpiresIn()));\n         assertThat(clientInstance.getType(), is(\"Bearer\"));\n+        AuthenticateResponse serverAuthenticationResponse = CreateServerAuthenticationResponse(serverTestInstance.getAuthentication());\n+        User user = serverTestInstance.getAuthentication().getUser();\n+        assertThat(serverAuthenticationResponse, equalTo(clientInstance.getAuthenticationResponse()));\n+    }\n+\n+    protected Authentication createAuthentication() {\n+        final String username = randomAlphaOfLengthBetween(1, 4);\n+        final String[] roles = generateRandomStringArray(4, 4, false, true);\n+        final Map<String, Object> metadata;\n+        metadata = new HashMap<>();\n+        if (randomBoolean()) {\n+            metadata.put(\"string\", null);\n+        } else {\n+            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n+        }\n+        if (randomBoolean()) {\n+            metadata.put(\"string_list\", null);\n+        } else {\n+            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n+        }\n+        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final boolean enabled = randomBoolean();\n+        final String authenticationRealmName = randomAlphaOfLength(5);\n+        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String lookupRealmName = randomAlphaOfLength(5);\n+        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String nodeName = randomAlphaOfLengthBetween(1, 10);\n+        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n+        return new Authentication(\n+            new User(username, roles, fullName, email, metadata, true),\n+            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n+            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n+    }\n+\n+    AuthenticateResponse CreateServerAuthenticationResponse(Authentication authentication){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NjQ2MA=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjY4MTIyOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/high-level/security/create-token.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowMjoyNVrOHcPwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo1Mjo0MFrOHfy-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDMwMg==", "bodyText": "I think it is useful to cross-link the existing page of authentication response, e.g.:\n<<{upid}-authenticate-response, authenticate response>>.\nThis applies to a few other similar places as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499380302", "createdAt": "2020-10-05T07:02:25Z", "author": {"login": "ywangd"}, "path": "docs/java-rest/high-level/security/create-token.asciidoc", "diffHunk": "@@ -49,6 +49,7 @@ The returned `CreateTokenResponse` contains the following properties:\n `scope`:: The scope of the token. May be `null`.\n `refreshToken`:: A secondary \"refresh\" token that may be used to extend\n  the life of an access token. May be `null`.\n+`authentication`:: This is the authentication object for the newly created token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMzA4NQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503103085", "createdAt": "2020-10-12T07:52:40Z", "author": {"login": "BigPandaToo"}, "path": "docs/java-rest/high-level/security/create-token.asciidoc", "diffHunk": "@@ -49,6 +49,7 @@ The returned `CreateTokenResponse` contains the following properties:\n `scope`:: The scope of the token. May be `null`.\n `refreshToken`:: A secondary \"refresh\" token that may be used to extend\n  the life of an access token. May be `null`.\n+`authentication`:: This is the authentication object for the newly created token.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDMwMg=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjcyNzg3OnYy", "diffSide": "RIGHT", "path": "x-pack/docs/en/rest-api/security/delegate-pki-authentication.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoxOTowNFrOHcQLfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo1MzoyOFrOHfzANw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NzI2Mg==", "bodyText": "We need fix the indentation levels here. Otherwise it looks weird on the documentation page\nPlease note that the same thing needs to be fixed in a few other places as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499387262", "createdAt": "2020-10-05T07:19:04Z", "author": {"login": "ywangd"}, "path": "x-pack/docs/en/rest-api/security/delegate-pki-authentication.asciidoc", "diffHunk": "@@ -89,7 +89,28 @@ Which returns the following response:\n {\n   \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n   \"type\" : \"Bearer\",\n-  \"expires_in\" : 1200\n+  \"expires_in\" : 1200,\n+  \"authentication\" : {\n+          \"username\" : \"Elasticsearch Test Client\",\n+          \"roles\" : [ ],\n+          \"full_name\" : null,\n+          \"email\" : null,\n+          \"metadata\" : {\n+            \"pki_dn\" : \"O=org, OU=Elasticsearch, CN=Elasticsearch Test Client\",\n+            \"pki_delegated_by_user\" : \"test_admin\",\n+            \"pki_delegated_by_realm\" : \"file\"\n+          },\n+          \"enabled\" : true,\n+          \"authentication_realm\" : {\n+            \"name\" : \"pki1\",\n+            \"type\" : \"pki\"\n+          },\n+          \"lookup_realm\" : {\n+            \"name\" : \"pki1\",\n+            \"type\" : \"pki\"\n+          },\n+          \"authentication_type\" : \"realm\"\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMzU0Mw==", "bodyText": "I believe I fixed all", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503103543", "createdAt": "2020-10-12T07:53:28Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/docs/en/rest-api/security/delegate-pki-authentication.asciidoc", "diffHunk": "@@ -89,7 +89,28 @@ Which returns the following response:\n {\n   \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n   \"type\" : \"Bearer\",\n-  \"expires_in\" : 1200\n+  \"expires_in\" : 1200,\n+  \"authentication\" : {\n+          \"username\" : \"Elasticsearch Test Client\",\n+          \"roles\" : [ ],\n+          \"full_name\" : null,\n+          \"email\" : null,\n+          \"metadata\" : {\n+            \"pki_dn\" : \"O=org, OU=Elasticsearch, CN=Elasticsearch Test Client\",\n+            \"pki_delegated_by_user\" : \"test_admin\",\n+            \"pki_delegated_by_realm\" : \"file\"\n+          },\n+          \"enabled\" : true,\n+          \"authentication_realm\" : {\n+            \"name\" : \"pki1\",\n+            \"type\" : \"pki\"\n+          },\n+          \"lookup_realm\" : {\n+            \"name\" : \"pki1\",\n+            \"type\" : \"pki\"\n+          },\n+          \"authentication_type\" : \"realm\"\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NzI2Mg=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjczODAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyMjoyOFrOHcQRbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1Mzo1MlrOHf9gHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4ODc4MQ==", "bodyText": "This needs to be guarded by version check as well, e.g.\nif (out.getVersion().onOrAfter(..) {\n}", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499388781", "createdAt": "2020-10-05T07:22:28Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java", "diffHunk": "@@ -69,10 +59,15 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() {\n+        return authentication;\n+    }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(accessToken);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTU1MA==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503275550", "createdAt": "2020-10-12T12:53:52Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java", "diffHunk": "@@ -69,10 +59,15 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() {\n+        return authentication;\n+    }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(accessToken);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4ODc4MQ=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc0MTc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyMzo0MFrOHcQTsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo1Mzo0MFrOHfzArQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTM2Mw==", "bodyText": "Needs version check here as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499389363", "createdAt": "2020-10-05T07:23:40Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,11 +57,14 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);\n         out.writeString(accessTokenString);\n         out.writeString(refreshTokenString);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMzY2MQ==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503103661", "createdAt": "2020-10-12T07:53:40Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,11 +57,14 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);\n         out.writeString(accessTokenString);\n         out.writeString(refreshTokenString);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTM2Mw=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc0NzA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlAuthenticateResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyNToxMFrOHcQWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NjozMVrOHf9mFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDExNw==", "bodyText": "Need add the new authentication field here.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499390117", "createdAt": "2020-10-05T07:25:10Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlAuthenticateResponse.java", "diffHunk": "@@ -64,6 +70,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NzA3OA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503277078", "createdAt": "2020-10-12T12:56:31Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlAuthenticateResponse.java", "diffHunk": "@@ -64,6 +70,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDExNw=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc0OTI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyNTo0N1rOHcQX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo1NTo0MFrOHfzFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDQzMQ==", "bodyText": "Again, version check is needed here.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499390431", "createdAt": "2020-10-05T07:25:47Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -68,13 +75,16 @@ public String getKerberosAuthenticationResponseToken() {\n         return kerberosAuthenticationResponseToken;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(tokenString);\n         out.writeTimeValue(expiresIn);\n         out.writeOptionalString(scope);\n         out.writeOptionalString(refreshToken);\n         out.writeOptionalString(kerberosAuthenticationResponseToken);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwNDc3Mw==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503104773", "createdAt": "2020-10-12T07:55:40Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -68,13 +75,16 @@ public String getKerberosAuthenticationResponseToken() {\n         return kerberosAuthenticationResponseToken;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(tokenString);\n         out.writeTimeValue(expiresIn);\n         out.writeOptionalString(scope);\n         out.writeOptionalString(refreshToken);\n         out.writeOptionalString(kerberosAuthenticationResponseToken);\n+        authentication.writeTo(out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDQzMQ=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc1MzE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyNzowM1rOHcQaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1Njo0MlrOHf9mmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MTA3MA==", "bodyText": "Nit: static variables normally use uppercase letters, e.g. AUTH_PARSER.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499391070", "createdAt": "2020-10-05T07:27:03Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,16 +47,97 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n+                createAuthentication());\n     }\n \n     @Override\n     protected DelegatePkiAuthenticationResponse doParseInstance(XContentParser parser) throws IOException {\n-        return DelegatePkiAuthenticationResponse.PARSER.apply(parser, null);\n+        return DelegatePkiAuthenticationResponseTests.PARSER.apply(parser, null);\n     }\n \n     @Override\n     protected boolean supportsUnknownFields() {\n-        return true;\n+        return false;\n+    }\n+\n+    private static final ParseField ACCESS_TOKEN_FIELD = new ParseField(\"access_token\");\n+    private static final ParseField TYPE_FIELD = new ParseField(\"type\");\n+    private static final ParseField EXPIRES_IN_FIELD = new ParseField(\"expires_in\");\n+    private static final ParseField AUTHENTICATION = new ParseField(\"authentication\");\n+\n+    public static final ConstructingObjectParser<DelegatePkiAuthenticationResponse, Void> PARSER = new ConstructingObjectParser<>(\n+        \"delegate_pki_response\", true, a -> {\n+        final String accessToken = (String) a[0];\n+        final String type = (String) a[1];\n+        if (false == \"Bearer\".equals(type)) {\n+            throw new IllegalArgumentException(\"Unknown token type [\" + type + \"], only [Bearer] type permitted\");\n+        }\n+        final Long expiresIn = (Long) a[2];\n+        final Authentication authentication = (Authentication) a[3];\n+\n+        return new DelegatePkiAuthenticationResponse(accessToken, TimeValue.timeValueSeconds(expiresIn), authentication);\n+    });\n+\n+    static {\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), ACCESS_TOKEN_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), TYPE_FIELD);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), EXPIRES_IN_FIELD);\n+        PARSER.declareObject(optionalConstructorArg(), (p, c) -> parseAuthentication(p), AUTHENTICATION);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Authentication, Void> AuthPARSER = new ConstructingObjectParser<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NzIxMQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503277211", "createdAt": "2020-10-12T12:56:42Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,16 +47,97 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n+                createAuthentication());\n     }\n \n     @Override\n     protected DelegatePkiAuthenticationResponse doParseInstance(XContentParser parser) throws IOException {\n-        return DelegatePkiAuthenticationResponse.PARSER.apply(parser, null);\n+        return DelegatePkiAuthenticationResponseTests.PARSER.apply(parser, null);\n     }\n \n     @Override\n     protected boolean supportsUnknownFields() {\n-        return true;\n+        return false;\n+    }\n+\n+    private static final ParseField ACCESS_TOKEN_FIELD = new ParseField(\"access_token\");\n+    private static final ParseField TYPE_FIELD = new ParseField(\"type\");\n+    private static final ParseField EXPIRES_IN_FIELD = new ParseField(\"expires_in\");\n+    private static final ParseField AUTHENTICATION = new ParseField(\"authentication\");\n+\n+    public static final ConstructingObjectParser<DelegatePkiAuthenticationResponse, Void> PARSER = new ConstructingObjectParser<>(\n+        \"delegate_pki_response\", true, a -> {\n+        final String accessToken = (String) a[0];\n+        final String type = (String) a[1];\n+        if (false == \"Bearer\".equals(type)) {\n+            throw new IllegalArgumentException(\"Unknown token type [\" + type + \"], only [Bearer] type permitted\");\n+        }\n+        final Long expiresIn = (Long) a[2];\n+        final Authentication authentication = (Authentication) a[3];\n+\n+        return new DelegatePkiAuthenticationResponse(accessToken, TimeValue.timeValueSeconds(expiresIn), authentication);\n+    });\n+\n+    static {\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), ACCESS_TOKEN_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), TYPE_FIELD);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), EXPIRES_IN_FIELD);\n+        PARSER.declareObject(optionalConstructorArg(), (p, c) -> parseAuthentication(p), AUTHENTICATION);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Authentication, Void> AuthPARSER = new ConstructingObjectParser<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MTA3MA=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjc2MDMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyOTozMVrOHcQe5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowMToxNVrOHfzSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MjIyOQ==", "bodyText": "Along the same logic of existing code, I think we need test the map hasEntry for authentication as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499392229", "createdAt": "2020-10-05T07:29:31Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java", "diffHunk": "@@ -85,7 +89,7 @@ public void sendResponse(RestResponse restResponse) {\n         assertThat(map, hasEntry(\"expires_in\", Math.toIntExact(createTokenResponse.getExpiresIn().seconds())));\n         assertThat(map, hasEntry(\"refresh_token\", createTokenResponse.getRefreshToken()));\n         assertThat(map, hasEntry(\"kerberos_authentication_response_token\", createTokenResponse.getKerberosAuthenticationResponseToken()));\n-        assertEquals(5, map.size());\n+        assertEquals(6, map.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwODEyMQ==", "bodyText": "I added a simplified testing here. Note that authentication is an object and response representation of it is structurally not exactly the same (user fields are flattened for instance). We can add validation for each field, but I am not sure it is really necessary. I verify the authentication is there and the user name is the same. Let me know if you think I need to add all fields verification though.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503108121", "createdAt": "2020-10-12T08:01:15Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java", "diffHunk": "@@ -85,7 +89,7 @@ public void sendResponse(RestResponse restResponse) {\n         assertThat(map, hasEntry(\"expires_in\", Math.toIntExact(createTokenResponse.getExpiresIn().seconds())));\n         assertThat(map, hasEntry(\"refresh_token\", createTokenResponse.getRefreshToken()));\n         assertThat(map, hasEntry(\"kerberos_authentication_response_token\", createTokenResponse.getKerberosAuthenticationResponseToken()));\n-        assertEquals(5, map.size());\n+        assertEquals(6, map.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MjIyOQ=="}, "originalCommit": {"oid": "49d056fe68ed29418150fe8c2a7f3d39c78024d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYwNDUzOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/high-level/security/create-token.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1Nzo1NVrOHgTpuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyOTo0NlrOHhdq3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODQ1Nw==", "bodyText": "This reads a bit abruptly. Might wanna add a few connection words, something like \"This is the authentication object for the newly created token. See also <<{upid}-authenticate-response, authenticate response>>.\"", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503638457", "createdAt": "2020-10-13T02:57:55Z", "author": {"login": "ywangd"}, "path": "docs/java-rest/high-level/security/create-token.asciidoc", "diffHunk": "@@ -49,6 +49,8 @@ The returned `CreateTokenResponse` contains the following properties:\n `scope`:: The scope of the token. May be `null`.\n `refreshToken`:: A secondary \"refresh\" token that may be used to extend\n  the life of an access token. May be `null`.\n+`authentication`:: This is the authentication object for the newly created token:\n+<<{upid}-authenticate-response, authenticate response>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1MTE2NQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r504851165", "createdAt": "2020-10-14T17:29:46Z", "author": {"login": "BigPandaToo"}, "path": "docs/java-rest/high-level/security/create-token.asciidoc", "diffHunk": "@@ -49,6 +49,8 @@ The returned `CreateTokenResponse` contains the following properties:\n `scope`:: The scope of the token. May be `null`.\n `refreshToken`:: A secondary \"refresh\" token that may be used to extend\n  the life of an access token. May be `null`.\n+`authentication`:: This is the authentication object for the newly created token:\n+<<{upid}-authenticate-response, authenticate response>>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODQ1Nw=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYwNTA3OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/high-level/security/delegate-pki-authentication.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1ODoxNFrOHgTqDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyOTo1NVrOHhdrJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODU0Mg==", "bodyText": "Same here (see above)", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503638542", "createdAt": "2020-10-13T02:58:14Z", "author": {"login": "ywangd"}, "path": "docs/java-rest/high-level/security/delegate-pki-authentication.asciidoc", "diffHunk": "@@ -52,6 +52,8 @@ The returned +{response}+ contains the following properties:\n `type`:: The type of the token, this is always `\"Bearer\"`.\n `expiresIn`:: The length of time (in seconds) until the token will expire.\n    The token will be considered invalid after that time.\n+`authentication`:: This is the authentication object for the newly created token:\n+<<{upid}-authenticate-response, authenticate response>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1MTIzOA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r504851238", "createdAt": "2020-10-14T17:29:55Z", "author": {"login": "BigPandaToo"}, "path": "docs/java-rest/high-level/security/delegate-pki-authentication.asciidoc", "diffHunk": "@@ -52,6 +52,8 @@ The returned +{response}+ contains the following properties:\n `type`:: The type of the token, this is always `\"Bearer\"`.\n `expiresIn`:: The length of time (in seconds) until the token will expire.\n    The token will be considered invalid after that time.\n+`authentication`:: This is the authentication object for the newly created token:\n+<<{upid}-authenticate-response, authenticate response>>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODU0Mg=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYyNDMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzowOTozM1rOHgT1Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMDowM1rOHiU4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ==", "bodyText": "I think we need a null check here to not show the field at all if the value is null. As far as I understand it, this is the general preference (see other fields in this method). This comment applies to other places where xcontent is built with authentication field.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503641379", "createdAt": "2020-10-13T03:09:33Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyNDk0Ng==", "bodyText": "I understand that \"scope\" and \"kerberos_authentication_response_token\" may not be null depending on the type of token we create, but authentication object should always exist (if we succeed), see \"access_token\" and \"expires_in\" fields in the method.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r504824946", "createdAt": "2020-10-14T16:46:06Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE4Mw==", "bodyText": "It can be null if the object is deserialised from bytes created prior to v7.11. We have the null check for it in both CreateTokenResponse(StreamInput in) and CreateTokenResponse#writeTo, it makes sense to have it here as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505104183", "createdAt": "2020-10-15T01:00:14Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxNTU3Mw==", "bodyText": "Make sense", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505215573", "createdAt": "2020-10-15T06:46:29Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NTc4Mg==", "bodyText": "Done & done", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505755782", "createdAt": "2020-10-15T18:30:03Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, "originalCommit": {"oid": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTAyMzY4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateTokenResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzozNDozM1rOHifChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0MjoxMFrOHi6jCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjE4Mw==", "bodyText": "There are some inconsistency for this variable name:\n\nIn the client side code, it is named authenticationResponse and getAuthenticationResponse\nIn the corresponding server side code, it is just authentication .\nIn this class, the parser field is defined as authentication, i.e. new ParseField(\"authentication\").\nIn the HLRC documentation, e.g. create-token.asciidoc, it is also named just authentication\n\nI think we could stick to just authentication. This comment applies to the client side DelegatePkiAuthenticationResponse as well.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505922183", "createdAt": "2020-10-15T23:34:33Z", "author": {"login": "ywangd"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateTokenResponse.java", "diffHunk": "@@ -42,15 +42,17 @@\n     private final String scope;\n     private final String refreshToken;\n     private final String kerberosAuthenticationResponseToken;\n+    private final AuthenticateResponse authenticationResponse;\n \n     public CreateTokenResponse(String accessToken, String type, TimeValue expiresIn, String scope, String refreshToken,\n-                               String kerberosAuthenticationResponseToken) {\n+                               String kerberosAuthenticationResponseToken, AuthenticateResponse authenticationResponse) {\n         this.accessToken = accessToken;\n         this.type = type;\n         this.expiresIn = expiresIn;\n         this.scope = scope;\n         this.refreshToken = refreshToken;\n         this.kerberosAuthenticationResponseToken = kerberosAuthenticationResponseToken;\n+        this.authenticationResponse = authenticationResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3Mjg3NA==", "bodyText": "Addressed in #63792", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r506372874", "createdAt": "2020-10-16T12:42:10Z", "author": {"login": "BigPandaToo"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateTokenResponse.java", "diffHunk": "@@ -42,15 +42,17 @@\n     private final String scope;\n     private final String refreshToken;\n     private final String kerberosAuthenticationResponseToken;\n+    private final AuthenticateResponse authenticationResponse;\n \n     public CreateTokenResponse(String accessToken, String type, TimeValue expiresIn, String scope, String refreshToken,\n-                               String kerberosAuthenticationResponseToken) {\n+                               String kerberosAuthenticationResponseToken, AuthenticateResponse authenticationResponse) {\n         this.accessToken = accessToken;\n         this.type = type;\n         this.expiresIn = expiresIn;\n         this.scope = scope;\n         this.refreshToken = refreshToken;\n         this.kerberosAuthenticationResponseToken = kerberosAuthenticationResponseToken;\n+        this.authenticationResponse = authenticationResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjE4Mw=="}, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTA3NTEzOnYy", "diffSide": "RIGHT", "path": "x-pack/docs/en/rest-api/security/get-tokens.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDowMTo1MVrOHifgtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0MjoyMlrOHi6jhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyOTkwOQ==", "bodyText": "The format of the authentication field is inconsistent. Sorry for being picky on this since it is user facing documentation. I think we should strive to ensure:\n\nThe indentation is 2 spaces per level instead of 1.\nThe closing curly and square brackets should align to the corresponding key\n\nThis comment applies to all places (some are better formatted than others) where the authentcation field is shown.\nAn example of the above format is like the follows (please note that . is used in place of whitespace to make it easier to show indentation. ):\n{\n..\"authentication\" : {\n....\"username\" : \"test_admin\",\n....\"roles\" : [\n......\"superuser\"\n....],\n....\"full_name\" : null,\n....\"email\" : null,\n....\"metadata\" : {},\n....\"enabled\" : true,\n....\"authentication_realm\" : {\n......\"name\" : \"file\",\n......\"type\" : \"file\"\n....},\n....\"lookup_realm\" : {\n......\"name\" : \"file\",\n......\"type\" : \"file\"\n....},\n....\"authentication_type\" : \"realm\"\n..}\n}\n\nYou can also refer to get-role-mappings.asciidoc", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505929909", "createdAt": "2020-10-16T00:01:51Z", "author": {"login": "ywangd"}, "path": "x-pack/docs/en/rest-api/security/get-tokens.asciidoc", "diffHunk": "@@ -161,7 +180,26 @@ seconds) that the token expires in, the type, and the refresh token:\n   \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n   \"type\" : \"Bearer\",\n   \"expires_in\" : 1200,\n-  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n+  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\",\n+  \"authentication\" : {\n+   \"username\" : \"test_admin\",\n+   \"roles\" : [\n+    \"superuser\"\n+    ],\n+   \"full_name\" : null,\n+   \"email\" : null,\n+   \"metadata\" : { },\n+   \"enabled\" : true,\n+   \"authentication_realm\" : {\n+    \"name\" : \"file\",\n+    \"type\" : \"file\"\n+    },\n+   \"lookup_realm\" : {\n+    \"name\" : \"file\",\n+    \"type\" : \"file\"\n+   },\n+   \"authentication_type\" : \"realm\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3Mjk5OA==", "bodyText": "Addressed in #63792", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r506372998", "createdAt": "2020-10-16T12:42:22Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/docs/en/rest-api/security/get-tokens.asciidoc", "diffHunk": "@@ -161,7 +180,26 @@ seconds) that the token expires in, the type, and the refresh token:\n   \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n   \"type\" : \"Bearer\",\n   \"expires_in\" : 1200,\n-  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n+  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\",\n+  \"authentication\" : {\n+   \"username\" : \"test_admin\",\n+   \"roles\" : [\n+    \"superuser\"\n+    ],\n+   \"full_name\" : null,\n+   \"email\" : null,\n+   \"metadata\" : { },\n+   \"enabled\" : true,\n+   \"authentication_realm\" : {\n+    \"name\" : \"file\",\n+    \"type\" : \"file\"\n+    },\n+   \"lookup_realm\" : {\n+    \"name\" : \"file\",\n+    \"type\" : \"file\"\n+   },\n+   \"authentication_type\" : \"realm\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyOTkwOQ=="}, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTEwMTA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDoxNTo1M1rOHifvVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDoxNTo1M1rOHifvVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzMzY1NA==", "bodyText": "Nit: I think this assertion is better to be close to where the response object is defined, i.e. straight after CreateTokenResponse response = restClient.... It reads better this way since the test is close to the target. Also, in case it fails, it fails quickly before having to go through the token decrpytion which involves cluster traffic.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505933654", "createdAt": "2020-10-16T00:15:53Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "diffHunk": "@@ -104,6 +104,7 @@ public void testTokenServiceBootstrapOnNodeJoin() throws Exception {\n         PlainActionFuture<UserToken> userTokenFuture = new PlainActionFuture<>();\n         tokenService.decodeToken(response.getAccessToken(), userTokenFuture);\n         assertNotNull(userTokenFuture.actionGet());\n+        assertNotNull(response.getAuthenticationResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTEwNjU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDoxOToyMVrOHifyqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDoxOToyMVrOHifyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzNDUwNA==", "bodyText": "We should assert the authentication object's principal name as well. This is because the token creation call involves two credentials, one is the invoking user and the other is the user whom the token is created for. We can assert that the authentication's principal is the second user, not the first one.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505934504", "createdAt": "2020-10-16T00:19:21Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "diffHunk": "@@ -133,6 +134,7 @@ public void testTokenServiceCanRotateKeys() throws Exception {\n             assertNotNull(userTokenFuture.actionGet());\n             assertNotEquals(activeKeyHash, tokenService.getActiveKeyHash());\n         }\n+        assertNotNull(response.getAuthenticationResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTEzNzcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/oidc/RestOpenIdConnectAuthenticateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDozNTo1NVrOHigFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDozNTo1NVrOHigFuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTM4NQ==", "bodyText": "I wonder whether we should have null check here as well similar to how it is done in the toXContent, writeTo methods. It may not be absolutely necessary since this is a rest action and odic cannot be perform with transport client only. But then I am not sure whether there could be some weird combination that could lead to a null value here. Overall I'd say it is easier to just add a null check here so we are sure it is covered in any cases.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505939385", "createdAt": "2020-10-16T00:35:55Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/oidc/RestOpenIdConnectAuthenticateAction.java", "diffHunk": "@@ -63,12 +63,13 @@ protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClien\n                     @Override\n                     public RestResponse buildResponse(OpenIdConnectAuthenticateResponse response, XContentBuilder builder)\n                         throws Exception {\n-                        builder.startObject()\n-                            .field(\"username\", response.getPrincipal())\n-                            .field(\"access_token\", response.getAccessTokenString())\n-                            .field(\"refresh_token\", response.getRefreshTokenString())\n-                            .field(\"expires_in\", response.getExpiresIn().seconds())\n-                            .endObject();\n+                        builder.startObject();\n+                        builder.field(\"username\", response.getPrincipal());\n+                        builder.field(\"access_token\", response.getAccessTokenString());\n+                        builder.field(\"refresh_token\", response.getRefreshTokenString());\n+                        builder.field(\"expires_in\", response.getExpiresIn().seconds());\n+                        builder.field(\"authentication\", response.getAuthentication());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTEzODI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDozNjowNVrOHigGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0MjozNFrOHi6kAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTQ2OQ==", "bodyText": "Same here as above.", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505939469", "createdAt": "2020-10-16T00:36:05Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java", "diffHunk": "@@ -95,13 +95,14 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 requestBuilder.execute(new RestBuilderListener<>(channel) {\n                     @Override\n                     public RestResponse buildResponse(SamlAuthenticateResponse response, XContentBuilder builder) throws Exception {\n-                        builder.startObject()\n-                                .field(\"username\", response.getPrincipal())\n-                                .field(\"realm\", response.getRealm())\n-                                .field(\"access_token\", response.getTokenString())\n-                                .field(\"refresh_token\", response.getRefreshToken())\n-                                .field(\"expires_in\", response.getExpiresIn().seconds())\n-                                .endObject();\n+                        builder.startObject();\n+                        builder.field(\"username\", response.getPrincipal());\n+                        builder.field(\"realm\", response.getRealm());\n+                        builder.field(\"access_token\", response.getTokenString());\n+                        builder.field(\"refresh_token\", response.getRefreshToken());\n+                        builder.field(\"expires_in\", response.getExpiresIn().seconds());\n+                        builder.field(\"authentication\", response.getAuthentication());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3MzEyMA==", "bodyText": "Addressed in #63792", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r506373120", "createdAt": "2020-10-16T12:42:34Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java", "diffHunk": "@@ -95,13 +95,14 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 requestBuilder.execute(new RestBuilderListener<>(channel) {\n                     @Override\n                     public RestResponse buildResponse(SamlAuthenticateResponse response, XContentBuilder builder) throws Exception {\n-                        builder.startObject()\n-                                .field(\"username\", response.getPrincipal())\n-                                .field(\"realm\", response.getRealm())\n-                                .field(\"access_token\", response.getTokenString())\n-                                .field(\"refresh_token\", response.getRefreshToken())\n-                                .field(\"expires_in\", response.getExpiresIn().seconds())\n-                                .endObject();\n+                        builder.startObject();\n+                        builder.field(\"username\", response.getPrincipal());\n+                        builder.field(\"realm\", response.getRealm());\n+                        builder.field(\"access_token\", response.getTokenString());\n+                        builder.field(\"refresh_token\", response.getRefreshToken());\n+                        builder.field(\"expires_in\", response.getExpiresIn().seconds());\n+                        builder.field(\"authentication\", response.getAuthentication());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTQ2OQ=="}, "originalCommit": {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1504, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}