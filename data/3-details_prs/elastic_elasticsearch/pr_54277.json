{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjE2NzAy", "number": 54277, "title": "EQL: implement between function", "bodyText": "Related to #54135", "createdAt": "2020-03-26T14:47:40Z", "url": "https://github.com/elastic/elasticsearch/pull/54277", "merged": true, "mergeCommit": {"oid": "b7f02d8cdee447d4e057fe7fb4dda8296c7b5bde"}, "closed": true, "closedAt": "2020-04-07T16:34:47Z", "author": {"login": "aleksmaus"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRdMx4AH2gAyMzk0MjE2NzAyOjM1NGNmOTk4YWZjMzUwMmZmYTNhOTUwMWQ3ZWM4YTI3NjIxZWRhZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVU_slAH2gAyMzk0MjE2NzAyOjM5YTMyOWFkNzFkOWYxMDI4MDM3NjY0MTU1ZjA1MDQ2Y2Q1NzkwNWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "354cf998afc3502ffa3a9501d7ec8a27621edaf4", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/354cf998afc3502ffa3a9501d7ec8a27621edaf4", "committedDate": "2020-03-26T14:44:00Z", "message": "EQL: implement between function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "341c725d6bf1efc8f87c6f87055f1299639e0541", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/341c725d6bf1efc8f87c6f87055f1299639e0541", "committedDate": "2020-03-26T20:00:26Z", "message": "Address WIP TODOs. Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69c404fd6c395e5bd65ff18e27baa6f5660bd859", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/69c404fd6c395e5bd65ff18e27baa6f5660bd859", "committedDate": "2020-03-26T20:11:13Z", "message": "Fix linter complaint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81cc3665f99b0ae3e478ccdf89e09cdf97ecd1db", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/81cc3665f99b0ae3e478ccdf89e09cdf97ecd1db", "committedDate": "2020-03-27T13:56:38Z", "message": "Add more query folder tests to cover invalid parameter types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ce5fac7879a0e6abc330d5971b8b223035057c", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/94ce5fac7879a0e6abc330d5971b8b223035057c", "committedDate": "2020-03-27T19:21:40Z", "message": "Update Between toDefault. Fix typo in BetweenFunctionProcessor. Add more tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a78085754ea3fd7bc29bb4045362f35a54b83c", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/61a78085754ea3fd7bc29bb4045362f35a54b83c", "committedDate": "2020-03-27T19:44:29Z", "message": "Remove unneeded null checks in BetweenFunctionProcessor::doProcess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "committedDate": "2020-03-27T19:47:38Z", "message": "Merge branch 'master' into feature/between"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDM5MTMw", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-384039130", "createdAt": "2020-03-30T16:42:50Z", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0Mjo1MFrOF9yqKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozOTowM1rOF9031Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNzQ0OA==", "bodyText": "Why this package name? :-)\nShouldn't this be the same as for other string functions? org.elasticsearch.xpack.eql.expression.function.scalar.string", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400337448", "createdAt": "2020-03-30T16:42:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mjk2NA==", "bodyText": "I think sbtw is shorter and serves the same purpose.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400342964", "createdAt": "2020-03-30T16:50:57Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbetween\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjA1Ng==", "bodyText": "Can you move this one before substring (to follow the alphabetical order), please?", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400352056", "createdAt": "2020-03-30T17:04:58Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -21,4 +22,8 @@\n     public static String substring(String s, Number start, Number end) {\n         return (String) SubstringFunctionProcessor.doProcess(s, start, end);\n     }\n+\n+    public static String between(String s, String left, String right, Boolean greedy, Boolean caseSensitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjE4Mw==", "bodyText": "Same here (alphabetical).", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400352183", "createdAt": "2020-03-30T17:05:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "diffHunk": "@@ -56,4 +56,5 @@ class org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalE\n # ASCII Functions\n # \n   String  substring(String, Number, Number)\n+  String  between(String, String, String, Boolean, Boolean)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NzI3Nw==", "bodyText": "I'll let other reviewers weigh in on the necessity of this approach here.\nThat isn't an usual approach with randomized testing. The Elasticsearch infra in CI does run the tests continuously and having a randomized value for parameters is usually enough.\nA more common approach is to introduce randomness in tests with various random* methods and leave CI do its thing. A personal approach (that others I believe are following) is to stress test such a random test class with -Dtests.iters=1000 or such a large value before creating the PR. I'm not saying this is enough, but it gives one a greater degree of confidence over the committed code.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400357277", "createdAt": "2020-03-30T17:13:34Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenBaseTestCase.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.concurrent.Callable;\n+\n+public abstract class BetweenBaseTestCase extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MTg3MA==", "bodyText": "No test with last parameter set to true.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400361870", "createdAt": "2020-03-30T17:20:35Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenUtilsTests.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.apache.directory.api.util.Strings;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class BetweenUtilsTests extends BetweenBaseTestCase {\n+    public void testNullOrEmptyString() throws Exception {\n+        run(() -> {\n+            String left = randomAlphaOfLength(10);\n+            String right = randomAlphaOfLength(10);\n+            boolean greedy = randomBoolean();\n+            boolean caseSensitive = randomBoolean();\n+\n+            String string = randomBoolean() ? null : Strings.EMPTY_STRING;\n+            assertThat(BetweenUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+            return null;\n+        });\n+    }\n+\n+    public void testEmptyNullLeftRight() throws Exception {\n+        run(() -> {\n+            String string = randomAlphaOfLength(10);\n+            String left = randomBoolean() ? null : \"\";\n+            String right = randomBoolean() ? null : \"\";\n+            boolean greedy = randomBoolean();\n+            boolean caseSensitive = randomBoolean();\n+            assertThat(BetweenUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+            return null;\n+        });\n+    }\n+\n+    // Test from EQL doc https://eql.readthedocs.io/en/latest/query-guide/functions.html\n+    public void testBasicEQLExamples() {\n+        assertThat(BetweenUtils.between(\"welcome to event query language\", \" \", \" \", false, false),\n+                equalTo(\"to\"));\n+        assertThat(BetweenUtils.between(\"welcome to event query language\", \" \", \" \", true, false),\n+                equalTo(\"to event query\"));\n+        assertThat(BetweenUtils.between(\"System Idle Process\", \"s\", \"e\", true, false),\n+                equalTo(\"ystem Idle Proc\"));\n+\n+        assertThat(BetweenUtils.between(\"C:\\\\workspace\\\\dev\\\\TestLogs\\\\something.json\", \"dev\", \".json\", false, false),\n+                equalTo(\"\\\\TestLogs\\\\something\"));\n+\n+        assertThat(BetweenUtils.between(\"C:\\\\workspace\\\\dev\\\\TestLogs\\\\something.json\", \"dev\", \".json\", true, false),\n+                equalTo(\"\\\\TestLogs\\\\something\"));\n+\n+        assertThat(BetweenUtils.between(\"System Idle Process\", \"s\", \"e\", false, false),\n+                equalTo(\"yst\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODEyOQ==", "bodyText": "This should go somewhere at the top of this class.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400368129", "createdAt": "2020-03-30T17:30:16Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODg4NQ==", "bodyText": "hasOptionalParams == false", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400368885", "createdAt": "2020-03-30T17:31:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {\n+            \"zero\",\n+            \"one\",\n+            \"two\",\n+            \"three\",\n+            \"four\",\n+            \"five\",\n+    };\n+\n+    @SuppressWarnings(\"overloads\")  // These are ambiguous if you aren't using ctor references but we always do\n+    public static <T extends Function> FunctionDefinition def(Class<T> function,\n+                                                              FiveParametersFunctionBuilder<T> ctorRef,\n+                                                              int numOptionalParams, String... names) {\n+        FunctionBuilder builder = (source, children, distinct, cfg) -> {\n+            final int NUM_TOTAL_PARAMS = 5;\n+            boolean hasOptionalParams = OptionalArgument.class.isAssignableFrom(function);\n+            if (hasOptionalParams && (children.size() > NUM_TOTAL_PARAMS || children.size() < NUM_TOTAL_PARAMS - numOptionalParams)) {\n+                throw new QlIllegalArgumentException(\"expects between \" + NUM_NAMES[NUM_TOTAL_PARAMS - numOptionalParams]\n+                        + \" and \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");\n+            } else if (!hasOptionalParams && children.size() != NUM_TOTAL_PARAMS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw==", "bodyText": "I understand this wants to be a generic approach for dealing with a variable number of optional parameters, but:\n\nthis solution needs to be generic throughout this class: here it's another method accepting optional parameters.\nI don't understand the purpose of this method... it tries to be generic, but NUM_TOTAL_PARAMS is always 5. So, this method is for functions that can have between 0 and 5 optional parameters? Apart from between is there any other such function?", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400373717", "createdAt": "2020-03-30T17:39:03Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {\n+            \"zero\",\n+            \"one\",\n+            \"two\",\n+            \"three\",\n+            \"four\",\n+            \"five\",\n+    };\n+\n+    @SuppressWarnings(\"overloads\")  // These are ambiguous if you aren't using ctor references but we always do\n+    public static <T extends Function> FunctionDefinition def(Class<T> function,\n+                                                              FiveParametersFunctionBuilder<T> ctorRef,\n+                                                              int numOptionalParams, String... names) {\n+        FunctionBuilder builder = (source, children, distinct, cfg) -> {\n+            final int NUM_TOTAL_PARAMS = 5;\n+            boolean hasOptionalParams = OptionalArgument.class.isAssignableFrom(function);\n+            if (hasOptionalParams && (children.size() > NUM_TOTAL_PARAMS || children.size() < NUM_TOTAL_PARAMS - numOptionalParams)) {\n+                throw new QlIllegalArgumentException(\"expects between \" + NUM_NAMES[NUM_TOTAL_PARAMS - numOptionalParams]\n+                        + \" and \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");\n+            } else if (!hasOptionalParams && children.size() != NUM_TOTAL_PARAMS) {\n+                throw new QlIllegalArgumentException(\"expects exactly \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTM4ODgz", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-385938883", "createdAt": "2020-04-01T20:50:07Z", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDowN1rOF_SFNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDowN1rOF_SFNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMDg1Mg==", "bodyText": "why not  just add these to test_queries_supported.toml?", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401900852", "createdAt": "2020-04-01T20:50:07Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_between_queries.toml", "diffHunk": "@@ -0,0 +1,11 @@\n+[[queries]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTQwMDI3", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-385940027", "createdAt": "2020-04-01T20:51:57Z", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MTo1N1rOF_SIuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MTo1N1rOF_SIuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMTc1Mw==", "bodyText": "what if left and right are null?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (source == null) {\n          \n          \n            \n                    if (source == null || left == null || right == null) {", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401901753", "createdAt": "2020-04-01T20:51:57Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbetween\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTk2NTY2", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-385996566", "createdAt": "2020-04-01T22:35:27Z", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjozNToyN1rOF_VE9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjozNToyN1rOF_VE9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0OTk0Mg==", "bodyText": "Since there are two optional arguments, do we need another class?", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401949942", "createdAt": "2020-04-01T22:35:27Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.between.BetweenFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific between function.\n+ * between(source, left, right[, greedy=false, case_sensitive=false])\n+ * Extracts a substring from source that\u2019s between left and right substrings\n+ */\n+public class Between extends ScalarFunction implements OptionalArgument {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTk3NzUw", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-385997750", "createdAt": "2020-04-01T22:38:16Z", "commit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjozODoxNlrOF_VI8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjozODoxNlrOF_VI8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDk2MQ==", "bodyText": "Should this be three?", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401950961", "createdAt": "2020-04-01T22:38:16Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -17,12 +18,13 @@\n     public EqlFunctionRegistry() {\n         super(functions());\n     }\n-    \n+\n     private static FunctionDefinition[][] functions() {\n         return new FunctionDefinition[][] {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Between.class, Between::new, 2, \"between\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "779111c6b22f2be6b1a6ca8de8ee606f96b39a23", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/779111c6b22f2be6b1a6ca8de8ee606f96b39a23", "committedDate": "2020-04-04T19:31:31Z", "message": "Merge branch 'master' into feature/between"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "committedDate": "2020-04-04T20:08:26Z", "message": "Address code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjA1OTcy", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-388605972", "createdAt": "2020-04-06T20:49:42Z", "commit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo0OTo0MlrOGBpV2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NjoxM1rOGBpjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTA5OQ==", "bodyText": "It might be worth extracting these assertions into the Check  class inside QL and reusing them through-out the code.\nWe've been going back and forth regarding this style - the if check is fairly simple but repeating the string is tedious (and typically tends to not be consistent).", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404379099", "createdAt": "2020-04-06T20:49:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbtw\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        throwIfNotString(source);\n+        throwIfNotString(left);\n+        throwIfNotString(right);\n+\n+        throwIfNotBoolean(greedy);\n+        throwIfNotBoolean(caseSensitive);\n+\n+        String str = source.toString();\n+        String strRight = right.toString();\n+        String strLeft = left.toString();\n+        boolean bGreedy = ((Boolean) greedy).booleanValue();\n+        boolean bCaseSensitive = ((Boolean) caseSensitive).booleanValue();\n+        return StringUtils.between(str, strLeft, strRight, bGreedy, bCaseSensitive);\n+    }\n+\n+    private static void throwIfNotString(Object obj) {\n+        if (!(obj instanceof String || obj instanceof Character)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTU0Ng==", "bodyText": "Small nit - the getNameWritable tends to be towards the top after writeTo and hashCode before equals.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404379546", "createdAt": "2020-04-06T20:50:34Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbtw\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        throwIfNotString(source);\n+        throwIfNotString(left);\n+        throwIfNotString(right);\n+\n+        throwIfNotBoolean(greedy);\n+        throwIfNotBoolean(caseSensitive);\n+\n+        String str = source.toString();\n+        String strRight = right.toString();\n+        String strLeft = left.toString();\n+        boolean bGreedy = ((Boolean) greedy).booleanValue();\n+        boolean bCaseSensitive = ((Boolean) caseSensitive).booleanValue();\n+        return StringUtils.between(str, strLeft, strRight, bGreedy, bCaseSensitive);\n+    }\n+\n+    private static void throwIfNotString(Object obj) {\n+        if (!(obj instanceof String || obj instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", obj);\n+        }\n+    }\n+\n+    private static void throwIfNotBoolean(Object obj) {\n+        if (!(obj instanceof Boolean)) {\n+            throw new EqlIllegalArgumentException(\"A boolean is required; received [{}]\", obj);\n+        }\n+    }\n+\n+    protected Processor source() {\n+        return source;\n+    }\n+\n+    public Processor left() {\n+        return left;\n+    }\n+\n+    public Processor right() {\n+        return right;\n+    }\n+\n+    public Processor greedy() {\n+        return greedy;\n+    }\n+\n+    public Processor caseSensitive() {\n+        return caseSensitive;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDEwNw==", "bodyText": "You could return org.elasticsearch.xpack.ql.util.StringUtils.EMPTY instead.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380107", "createdAt": "2020-04-06T20:51:40Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -8,12 +8,57 @@\n \n import org.elasticsearch.common.Strings;\n \n+import java.util.Locale;\n+\n import static org.elasticsearch.common.Strings.hasLength;\n \n final class StringUtils {\n \n     private StringUtils() {}\n \n+    /**\n+     * Extracts a substring from string between left and right strings.\n+     * Port of \"between\" function from the original EQL python implementation.\n+     *\n+     * @param string        string to search.\n+     * @param left          left bounding substring to search for.\n+     * @param right         right bounding substring to search for.\n+     * @param greedy        match the longest substring if true.\n+     * @param caseSensitive match case when searching for {@code left} and {@code right} strings.\n+     * @return the substring in between {@code left} and {@code right} strings.\n+     */\n+    static String between(String string, String left, String right, boolean greedy, boolean caseSensitive) {\n+        if (hasLength(string) == false || hasLength(left) == false || hasLength(right) == false) {\n+            return string;\n+        }\n+\n+        String matchString = string;\n+        if (caseSensitive == false) {\n+            matchString = matchString.toLowerCase(Locale.ROOT);\n+            left = left.toLowerCase(Locale.ROOT);\n+            right = right.toLowerCase(Locale.ROOT);\n+        }\n+\n+        int idx = matchString.indexOf(left);\n+        if (idx == -1) {\n+            return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDM2OA==", "bodyText": "Wrong import.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380368", "createdAt": "2020-04-06T20:52:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -6,9 +6,11 @@\n \n package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n \n+import org.apache.directory.api.util.Strings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDU3Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380577", "createdAt": "2020-04-06T20:52:30Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -72,4 +74,68 @@ public void testSubstringRandomSliceSameStartEnd() {\n     public void testNullValue() {\n         assertNull(substringSlice(null, 0, 0));\n     }\n+\n+    public void testBetweenNullOrEmptyString() throws Exception {\n+        String left = randomAlphaOfLength(10);\n+        String right = randomAlphaOfLength(10);\n+        boolean greedy = randomBoolean();\n+        boolean caseSensitive = randomBoolean();\n+\n+        String string = randomBoolean() ? null : Strings.EMPTY_STRING;\n+        assertThat(StringUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+    }\n+\n+    public void testBetweenEmptyNullLeftRight() throws Exception {\n+        String string = randomAlphaOfLength(10);\n+        String left = randomBoolean() ? null : \"\";\n+        String right = randomBoolean() ? null : \"\";\n+        boolean greedy = randomBoolean();\n+        boolean caseSensitive = randomBoolean();\n+        assertThat(StringUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+    }\n+\n+    // Test from EQL doc https://eql.readthedocs.io/en/latest/query-guide/functions.html\n+    public void testBetweenBasicEQLExamples() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTk0MQ==", "bodyText": "Let's revisit this based on whether between actually needs case sensitivity or not - if it doesn't it will simplify things.\nSame applies for greedy.\n/cc @rw-access", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404381941", "createdAt": "2020-04-06T20:54:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {\n+            \"zero\",\n+            \"one\",\n+            \"two\",\n+            \"three\",\n+            \"four\",\n+            \"five\",\n+    };\n+\n+    @SuppressWarnings(\"overloads\")  // These are ambiguous if you aren't using ctor references but we always do\n+    public static <T extends Function> FunctionDefinition def(Class<T> function,\n+                                                              FiveParametersFunctionBuilder<T> ctorRef,\n+                                                              int numOptionalParams, String... names) {\n+        FunctionBuilder builder = (source, children, distinct, cfg) -> {\n+            final int NUM_TOTAL_PARAMS = 5;\n+            boolean hasOptionalParams = OptionalArgument.class.isAssignableFrom(function);\n+            if (hasOptionalParams && (children.size() > NUM_TOTAL_PARAMS || children.size() < NUM_TOTAL_PARAMS - numOptionalParams)) {\n+                throw new QlIllegalArgumentException(\"expects between \" + NUM_NAMES[NUM_TOTAL_PARAMS - numOptionalParams]\n+                        + \" and \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");\n+            } else if (!hasOptionalParams && children.size() != NUM_TOTAL_PARAMS) {\n+                throw new QlIllegalArgumentException(\"expects exactly \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw=="}, "originalCommit": {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjYzNA==", "bodyText": "Better to create a new exception preservation the source - helps with tracking down the location of the argument:\nnew Literal(exp.source(), Boolean.FALSE, DataTypes.Boolean)", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404382634", "createdAt": "2020-04-06T20:56:13Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.BetweenFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific between function.\n+ * between(source, left, right[, greedy=false, case_sensitive=false])\n+ * Extracts a substring from source that\u2019s between left and right substrings\n+ */\n+public class Between extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, left, right, greedy, caseSensitive;\n+\n+    public Between(Source source, Expression src, Expression left, Expression right, Expression greedy, Expression caseSensitive) {\n+        super(source, Arrays.asList(src, left, right, toDefault(greedy), toDefault(caseSensitive)));\n+        this.source = src;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = arguments().get(3);\n+        this.caseSensitive = arguments().get(4);\n+    }\n+\n+    private static Expression toDefault(Expression exp) {\n+        return exp != null ? exp : Literal.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjEyMzk5", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-388612399", "createdAt": "2020-04-06T20:59:04Z", "commit": {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff240ea00910219162ba7bb8aaff8596bc8d410", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/cff240ea00910219162ba7bb8aaff8596bc8d410", "committedDate": "2020-04-07T00:20:34Z", "message": "Address additional code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0c9832e73ca8d07bf7a2589d15a72f2f6419af3", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/a0c9832e73ca8d07bf7a2589d15a72f2f6419af3", "committedDate": "2020-04-07T00:25:22Z", "message": "Merge branch 'master' into feature/between"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDM4MDQ3", "url": "https://github.com/elastic/elasticsearch/pull/54277#pullrequestreview-389038047", "createdAt": "2020-04-07T11:49:01Z", "commit": {"oid": "cff240ea00910219162ba7bb8aaff8596bc8d410"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo0OTowMVrOGB_zSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo0OTowMVrOGB_zSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NzA4Mg==", "bodyText": "Since this import is just for CollectionUtils, I'd rather keep the projects separated and simply concatenate the lists through addAll.", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404747082", "createdAt": "2020-04-07T11:49:01Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/build.gradle", "diffHunk": "@@ -5,6 +5,7 @@ dependencies {\n   compile project(':test:framework')\n   compile project(path: xpackModule('core'), configuration: 'default')\n   compile project(path: xpackModule('core'), configuration: 'testArtifacts')\n+  compile project(path: xpackModule('ql'), configuration: 'default')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff240ea00910219162ba7bb8aaff8596bc8d410"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ac4e85f8d207b45ffd1bf90e579560a8413b8e", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/d7ac4e85f8d207b45ffd1bf90e579560a8413b8e", "committedDate": "2020-04-07T13:37:58Z", "message": "Remove dependency on QL from eql/qa project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6dfca5b30640e18f6bbd25dc2a28c7f4ff23698", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/d6dfca5b30640e18f6bbd25dc2a28c7f4ff23698", "committedDate": "2020-04-07T14:07:32Z", "message": "Merge branch 'master' into feature/between"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd5d05a7102f2ed9cbd1823ff9404cc0a63dccc9", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd5d05a7102f2ed9cbd1823ff9404cc0a63dccc9", "committedDate": "2020-04-07T14:31:33Z", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into feature/between"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a329ad71d9f1028037664155f05046cd57905f", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/39a329ad71d9f1028037664155f05046cd57905f", "committedDate": "2020-04-07T15:26:10Z", "message": "Merge branch 'master' into feature/between"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}