{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjY1NzIw", "number": 66112, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo1Mjo0N1rOFDXBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoyMjoxMVrOFDZndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDY3MjQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/DynamicTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo1Mjo0N1rOIC-C4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowMTo1NFrOIDBB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4NDYwOQ==", "bodyText": "In hindsight, we may want to rework the DynamicRuntimeFieldsBuilder interface that plugins have to implement for the dynamic runtime mode. Given that the notion of runtime field is added to XContentFieldType, we could tie the two together, as there is now some more subtle link between the two. I will do some more thinking around this as a follow-up", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r539984609", "createdAt": "2020-12-10T08:52:47Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DynamicTemplate.java", "diffHunk": "@@ -72,12 +73,8 @@ public static MatchType fromString(String value) {\n     public enum XContentFieldType {\n         OBJECT {\n             @Override\n-            public String defaultMappingType() {\n-                return ObjectMapper.CONTENT_TYPE;\n-            }\n-            @Override\n-            public String toString() {\n-                return \"object\";\n+            boolean supportsRuntimeField() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMzUxNQ==", "bodyText": "++, I was thinking as I was reading this that it would be nice to move most of applyMatchingTemplate into the dynamic template itself", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r540033515", "createdAt": "2020-12-10T10:01:54Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DynamicTemplate.java", "diffHunk": "@@ -72,12 +73,8 @@ public static MatchType fromString(String value) {\n     public enum XContentFieldType {\n         OBJECT {\n             @Override\n-            public String defaultMappingType() {\n-                return ObjectMapper.CONTENT_TYPE;\n-            }\n-            @Override\n-            public String toString() {\n-                return \"object\";\n+            boolean supportsRuntimeField() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4NDYwOQ=="}, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTA4NzE1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/mapper/TestRuntimeField.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoxOTo1N1rOIDB3-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoyODo1NFrOIDCQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA0NzM1Mg==", "bodyText": "FYI - this will clash with a test I'm adding in #66030 so depending on who gets there first one of us will need to update :)", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r540047352", "createdAt": "2020-12-10T10:19:57Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/TestRuntimeField.java", "diffHunk": "@@ -61,7 +61,7 @@ public Query termQuery(Object value, QueryShardContext context) {\n         @Override\n         public Map<String, Parser> getRuntimeFieldTypes() {\n             return Map.of(\n-                \"string\", (name, node, parserContext) -> new TestRuntimeField(name, \"string\"),\n+                \"keyword\", (name, node, parserContext) -> new TestRuntimeField(name, \"keyword\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1MzU3Nw==", "bodyText": "yes this is odd, in the beginning I was only plugging in a \"test\" field, then a bunch of them, but now string is no longer good because dynamic templates need to know how to map a string field by default, and that default is keyword, while it is text for concrete fields.", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r540053577", "createdAt": "2020-12-10T10:28:54Z", "author": {"login": "javanna"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/TestRuntimeField.java", "diffHunk": "@@ -61,7 +61,7 @@ public Query termQuery(Object value, QueryShardContext context) {\n         @Override\n         public Map<String, Parser> getRuntimeFieldTypes() {\n             return Map.of(\n-                \"string\", (name, node, parserContext) -> new TestRuntimeField(name, \"string\"),\n+                \"keyword\", (name, node, parserContext) -> new TestRuntimeField(name, \"keyword\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA0NzM1Mg=="}, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTA5NzQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoyMjoxMVrOIDB-RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDoyNzoyMlrOIDCMLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA0ODk2NQ==", "bodyText": "This all makes me think that we need to extend the XContentMapValues functions to take predicates or lambdas or something, we have a lot of repeated 'descend through json objects' code here and elsewhere.  But that can be for later, we don't need it for this PR.", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r540048965", "createdAt": "2020-12-10T10:22:11Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -476,21 +480,21 @@ private static boolean containsSnippet(Map<?, ?> map, String snippet) {\n \n     private static boolean containsSnippet(List<?> list, String snippet) {\n         for (Object value : list) {\n-            if (value instanceof Map) {\n-                if (containsSnippet((Map<?, ?>) value, snippet)) {\n-                    return true;\n-                }\n-            } else if (value instanceof List) {\n-                if (containsSnippet((List<?>) value, snippet)) {\n-                    return true;\n-                }\n-            } else if (value instanceof String) {\n-                String valueString = (String) value;\n-                if (valueString.contains(snippet)) {\n-                    return true;\n-                }\n+            if (containsSnippet(value, snippet)) {\n+                return true;\n             }\n         }\n         return false;\n     }\n+\n+    private static boolean containsSnippet(Object value, String snippet) {\n+        if (value instanceof Map) {\n+            return containsSnippet((Map<?, ?>) value, snippet);\n+        } else if (value instanceof List) {\n+            return containsSnippet((List<?>) value, snippet);\n+        } else if (value instanceof String) {\n+            return ((String) value).contains(snippet);\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1MjUyNA==", "bodyText": "true I have refactored two places where we do that as part of this PR.", "url": "https://github.com/elastic/elasticsearch/pull/66112#discussion_r540052524", "createdAt": "2020-12-10T10:27:22Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java", "diffHunk": "@@ -476,21 +480,21 @@ private static boolean containsSnippet(Map<?, ?> map, String snippet) {\n \n     private static boolean containsSnippet(List<?> list, String snippet) {\n         for (Object value : list) {\n-            if (value instanceof Map) {\n-                if (containsSnippet((Map<?, ?>) value, snippet)) {\n-                    return true;\n-                }\n-            } else if (value instanceof List) {\n-                if (containsSnippet((List<?>) value, snippet)) {\n-                    return true;\n-                }\n-            } else if (value instanceof String) {\n-                String valueString = (String) value;\n-                if (valueString.contains(snippet)) {\n-                    return true;\n-                }\n+            if (containsSnippet(value, snippet)) {\n+                return true;\n             }\n         }\n         return false;\n     }\n+\n+    private static boolean containsSnippet(Object value, String snippet) {\n+        if (value instanceof Map) {\n+            return containsSnippet((Map<?, ?>) value, snippet);\n+        } else if (value instanceof List) {\n+            return containsSnippet((List<?>) value, snippet);\n+        } else if (value instanceof String) {\n+            return ((String) value).contains(snippet);\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA0ODk2NQ=="}, "originalCommit": {"oid": "5ec9cc87564a1a740db79b021322a382651cd0e8"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4710, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}