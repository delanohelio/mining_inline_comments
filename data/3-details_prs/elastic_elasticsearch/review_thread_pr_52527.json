{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3Mjg3OTc3", "number": 52527, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyMjoyNFrODhJstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoyMToyMFrODlszzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDg4NTAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyMjoyNFrOFrwVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyMjoyNFrOFrwVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTAyNA==", "bodyText": "for discussion", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381425024", "createdAt": "2020-02-19T17:22:24Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,10 +421,18 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert existingShardsAllocators.isEmpty() == false : \"must have at least one ExistingShardsAllocator\";\n \n         removeDelayMarkers(allocation);\n+\n+        allocation.routingNodes().unassigned().sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n+\n         // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n+        // TODO TBD the order in which allocators run depends on the order of plugins so is not properly defined. Does this matter?\n+        // TODO TBD this means earlier allocators allocate shards before the later allocators can allocate possibly-higher-priority ones", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDg4NTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyMjozMFrOFrwVtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1ODoyOVrOFs3syQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTA3OA==", "bodyText": "for discussion", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381425078", "createdAt": "2020-02-19T17:22:30Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,10 +421,18 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert existingShardsAllocators.isEmpty() == false : \"must have at least one ExistingShardsAllocator\";\n \n         removeDelayMarkers(allocation);\n+\n+        allocation.routingNodes().unassigned().sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n+\n         // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n+        // TODO TBD the order in which allocators run depends on the order of plugins so is not properly defined. Does this matter?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3NDMyNw==", "bodyText": "We could leave it to the core framework to decide which allocator to invoke", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381874327", "createdAt": "2020-02-20T09:22:03Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,10 +421,18 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert existingShardsAllocators.isEmpty() == false : \"must have at least one ExistingShardsAllocator\";\n \n         removeDelayMarkers(allocation);\n+\n+        allocation.routingNodes().unassigned().sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n+\n         // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n+        // TODO TBD the order in which allocators run depends on the order of plugins so is not properly defined. Does this matter?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTA3OA=="}, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5NDI0OQ==", "bodyText": "\ud83d\udc4d I've moved to that model now.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r382594249", "createdAt": "2020-02-21T13:58:29Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,10 +421,18 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert existingShardsAllocators.isEmpty() == false : \"must have at least one ExistingShardsAllocator\";\n \n         removeDelayMarkers(allocation);\n+\n+        allocation.routingNodes().unassigned().sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n+\n         // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n+        // TODO TBD the order in which allocators run depends on the order of plugins so is not properly defined. Does this matter?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTA3OA=="}, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDg5MzIyOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/store/Store.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyNDozMlrOFrwaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozOTo0OFrOFsMY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNjI3OQ==", "bodyText": "With this commit, this hack is no longer needed since we do not fetch the shard info like this.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381426279", "createdAt": "2020-02-19T17:24:32Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/store/Store.java", "diffHunk": "@@ -446,13 +446,8 @@ public static void tryOpenIndex(Path indexLocation, ShardId shardId, NodeEnviron\n         try (ShardLock lock = shardLocker.lock(shardId, \"open index\", TimeUnit.SECONDS.toMillis(5));\n              Directory dir = new SimpleFSDirectory(indexLocation)) {\n             failIfCorrupted(dir);\n-            // Previously we called Lucene#readSegmentInfos which verifies that some Lucene metadata is readable and makes sense, but if it\n-            // weren't then we would mark this shard as corrupt when allocated, so it seems that this is unnecessary (and it breaks when\n-            // the shard's directory is virtual since we use SimpleFSDirectory above.\n-            // TODO NORELEASE is this ok? Need to check that we definitely add a corruption marker if the metadata is corrupt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4NDY2MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381884660", "createdAt": "2020-02-20T09:39:48Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/store/Store.java", "diffHunk": "@@ -446,13 +446,8 @@ public static void tryOpenIndex(Path indexLocation, ShardId shardId, NodeEnviron\n         try (ShardLock lock = shardLocker.lock(shardId, \"open index\", TimeUnit.SECONDS.toMillis(5));\n              Directory dir = new SimpleFSDirectory(indexLocation)) {\n             failIfCorrupted(dir);\n-            // Previously we called Lucene#readSegmentInfos which verifies that some Lucene metadata is readable and makes sense, but if it\n-            // weren't then we would mark this shard as corrupt when allocated, so it seems that this is unnecessary (and it breaks when\n-            // the shard's directory is virtual since we use SimpleFSDirectory above.\n-            // TODO NORELEASE is this ok? Need to check that we definitely add a corruption marker if the metadata is corrupt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNjI3OQ=="}, "originalCommit": {"oid": "a524179d505f46409e96d461e7495d6d5fbf2df8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzcxMDM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo0NzowMlrOFsJCrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo1Mzo1NlrOFyuuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg==", "bodyText": "I think I would prefer to not name the plugin in index settings and instead just have a searchable snapshot specific setting that triggers this.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381829806", "createdAt": "2020-02-20T07:47:02Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1Nzc2NQ==", "bodyText": "I don't really understand this suggestion, sorry. Are you saying that we should allocate the shard as normal if the plugin is missing?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381857765", "createdAt": "2020-02-20T08:51:13Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4NDE3MQ==", "bodyText": "I wonder if we should have a separate facility that ensures that certain plugins are installed in the presence of certain types of indices. Otherwise we have to build this again and again for any plugin-specific setting that we introduce.\nTake for example \"follower\" indices (CCR). Those only make sense in the context of x-pack.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381884171", "createdAt": "2020-02-20T09:38:54Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwODQzMw==", "bodyText": "I now see the leniency in MetaDataIndexUpgradeService.archiveBrokenIndexSettings, I thought we would be stricter on that. It seems dangerous that we just archive all the settings and then act like nothing happened. I think not allocating any such indices until resolved would be better, but that is likely a more intrusive change.\nMaybe there is a different way we can deem indices with searchable snapshot settings without the underlying plugin more invalid than other superfluous settings?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381908433", "createdAt": "2020-02-20T10:22:18Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5NzMxNw==", "bodyText": "I have reverted these changes to the PrimaryShardAllocator and instead now the AllocationService chooses the correct allocator based on an index setting. I think a setting is a good approach; we could perhaps deduce the fact that a different allocator is needed for searchable snapshots via some other mechanism, but I'm not sure what that mechanism might be nor what advantage it offers.\nI am generally in favour of validating that the nodes in the cluster \"make sense\" in terms of their plugins but that's a larger topic for another day IMO.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r382597317", "createdAt": "2020-02-21T14:04:28Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODMxNA==", "bodyText": "@henningandersen See #26998.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r382878314", "createdAt": "2020-02-22T02:29:39Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODYyNA==", "bodyText": "My main issue with the approach is redundancy. I can see how the redundancy here solves the issue of a missing plugin and agree that solving that is not now.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r388738624", "createdAt": "2020-03-06T06:53:56Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java", "diffHunk": "@@ -82,6 +98,14 @@ public AllocateUnassignedDecision makeAllocationDecision(final ShardRouting unas\n             return AllocateUnassignedDecision.NOT_TAKEN;\n         }\n \n+        final IndexMetaData indexMetaData = allocation.metaData().getIndexSafe(unassignedShard.index());\n+        final String existingShardsAllocator = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(indexMetaData.getSettings());\n+        if (unassignedShard.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE\n+            && existingShardsAllocator.equals(GatewayAllocator.ALLOCATOR_NAME) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTgwNg=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Mzc3NjMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODoxMjo1NlrOFsJqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxMToyNFrOFsLZ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzOTk5OA==", "bodyText": "It seems like the loop here and the handling of a NO decision belongs in the framework (allocation service?) rather than in every plugin. It is important that this is done right.\nThis in turn could lead to removing GatewayAllocator completely and letting Replica and PrimaryShardAllocator become individual ExistingShardsAllocators. A method to allow processExistingRecoveries would be necessary though.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381839998", "createdAt": "2020-02-20T08:12:56Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation) {\n+\n+        final RoutingNodes.UnassignedShards.UnassignedIterator iterator = allocation.routingNodes().unassigned().iterator();\n+\n+        while (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2NDM4NQ==", "bodyText": "Here we handle NO (and THROTTLE) decisions by stopping further allocation attempts, but that behaviour seems to me to be specific to this plugin (and the fact that this naive implementation checks all nodes against the deciders). For instance, the ReplicaShardAllocator does not share this behaviour: it only checks the deciders for nodes with at least some of the shard on disk already, and allows NO decisions to fall through to the BalancedShardsAllocator so that replicas can be allocated afresh.\nI'm in two minds about iterating through the unassigned shards within each allocator. As written, we prioritise the shards that can be allocated by a plugin over the standard shards. In the case of searchable snapshots I don't think this is too bad (they should be fast to start and may well live on their own nodes). On the other hand if we pulled the loop up to the AllocationService then this would change the allocation order to prefer recovering higher-priority replicas instead of lower-priority primaries, which would keep the cluster in red health for longer after startup.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381864385", "createdAt": "2020-02-20T09:03:37Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation) {\n+\n+        final RoutingNodes.UnassignedShards.UnassignedIterator iterator = allocation.routingNodes().unassigned().iterator();\n+\n+        while (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzOTk5OA=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2ODQ5OA==", "bodyText": "Hmm having written that it's now obvious that we could solve the priority thing by sorting the shards based on whether they're a primary or not \ud83e\udd26\u200d\u2642", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381868498", "createdAt": "2020-02-20T09:11:24Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation) {\n+\n+        final RoutingNodes.UnassignedShards.UnassignedIterator iterator = allocation.routingNodes().unassigned().iterator();\n+\n+        while (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzOTk5OA=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Mzc4NDc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODoxNjoxOVrOFsJv0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxMzoyMFrOFsLduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0MTM2MA==", "bodyText": "If we want to name the allocator in settings, I think we should just pick the right allocator per shard from the outside?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381841360", "createdAt": "2020-02-20T08:16:19Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation) {\n+\n+        final RoutingNodes.UnassignedShards.UnassignedIterator iterator = allocation.routingNodes().unassigned().iterator();\n+\n+        while (iterator.hasNext()) {\n+            final ShardRouting shardRouting = iterator.next();\n+            final AllocateUnassignedDecision allocateUnassignedDecision = decideAllocation(allocation, shardRouting);\n+\n+            if (allocateUnassignedDecision.isDecisionTaken()) {\n+                if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {\n+                    if (shardRouting.primary() && shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE) {\n+                        // we don't care what the allocation ID is since we know that these shards cannot really be stale, so we can\n+                        // safely ignore the allocation ID with a forced-stale allocation\n+                        iterator.updateUnassigned(shardRouting.unassignedInfo(),\n+                            RecoverySource.ExistingStoreRecoverySource.FORCE_STALE_PRIMARY_INSTANCE, allocation.changes());\n+                    }\n+                    iterator.initialize(allocateUnassignedDecision.getTargetNode().getId(), null, 0L, allocation.changes());\n+                } else {\n+                    iterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static AllocateUnassignedDecision decideAllocation(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        if (isResponsibleFor(allocation, shardRouting)) {\n+            Decision.Type bestDecision = Decision.Type.NO;\n+            RoutingNode bestNode = null;\n+            final List<NodeAllocationResult> nodeAllocationResults\n+                = allocation.debugDecision() ? new ArrayList<>(allocation.routingNodes().size()) : null;\n+\n+            for (final RoutingNode routingNode : allocation.routingNodes()) {\n+                final Decision decision = allocation.deciders().canAllocate(shardRouting, routingNode, allocation);\n+                if (decision.type() == Decision.Type.YES\n+                    || (decision.type() == Decision.Type.THROTTLE && bestDecision != Decision.Type.YES)) {\n+                    bestDecision = decision.type();\n+                    bestNode = routingNode;\n+                }\n+                if (nodeAllocationResults != null) {\n+                    nodeAllocationResults.add(new NodeAllocationResult(routingNode.node(), null, decision));\n+                }\n+            }\n+\n+            switch (bestDecision) {\n+                case YES:\n+                    return AllocateUnassignedDecision.yes(bestNode.node(), null, nodeAllocationResults, false);\n+                case THROTTLE:\n+                    return AllocateUnassignedDecision.throttle(nodeAllocationResults);\n+                case NO:\n+                    return AllocateUnassignedDecision.no(UnassignedInfo.AllocationStatus.DECIDERS_NO, nodeAllocationResults);\n+            }\n+        }\n+\n+        return AllocateUnassignedDecision.NOT_TAKEN;\n+    }\n+\n+    private static boolean isResponsibleFor(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        final Settings settings = allocation.metaData().getIndexSafe(shardRouting.index()).getSettings();\n+        return shardRouting.unassigned() && ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(settings).equals(ALLOCATOR_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2OTQ5OQ==", "bodyText": "Yes, this needs the loop to be brought up to the top level, which I now see that we can do safely. I'll try that.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r381869499", "createdAt": "2020-02-20T09:13:20Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation) {\n+\n+        final RoutingNodes.UnassignedShards.UnassignedIterator iterator = allocation.routingNodes().unassigned().iterator();\n+\n+        while (iterator.hasNext()) {\n+            final ShardRouting shardRouting = iterator.next();\n+            final AllocateUnassignedDecision allocateUnassignedDecision = decideAllocation(allocation, shardRouting);\n+\n+            if (allocateUnassignedDecision.isDecisionTaken()) {\n+                if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {\n+                    if (shardRouting.primary() && shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE) {\n+                        // we don't care what the allocation ID is since we know that these shards cannot really be stale, so we can\n+                        // safely ignore the allocation ID with a forced-stale allocation\n+                        iterator.updateUnassigned(shardRouting.unassignedInfo(),\n+                            RecoverySource.ExistingStoreRecoverySource.FORCE_STALE_PRIMARY_INSTANCE, allocation.changes());\n+                    }\n+                    iterator.initialize(allocateUnassignedDecision.getTargetNode().getId(), null, 0L, allocation.changes());\n+                } else {\n+                    iterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static AllocateUnassignedDecision decideAllocation(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        if (isResponsibleFor(allocation, shardRouting)) {\n+            Decision.Type bestDecision = Decision.Type.NO;\n+            RoutingNode bestNode = null;\n+            final List<NodeAllocationResult> nodeAllocationResults\n+                = allocation.debugDecision() ? new ArrayList<>(allocation.routingNodes().size()) : null;\n+\n+            for (final RoutingNode routingNode : allocation.routingNodes()) {\n+                final Decision decision = allocation.deciders().canAllocate(shardRouting, routingNode, allocation);\n+                if (decision.type() == Decision.Type.YES\n+                    || (decision.type() == Decision.Type.THROTTLE && bestDecision != Decision.Type.YES)) {\n+                    bestDecision = decision.type();\n+                    bestNode = routingNode;\n+                }\n+                if (nodeAllocationResults != null) {\n+                    nodeAllocationResults.add(new NodeAllocationResult(routingNode.node(), null, decision));\n+                }\n+            }\n+\n+            switch (bestDecision) {\n+                case YES:\n+                    return AllocateUnassignedDecision.yes(bestNode.node(), null, nodeAllocationResults, false);\n+                case THROTTLE:\n+                    return AllocateUnassignedDecision.throttle(nodeAllocationResults);\n+                case NO:\n+                    return AllocateUnassignedDecision.no(UnassignedInfo.AllocationStatus.DECIDERS_NO, nodeAllocationResults);\n+            }\n+        }\n+\n+        return AllocateUnassignedDecision.NOT_TAKEN;\n+    }\n+\n+    private static boolean isResponsibleFor(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        final Settings settings = allocation.metaData().getIndexSafe(shardRouting.index()).getSettings();\n+        return shardRouting.unassigned() && ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(settings).equals(ALLOCATOR_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0MTM2MA=="}, "originalCommit": {"oid": "438ec61043958b6bec8354def99b49d690eeac2f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTUwMDgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxNjoyNjo0M1rOFtRmIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1ODo1MFrOFwgbPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxODUyOA==", "bodyText": "for started shards, you used a for loop, whereas here there's a lambda. Perhaps just make it consistent?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r383018528", "createdAt": "2020-02-23T16:26:43Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -217,7 +230,8 @@ public ClusterState applyFailedShards(final ClusterState clusterState, final Lis\n                 logger.trace(\"{} shard routing failed in an earlier iteration (routing: {})\", shardToFail.shardId(), shardToFail);\n             }\n         }\n-        gatewayAllocator.applyFailedShards(allocation, failedShards);\n+        existingShardsAllocators.values().forEach(existingShardsAllocator ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzIzMA==", "bodyText": "++ done in  c9b84ab.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386407230", "createdAt": "2020-03-02T13:58:50Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -217,7 +230,8 @@ public ClusterState applyFailedShards(final ClusterState clusterState, final Lis\n                 logger.trace(\"{} shard routing failed in an earlier iteration (routing: {})\", shardToFail.shardId(), shardToFail);\n             }\n         }\n-        gatewayAllocator.applyFailedShards(allocation, failedShards);\n+        existingShardsAllocators.values().forEach(existingShardsAllocator ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxODUyOA=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTUwMzgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxNjozMTozNlrOFtRnkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozMDowN1rOFwhgSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxODg5Nw==", "bodyText": "as these lookups can be expensive in case there are many unassigned shards, I wonder if we should pass the retrieved IndexMetaData to the ExistingShardsAllocator.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r383018897", "createdAt": "2020-02-23T16:31:36Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -470,7 +514,104 @@ protected long currentNanoTime() {\n     }\n \n     public void cleanCaches() {\n-        gatewayAllocator.cleanCaches();\n+        assert assertInitialized();\n+        existingShardsAllocators.values().forEach(ExistingShardsAllocator::cleanCaches);\n+    }\n+\n+    public int getNumberOfInFlightFetches() {\n+        assert assertInitialized();\n+        return existingShardsAllocators.values().stream().mapToInt(ExistingShardsAllocator::getNumberOfInFlightFetches).sum();\n+    }\n+\n+    public ShardAllocationDecision explainShardAllocation(ShardRouting shardRouting, RoutingAllocation allocation) {\n+        assert allocation.debugDecision();\n+        AllocateUnassignedDecision allocateDecision\n+            = shardRouting.unassigned() ? explainUnassignedShardAllocation(shardRouting, allocation) : AllocateUnassignedDecision.NOT_TAKEN;\n+        if (allocateDecision.isDecisionTaken()) {\n+            return new ShardAllocationDecision(allocateDecision, MoveDecision.NOT_TAKEN);\n+        } else {\n+            return shardsAllocator.decideShardAllocation(shardRouting, allocation);\n+        }\n+    }\n+\n+    private AllocateUnassignedDecision explainUnassignedShardAllocation(ShardRouting shardRouting, RoutingAllocation routingAllocation) {\n+        assert shardRouting.unassigned();\n+        assert routingAllocation.debugDecision();\n+        assert assertInitialized();\n+        final ExistingShardsAllocator existingShardsAllocator = getAllocatorForShard(shardRouting, routingAllocation);\n+        final AllocateUnassignedDecision decision\n+            = existingShardsAllocator.explainUnassignedShardAllocation(shardRouting, routingAllocation);\n+        if (decision.isDecisionTaken()) {\n+            return decision;\n+        }\n+        return AllocateUnassignedDecision.NOT_TAKEN;\n+    }\n+\n+    private ExistingShardsAllocator getAllocatorForShard(ShardRouting shardRouting, RoutingAllocation routingAllocation) {\n+        assert assertInitialized();\n+        final String allocatorName = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(\n+            routingAllocation.metaData().getIndexSafe(shardRouting.index()).getSettings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNDkwNQ==", "bodyText": "It involves passing the IndexMetaData around to a lot of places. I mean we could do that if you're sure this is sufficiently expensive, but it seems surprising to me  that this would be a concern.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386424905", "createdAt": "2020-03-02T14:30:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -470,7 +514,104 @@ protected long currentNanoTime() {\n     }\n \n     public void cleanCaches() {\n-        gatewayAllocator.cleanCaches();\n+        assert assertInitialized();\n+        existingShardsAllocators.values().forEach(ExistingShardsAllocator::cleanCaches);\n+    }\n+\n+    public int getNumberOfInFlightFetches() {\n+        assert assertInitialized();\n+        return existingShardsAllocators.values().stream().mapToInt(ExistingShardsAllocator::getNumberOfInFlightFetches).sum();\n+    }\n+\n+    public ShardAllocationDecision explainShardAllocation(ShardRouting shardRouting, RoutingAllocation allocation) {\n+        assert allocation.debugDecision();\n+        AllocateUnassignedDecision allocateDecision\n+            = shardRouting.unassigned() ? explainUnassignedShardAllocation(shardRouting, allocation) : AllocateUnassignedDecision.NOT_TAKEN;\n+        if (allocateDecision.isDecisionTaken()) {\n+            return new ShardAllocationDecision(allocateDecision, MoveDecision.NOT_TAKEN);\n+        } else {\n+            return shardsAllocator.decideShardAllocation(shardRouting, allocation);\n+        }\n+    }\n+\n+    private AllocateUnassignedDecision explainUnassignedShardAllocation(ShardRouting shardRouting, RoutingAllocation routingAllocation) {\n+        assert shardRouting.unassigned();\n+        assert routingAllocation.debugDecision();\n+        assert assertInitialized();\n+        final ExistingShardsAllocator existingShardsAllocator = getAllocatorForShard(shardRouting, routingAllocation);\n+        final AllocateUnassignedDecision decision\n+            = existingShardsAllocator.explainUnassignedShardAllocation(shardRouting, routingAllocation);\n+        if (decision.isDecisionTaken()) {\n+            return decision;\n+        }\n+        return AllocateUnassignedDecision.NOT_TAKEN;\n+    }\n+\n+    private ExistingShardsAllocator getAllocatorForShard(ShardRouting shardRouting, RoutingAllocation routingAllocation) {\n+        assert assertInitialized();\n+        final String allocatorName = ExistingShardsAllocator.EXISTING_SHARDS_ALLOCATOR_SETTING.get(\n+            routingAllocation.metaData().getIndexSafe(shardRouting.index()).getSettings());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxODg5Nw=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTUxMTIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxNjo0NToyOVrOFtRrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyNzozM1rOFwhazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxOTg3OQ==", "bodyText": "The cluster module already receives the clusterPlugins at initialization time. Perhaps we can just reuse those or even extract the ExistingShardsAllocator at init time?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r383019879", "createdAt": "2020-02-23T16:45:29Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "diffHunk": "@@ -251,4 +252,21 @@ protected void configure() {\n         bind(AllocationDeciders.class).toInstance(allocationDeciders);\n         bind(ShardsAllocator.class).toInstance(shardsAllocator);\n     }\n+\n+    public void setExistingShardsAllocators(GatewayAllocator gatewayAllocator, List<ClusterPlugin> clusterPlugins) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyMTE0MQ==", "bodyText": "We have to defer the creation of the allocators until later, because they need a RerouteService and there's an (intrinsically tricky) circular dependency to resolve. We'll need to do this differently when the plugin's allocator also needs a RerouteService but it's premature to address that  now.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386421141", "createdAt": "2020-03-02T14:23:43Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "diffHunk": "@@ -251,4 +252,21 @@ protected void configure() {\n         bind(AllocationDeciders.class).toInstance(allocationDeciders);\n         bind(ShardsAllocator.class).toInstance(shardsAllocator);\n     }\n+\n+    public void setExistingShardsAllocators(GatewayAllocator gatewayAllocator, List<ClusterPlugin> clusterPlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxOTg3OQ=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyMzUwMg==", "bodyText": "Ok, addressed in 4b8888c.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386423502", "createdAt": "2020-03-02T14:27:33Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "diffHunk": "@@ -251,4 +252,21 @@ protected void configure() {\n         bind(AllocationDeciders.class).toInstance(allocationDeciders);\n         bind(ShardsAllocator.class).toInstance(shardsAllocator);\n     }\n+\n+    public void setExistingShardsAllocators(GatewayAllocator gatewayAllocator, List<ClusterPlugin> clusterPlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAxOTg3OQ=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTUxMjQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxNjo0Njo1NlrOFtRsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1OTowMlrOFwgbqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMDA0MQ==", "bodyText": "maybe omit the \"instead\", and explain what the key in this map represents (to which setting it is tied)", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r383020041", "createdAt": "2020-02-23T16:46:56Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java", "diffHunk": "@@ -59,6 +60,14 @@\n         return Collections.emptyMap();\n     }\n \n+    /**\n+     * Return {@link ExistingShardsAllocator} implementations added by this plugin, which will run instead of the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzMzOA==", "bodyText": "++ done in 6cd0917.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386407338", "createdAt": "2020-03-02T13:59:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java", "diffHunk": "@@ -59,6 +60,14 @@\n         return Collections.emptyMap();\n     }\n \n+    /**\n+     * Return {@link ExistingShardsAllocator} implementations added by this plugin, which will run instead of the default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMDA0MQ=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzc1NTMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowMzozNVrOFuMA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1OToxNlrOFwgcLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NTY0Mw==", "bodyText": "nit: I would prefer to leave the field null until initialized (and thus non-final), that seems simpler to me.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r383975643", "createdAt": "2020-02-25T16:03:35Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -70,26 +73,32 @@\n     private static final Logger logger = LogManager.getLogger(AllocationService.class);\n \n     private final AllocationDeciders allocationDeciders;\n-    private GatewayAllocator gatewayAllocator;\n+    private final Map<String, ExistingShardsAllocator> existingShardsAllocators = new HashMap<>();\n     private final ShardsAllocator shardsAllocator;\n     private final ClusterInfoService clusterInfoService;\n \n-    public AllocationService(AllocationDeciders allocationDeciders,\n-                             GatewayAllocator gatewayAllocator,\n+    // only for tests that use the GatewayAllocator as the unique ExistingShardsAllocator\n+    public AllocationService(AllocationDeciders allocationDeciders, GatewayAllocator gatewayAllocator,\n                              ShardsAllocator shardsAllocator, ClusterInfoService clusterInfoService) {\n         this(allocationDeciders, shardsAllocator, clusterInfoService);\n-        setGatewayAllocator(gatewayAllocator);\n+        setExistingShardsAllocators(Collections.singletonMap(GatewayAllocator.ALLOCATOR_NAME, gatewayAllocator));\n     }\n \n-    public AllocationService(AllocationDeciders allocationDeciders,\n-                             ShardsAllocator shardsAllocator, ClusterInfoService clusterInfoService) {\n+    public AllocationService(AllocationDeciders allocationDeciders, ShardsAllocator shardsAllocator,\n+                             ClusterInfoService clusterInfoService) {\n         this.allocationDeciders = allocationDeciders;\n         this.shardsAllocator = shardsAllocator;\n         this.clusterInfoService = clusterInfoService;\n     }\n \n-    public void setGatewayAllocator(GatewayAllocator gatewayAllocator) {\n-        this.gatewayAllocator = gatewayAllocator;\n+    /**\n+     * Inject the {@link ExistingShardsAllocator}s to use. May only be called once.\n+     */\n+    public void setExistingShardsAllocators(Map<String, ExistingShardsAllocator> existingShardsAllocators) {\n+        assert this.existingShardsAllocators.isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzQ3MQ==", "bodyText": "Ok, done in e6e5b7e.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386407471", "createdAt": "2020-03-02T13:59:16Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -70,26 +73,32 @@\n     private static final Logger logger = LogManager.getLogger(AllocationService.class);\n \n     private final AllocationDeciders allocationDeciders;\n-    private GatewayAllocator gatewayAllocator;\n+    private final Map<String, ExistingShardsAllocator> existingShardsAllocators = new HashMap<>();\n     private final ShardsAllocator shardsAllocator;\n     private final ClusterInfoService clusterInfoService;\n \n-    public AllocationService(AllocationDeciders allocationDeciders,\n-                             GatewayAllocator gatewayAllocator,\n+    // only for tests that use the GatewayAllocator as the unique ExistingShardsAllocator\n+    public AllocationService(AllocationDeciders allocationDeciders, GatewayAllocator gatewayAllocator,\n                              ShardsAllocator shardsAllocator, ClusterInfoService clusterInfoService) {\n         this(allocationDeciders, shardsAllocator, clusterInfoService);\n-        setGatewayAllocator(gatewayAllocator);\n+        setExistingShardsAllocators(Collections.singletonMap(GatewayAllocator.ALLOCATOR_NAME, gatewayAllocator));\n     }\n \n-    public AllocationService(AllocationDeciders allocationDeciders,\n-                             ShardsAllocator shardsAllocator, ClusterInfoService clusterInfoService) {\n+    public AllocationService(AllocationDeciders allocationDeciders, ShardsAllocator shardsAllocator,\n+                             ClusterInfoService clusterInfoService) {\n         this.allocationDeciders = allocationDeciders;\n         this.shardsAllocator = shardsAllocator;\n         this.clusterInfoService = clusterInfoService;\n     }\n \n-    public void setGatewayAllocator(GatewayAllocator gatewayAllocator) {\n-        this.gatewayAllocator = gatewayAllocator;\n+    /**\n+     * Inject the {@link ExistingShardsAllocator}s to use. May only be called once.\n+     */\n+    public void setExistingShardsAllocators(Map<String, ExistingShardsAllocator> existingShardsAllocators) {\n+        assert this.existingShardsAllocators.isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3NTY0Mw=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg1NjY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo1Nzo1OFrOFugBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowMjoyOFrOFwgjCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzUzNw==", "bodyText": "I would prefer to use a dedicated interface with the 3 methods that a plugin is allowed to use (in particular, they are not allowed to call .next() on this iterator).", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384303537", "createdAt": "2020-02-26T06:57:58Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.gateway.GatewayAllocator;\n+\n+import java.util.List;\n+\n+/**\n+ * Searches for, and allocates, shards for which there is an existing on-disk copy somewhere in the cluster. The default implementation is\n+ * {@link GatewayAllocator}, but plugins can supply their own implementations too.\n+ */\n+public interface ExistingShardsAllocator {\n+\n+    /**\n+     * Allows plugins to override how we allocate shards that may already exist on disk in the cluster.\n+     */\n+    Setting<String> EXISTING_SHARDS_ALLOCATOR_SETTING = Setting.simpleString(\n+        \"index.allocation.existing_shards_allocator\", GatewayAllocator.ALLOCATOR_NAME,\n+        Setting.Property.IndexScope, Setting.Property.PrivateIndex);\n+\n+    /**\n+     * Called before starting a round of allocation, allowing the allocator to invalidate some caches if appropriate.\n+     */\n+    void beforeAllocation(RoutingAllocation allocation);\n+\n+\n+    /**\n+     * Called during a round of allocation after attempting to allocate all the primaries but before any replicas, allowing the allocator\n+     * to prepare for replica allocation.\n+     */\n+    void afterPrimariesBeforeReplicas(RoutingAllocation allocation);\n+\n+    /**\n+     * Allocate any unassigned shards in the given {@link RoutingAllocation} for which this {@link ExistingShardsAllocator} is responsible.\n+     */\n+    void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,\n+                            RoutingNodes.UnassignedShards.UnassignedIterator iterator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwOTIyNA==", "bodyText": "Ok, done in c7c1701. This whole area is steeped in  legacy -- there's no need to implement Iterator at all -- but now is  not  the time to clean that up.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386409224", "createdAt": "2020-03-02T14:02:28Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.gateway.GatewayAllocator;\n+\n+import java.util.List;\n+\n+/**\n+ * Searches for, and allocates, shards for which there is an existing on-disk copy somewhere in the cluster. The default implementation is\n+ * {@link GatewayAllocator}, but plugins can supply their own implementations too.\n+ */\n+public interface ExistingShardsAllocator {\n+\n+    /**\n+     * Allows plugins to override how we allocate shards that may already exist on disk in the cluster.\n+     */\n+    Setting<String> EXISTING_SHARDS_ALLOCATOR_SETTING = Setting.simpleString(\n+        \"index.allocation.existing_shards_allocator\", GatewayAllocator.ALLOCATOR_NAME,\n+        Setting.Property.IndexScope, Setting.Property.PrivateIndex);\n+\n+    /**\n+     * Called before starting a round of allocation, allowing the allocator to invalidate some caches if appropriate.\n+     */\n+    void beforeAllocation(RoutingAllocation allocation);\n+\n+\n+    /**\n+     * Called during a round of allocation after attempting to allocate all the primaries but before any replicas, allowing the allocator\n+     * to prepare for replica allocation.\n+     */\n+    void afterPrimariesBeforeReplicas(RoutingAllocation allocation);\n+\n+    /**\n+     * Allocate any unassigned shards in the given {@link RoutingAllocation} for which this {@link ExistingShardsAllocator} is responsible.\n+     */\n+    void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,\n+                            RoutingNodes.UnassignedShards.UnassignedIterator iterator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzUzNw=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDU1MzgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo0NDo0OVrOFumq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNzoxMVrOFwgsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMjM5OA==", "bodyText": "nit: I think the _allocator suffix in the name is superfluous and should be removed.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384412398", "createdAt": "2020-02-26T10:44:49Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -54,7 +55,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-public class GatewayAllocator {\n+public class GatewayAllocator implements ExistingShardsAllocator {\n+\n+    public static final String ALLOCATOR_NAME = \"gateway_allocator\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTYyOQ==", "bodyText": "I prefer to keep the suffix to distinguish it from all the other things called gateway in this area.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386411629", "createdAt": "2020-03-02T14:07:11Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -54,7 +55,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n-public class GatewayAllocator {\n+public class GatewayAllocator implements ExistingShardsAllocator {\n+\n+    public static final String ALLOCATOR_NAME = \"gateway_allocator\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMjM5OA=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDU2MTgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo0Njo1N1rOFumv2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNzoyOFrOFwgtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMzY1OA==", "bodyText": "Some of the methods in this interface have RoutingAllocation first, others have ShardRouting first. I think we should order them consistently. I personally prefer to put the subject of the operation (ShardRouting or List<ShardRouting) first and the \"context\" (RoutingAllocation) last.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384413658", "createdAt": "2020-02-26T10:46:57Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.gateway.GatewayAllocator;\n+\n+import java.util.List;\n+\n+/**\n+ * Searches for, and allocates, shards for which there is an existing on-disk copy somewhere in the cluster. The default implementation is\n+ * {@link GatewayAllocator}, but plugins can supply their own implementations too.\n+ */\n+public interface ExistingShardsAllocator {\n+\n+    /**\n+     * Allows plugins to override how we allocate shards that may already exist on disk in the cluster.\n+     */\n+    Setting<String> EXISTING_SHARDS_ALLOCATOR_SETTING = Setting.simpleString(\n+        \"index.allocation.existing_shards_allocator\", GatewayAllocator.ALLOCATOR_NAME,\n+        Setting.Property.IndexScope, Setting.Property.PrivateIndex);\n+\n+    /**\n+     * Called before starting a round of allocation, allowing the allocator to invalidate some caches if appropriate.\n+     */\n+    void beforeAllocation(RoutingAllocation allocation);\n+\n+\n+    /**\n+     * Called during a round of allocation after attempting to allocate all the primaries but before any replicas, allowing the allocator\n+     * to prepare for replica allocation.\n+     */\n+    void afterPrimariesBeforeReplicas(RoutingAllocation allocation);\n+\n+    /**\n+     * Allocate any unassigned shards in the given {@link RoutingAllocation} for which this {@link ExistingShardsAllocator} is responsible.\n+     */\n+    void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTc3Nw==", "bodyText": "Ok, I've moved the ShardRoutings first in a72d9ba.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386411777", "createdAt": "2020-03-02T14:07:28Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.gateway.GatewayAllocator;\n+\n+import java.util.List;\n+\n+/**\n+ * Searches for, and allocates, shards for which there is an existing on-disk copy somewhere in the cluster. The default implementation is\n+ * {@link GatewayAllocator}, but plugins can supply their own implementations too.\n+ */\n+public interface ExistingShardsAllocator {\n+\n+    /**\n+     * Allows plugins to override how we allocate shards that may already exist on disk in the cluster.\n+     */\n+    Setting<String> EXISTING_SHARDS_ALLOCATOR_SETTING = Setting.simpleString(\n+        \"index.allocation.existing_shards_allocator\", GatewayAllocator.ALLOCATOR_NAME,\n+        Setting.Property.IndexScope, Setting.Property.PrivateIndex);\n+\n+    /**\n+     * Called before starting a round of allocation, allowing the allocator to invalidate some caches if appropriate.\n+     */\n+    void beforeAllocation(RoutingAllocation allocation);\n+\n+\n+    /**\n+     * Called during a round of allocation after attempting to allocate all the primaries but before any replicas, allowing the allocator\n+     * to prepare for replica allocation.\n+     */\n+    void afterPrimariesBeforeReplicas(RoutingAllocation allocation);\n+\n+    /**\n+     * Allocate any unassigned shards in the given {@link RoutingAllocation} for which this {@link ExistingShardsAllocator} is responsible.\n+     */\n+    void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMzY1OA=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDYxODI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMzowOFrOFunRmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNzozOVrOFwgteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjI5Nw==", "bodyText": "nit: allocateExistingUnassignedShards?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384422297", "createdAt": "2020-02-26T11:03:08Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,15 +427,43 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert assertInitialized();\n \n         removeDelayMarkers(allocation);\n-        // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n \n+        allocateExistingShards(allocation);  // try to allocate existing shard copies first\n         shardsAllocator.allocate(allocation);\n         assert RoutingNodes.assertShardStats(allocation.routingNodes());\n     }\n \n+    private void allocateExistingShards(RoutingAllocation allocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTg5OA==", "bodyText": "Ok, done in 3301a2b.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386411898", "createdAt": "2020-03-02T14:07:39Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java", "diffHunk": "@@ -413,15 +427,43 @@ private void reroute(RoutingAllocation allocation) {\n         assert hasDeadNodes(allocation) == false : \"dead nodes should be explicitly cleaned up. See disassociateDeadNodes\";\n         assert AutoExpandReplicas.getAutoExpandReplicaChanges(allocation.metaData(), allocation).isEmpty() :\n             \"auto-expand replicas out of sync with number of nodes in the cluster\";\n+        assert assertInitialized();\n \n         removeDelayMarkers(allocation);\n-        // try to allocate existing shard copies first\n-        gatewayAllocator.allocateUnassigned(allocation);\n \n+        allocateExistingShards(allocation);  // try to allocate existing shard copies first\n         shardsAllocator.allocate(allocation);\n         assert RoutingNodes.assertShardStats(allocation.routingNodes());\n     }\n \n+    private void allocateExistingShards(RoutingAllocation allocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjI5Nw=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDY0NDIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMToyM1rOFunhEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo1NzowMFrOFyuxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjI1OA==", "bodyText": "I find this assert unnecessary since it is a final field and it is initialized in constructor?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384426258", "createdAt": "2020-02-26T11:11:23Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -101,47 +106,64 @@ public int getNumberOfInFlightFetch() {\n         return count;\n     }\n \n+    @Override\n     public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {\n         for (ShardRouting startedShard : startedShards) {\n             Releasables.close(asyncFetchStarted.remove(startedShard.shardId()));\n             Releasables.close(asyncFetchStore.remove(startedShard.shardId()));\n         }\n     }\n \n+    @Override\n     public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {\n         for (FailedShard failedShard : failedShards) {\n             Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));\n             Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));\n         }\n     }\n \n-    public void allocateUnassigned(final RoutingAllocation allocation) {\n+    @Override\n+    public void beforeAllocation(final RoutingAllocation allocation) {\n         assert primaryShardAllocator != null;\n         assert replicaShardAllocator != null;\n         ensureAsyncFetchStorePrimaryRecency(allocation);\n-        innerAllocatedUnassigned(allocation, primaryShardAllocator, replicaShardAllocator);\n     }\n \n-    // allow for testing infra to change shard allocators implementation\n-    protected static void innerAllocatedUnassigned(RoutingAllocation allocation,\n-                                                   PrimaryShardAllocator primaryShardAllocator,\n-                                                   ReplicaShardAllocator replicaShardAllocator) {\n-        RoutingNodes.UnassignedShards unassigned = allocation.routingNodes().unassigned();\n-        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n-\n-        primaryShardAllocator.allocateUnassigned(allocation);\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+        assert replicaShardAllocator != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTUzMg==", "bodyText": "It is null in tests that use a subclass, and I found it all-too-easy to trip over this.\nI don't really like how the tests override this class's behaviour, but don't want to start working on that kind of refactoring here.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386415532", "createdAt": "2020-03-02T14:14:14Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -101,47 +106,64 @@ public int getNumberOfInFlightFetch() {\n         return count;\n     }\n \n+    @Override\n     public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {\n         for (ShardRouting startedShard : startedShards) {\n             Releasables.close(asyncFetchStarted.remove(startedShard.shardId()));\n             Releasables.close(asyncFetchStore.remove(startedShard.shardId()));\n         }\n     }\n \n+    @Override\n     public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {\n         for (FailedShard failedShard : failedShards) {\n             Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));\n             Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));\n         }\n     }\n \n-    public void allocateUnassigned(final RoutingAllocation allocation) {\n+    @Override\n+    public void beforeAllocation(final RoutingAllocation allocation) {\n         assert primaryShardAllocator != null;\n         assert replicaShardAllocator != null;\n         ensureAsyncFetchStorePrimaryRecency(allocation);\n-        innerAllocatedUnassigned(allocation, primaryShardAllocator, replicaShardAllocator);\n     }\n \n-    // allow for testing infra to change shard allocators implementation\n-    protected static void innerAllocatedUnassigned(RoutingAllocation allocation,\n-                                                   PrimaryShardAllocator primaryShardAllocator,\n-                                                   ReplicaShardAllocator replicaShardAllocator) {\n-        RoutingNodes.UnassignedShards unassigned = allocation.routingNodes().unassigned();\n-        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n-\n-        primaryShardAllocator.allocateUnassigned(allocation);\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+        assert replicaShardAllocator != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjI1OA=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTQ3Mw==", "bodyText": "Ah yes, I overlooked that, thanks.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r388739473", "createdAt": "2020-03-06T06:57:00Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -101,47 +106,64 @@ public int getNumberOfInFlightFetch() {\n         return count;\n     }\n \n+    @Override\n     public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {\n         for (ShardRouting startedShard : startedShards) {\n             Releasables.close(asyncFetchStarted.remove(startedShard.shardId()));\n             Releasables.close(asyncFetchStore.remove(startedShard.shardId()));\n         }\n     }\n \n+    @Override\n     public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {\n         for (FailedShard failedShard : failedShards) {\n             Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));\n             Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));\n         }\n     }\n \n-    public void allocateUnassigned(final RoutingAllocation allocation) {\n+    @Override\n+    public void beforeAllocation(final RoutingAllocation allocation) {\n         assert primaryShardAllocator != null;\n         assert replicaShardAllocator != null;\n         ensureAsyncFetchStorePrimaryRecency(allocation);\n-        innerAllocatedUnassigned(allocation, primaryShardAllocator, replicaShardAllocator);\n     }\n \n-    // allow for testing infra to change shard allocators implementation\n-    protected static void innerAllocatedUnassigned(RoutingAllocation allocation,\n-                                                   PrimaryShardAllocator primaryShardAllocator,\n-                                                   ReplicaShardAllocator replicaShardAllocator) {\n-        RoutingNodes.UnassignedShards unassigned = allocation.routingNodes().unassigned();\n-        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n-\n-        primaryShardAllocator.allocateUnassigned(allocation);\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+        assert replicaShardAllocator != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjI1OA=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDY0NTg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMTo1MlrOFuniAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNDoyNlrOFwg8Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjQ5Nw==", "bodyText": "I find these two asserts unnecessary since the fields are final and initialized in constructor?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384426497", "createdAt": "2020-02-26T11:11:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -101,47 +106,64 @@ public int getNumberOfInFlightFetch() {\n         return count;\n     }\n \n+    @Override\n     public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {\n         for (ShardRouting startedShard : startedShards) {\n             Releasables.close(asyncFetchStarted.remove(startedShard.shardId()));\n             Releasables.close(asyncFetchStore.remove(startedShard.shardId()));\n         }\n     }\n \n+    @Override\n     public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {\n         for (FailedShard failedShard : failedShards) {\n             Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));\n             Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));\n         }\n     }\n \n-    public void allocateUnassigned(final RoutingAllocation allocation) {\n+    @Override\n+    public void beforeAllocation(final RoutingAllocation allocation) {\n         assert primaryShardAllocator != null;\n         assert replicaShardAllocator != null;\n         ensureAsyncFetchStorePrimaryRecency(allocation);\n-        innerAllocatedUnassigned(allocation, primaryShardAllocator, replicaShardAllocator);\n     }\n \n-    // allow for testing infra to change shard allocators implementation\n-    protected static void innerAllocatedUnassigned(RoutingAllocation allocation,\n-                                                   PrimaryShardAllocator primaryShardAllocator,\n-                                                   ReplicaShardAllocator replicaShardAllocator) {\n-        RoutingNodes.UnassignedShards unassigned = allocation.routingNodes().unassigned();\n-        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n-\n-        primaryShardAllocator.allocateUnassigned(allocation);\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+        assert replicaShardAllocator != null;\n         if (allocation.routingNodes().hasInactiveShards()) {\n             // cancel existing recoveries if we have a better match\n             replicaShardAllocator.processExistingRecoveries(allocation);\n         }\n-        replicaShardAllocator.allocateUnassigned(allocation);\n     }\n \n-    /**\n-     * Computes and returns the design for allocating a single unassigned shard.  If called on an assigned shard,\n-     * {@link AllocateUnassignedDecision#NOT_TAKEN} is returned.\n-     */\n-    public AllocateUnassignedDecision decideUnassignedShardAllocation(ShardRouting unassignedShard, RoutingAllocation routingAllocation) {\n+    @Override\n+    public void allocateUnassigned(final RoutingAllocation allocation, ShardRouting shardRouting,\n+                                   RoutingNodes.UnassignedShards.UnassignedIterator iterator) {\n+        assert primaryShardAllocator != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTYyMg==", "bodyText": "It is null in tests that use a subclass, and I found it all-too-easy to trip over this.\nI don't really like how the tests override this class's behaviour, but don't want to start working on that kind of refactoring here.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386415622", "createdAt": "2020-03-02T14:14:26Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java", "diffHunk": "@@ -101,47 +106,64 @@ public int getNumberOfInFlightFetch() {\n         return count;\n     }\n \n+    @Override\n     public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {\n         for (ShardRouting startedShard : startedShards) {\n             Releasables.close(asyncFetchStarted.remove(startedShard.shardId()));\n             Releasables.close(asyncFetchStore.remove(startedShard.shardId()));\n         }\n     }\n \n+    @Override\n     public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {\n         for (FailedShard failedShard : failedShards) {\n             Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));\n             Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));\n         }\n     }\n \n-    public void allocateUnassigned(final RoutingAllocation allocation) {\n+    @Override\n+    public void beforeAllocation(final RoutingAllocation allocation) {\n         assert primaryShardAllocator != null;\n         assert replicaShardAllocator != null;\n         ensureAsyncFetchStorePrimaryRecency(allocation);\n-        innerAllocatedUnassigned(allocation, primaryShardAllocator, replicaShardAllocator);\n     }\n \n-    // allow for testing infra to change shard allocators implementation\n-    protected static void innerAllocatedUnassigned(RoutingAllocation allocation,\n-                                                   PrimaryShardAllocator primaryShardAllocator,\n-                                                   ReplicaShardAllocator replicaShardAllocator) {\n-        RoutingNodes.UnassignedShards unassigned = allocation.routingNodes().unassigned();\n-        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering\n-\n-        primaryShardAllocator.allocateUnassigned(allocation);\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+        assert replicaShardAllocator != null;\n         if (allocation.routingNodes().hasInactiveShards()) {\n             // cancel existing recoveries if we have a better match\n             replicaShardAllocator.processExistingRecoveries(allocation);\n         }\n-        replicaShardAllocator.allocateUnassigned(allocation);\n     }\n \n-    /**\n-     * Computes and returns the design for allocating a single unassigned shard.  If called on an assigned shard,\n-     * {@link AllocateUnassignedDecision#NOT_TAKEN} is returned.\n-     */\n-    public AllocateUnassignedDecision decideUnassignedShardAllocation(ShardRouting unassignedShard, RoutingAllocation routingAllocation) {\n+    @Override\n+    public void allocateUnassigned(final RoutingAllocation allocation, ShardRouting shardRouting,\n+                                   RoutingNodes.UnassignedShards.UnassignedIterator iterator) {\n+        assert primaryShardAllocator != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjQ5Nw=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDcxODAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTozNTo0OVrOFuoNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowOToyN1rOFwgxjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNzYzNg==", "bodyText": "I think the decision made here effectively bypasses the balancer. I assume you want to tackle that in a follow-up? Would be nice to know if the intention is to invoke balancer somehow here or if the code here will be changed to only consider the nodes that already have data that can be reused?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r384437636", "createdAt": "2020-02-26T11:35:49Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void beforeAllocation(RoutingAllocation allocation) {\n+    }\n+\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+    }\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,\n+                                   RoutingNodes.UnassignedShards.UnassignedIterator iterator) {\n+        final AllocateUnassignedDecision allocateUnassignedDecision = decideAllocation(allocation, shardRouting);\n+        assert allocateUnassignedDecision.isDecisionTaken();\n+\n+        if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {\n+            if (shardRouting.primary() && shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE) {\n+                // we don't care what the allocation ID is since we know that these shards cannot really be stale, so we can\n+                // safely ignore the allocation ID with a forced-stale allocation\n+                iterator.updateUnassigned(shardRouting.unassignedInfo(),\n+                    RecoverySource.ExistingStoreRecoverySource.FORCE_STALE_PRIMARY_INSTANCE, allocation.changes());\n+            }\n+            iterator.initialize(allocateUnassignedDecision.getTargetNode().getId(), null, 0L, allocation.changes());\n+        } else {\n+            iterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes());\n+        }\n+    }\n+\n+    private static AllocateUnassignedDecision decideAllocation(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        assert shardRouting.unassigned();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMjk0Mw==", "bodyText": "Yes, the actual allocator's behaviour is not really the focus of this PR so I've just done something very simple. To be discussed in the follow-up, but indeed I agree that we will allow shards to fall through to the balancer if we can't find them a good home here.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r386412943", "createdAt": "2020-03-02T14:09:27Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotAllocator.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;\n+import org.elasticsearch.cluster.routing.allocation.AllocationDecision;\n+import org.elasticsearch.cluster.routing.allocation.ExistingShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.FailedShard;\n+import org.elasticsearch.cluster.routing.allocation.NodeAllocationResult;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SearchableSnapshotAllocator implements ExistingShardsAllocator {\n+\n+    static final String ALLOCATOR_NAME = \"searchable_snapshot_allocator\";\n+\n+    @Override\n+    public void beforeAllocation(RoutingAllocation allocation) {\n+    }\n+\n+    @Override\n+    public void afterPrimariesBeforeReplicas(RoutingAllocation allocation) {\n+    }\n+\n+    @Override\n+    public void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,\n+                                   RoutingNodes.UnassignedShards.UnassignedIterator iterator) {\n+        final AllocateUnassignedDecision allocateUnassignedDecision = decideAllocation(allocation, shardRouting);\n+        assert allocateUnassignedDecision.isDecisionTaken();\n+\n+        if (allocateUnassignedDecision.getAllocationDecision() == AllocationDecision.YES) {\n+            if (shardRouting.primary() && shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE) {\n+                // we don't care what the allocation ID is since we know that these shards cannot really be stale, so we can\n+                // safely ignore the allocation ID with a forced-stale allocation\n+                iterator.updateUnassigned(shardRouting.unassignedInfo(),\n+                    RecoverySource.ExistingStoreRecoverySource.FORCE_STALE_PRIMARY_INSTANCE, allocation.changes());\n+            }\n+            iterator.initialize(allocateUnassignedDecision.getTargetNode().getId(), null, 0L, allocation.changes());\n+        } else {\n+            iterator.removeAndIgnore(allocateUnassignedDecision.getAllocationStatus(), allocation.changes());\n+        }\n+    }\n+\n+    private static AllocateUnassignedDecision decideAllocation(RoutingAllocation allocation, ShardRouting shardRouting) {\n+        assert shardRouting.unassigned();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNzYzNg=="}, "originalCommit": {"oid": "09c49b88887e84fce940b219e563e936732458c1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODU0NTgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowMjoxN1rOFyu27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowMjoxN1rOFyu27Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MDg0NQ==", "bodyText": "Can we include clusterPlugin.getClass().getName() into the message?", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r388740845", "createdAt": "2020-03-06T07:02:17Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "diffHunk": "@@ -251,4 +254,21 @@ protected void configure() {\n         bind(AllocationDeciders.class).toInstance(allocationDeciders);\n         bind(ShardsAllocator.class).toInstance(shardsAllocator);\n     }\n+\n+    public void setExistingShardsAllocators(GatewayAllocator gatewayAllocator) {\n+        final Map<String, ExistingShardsAllocator> existingShardsAllocators = new HashMap<>();\n+        existingShardsAllocators.put(GatewayAllocator.ALLOCATOR_NAME, gatewayAllocator);\n+\n+        for (ClusterPlugin clusterPlugin : clusterPlugins) {\n+            for (Map.Entry<String, ExistingShardsAllocator> existingShardsAllocatorEntry\n+                : clusterPlugin.getExistingShardsAllocators().entrySet()) {\n+                final String allocatorName = existingShardsAllocatorEntry.getKey();\n+                if (existingShardsAllocators.put(allocatorName, existingShardsAllocatorEntry.getValue()) != null) {\n+                    throw new IllegalArgumentException(\"ExistingShardsAllocator [\" + allocatorName + \"] already defined\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b8888c0311d0bfc886baa7ae0349b61749d103e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODU2MzU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxMjoyOVrOFyvBrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxMjoyOVrOFyvBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MzU5OQ==", "bodyText": "nit: remove extra empty line.", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r388743599", "createdAt": "2020-03-06T07:12:29Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/ExistingShardsAllocator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingChangesObserver;\n+import org.elasticsearch.cluster.routing.RoutingNodes;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.gateway.GatewayAllocator;\n+\n+import java.util.List;\n+\n+/**\n+ * Searches for, and allocates, shards for which there is an existing on-disk copy somewhere in the cluster. The default implementation is\n+ * {@link GatewayAllocator}, but plugins can supply their own implementations too.\n+ */\n+public interface ExistingShardsAllocator {\n+\n+    /**\n+     * Allows plugins to override how we allocate shards that may already exist on disk in the cluster.\n+     */\n+    Setting<String> EXISTING_SHARDS_ALLOCATOR_SETTING = Setting.simpleString(\n+        \"index.allocation.existing_shards_allocator\", GatewayAllocator.ALLOCATOR_NAME,\n+        Setting.Property.IndexScope, Setting.Property.PrivateIndex);\n+\n+    /**\n+     * Called before starting a round of allocation, allowing the allocator to invalidate some caches if appropriate.\n+     */\n+    void beforeAllocation(RoutingAllocation allocation);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b8888c0311d0bfc886baa7ae0349b61749d103e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODU4MDYzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/BaseGatewayShardAllocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoyMToyMVrOFyvL4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoyMToyMVrOFyvL4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NjIxMA==", "bodyText": "nit: swap argument order to make it the same as in ExistingShardsAllocator:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,\n          \n          \n            \n                public void allocateUnassigned(ShardRouting shardRouting, RoutingAllocation allocation,", "url": "https://github.com/elastic/elasticsearch/pull/52527#discussion_r388746210", "createdAt": "2020-03-06T07:21:21Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/gateway/BaseGatewayShardAllocator.java", "diffHunk": "@@ -45,40 +45,38 @@\n     protected final Logger logger = LogManager.getLogger(this.getClass());\n \n     /**\n-     * Allocate unassigned shards to nodes (if any) where valid copies of the shard already exist.\n+     * Allocate an unassigned shard to nodes (if any) where valid copies of the shard already exist.\n      * It is up to the individual implementations of {@link #makeAllocationDecision(ShardRouting, RoutingAllocation, Logger)}\n      * to make decisions on assigning shards to nodes.\n      *\n      * @param allocation the allocation state container object\n+     * @param shardRouting the shard to allocate\n+     * @param unassignedAllocationHandler handles the allocation of the current shard\n      */\n-    public void allocateUnassigned(RoutingAllocation allocation) {\n-        final RoutingNodes routingNodes = allocation.routingNodes();\n-        final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator();\n-        while (unassignedIterator.hasNext()) {\n-            final ShardRouting shard = unassignedIterator.next();\n-            final AllocateUnassignedDecision allocateUnassignedDecision = makeAllocationDecision(shard, allocation, logger);\n+    public void allocateUnassigned(RoutingAllocation allocation, ShardRouting shardRouting,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b8888c0311d0bfc886baa7ae0349b61749d103e"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}