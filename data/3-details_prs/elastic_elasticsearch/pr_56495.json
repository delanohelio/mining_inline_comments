{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzU2OTU1", "number": 56495, "title": "SQL/EQL: Add support for scalars within LIKE/RLIKE", "bodyText": "Add support for scalar functions on the field of SQL's LIKE/RLIKE\nAdd support for scalar functions on the field of EQL's match\nAllow EQL's match to have the field argument as the last one -> Reverting, no need for this optimization\n\nCloses: #55058", "createdAt": "2020-05-10T17:57:12Z", "url": "https://github.com/elastic/elasticsearch/pull/56495", "merged": true, "mergeCommit": {"oid": "51c14e2dbb7fb29004a23369c449d425b3ac8fe2"}, "closed": true, "closedAt": "2020-05-13T10:42:38Z", "author": {"login": "matriv"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcf-4AEgH2gAyNDE1NzU2OTU1OjYwNDZiYmM1MDExMTU2M2FlN2NmZTQ0NjE0ZWYwNTRjNTk2ZDExMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg10-AgFqTQxMDc2ODcxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6046bbc50111563ae7cfe44614ef054c596d1138", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/6046bbc50111563ae7cfe44614ef054c596d1138", "committedDate": "2020-05-10T17:53:01Z", "message": "SQL/EQL: Add support for scalars within LIKE/RLIKE\n\n- Add support for scalar functions on the field of SQL's LIKE/RLIKE\n- Add support for scalar functions on the field of EQL's match\n- Allow EQL's match to have the field argument as the last one\n\nCloses: #55058"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4866b486587f39aff1cee72131ba6c334d28ba2", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b4866b486587f39aff1cee72131ba6c334d28ba2", "committedDate": "2020-05-11T08:13:14Z", "message": "fix imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzEzMDAx", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-409313001", "createdAt": "2020-05-11T16:02:54Z", "commit": {"oid": "b4866b486587f39aff1cee72131ba6c334d28ba2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMjo1NFrOGTi6IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowMjo1NFrOGTi6IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0ODA2NQ==", "bodyText": "This should be an optimization rule not analysis (since the literal might not be folded).\nIt also seems incomplete - what if there are multiple non-literals? Is there any validation happening (verifier rule) in the chain?", "url": "https://github.com/elastic/elasticsearch/pull/56495#discussion_r423148065", "createdAt": "2020-05-11T16:02:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Analyzer.java", "diffHunk": "@@ -120,4 +124,24 @@ protected LogicalPlan rule(LogicalPlan plan) {\n             });\n         }\n     }\n-}\n\\ No newline at end of file\n+\n+    private class MatchLiteralsOnTheRight extends AnalyzerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan plan) {\n+            return plan.transformExpressionsUp(e -> {\n+                if (e instanceof Match) {\n+                    Match m = (Match) e;\n+                    int size = m.children().size();\n+                    if ((m.children().get(size - 1) instanceof Literal) == false) {\n+                        List<Expression> newChildren = new ArrayList<>(m.children().size());\n+                        newChildren.add(m.children().get(size - 1));\n+                        newChildren.addAll(m.children().subList(0, size - 1));\n+                        return m.replaceChildren(newChildren);\n+                    }\n+                }\n+                return e;\n+            });\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4866b486587f39aff1cee72131ba6c334d28ba2"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8371d2d17082eac080f35c1076303c26af114d3", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8371d2d17082eac080f35c1076303c26af114d3", "committedDate": "2020-05-12T08:58:00Z", "message": "Handle field as last argument in the ctor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e55444d12ceb141ce100a9e54b089734ee85d4", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/68e55444d12ceb141ce100a9e54b089734ee85d4", "committedDate": "2020-05-12T08:58:10Z", "message": "Merge remote-tracking branch 'upstream/master' into impl-55058"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5ODg2MDU1", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-409886055", "createdAt": "2020-05-12T09:58:09Z", "commit": {"oid": "68e55444d12ceb141ce100a9e54b089734ee85d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea5d529346bf9d5ce2801746880610832fbc1ec2", "committedDate": "2020-05-12T13:57:59Z", "message": "different approach for the match args re-arrangement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTI3MjM1", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-410127235", "createdAt": "2020-05-12T14:54:32Z", "commit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NDozMlrOGUKsqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NDozMlrOGUKsqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5OTk3OQ==", "bodyText": "I would emphasize the two \"versions\" of match function, rather than mentioning that one argument needs to be a field.\nSomething more aligned with the (to be updated) documentation.\nFor example \"either first or last argument of match must be a non-constant\" (or around the same idea).", "url": "https://github.com/elastic/elasticsearch/pull/56495#discussion_r423799979", "createdAt": "2020-05-12T14:54:32Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Match.java", "diffHunk": "@@ -65,29 +72,39 @@ protected TypeResolution resolveType() {\n             return new TypeResolution(\"Unresolved children\");\n         }\n \n-        TypeResolution resolution = isStringAndExact(field, sourceText(), ParamOrdinal.FIRST);\n-        if (resolution.unresolved()) {\n-            return resolution;\n-        }\n-\n-        int index = 1;\n-        for (Expression regex : patterns) {\n+        TypeResolution resolution;\n+        int index = 0;\n+        List<Integer> nonFoldables = new ArrayList<>(2);\n+        for (Expression e : children()) {\n             // Currently we have limited enum for ordinal numbers\n             // So just using default here for error messaging\n-            resolution = isStringAndExact(regex, sourceText(), ParamOrdinal.fromIndex(index));\n+            ParamOrdinal paramOrd = ParamOrdinal.fromIndex(index);\n+            resolution = isStringAndExact(e, sourceText(), paramOrd);\n             if (resolution.unresolved()) {\n                 return resolution;\n             }\n-\n-            resolution = isFoldable(regex, sourceText(), ParamOrdinal.fromIndex(index));\n+            resolution = isFoldable(e, sourceText(), paramOrd);\n             if (resolution.unresolved()) {\n-                break;\n+                nonFoldables.add(index);\n             }\n-\n             index++;\n         }\n \n-        return resolution;\n+        if (nonFoldables.size() == 2) {\n+            StringBuilder sb = new StringBuilder(format(null, \"only one argument of [{}] must be non-constant but multiple found: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzk1NTAy", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-410395502", "createdAt": "2020-05-12T20:26:19Z", "commit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoyNjoyMFrOGUXqCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoyNjoyMFrOGUXqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxMjI5Ng==", "bodyText": "Why isn't this done inside the main Match constructor or even better inside makeSubstitute?", "url": "https://github.com/elastic/elasticsearch/pull/56495#discussion_r424012296", "createdAt": "2020-05-12T20:26:20Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -122,4 +126,31 @@ protected LogicalPlan rule(Filter filter) {\n             });\n         }\n     }\n+\n+    private static class MatchLiteralsOnTheRight extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                if (e instanceof Match) {\n+                    Match m = (Match) e;\n+                    if (m.children().get(0).foldable()) {\n+                        int size = m.children().size();\n+                        List<Expression> newChildren = new ArrayList<>(size);\n+                        Expression field = null;\n+                        for (Expression c : m.children()) {\n+                            if (c.foldable() == false) {\n+                                field = c;\n+                            } else {\n+                                newChildren.add(c);\n+                            }\n+                        }\n+                        newChildren.add(0, field);\n+                        return m.replaceChildren(newChildren);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzk3NDI0", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-410397424", "createdAt": "2020-05-12T20:29:12Z", "commit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoyOToxMlrOGUXv8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoyOToxMlrOGUXv8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxMzgwOA==", "bodyText": "I don't exactly know the issue that motivated some of these changes, and am not sure why loosening up the signature of match is a good thing.\nFor this example, I'm confused how it's supposed to be evaluated. Which argument is the source string and which are the patterns to be matched against?", "url": "https://github.com/elastic/elasticsearch/pull/56495#discussion_r424013808", "createdAt": "2020-05-12T20:29:12Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -82,6 +82,24 @@ query = '''\n process where match(command_line, '.*?net[1]?  localgroup.*?', '.*? myappserver.py .*?')\n '''\n \n+[[queries]]\n+expected_event_ids  = [50, 97, 98]\n+query = '''\n+process where match('.*?net[1]?  localgroup.*?', command_line,'.*? myappserver.py .*?')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5d529346bf9d5ce2801746880610832fbc1ec2"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6337d16dd200fd8e0a47078b85c6baa8b432e35", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6337d16dd200fd8e0a47078b85c6baa8b432e35", "committedDate": "2020-05-13T07:34:27Z", "message": "revert optimization for field accepted as any argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61208a8149d3efebe4bb047e6a054d1e0ec0874", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/d61208a8149d3efebe4bb047e6a054d1e0ec0874", "committedDate": "2020-05-13T07:43:24Z", "message": "Merge remote-tracking branch 'upstream/master' into impl-55058"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNjcyODEy", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-410672812", "createdAt": "2020-05-13T07:51:59Z", "commit": {"oid": "d61208a8149d3efebe4bb047e6a054d1e0ec0874"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzY4NzE5", "url": "https://github.com/elastic/elasticsearch/pull/56495#pullrequestreview-410768719", "createdAt": "2020-05-13T09:54:29Z", "commit": {"oid": "d61208a8149d3efebe4bb047e6a054d1e0ec0874"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 125, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}