{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTgzMTMx", "number": 50924, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNTowN1rODXs3tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo1MDo1NlrODXtA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4OTk2OnYy", "diffSide": "RIGHT", "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNTowN1rOFdJDtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo0ODo1OVrOFdWVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTQyOA==", "bodyText": "Maybe \"At least one plugin id is required\"?", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366101428", "createdAt": "2020-01-14T00:35:07Z", "author": {"login": "rjernst"}, "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "diffHunk": "@@ -206,24 +206,50 @@ protected void printAdditionalHelp(Terminal terminal) {\n \n     @Override\n     protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {\n-        String pluginId = arguments.value(options);\n+        List<String> pluginId = arguments.values(options);\n         final boolean isBatch = options.has(batchOption);\n         execute(terminal, pluginId, isBatch, env);\n     }\n \n     // pkg private for testing\n-    void execute(Terminal terminal, String pluginId, boolean isBatch, Environment env) throws Exception {\n-        if (pluginId == null) {\n-            throw new UserException(ExitCodes.USAGE, \"plugin id is required\");\n+    void execute(Terminal terminal, List<String> pluginIds, boolean isBatch, Environment env) throws Exception {\n+        if (pluginIds.isEmpty()) {\n+            throw new UserException(ExitCodes.USAGE, \"plugin ids are required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxODk3Nw==", "bodyText": "I reworded this as you suggest.", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366318977", "createdAt": "2020-01-14T12:48:59Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "diffHunk": "@@ -206,24 +206,50 @@ protected void printAdditionalHelp(Terminal terminal) {\n \n     @Override\n     protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {\n-        String pluginId = arguments.value(options);\n+        List<String> pluginId = arguments.values(options);\n         final boolean isBatch = options.has(batchOption);\n         execute(terminal, pluginId, isBatch, env);\n     }\n \n     // pkg private for testing\n-    void execute(Terminal terminal, String pluginId, boolean isBatch, Environment env) throws Exception {\n-        if (pluginId == null) {\n-            throw new UserException(ExitCodes.USAGE, \"plugin id is required\");\n+    void execute(Terminal terminal, List<String> pluginIds, boolean isBatch, Environment env) throws Exception {\n+        if (pluginIds.isEmpty()) {\n+            throw new UserException(ExitCodes.USAGE, \"plugin ids are required\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTQyOA=="}, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTgwNzA2OnYy", "diffSide": "RIGHT", "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo0NjoyM1rOFdJN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyMDozMVrOFhCDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDA2Mg==", "bodyText": "Maybe we should emit each as we go? Dumping at the end seems counter to giving progress, which is the intention of this message IMO.", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366104062", "createdAt": "2020-01-14T00:46:23Z", "author": {"login": "rjernst"}, "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "diffHunk": "@@ -206,24 +206,50 @@ protected void printAdditionalHelp(Terminal terminal) {\n \n     @Override\n     protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {\n-        String pluginId = arguments.value(options);\n+        List<String> pluginId = arguments.values(options);\n         final boolean isBatch = options.has(batchOption);\n         execute(terminal, pluginId, isBatch, env);\n     }\n \n     // pkg private for testing\n-    void execute(Terminal terminal, String pluginId, boolean isBatch, Environment env) throws Exception {\n-        if (pluginId == null) {\n-            throw new UserException(ExitCodes.USAGE, \"plugin id is required\");\n+    void execute(Terminal terminal, List<String> pluginIds, boolean isBatch, Environment env) throws Exception {\n+        if (pluginIds.isEmpty()) {\n+            throw new UserException(ExitCodes.USAGE, \"plugin ids are required\");\n         }\n \n-        if (\"x-pack\".equals(pluginId)) {\n-            handleInstallXPack(buildFlavor());\n+        final Set<String> uniquePluginIds = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            if (uniquePluginIds.add(pluginId) == false) {\n+                throw new UserException(ExitCodes.USAGE, \"duplicate plugin id [\" + pluginId + \"]\");\n+            }\n+        }\n+\n+        final List<Path> deleteOnFailure = new ArrayList<>();\n+        final Set<PluginInfo> pluginInfos = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            try {\n+                if (\"x-pack\".equals(pluginId)) {\n+                    handleInstallXPack(buildFlavor());\n+                }\n+\n+                final Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n+                final Path extractedZip = unzip(pluginZip, env.pluginsFile());\n+                deleteOnFailure.add(extractedZip);\n+                final PluginInfo pluginInfo = installPlugin(terminal, isBatch, extractedZip, env, deleteOnFailure);\n+                pluginInfos.add(pluginInfo);\n+            } catch (final Exception installProblem) {\n+                try {\n+                    IOUtils.rm(deleteOnFailure.toArray(new Path[0]));\n+                } catch (final IOException exceptionWhileRemovingFiles) {\n+                    installProblem.addSuppressed(exceptionWhileRemovingFiles);\n+                }\n+                throw installProblem;\n+            }\n         }\n \n-        Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n-        Path extractedZip = unzip(pluginZip, env.pluginsFile());\n-        install(terminal, isBatch, extractedZip, env);\n+        for (final PluginInfo pluginInfo : pluginInfos) {\n+            terminal.println(\"-> Installed \" + pluginInfo.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyNDQ5NA==", "bodyText": "I\u2019m not sure we should dump as we go since it\u2019s transactional? That is, \u201cinstalled X\u201d is a lie if we remove it if Y failed?", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366124494", "createdAt": "2020-01-14T02:17:59Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "diffHunk": "@@ -206,24 +206,50 @@ protected void printAdditionalHelp(Terminal terminal) {\n \n     @Override\n     protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {\n-        String pluginId = arguments.value(options);\n+        List<String> pluginId = arguments.values(options);\n         final boolean isBatch = options.has(batchOption);\n         execute(terminal, pluginId, isBatch, env);\n     }\n \n     // pkg private for testing\n-    void execute(Terminal terminal, String pluginId, boolean isBatch, Environment env) throws Exception {\n-        if (pluginId == null) {\n-            throw new UserException(ExitCodes.USAGE, \"plugin id is required\");\n+    void execute(Terminal terminal, List<String> pluginIds, boolean isBatch, Environment env) throws Exception {\n+        if (pluginIds.isEmpty()) {\n+            throw new UserException(ExitCodes.USAGE, \"plugin ids are required\");\n         }\n \n-        if (\"x-pack\".equals(pluginId)) {\n-            handleInstallXPack(buildFlavor());\n+        final Set<String> uniquePluginIds = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            if (uniquePluginIds.add(pluginId) == false) {\n+                throw new UserException(ExitCodes.USAGE, \"duplicate plugin id [\" + pluginId + \"]\");\n+            }\n+        }\n+\n+        final List<Path> deleteOnFailure = new ArrayList<>();\n+        final Set<PluginInfo> pluginInfos = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            try {\n+                if (\"x-pack\".equals(pluginId)) {\n+                    handleInstallXPack(buildFlavor());\n+                }\n+\n+                final Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n+                final Path extractedZip = unzip(pluginZip, env.pluginsFile());\n+                deleteOnFailure.add(extractedZip);\n+                final PluginInfo pluginInfo = installPlugin(terminal, isBatch, extractedZip, env, deleteOnFailure);\n+                pluginInfos.add(pluginInfo);\n+            } catch (final Exception installProblem) {\n+                try {\n+                    IOUtils.rm(deleteOnFailure.toArray(new Path[0]));\n+                } catch (final IOException exceptionWhileRemovingFiles) {\n+                    installProblem.addSuppressed(exceptionWhileRemovingFiles);\n+                }\n+                throw installProblem;\n+            }\n         }\n \n-        Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n-        Path extractedZip = unzip(pluginZip, env.pluginsFile());\n-        install(terminal, isBatch, extractedZip, env);\n+        for (final PluginInfo pluginInfo : pluginInfos) {\n+            terminal.println(\"-> Installed \" + pluginInfo.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDA2Mg=="}, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4MDk1Mw==", "bodyText": "Relates #51001", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r370180953", "createdAt": "2020-01-23T15:20:31Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java", "diffHunk": "@@ -206,24 +206,50 @@ protected void printAdditionalHelp(Terminal terminal) {\n \n     @Override\n     protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {\n-        String pluginId = arguments.value(options);\n+        List<String> pluginId = arguments.values(options);\n         final boolean isBatch = options.has(batchOption);\n         execute(terminal, pluginId, isBatch, env);\n     }\n \n     // pkg private for testing\n-    void execute(Terminal terminal, String pluginId, boolean isBatch, Environment env) throws Exception {\n-        if (pluginId == null) {\n-            throw new UserException(ExitCodes.USAGE, \"plugin id is required\");\n+    void execute(Terminal terminal, List<String> pluginIds, boolean isBatch, Environment env) throws Exception {\n+        if (pluginIds.isEmpty()) {\n+            throw new UserException(ExitCodes.USAGE, \"plugin ids are required\");\n         }\n \n-        if (\"x-pack\".equals(pluginId)) {\n-            handleInstallXPack(buildFlavor());\n+        final Set<String> uniquePluginIds = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            if (uniquePluginIds.add(pluginId) == false) {\n+                throw new UserException(ExitCodes.USAGE, \"duplicate plugin id [\" + pluginId + \"]\");\n+            }\n+        }\n+\n+        final List<Path> deleteOnFailure = new ArrayList<>();\n+        final Set<PluginInfo> pluginInfos = new HashSet<>();\n+        for (final String pluginId : pluginIds) {\n+            try {\n+                if (\"x-pack\".equals(pluginId)) {\n+                    handleInstallXPack(buildFlavor());\n+                }\n+\n+                final Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n+                final Path extractedZip = unzip(pluginZip, env.pluginsFile());\n+                deleteOnFailure.add(extractedZip);\n+                final PluginInfo pluginInfo = installPlugin(terminal, isBatch, extractedZip, env, deleteOnFailure);\n+                pluginInfos.add(pluginInfo);\n+            } catch (final Exception installProblem) {\n+                try {\n+                    IOUtils.rm(deleteOnFailure.toArray(new Path[0]));\n+                } catch (final IOException exceptionWhileRemovingFiles) {\n+                    installProblem.addSuppressed(exceptionWhileRemovingFiles);\n+                }\n+                throw installProblem;\n+            }\n         }\n \n-        Path pluginZip = download(terminal, pluginId, env.tmpFile(), isBatch);\n-        Path extractedZip = unzip(pluginZip, env.pluginsFile());\n-        install(terminal, isBatch, extractedZip, env);\n+        for (final PluginInfo pluginInfo : pluginInfos) {\n+            terminal.println(\"-> Installed \" + pluginInfo.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDA2Mg=="}, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTgxMzc0OnYy", "diffSide": "RIGHT", "path": "distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo1MDo1NlrOFdJSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo0ODo0OVrOFdWVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNTE3MQ==", "bodyText": "Can we also add tests for the duplicate plugin detection, and failure case wiping the plugins (ie making sure the transactional behavior works)?", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366105171", "createdAt": "2020-01-14T00:50:56Z", "author": {"login": "rjernst"}, "path": "distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java", "diffHunk": "@@ -393,6 +401,16 @@ public void testSomethingWorks() throws Exception {\n         assertPlugin(\"fake\", pluginDir, env.v2());\n     }\n \n+    public void testMultipleWorks() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxODkwNQ==", "bodyText": "I pushed tests for this.", "url": "https://github.com/elastic/elasticsearch/pull/50924#discussion_r366318905", "createdAt": "2020-01-14T12:48:49Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java", "diffHunk": "@@ -393,6 +401,16 @@ public void testSomethingWorks() throws Exception {\n         assertPlugin(\"fake\", pluginDir, env.v2());\n     }\n \n+    public void testMultipleWorks() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNTE3MQ=="}, "originalCommit": {"oid": "464c66695c276a2a4cc2c362a9062560c86df488"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}