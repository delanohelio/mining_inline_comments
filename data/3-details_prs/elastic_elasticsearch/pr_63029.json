{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTgwNjU5", "number": 63029, "title": "Scripting: enable regular expressions by default", "bodyText": "Setting script.painless.regex.enabled has a new option,\nlimited, the default.  This defaults to using regular\nexpressions but limiting the complexity of the regular\nexpressions.\nIn addition to limited, the setting can be true, as\nbefore, which enables regular expressions without limiting them.\nfalse totally disables regular expressions, which was the\nold default.\n\n\nNew setting script.painless.regex.limit-factor.  This limits\nregular expression complexity by limiting the number characters\na regular expression can consider based on input length.\nThe default is 6, so a regular expression can consider\n6 * input length number of characters.  With input\nfoobarbaz (length 9), for example, the regular expression\ncan consider 54 (6 * 9) characters.\nThis reduces the impact of exponential backtracking in Java's\nregular expression engine.\n\n\nadd @inject_constant annotation to whitelist.\nThis annotation signals that a compiler settings will\nbe injected at the beginning of a whitelisted method.\nThe format is argnum=settingname:\n1=foo_setting 2=bar_setting.\nArgument numbers must start at one and must be sequential.\n\n\nAugment\nPattern.split(CharSequence)\nPattern.split(CharSequence, int),\nPattern.splitAsStream(CharSequence)\nPattern.matcher(CharSequence)\nto take the value of script.painless.regex.limit-factor as a\nan injected parameter, limiting as explained above when this\nsetting is in use.\n\n\nFixes: #49873", "createdAt": "2020-09-29T17:11:06Z", "url": "https://github.com/elastic/elasticsearch/pull/63029", "merged": true, "mergeCommit": {"oid": "93f29a4f18b0326da16186a741c30bf248e2d65b"}, "closed": true, "closedAt": "2020-10-05T14:15:15Z", "author": {"login": "stu-elastic"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNrXc3gH2gAyNDk0OTgwNjU5OmUzZTE1Y2Y0Njk5ODEyMGIwMTdhYzYyMGFmYWQwZGJiYTJkNmRkN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOrpmiAFqTUwMTQxNDE0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/e3e15cf46998120b017ac620afad0dbba2d6dd7b", "committedDate": "2020-09-29T17:09:47Z", "message": "Scripting: enable regular expressions by default\n\n* Setting `script.painless.regex.enabled` has a new option,\n  `use-factor`, the default.  This defaults to using regular\n  expressions but limiting the complexity of the regular\n  expressions.\n\n  In addition to `use-factor`, the setting can be `true`, as\n  before, which enables regular expressions without limiting them.\n\n  `false` totally disables regular expressions, which was the\n  old default.\n\n* New setting `script.painless.regex.limit-factor`.  This limits\n  regular expression complexity by limiting the number characters\n  a regular expression can consider based on input length.\n\n  The default is `6`, so a regular expression can consider\n  `6` * input length number of characters.  With input\n  `foobarbaz` (length `9`), for example, the regular expression\n  can consider `54` (`6 * 9`) characters.\n\n  This reduces the impact of exponential backtracking in Java's\n  regular expression engine.\n\n* add `@inject_constant` annotation to whitelist.\n\n  This annotation signals that a compiler settings will\n  be injected at the beginning of a whitelisted method.\n\n  The format is `argnum=settingname`:\n  `1=foo_setting 2=bar_setting`.\n\n  Argument numbers must start at one and must be sequential.\n\n* Augment\n  `Pattern.split(CharSequence)`\n  `Pattern.split(CharSequence, int)`,\n  `Pattern.splitAsStream(CharSequence)`\n  `Pattern.matcher(CharSequence)`\n  to take the value of `script.painless.regex.limit-factor` as a\n  an injected parameter, limiting as explained above when this\n  setting is in use.\n\nFixes: #49873"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d58686cfb46b976007f235e9c04641881684a29", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d58686cfb46b976007f235e9c04641881684a29", "committedDate": "2020-09-29T17:31:43Z", "message": "Add javadoc, remove done TODOS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzE2MTM5", "url": "https://github.com/elastic/elasticsearch/pull/63029#pullrequestreview-498716139", "createdAt": "2020-09-29T17:24:11Z", "commit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNDoxMVrOHZ5Gzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozNjozM1rOHZ5leA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA==", "bodyText": "Since we don't actually whitelist this method, I think this is just a comment to note if we did allow that method it would allow escaping the regex limiting? Could you clarify the comment?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912078", "createdAt": "2020-09-29T17:24:11Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "diffHunk": "@@ -58,6 +58,7 @@ class java.util.regex.Matcher {\n   String replaceFirst(String)\n   boolean requireEnd()\n   Matcher reset()\n+  # Whitelisting Matcher.reset(String) works around the regex limiting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjIzMA==", "bodyText": "leftover todo?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912230", "createdAt": "2020-09-29T17:24:24Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/ScriptScope.java", "diffHunk": "@@ -66,6 +66,8 @@ public ScriptScope(PainlessLookup painlessLookup, CompilerSettings compilerSetti\n         staticConstants.put(\"$SOURCE\", scriptSource);\n         staticConstants.put(\"$DEFINITION\", painlessLookup);\n         staticConstants.put(\"$FUNCTIONS\", functionTable);\n+        // TODO(stu): inject compiler settings here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODAyNg==", "bodyText": "what is this todo?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496918026", "createdAt": "2020-09-29T17:33:21Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -211,7 +211,7 @@ protected void injectStaticFieldsAndGetters() {\n         irLoadFieldMemberNode.setLocation(internalLocation);\n         irLoadFieldMemberNode.setExpressionType(String.class);\n         irLoadFieldMemberNode.setName(\"$NAME\");\n-        irLoadFieldMemberNode.setStatic(true);\n+        irLoadFieldMemberNode.setStatic(true); // TODO(stu): add $COMPILER_INJECTS, add hash map and set it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTUyNw==", "bodyText": "Todos like this are very cryptic. Can we just have a normal comment if some explanation is needed?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919527", "createdAt": "2020-09-29T17:35:50Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotationParser.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+public class InjectConstantAnnotationParser implements WhitelistAnnotationParser {\n+\n+    public static final InjectConstantAnnotationParser INSTANCE = new InjectConstantAnnotationParser();\n+\n+    private InjectConstantAnnotationParser() {}\n+\n+    @Override\n+    public Object parse(Map<String, String> arguments) {\n+        if (arguments.isEmpty()) {\n+            throw new IllegalArgumentException(\"[@inject_constant] requires at least one name to inject\");\n+        }\n+        ArrayList<String> argList = new ArrayList<>(arguments.size());\n+        for (int i = 1; i <= arguments.size(); i++) {\n+            String argNum = Integer.toString(i);\n+            if (arguments.containsKey(argNum) == false) {\n+                throw new IllegalArgumentException(\"[@inject_constant] missing argument number [\" + argNum + \"]\");\n+            }\n+            // TODO(stu): Jack, how do I verify against CompilerSettings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA==", "bodyText": "Can we have some basic java docs on this?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919928", "createdAt": "2020-09-29T17:36:33Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class InjectConstantAnnotation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d58686cfb46b976007f235e9c04641881684a29"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a139fc831d4c555307ea84b896a6a0ea5d2073a", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a139fc831d4c555307ea84b896a6a0ea5d2073a", "committedDate": "2020-09-30T14:47:24Z", "message": "Regexes are enabled by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b89bea1bde0a7eafbe0111b3ecd3e604c347f06d", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/b89bea1bde0a7eafbe0111b3ecd3e604c347f06d", "committedDate": "2020-09-30T14:55:44Z", "message": "use_factor -> limited, InjectConstantAnnotation javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3895974258e90c63872580930dc38704110a03a3", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/3895974258e90c63872580930dc38704110a03a3", "committedDate": "2020-10-01T16:39:02Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e17ec86bbd7c8dcff340237f27b784d3e2fa978", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e17ec86bbd7c8dcff340237f27b784d3e2fa978", "committedDate": "2020-10-01T19:30:46Z", "message": "find and match operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51bda05efc560152f98f4f06d1f3707e454b8047", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/51bda05efc560152f98f4f06d1f3707e454b8047", "committedDate": "2020-10-01T19:41:16Z", "message": "Set limit factor for Find, add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c838dfaf1a3ac32e93a48a2f1b22bcd357beb5", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/a8c838dfaf1a3ac32e93a48a2f1b22bcd357beb5", "committedDate": "2020-10-01T20:14:00Z", "message": "Add pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e0363343b155992604d5928ac5e49679f0a89a", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6e0363343b155992604d5928ac5e49679f0a89a", "committedDate": "2020-10-01T20:56:30Z", "message": "Add tests for unlimited"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821639163de34db8b16386d8a9735a93edec4fb7", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/821639163de34db8b16386d8a9735a93edec4fb7", "committedDate": "2020-10-01T21:04:46Z", "message": "fix style problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ebf4ddea4f30fa44f7cce204496ec1bb2cab78", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/e8ebf4ddea4f30fa44f7cce204496ec1bb2cab78", "committedDate": "2020-10-01T21:15:36Z", "message": "Skip todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2ed98ea3465855d82213165b7fa99a0c8f5e55", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a2ed98ea3465855d82213165b7fa99a0c8f5e55", "committedDate": "2020-10-01T21:32:10Z", "message": "add snippet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60bc11a96b7f0ce6861c3259d86bc4386366575e", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/60bc11a96b7f0ce6861c3259d86bc4386366575e", "committedDate": "2020-10-01T21:34:28Z", "message": "unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297d4403faf836c069ab1148f8306fff595a7a0d", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/297d4403faf836c069ab1148f8306fff595a7a0d", "committedDate": "2020-10-02T16:07:10Z", "message": "No longer disabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDE0MTQz", "url": "https://github.com/elastic/elasticsearch/pull/63029#pullrequestreview-501414143", "createdAt": "2020-10-02T20:03:32Z", "commit": {"oid": "297d4403faf836c069ab1148f8306fff595a7a0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}