{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDAxNzI4", "number": 51529, "title": "[ML] add _cat/ml/trained_models API", "bodyText": "This adds _cat/ml/trained_models.\nCertain pieces of data are in the config that do not exist in the stats response. Additionally, conditionally knowing what data frame analytics job created the model (if the job still exists) would be nice information.\nExamples:\n# GET _cat/ml/trained_models?v\nid                           heap_size operations ingest.pipelines\nddddd-1580216177138          3.5mb     196        0\nflight-regress-1580215685537 1.7mb     102        0\nlang_ident_model_1           1mb       39629      0\n\n# GET _cat/ml/trained_models?h=*&v\nid                           created_by heap_size operations license  create_time              version description                                                    data_frame_analytics_id ingest.pipelines ingest.count ingest.time ingest.current ingest.failed\nddddd-1580216177138              _xpack 3.5mb     196        PLATINUM 2020-01-28T12:56:17.138Z 8.0.0                                                                  ddddd                   0                0            0s          0              0\nflight-regress-1580215685537     _xpack 1.7mb     102        PLATINUM 2020-01-28T12:48:05.537Z 8.0.0                                                                  flight-regress          0                0            0s          0              0\nlang_ident_model_1               _xpack 1mb       39629      BASIC    2019-12-05T12:28:34.594Z 7.6.0   Model used for identifying language from arbitrary input text. __none__                0                0            0s          0              0\n\n# GET _cat/ml/trained_models?help\nid                      |                       | the trained model id                                                          \ncreated_by              | c,createdBy           | who created the model                                                         \nheap_size               | hs,modelHeapSize      | the estimated heap size to keep the model in memory                           \noperations              | o,modelOperations     | the estimated number of operations to use the model                           \nlicense                 | l                     | The license level of the model                                                \ncreate_time             | ct                    | The time the model was created                                                \nversion                 | v                     | The version of Elasticsearch when the model was created                       \ndescription             | d                     | The model description                                                         \ndata_frame_analytics_id | df,dataFrameAnalytics | The data frame analytics config id that created the model (if still available)\ningest.pipelines        | ip,ingestPipelines    | The number of pipelines referencing the model                                 \ningest.count            | ic,ingestCount        | The total number of docs processed by the model                               \ningest.time             | it,ingestTime         | The total time spent processing docs with this model                          \ningest.current          | icurr,ingestCurrent   | The total documents currently being handled by the model                      \ningest.failed           | if,ingestFailed       | The total count of failed ingest attempts with this model                     \n\nThe tricky code here is finding dataframe analytics configs that match up with the trained models. If folks want to get 1000s of trained models in this call, and each one has 10+ unique tags, it could be that our dataframe analysis query is too large. I think it is good to throw in that situation (which is done automatically if the paging params are out of bounds). Folks can filter down this request with trained model ids and paging params.\ncloses #51414", "createdAt": "2020-01-28T13:02:48Z", "url": "https://github.com/elastic/elasticsearch/pull/51529", "merged": true, "mergeCommit": {"oid": "374eca7e56f55e5d051e993145d30af696810527"}, "closed": true, "closedAt": "2020-02-05T12:09:36Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-w7k4gH2gAyMzY4MDAxNzI4OjI1MGExMTQ3NjM0ODI1YmQ4OTIxYmMzYzNhZDc4NDRkZGFkOWUxMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBByQIAH2gAyMzY4MDAxNzI4Ojc5MzZhZTM4ZTQwMjdhNzEzMGY0NDYwN2U0YzViNWViMWQxOTlhNWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/250a1147634825bd8921bc3c3ad7844ddad9e112", "committedDate": "2020-01-28T12:58:45Z", "message": "[ML] add _cat/ml/trained_models API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDQxNzEz", "url": "https://github.com/elastic/elasticsearch/pull/51529#pullrequestreview-351441713", "createdAt": "2020-01-31T11:20:10Z", "commit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMToyMDoxMFrOFkIghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTo0NDo1MFrOFkJCQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzMjQ1Mw==", "bodyText": "This is the only cat action that supports paging", "url": "https://github.com/elastic/elasticsearch/pull/51529#discussion_r373432453", "createdAt": "2020-01-31T11:20:10Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatTrainedModelsAction.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.support.GroupedActionListener;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.action.util.PageParams;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsStatsAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.security.user.XPackUser;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction.Request.ALLOW_NO_MATCH;\n+\n+public class RestCatTrainedModelsAction extends AbstractCatAction {\n+\n+    private static final Logger logger = LogManager.getLogger(RestCatTrainedModelsAction.class);\n+\n+    public RestCatTrainedModelsAction(RestController controller) {\n+        controller.registerHandler(GET, \"_cat/ml/trained_models/{\" + TrainedModelConfig.MODEL_ID.getPreferredName() + \"}\", this);\n+        controller.registerHandler(GET, \"_cat/ml/trained_models\", this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_trained_models_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String modelId = restRequest.param(TrainedModelConfig.MODEL_ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(modelId)) {\n+            modelId = MetaData.ALL;\n+        }\n+        GetTrainedModelsStatsAction.Request statsRequest = new GetTrainedModelsStatsAction.Request(modelId);\n+        GetTrainedModelsAction.Request modelsAction = new GetTrainedModelsAction.Request(modelId, false, null);\n+        if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzMzM1MQ==", "bodyText": "cat indices does not have the allow_no_indices option. Is this conventional?", "url": "https://github.com/elastic/elasticsearch/pull/51529#discussion_r373433351", "createdAt": "2020-01-31T11:22:25Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/cat.ml.trained_models.json", "diffHunk": "@@ -0,0 +1,100 @@\n+{\n+  \"cat.ml.trained_models\":{\n+    \"documentation\":{\n+      \"url\":\"https://www.elastic.co/guide/en/elasticsearch/reference/current/get-inference-stats.html\"\n+    },\n+    \"stability\":\"stable\",\n+    \"url\":{\n+      \"paths\":[\n+        {\n+          \"path\":\"/_cat/ml/trained_models\",\n+          \"methods\":[\n+            \"GET\"\n+          ]\n+        },\n+        {\n+          \"path\":\"/_cat/ml/trained_models/{model_id}\",\n+          \"methods\":[\n+            \"GET\"\n+          ],\n+          \"parts\":{\n+            \"model_id\":{\n+              \"type\":\"string\",\n+              \"description\":\"The ID of the trained models stats to fetch\"\n+            }\n+          }\n+        }\n+      ]\n+    },\n+    \"params\":{\n+      \"allow_no_match\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDU5MA==", "bodyText": "I think we want a better way of differentiating user models and DFA models in the future. Maybe a reserved tag for DFA models", "url": "https://github.com/elastic/elasticsearch/pull/51529#discussion_r373434590", "createdAt": "2020-01-31T11:25:55Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatTrainedModelsAction.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.support.GroupedActionListener;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.action.util.PageParams;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsStatsAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.security.user.XPackUser;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction.Request.ALLOW_NO_MATCH;\n+\n+public class RestCatTrainedModelsAction extends AbstractCatAction {\n+\n+    private static final Logger logger = LogManager.getLogger(RestCatTrainedModelsAction.class);\n+\n+    public RestCatTrainedModelsAction(RestController controller) {\n+        controller.registerHandler(GET, \"_cat/ml/trained_models/{\" + TrainedModelConfig.MODEL_ID.getPreferredName() + \"}\", this);\n+        controller.registerHandler(GET, \"_cat/ml/trained_models\", this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_trained_models_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String modelId = restRequest.param(TrainedModelConfig.MODEL_ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(modelId)) {\n+            modelId = MetaData.ALL;\n+        }\n+        GetTrainedModelsStatsAction.Request statsRequest = new GetTrainedModelsStatsAction.Request(modelId);\n+        GetTrainedModelsAction.Request modelsAction = new GetTrainedModelsAction.Request(modelId, false, null);\n+        if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {\n+            statsRequest.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+            modelsAction.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+        }\n+        statsRequest.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+        modelsAction.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+\n+        return channel -> {\n+            final ActionListener<Table> listener = ActionListener.notifyOnce(new RestResponseListener<>(channel) {\n+                @Override\n+                public RestResponse buildResponse(final Table table) throws Exception {\n+                    return RestTable.buildResponse(table, channel);\n+                }\n+            });\n+\n+            client.execute(GetTrainedModelsAction.INSTANCE, modelsAction, ActionListener.wrap(\n+                trainedModels -> {\n+                    final List<TrainedModelConfig> trainedModelConfigs = trainedModels.getResources().results();\n+\n+                    Set<String> potentialAnalyticsIds = new HashSet<>();\n+                    // Analytics Configs are created by the XPackUser\n+                    trainedModelConfigs.stream()\n+                        .filter(c -> XPackUser.NAME.equals(c.getCreatedBy()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTQ3OQ==", "bodyText": "Do you need the wrap?", "url": "https://github.com/elastic/elasticsearch/pull/51529#discussion_r373439479", "createdAt": "2020-01-31T11:39:49Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatTrainedModelsAction.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.support.GroupedActionListener;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.action.util.PageParams;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsStatsAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.security.user.XPackUser;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction.Request.ALLOW_NO_MATCH;\n+\n+public class RestCatTrainedModelsAction extends AbstractCatAction {\n+\n+    private static final Logger logger = LogManager.getLogger(RestCatTrainedModelsAction.class);\n+\n+    public RestCatTrainedModelsAction(RestController controller) {\n+        controller.registerHandler(GET, \"_cat/ml/trained_models/{\" + TrainedModelConfig.MODEL_ID.getPreferredName() + \"}\", this);\n+        controller.registerHandler(GET, \"_cat/ml/trained_models\", this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_trained_models_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String modelId = restRequest.param(TrainedModelConfig.MODEL_ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(modelId)) {\n+            modelId = MetaData.ALL;\n+        }\n+        GetTrainedModelsStatsAction.Request statsRequest = new GetTrainedModelsStatsAction.Request(modelId);\n+        GetTrainedModelsAction.Request modelsAction = new GetTrainedModelsAction.Request(modelId, false, null);\n+        if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {\n+            statsRequest.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+            modelsAction.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+        }\n+        statsRequest.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+        modelsAction.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+\n+        return channel -> {\n+            final ActionListener<Table> listener = ActionListener.notifyOnce(new RestResponseListener<>(channel) {\n+                @Override\n+                public RestResponse buildResponse(final Table table) throws Exception {\n+                    return RestTable.buildResponse(table, channel);\n+                }\n+            });\n+\n+            client.execute(GetTrainedModelsAction.INSTANCE, modelsAction, ActionListener.wrap(\n+                trainedModels -> {\n+                    final List<TrainedModelConfig> trainedModelConfigs = trainedModels.getResources().results();\n+\n+                    Set<String> potentialAnalyticsIds = new HashSet<>();\n+                    // Analytics Configs are created by the XPackUser\n+                    trainedModelConfigs.stream()\n+                        .filter(c -> XPackUser.NAME.equals(c.getCreatedBy()))\n+                        .forEach(c -> potentialAnalyticsIds.addAll(c.getTags()));\n+\n+\n+                    // Find the related DataFrameAnalyticsConfigs\n+                    String requestIdPattern = Strings.collectionToDelimitedString(potentialAnalyticsIds, \"*,\") + \"*\";\n+\n+                    final GroupedActionListener<ActionResponse> groupedListener = createGroupedListener(restRequest,\n+                        2,\n+                        trainedModels.getResources().results(),\n+                        listener);\n+\n+                    client.execute(GetTrainedModelsStatsAction.INSTANCE,\n+                        statsRequest,\n+                        ActionListener.wrap(groupedListener::onResponse, groupedListener::onFailure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MTA4OA==", "bodyText": "left over debug?", "url": "https://github.com/elastic/elasticsearch/pull/51529#discussion_r373441088", "createdAt": "2020-01-31T11:44:50Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatTrainedModelsAction.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.support.GroupedActionListener;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.action.util.PageParams;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetTrainedModelsStatsAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.security.user.XPackUser;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.ml.action.GetTrainedModelsAction.Request.ALLOW_NO_MATCH;\n+\n+public class RestCatTrainedModelsAction extends AbstractCatAction {\n+\n+    private static final Logger logger = LogManager.getLogger(RestCatTrainedModelsAction.class);\n+\n+    public RestCatTrainedModelsAction(RestController controller) {\n+        controller.registerHandler(GET, \"_cat/ml/trained_models/{\" + TrainedModelConfig.MODEL_ID.getPreferredName() + \"}\", this);\n+        controller.registerHandler(GET, \"_cat/ml/trained_models\", this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_trained_models_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String modelId = restRequest.param(TrainedModelConfig.MODEL_ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(modelId)) {\n+            modelId = MetaData.ALL;\n+        }\n+        GetTrainedModelsStatsAction.Request statsRequest = new GetTrainedModelsStatsAction.Request(modelId);\n+        GetTrainedModelsAction.Request modelsAction = new GetTrainedModelsAction.Request(modelId, false, null);\n+        if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {\n+            statsRequest.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+            modelsAction.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM),\n+                restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE)));\n+        }\n+        statsRequest.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+        modelsAction.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(),\n+            statsRequest.isAllowNoResources()));\n+\n+        return channel -> {\n+            final ActionListener<Table> listener = ActionListener.notifyOnce(new RestResponseListener<>(channel) {\n+                @Override\n+                public RestResponse buildResponse(final Table table) throws Exception {\n+                    return RestTable.buildResponse(table, channel);\n+                }\n+            });\n+\n+            client.execute(GetTrainedModelsAction.INSTANCE, modelsAction, ActionListener.wrap(\n+                trainedModels -> {\n+                    final List<TrainedModelConfig> trainedModelConfigs = trainedModels.getResources().results();\n+\n+                    Set<String> potentialAnalyticsIds = new HashSet<>();\n+                    // Analytics Configs are created by the XPackUser\n+                    trainedModelConfigs.stream()\n+                        .filter(c -> XPackUser.NAME.equals(c.getCreatedBy()))\n+                        .forEach(c -> potentialAnalyticsIds.addAll(c.getTags()));\n+\n+\n+                    // Find the related DataFrameAnalyticsConfigs\n+                    String requestIdPattern = Strings.collectionToDelimitedString(potentialAnalyticsIds, \"*,\") + \"*\";\n+\n+                    final GroupedActionListener<ActionResponse> groupedListener = createGroupedListener(restRequest,\n+                        2,\n+                        trainedModels.getResources().results(),\n+                        listener);\n+\n+                    client.execute(GetTrainedModelsStatsAction.INSTANCE,\n+                        statsRequest,\n+                        ActionListener.wrap(groupedListener::onResponse, groupedListener::onFailure));\n+\n+                    GetDataFrameAnalyticsAction.Request dataFrameAnalyticsRequest =\n+                        new GetDataFrameAnalyticsAction.Request(requestIdPattern);\n+                    dataFrameAnalyticsRequest.setAllowNoResources(true);\n+                    dataFrameAnalyticsRequest.setPageParams(new PageParams(0, potentialAnalyticsIds.size()));\n+                    client.execute(GetDataFrameAnalyticsAction.INSTANCE,\n+                        dataFrameAnalyticsRequest,\n+                        ActionListener.wrap(groupedListener::onResponse, groupedListener::onFailure));\n+                },\n+                listener::onFailure\n+            ));\n+        };\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/ml/trained_models\\n\");\n+        sb.append(\"/_cat/ml/trained_models/{model_id}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest request) {\n+        Table table = new Table();\n+        table.startHeaders();\n+\n+        // Trained Model Info\n+        table.addCell(\"id\", TableColumnAttributeBuilder.builder().setDescription(\"the trained model id\").build());\n+        table.addCell(\"created_by\", TableColumnAttributeBuilder.builder(\"who created the model\", false)\n+            .setAliases(\"c\", \"createdBy\")\n+            .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+            .build());\n+        table.addCell(\"heap_size\", TableColumnAttributeBuilder.builder()\n+            .setDescription(\"the estimated heap size to keep the model in memory\")\n+            .setAliases(\"hs\",\"modelHeapSize\")\n+            .build());\n+        table.addCell(\"operations\", TableColumnAttributeBuilder.builder()\n+            .setDescription(\"the estimated number of operations to use the model\")\n+            .setAliases(\"o\", \"modelOperations\")\n+            .build());\n+        table.addCell(\"license\", TableColumnAttributeBuilder.builder(\"The license level of the model\", false)\n+            .setAliases(\"l\")\n+            .build());\n+        table.addCell(\"create_time\", TableColumnAttributeBuilder.builder(\"The time the model was created\", false)\n+            .setAliases(\"ct\")\n+            .build());\n+        table.addCell(\"version\", TableColumnAttributeBuilder.builder(\"The version of Elasticsearch when the model was created\", false)\n+            .setAliases(\"v\")\n+            .build());\n+        table.addCell(\"description\", TableColumnAttributeBuilder.builder(\"The model description\", false)\n+            .setAliases(\"d\")\n+            .build());\n+        table.addCell(\"data_frame_analytics_id\", TableColumnAttributeBuilder.builder(\n+            \"The data frame analytics config id that created the model (if still available)\",\n+            false)\n+            .setAliases(\"df\", \"dataFrameAnalytics\")\n+            .build());\n+\n+        // Trained Model Stats\n+        table.addCell(\"ingest.pipelines\", TableColumnAttributeBuilder.builder(\"The number of pipelines referencing the model\")\n+            .setAliases(\"ip\", \"ingestPipelines\")\n+            .build());\n+        table.addCell(\"ingest.count\", TableColumnAttributeBuilder.builder(\"The total number of docs processed by the model\", false)\n+            .setAliases(\"ic\", \"ingestCount\")\n+            .build());\n+        table.addCell(\"ingest.time\", TableColumnAttributeBuilder.builder(\n+            \"The total time spent processing docs with this model\",\n+            false)\n+            .setAliases(\"it\", \"ingestTime\")\n+            .build());\n+        table.addCell(\"ingest.current\", TableColumnAttributeBuilder.builder(\n+            \"The total documents currently being handled by the model\",\n+            false)\n+            .setAliases(\"icurr\", \"ingestCurrent\")\n+            .build());\n+        table.addCell(\"ingest.failed\", TableColumnAttributeBuilder.builder(\n+            \"The total count of failed ingest attempts with this model\",\n+            false)\n+            .setAliases(\"if\", \"ingestFailed\")\n+            .build());\n+\n+        table.endHeaders();\n+        return table;\n+    }\n+\n+    private GroupedActionListener<ActionResponse> createGroupedListener(final RestRequest request,\n+                                                                        final int size,\n+                                                                        final List<TrainedModelConfig> configs,\n+                                                                        final ActionListener<Table> listener) {\n+        return new GroupedActionListener<>(new ActionListener<>() {\n+            @Override\n+            public void onResponse(final Collection<ActionResponse> responses) {\n+                GetTrainedModelsStatsAction.Response statsResponse = extractResponse(responses, GetTrainedModelsStatsAction.Response.class);\n+                GetDataFrameAnalyticsAction.Response analytics = extractResponse(responses, GetDataFrameAnalyticsAction.Response.class);\n+                listener.onResponse(buildTable(request,\n+                    statsResponse.getResources().results(),\n+                    configs,\n+                    analytics == null ? Collections.emptyList() : analytics.getResources().results()));\n+            }\n+\n+            @Override\n+            public void onFailure(final Exception e) {\n+                listener.onFailure(e);\n+            }\n+        }, size);\n+    }\n+\n+\n+    private Table buildTable(RestRequest request,\n+                             List<GetTrainedModelsStatsAction.Response.TrainedModelStats> stats,\n+                             List<TrainedModelConfig> configs,\n+                             List<DataFrameAnalyticsConfig> analyticsConfigs) {\n+        Table table = getTableWithHeader(request);\n+        assert configs.size() == stats.size();\n+\n+        Map<String, String> analyticsMap = analyticsConfigs.stream()\n+            .map(DataFrameAnalyticsConfig::getId)\n+            .collect(Collectors.toMap(Function.identity(), Function.identity()));\n+        logger.warn(\"ANALYTICS MAP  \" + analyticsMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250a1147634825bd8921bc3c3ad7844ddad9e112"}, "originalPosition": 225}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a93c6d48c53c0f3989c962617e9b76f9aa0ea42", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a93c6d48c53c0f3989c962617e9b76f9aa0ea42", "committedDate": "2020-01-31T13:01:27Z", "message": "adding more dfa columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a63dfdadeb181916e59ee4c64530ea680816819", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5a63dfdadeb181916e59ee4c64530ea680816819", "committedDate": "2020-01-31T14:26:52Z", "message": "fixing yaml test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b833f8f13368a4289c12df4905f2d6d11c596f56", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b833f8f13368a4289c12df4905f2d6d11c596f56", "committedDate": "2020-01-31T14:34:59Z", "message": "removing unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33175e82cc28bc74a9c0c3e2a0a638afbefcbbb1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/33175e82cc28bc74a9c0c3e2a0a638afbefcbbb1", "committedDate": "2020-01-31T14:59:49Z", "message": "Merge branch 'master' into feature/ml-_cat-trainedmodels-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTY4NTYz", "url": "https://github.com/elastic/elasticsearch/pull/51529#pullrequestreview-352168563", "createdAt": "2020-02-03T10:53:57Z", "commit": {"oid": "33175e82cc28bc74a9c0c3e2a0a638afbefcbbb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75cf793b52e047e1a0013969e285c09520461d48", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/75cf793b52e047e1a0013969e285c09520461d48", "committedDate": "2020-02-04T13:37:34Z", "message": "adjusting default columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7936ae38e4027a7130f44607e4c5b5eb1d199a5b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/7936ae38e4027a7130f44607e4c5b5eb1d199a5b", "committedDate": "2020-02-04T13:44:48Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-_cat-trainedmodels-api"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3176, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}