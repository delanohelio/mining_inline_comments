{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNDIxNjQ0", "number": 65687, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxNjozMFrOE_xYhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowODo1OVrOFAVR-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzA0ODM5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/limitations.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxNjozMFrOH9qWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxNjozMFrOH9qWuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxOTEyOA==", "bodyText": "We should backport this to reflect the change that happened quite some time ago.", "url": "https://github.com/elastic/elasticsearch/pull/65687#discussion_r534419128", "createdAt": "2020-12-02T19:16:30Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/limitations.asciidoc", "diffHunk": "@@ -105,8 +105,8 @@ When multiple values are returned for a field, by default, {es-sql} will throw a\n === Sorting by aggregation\n \n When doing aggregations (`GROUP BY`) {es-sql} relies on {es}'s `composite` aggregation for its support for paginating results.\n-However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. \n-{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows.\n+However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets.\n+{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *65535* rows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a839e7b6ebc3e758b14702b3e148d40f3b11f1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDY2MTEzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDo0MTo0M1rOH95RqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDo0MTo0M1rOH95RqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MzU5Mw==", "bodyText": "No need for this one to be public. Also, the method should be moved last in the class.", "url": "https://github.com/elastic/elasticsearch/pull/65687#discussion_r534663593", "createdAt": "2020-12-03T04:41:43Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "diffHunk": "@@ -171,4 +184,85 @@ public void testAggSorting_Randomized() {\n         });\n         assertEquals(expected.subList(0, queueSize), results);\n     }\n+\n+    public Tuple<Integer, Integer> runLocalAggSorterWithNoLimit(int dataSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0da4a065699b699fa9944450518fd790b03584"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkxOTM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNjo0MFrOH-kSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNjo0MFrOH-kSsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2ODM3MA==", "bodyText": "Since we already have access to the listener, how about returning a bool instead of throwing an exception.\nThere's nothing wrong with it yet consumeRowSet is used only internally so promoting the condition to an exception only to catch it later  looks a bit wasteful to me.\nsuggestion:\nif (consumeRowSet(page.rowSet()) == false) {\n   return;\n}", "url": "https://github.com/elastic/elasticsearch/pull/65687#discussion_r535368370", "createdAt": "2020-12-03T16:06:40Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java", "diffHunk": "@@ -225,8 +226,13 @@ public void onResponse(Page page) {\n                 }\n             }\n \n-            // 1. consume all pages received\n-            consumeRowSet(page.rowSet());\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca7a849317fe2fad39a893081bf5fbbe7cd938b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkyNDcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNzo1MVrOH-kWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNzo1MVrOH-kWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2OTI1NA==", "bodyText": "Static imports?", "url": "https://github.com/elastic/elasticsearch/pull/65687#discussion_r535369254", "createdAt": "2020-12-03T16:07:51Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "diffHunk": "@@ -171,4 +184,85 @@ public void testAggSorting_Randomized() {\n         });\n         assertEquals(expected.subList(0, queueSize), results);\n     }\n+\n+    public void testFullQueueSortingOnLocalSort() {\n+        Tuple<Integer, Integer> actions = runLocalAggSorterWithNoLimit(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS);\n+\n+        assertEquals(\"Exactly one response expected\", 1, actions.v1().intValue());\n+        assertEquals(\"No failures expected\", 0, actions.v2().intValue());\n+    }\n+\n+    public void testQueueOverflowSortingOnLocalSort() {\n+        Tuple<Integer, Integer> actions = runLocalAggSorterWithNoLimit(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 2);\n+\n+        assertEquals(\"No response expected\", 0, actions.v1().intValue());\n+        assertEquals(\"Exactly one failure expected\", 1, actions.v2().intValue());\n+    }\n+\n+    Tuple<Integer, Integer> runLocalAggSorterWithNoLimit(int dataSize) {\n+        class TestResultRowSet<E extends NamedWriteable> extends ResultRowSet<E> implements SchemaRowSet {\n+\n+            private int rowCounter = 0;\n+            private final int dataSize;\n+\n+            TestResultRowSet(List<E> extractors, BitSet mask, int dataSize) {\n+                super(extractors, mask);\n+                this.dataSize = dataSize;\n+            }\n+\n+            @Override\n+            protected Object extractValue(NamedWriteable namedWriteable) {\n+                return rowCounter++;\n+            }\n+\n+            @Override\n+            protected boolean doHasCurrent() {\n+                return true;\n+            }\n+\n+            @Override\n+            protected boolean doNext() {\n+                return rowCounter < dataSize;\n+            }\n+\n+            @Override\n+            protected void doReset() {\n+            }\n+\n+            @Override\n+            public Schema schema() {\n+                return new Schema(Collections.<String>emptyList(), Collections.<DataType>emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca7a849317fe2fad39a893081bf5fbbe7cd938b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkyOTg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowODo1OVrOH-kZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowODo1OVrOH-kZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDA1Ng==", "bodyText": "Nice", "url": "https://github.com/elastic/elasticsearch/pull/65687#discussion_r535370056", "createdAt": "2020-12-03T16:08:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/QuerierTests.java", "diffHunk": "@@ -171,4 +184,85 @@ public void testAggSorting_Randomized() {\n         });\n         assertEquals(expected.subList(0, queueSize), results);\n     }\n+\n+    public void testFullQueueSortingOnLocalSort() {\n+        Tuple<Integer, Integer> actions = runLocalAggSorterWithNoLimit(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS);\n+\n+        assertEquals(\"Exactly one response expected\", 1, actions.v1().intValue());\n+        assertEquals(\"No failures expected\", 0, actions.v2().intValue());\n+    }\n+\n+    public void testQueueOverflowSortingOnLocalSort() {\n+        Tuple<Integer, Integer> actions = runLocalAggSorterWithNoLimit(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 2);\n+\n+        assertEquals(\"No response expected\", 0, actions.v1().intValue());\n+        assertEquals(\"Exactly one failure expected\", 1, actions.v2().intValue());\n+    }\n+\n+    Tuple<Integer, Integer> runLocalAggSorterWithNoLimit(int dataSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca7a849317fe2fad39a893081bf5fbbe7cd938b"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1872, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}