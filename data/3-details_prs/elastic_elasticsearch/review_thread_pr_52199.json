{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjUzNzIw", "number": 52199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo0MToyM1rODezoUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NTowMlrODe2tbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjI5Nzc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo0MToyM1rOFoJUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyNjo1MFrOFoK7QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzOTk3OQ==", "bodyText": "This means we hit the end of the file, which I think is unexpected. In tests the assertion below will fail; in production we will proceed even though some of the buffer contains its old contents, which would be bad. I think instead we should throw an EOFException here.", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377639979", "createdAt": "2020-02-11T13:41:23Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -121,9 +121,19 @@ private void readInternalBytes(final int part, long pos, final byte[] b, int off\n             // we did not read everything in an optimized fashion, so read the remainder directly\n             try (InputStream inputStream\n                      = blobContainer.readBlob(fileInfo.partName(part), pos + optimizedReadSize, length - optimizedReadSize)) {\n-                final int directReadSize = inputStream.read(b, offset + optimizedReadSize, length - optimizedReadSize);\n+\n+                int directReadSize = 0;\n+                while ((optimizedReadSize + directReadSize) < length) {\n+                    final int read = inputStream.read(b,\n+                                                      offset + optimizedReadSize + directReadSize,\n+                                                      length - optimizedReadSize - directReadSize);\n+                    if (read == -1) {\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b50c0817222bbf111c8682ebf7ec354d26582f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjM2OA==", "bodyText": "I think instead we should throw an EOFException here.\n\nI pushed e06a94b", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377666368", "createdAt": "2020-02-11T14:26:50Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -121,9 +121,19 @@ private void readInternalBytes(final int part, long pos, final byte[] b, int off\n             // we did not read everything in an optimized fashion, so read the remainder directly\n             try (InputStream inputStream\n                      = blobContainer.readBlob(fileInfo.partName(part), pos + optimizedReadSize, length - optimizedReadSize)) {\n-                final int directReadSize = inputStream.read(b, offset + optimizedReadSize, length - optimizedReadSize);\n+\n+                int directReadSize = 0;\n+                while ((optimizedReadSize + directReadSize) < length) {\n+                    final int read = inputStream.read(b,\n+                                                      offset + optimizedReadSize + directReadSize,\n+                                                      length - optimizedReadSize - directReadSize);\n+                    if (read == -1) {\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzOTk3OQ=="}, "originalCommit": {"oid": "7b50c0817222bbf111c8682ebf7ec354d26582f2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjI5OTI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo0MTo1NFrOFoJVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyNzowMVrOFoK7pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDIzNQ==", "bodyText": "Could we extract a method to do this? The two changes to this file look very similar.", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377640235", "createdAt": "2020-02-11T13:41:54Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -276,10 +286,17 @@ boolean canContinueSequentialRead(int part, long pos) {\n \n         int read(byte[] b, int offset, int length) throws IOException {\n             assert this.pos < maxPos : \"should not try and read from a fully-read stream\";\n-            int read = inputStream.read(b, offset, length);\n-            assert read <= length : read + \" vs \" + length;\n-            pos += read;\n-            return read;\n+            int totalRead = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b50c0817222bbf111c8682ebf7ec354d26582f2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjQ2OA==", "bodyText": "Sure, done in e06a94b", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377666468", "createdAt": "2020-02-11T14:27:01Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -276,10 +286,17 @@ boolean canContinueSequentialRead(int part, long pos) {\n \n         int read(byte[] b, int offset, int length) throws IOException {\n             assert this.pos < maxPos : \"should not try and read from a fully-read stream\";\n-            int read = inputStream.read(b, offset, length);\n-            assert read <= length : read + \" vs \" + length;\n-            pos += read;\n-            return read;\n+            int totalRead = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDIzNQ=="}, "originalCommit": {"oid": "7b50c0817222bbf111c8682ebf7ec354d26582f2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgwMjM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NTowMlrOFoOJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MjoxNFrOFoOcYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTE5Mw==", "bodyText": "I'm wondering whether we should throw an EOFException if this hits EOF too. Do we need to behave differently here?", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377719193", "createdAt": "2020-02-11T15:45:02Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -276,7 +296,7 @@ boolean canContinueSequentialRead(int part, long pos) {\n \n         int read(byte[] b, int offset, int length) throws IOException {\n             assert this.pos < maxPos : \"should not try and read from a fully-read stream\";\n-            int read = inputStream.read(b, offset, length);\n+            final int read = readFully(inputStream, b, offset, length, () -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06a94b0f558ed2b85fdf1975856141a1d42210e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMTYxMQ==", "bodyText": "Oh no I get it now, we might use this to read past the end of a stream that we previously opened. Never mind.", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377721611", "createdAt": "2020-02-11T15:48:32Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -276,7 +296,7 @@ boolean canContinueSequentialRead(int part, long pos) {\n \n         int read(byte[] b, int offset, int length) throws IOException {\n             assert this.pos < maxPos : \"should not try and read from a fully-read stream\";\n-            int read = inputStream.read(b, offset, length);\n+            final int read = readFully(inputStream, b, offset, length, () -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTE5Mw=="}, "originalCommit": {"oid": "e06a94b0f558ed2b85fdf1975856141a1d42210e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNDAwMA==", "bodyText": "Yes", "url": "https://github.com/elastic/elasticsearch/pull/52199#discussion_r377724000", "createdAt": "2020-02-11T15:52:14Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -276,7 +296,7 @@ boolean canContinueSequentialRead(int part, long pos) {\n \n         int read(byte[] b, int offset, int length) throws IOException {\n             assert this.pos < maxPos : \"should not try and read from a fully-read stream\";\n-            int read = inputStream.read(b, offset, length);\n+            final int read = readFully(inputStream, b, offset, length, () -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTE5Mw=="}, "originalCommit": {"oid": "e06a94b0f558ed2b85fdf1975856141a1d42210e"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4751, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}