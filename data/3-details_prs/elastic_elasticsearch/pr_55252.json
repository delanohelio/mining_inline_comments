{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTE1ODAy", "number": 55252, "title": "Ensure error handler is called during SLM retention callback failure", "bodyText": "When retrieving the snapshots for a set of repos or deleting a single snapshot, it's possible for\nthe body of the ActionListener's onResponse method to throw an Exception. In this case, the\nerrHandler passed in may not be executed, resulting in the running boolean not being reset back\nto false.\nThis commit uses ActionListener.wrap(...) instead of creating a new ActionListener, which ensures\nthat if the onResponse fails in any way, the onFailure handler is still called.\nResolves #55217", "createdAt": "2020-04-15T18:19:39Z", "url": "https://github.com/elastic/elasticsearch/pull/55252", "merged": true, "mergeCommit": {"oid": "cc18cafba17130cc7340a835e98e09e74914537d"}, "closed": true, "closedAt": "2020-04-16T15:36:39Z", "author": {"login": "dakrone"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX8JvYgH2gAyNDAzOTE1ODAyOjg1ODcyMjY5NDdmYzZiYjgxNjFhYWQ1NWNiMzc5NzczYzczNjFmNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYI5XlAFqTM5NDQzNTQ3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8587226947fc6bb8161aad55cb379773c7361f68", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/8587226947fc6bb8161aad55cb379773c7361f68", "committedDate": "2020-04-15T18:11:17Z", "message": "Ensure error handler is called during SLM retention callback failure\n\nWhen retrieving the snapshots for a set of repos or deleting a single snapshot, it's possible for\nthe body of the `ActionListener`'s `onResponse` method to throw an Exception. In this case, the\n`errHandler` passed in may not be executed, resulting in the `running` boolean not being reset back\nto false.\n\nThis commit uses `ActionListener.wrap(...)` instead of creating a new ActionListener, which ensures\nthat if the `onResponse` fails in any way, the `onFailure` handler is still called.\n\nResolves #55217"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8e19cedb97df2b05d4fbb6a3e262ec8239d2de3", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8e19cedb97df2b05d4fbb6a3e262ec8239d2de3", "committedDate": "2020-04-15T18:29:13Z", "message": "Merge branch 'master' into slm-ensure-errhandlers-are-called"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDM1MjQx", "url": "https://github.com/elastic/elasticsearch/pull/55252#pullrequestreview-394435241", "createdAt": "2020-04-16T09:01:52Z", "commit": {"oid": "f8e19cedb97df2b05d4fbb6a3e262ec8239d2de3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTowMTo1M1rOGGbm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTowMTo1M1rOGGbm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Njk0Nw==", "bodyText": "I found this confusing, but I see it's just how getAllRetainableSnapshots does the listener callback, so maybe it's a discussion we should have on a separate ocasion", "url": "https://github.com/elastic/elasticsearch/pull/55252#discussion_r409396947", "createdAt": "2020-04-16T09:01:53Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/slm/SnapshotRetentionTaskTests.java", "diffHunk": "@@ -375,6 +384,114 @@ public void testOkToDeleteSnapshots() {\n         assertThat(SnapshotRetentionTask.okayToDeleteSnapshots(state), equalTo(true));\n     }\n \n+    public void testErrStillRunsFailureHandlerWhenRetrieving() throws Exception {\n+        ThreadPool threadPool = new TestThreadPool(\"slm-test\");\n+        final String policyId = \"policy\";\n+        final String repoId = \"repo\";\n+        try (ClusterService clusterService = ClusterServiceUtils.createClusterService(threadPool);\n+             Client noOpClient = new NoOpClient(\"slm-test\") {\n+\n+                 @Override\n+                 @SuppressWarnings(\"unchecked\")\n+                 protected <Request extends ActionRequest, Response extends ActionResponse>\n+                 void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n+                     if (request instanceof GetSnapshotsRequest) {\n+                         logger.info(\"--> called\");\n+                         listener.onResponse((Response) new GetSnapshotsResponse(\n+                             Collections.singleton(GetSnapshotsResponse.Response.snapshots(repoId, Collections.emptyList()))));\n+                     } else {\n+                         super.doExecute(action, request, listener);\n+                     }\n+                 }\n+             }) {\n+            SnapshotLifecyclePolicy policy = new SnapshotLifecyclePolicy(policyId, \"snap\", \"1 * * * * ?\",\n+                repoId, null, new SnapshotRetentionConfiguration(TimeValue.timeValueDays(30), null, null));\n+\n+            ClusterState state = createState(policy);\n+            ClusterServiceUtils.setState(clusterService, state);\n+\n+            SnapshotRetentionTask task = new SnapshotRetentionTask(noOpClient, clusterService,\n+                System::nanoTime,\n+                new SnapshotLifecycleTaskTests.VerifyingHistoryStore(noOpClient, ZoneOffset.UTC,\n+                    (historyItem) -> fail(\"should never write history\")),\n+                threadPool);\n+\n+            AtomicReference<Exception> errHandlerCalled = new AtomicReference<>(null);\n+            task.getAllRetainableSnapshots(Collections.singleton(repoId), new ActionListener<>() {\n+                @Override\n+                public void onResponse(Map<String, List<SnapshotInfo>> stringListMap) {\n+                    logger.info(\"--> forcing failure\");\n+                    throw new ElasticsearchException(\"forced failure\");\n+                }\n+\n+                @Override\n+                public void onFailure(Exception e) {\n+                    fail(\"we have another err handler that should have been called\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8e19cedb97df2b05d4fbb6a3e262ec8239d2de3"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDM1NDc2", "url": "https://github.com/elastic/elasticsearch/pull/55252#pullrequestreview-394435476", "createdAt": "2020-04-16T09:02:10Z", "commit": {"oid": "f8e19cedb97df2b05d4fbb6a3e262ec8239d2de3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}