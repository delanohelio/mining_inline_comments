{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODEzMzA4", "number": 53422, "title": "EQL: Add more rest client tests", "bodyText": "Related to #52846", "createdAt": "2020-03-11T17:05:03Z", "url": "https://github.com/elastic/elasticsearch/pull/53422", "merged": true, "mergeCommit": {"oid": "4b67ad39c006ea596c0655cd68a0df539de7c297"}, "closed": true, "closedAt": "2020-03-12T12:17:41Z", "author": {"login": "aleksmaus"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMqQK_gH2gAyMzg2ODEzMzA4OjA4NTFjMDM2MTRjMjk3N2M1YTFhZDI1MzQ3MGM4OTlhOGZjYjQzNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM5It4gFqTM3MzQzNTE2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0851c03614c2977c5a1ad253470c899a8fcb4349", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/0851c03614c2977c5a1ad253470c899a8fcb4349", "committedDate": "2020-03-11T17:06:51Z", "message": "EQL: Add more rest client tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c8c5d4a8ee380bcac0d3afa1de42e640689430f", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c8c5d4a8ee380bcac0d3afa1de42e640689430f", "committedDate": "2020-03-11T17:01:13Z", "message": "EQL: Add more rest client tests"}, "afterCommit": {"oid": "0851c03614c2977c5a1ad253470c899a8fcb4349", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/0851c03614c2977c5a1ad253470c899a8fcb4349", "committedDate": "2020-03-11T17:06:51Z", "message": "EQL: Add more rest client tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTQxODM0", "url": "https://github.com/elastic/elasticsearch/pull/53422#pullrequestreview-373141834", "createdAt": "2020-03-11T21:35:14Z", "commit": {"oid": "0851c03614c2977c5a1ad253470c899a8fcb4349"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNToxNVrOF1J8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNToxNVrOF1J8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MTc1Ng==", "bodyText": "Can you use a different value for category and event_type, please?", "url": "https://github.com/elastic/elasticsearch/pull/53422#discussion_r391281756", "createdAt": "2020-03-11T21:35:15Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java", "diffHunk": "@@ -21,58 +21,145 @@\n \n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.client.methods.HttpPut;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n import org.elasticsearch.client.eql.EqlSearchRequest;\n import org.elasticsearch.client.eql.EqlSearchResponse;\n import org.elasticsearch.client.eql.EqlStatsRequest;\n import org.elasticsearch.client.eql.EqlStatsResponse;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.time.DateUtils;\n import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.search.SearchHit;\n import org.junit.Before;\n \n+import java.io.IOException;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Map;\n \n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.hamcrest.Matchers.anyOf;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.greaterThan;\n \n public class EqlIT extends ESRestHighLevelClientTestCase {\n \n+    private static final String INDEX_NAME = \"index\";\n+    private static final int RECORD_COUNT = 40;\n+    private static final int DIVIDER = 4;\n+\n     @Before\n-    public void setupRemoteClusterConfig() throws Exception {\n+    public void setup() throws Exception {\n         setupRemoteClusterConfig(\"local_cluster\");\n+        setupData();\n     }\n \n-    public void testBasicSearch() throws Exception {\n-        Request doc1 = new Request(HttpPut.METHOD_NAME, \"/index/_doc/1\");\n-        doc1.setJsonEntity(\"{\\\"event_subtype_full\\\": \\\"already_running\\\", \" +\n-                \"\\\"event\\\": {\" +\n-                    \"\\\"category\\\": \\\"process\\\"\" +\n-                \"},\" +\n-                \"\\\"event_type_full\\\": \\\"process_event\\\", \" +\n-                \"\\\"opcode\\\": 3,\" +\n-                \"\\\"pid\\\": 0,\" +\n-                \"\\\"process_name\\\": \\\"System Idle Process\\\",\" +\n-                \"\\\"serial_event_id\\\": 1,\" +\n-                \"\\\"subtype\\\": \\\"create\\\",\" +\n-                \"\\\"@timestamp\\\": 116444736000000000,\" +\n-                \"\\\"unique_pid\\\": 1}\");\n-        client().performRequest(doc1);\n-        client().performRequest(new Request(HttpPost.METHOD_NAME, \"/_refresh\"));\n+    private void setupData() throws IOException {\n+        final BulkRequest bulkRequest = new BulkRequest();\n+        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n+        for (int i = 0; i < RECORD_COUNT; i++) {\n+            final IndexRequest indexRequest = new IndexRequest(INDEX_NAME);\n+            indexRequest.source(jsonBuilder()\n+                    .startObject()\n+                    .field(\"event_subtype_full\", \"already_running\")\n+                    .startObject(\"event\")\n+                    .field(\"category\", \"process\")\n+                    .endObject()\n+                    .field(\"event_type\", \"process\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0851c03614c2977c5a1ad253470c899a8fcb4349"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b6359d65f5d85f53a904d4da423fc435b4fd69", "author": {"user": {"login": "aleksmaus", "name": "Aleksandr Maus"}}, "url": "https://github.com/elastic/elasticsearch/commit/b6b6359d65f5d85f53a904d4da423fc435b4fd69", "committedDate": "2020-03-12T03:03:32Z", "message": "Address Andrei's code review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDM1MTY4", "url": "https://github.com/elastic/elasticsearch/pull/53422#pullrequestreview-373435168", "createdAt": "2020-03-12T10:26:58Z", "commit": {"oid": "b6b6359d65f5d85f53a904d4da423fc435b4fd69"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoyNjo1OFrOF1Y5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoyNjo1OFrOF1Y5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNjcwNg==", "bodyText": "You could use the randomXXX() methods instead for arbitrary values or randomBoolean() to select which one should be used. This has the advantage of trying different combinations for all documents.", "url": "https://github.com/elastic/elasticsearch/pull/53422#discussion_r391526706", "createdAt": "2020-03-12T10:26:58Z", "author": {"login": "costin"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java", "diffHunk": "@@ -21,58 +21,145 @@\n \n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.client.methods.HttpPut;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n import org.elasticsearch.client.eql.EqlSearchRequest;\n import org.elasticsearch.client.eql.EqlSearchResponse;\n import org.elasticsearch.client.eql.EqlStatsRequest;\n import org.elasticsearch.client.eql.EqlStatsResponse;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.time.DateUtils;\n import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.search.SearchHit;\n import org.junit.Before;\n \n+import java.io.IOException;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Map;\n \n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.hamcrest.Matchers.anyOf;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.greaterThan;\n \n public class EqlIT extends ESRestHighLevelClientTestCase {\n \n+    private static final String INDEX_NAME = \"index\";\n+    private static final int RECORD_COUNT = 40;\n+    private static final int DIVIDER = 4;\n+\n     @Before\n-    public void setupRemoteClusterConfig() throws Exception {\n+    public void setup() throws Exception {\n         setupRemoteClusterConfig(\"local_cluster\");\n+        setupData();\n     }\n \n-    public void testBasicSearch() throws Exception {\n-        Request doc1 = new Request(HttpPut.METHOD_NAME, \"/index/_doc/1\");\n-        doc1.setJsonEntity(\"{\\\"event_subtype_full\\\": \\\"already_running\\\", \" +\n-                \"\\\"event\\\": {\" +\n-                    \"\\\"category\\\": \\\"process\\\"\" +\n-                \"},\" +\n-                \"\\\"event_type_full\\\": \\\"process_event\\\", \" +\n-                \"\\\"opcode\\\": 3,\" +\n-                \"\\\"pid\\\": 0,\" +\n-                \"\\\"process_name\\\": \\\"System Idle Process\\\",\" +\n-                \"\\\"serial_event_id\\\": 1,\" +\n-                \"\\\"subtype\\\": \\\"create\\\",\" +\n-                \"\\\"@timestamp\\\": 116444736000000000,\" +\n-                \"\\\"unique_pid\\\": 1}\");\n-        client().performRequest(doc1);\n-        client().performRequest(new Request(HttpPost.METHOD_NAME, \"/_refresh\"));\n+    private void setupData() throws IOException {\n+        final BulkRequest bulkRequest = new BulkRequest();\n+        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n+        for (int i = 0; i < RECORD_COUNT; i++) {\n+            final IndexRequest indexRequest = new IndexRequest(INDEX_NAME);\n+            indexRequest.source(jsonBuilder()\n+                    .startObject()\n+                    .field(\"event_subtype_full\", \"already_running\")\n+                    .startObject(\"event\")\n+                    .field(\"category\", \"process\")\n+                    .endObject()\n+                    .field(\"event_type\", \"foo\")\n+                    .field(\"event_type_full\", \"process_event\")\n+                    .field(\"opcode\", ((i % DIVIDER) == 0) ? 1 : 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b6359d65f5d85f53a904d4da423fc435b4fd69"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1481, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}