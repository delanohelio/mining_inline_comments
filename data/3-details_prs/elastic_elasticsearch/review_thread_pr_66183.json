{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTE3MjM2", "number": 66183, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMDo1MTowNlrOFEhqag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMDo1MTowNlrOFEhqag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMjkwMTU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMDo1MTowNlrOIErhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1MzoxOFrOIFCNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3ODIzNA==", "bodyText": "I would have chosen a slightly different error message, something that would made clearer that the incompatible types are to blame: key [X] type [Y] has an incompatible type with key [A] type [B].", "url": "https://github.com/elastic/elasticsearch/pull/66183#discussion_r541778234", "createdAt": "2020-12-12T20:51:06Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -236,4 +244,35 @@ public Verifier(Metrics metrics) {\n \n         return failures;\n     }\n-}\n\\ No newline at end of file\n+\n+    private void checkJoinKeyTypes(LogicalPlan plan, Set<Failure> localFailures) {\n+        if (plan instanceof Join) {\n+            Join join = (Join) plan;\n+            List<KeyedFilter> queries = join.queries();\n+            KeyedFilter until = join.until();\n+            // pick first query and iterate its keys\n+            KeyedFilter first = queries.get(0);\n+            List<? extends NamedExpression> keys = first.keys();\n+            for (int keyIndex = 0; keyIndex < keys.size(); keyIndex++) {\n+                NamedExpression currentKey = keys.get(keyIndex);\n+                for (int i = 1; i < queries.size(); i++) {\n+                    KeyedFilter filter = queries.get(i);\n+                    doCheckKeyTypes(join, localFailures, currentKey, filter.keys().get(keyIndex));\n+                    if (until.keys().isEmpty() == false) {\n+                        doCheckKeyTypes(join, localFailures, currentKey, until.keys().get(keyIndex));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void doCheckKeyTypes(Join join, Set<Failure> localFailures, NamedExpression expectedKey, NamedExpression currentKey) {\n+        if (DataTypes.areCompatible(expectedKey.dataType(), currentKey.dataType()) == false) {\n+            localFailures.add(fail(currentKey, \"{} key [{}] type [{}] is incompatible with key [{}] type [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd20481a7d40623b8368db70b6060c713be53e59"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MDAxNw==", "bodyText": "What's unclear about the current message?\nSequence key[X] type[Y] is incompatible with key [A] type [B] vs\nkey[X] type[Y] has an incompatible type with key [A] type [B].\nThe messages are the same length however I find the former more informative.", "url": "https://github.com/elastic/elasticsearch/pull/66183#discussion_r542150017", "createdAt": "2020-12-14T06:53:18Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -236,4 +244,35 @@ public Verifier(Metrics metrics) {\n \n         return failures;\n     }\n-}\n\\ No newline at end of file\n+\n+    private void checkJoinKeyTypes(LogicalPlan plan, Set<Failure> localFailures) {\n+        if (plan instanceof Join) {\n+            Join join = (Join) plan;\n+            List<KeyedFilter> queries = join.queries();\n+            KeyedFilter until = join.until();\n+            // pick first query and iterate its keys\n+            KeyedFilter first = queries.get(0);\n+            List<? extends NamedExpression> keys = first.keys();\n+            for (int keyIndex = 0; keyIndex < keys.size(); keyIndex++) {\n+                NamedExpression currentKey = keys.get(keyIndex);\n+                for (int i = 1; i < queries.size(); i++) {\n+                    KeyedFilter filter = queries.get(i);\n+                    doCheckKeyTypes(join, localFailures, currentKey, filter.keys().get(keyIndex));\n+                    if (until.keys().isEmpty() == false) {\n+                        doCheckKeyTypes(join, localFailures, currentKey, until.keys().get(keyIndex));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void doCheckKeyTypes(Join join, Set<Failure> localFailures, NamedExpression expectedKey, NamedExpression currentKey) {\n+        if (DataTypes.areCompatible(expectedKey.dataType(), currentKey.dataType()) == false) {\n+            localFailures.add(fail(currentKey, \"{} key [{}] type [{}] is incompatible with key [{}] type [{}]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3ODIzNA=="}, "originalCommit": {"oid": "bd20481a7d40623b8368db70b6060c713be53e59"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4637, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}