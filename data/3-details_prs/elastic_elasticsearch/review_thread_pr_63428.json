{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5Mzg3Njk0", "number": 63428, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzowNzoxMVrOErRqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozODowNFrOEtCzxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODEzNTI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzowNzoxMVrOHd9O3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzozODo1MFrOHd-aVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3Mzk4MQ==", "bodyText": "Please revert.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501173981", "createdAt": "2020-10-07T17:07:11Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "diffHunk": "@@ -29,7 +29,7 @@ private String error(String pattern) {\n     }\n \n     private LikePattern like(String pattern) {\n-        Expression exp = null;\n+        Expression exp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3ODQ0Nw==", "bodyText": "Will do. I was wondering what is your convention.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501178447", "createdAt": "2020-10-07T17:14:33Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "diffHunk": "@@ -29,7 +29,7 @@ private String error(String pattern) {\n     }\n \n     private LikePattern like(String pattern) {\n-        Expression exp = null;\n+        Expression exp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3Mzk4MQ=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5MzMwMw==", "bodyText": "Generally speaking, I don't have a strong preference for explicitly initialising as null but some times it helps for readability. In this case we have a clear if/else statement that assigns a value, so imho is not so important.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501193303", "createdAt": "2020-10-07T17:38:50Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "diffHunk": "@@ -29,7 +29,7 @@ private String error(String pattern) {\n     }\n \n     private LikePattern like(String pattern) {\n-        Expression exp = null;\n+        Expression exp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3Mzk4MQ=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODE0NzgxOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMDozNVrOHd9W0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0MzozMVrOHeiHOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg==", "bodyText": "@costin Did I miss anything, is there a reason to keep this check here?", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501176016", "createdAt": "2020-10-07T17:10:35Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NzI2NQ==", "bodyText": "To prevent folks from using * instead of %. Whether that's still a concern I don't know.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501177265", "createdAt": "2020-10-07T17:12:36Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5MDc2Mg==", "bodyText": "We don't have anything in the docs regarding the * and we list only the % and _\n* should be interpreted as a normal char for SQL:\npostgres=# create table mytable (str varchar(10));\nCREATE TABLE\n\npostgres=# insert into mytable values('*test*'), ('as*test*fd');\nINSERT 0 2\n\npostgres=# select * from mytable where str like ('%*test*%');\n    str\n------------\n *test*\n as*test*fd\n(2 rows)\n\npostgres=# select * from mytable where str like ('*test*');\n  str\n--------\n *test*\n(1 row)\n\nHow about adding a NOTE in the docs to explicitly specify that *, ? and the usual regex chars are interpreted as normal chars?", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501190762", "createdAt": "2020-10-07T17:34:40Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwODIzOQ==", "bodyText": "AFAIK it is only the MS Access SQL flavour that treats * as a wildcard in a LIKE pattern, so SQL folks should be fairly used to * not being a wildcard. ES customers with less SQL knowledge might not. I think adding a NOTE to the docs does not hurt.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501208239", "createdAt": "2020-10-07T18:03:28Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMTQxMQ==", "bodyText": "I am also thinking about removing the restriction on not being able to use * as an ESCAPE character from here. Do you see any good reason to keep that restriction?\nAs a user * would not be my first choice as an ESCAPE character, but the parser can handle it since * is just a normal character.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501211411", "createdAt": "2020-10-07T18:08:52Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4OTQ3NQ==", "bodyText": "On PostgreSQL, MySQL, SQLite any character can be used as ESCAPE (even wildchars) and any character can be escaped, not just wildcards. PostgreSQL treats the '%%' ESCAPE '%' as a non-wildcard % character (just as another escaped character), while MySQL and SQLite treat it as a wildcard (special escaping case). I assume it was intentional to behave differently and only allow escaping of the wildchars.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501289475", "createdAt": "2020-10-07T20:28:06Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MjU4OA==", "bodyText": "As I see it, since only % and _ are wildcards for LIKE I would only allow escaping of those, but if we go on with this change it shouldn't be part of the bugfix that would be backported, but for next minor release since it's a minor \"breaking\" change.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501582588", "createdAt": "2020-10-08T09:37:08Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3ODIzNA==", "bodyText": "Agree @matriv that allowing escaping any characters should be a separate PR and likely should be in the next minor release only, although technically it is less of a breaking change unless someone depends on the exceptions around escaping non-wildchars. Anyways, this is off topic for this PR.\nTo clarify: in this current PR I am only removing the special treatment of * and the restriction on using *as an ESCAPE character (wildchars are still not allowed as ESCAPE characters). Does this sound good to you?", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501778234", "createdAt": "2020-10-08T14:43:31Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -270,12 +270,6 @@ public LikePattern visitPattern(PatternContext ctx) {\n         if (pattern == null) {\n             throw new ParsingException(source(ctx.value), \"Pattern must not be [null]\");\n         }\n-        int pos = pattern.indexOf('*');\n-        if (pos >= 0) {\n-            throw new ParsingException(source(ctx.value),\n-                    \"Invalid char [*] found in pattern [{}] at position {}; use [%] or [_] instead\",\n-                    pattern, pos);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAxNg=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODE0Nzg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMDozNVrOHd9W1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo0OToyMVrOHd-zLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAyMw==", "bodyText": "Should we maybe improve the error message by listing the wildcard chars for LIKE: % and _ ?", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501176023", "createdAt": "2020-10-07T17:10:35Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "diffHunk": "@@ -63,8 +63,15 @@ public void testInvalidChar() {\n                 is(\"line 1:28: Char [%] cannot be used for escaping\"));\n     }\n \n-    public void testCannotUseStar() {\n+    public void testCanUseStarWithoutEscaping() {\n+        LikePattern like = like(\"%string*\");\n+        assertThat(like.pattern(), is(\"%string*\"));\n+        assertThat(like.asJavaRegex(), is(\"^.*string\\\\*$\"));\n+        assertThat(like.asLuceneWildcard(), is(\"*string\\\\*\"));\n+    }\n+\n+    public void testCannotUseStarWithEscaping() {\n         assertThat(error(\"'|*string' ESCAPE '|'\"),\n-                is(\"line 1:11: Invalid char [*] found in pattern [|*string] at position 1; use [%] or [_] instead\"));\n+            is(\"line 1:11: Pattern [|*string] is invalid as escape char [|] at position 0 can only escape wildcard chars; found [*]\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5OTY2MA==", "bodyText": "Looks good, Maybe add one more test with a more complicated string, something like:\n*%*_string*_**%. Left one more comment about the error message.\n\nWill add a new test case, but I will add it to the LikeConversionTests, since I think that has less to do with ESCAPEing.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501199660", "createdAt": "2020-10-07T17:49:21Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/LikeEscapingParsingTests.java", "diffHunk": "@@ -63,8 +63,15 @@ public void testInvalidChar() {\n                 is(\"line 1:28: Char [%] cannot be used for escaping\"));\n     }\n \n-    public void testCannotUseStar() {\n+    public void testCanUseStarWithoutEscaping() {\n+        LikePattern like = like(\"%string*\");\n+        assertThat(like.pattern(), is(\"%string*\"));\n+        assertThat(like.asJavaRegex(), is(\"^.*string\\\\*$\"));\n+        assertThat(like.asLuceneWildcard(), is(\"*string\\\\*\"));\n+    }\n+\n+    public void testCannotUseStarWithEscaping() {\n         assertThat(error(\"'|*string' ESCAPE '|'\"),\n-                is(\"line 1:11: Invalid char [*] found in pattern [|*string] at position 1; use [%] or [_] instead\"));\n+            is(\"line 1:11: Pattern [|*string] is invalid as escape char [|] at position 0 can only escape wildcard chars; found [*]\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NjAyMw=="}, "originalCommit": {"oid": "50fc9d52097cab6ac8b55625fc8b8f387688de13"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDc4MjI5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/like-rlike.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTozMzo0NlrOHeWCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxNzoxMVrOHeXtZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MDQzMg==", "bodyText": "Personally I'd add it as a [NOTE] below the existing sentence, so that it stands out.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501580432", "createdAt": "2020-10-08T09:33:46Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/like-rlike.asciidoc", "diffHunk": "@@ -33,8 +33,8 @@ with the `LIKE` operator:\n * The percent sign (%)\n * The underscore (_)\n \n-The percent sign represents zero, one or multiple characters. The underscore represents a single number or character. These symbols can be\n-used in combinations.\n+No other characters have special meaning or act as wildcard. The percent sign represents zero, one or multiple characters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c97c9d4259fb263e1278605f068e6d6943a962c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNzc4Mg==", "bodyText": "nit: It might be worth providing first the explanation of the above chars, then add a clarification; i.e. reposition the first sentence at the end.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r501607782", "createdAt": "2020-10-08T10:17:11Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/like-rlike.asciidoc", "diffHunk": "@@ -33,8 +33,8 @@ with the `LIKE` operator:\n * The percent sign (%)\n * The underscore (_)\n \n-The percent sign represents zero, one or multiple characters. The underscore represents a single number or character. These symbols can be\n-used in combinations.\n+No other characters have special meaning or act as wildcard. The percent sign represents zero, one or multiple characters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MDQzMg=="}, "originalCommit": {"oid": "5c97c9d4259fb263e1278605f068e6d6943a962c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjY3Mzk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozODowNFrOHgnMag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1MDo0MlrOHgnzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1ODYzNA==", "bodyText": "On the same idea (which I like) of actually mentioning the wildcard chars in the error message itself (for the lazy user who doesn't read the docs and asking \"why % char cannot be used for escaping?\"), what about adapting this error message to include the reason? Something like Char [%] cannot be used for escaping as it's one of the wildcard chars [%_].", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r503958634", "createdAt": "2020-10-13T13:38:04Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -288,7 +282,7 @@ public LikePattern visitPattern(PatternContext ctx) {\n             } else if (escapeString.length() == 1) {\n                 escape = escapeString.charAt(0);\n                 // these chars already have a meaning\n-                if (escape == '*' || escape == '%' || escape == '_') {\n+                if (escape == '%' || escape == '_') {\n                     throw new ParsingException(source(escapeCtx.escape), \"Char [{}] cannot be used for escaping\", escape);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5ee1890ab2d794050c99d22f983c96685d6de0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2ODU3Nw==", "bodyText": "Thanks, good suggestion. I'll add this cosmetic fix.", "url": "https://github.com/elastic/elasticsearch/pull/63428#discussion_r503968577", "createdAt": "2020-10-13T13:50:42Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -288,7 +282,7 @@ public LikePattern visitPattern(PatternContext ctx) {\n             } else if (escapeString.length() == 1) {\n                 escape = escapeString.charAt(0);\n                 // these chars already have a meaning\n-                if (escape == '*' || escape == '%' || escape == '_') {\n+                if (escape == '%' || escape == '_') {\n                     throw new ParsingException(source(escapeCtx.escape), \"Char [{}] cannot be used for escaping\", escape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1ODYzNA=="}, "originalCommit": {"oid": "ff5ee1890ab2d794050c99d22f983c96685d6de0"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3019, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}