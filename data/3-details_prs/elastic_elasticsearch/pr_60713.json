{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTg5NTM5", "number": 60713, "title": "Simplify jdk downloads via artifact transforms", "bodyText": "This reworks the jdk download plugin to use artifact transforms instead of manual configured\nThat allows us to simplify the jdk download plugin by a lot. Some Benefits of using artifact transforms are:\n\nthey transform an archive (tar or zip) to an unpacked folder on the fly as part\nof the gradle dependency resolution allowing us to remove all the custom created unpack tasks\nand configurations\nArtifact transforms support gradle build cache. Requesting a jdk folder on a clean machine\nwill likely be resolved from the build cache\nThe manual mingling about not extracting jdks multiple times by all jdks channeling through\nroot project configurations can be removed as they support up-to-date checking and build cache\nwhich will ensure these archives are only resolved once per build at max.\n\nA downside is that artefact transforms are currently not well covered in Gradle Enterprise. I know its on their agenda but has been postponed forever so far.\nJdk finalizations are now done via configuration.defaultDependencies. This has two benefits:\n\nwe only configure and finalize the JDKs we actually use during the build\nafterEvaluate hooks are problematic in combination with task avoidance api.\nRelying on task avoidance api in Gradle moves more configuration logic into the materialization\nof tasks which is, with task avoidance api, is done ideally during the task graph calculation.\nAnything created (e.g. jdks) created late in this task graph calculation would never be finalized\nvia afterEvaluate hooks as this has been fired before already with the jdk not there yet.\n\nTo further avoid unrequited configuration, we now only configure repositories in the projects where the jdk is declared\n(aka the jdk-download plugin is applied) and only if the jdk is actually requested during the build.\nTest coverage for the jdk download plugin has been ported to spock that supports data driven testing which IMO produces way better readable and maintainable tests. This porting includes an introduction to a wiremock fixture that can be used later on for mocking repository urls in other integration tests.", "createdAt": "2020-08-05T07:05:35Z", "url": "https://github.com/elastic/elasticsearch/pull/60713", "merged": true, "mergeCommit": {"oid": "ca6daac8e844c625b07e20db989c2e047adb8496"}, "closed": true, "closedAt": "2020-08-06T06:10:07Z", "author": {"login": "breskeby"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc76rOJgBqjM2MjQ1MTM2NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8ARLVAH2gAyNDYzMTg5NTM5OmVmYzVhZDgwZGIyOGViZGYyYmJiNjQ0MDM5MTU4OTY4NWNhY2QyY2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6e64b6d5caa69741969278223b4f12d9eda1350", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/b6e64b6d5caa69741969278223b4f12d9eda1350", "committedDate": "2020-08-05T12:39:29Z", "message": "Fix flaky test"}, "afterCommit": {"oid": "c49014169a7f37f4a35ff2993ad813e3ddbfffbc", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/c49014169a7f37f4a35ff2993ad813e3ddbfffbc", "committedDate": "2020-08-05T12:47:07Z", "message": "Fix flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2972b513acf513e16097b6f8dc48b58c9583f4c3", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/2972b513acf513e16097b6f8dc48b58c9583f4c3", "committedDate": "2020-08-05T15:18:50Z", "message": "Simplify jdk downloads via artifact transforms\n\nThis reworks the jdk download plugin to use artifact transforms.\nThat allows us to simplify the jdk download plugin by a lot. The\nbenefits of using artifact transforms are:\n\n- they transform an artifact to an upacked folder on the fly as part\nof the dependenc resolution allowing us to remove all the custom created unpack tasks\nand configurations\n\n- Artifact transforms support gradle build cache. Requesting a jdk folder on a clean machine\nwill likely be resolved from the build cache\n\n- The manual mingling about not extracting jdks multiple times by all jdks channeling through\nroot project configurations can be removed as they support up-to-date checking and build cache\nwhich will ensure these archives are only resolved once per build at max.\n\nAlso the test coverage has been ported to Spock that supports data driven testing. This porting\nincludes an introduction to a wiremock fixture that can be used later on for mocking repository\nurls in other integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "643955a678fb97cc3e37edca325ee6a66cb69b97", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/643955a678fb97cc3e37edca325ee6a66cb69b97", "committedDate": "2020-08-05T14:23:20Z", "message": "Rework artifact transforms to be cacheable"}, "afterCommit": {"oid": "2972b513acf513e16097b6f8dc48b58c9583f4c3", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/2972b513acf513e16097b6f8dc48b58c9583f4c3", "committedDate": "2020-08-05T15:18:50Z", "message": "Simplify jdk downloads via artifact transforms\n\nThis reworks the jdk download plugin to use artifact transforms.\nThat allows us to simplify the jdk download plugin by a lot. The\nbenefits of using artifact transforms are:\n\n- they transform an artifact to an upacked folder on the fly as part\nof the dependenc resolution allowing us to remove all the custom created unpack tasks\nand configurations\n\n- Artifact transforms support gradle build cache. Requesting a jdk folder on a clean machine\nwill likely be resolved from the build cache\n\n- The manual mingling about not extracting jdks multiple times by all jdks channeling through\nroot project configurations can be removed as they support up-to-date checking and build cache\nwhich will ensure these archives are only resolved once per build at max.\n\nAlso the test coverage has been ported to Spock that supports data driven testing. This porting\nincludes an introduction to a wiremock fixture that can be used later on for mocking repository\nurls in other integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ea2280c1e358265fdcb323d73d44c62973d5d4", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d6ea2280c1e358265fdcb323d73d44c62973d5d4", "committedDate": "2020-08-05T15:32:38Z", "message": "Simplify artifact transform registration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47538f16d08af9fa5b777806b84a157d7f831d17", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/47538f16d08af9fa5b777806b84a157d7f831d17", "committedDate": "2020-08-05T16:03:59Z", "message": "Change jdk finalization and repository setup\n\nJdk finalization is now done via `configuration.defaultDependencies`.\nThis has two benefits:\n- we only configure and finalize the JDKs we actually use during the build\n- afterEvaluate hooks are problematic in combination with task avoidance api.\nRelying on task avoidance api in Gradle moves more configuration logic into the materialization\nof tasks which is, with task avoidance api, is done ideally during the task graph calculation.\nAnything created (e.g. jdks) created late in this task graph calculation would never be finalized\nvia afterEvaluate hooks as this has been fired before already with the jdk not there yet.\n\nFurthermore we now only configure repositories in the projects where the jdk is declared\n(aka the jdk-download plugin is applied) and only if the jdk is actually requested during the build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d13abdca2cd693e8d3135ca5dd47a5eadf47bc6f", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d13abdca2cd693e8d3135ca5dd47a5eadf47bc6f", "committedDate": "2020-08-05T16:11:06Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d056acb99e48750119305074ab329004f39cf2", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/31d056acb99e48750119305074ab329004f39cf2", "committedDate": "2020-08-05T16:28:25Z", "message": "Fix jdk download repo content filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d07b27c27aef3affc1c43b8ae87d13644994c4be", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d07b27c27aef3affc1c43b8ae87d13644994c4be", "committedDate": "2020-08-05T17:05:44Z", "message": "Minor cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODU5MzUw", "url": "https://github.com/elastic/elasticsearch/pull/60713#pullrequestreview-461859350", "createdAt": "2020-08-05T17:06:01Z", "commit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNjowMVrOG8Sxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyOTo1OFrOG8TnOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTMyMg==", "bodyText": "Seems we don't really need this method then.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875322", "createdAt": "2020-08-05T17:06:01Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTUzOA==", "bodyText": "Can we have these delegate to NamedDomainObjectContainer.maybeCreate() as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875538", "createdAt": "2020-08-05T17:06:22Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);\n+        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NjM0OA==", "bodyText": "Is this file even used anymore since we've removed the old testkit tests?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465876348", "createdAt": "2020-08-05T17:07:51Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/testKit/jdk-download/build.gradle", "diffHunk": "@@ -1,12 +1,21 @@\n-project.gradle.projectsEvaluated {\n+allprojects{ p ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3Njk3Nw==", "bodyText": "This argument should probably be called archiveFIle.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465876977", "createdAt": "2020-08-05T17:09:02Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3ODY5NA==", "bodyText": "Is this necessary if it's only used to generate the directory name? Also, do we account for .zip or .tgz here?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465878694", "createdAt": "2020-08-05T17:11:53Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;\n+\n+    static String removeExtension(String inputFileName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDcyMQ==", "bodyText": "Is this interface required to be annotated as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465880721", "createdAt": "2020-08-05T17:15:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw==", "bodyText": "Since this is largly copied from SymbolicLinkPreservingUntarTask should we centralize that in a utility somewhere?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465881597", "createdAt": "2020-08-05T17:16:53Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MjMwNA==", "bodyText": "Actually, now that I look at it that task is no longer used. Can we remove it?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465882304", "createdAt": "2020-08-05T17:18:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODAwOQ==", "bodyText": "Should we give this a more specific name?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888009", "createdAt": "2020-08-05T17:28:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODg3NQ==", "bodyText": "Should we register .tgz as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888875", "createdAt": "2020-08-05T17:29:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n+            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n+            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        });\n \n-                // ensure a root level jdk download task exists\n-                setupRootJdkDownload(project.getRootProject(), jdk);\n-            }\n+        ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4OTA4MA==", "bodyText": "\"noneTransformSpec\"?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465889080", "createdAt": "2020-08-05T17:29:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "author": {"user": {"login": "breskeby", "name": "Rene Groeschke"}}, "url": "https://github.com/elastic/elasticsearch/commit/efc5ad80db28ebdf2bbb6440391589685cacd2cd", "committedDate": "2020-08-05T19:20:18Z", "message": "Apply review feedback and cleanup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}