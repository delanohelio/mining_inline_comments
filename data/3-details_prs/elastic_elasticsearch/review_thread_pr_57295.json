{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTA0OTMw", "number": 57295, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0MDo1N1rOEAkO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozMzoyNFrOEAm4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI5MDkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0MDo1N1rOGb7PcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoxMjozM1rOGb8kmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNTM0NA==", "bodyText": "Minor: this correctly identifies the data stream's write index under the current implementation of data streams. The IndexAbstraction::getWriteIndex method will always return the correct write index in the event that we change the logic around backing index names, generations, etc., and would slightly simplify the code above.", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431935344", "createdAt": "2020-05-28T15:40:57Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "diffHunk": "@@ -64,43 +65,48 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             return new Result(true, new Info(message));\n         }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n-                + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n-        }\n-\n-        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(rolloverAlias);\n-        assert indexAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n-\n-        IndexMetadata aliasWriteIndex = indexAbstraction.getWriteIndex();\n+        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n         final String rolledIndexName;\n         final String waitForActiveShardsSettingValue;\n-        if (aliasWriteIndex != null) {\n-            rolledIndexName = aliasWriteIndex.getIndex().getName();\n-            waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            DataStream dataStream = indexAbstraction.getParentDataStream().getDataStream();\n+            rolledIndexName = DataStream.getBackingIndexName(dataStream.getName(), dataStream.getGeneration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc0933b46d9fa67602bc8c5e699baf222dcee5c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1NzE0Ng==", "bodyText": "Thanks for the suggestion, Dan. Pushed a fix to change this.", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431957146", "createdAt": "2020-05-28T16:12:33Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "diffHunk": "@@ -64,43 +65,48 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             return new Result(true, new Info(message));\n         }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n-                + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n-        }\n-\n-        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(rolloverAlias);\n-        assert indexAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n-\n-        IndexMetadata aliasWriteIndex = indexAbstraction.getWriteIndex();\n+        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n         final String rolledIndexName;\n         final String waitForActiveShardsSettingValue;\n-        if (aliasWriteIndex != null) {\n-            rolledIndexName = aliasWriteIndex.getIndex().getName();\n-            waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            DataStream dataStream = indexAbstraction.getParentDataStream().getDataStream();\n+            rolledIndexName = DataStream.getBackingIndexName(dataStream.getName(), dataStream.getGeneration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNTM0NA=="}, "originalCommit": {"oid": "6fc0933b46d9fa67602bc8c5e699baf222dcee5c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYyNTY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowNTowOFrOGb-ndw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NDowMlrOGcWXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MDY0Nw==", "bodyText": "It does seem strange to pass both the Metadata and the IndexMetadata, should we instead pass Metadata and Index so it's easy to look up the index metadata?", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431990647", "createdAt": "2020-05-28T17:05:08Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -29,7 +30,7 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout);\n+    public abstract void evaluateCondition(Metadata metadata, IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTc3MA==", "bodyText": "Yeah, fair enough, it felt a bit odd to me too (it equally felt wasteful, in terms of CPU cycles, to re-do the lookup every time though, but given ILM is not so much about low latency I agree it makes sense to change it)", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432379770", "createdAt": "2020-05-29T09:54:02Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -29,7 +30,7 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout);\n+    public abstract void evaluateCondition(Metadata metadata, IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MDY0Nw=="}, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYzMzMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowNzozMVrOGb-suw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowNzozMVrOGb-suw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MTk5NQ==", "bodyText": "Super minor, but can you add an\nassert indexAbstraction != null : \"expected the index \" + indexName + \" to exist in the lookup but it didn't\";\nafter this line? I don't think it's going to happen, but we should check it regardless. Optionally, we could make it a real error also (throw an IllegalStateException)", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431991995", "createdAt": "2020-05-28T17:07:31Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY0NjkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMToyMlrOGb-1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODoxNzo1MVrOGcBGQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDIxMQ==", "bodyText": "Just to be super paranoid, I think we should handle the case where getDataStream() returns null", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431994211", "createdAt": "2020-05-28T17:11:22Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMTI5OQ==", "bodyText": "I think that can be changed to:\nrolloverTarget = indexAbstraction.getParentDataStream().getName();\n\nto eliminate the need for another null check.", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432031299", "createdAt": "2020-05-28T18:17:51Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDIxMQ=="}, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY1NTI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMzo1NVrOGb-68A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMzo1NVrOGb-68A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NTYzMg==", "bodyText": "Should we allow this indexing complete setting regardless of whether the parent data stream exists or not? (in otherwords, moving it before the if (indexAbstraction.getParentDataStream() != null) { check)", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431995632", "createdAt": "2020-05-28T17:13:55Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();\n+        } else {\n+            boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n+            if (indexingComplete) {\n+                logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n+                listener.onResponse(true);\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY2NzE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxNzoyOFrOGb_CgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozMTo0MlrOGcXeQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzU2OQ==", "bodyText": "I think this is a chance we can improve this error message (if you agree), maybe something like:\nsetting [index.lifecycle.rollover_alias] for index [foo-1] is not defined, it must be set to the name of the alias pointing to the group of indices being rolled over\n\nI'm not stuck on the wording, maybe you have a better idea?", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431997569", "createdAt": "2020-05-28T17:17:28Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();\n+        } else {\n+            boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n+            if (indexingComplete) {\n+                logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n+                listener.onResponse(true);\n+                return;\n+            }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetadata.getSettings());\n+            String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetadata.getSettings());\n \n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,\n-                \"setting [%s] for index [%s] is empty or not defined\", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS,\n-                indexMetadata.getIndex().getName())));\n-            return;\n-        }\n+            if (Strings.isNullOrEmpty(rolloverAlias)) {\n+                listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,\n+                    \"setting [%s] for index [%s] is empty or not defined\", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5Nzg4OQ==", "bodyText": "Great point, I think the wording sounds good", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432397889", "createdAt": "2020-05-29T10:31:42Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RolloverStep.java", "diffHunk": "@@ -39,38 +40,46 @@ public boolean isRetryable() {\n     @Override\n     public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState,\n                               ClusterStateObserver observer, Listener listener) {\n-        boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n-        if (indexingComplete) {\n-            logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n-            listener.onResponse(true);\n-            return;\n-        }\n+        IndexAbstraction indexAbstraction = currentClusterState.metadata().getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();\n+        } else {\n+            boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetadata.getSettings());\n+            if (indexingComplete) {\n+                logger.trace(indexMetadata.getIndex() + \" has lifecycle complete set, skipping \" + RolloverStep.NAME);\n+                listener.onResponse(true);\n+                return;\n+            }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetadata.getSettings());\n+            String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetadata.getSettings());\n \n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,\n-                \"setting [%s] for index [%s] is empty or not defined\", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS,\n-                indexMetadata.getIndex().getName())));\n-            return;\n-        }\n+            if (Strings.isNullOrEmpty(rolloverAlias)) {\n+                listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,\n+                    \"setting [%s] for index [%s] is empty or not defined\", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NzU2OQ=="}, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY3MzkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRolloverLifecycleDateStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxOToyMFrOGb_G8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxOToyMFrOGb_G8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5ODcwNg==", "bodyText": "I think this can be a static method?", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r431998706", "createdAt": "2020-05-28T17:19:20Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRolloverLifecycleDateStep.java", "diffHunk": "@@ -76,6 +72,24 @@ public ClusterState performAction(Index index, ClusterState currentState) {\n             .put(newIndexMetadata)).build();\n     }\n \n+    private String getRolloverTarget(Index index, ClusterState currentState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY4MTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRolloverLifecycleDateStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyMTozMlrOGb_MFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo1NDowM1rOGcYE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDAyMg==", "bodyText": "Same comment here about null check for the getDataStream(), I also wonder if maybe we should make this a nice static helper like IndexAbstraction.streamNameOrNull(indexAbstraction)?", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432000022", "createdAt": "2020-05-28T17:21:32Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRolloverLifecycleDateStep.java", "diffHunk": "@@ -76,6 +72,24 @@ public ClusterState performAction(Index index, ClusterState currentState) {\n             .put(newIndexMetadata)).build();\n     }\n \n+    private String getRolloverTarget(Index index, ClusterState currentState) {\n+        IndexAbstraction indexAbstraction = currentState.metadata().getIndicesLookup().get(index.getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNzc2NA==", "bodyText": "The underlying dataStream is non-nullable though. The getName method that Dan recommended emphasis this so replaced it here as well. Happy to discuss if there are any situations where this could be null though (in which case I believe more null checks are needed in IndexAbstraction.DataStream)", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432407764", "createdAt": "2020-05-29T10:54:03Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRolloverLifecycleDateStep.java", "diffHunk": "@@ -76,6 +72,24 @@ public ClusterState performAction(Index index, ClusterState currentState) {\n             .put(newIndexMetadata)).build();\n     }\n \n+    private String getRolloverTarget(Index index, ClusterState currentState) {\n+        IndexAbstraction indexAbstraction = currentState.metadata().getIndicesLookup().get(index.getName());\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDAyMg=="}, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY5NzI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNTo0MFrOGb_V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNTo0MFrOGb_V8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjU0Nw==", "bodyText": "Super minor, but can we use IndexMetadata.SETTING_WAIT_FOR_ACTIVE_SHARDS instead of hardcoding here?", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432002547", "createdAt": "2020-05-28T17:25:40Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "diffHunk": "@@ -64,43 +67,50 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             return new Result(true, new Info(message));\n         }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n-                + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n-        }\n-\n-        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(rolloverAlias);\n-        assert indexAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n-\n-        IndexMetadata aliasWriteIndex = indexAbstraction.getWriteIndex();\n+        IndexAbstraction indexAbstraction = metadata.getIndicesLookup().get(index.getName());\n         final String rolledIndexName;\n         final String waitForActiveShardsSettingValue;\n-        if (aliasWriteIndex != null) {\n-            rolledIndexName = aliasWriteIndex.getIndex().getName();\n-            waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");\n-        } else {\n-            List<IndexMetadata> indices = indexAbstraction.getIndices();\n-            int maxIndexCounter = -1;\n-            IndexMetadata rolledIndexMeta = null;\n-            for (IndexMetadata indexMetadata : indices) {\n-                int indexNameCounter = parseIndexNameCounter(indexMetadata.getIndex().getName());\n-                if (maxIndexCounter < indexNameCounter) {\n-                    maxIndexCounter = indexNameCounter;\n-                    rolledIndexMeta = indexMetadata;\n-                }\n-            }\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            DataStream dataStream = indexAbstraction.getParentDataStream().getDataStream();\n+            IndexAbstraction dataStreamAbstraction = metadata.getIndicesLookup().get(dataStream.getName());\n+            assert dataStreamAbstraction != null : dataStream.getName() + \" datastream is not present in the metadata indices lookup\";\n+            IndexMetadata rolledIndexMeta = dataStreamAbstraction.getWriteIndex();\n             if (rolledIndexMeta == null) {\n-                String errorMessage = String.format(Locale.ROOT,\n-                    \"unable to find the index that was rolled over from [%s] as part of lifecycle action [%s]\", index.getName(),\n-                    getKey().getAction());\n-\n-                // Index must have been since deleted\n-                logger.debug(errorMessage);\n-                return new Result(false, new Info(errorMessage));\n+                return getErrorResultOnNullMetadata(index);\n             }\n             rolledIndexName = rolledIndexMeta.getIndex().getName();\n             waitForActiveShardsSettingValue = rolledIndexMeta.getSettings().get(\"index.write.wait_for_active_shards\");\n+        } else {\n+            String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n+            if (Strings.isNullOrEmpty(rolloverAlias)) {\n+                throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n+                    + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n+            }\n+\n+            IndexAbstraction aliasAbstraction = metadata.getIndicesLookup().get(rolloverAlias);\n+            assert aliasAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n+\n+            IndexMetadata aliasWriteIndex = aliasAbstraction.getWriteIndex();\n+            if (aliasWriteIndex != null) {\n+                rolledIndexName = aliasWriteIndex.getIndex().getName();\n+                waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY5ODU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNjowM1rOGb_WxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNjowM1rOGb_WxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjc1Nw==", "bodyText": "Same here about using IndexMetadata.SETTING_WAIT_FOR_ACTIVE_SHARDS", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432002757", "createdAt": "2020-05-28T17:26:03Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "diffHunk": "@@ -64,43 +67,50 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             return new Result(true, new Info(message));\n         }\n \n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n-                + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n-        }\n-\n-        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(rolloverAlias);\n-        assert indexAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n-\n-        IndexMetadata aliasWriteIndex = indexAbstraction.getWriteIndex();\n+        IndexAbstraction indexAbstraction = metadata.getIndicesLookup().get(index.getName());\n         final String rolledIndexName;\n         final String waitForActiveShardsSettingValue;\n-        if (aliasWriteIndex != null) {\n-            rolledIndexName = aliasWriteIndex.getIndex().getName();\n-            waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");\n-        } else {\n-            List<IndexMetadata> indices = indexAbstraction.getIndices();\n-            int maxIndexCounter = -1;\n-            IndexMetadata rolledIndexMeta = null;\n-            for (IndexMetadata indexMetadata : indices) {\n-                int indexNameCounter = parseIndexNameCounter(indexMetadata.getIndex().getName());\n-                if (maxIndexCounter < indexNameCounter) {\n-                    maxIndexCounter = indexNameCounter;\n-                    rolledIndexMeta = indexMetadata;\n-                }\n-            }\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            DataStream dataStream = indexAbstraction.getParentDataStream().getDataStream();\n+            IndexAbstraction dataStreamAbstraction = metadata.getIndicesLookup().get(dataStream.getName());\n+            assert dataStreamAbstraction != null : dataStream.getName() + \" datastream is not present in the metadata indices lookup\";\n+            IndexMetadata rolledIndexMeta = dataStreamAbstraction.getWriteIndex();\n             if (rolledIndexMeta == null) {\n-                String errorMessage = String.format(Locale.ROOT,\n-                    \"unable to find the index that was rolled over from [%s] as part of lifecycle action [%s]\", index.getName(),\n-                    getKey().getAction());\n-\n-                // Index must have been since deleted\n-                logger.debug(errorMessage);\n-                return new Result(false, new Info(errorMessage));\n+                return getErrorResultOnNullMetadata(index);\n             }\n             rolledIndexName = rolledIndexMeta.getIndex().getName();\n             waitForActiveShardsSettingValue = rolledIndexMeta.getSettings().get(\"index.write.wait_for_active_shards\");\n+        } else {\n+            String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(originalIndexMeta.getSettings());\n+            if (Strings.isNullOrEmpty(rolloverAlias)) {\n+                throw new IllegalStateException(\"setting [\" + RolloverAction.LIFECYCLE_ROLLOVER_ALIAS\n+                    + \"] is not set on index [\" + originalIndexMeta.getIndex().getName() + \"]\");\n+            }\n+\n+            IndexAbstraction aliasAbstraction = metadata.getIndicesLookup().get(rolloverAlias);\n+            assert aliasAbstraction.getType() == IndexAbstraction.Type.ALIAS : rolloverAlias + \" must be an alias but it is not\";\n+\n+            IndexMetadata aliasWriteIndex = aliasAbstraction.getWriteIndex();\n+            if (aliasWriteIndex != null) {\n+                rolledIndexName = aliasWriteIndex.getIndex().getName();\n+                waitForActiveShardsSettingValue = aliasWriteIndex.getSettings().get(\"index.write.wait_for_active_shards\");\n+            } else {\n+                List<IndexMetadata> indices = aliasAbstraction.getIndices();\n+                int maxIndexCounter = -1;\n+                IndexMetadata rolledIndexMeta = null;\n+                for (IndexMetadata indexMetadata : indices) {\n+                    int indexNameCounter = parseIndexNameCounter(indexMetadata.getIndex().getName());\n+                    if (maxIndexCounter < indexNameCounter) {\n+                        maxIndexCounter = indexNameCounter;\n+                        rolledIndexMeta = indexMetadata;\n+                    }\n+                }\n+                if (rolledIndexMeta == null) {\n+                    return getErrorResultOnNullMetadata(index);\n+                }\n+                rolledIndexName = rolledIndexMeta.getIndex().getName();\n+                waitForActiveShardsSettingValue = rolledIndexMeta.getSettings().get(\"index.write.wait_for_active_shards\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDcwMTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNjo1OFrOGb_Y7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNjo1OFrOGb_Y7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzMwOQ==", "bodyText": "This can be static I think", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432003309", "createdAt": "2020-05-28T17:26:58Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForActiveShardsStep.java", "diffHunk": "@@ -114,6 +124,16 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n         return new Result(enoughShardsActive, new ActiveShardsInfo(currentActiveShards, activeShardCount.toString(), enoughShardsActive));\n     }\n \n+    private Result getErrorResultOnNullMetadata(Index originalIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDcyNDY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozMzoyNFrOGb_nsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozMzoyNFrOGb_nsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNzA5MA==", "bodyText": "Same here about null check or a helper for retrieving the name :)", "url": "https://github.com/elastic/elasticsearch/pull/57295#discussion_r432007090", "createdAt": "2020-05-28T17:33:24Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStep.java", "diffHunk": "@@ -48,73 +50,82 @@ public boolean isRetryable() {\n     }\n \n     @Override\n-    public void evaluateCondition(IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout) {\n-        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetadata.getSettings());\n-\n-        if (Strings.isNullOrEmpty(rolloverAlias)) {\n-            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,\n-                \"setting [%s] for index [%s] is empty or not defined\", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS,\n-                indexMetadata.getIndex().getName())));\n-            return;\n-        }\n+    public void evaluateCondition(Metadata metadata, IndexMetadata indexMetadata, Listener listener, TimeValue masterTimeout) {\n+        IndexAbstraction indexAbstraction = metadata.getIndicesLookup().get(indexMetadata.getIndex().getName());\n+        assert indexAbstraction != null : \"invalid cluster metadata. index [\" + indexMetadata.getIndex().getName() + \"] was not found\";\n+        final String rolloverTarget;\n+        if (indexAbstraction.getParentDataStream() != null) {\n+            rolloverTarget = indexAbstraction.getParentDataStream().getDataStream().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeedfd892d18e73b50d92e2ad389561ba501514"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3853, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}