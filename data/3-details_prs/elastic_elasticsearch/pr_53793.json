{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTk4NTEz", "number": 53793, "title": "Try to save memory on aggregations", "bodyText": "This delays deserializing the aggregation response try until right\nbefore we merge the objects. It isn't super clear how much space this\nsaves, but:\n\nIt turns some object from fairly long lives to very short lived\nwhich is almost certainly a good thing from a JVM perspective.\nIt gives us a convenient place to check how much space the\naggregation tree uses.\nIt probably does save a fair bit of memory because of the overhead\nthe JVM has for many small objects, which the aggregation tree is\nmostly made up of.", "createdAt": "2020-03-19T13:18:56Z", "url": "https://github.com/elastic/elasticsearch/pull/53793", "merged": true, "mergeCommit": {"oid": "1ca52fc2925defab1f0ce40489976e4e1812e75a"}, "closed": true, "closedAt": "2020-03-23T15:50:30Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPLBWzgH2gAyMzkwOTk4NTEzOjM5ZDYwNGNmZjYzNGEyZjkyMjA2ZjBjNGE5YmUyNjRhNGE3M2U3YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQeYi9AH2gAyMzkwOTk4NTEzOmM2MTYyZmY0NDZhYmUxNTg0NDEzMGQyM2U3Zjc0ZjhlM2YyNDEwMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39d604cff634a2f92206f0c4a9be264a4a73e7aa", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/39d604cff634a2f92206f0c4a9be264a4a73e7aa", "committedDate": "2020-03-19T12:25:23Z", "message": "Try to save memory on aggregations\n\nThis delays deserializing the aggregation response try until *right*\nbefore we merge the objects."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzUxODI0", "url": "https://github.com/elastic/elasticsearch/pull/53793#pullrequestreview-377751824", "createdAt": "2020-03-19T14:06:49Z", "commit": {"oid": "39d604cff634a2f92206f0c4a9be264a4a73e7aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNjo0OVrOF4v_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNjo0OVrOF4v_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDk0MQ==", "bodyText": "We're only using this for InternalAggregations, but it is a heck of a lot simpler to test if it is generic.", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r395050941", "createdAt": "2020-03-19T14:06:49Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.io.stream;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.bytes.BytesReference;\n+\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A holder for {@link Writeable}s that can delays reading the underlying\n+ * {@linkplain Writeable} when it is read from a remote node.\n+ */\n+public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d604cff634a2f92206f0c4a9be264a4a73e7aa"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cddcab12893bf65530a33f4e59c89cc89bdbfdb", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/8cddcab12893bf65530a33f4e59c89cc89bdbfdb", "committedDate": "2020-03-19T14:27:48Z", "message": "Fix request cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/04dba53ec8c645086e8d2de1cf0f139764931197", "committedDate": "2020-03-19T14:28:44Z", "message": "Merge branch 'master' into agg_await_deserialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDc3NDYx", "url": "https://github.com/elastic/elasticsearch/pull/53793#pullrequestreview-378077461", "createdAt": "2020-03-19T20:41:03Z", "commit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0MTowM1rOF4_o2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0NzozOVrOF4_1eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzIyNQ==", "bodyText": "should we nullify the rest of the array to make the reduced aggs eligible for gc ?", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r395307225", "createdAt": "2020-03-19T20:41:03Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java", "diffHunk": "@@ -665,10 +671,11 @@ private synchronized void consumeInternal(QuerySearchResult querySearchResult) {\n             if (querySearchResult.isNull() == false) {\n                 if (index == bufferSize) {\n                     if (hasAggs) {\n-                        ReduceContext reduceContext = aggReduceContextBuilder.forPartialReduction();\n-                        InternalAggregations reducedAggs = InternalAggregations.topLevelReduce(Arrays.asList(aggsBuffer), reduceContext);\n+                        InternalAggregations reducedAggs = InternalAggregations.topLevelReduce(\n+                                Arrays.stream(aggsBuffer).map(Supplier::get).collect(toList()),\n+                                aggReduceContextBuilder.forPartialReduction());\n                         Arrays.fill(aggsBuffer, null);\n-                        aggsBuffer[0] = reducedAggs;\n+                        aggsBuffer[0] = () -> reducedAggs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzk5NA==", "bodyText": "Should we nullify the bytes ref before returning the deserialized aggs ? We could also protect against multiple calls by keeping the deserialized aggs internally on the first call ?", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r395307994", "createdAt": "2020-03-19T20:42:40Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.io.stream;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.bytes.BytesReference;\n+\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A holder for {@link Writeable}s that can delays reading the underlying\n+ * {@linkplain Writeable} when it is read from a remote node.\n+ */\n+public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+    /**\n+     * Build a {@linkplain DelayableWriteable} that wraps an existing object\n+     * but is serialized so that deserializing it can be delayed.\n+     */\n+    public static <T extends Writeable> DelayableWriteable<T> referencing(T reference) {\n+        return new Referencing<>(reference);\n+    }\n+    /**\n+     * Build a {@linkplain DelayableWriteable} that copies a buffer from\n+     * the provided {@linkplain StreamInput} and deserializes the buffer\n+     * when {@link Supplier#get()} is called.\n+     */\n+    public static <T extends Writeable> DelayableWriteable<T> delayed(Writeable.Reader<T> reader, StreamInput in) throws IOException {\n+        return new Delayed<>(reader, in);\n+    }\n+\n+    private DelayableWriteable() {}\n+\n+    public abstract boolean isDelayed();\n+\n+    private static class Referencing<T extends Writeable> extends DelayableWriteable<T> {\n+        private T reference;\n+\n+        Referencing(T reference) {\n+            this.reference = reference;\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            try (BytesStreamOutput buffer = new BytesStreamOutput()) {\n+                reference.writeTo(buffer);\n+                out.writeBytesReference(buffer.bytes());\n+            }\n+        }\n+\n+        @Override\n+        public T get() {\n+            return reference;\n+        }\n+\n+        @Override\n+        public boolean isDelayed() {\n+            return false;\n+        }\n+    }\n+\n+    private static class Delayed<T extends Writeable> extends DelayableWriteable<T> {\n+        private final Writeable.Reader<T> reader;\n+        private final Version remoteVersion;\n+        private final BytesReference serialized;\n+        private final NamedWriteableRegistry registry;\n+\n+        Delayed(Writeable.Reader<T> reader, StreamInput in) throws IOException {\n+            this.reader = reader;\n+            remoteVersion = in.getVersion();\n+            serialized = in.readBytesReference();\n+            registry = in.namedWriteableRegistry();\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            if (out.getVersion() == remoteVersion) {\n+                /*\n+                 * If the version *does* line up we can just copy the bytes\n+                 * which is good because this is how shard request caching\n+                 * works.\n+                 */\n+                out.writeBytesReference(serialized);\n+            } else {\n+                /*\n+                 * If the version doesn't line up then we have to deserialize\n+                 * into the Writeable and re-serialize it against the new\n+                 * output stream so it can apply any backwards compatibility\n+                 * differences in the wire protocol. This ain't efficient but\n+                 * it should be quite rare.\n+                 */\n+                referencing(get()).writeTo(out);\n+            }\n+        }\n+\n+        @Override\n+        public T get() {\n+            try {\n+                try (StreamInput in = registry == null ?\n+                        serialized.streamInput() : new NamedWriteableAwareStreamInput(serialized.streamInput(), registry)) {\n+                    in.setVersion(remoteVersion);\n+                    return reader.read(in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTQwOQ==", "bodyText": "we can maybe get the aggs once if the remote node is in a version before v8 (instead of calling get here and below to get the pipeline aggs) ?", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r395309409", "createdAt": "2020-03-19T20:45:30Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/query/QuerySearchResult.java", "diffHunk": "@@ -366,7 +371,11 @@ public void writeToNoId(StreamOutput out) throws IOException {\n             out.writeBoolean(false);\n         } else {\n             out.writeBoolean(true);\n-            aggregations.writeTo(out);\n+            if (out.getVersion().before(Version.V_8_0_0)) {\n+                aggregations.get().writeTo(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxMDQ1OA==", "bodyText": "Can you add a comment here to explain why we use a delayable writable ?", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r395310458", "createdAt": "2020-03-19T20:47:39Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/query/QuerySearchResult.java", "diffHunk": "@@ -54,7 +55,7 @@\n     private TotalHits totalHits;\n     private float maxScore = Float.NaN;\n     private DocValueFormat[] sortValueFormats;\n-    private InternalAggregations aggregations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6921c8ca514d26fb94b97f1e02bd69c4264f30c1", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/6921c8ca514d26fb94b97f1e02bd69c4264f30c1", "committedDate": "2020-03-19T22:18:44Z", "message": "Explain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76b077db6cf90e12147eefd38110ad78616aa59a", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/76b077db6cf90e12147eefd38110ad78616aa59a", "committedDate": "2020-03-19T22:54:43Z", "message": "Rework read"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb37343d15675e1941a240befc21a85d356694ea", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/eb37343d15675e1941a240befc21a85d356694ea", "committedDate": "2020-03-20T20:02:40Z", "message": "clear asap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80e31ad697584c9126a0e55b061fb9a5d5b91b9f", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/80e31ad697584c9126a0e55b061fb9a5d5b91b9f", "committedDate": "2020-03-20T20:10:10Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDIwNDE3", "url": "https://github.com/elastic/elasticsearch/pull/53793#pullrequestreview-379420417", "createdAt": "2020-03-23T13:20:56Z", "commit": {"oid": "80e31ad697584c9126a0e55b061fb9a5d5b91b9f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyMDo1NlrOF6FC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyMDo1NlrOF6FC9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NDQwNQ==", "bodyText": "@nik9000 ? should we avoid the double deserialization if we need the pipeline aggs below ?", "url": "https://github.com/elastic/elasticsearch/pull/53793#discussion_r396444405", "createdAt": "2020-03-23T13:20:56Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/query/QuerySearchResult.java", "diffHunk": "@@ -366,7 +371,11 @@ public void writeToNoId(StreamOutput out) throws IOException {\n             out.writeBoolean(false);\n         } else {\n             out.writeBoolean(true);\n-            aggregations.writeTo(out);\n+            if (out.getVersion().before(Version.V_8_0_0)) {\n+                aggregations.get().writeTo(out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTQwOQ=="}, "originalCommit": {"oid": "04dba53ec8c645086e8d2de1cf0f139764931197"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6162ff446abe15844130d23e7f74f8e3f241018", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c6162ff446abe15844130d23e7f74f8e3f241018", "committedDate": "2020-03-23T13:32:50Z", "message": "Twist"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1847, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}