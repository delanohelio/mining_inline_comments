{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjcwMDUy", "number": 60074, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjowMzo0N1rOERhB5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1NTozMFrOERnNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODAyNDA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjowMzo0N1rOG2RX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0Njo0NFrOG2S-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MDkzMA==", "bodyText": "getProcessors() ? I assume the name is off, but is this even needed ?", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459560930", "createdAt": "2020-07-23T16:03:47Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationInfo.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.node.ReportingService;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+public class AggregationInfo implements ReportingService.Info {\n+\n+    private final Map<String, Set<String>> aggs;\n+\n+    public AggregationInfo(Map<String, Set<String>> aggs) {\n+        this.aggs = aggs;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public AggregationInfo(StreamInput in) throws IOException {\n+        aggs = new TreeMap<>();\n+        final int size = in.readVInt();\n+        for (int i = 0; i < size; i++) {\n+            String key = in.readString();\n+            final int keys = in.readVInt();\n+            final Set<String> types = new TreeSet<>();\n+            for (int j = 0; j < keys; j ++) {\n+                types.add(in.readString());\n+            }\n+            aggs.put(key, types);\n+        }\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(aggs.size());\n+        for (Map.Entry<String, Set<String>> e : aggs.entrySet()) {\n+            out.writeString(e.getKey());\n+            out.writeVInt(e.getValue().size());\n+            for (String type : e.getValue()) {\n+                out.writeString(type);\n+            }\n+        }\n+    }\n+\n+    public Map<String, Set<String>> getProcessors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b93b30b38cfb6939be936baace8f0ac1d5cbaa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzI1OA==", "bodyText": "Copy and paste error. Will fix.", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459587258", "createdAt": "2020-07-23T16:46:44Z", "author": {"login": "imotov"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationInfo.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.node.ReportingService;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+public class AggregationInfo implements ReportingService.Info {\n+\n+    private final Map<String, Set<String>> aggs;\n+\n+    public AggregationInfo(Map<String, Set<String>> aggs) {\n+        this.aggs = aggs;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public AggregationInfo(StreamInput in) throws IOException {\n+        aggs = new TreeMap<>();\n+        final int size = in.readVInt();\n+        for (int i = 0; i < size; i++) {\n+            String key = in.readString();\n+            final int keys = in.readVInt();\n+            final Set<String> types = new TreeSet<>();\n+            for (int j = 0; j < keys; j ++) {\n+                types.add(in.readString());\n+            }\n+            aggs.put(key, types);\n+        }\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(aggs.size());\n+        for (Map.Entry<String, Set<String>> e : aggs.entrySet()) {\n+            out.writeString(e.getKey());\n+            out.writeVInt(e.getValue().size());\n+            for (String type : e.getValue()) {\n+                out.writeString(type);\n+            }\n+        }\n+    }\n+\n+    public Map<String, Set<String>> getProcessors() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MDkzMA=="}, "originalCommit": {"oid": "65b93b30b38cfb6939be936baace8f0ac1d5cbaa"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODA2MzcxOnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/nodes.info/40_aggs.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxNDowMlrOG2Rwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1NzozOFrOG2TYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NzI5MA==", "bodyText": "this comment seems abit out of place, and probably shouldn't reference a private repo.\nalso, I guess I don't understand the output.  is it aggregrations.??.types = ?? . Is there anything that prevents checking for known types", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459567290", "createdAt": "2020-07-23T16:14:02Z", "author": {"login": "jakelandis"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/nodes.info/40_aggs.yml", "diffHunk": "@@ -0,0 +1,20 @@\n+---\n+\"node_info test aggregations\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"aggregation info only supported in 8.0.0+\"\n+      features: [arbitrary_key]\n+\n+\n+  - do:\n+      nodes.info: {}\n+  - set:\n+      nodes._arbitrary_key_: node_id\n+\n+  - do:\n+      nodes.info:\n+        metric: [ aggregations ]\n+\n+  # if this test failed because a new aggregation was added, please open an issues in the elastic/telemetry repository\n+  # so they can update the mapping accordingly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b93b30b38cfb6939be936baace8f0ac1d5cbaa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzAyMA==", "bodyText": "I was sure I removed it. This comment is out of place. Good catch.", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459587020", "createdAt": "2020-07-23T16:46:20Z", "author": {"login": "imotov"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/nodes.info/40_aggs.yml", "diffHunk": "@@ -0,0 +1,20 @@\n+---\n+\"node_info test aggregations\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"aggregation info only supported in 8.0.0+\"\n+      features: [arbitrary_key]\n+\n+\n+  - do:\n+      nodes.info: {}\n+  - set:\n+      nodes._arbitrary_key_: node_id\n+\n+  - do:\n+      nodes.info:\n+        metric: [ aggregations ]\n+\n+  # if this test failed because a new aggregation was added, please open an issues in the elastic/telemetry repository\n+  # so they can update the mapping accordingly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NzI5MA=="}, "originalCommit": {"oid": "65b93b30b38cfb6939be936baace8f0ac1d5cbaa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzcyOQ==", "bodyText": "The output looks like this:\n      \"aggregations\" : {\n        \"adjacency_matrix\" : {\n          \"types\" : [\n            \"other\"\n          ]\n        },\n        \"auto_date_histogram\" : {\n          \"types\" : [\n            \"boolean\",\n            \"date\",\n            \"numeric\"\n          ]\n        },\n        \"avg\" : {\n          \"types\" : [\n            \"boolean\",\n            \"date\",\n            \"histogram\",\n            \"numeric\"\n          ]\n        },\n        \"boxplot\" : {\n          \"types\" : [\n            \"histogram\",\n            \"numeric\"\n          ]\n        },\n        \"cardinality\" : {\n          \"types\" : [\n            \"boolean\",\n            \"bytes\",\n            \"date\",\n            \"geopoint\",\n            \"geoshape\",\n            \"ip\",\n            \"numeric\",\n            \"range\"\n          ]\n        },\n        ....\n\nand both types and aggs change depending on license that this is ran under.", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459593729", "createdAt": "2020-07-23T16:57:38Z", "author": {"login": "imotov"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/nodes.info/40_aggs.yml", "diffHunk": "@@ -0,0 +1,20 @@\n+---\n+\"node_info test aggregations\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"aggregation info only supported in 8.0.0+\"\n+      features: [arbitrary_key]\n+\n+\n+  - do:\n+      nodes.info: {}\n+  - set:\n+      nodes._arbitrary_key_: node_id\n+\n+  - do:\n+      nodes.info:\n+        metric: [ aggregations ]\n+\n+  # if this test failed because a new aggregation was added, please open an issues in the elastic/telemetry repository\n+  # so they can update the mapping accordingly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NzI5MA=="}, "originalCommit": {"oid": "65b93b30b38cfb6939be936baace8f0ac1d5cbaa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTAzNjg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1NTozMFrOG2bPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1NTozMFrOG2bPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyMjY3NA==", "bodyText": "We're leaking a mutable reference here.  It doesn't look like we mutate it anywhere, might be worth wrapping it to be immutable, if the object creation cost for the wrapper isn't too much.", "url": "https://github.com/elastic/elasticsearch/pull/60074#discussion_r459722674", "createdAt": "2020-07-23T20:55:30Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationInfo.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.node.ReportingService;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+public class AggregationInfo implements ReportingService.Info {\n+\n+    private final Map<String, Set<String>> aggs;\n+\n+    public AggregationInfo(Map<String, Set<String>> aggs) {\n+        this.aggs = aggs;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public AggregationInfo(StreamInput in) throws IOException {\n+        aggs = new TreeMap<>();\n+        final int size = in.readVInt();\n+        for (int i = 0; i < size; i++) {\n+            String key = in.readString();\n+            final int keys = in.readVInt();\n+            final Set<String> types = new TreeSet<>();\n+            for (int j = 0; j < keys; j ++) {\n+                types.add(in.readString());\n+            }\n+            aggs.put(key, types);\n+        }\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(aggs.size());\n+        for (Map.Entry<String, Set<String>> e : aggs.entrySet()) {\n+            out.writeString(e.getKey());\n+            out.writeVInt(e.getValue().size());\n+            for (String type : e.getValue()) {\n+                out.writeString(type);\n+            }\n+        }\n+    }\n+\n+    public Map<String, Set<String>> getAggregations() {\n+        return aggs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e371445c9f8f381257d5aab16dc0d3fb693ef192"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2119, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}