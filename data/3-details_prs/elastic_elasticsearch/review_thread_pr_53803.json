{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDQ0MzE2", "number": 53803, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0MjozNFrODpofrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozODoyM1rODqbsWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTgxNjc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0MjozNFrOF47uxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNTo1NlrOF6QF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA==", "bodyText": "I am not 100% convinced this should be abs.\nWe don't write the feature importance value on the native side by looking at the norm of the vector.\nDo we want to make this the norm too? Or do we thing abs is good enough?\n@tveasey @valeriy42", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r395243204", "createdAt": "2020-03-19T18:42:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NjY2OA==", "bodyText": "Can you please provide more context. What are you calculating here?", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r395596668", "createdAt": "2020-03-20T12:13:14Z", "author": {"login": "valeriy42"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwOTI3Mw==", "bodyText": "@valeriy42 @tveasey this is calculating the \"overall importance\" of all the classes combined for a given feature. This is so we can measure \"most important feature\" independent of the classes.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r395609273", "createdAt": "2020-03-20T12:40:08Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzIwNQ==", "bodyText": "norm would make it an L2 norm, abs makes it an L1 norm. Either way is suitable. I think, abs is better, since norm over-treats larger importances and ignores smaller once.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r395867205", "createdAt": "2020-03-20T20:10:57Z", "author": {"login": "valeriy42"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTM4MQ==", "bodyText": "+1 abs", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396625381", "createdAt": "2020-03-23T17:25:56Z", "author": {"login": "tveasey"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzk5MTg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/SingleValueInferenceResults.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1Mjo1MVrOF6JEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxOTo0MVrOF6P03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMDM1MQ==", "bodyText": "Is the abs necessary when the score is a norm? If the score can be -ve why is it wrong to use the -ve value?", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396510351", "createdAt": "2020-03-23T14:52:51Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/SingleValueInferenceResults.java", "diffHunk": "@@ -8,45 +8,46 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n-import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n \n import java.io.IOException;\n import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n public abstract class SingleValueInferenceResults implements InferenceResults {\n \n     private final double value;\n-    private final Map<String, Double> featureImportance;\n+    private final List<FeatureImportance> featureImportance;\n \n-    static Map<String, Double> takeTopFeatureImportances(Map<String, Double> unsortedFeatureImportances, int numTopFeatures) {\n-        return unsortedFeatureImportances.entrySet()\n-            .stream()\n-            .sorted((l, r)-> Double.compare(Math.abs(r.getValue()), Math.abs(l.getValue())))\n+    static List<FeatureImportance> takeTopFeatureImportances(List<FeatureImportance> unsortedFeatureImportances, int numTopFeatures) {\n+        if (unsortedFeatureImportances == null || unsortedFeatureImportances.isEmpty()) {\n+            return unsortedFeatureImportances;\n+        }\n+        return unsortedFeatureImportances.stream()\n+            .sorted((l, r)-> Double.compare(Math.abs(r.getImportance()), Math.abs(l.getImportance())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMTAyMg==", "bodyText": "@davidkyle\nScore is not absolutely the norm. Additionally, we want to have the MOST influential values, regardless of direction. We could have feature importances like this:\n{\nA: -1.2,\nB: -0.2,\nC: 0.5\n}\n\nIf we want the top two influential features, we want A and C.\nThe getImportance is only the norm when it comes to multi-class. This is not the case for (logistic) regression.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396621022", "createdAt": "2020-03-23T17:19:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/SingleValueInferenceResults.java", "diffHunk": "@@ -8,45 +8,46 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n-import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n \n import java.io.IOException;\n import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n public abstract class SingleValueInferenceResults implements InferenceResults {\n \n     private final double value;\n-    private final Map<String, Double> featureImportance;\n+    private final List<FeatureImportance> featureImportance;\n \n-    static Map<String, Double> takeTopFeatureImportances(Map<String, Double> unsortedFeatureImportances, int numTopFeatures) {\n-        return unsortedFeatureImportances.entrySet()\n-            .stream()\n-            .sorted((l, r)-> Double.compare(Math.abs(r.getValue()), Math.abs(l.getValue())))\n+    static List<FeatureImportance> takeTopFeatureImportances(List<FeatureImportance> unsortedFeatureImportances, int numTopFeatures) {\n+        if (unsortedFeatureImportances == null || unsortedFeatureImportances.isEmpty()) {\n+            return unsortedFeatureImportances;\n+        }\n+        return unsortedFeatureImportances.stream()\n+            .sorted((l, r)-> Double.compare(Math.abs(r.getImportance()), Math.abs(l.getImportance())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMDM1MQ=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODAxNDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1NzozMlrOF6JTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzozODoyNlrOF6Qnfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDEzOQ==", "bodyText": "// If the classificationLabels exist, the X better\nMissing word?", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396514139", "createdAt": "2020-03-23T14:57:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -100,18 +102,46 @@ public static Double toDouble(Object value) {\n         return null;\n     }\n \n-    public static Map<String, Double> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n-                                                               Map<String, Double> featureImportances) {\n+    public static Map<String, double[]> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n+                                                                 Map<String, double[]> featureImportances) {\n         if (processedFeatureToOriginalFeatureMap == null || processedFeatureToOriginalFeatureMap.isEmpty()) {\n             return featureImportances;\n         }\n \n-        Map<String, Double> originalFeatureImportance = new HashMap<>();\n+        Map<String, double[]> originalFeatureImportance = new HashMap<>();\n         featureImportances.forEach((feature, importance) -> {\n             String featureName = processedFeatureToOriginalFeatureMap.getOrDefault(feature, feature);\n-            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : v1 + importance);\n+            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : sumDoubleArrays(importance, v1));\n         });\n-\n         return originalFeatureImportance;\n     }\n+\n+    public static List<FeatureImportance> transformFeatureImportance(Map<String, double[]> featureImportance,\n+                                                                     @Nullable List<String> classificationLabels) {\n+        List<FeatureImportance> importances = new ArrayList<>(featureImportance.size());\n+        featureImportance.forEach((k, v) -> {\n+            // This indicates regression, or logistic regression\n+            // If the length > 1, we assume multi-class classification.\n+            if (v.length == 1) {\n+                importances.add(FeatureImportance.forRegression(k, v[0]));\n+            } else {\n+                Map<String, Double> classImportance = new LinkedHashMap<>(v.length, 1.0f);\n+                // If the classificationLabels exist, the better be the same length as the leaf values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMzk4Mw==", "bodyText": "Def, this comment makes no sense :D", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396633983", "createdAt": "2020-03-23T17:38:26Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -100,18 +102,46 @@ public static Double toDouble(Object value) {\n         return null;\n     }\n \n-    public static Map<String, Double> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n-                                                               Map<String, Double> featureImportances) {\n+    public static Map<String, double[]> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n+                                                                 Map<String, double[]> featureImportances) {\n         if (processedFeatureToOriginalFeatureMap == null || processedFeatureToOriginalFeatureMap.isEmpty()) {\n             return featureImportances;\n         }\n \n-        Map<String, Double> originalFeatureImportance = new HashMap<>();\n+        Map<String, double[]> originalFeatureImportance = new HashMap<>();\n         featureImportances.forEach((feature, importance) -> {\n             String featureName = processedFeatureToOriginalFeatureMap.getOrDefault(feature, feature);\n-            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : v1 + importance);\n+            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : sumDoubleArrays(importance, v1));\n         });\n-\n         return originalFeatureImportance;\n     }\n+\n+    public static List<FeatureImportance> transformFeatureImportance(Map<String, double[]> featureImportance,\n+                                                                     @Nullable List<String> classificationLabels) {\n+        List<FeatureImportance> importances = new ArrayList<>(featureImportance.size());\n+        featureImportance.forEach((k, v) -> {\n+            // This indicates regression, or logistic regression\n+            // If the length > 1, we assume multi-class classification.\n+            if (v.length == 1) {\n+                importances.add(FeatureImportance.forRegression(k, v[0]));\n+            } else {\n+                Map<String, Double> classImportance = new LinkedHashMap<>(v.length, 1.0f);\n+                // If the classificationLabels exist, the better be the same length as the leaf values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDEzOQ=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODIwNTA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozODoyM1rOF6LN1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo1Mjo0NlrOF6VvUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ5NQ==", "bodyText": "I'm not sure why this has to be a linked hash map? I'm assuming to preserve insertion order but why? If this was ever serialisable to xcontent the ordering could not be guaranteed", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396545495", "createdAt": "2020-03-23T15:38:23Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);\n+    }\n+\n+    private FeatureImportance(String featureName, double importance, Map<String, Double> classImportance) {\n+        this.featureName = Objects.requireNonNull(featureName);\n+        this.importance = importance;\n+        this.classImportance = classImportance == null ? null : Collections.unmodifiableMap(classImportance);\n+    }\n+\n+    public FeatureImportance(StreamInput in) throws IOException {\n+        this.featureName = in.readString();\n+        this.importance = in.readDouble();\n+        if (in.readBoolean()) {\n+            this.classImportance = in.readLinkedHashMap(StreamInput::readString, StreamInput::readDouble);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMTc1OA==", "bodyText": "ToXContent does not factor here. We are concerned about the order when the values are written to the ingest document.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396621758", "createdAt": "2020-03-23T17:20:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);\n+    }\n+\n+    private FeatureImportance(String featureName, double importance, Map<String, Double> classImportance) {\n+        this.featureName = Objects.requireNonNull(featureName);\n+        this.importance = importance;\n+        this.classImportance = classImportance == null ? null : Collections.unmodifiableMap(classImportance);\n+    }\n+\n+    public FeatureImportance(StreamInput in) throws IOException {\n+        this.featureName = in.readString();\n+        this.importance = in.readDouble();\n+        if (in.readBoolean()) {\n+            this.classImportance = in.readLinkedHashMap(StreamInput::readString, StreamInput::readDouble);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ5NQ=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzkzNg==", "bodyText": "FWIW, this sort of thing is already done with Object maps. Just cannot do it with specific stream inputs.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396683936", "createdAt": "2020-03-23T18:55:04Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);\n+    }\n+\n+    private FeatureImportance(String featureName, double importance, Map<String, Double> classImportance) {\n+        this.featureName = Objects.requireNonNull(featureName);\n+        this.importance = importance;\n+        this.classImportance = classImportance == null ? null : Collections.unmodifiableMap(classImportance);\n+    }\n+\n+    public FeatureImportance(StreamInput in) throws IOException {\n+        this.featureName = in.readString();\n+        this.importance = in.readDouble();\n+        if (in.readBoolean()) {\n+            this.classImportance = in.readLinkedHashMap(StreamInput::readString, StreamInput::readDouble);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ5NQ=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxNzkwNg==", "bodyText": "Thinking about it more and looking more into the ingest doc code. I agree with you. This seems superfluous for now. If ordering becomes a concern for usability, we can add it in the future. The reading from the wire for both LinkedHashMap and HashMap would be exactly the same, so BWC is not a concern.", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396717906", "createdAt": "2020-03-23T19:52:46Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);\n+    }\n+\n+    private FeatureImportance(String featureName, double importance, Map<String, Double> classImportance) {\n+        this.featureName = Objects.requireNonNull(featureName);\n+        this.importance = importance;\n+        this.classImportance = classImportance == null ? null : Collections.unmodifiableMap(classImportance);\n+    }\n+\n+    public FeatureImportance(StreamInput in) throws IOException {\n+        this.featureName = in.readString();\n+        this.importance = in.readDouble();\n+        if (in.readBoolean()) {\n+            this.classImportance = in.readLinkedHashMap(StreamInput::readString, StreamInput::readDouble);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ5NQ=="}, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4251, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}