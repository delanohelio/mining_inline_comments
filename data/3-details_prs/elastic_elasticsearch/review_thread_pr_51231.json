{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTI1MTE0", "number": 51231, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDo1N1rODZ4pyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDoyOVrODbD8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY5MTk0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDo1N1rOFghkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoxMzoxNlrOFgiBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODgwMw==", "bodyText": "This should be Request body instead", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369648803", "createdAt": "2020-01-22T16:00:57Z", "author": {"login": "dolaru"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,447 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-query-params]]\n+==== {api-query-parms-title}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6591513a10499d95e1ebf0f9e9c8de1822e529d1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NjE2Ng==", "bodyText": "Thanks! Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369656166", "createdAt": "2020-01-22T16:13:16Z", "author": {"login": "szabosteve"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,447 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-query-params]]\n+==== {api-query-parms-title}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODgwMw=="}, "originalCommit": {"oid": "6591513a10499d95e1ebf0f9e9c8de1822e529d1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI3ODcyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMDoxNFrOFgnZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMDoxNFrOFgnZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDI1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <titleabbrev>Crerate {infer} trained model</titleabbrev>\n          \n          \n            \n            <titleabbrev>Create {infer} trained model</titleabbrev>", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744250", "createdAt": "2020-01-22T19:00:14Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4MDk1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMTowMFrOFgnbCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMTowMFrOFgnbCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * source index: `read`, `view_index_metadata`\n          \n      \n    \n    \n  \n\nThere are no additional special roles. Either they must be a cluster admin, or a machine_learning_admin", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744648", "createdAt": "2020-01-22T19:01:00Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4MTM5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMTowN1rOFgnbSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMTowN1rOFgnbSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * destination index: `read`, `create_index`, `manage` and `index`", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744714", "createdAt": "2020-01-22T19:01:07Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4MTgzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMToxNVrOFgnbkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMToxNVrOFgnbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * cluster: `monitor_ml`", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744787", "createdAt": "2020-01-22T19:01:15Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4NDk0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMjoyMlrOFgndlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMjoyMlrOFgndlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTMwMg==", "bodyText": "we should specify input.field_names somewhere.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745302", "createdAt": "2020-01-22T19:02:22Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4Nzk4OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMzoyNFrOFgnfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMzoyNFrOFgnfiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTgwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `target_mean_encoding`.`target.map`:::\n          \n          \n            \n            `target_mean_encoding`.`target_map`:::", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745800", "createdAt": "2020-01-22T19:03:24Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4ODgwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMzozN1rOFgngBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMzozN1rOFgngBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `target_mean_encoding`.`default.value`:::\n          \n          \n            \n            `target_mean_encoding`.`default_value`:::", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745925", "createdAt": "2020-01-22T19:03:37Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default.value`:::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTMwNDQyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowODozM1rOFgnpdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowODozM1rOFgnpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0ODM0MQ==", "bodyText": "This seems out of place.\nThe rest of the examples are JSON object examples. I think we should supply examples for these objects as well.\nI am not sure if the additional text below is needed. Especially given the explanation above.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369748341", "createdAt": "2020-01-22T19:08:33Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default.value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, boolean) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the \n+weights into account) is returned.\n+\n+`weighted_mode`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+\n+[[ml-put-inference-example]]\n+==== {api-examples-title}\n+\n+[[ml-put-inference-preprocessor-example]]\n+===== Preprocessor examples\n+\n+The example above shows a `frequency_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"frequency_encoding\":{\n+      \"field\":\"FlightDelayType\",\n+      \"feature_name\":\"FlightDelayType_frequency\",\n+      \"frequency_map\":{\n+         \"Carrier Delay\":0.6007414737092798,\n+         \"NAS Delay\":0.6007414737092798,\n+         \"Weather Delay\":0.024573576178086153,\n+         \"Security Delay\":0.02476631010889467,\n+         \"No Delay\":0.6007414737092798,\n+         \"Late Aircraft Delay\":0.6007414737092798\n+      }\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+The next example shows a `one_hot_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{ \n+   \"one_hot_encoding\":{ \n+      \"field\":\"FlightDelayType\",\n+      \"hot_map\":{ \n+         \"Carrier Delay\":\"FlightDelayType_Carrier Delay\",\n+         \"NAS Delay\":\"FlightDelayType_NAS Delay\",\n+         \"No Delay\":\"FlightDelayType_No Delay\",\n+         \"Late Aircraft Delay\":\"FlightDelayType_Late Aircraft Delay\"\n+      }\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+This example shows a `target_mean_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"target_mean_encoding\":{\n+      \"field\":\"FlightDelayType\",\n+      \"feature_name\":\"FlightDelayType_targetmean\",\n+      \"target_map\":{\n+         \"Carrier Delay\":39.97465788139886,\n+         \"NAS Delay\":39.97465788139886,\n+         \"Security Delay\":203.171206225681,\n+         \"Weather Delay\":187.64705882352948,\n+         \"No Delay\":39.97465788139886,\n+         \"Late Aircraft Delay\":39.97465788139886\n+      },\n+      \"default_value\":158.17995752420433\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+[[ml-put-inference-model-example]]\n+===== Model examples\n+\n+The first example shows a `trained_model` object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"tree\":{\n+      \"feature_names\":[\n+         \"DistanceKilometers\",\n+         \"FlightTimeMin\",\n+         \"FlightDelayType_NAS Delay\",\n+         \"Origin_targetmean\",\n+         \"DestRegion_targetmean\",\n+         \"DestCityName_targetmean\",\n+         \"OriginAirportID_targetmean\",\n+         \"OriginCityName_frequency\",\n+         \"DistanceMiles\",\n+         \"FlightDelayType_Late Aircraft Delay\"\n+      ],\n+      \"tree_structure\":[\n+         {\n+            \"decision_type\":\"lt\",\n+            \"threshold\":9069.33437193022,\n+            \"split_feature\":0,\n+            \"split_gain\":4112.094574306927,\n+            \"node_index\":0,\n+            \"default_left\":true,\n+            \"left_child\":1,\n+            \"right_child\":2\n+         },\n+         ...         \n+         {\n+            \"node_index\":9,\n+            \"leaf_value\":-27.68987349695448\n+         },\n+         ...\n+      ],\n+      \"target_type\":\"regression\"\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+The following example shows an `ensemble` model object:\n+\n+[source,js]\n+----------------------------------\n+\"ensemble\":{\n+   \"feature_names\":[\n+      ...\n+   ],\n+   \"trained_models\":[\n+      {\n+         \"tree\":{\n+            \"feature_names\":[],\n+            \"tree_structure\":[\n+               {\n+                  \"decision_type\":\"lte\",\n+                  \"node_index\":0,\n+                  \"leaf_value\":47.64069875778043,\n+                  \"default_left\":false\n+               }\n+            ],\n+            \"target_type\":\"regression\"\n+         }\n+      },\n+      ...\n+   ],\n+   \"aggregate_output\":{\n+      \"weighted_sum\":{\n+         \"weights\":[\n+            ...\n+         ]\n+      }\n+   },\n+   \"target_type\":\"regression\"\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+[[ml-put-inference-aggregated-output-example]]\n+===== Aggregated output examples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 447}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njk3NDAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxODoyNVrOFiUzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxODoyNVrOFiUzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create {infer} trained model API enables you to supply a trained model that is \n          \n          \n            \n            The create {infer} trained model API enables you to supply a trained model that is", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371536785", "createdAt": "2020-01-27T23:18:25Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAwMzg4OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozMTo1NVrOFiVEtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozMTo1NVrOFiVEtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MTE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Should default to the left if the feature is missing. Defaults to `true`.\n          \n          \n            \n            Indicates whether to default to the left when the feature is missing. Defaults to `true`.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371541173", "createdAt": "2020-01-27T23:31:55Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAxNTcwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozNzo1NlrOFiVL3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozNzo1NlrOFiVL3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a weighted vote of the input values. The the most common input value (taking the \n          \n          \n            \n            a weighted vote of the input values. The most common input value (taking the", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371543007", "createdAt": "2020-01-27T23:37:56Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, object) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzAyODEwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDoyOVrOFiVTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDoyOVrOFiVTGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDg1OQ==", "bodyText": "I think it's a bit unusual to have a bunch of incomplete examples in an API reference page. I think once we have a fuller set of examples (e.g. in https://www.elastic.co/guide/en/machine-learning/master/dfanalytics-examples.html), this section should just contain a single example (even if it's an abbreviated one).", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371544859", "createdAt": "2020-01-27T23:44:29Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, object) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the \n+weights into account) is returned.\n+\n+`weighted_mode`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+See <<ml-put-inference-aggregated-output-example>> for more details.\n+\n+\n+[[ml-put-inference-example]]\n+==== {api-examples-title}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 295}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4572, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}