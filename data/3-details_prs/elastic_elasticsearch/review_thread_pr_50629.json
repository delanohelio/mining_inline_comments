{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjE0MTY3", "number": 50629, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTo1NzoxNFrODWArsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjowMzo0NVrODWAzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDA2NDQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNTo1NzoxNFrOFahdDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzo1NDo0OFrOFakllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1NTQwNQ==", "bodyText": "Could you make a constant out of this?", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363355405", "createdAt": "2020-01-06T15:57:14Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "diffHunk": "@@ -29,10 +29,9 @@\n \n public class RestEqlSearchAction extends BaseRestHandler {\n     public RestEqlSearchAction(RestController controller) {\n-        // Not sure yet if we will always have index in the path or not\n-        // TODO: finalize the endpoints\n-        controller.registerHandler(GET, \"/{index}/_eql/search\", this);\n-        controller.registerHandler(POST, \"/{index}/_eql/search\", this);\n+        final String path = \"/{index}/_eql/search\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwNjc0MQ==", "bodyText": "done", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363406741", "createdAt": "2020-01-06T17:54:48Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "diffHunk": "@@ -29,10 +29,9 @@\n \n public class RestEqlSearchAction extends BaseRestHandler {\n     public RestEqlSearchAction(RestController controller) {\n-        // Not sure yet if we will always have index in the path or not\n-        // TODO: finalize the endpoints\n-        controller.registerHandler(GET, \"/{index}/_eql/search\", this);\n-        controller.registerHandler(POST, \"/{index}/_eql/search\", this);\n+        final String path = \"/{index}/_eql/search\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1NTQwNQ=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDA4MjI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjowMzowMlrOFahn5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDo1NToyNlrOFao-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg==", "bodyText": "How about an empty list?", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363358182", "createdAt": "2020-01-06T16:03:02Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwNjYxOA==", "bodyText": "normally SearchAfter doesn't accept the empty list, throws error:\n    java.lang.IllegalArgumentException: Values must contains at least one value.\n\nThe original searchafter test doesn't use empty list as well\n\n  \n    \n      elasticsearch/server/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java\n    \n    \n         Line 101\n      in\n      df83eb9\n    \n    \n    \n    \n\n        \n          \n           int numSearchAfter = randomIntBetween(1, 10);", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363406618", "createdAt": "2020-01-06T17:54:29Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNjcwOA==", "bodyText": "How about returning setting search after values to null sometimes then?", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363436708", "createdAt": "2020-01-06T19:07:59Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ0MzQxMQ==", "bodyText": "Already handled there as well\n    java.lang.NullPointerException: Values cannot be null.\n        at __randomizedtesting.SeedInfo.seed([1C63F70E75AEE77B:48BB964652FCDAE7]:0)\n        at org.elasticsearch.search.searchafter.SearchAfterBuilder.setSortValues(SearchAfterBuilder.java:78)", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363443411", "createdAt": "2020-01-06T19:23:31Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3ODcxNw==", "bodyText": "discussed over slack, updated implementation", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363478717", "createdAt": "2020-01-06T20:55:26Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDA4NDQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjowMzo0NVrOFahpQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODowMjowMFrOFakxJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA==", "bodyText": "I think there is LuceneTests.randomSortValue() that generates random sort values. I wonder if we could use it here.", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363358528", "createdAt": "2020-01-06T16:03:45Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);\n+        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n+        jsonBuilder.startObject();\n+        jsonBuilder.startArray(\"search_after\");\n+        for (int i = 0; i < numSearchAfter; i++) {\n+            int branch = randomInt(9);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2Nzc4OA==", "bodyText": "If it is not possible, I think there is a better pattern for this base on randomFrom(...) and Supplier<...>", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363367788", "createdAt": "2020-01-06T16:23:14Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);\n+        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n+        jsonBuilder.startObject();\n+        jsonBuilder.startArray(\"search_after\");\n+        for (int i = 0; i < numSearchAfter; i++) {\n+            int branch = randomInt(9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwOTcwMg==", "bodyText": "updated to a better pattern", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363409702", "createdAt": "2020-01-06T18:02:00Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);\n+        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n+        jsonBuilder.startObject();\n+        jsonBuilder.startArray(\"search_after\");\n+        for (int i = 0; i < numSearchAfter; i++) {\n+            int branch = randomInt(9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA=="}, "originalCommit": {"oid": "0cbf00aece71286fcd59d04ba6206be407793407"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4866, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}