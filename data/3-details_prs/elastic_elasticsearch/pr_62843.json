{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDE2MzQy", "number": 62843, "title": "Grok: \"native\" results", "bodyText": "This adds the ability to fetch java primitives like long and float\nfrom grok matches rather than their boxed versions. It also allows\ncustomizing the which fields are extracted and how they are extracted.\nBy default we continue to fetch a Map<String, Object> but runtime\nfields will be able to catch just the fields it is interested\nin, and the values will be primitives.", "createdAt": "2020-09-23T20:15:46Z", "url": "https://github.com/elastic/elasticsearch/pull/62843", "merged": true, "mergeCommit": {"oid": "2e346f3faeaafc4e072898f0c3b5c92dc7f93358"}, "closed": true, "closedAt": "2020-09-24T14:46:39Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLyasqgH2gAyNDkyMDE2MzQyOjU3NDU4MjQ2MGQyODQwOGE2MGE1OWE2MWQ5NDQ0ODZkNGM5ZGM5YzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMB6kKAFqTQ5NTYyMzA1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "574582460d28408a60a59a61d944486d4c9dc9c5", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/574582460d28408a60a59a61d944486d4c9dc9c5", "committedDate": "2020-09-23T20:14:49Z", "message": "Grok: \"native\" results\n\nThis adds the ability to fetch java primitives like `long` and `float`\nfrom grok matches rather than their boxed versions. It also allows\ncustomizing the which fields are extracted and how they are extracted.\nBy default we continue to fetch a `Map<String, Object>` but runtime\nfields will be able to catch *just* the fields it is interested\nin, and the values will be primitives."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTQ0MDgz", "url": "https://github.com/elastic/elasticsearch/pull/62843#pullrequestreview-495544083", "createdAt": "2020-09-24T13:00:49Z", "commit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowMDo0OVrOHXZgNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxOToxMlrOHXaRPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzE0MQ==", "bodyText": "Comment should be updated, this is return boolean on success now and mutating the extracter", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494297141", "createdAt": "2020-09-24T13:00:49Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/Grok.java", "diffHunk": "@@ -252,7 +255,7 @@ public boolean match(String text) {\n      * @param length length of the text to match\n      * @return a map containing field names and their respective coerced values that matched.\n      */\n-    public Map<String, Object> captures(byte[] utf8Bytes, int offset, int length) {\n+    public boolean match(byte[] utf8Bytes, int offset, int length, GrokCaptureExtracter extracter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng==", "bodyText": "This particular one (and really all the other native type parsers), are passed the value of X.parseX. So, it is actually passed the result of Integer.parseInt(/*String*/i). It then follows that boxing here is not necessary. I think you can just keep it native all the way as the IntConsumer is designed to accept native values.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494302776", "createdAt": "2020-09-24T13:09:35Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNTc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n          \n          \n            \n                            return buildExtracter.apply(emit::accept);\n          \n      \n    \n    \n  \n\nGiven the above comment, I think this is all that is necessary (and this goes for all the other extractor methods too).", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494305796", "createdAt": "2020-09-24T13:13:51Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA==", "bodyText": "Should we also have a BooleanConsumer? That would prevent boolean boxing as Boolean.parseBoolean returns a native boolean. This boxing  is admittedly less of a concern than numeric unboxing/reboxing, but it would be nice to have consistency.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494309694", "createdAt": "2020-09-24T13:19:12Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n             }\n-        }\n-        return null;\n+\n+            @Override\n+            public GrokCaptureExtracter forLong(Function<LongConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(l -> emit.accept(Long.valueOf(l)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forFloat(Function<FloatConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(f -> emit.accept(Float.valueOf(f)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forDouble(Function<DoubleConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(d -> emit.accept(Double.valueOf(d)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forBoolean(Function<Consumer<Boolean>, GrokCaptureExtracter> buildExtracter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48c463149884fd16e92eac5b5fc36a13b140bea", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f48c463149884fd16e92eac5b5fc36a13b140bea", "committedDate": "2020-09-24T14:02:24Z", "message": "Merge branch 'master' into grok_native"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb0d357d36484120563936433fde4d522fc8034", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/7bb0d357d36484120563936433fde4d522fc8034", "committedDate": "2020-09-24T14:04:56Z", "message": "Update comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac", "committedDate": "2020-09-23T20:14:08Z", "message": "Grok: \"native\" results\n\nThis adds the ability to fetch java primitives like `long` and `float`\nfrom grok matches rather than their boxed versions. It also allows\ncustomizing the which fields are extracted and how they are extracted.\nBy default we continue to fetch a `Map<String, Object>` but runtime\nfields will be able to catch *just* the fields it is interested\nin, and the values will be primitives."}, "afterCommit": {"oid": "846ae11b14d795f1c3e21063cd3c602397644be6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/846ae11b14d795f1c3e21063cd3c602397644be6", "committedDate": "2020-09-24T14:07:17Z", "message": "Explain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846ae11b14d795f1c3e21063cd3c602397644be6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/846ae11b14d795f1c3e21063cd3c602397644be6", "committedDate": "2020-09-24T14:07:17Z", "message": "Explain"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjIzMDU0", "url": "https://github.com/elastic/elasticsearch/pull/62843#pullrequestreview-495623054", "createdAt": "2020-09-24T14:18:12Z", "commit": {"oid": "846ae11b14d795f1c3e21063cd3c602397644be6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4599, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}