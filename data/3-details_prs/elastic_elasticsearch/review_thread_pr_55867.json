{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjA0MzI1", "number": 55867, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowNzo1M1rOD3RUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowNzo1M1rOD3RUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjgxOTIwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowNzo1M1rOGNbvGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowNzo1M1rOGNbvGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczOTA5OA==", "bodyText": "I can reproduce this by insertingThread.sleep(Randomness.get().nextInt(100)) before we apply the cluster state.\nPeer recovery can start more than once if the recovery source hasn't applied the latest cluster state. Should we only set the flag recoveryStarted after we have sent/received any retryable action?", "url": "https://github.com/elastic/elasticsearch/pull/55867#discussion_r416739098", "createdAt": "2020-04-28T16:07:53Z", "author": {"login": "dnhatn"}, "path": "server/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java", "diffHunk": "@@ -850,16 +846,24 @@ public void messageReceived(TransportRequestHandler<TransportRequest> handler, T\n         }\n     }\n \n-    private static class SingleStartEnforcer implements Consumer<String> {\n+    private class SingleStartEnforcer implements BiConsumer<String, TransportRequest> {\n \n         private final AtomicBoolean recoveryStarted = new AtomicBoolean(false);\n+        private final String indexName;\n+\n+        private SingleStartEnforcer(String indexName) {\n+            this.indexName = indexName;\n+        }\n \n         @Override\n-        public void accept(String action) {\n+        public void accept(String action, TransportRequest request) {\n             // The cluster state applier will immediately attempt to retry the recovery on a cluster state\n             // update. We want to assert that the first and only recovery attempt succeeds\n             if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action)) {\n-                if (recoveryStarted.compareAndSet(false, true) == false) {\n+                StartRecoveryRequest startRecoveryRequest = (StartRecoveryRequest) request;\n+                ShardId shardId = startRecoveryRequest.shardId();\n+                logger.info(\"--> attempting to send start_recovery request for shard: \" + shardId);\n+                if (indexName.equals(shardId.getIndexName()) && recoveryStarted.compareAndSet(false, true) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c956b2f2d20a1868d1a6cc685429a0fc528bce7"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2651, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}