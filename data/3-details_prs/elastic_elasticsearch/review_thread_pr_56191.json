{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDY4NjQ4", "number": 56191, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDo1MlrOD5eerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxODo1M1rOD5elJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTk0Nzk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDo1MlrOGQw_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDo1MlrOGQw_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzA3Ng==", "bodyText": "What's the purpose of the intermediate And node if it's always combined with TRUE?", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420233076", "createdAt": "2020-05-05T16:14:52Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {\n+            if (e instanceof Equals || e instanceof NotEquals) {\n+                Expression newLeft = null;\n+                Expression newRight = null;\n+\n+                // transform a \"==\" or \"!=\" TRUE/FALSE into an \"AND TRUE\" by negating (if necessary) the other side of the expression\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+                    // ex == TRUE -> AND(ex, TRUE)\n+                    if (TRUE.equals(eq.left()) || TRUE.equals(eq.right())) {\n+                        newLeft = eq.left();\n+                        newRight = eq.right();\n+                    }\n+                    // ex == FALSE -> AND(NOT(ex), TRUE)\n+                    if (FALSE.equals(eq.left()) || FALSE.equals(eq.right())) {\n+                        boolean isLeftFalse = FALSE.equals(eq.left());\n+                        newLeft = isLeftFalse ? TRUE : new Not(eq.left().source(), eq.left());\n+                        newRight = isLeftFalse ? new Not(eq.right().source(), eq.right()) : TRUE;\n+                    }\n+                } else {\n+                    NotEquals neq = (NotEquals) e;\n+                    // ex != TRUE -> AND(NOT(x), TRUE)\n+                    if (TRUE.equals(neq.left()) || TRUE.equals(neq.right())) {\n+                        boolean isLeftTrue = TRUE.equals(neq.left());\n+                        newLeft = isLeftTrue ? TRUE : new Not(neq.left().source(), neq.left());\n+                        newRight = isLeftTrue ? new Not(neq.right().source(), neq.right()) : TRUE;\n+                    }\n+                    // ex != FALSE -> AND(ex, TRUE)\n+                    if (FALSE.equals(neq.left()) || FALSE.equals(neq.right())) {\n+                        boolean isLeftFalse = FALSE.equals(neq.left());\n+                        newLeft = isLeftFalse ? TRUE : neq.left();\n+                        newRight = isLeftFalse ? neq.right() : TRUE;\n+                    }\n+                }\n+                \n+                if (newLeft != null) {\n+                    return new And(e.source(), newLeft, newRight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTk2NDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxODo1M1rOGQxKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1NjoxMlrOGRH2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw==", "bodyText": "I think it's okay to assume that TRUE is on the right,  since we've moved literals to the right.\nIf it's on the left, than both left and right must be literals and the expression will fold anyway.\nIf that's true, I think it'll simplify the logic a good bit:\nif (e instanceof Equals ) {\n    Equals eq = (Equals) e;\n    if (TRUE.equals(eq.right()) {\n        return eq.left()\n    }\n\n    if (FALSE.equals(eq.right()) {\n        return new Not(eq.source(), eq.left())\n    }\n}\n\nif (e instanceof NotEquals ) {\n    Equals eq = (NotEquals) e;\n    if (FALSE.equals(eq.right()) {\n        return eq.left()\n    }\n\n    if (TRUE.equals(eq.right()) {\n        return new Not(eq.source(), eq.left())\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420235787", "createdAt": "2020-05-05T16:18:53Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MTQ2MA==", "bodyText": "BooleanLiteralsOnTheRight is applied after this rule so assuming literals on the right doesn't always work at least for the first iteration - I think this is fine or we could rearrange the rules, either move this rule after bools on the right or move that ahead.\nI agree with Ross that the code is simplified this way and we could avoid the intermediate And as well (it would be simplified by another rule but there's no value in keeping it around).", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420251460", "createdAt": "2020-05-05T16:41:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw=="}, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1OTM0OQ==", "bodyText": "Note you could compress the code even more though it impacts readability:\nif (e instanceof Equals || e instanceof NotEquals) {\n    BinaryComparison bc = (BinaryComparison) e;\n    Literal isTrue = e instanceof Equals ? TRUE : FALSE;\n    Literal isFalse = e instanceof NotEquals ? TRUE: FALSE;\n\n    // e == TRUE or e != FALSE\n    if (isTrue.equals(bc.right()) {\n        return bc.left();\n    }\n\n    //  e == FALSE or e != TRUE\n    if (isFalse.equals(bc.right()) {\n        return new Not(bc.source(), bc.left())\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420259349", "createdAt": "2020-05-05T16:52:00Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw=="}, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNzYxMg==", "bodyText": "I can change this.\nIn the way it is now, this is a \"standalone\" rule that can be applied no matter what rules are after or before it. Maybe it can be reused in the future in other languages. Changing it will assume that BooleanLiteralsOnTheRight must be always before this rule. And the rule will be much simplified, as you pointed out.\nAnd to this extent, one can argue that this rule can very well be integrated in BooleanLiteralsOnTheRight...", "url": "https://github.com/elastic/elasticsearch/pull/56191#discussion_r420607612", "createdAt": "2020-05-06T07:56:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRules.java", "diffHunk": "@@ -62,6 +62,57 @@ public Expression rule(Expression e) {\n             return e.foldable() ? Literal.of(e) : e;\n         }\n     }\n+\n+    public static final class BooleanEqualsSimplification extends OptimizerExpressionRule {\n+\n+        public BooleanEqualsSimplification() {\n+            super(TransformDirection.UP);\n+        }\n+\n+        @Override\n+        protected Expression rule(Expression e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTc4Nw=="}, "originalCommit": {"oid": "dbf707a8922c20cec46b38da55730d4152e91f73"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2379, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}