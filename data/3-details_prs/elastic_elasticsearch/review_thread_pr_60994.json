{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2Mzk3MjI3", "number": 60994, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTozMzoyMlrOEXjIIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNjoyNFrOEXkdwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTI4MjI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTozMzoyMlrOG_ZhYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0OToyN1rOG_k2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzMTYxOA==", "bodyText": "This doesn't read well to me. Should this be something along the lines of \"due to the way that plugins are initialized/started, the role settings may not be available from a static context/during bootstrapping of plugins\"? Or maybe due to the order in which the plugins are started?", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469131618", "createdAt": "2020-08-12T09:33:22Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "diffHunk": "@@ -72,8 +73,13 @@ public static boolean isMasterNode(final Settings settings) {\n         return hasRole(settings, DiscoveryNodeRole.MASTER_ROLE);\n     }\n \n+    /**\n+     * Note, due to the way that plugins may not be available when settings are being initialized,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MjI0Ng==", "bodyText": "I'll reword this a bit, thanks for the suggestion", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469292246", "createdAt": "2020-08-12T14:15:38Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "diffHunk": "@@ -72,8 +73,13 @@ public static boolean isMasterNode(final Settings settings) {\n         return hasRole(settings, DiscoveryNodeRole.MASTER_ROLE);\n     }\n \n+    /**\n+     * Note, due to the way that plugins may not be available when settings are being initialized,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzMTYxOA=="}, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxNzE1Nw==", "bodyText": "Thanks for updating this \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469317157", "createdAt": "2020-08-12T14:49:27Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "diffHunk": "@@ -72,8 +73,13 @@ public static boolean isMasterNode(final Settings settings) {\n         return hasRole(settings, DiscoveryNodeRole.MASTER_ROLE);\n     }\n \n+    /**\n+     * Note, due to the way that plugins may not be available when settings are being initialized,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzMTYxOA=="}, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTQwMTA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDecider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDowNToxNVrOG_apJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoxMjoyOVrOG_jLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTk5MA==", "bodyText": "nit: maybe personal preference but I find if statements without { } error-prone ( I seem to remember apple was bitten by this https://www.imperialviolet.org/2014/02/22/applebug.html )\nThere are a few if statements like this in this class, I'd rather have all of them use curly braces", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469149990", "createdAt": "2020-08-12T10:05:15Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDecider.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.DataTier;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The {@code DataTierAllocationDecider} is a custom allocation decider that behaves similar to the\n+ * {@link org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider}, however it\n+ * is specific to the {@code _tier} setting for both the cluster and index level.\n+ */\n+public class DataTierAllocationDecider extends AllocationDecider {\n+\n+    public static final String NAME = \"data_tier\";\n+\n+    public static final String CLUSTER_ROUTING_REQUIRE = \"cluster.routing.allocation.require._tier\";\n+    public static final String CLUSTER_ROUTING_INCLUDE = \"cluster.routing.allocation.include._tier\";\n+    public static final String CLUSTER_ROUTING_EXCLUDE = \"cluster.routing.allocation.exclude._tier\";\n+    public static final String INDEX_ROUTING_REQUIRE = \"index.routing.allocation.require._tier\";\n+    public static final String INDEX_ROUTING_INCLUDE = \"index.routing.allocation.include._tier\";\n+    public static final String INDEX_ROUTING_EXCLUDE = \"index.routing.allocation.exclude._tier\";\n+\n+    public static final Setting<String> CLUSTER_ROUTING_REQUIRE_SETTING = Setting.simpleString(CLUSTER_ROUTING_REQUIRE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> CLUSTER_ROUTING_INCLUDE_SETTING = Setting.simpleString(CLUSTER_ROUTING_INCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> CLUSTER_ROUTING_EXCLUDE_SETTING = Setting.simpleString(CLUSTER_ROUTING_EXCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> INDEX_ROUTING_REQUIRE_SETTING = Setting.simpleString(INDEX_ROUTING_REQUIRE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+    public static final Setting<String> INDEX_ROUTING_INCLUDE_SETTING = Setting.simpleString(INDEX_ROUTING_INCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+    public static final Setting<String> INDEX_ROUTING_EXCLUDE_SETTING = Setting.simpleString(INDEX_ROUTING_EXCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+\n+    private static void validateTierSetting(String setting) {\n+        if (Strings.hasText(setting)) {\n+            Set<String> invalidTiers = Arrays.stream(setting.split(\",\"))\n+                .filter(tier -> DataTier.validTierName(tier) == false)\n+                .collect(Collectors.toSet());\n+            if (invalidTiers.size() > 0) {\n+                throw new IllegalArgumentException(\"invalid tier names: \" + invalidTiers);\n+            }\n+        }\n+    }\n+\n+    private volatile String clusterRequire = null;\n+    private volatile String clusterInclude = null;\n+    private volatile String clusterExclude = null;\n+\n+    public DataTierAllocationDecider(ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_REQUIRE_SETTING, s -> this.clusterRequire = s);\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_INCLUDE_SETTING, s -> this.clusterInclude = s);\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_SETTING, s -> this.clusterExclude = s);\n+    }\n+\n+    @Override\n+    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(shardRouting, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision canAllocate(IndexMetadata indexMetadata, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(indexMetadata, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(shardRouting, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision shouldAutoExpandToNode(IndexMetadata indexMetadata, DiscoveryNode node, RoutingAllocation allocation) {\n+        Decision decision = shouldClusterFilter(node, allocation);\n+        if (decision != null) return decision;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4OTg4Nw==", "bodyText": "Yes I agree, this was copied from FilterAllocationDecider which is why, I'll change these to real if statements", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469289887", "createdAt": "2020-08-12T14:12:29Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDecider.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.cluster.routing.allocation;\n+\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.DataTier;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The {@code DataTierAllocationDecider} is a custom allocation decider that behaves similar to the\n+ * {@link org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider}, however it\n+ * is specific to the {@code _tier} setting for both the cluster and index level.\n+ */\n+public class DataTierAllocationDecider extends AllocationDecider {\n+\n+    public static final String NAME = \"data_tier\";\n+\n+    public static final String CLUSTER_ROUTING_REQUIRE = \"cluster.routing.allocation.require._tier\";\n+    public static final String CLUSTER_ROUTING_INCLUDE = \"cluster.routing.allocation.include._tier\";\n+    public static final String CLUSTER_ROUTING_EXCLUDE = \"cluster.routing.allocation.exclude._tier\";\n+    public static final String INDEX_ROUTING_REQUIRE = \"index.routing.allocation.require._tier\";\n+    public static final String INDEX_ROUTING_INCLUDE = \"index.routing.allocation.include._tier\";\n+    public static final String INDEX_ROUTING_EXCLUDE = \"index.routing.allocation.exclude._tier\";\n+\n+    public static final Setting<String> CLUSTER_ROUTING_REQUIRE_SETTING = Setting.simpleString(CLUSTER_ROUTING_REQUIRE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> CLUSTER_ROUTING_INCLUDE_SETTING = Setting.simpleString(CLUSTER_ROUTING_INCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> CLUSTER_ROUTING_EXCLUDE_SETTING = Setting.simpleString(CLUSTER_ROUTING_EXCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    public static final Setting<String> INDEX_ROUTING_REQUIRE_SETTING = Setting.simpleString(INDEX_ROUTING_REQUIRE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+    public static final Setting<String> INDEX_ROUTING_INCLUDE_SETTING = Setting.simpleString(INDEX_ROUTING_INCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+    public static final Setting<String> INDEX_ROUTING_EXCLUDE_SETTING = Setting.simpleString(INDEX_ROUTING_EXCLUDE,\n+        DataTierAllocationDecider::validateTierSetting, Setting.Property.Dynamic, Setting.Property.IndexScope);\n+\n+    private static void validateTierSetting(String setting) {\n+        if (Strings.hasText(setting)) {\n+            Set<String> invalidTiers = Arrays.stream(setting.split(\",\"))\n+                .filter(tier -> DataTier.validTierName(tier) == false)\n+                .collect(Collectors.toSet());\n+            if (invalidTiers.size() > 0) {\n+                throw new IllegalArgumentException(\"invalid tier names: \" + invalidTiers);\n+            }\n+        }\n+    }\n+\n+    private volatile String clusterRequire = null;\n+    private volatile String clusterInclude = null;\n+    private volatile String clusterExclude = null;\n+\n+    public DataTierAllocationDecider(ClusterSettings clusterSettings) {\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_REQUIRE_SETTING, s -> this.clusterRequire = s);\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_INCLUDE_SETTING, s -> this.clusterInclude = s);\n+        clusterSettings.addSettingsUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_SETTING, s -> this.clusterExclude = s);\n+    }\n+\n+    @Override\n+    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(shardRouting, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision canAllocate(IndexMetadata indexMetadata, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(indexMetadata, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision canRemain(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {\n+        return shouldFilter(shardRouting, node.node(), allocation);\n+    }\n+\n+    @Override\n+    public Decision shouldAutoExpandToNode(IndexMetadata indexMetadata, DiscoveryNode node, RoutingAllocation allocation) {\n+        Decision decision = shouldClusterFilter(node, allocation);\n+        if (decision != null) return decision;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTk5MA=="}, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTQ4MzY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDeciderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozMDo0NFrOG_bcPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyNDozOVrOG_jung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzA3MA==", "bodyText": "shall we add a test that has both cluster and index routings? (maybe one where allocation is successful and one where the index routing matches but the cluster one doesn't to test the cluster settings precedence?", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469163070", "createdAt": "2020-08-12T10:30:44Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDeciderTests.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.cluster.routing.allocation;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ESAllocationTestCase;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n+import org.elasticsearch.xpack.core.DataTier;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class DataTierAllocationDeciderTests extends ESAllocationTestCase {\n+\n+    private static final Set<Setting<?>> ALL_SETTINGS;\n+    private static final DiscoveryNode HOT_NODE = newNode(\"node-hot\", Collections.singleton(DataTier.DATA_HOT_NODE_ROLE));\n+    private static final DiscoveryNode WARM_NODE = newNode(\"node-warm\", Collections.singleton(DataTier.DATA_WARM_NODE_ROLE));\n+    private static final DiscoveryNode COLD_NODE = newNode(\"node-cold\", Collections.singleton(DataTier.DATA_COLD_NODE_ROLE));\n+    private static final DiscoveryNode FROZEN_NODE = newNode(\"node-frozen\", Collections.singleton(DataTier.DATA_FROZEN_NODE_ROLE));\n+    private static final DiscoveryNode DATA_NODE = newNode(\"node-data\", Collections.singleton(DiscoveryNodeRole.DATA_ROLE));\n+\n+    private final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ALL_SETTINGS);\n+    private final DataTierAllocationDecider decider = new DataTierAllocationDecider(clusterSettings);\n+    private final AllocationDeciders allocationDeciders = new AllocationDeciders(\n+        Arrays.asList(decider,\n+            new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n+            new ReplicaAfterPrimaryActiveAllocationDecider()));\n+    private final AllocationService service = new AllocationService(allocationDeciders,\n+        new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE);\n+\n+    private final ShardRouting shard = ShardRouting.newUnassigned(new ShardId(\"myindex\", \"myindex\", 0), true,\n+        RecoverySource.EmptyStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"index created\"));\n+\n+    static {\n+        Set<Setting<?>> allSettings = new HashSet<>(ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_REQUIRE_SETTING);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_INCLUDE_SETTING);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_EXCLUDE_SETTING);\n+        ALL_SETTINGS = allSettings;\n+    }\n+\n+    public void testClusterRequires() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5ODg0Ng==", "bodyText": "Sure! I added this", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469298846", "createdAt": "2020-08-12T14:24:39Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierAllocationDeciderTests.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.cluster.routing.allocation;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ESAllocationTestCase;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n+import org.elasticsearch.xpack.core.DataTier;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class DataTierAllocationDeciderTests extends ESAllocationTestCase {\n+\n+    private static final Set<Setting<?>> ALL_SETTINGS;\n+    private static final DiscoveryNode HOT_NODE = newNode(\"node-hot\", Collections.singleton(DataTier.DATA_HOT_NODE_ROLE));\n+    private static final DiscoveryNode WARM_NODE = newNode(\"node-warm\", Collections.singleton(DataTier.DATA_WARM_NODE_ROLE));\n+    private static final DiscoveryNode COLD_NODE = newNode(\"node-cold\", Collections.singleton(DataTier.DATA_COLD_NODE_ROLE));\n+    private static final DiscoveryNode FROZEN_NODE = newNode(\"node-frozen\", Collections.singleton(DataTier.DATA_FROZEN_NODE_ROLE));\n+    private static final DiscoveryNode DATA_NODE = newNode(\"node-data\", Collections.singleton(DiscoveryNodeRole.DATA_ROLE));\n+\n+    private final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ALL_SETTINGS);\n+    private final DataTierAllocationDecider decider = new DataTierAllocationDecider(clusterSettings);\n+    private final AllocationDeciders allocationDeciders = new AllocationDeciders(\n+        Arrays.asList(decider,\n+            new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n+            new ReplicaAfterPrimaryActiveAllocationDecider()));\n+    private final AllocationService service = new AllocationService(allocationDeciders,\n+        new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE);\n+\n+    private final ShardRouting shard = ShardRouting.newUnassigned(new ShardId(\"myindex\", \"myindex\", 0), true,\n+        RecoverySource.EmptyStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"index created\"));\n+\n+    static {\n+        Set<Setting<?>> allSettings = new HashSet<>(ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_REQUIRE_SETTING);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_INCLUDE_SETTING);\n+        allSettings.add(DataTierAllocationDecider.CLUSTER_ROUTING_EXCLUDE_SETTING);\n+        ALL_SETTINGS = allSettings;\n+    }\n+\n+    public void testClusterRequires() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzA3MA=="}, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTUwMTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNjoyNFrOG_bm_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoxMjo0OFrOG_jMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTgyMg==", "bodyText": "should we mention the hasRole || DataTier.isExplicitDataTier alternative in the doc here?", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469165822", "createdAt": "2020-08-12T10:36:24Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "diffHunk": "@@ -72,8 +73,13 @@ public static boolean isMasterNode(final Settings settings) {\n         return hasRole(settings, DiscoveryNodeRole.MASTER_ROLE);\n     }\n \n+    /**\n+     * Note, due to the way that plugins may not be available when settings are being initialized,\n+     * do not use this from a static {@link Setting} default value function, as it may not contain\n+     * all roles at that point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MDE1NQ==", "bodyText": "DataTier is an x-pack concept, so I didn't want to mention it here", "url": "https://github.com/elastic/elasticsearch/pull/60994#discussion_r469290155", "createdAt": "2020-08-12T14:12:48Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java", "diffHunk": "@@ -72,8 +73,13 @@ public static boolean isMasterNode(final Settings settings) {\n         return hasRole(settings, DiscoveryNodeRole.MASTER_ROLE);\n     }\n \n+    /**\n+     * Note, due to the way that plugins may not be available when settings are being initialized,\n+     * do not use this from a static {@link Setting} default value function, as it may not contain\n+     * all roles at that point.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTgyMg=="}, "originalCommit": {"oid": "27974f13be8a140e8404f4484d3aa837937ce945"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2458, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}