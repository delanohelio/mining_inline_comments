{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODMxMDgw", "number": 52577, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNzo1OFrODieCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzowMjoxOFrODjKRGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDcwMjE5OnYy", "diffSide": "RIGHT", "path": "modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RecallAtK.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNzo1OFrOFtvBlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNzoyMFrOFt-yiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDY5NA==", "bodyText": "Small typo, changes -> changed", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383500694", "createdAt": "2020-02-24T20:37:58Z", "author": {"login": "jtibshirani"}, "path": "modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RecallAtK.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.rankeval;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.OptionalInt;\n+\n+import javax.naming.directory.SearchResult;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;\n+\n+/**\n+ * Metric implementing Recall@K\n+ * (https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall).<br>\n+ * By default documents with a rating equal or bigger than 1 are considered to\n+ * be \"relevant\" for this calculation. This value can be changes using the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODk4NQ==", "bodyText": "Copy-paste error. I fixed this in PrecisionAtK as well.", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383758985", "createdAt": "2020-02-25T09:37:20Z", "author": {"login": "joshdevins"}, "path": "modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RecallAtK.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.rankeval;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.OptionalInt;\n+\n+import javax.naming.directory.SearchResult;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;\n+\n+/**\n+ * Metric implementing Recall@K\n+ * (https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall).<br>\n+ * By default documents with a rating equal or bigger than 1 are considered to\n+ * be \"relevant\" for this calculation. This value can be changes using the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDY5NA=="}, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDcxMTA4OnYy", "diffSide": "RIGHT", "path": "modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RecallAtK.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0MTowNFrOFtvHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0MTowNFrOFtvHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMjA5OQ==", "bodyText": "I think this can be private, as well as shouldCountUnlabeled.", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383502099", "createdAt": "2020-02-24T20:41:04Z", "author": {"login": "jtibshirani"}, "path": "modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RecallAtK.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.rankeval;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.OptionalInt;\n+\n+import javax.naming.directory.SearchResult;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;\n+\n+/**\n+ * Metric implementing Recall@K\n+ * (https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall).<br>\n+ * By default documents with a rating equal or bigger than 1 are considered to\n+ * be \"relevant\" for this calculation. This value can be changes using the\n+ * relevant_rating_threshold` parameter.<br>\n+ * The `k` parameter (defaults to 10) controls the search window size.\n+ */\n+public class RecallAtK implements EvaluationMetric {\n+\n+    public static final String NAME = \"recall\";\n+\n+    private static final int DEFAULT_RELEVANT_RATING_THRESHOLD = 1;\n+    private static final int DEFAULT_K = 10;\n+\n+    private static final ParseField RELEVANT_RATING_THRESHOLD_FIELD = new ParseField(\"relevant_rating_threshold\");\n+    private static final ParseField K_FIELD = new ParseField(\"k\");\n+\n+    private final int relevantRatingThreshold;\n+    private final int k;\n+\n+    /**\n+     * Metric implementing Recall@K.\n+     * @param relevantRatingThreshold\n+     *            ratings equal or above this value will be considered relevant.\n+     * @param k\n+     *            controls the window size for the search results the metric takes into account\n+     */\n+    public RecallAtK(int relevantRatingThreshold, int k) {\n+        if (relevantRatingThreshold < 0) {\n+            throw new IllegalArgumentException(\"Relevant rating threshold for precision must be positive integer.\");\n+        }\n+        if (k <= 0) {\n+            throw new IllegalArgumentException(\"Window size k must be positive.\");\n+        }\n+        this.relevantRatingThreshold = relevantRatingThreshold;\n+        this.k = k;\n+    }\n+\n+    public RecallAtK() {\n+        this(DEFAULT_RELEVANT_RATING_THRESHOLD, DEFAULT_K);\n+    }\n+\n+    RecallAtK(StreamInput in) throws IOException {\n+        this(in.readVInt(), in.readVInt());\n+    }\n+\n+    private static final ConstructingObjectParser<RecallAtK, Void> PARSER = new ConstructingObjectParser<>(NAME, args -> {\n+        Integer relevantRatingThreshold = (Integer) args[0];\n+        Integer k = (Integer) args[1];\n+        return new RecallAtK(\n+            relevantRatingThreshold == null ? DEFAULT_RELEVANT_RATING_THRESHOLD : relevantRatingThreshold,\n+            k == null ? DEFAULT_K : k);\n+    });\n+\n+    static {\n+        PARSER.declareInt(optionalConstructorArg(), RELEVANT_RATING_THRESHOLD_FIELD);\n+        PARSER.declareInt(optionalConstructorArg(), K_FIELD);\n+    }\n+\n+    public static RecallAtK fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(getRelevantRatingThreshold());\n+        out.writeVInt(getK());\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        builder.startObject(NAME);\n+        builder.field(RELEVANT_RATING_THRESHOLD_FIELD.getPreferredName(), getRelevantRatingThreshold());\n+        builder.field(K_FIELD.getPreferredName(), getK());\n+        builder.endObject();\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME;\n+    }\n+\n+    /**\n+     * Return the rating threshold above which ratings are considered to be\n+     * \"relevant\" for this metric. Defaults to 1.\n+     */\n+    public int getRelevantRatingThreshold() {\n+        return relevantRatingThreshold;\n+    }\n+\n+    /**\n+     * Binarizes a rating based on the relevant rating threshold.\n+     */\n+    boolean isRelevant(int rating) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDcxNTI3OnYy", "diffSide": "RIGHT", "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/PrecisionAtKTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0MjoyOFrOFtvJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0Mjo1OVrOFt_FEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMjc1MQ==", "bodyText": "Small comment, there are some inconsistencies about whether we name tests using AtK or AtFive. Maybe we could actually drop this prefix, since it's clear from the test class? Tests would just be named like testCalculation, testIgnoreOneResult, etc.", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383502751", "createdAt": "2020-02-24T20:42:28Z", "author": {"login": "jtibshirani"}, "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/PrecisionAtKTests.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPrecisionAtFiveCalculation() {\n         assertEquals(1, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved());\n     }\n \n-    public void testPrecisionAtFiveIgnoreOneResult() {\n+    public void testPrecisionAtKIgnoreOneResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MzczMQ==", "bodyText": "I was trying to improve the test names in PrecisionAtK which I found not clear between the test/method name and the details of the test. I added the AtFive when the test was specifically not using the default k since it better describes the test case. I'm happy to drop all those though and simplify the names though, it looks much simpler that way!", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383763731", "createdAt": "2020-02-25T09:42:59Z", "author": {"login": "joshdevins"}, "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/PrecisionAtKTests.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPrecisionAtFiveCalculation() {\n         assertEquals(1, ((PrecisionAtK.Detail) evaluated.getMetricDetails()).getRetrieved());\n     }\n \n-    public void testPrecisionAtFiveIgnoreOneResult() {\n+    public void testPrecisionAtKIgnoreOneResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMjc1MQ=="}, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDczMjc3OnYy", "diffSide": "RIGHT", "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalSpecTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0ODowOVrOFtvUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0Nzo0OVrOFt_SGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNTQ2MQ==", "bodyText": "I think we should also update the createTestItem method in this class to make sure we include a random RecallAtK object.", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383505461", "createdAt": "2020-02-24T20:48:09Z", "author": {"login": "jtibshirani"}, "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalSpecTests.java", "diffHunk": "@@ -149,6 +149,7 @@ private static RankEvalSpec copy(RankEvalSpec original) throws IOException {\n         List<NamedWriteableRegistry.Entry> namedWriteables = new ArrayList<>();\n         namedWriteables.add(new NamedWriteableRegistry.Entry(QueryBuilder.class, MatchAllQueryBuilder.NAME, MatchAllQueryBuilder::new));\n         namedWriteables.add(new NamedWriteableRegistry.Entry(EvaluationMetric.class, PrecisionAtK.NAME, PrecisionAtK::new));\n+        namedWriteables.add(new NamedWriteableRegistry.Entry(EvaluationMetric.class, RecallAtK.NAME, RecallAtK::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NzA2NA==", "bodyText": "Oops, missed this. Thanks! I think I did it correctly, check the next commit and let me know.", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r383767064", "createdAt": "2020-02-25T09:47:49Z", "author": {"login": "joshdevins"}, "path": "modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalSpecTests.java", "diffHunk": "@@ -149,6 +149,7 @@ private static RankEvalSpec copy(RankEvalSpec original) throws IOException {\n         List<NamedWriteableRegistry.Entry> namedWriteables = new ArrayList<>();\n         namedWriteables.add(new NamedWriteableRegistry.Entry(QueryBuilder.class, MatchAllQueryBuilder.NAME, MatchAllQueryBuilder::new));\n         namedWriteables.add(new NamedWriteableRegistry.Entry(EvaluationMetric.class, PrecisionAtK.NAME, PrecisionAtK::new));\n+        namedWriteables.add(new NamedWriteableRegistry.Entry(EvaluationMetric.class, RecallAtK.NAME, RecallAtK::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNTQ2MQ=="}, "originalCommit": {"oid": "7670da49f4973e2a92dd7b73dc229281606c982c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTk0OTcwOnYy", "diffSide": "RIGHT", "path": "docs/reference/search/rank-eval.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzowMjoxOFrOFu0GPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzowMzo1MlrOFu0KKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzMjM4MQ==", "bodyText": "precision -> recall", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r384632381", "createdAt": "2020-02-26T17:02:18Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/search/rank-eval.asciidoc", "diffHunk": "@@ -251,6 +252,58 @@ If set to 'true', unlabeled documents are ignored and neither count as relevant\n |=======================================================================\n \n \n+[float]\n+[[k-recall]]\n+===== Recall at K (R@k)\n+\n+This metric measures the total number of relevant results in the top k search\n+results. It's a form of the well-known\n+https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall[Recall]\n+metric. It is the fraction of relevant documents in those first k results\n+relative to all possible relevant results. A recall at 10 (R@10) value of 0.5 then\n+means 4 out of 8 relevant documents, with respect to the user's information\n+need, were retrieved in the 10 top hits.\n+\n+R@k works well as a simple evaluation metric that has the benefit of being easy\n+to understand and explain. Documents in the collection need to be rated as either\n+relevant or irrelevant with respect to the current query. R@k is a set-based\n+metric and does not take into account the position of the relevant documents\n+within the top k results, so a ranking of ten results that contains one\n+relevant result in position 10 is equally as good as a ranking of ten results\n+that contains one relevant result in position 1.\n+\n+[source,console]\n+--------------------------------\n+GET /twitter/_rank_eval\n+{\n+    \"requests\": [\n+    {\n+        \"id\": \"JFK query\",\n+        \"request\": { \"query\": { \"match_all\": {}}},\n+        \"ratings\": []\n+    }],\n+    \"metric\": {\n+      \"recall\": {\n+        \"k\" : 20,\n+        \"relevant_rating_threshold\": 1\n+      }\n+   }\n+}\n+--------------------------------\n+// TEST[setup:twitter]\n+\n+The `precision` metric takes the following optional parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7db8f79511e51f692a611ddeb4d8c9e92a8b6a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzMzM4Nw==", "bodyText": "\ud83d\ude2d", "url": "https://github.com/elastic/elasticsearch/pull/52577#discussion_r384633387", "createdAt": "2020-02-26T17:03:52Z", "author": {"login": "joshdevins"}, "path": "docs/reference/search/rank-eval.asciidoc", "diffHunk": "@@ -251,6 +252,58 @@ If set to 'true', unlabeled documents are ignored and neither count as relevant\n |=======================================================================\n \n \n+[float]\n+[[k-recall]]\n+===== Recall at K (R@k)\n+\n+This metric measures the total number of relevant results in the top k search\n+results. It's a form of the well-known\n+https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall[Recall]\n+metric. It is the fraction of relevant documents in those first k results\n+relative to all possible relevant results. A recall at 10 (R@10) value of 0.5 then\n+means 4 out of 8 relevant documents, with respect to the user's information\n+need, were retrieved in the 10 top hits.\n+\n+R@k works well as a simple evaluation metric that has the benefit of being easy\n+to understand and explain. Documents in the collection need to be rated as either\n+relevant or irrelevant with respect to the current query. R@k is a set-based\n+metric and does not take into account the position of the relevant documents\n+within the top k results, so a ranking of ten results that contains one\n+relevant result in position 10 is equally as good as a ranking of ten results\n+that contains one relevant result in position 1.\n+\n+[source,console]\n+--------------------------------\n+GET /twitter/_rank_eval\n+{\n+    \"requests\": [\n+    {\n+        \"id\": \"JFK query\",\n+        \"request\": { \"query\": { \"match_all\": {}}},\n+        \"ratings\": []\n+    }],\n+    \"metric\": {\n+      \"recall\": {\n+        \"k\" : 20,\n+        \"relevant_rating_threshold\": 1\n+      }\n+   }\n+}\n+--------------------------------\n+// TEST[setup:twitter]\n+\n+The `precision` metric takes the following optional parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzMjM4MQ=="}, "originalCommit": {"oid": "9f7db8f79511e51f692a611ddeb4d8c9e92a8b6a"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}