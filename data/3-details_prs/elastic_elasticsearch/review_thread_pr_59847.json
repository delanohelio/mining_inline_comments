{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjA5MDE4", "number": 59847, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MTo1NlrOEQJ9Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjo0NzozM1rOEUl1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzc1ODQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MTo1NlrOG0KOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOToyNDowNFrOG8BjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NjcyOQ==", "bodyText": "this seems unrelated?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457346729", "createdAt": "2020-07-20T12:41:56Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -138,7 +138,7 @@ private static CompletionFieldMapper toType(FieldMapper in) {\n                 b.startArray(n);\n                 c.toXContent(b, ToXContent.EMPTY_PARAMS);\n                 b.endArray();\n-            });\n+            }, ContextMappings::toString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxNzQ5MA==", "bodyText": "It's a change in the signature of setSerializer - we need to serialize things to string as well, for conflict reporting.  I should add some specific tests to ParametrizedMapperTests for this as well though.", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r458017490", "createdAt": "2020-07-21T11:10:57Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -138,7 +138,7 @@ private static CompletionFieldMapper toType(FieldMapper in) {\n                 b.startArray(n);\n                 c.toXContent(b, ToXContent.EMPTY_PARAMS);\n                 b.endArray();\n-            });\n+            }, ContextMappings::toString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NjcyOQ=="}, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MzEzOQ==", "bodyText": "I've added a specific test here", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r465593139", "createdAt": "2020-08-05T09:24:04Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -138,7 +138,7 @@ private static CompletionFieldMapper toType(FieldMapper in) {\n                 b.startArray(n);\n                 c.toXContent(b, ToXContent.EMPTY_PARAMS);\n                 b.endArray();\n-            });\n+            }, ContextMappings::toString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NjcyOQ=="}, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzc2Nzg5OnYy", "diffSide": "LEFT", "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MzozMFrOG0KTmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMzo1MlrOG0SZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0Nzk5Mg==", "bodyText": "seems like EnabledAttributeMapper is no longer needed, we may be able to remove the class also.", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457347992", "createdAt": "2020-07-20T12:43:30Z", "author": {"login": "javanna"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;\n+    }\n \n-        static {\n-            SIZE_FIELD_TYPE.setStored(true);\n-            SIZE_FIELD_TYPE.freeze();\n-        }\n+    private static SizeFieldMapper toType(FieldMapper in) {\n+        return (SizeFieldMapper) in;\n     }\n \n-    public static class Builder extends MetadataFieldMapper.Builder<Builder> {\n+    public static class Builder extends MetadataFieldMapper.Builder {\n \n-        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;\n+        // TODO should this really be updateable?\n+        private final Parameter<Boolean> enabled = Parameter.boolParam(\"enabled\", true, m -> toType(m).enabled(), false);\n \n         private Builder() {\n-            super(NAME, Defaults.SIZE_FIELD_TYPE);\n-            builder = this;\n+            super(NAME);\n         }\n \n-        public Builder enabled(EnabledAttributeMapper enabled) {\n-            this.enabledState = enabled;\n-            return builder;\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return List.of(enabled);\n         }\n \n         @Override\n         public SizeFieldMapper build(BuilderContext context) {\n-            return new SizeFieldMapper(fieldType, enabledState,\n+            return new SizeFieldMapper(enabled.getValue(),\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n     public static class TypeParser implements MetadataFieldMapper.TypeParser {\n         @Override\n-        public MetadataFieldMapper.Builder<?> parse(String name, Map<String, Object> node,\n+        public MetadataFieldMapper.Builder parse(String name, Map<String, Object> node,\n                                                        ParserContext parserContext) throws MapperParsingException {\n             Builder builder = new Builder();\n-            for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {\n-                Map.Entry<String, Object> entry = iterator.next();\n-                String fieldName = entry.getKey();\n-                Object fieldNode = entry.getValue();\n-                if (fieldName.equals(\"enabled\")) {\n-                    boolean enabled = XContentMapValues.nodeBooleanValue(fieldNode, name + \".enabled\");\n-                    builder.enabled(enabled ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);\n-                    iterator.remove();\n-                }\n-            }\n+            builder.parse(name, parserContext, node);\n             return builder;\n         }\n \n         @Override\n         public MetadataFieldMapper getDefault(ParserContext context) {\n-            return new SizeFieldMapper(Defaults.SIZE_FIELD_TYPE, Defaults.ENABLED_STATE,\n+            return new SizeFieldMapper(Defaults.ENABLED,\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n-    private EnabledAttributeMapper enabledState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4MDU5Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457480592", "createdAt": "2020-07-20T15:13:52Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;\n+    }\n \n-        static {\n-            SIZE_FIELD_TYPE.setStored(true);\n-            SIZE_FIELD_TYPE.freeze();\n-        }\n+    private static SizeFieldMapper toType(FieldMapper in) {\n+        return (SizeFieldMapper) in;\n     }\n \n-    public static class Builder extends MetadataFieldMapper.Builder<Builder> {\n+    public static class Builder extends MetadataFieldMapper.Builder {\n \n-        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;\n+        // TODO should this really be updateable?\n+        private final Parameter<Boolean> enabled = Parameter.boolParam(\"enabled\", true, m -> toType(m).enabled(), false);\n \n         private Builder() {\n-            super(NAME, Defaults.SIZE_FIELD_TYPE);\n-            builder = this;\n+            super(NAME);\n         }\n \n-        public Builder enabled(EnabledAttributeMapper enabled) {\n-            this.enabledState = enabled;\n-            return builder;\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return List.of(enabled);\n         }\n \n         @Override\n         public SizeFieldMapper build(BuilderContext context) {\n-            return new SizeFieldMapper(fieldType, enabledState,\n+            return new SizeFieldMapper(enabled.getValue(),\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n     public static class TypeParser implements MetadataFieldMapper.TypeParser {\n         @Override\n-        public MetadataFieldMapper.Builder<?> parse(String name, Map<String, Object> node,\n+        public MetadataFieldMapper.Builder parse(String name, Map<String, Object> node,\n                                                        ParserContext parserContext) throws MapperParsingException {\n             Builder builder = new Builder();\n-            for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {\n-                Map.Entry<String, Object> entry = iterator.next();\n-                String fieldName = entry.getKey();\n-                Object fieldNode = entry.getValue();\n-                if (fieldName.equals(\"enabled\")) {\n-                    boolean enabled = XContentMapValues.nodeBooleanValue(fieldNode, name + \".enabled\");\n-                    builder.enabled(enabled ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);\n-                    iterator.remove();\n-                }\n-            }\n+            builder.parse(name, parserContext, node);\n             return builder;\n         }\n \n         @Override\n         public MetadataFieldMapper getDefault(ParserContext context) {\n-            return new SizeFieldMapper(Defaults.SIZE_FIELD_TYPE, Defaults.ENABLED_STATE,\n+            return new SizeFieldMapper(Defaults.ENABLED,\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n-    private EnabledAttributeMapper enabledState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0Nzk5Mg=="}, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDY1MjA0OnYy", "diffSide": "RIGHT", "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMTo1MFrOG0SRfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMTo1MFrOG0SRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODUyNg==", "bodyText": "Do we need the Defaults object at all any more?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457478526", "createdAt": "2020-07-20T15:11:50Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDY2OTg0OnYy", "diffSide": "RIGHT", "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxNDoxNFrOG0SbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxNDoxNFrOG0SbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4MDk4Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457480986", "createdAt": "2020-07-20T15:14:14Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -129,37 +112,15 @@ public void parse(ParseContext context) {\n \n     @Override\n     protected void parseCreateField(ParseContext context) {\n-        if (!enabledState.enabled) {\n+        if (enabled == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDcxNjg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMDo1MVrOG0S06w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMDo1MVrOG0S06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NzU5NQ==", "bodyText": "I wonder if ever allowed disabling indexing the id! Oh well, \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457487595", "createdAt": "2020-07-20T15:20:51Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "diffHunk": "@@ -277,19 +263,13 @@ public void preParse(ParseContext context) throws IOException {\n \n     @Override\n     protected void parseCreateField(ParseContext context) throws IOException {\n-        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n-            BytesRef id = Uid.encodeId(context.sourceToParse().id());\n-            context.doc().add(new Field(NAME, id, fieldType));\n-        }\n+        BytesRef id = Uid.encodeId(context.sourceToParse().id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDczMTIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMzoxMVrOG0S9mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMzoxMVrOG0S9mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4OTgxNg==", "bodyText": "Can add javadoc?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457489816", "createdAt": "2020-07-20T15:23:11Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "diffHunk": "@@ -45,25 +45,63 @@\n         MetadataFieldMapper getDefault(ParserContext parserContext);\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    public abstract static class Builder<T extends Builder<T>> extends FieldMapper.Builder<T> {\n-        public Builder(String name, FieldType fieldType) {\n-            super(name, fieldType);\n+    public static class FixedTypeParser implements TypeParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDI2ODg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjo0NzozM1rOG64JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODo0MjozMlrOG8pMIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5MDUzNw==", "bodyText": "I think you only override this here to make it final, right? Do you need this method definition at all now?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r464390537", "createdAt": "2020-08-03T12:47:33Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -105,7 +108,7 @@ protected final void mergeOptions(FieldMapper other, List<String> conflicts) {\n     }\n \n     @Override\n-    public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4747d0075b57d76f195bbd0667f3d1238bd9e90e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0MjU5Mg==", "bodyText": "++, it's gone now", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r466242592", "createdAt": "2020-08-06T08:42:32Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -105,7 +108,7 @@ protected final void mergeOptions(FieldMapper other, List<String> conflicts) {\n     }\n \n     @Override\n-    public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5MDUzNw=="}, "originalCommit": {"oid": "4747d0075b57d76f195bbd0667f3d1238bd9e90e"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2224, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}