{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMzgzNTcx", "number": 63617, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMToyNlrOE068cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowNDoxMlrOE06_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTI3MTUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMToyNlrOHs6fgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMToyNlrOHs6fgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NzczMQ==", "bodyText": "Nice!", "url": "https://github.com/elastic/elasticsearch/pull/63617#discussion_r516857731", "createdAt": "2020-11-03T18:01:26Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -25,8 +27,83 @@\n public class InternalBoxplot extends InternalNumericMetricsAggregation.MultiValue implements Boxplot {\n \n     enum Metrics {\n+        MIN {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef801bb3a7a4ad038f971d37477544bcd73fdc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTI4MDU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowNDoxMlrOHs6lZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowNDoxMlrOHs6lZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1OTIzNg==", "bodyText": "I think it might be a good idea to make this a constant and give it a short explanation....", "url": "https://github.com/elastic/elasticsearch/pull/63617#discussion_r516859236", "createdAt": "2020-11-03T18:04:12Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -36,39 +113,48 @@ public String value() {\n             return name().toLowerCase(Locale.ROOT);\n         }\n \n-        double value(InternalBoxplot boxplot) {\n-            switch (this) {\n-                case MIN:\n-                    return boxplot.getMin();\n-                case MAX:\n-                    return boxplot.getMax();\n-                case Q1:\n-                    return boxplot.getQ1();\n-                case Q2:\n-                    return boxplot.getQ2();\n-                case Q3:\n-                    return boxplot.getQ3();\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown value [\" + this.value() + \"] in the boxplot aggregation\");\n-            }\n+        abstract double value(InternalBoxplot boxplot);\n+\n+        abstract double value(TDigestState state);\n+    }\n+\n+    /**\n+     * For a given TDigest, find the \"whisker\" valeus, such that the upper whisker is (close to) the highest observed value less than\n+     * q3 + 1.5 * IQR and the lower whisker is (close to) the lowest observed value greater than q1 - 1.5 * IQR.  Since we don't track\n+     * observed values directly, this function returns the centroid according to the above logic.\n+     *\n+     * @param state - an initialized TDigestState representing the observed data.\n+     * @return - two doubles in an array, where whiskers[0] is the lower whisker and whiskers[1] is the upper whisker.\n+     */\n+    public static double[] whiskers(TDigestState state) {\n+        double[] results = new double[2];\n+        results[0] = Double.NaN;\n+        results[1] = Double.NaN;\n+        if (state == null) {\n+            return results;\n         }\n \n-        double value(TDigestState state) {\n-            switch (this) {\n-                case MIN:\n-                    return state == null ? Double.NEGATIVE_INFINITY : state.getMin();\n-                case MAX:\n-                    return state == null ? Double.POSITIVE_INFINITY : state.getMax();\n-                case Q1:\n-                    return state == null ? Double.NaN : state.quantile(0.25);\n-                case Q2:\n-                    return state == null ? Double.NaN : state.quantile(0.5);\n-                case Q3:\n-                    return state == null ? Double.NaN : state.quantile(0.75);\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown value [\" + this.value() + \"] in the boxplot aggregation\");\n+        double q3 = state.quantile(0.75);\n+        double q1 = state.quantile(0.25);\n+        double iqr = q3 - q1;\n+        double upper = q3 + (1.5 * iqr);\n+        double lower = q1 - (1.5 * iqr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef801bb3a7a4ad038f971d37477544bcd73fdc"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2972, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}