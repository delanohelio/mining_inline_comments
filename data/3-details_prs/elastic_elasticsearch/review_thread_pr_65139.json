{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDYwMTY5", "number": 65139, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0Mjo0OVrOE6DGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjo1NjowNVrOFOPi_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzAzNjYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0Mjo0OVrOH04Gsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0Mjo0OVrOH04Gsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwNzIxOQ==", "bodyText": "this is not related to this PR, but fixes an issue I found. I can move this into a separate PR if you prefer.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r525207219", "createdAt": "2020-11-17T14:42:49Z", "author": {"login": "hendrikmuhs"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -115,6 +120,11 @@ public double value(String name) {\n         return super.value(name);\n     }\n \n+    @Override\n+    public Iterable<String> valueNames() {\n+        return metricNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2837eafcdc42f70c02c7aff3e1d82691bdb544"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzE5MzkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxMTozMVrOH05l2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxMTozMVrOH05l2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMTU3Nw==", "bodyText": "Is it just the ..._as_string fields we ignore?  or are there other \"convenience\" fields?  I'm also worried this will make it hard to test.  I would think we should be able to just run the aggregation and compare the actual output to this field list.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r525231577", "createdAt": "2020-11-17T15:11:31Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "diffHunk": "@@ -65,6 +67,18 @@ public String getName() {\n         return name;\n     }\n \n+    /**\n+     * Return the field names this aggregation creates.\n+     *\n+     * This method is a optional helper for clients that need to know the output field names.\n+     *\n+     * @return The set of output field names this aggregation produces without sub-aggregation and\n+     * convenience outputs (\"..._as_string\") or Optional.empty() if unknown or not implemented.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2837eafcdc42f70c02c7aff3e1d82691bdb544"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzIwNDc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxMzo0NlrOH05stA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToyNDowOFrOH06NcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMzMzMg==", "bodyText": "This should probably not be mutable, and definitely not public mutable.  Same for other aggs.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r525233332", "createdAt": "2020-11-17T15:13:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -41,6 +44,8 @@ public static Metrics resolve(String name) {\n         }\n     }\n \n+    public static Set<String> metricNames = Stream.of(Metrics.values()).map(Metrics::name).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2837eafcdc42f70c02c7aff3e1d82691bdb544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MTcxMg==", "bodyText": "or, wait, does that toSet() stream collector return an immutable set?  I don't remember.  I'd still be more comfortable if it was private at least.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r525241712", "createdAt": "2020-11-17T15:24:08Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -41,6 +44,8 @@ public static Metrics resolve(String name) {\n         }\n     }\n \n+    public static Set<String> metricNames = Stream.of(Metrics.values()).map(Metrics::name).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMzMzMg=="}, "originalCommit": {"oid": "0c2837eafcdc42f70c02c7aff3e1d82691bdb544"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDQ3MTk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOToyMDoyOFrOISQhRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjo1NDozMlrOIS4-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxNTk0MA==", "bodyText": "@nik9000 did you want to distinguish between \"not implemented\" and \"we can't know the output fields\", using null for one of them?", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556015940", "createdAt": "2021-01-12T19:20:28Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "diffHunk": "@@ -65,6 +67,17 @@ public String getName() {\n         return name;\n     }\n \n+    /**\n+     * Return the field names this aggregation creates.\n+     *\n+     * This method is a optional helper for clients that need to know the output field names.\n+     *\n+     * @return The set of output field names this aggregation produces or Optional.empty() if unknown or not implemented.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEyOTEwNg==", "bodyText": "I want to make sure we can tell the difference between \"I didn't think about pipelines at all when implementing this agg\" and \"there are no fields exposed by this agg for pipelines\". I think Optional.empty can be \"I didn't think about it\" and \"Optional.of(emptySet())` can be \"there are no fields for pipelines here\".", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556129106", "createdAt": "2021-01-12T22:11:29Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "diffHunk": "@@ -65,6 +67,17 @@ public String getName() {\n         return name;\n     }\n \n+    /**\n+     * Return the field names this aggregation creates.\n+     *\n+     * This method is a optional helper for clients that need to know the output field names.\n+     *\n+     * @return The set of output field names this aggregation produces or Optional.empty() if unknown or not implemented.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxNTk0MA=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3ODc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The set of output field names this aggregation produces or Optional.empty() if unknown or not implemented.\n          \n          \n            \n                 * @return The set of output field names this aggregation produces or Optional.empty() if not implemented or Optional.of(emptySet()) if the fields are not known.\n          \n      \n    \n    \n  \n\nMaybe something like this then?", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556678769", "createdAt": "2021-01-13T16:54:32Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java", "diffHunk": "@@ -65,6 +67,17 @@ public String getName() {\n         return name;\n     }\n \n+    /**\n+     * Return the field names this aggregation creates.\n+     *\n+     * This method is a optional helper for clients that need to know the output field names.\n+     *\n+     * @return The set of output field names this aggregation produces or Optional.empty() if unknown or not implemented.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxNTk0MA=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDUxMTMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOToyODowMlrOISQ4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjo1ODowOFrOIS5JBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyMTk0Mw==", "bodyText": "I'd feel better if we returned an immutable version or a copy here.  Or maybe just make METRIC_NAMES immutable to begin with.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556021943", "createdAt": "2021-01-12T19:28:02Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -115,6 +120,11 @@ public double value(String name) {\n         return super.value(name);\n     }\n \n+    @Override\n+    public Iterable<String> valueNames() {\n+        return METRIC_NAMES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEzMTA0NA==", "bodyText": "I had thought toSet was immutable - looks like it isn't. Yeah, I'd make METRIC_NAMES immutable. Its generally confusing to me when something in CONSTANT_CASE isn't actually immutable.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556131044", "createdAt": "2021-01-12T22:14:23Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -115,6 +120,11 @@ public double value(String name) {\n         return super.value(name);\n     }\n \n+    @Override\n+    public Iterable<String> valueNames() {\n+        return METRIC_NAMES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyMTk0Mw=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY0Njg2Ng==", "bodyText": "\ud83d\udc4d I wrapped them all using Collections.unmodifiableSet(...)", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556646866", "createdAt": "2021-01-13T16:12:10Z", "author": {"login": "hendrikmuhs"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -115,6 +120,11 @@ public double value(String name) {\n         return super.value(name);\n     }\n \n+    @Override\n+    public Iterable<String> valueNames() {\n+        return METRIC_NAMES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyMTk0Mw=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY4MTQ3OQ==", "bodyText": "I had to double check it, and was pretty surprised to learn it wasn't specified to be immutable too.  Wrapping it seems like the right choice.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556681479", "createdAt": "2021-01-13T16:58:08Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java", "diffHunk": "@@ -115,6 +120,11 @@ public double value(String name) {\n         return super.value(name);\n     }\n \n+    @Override\n+    public Iterable<String> valueNames() {\n+        return METRIC_NAMES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyMTk0Mw=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDU0Mjk0OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTozMzozN1rOISRLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjoxMToxM1rOIS2-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyNjY1OA==", "bodyText": "Why do we need this instanceof check?", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556026658", "createdAt": "2021-01-12T19:33:37Z", "author": {"login": "not-napoleon"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -496,6 +501,24 @@ protected void withAggregator(\n         }\n     }\n \n+    protected <T extends AggregationBuilder, V extends InternalAggregation> void verifyOutputFieldNames(T aggregationBuilder, V agg)\n+        throws IOException {\n+        if (aggregationBuilder.getOutputFieldNames().isEmpty()) {\n+            // aggregation does not support output field names yet\n+            return;\n+        }\n+\n+        if (agg instanceof NumericMetricsAggregation.MultiValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY0NjExNw==", "bodyText": "ok, I made it an assert, in future there might be implementations for agg types not based on multi value numeric aggs, but I agree the check was premature and did not force the implementation. In case someone implements getOutputFieldNames for another agg type the assert will force him/her to fix this test.", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556646117", "createdAt": "2021-01-13T16:11:13Z", "author": {"login": "hendrikmuhs"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -496,6 +501,24 @@ protected void withAggregator(\n         }\n     }\n \n+    protected <T extends AggregationBuilder, V extends InternalAggregation> void verifyOutputFieldNames(T aggregationBuilder, V agg)\n+        throws IOException {\n+        if (aggregationBuilder.getOutputFieldNames().isEmpty()) {\n+            // aggregation does not support output field names yet\n+            return;\n+        }\n+\n+        if (agg instanceof NumericMetricsAggregation.MultiValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAyNjY1OA=="}, "originalCommit": {"oid": "e357cf075f43a4988c22119870b4b56ab8dcb881"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDc5MTAyOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjo1NjowNVrOIS5DFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjo1NjowNVrOIS5DFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3OTk1OQ==", "bodyText": "Much better, thank you!", "url": "https://github.com/elastic/elasticsearch/pull/65139#discussion_r556679959", "createdAt": "2021-01-13T16:56:05Z", "author": {"login": "not-napoleon"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -560,15 +560,15 @@ protected void withAggregator(\n             return;\n         }\n \n-        if (agg instanceof NumericMetricsAggregation.MultiValue) {\n-            NumericMetricsAggregation.MultiValue multiValueAgg = (NumericMetricsAggregation.MultiValue) agg;\n-            Set<String> valueNames = new HashSet<>();\n-            for (String name : multiValueAgg.valueNames()) {\n-                valueNames.add(name);\n-            }\n+        assert agg instanceof NumericMetricsAggregation.MultiValue : \"only multi value aggs are supported\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fad26d163ff6e56e880b96138470189371a4c9c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2924, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}