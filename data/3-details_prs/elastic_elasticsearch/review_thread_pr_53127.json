{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzIwNjk2", "number": 53127, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozODoxOFrODlI4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NTozMlrODnb6FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY5NDA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozODoxOFrOFx2-hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozODoxOFrOFx2-hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNTI4Ng==", "bodyText": "We should do that only for wildcard queries. For other term-based queries these characters should remain in the normalization so I'd move this code to StringFieldType#wildcardQuery ?", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r387825286", "createdAt": "2020-03-04T17:38:18Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -305,6 +310,31 @@ protected BytesRef indexedValueForSearch(Object value) {\n             if (value instanceof BytesRef) {\n                 value = ((BytesRef) value).utf8ToString();\n             }\n+            if (value instanceof String) {\n+                // best effort to not pass the wildcard characters and escaped characters through #normalize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec7ecf71282a8b8b191da275aacb386094e657e0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjAwMTY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODozODozOVrOF0tYVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo1NzowMFrOF0t9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxMzc4Mw==", "bodyText": "We don't want to create a wildcard query for the _type field, this is not needed.\nIt should be possible to extend the new ConstantFieldType now that _type can have a single value (or none) ?\nCurrently TypeFieldType#termQuery can return Queries.newNonNestedFilter() and that's not handled in the code below. Although, I don't think this is needed since we exclude nested docs for the entire query at the end of the query parsing so it should be safe to remove. IMO the _type field should solely return MatchNoDocsQuery and MatchAllDocsQuery, that's exactly what the ConstantFieldType provides :).\n@romseygeek what do you think ?", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r390813783", "createdAt": "2020-03-11T08:38:39Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -156,6 +162,24 @@ public Query termsQuery(List<?> values, QueryShardContext context) {\n             }\n         }\n \n+        @Override\n+        public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n+            Query termQuery = termQuery(value, context);\n+            if (termQuery instanceof MatchNoDocsQuery || termQuery instanceof MatchAllDocsQuery) {\n+                return termQuery;\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4529d1172c897342ad3fb9c37c403302affa098"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgyMzI1Nw==", "bodyText": "It should be possible to extend the new ConstantFieldType now that _type can have a single value (or none) ?\n\n+1", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r390823257", "createdAt": "2020-03-11T08:57:00Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -156,6 +162,24 @@ public Query termsQuery(List<?> values, QueryShardContext context) {\n             }\n         }\n \n+        @Override\n+        public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n+            Query termQuery = termQuery(value, context);\n+            if (termQuery instanceof MatchNoDocsQuery || termQuery instanceof MatchAllDocsQuery) {\n+                return termQuery;\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxMzc4Mw=="}, "originalCommit": {"oid": "c4529d1172c897342ad3fb9c37c403302affa098"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzMyNDcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo0NDoxNlrOF06JhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1OToxMlrOF061qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyMjk4MA==", "bodyText": "I think you can use context.getMapperService().type() here, instead of SINGLE_MAPPING_NAME, and it will then backport easily.", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391022980", "createdAt": "2020-03-11T14:44:16Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -121,61 +121,12 @@ public ValuesSourceType getValuesSourceType() {\n         }\n \n         @Override\n-        public boolean isSearchable() {\n-            return true;\n-        }\n-\n-        @Override\n-        public Query existsQuery(QueryShardContext context) {\n-            return new MatchAllDocsQuery();\n-        }\n-\n-        @Override\n-        public Query termQuery(Object value, QueryShardContext context) {\n-            return termsQuery(Arrays.asList(value), context);\n-        }\n-\n-        @Override\n-        public Query termsQuery(List<?> values, QueryShardContext context) {\n-            DocumentMapper mapper = context.getMapperService().documentMapper();\n-            if (mapper == null) {\n-                return new MatchNoDocsQuery(\"No types\");\n-            }\n-            BytesRef indexType = indexedValueForSearch(mapper.type());\n-            if (values.stream()\n-                    .map(this::indexedValueForSearch)\n-                    .anyMatch(indexType::equals)) {\n-                if (context.getMapperService().hasNested()) {\n-                    // type filters are expected not to match nested docs\n-                    return Queries.newNonNestedFilter();\n-                } else {\n-                    return new MatchAllDocsQuery();\n-                }\n-            } else {\n-                return new MatchNoDocsQuery(\"Type list does not contain the index type\");\n-            }\n-        }\n-\n-        @Override\n-        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {\n-            Query result = new MatchAllDocsQuery();\n-            String type = context.getMapperService().documentMapper().type();\n-            if (type != null) {\n-                BytesRef typeBytes = new BytesRef(type);\n-                if (lowerTerm != null) {\n-                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);\n-                    if (comp > 0 || (comp == 0 && includeLower == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically smaller than lower bound of range\");\n-                    }\n-                }\n-                if (upperTerm != null) {\n-                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);\n-                    if (comp < 0 || (comp == 0 && includeUpper == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically greater than upper bound of range\");\n-                    }\n-                }\n+        protected boolean matches(String pattern, QueryShardContext context) {\n+            if (pattern.contains(\"?\") == false) {\n+                return Regex.simpleMatch(pattern, MapperService.SINGLE_MAPPING_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjc4NA==", "bodyText": "context.getMapperService().type()\n\nDoesn't seem to be there on master? Or am I missing sth? I can sure use this when backporting...", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391032784", "createdAt": "2020-03-11T14:57:15Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -121,61 +121,12 @@ public ValuesSourceType getValuesSourceType() {\n         }\n \n         @Override\n-        public boolean isSearchable() {\n-            return true;\n-        }\n-\n-        @Override\n-        public Query existsQuery(QueryShardContext context) {\n-            return new MatchAllDocsQuery();\n-        }\n-\n-        @Override\n-        public Query termQuery(Object value, QueryShardContext context) {\n-            return termsQuery(Arrays.asList(value), context);\n-        }\n-\n-        @Override\n-        public Query termsQuery(List<?> values, QueryShardContext context) {\n-            DocumentMapper mapper = context.getMapperService().documentMapper();\n-            if (mapper == null) {\n-                return new MatchNoDocsQuery(\"No types\");\n-            }\n-            BytesRef indexType = indexedValueForSearch(mapper.type());\n-            if (values.stream()\n-                    .map(this::indexedValueForSearch)\n-                    .anyMatch(indexType::equals)) {\n-                if (context.getMapperService().hasNested()) {\n-                    // type filters are expected not to match nested docs\n-                    return Queries.newNonNestedFilter();\n-                } else {\n-                    return new MatchAllDocsQuery();\n-                }\n-            } else {\n-                return new MatchNoDocsQuery(\"Type list does not contain the index type\");\n-            }\n-        }\n-\n-        @Override\n-        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {\n-            Query result = new MatchAllDocsQuery();\n-            String type = context.getMapperService().documentMapper().type();\n-            if (type != null) {\n-                BytesRef typeBytes = new BytesRef(type);\n-                if (lowerTerm != null) {\n-                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);\n-                    if (comp > 0 || (comp == 0 && includeLower == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically smaller than lower bound of range\");\n-                    }\n-                }\n-                if (upperTerm != null) {\n-                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);\n-                    if (comp < 0 || (comp == 0 && includeUpper == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically greater than upper bound of range\");\n-                    }\n-                }\n+        protected boolean matches(String pattern, QueryShardContext context) {\n+            if (pattern.contains(\"?\") == false) {\n+                return Regex.simpleMatch(pattern, MapperService.SINGLE_MAPPING_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyMjk4MA=="}, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNDI4MQ==", "bodyText": "Sorry, I mean context.getMapperService().documentMapper().type()", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391034281", "createdAt": "2020-03-11T14:59:12Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -121,61 +121,12 @@ public ValuesSourceType getValuesSourceType() {\n         }\n \n         @Override\n-        public boolean isSearchable() {\n-            return true;\n-        }\n-\n-        @Override\n-        public Query existsQuery(QueryShardContext context) {\n-            return new MatchAllDocsQuery();\n-        }\n-\n-        @Override\n-        public Query termQuery(Object value, QueryShardContext context) {\n-            return termsQuery(Arrays.asList(value), context);\n-        }\n-\n-        @Override\n-        public Query termsQuery(List<?> values, QueryShardContext context) {\n-            DocumentMapper mapper = context.getMapperService().documentMapper();\n-            if (mapper == null) {\n-                return new MatchNoDocsQuery(\"No types\");\n-            }\n-            BytesRef indexType = indexedValueForSearch(mapper.type());\n-            if (values.stream()\n-                    .map(this::indexedValueForSearch)\n-                    .anyMatch(indexType::equals)) {\n-                if (context.getMapperService().hasNested()) {\n-                    // type filters are expected not to match nested docs\n-                    return Queries.newNonNestedFilter();\n-                } else {\n-                    return new MatchAllDocsQuery();\n-                }\n-            } else {\n-                return new MatchNoDocsQuery(\"Type list does not contain the index type\");\n-            }\n-        }\n-\n-        @Override\n-        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {\n-            Query result = new MatchAllDocsQuery();\n-            String type = context.getMapperService().documentMapper().type();\n-            if (type != null) {\n-                BytesRef typeBytes = new BytesRef(type);\n-                if (lowerTerm != null) {\n-                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);\n-                    if (comp > 0 || (comp == 0 && includeLower == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically smaller than lower bound of range\");\n-                    }\n-                }\n-                if (upperTerm != null) {\n-                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);\n-                    if (comp < 0 || (comp == 0 && includeUpper == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically greater than upper bound of range\");\n-                    }\n-                }\n+        protected boolean matches(String pattern, QueryShardContext context) {\n+            if (pattern.contains(\"?\") == false) {\n+                return Regex.simpleMatch(pattern, MapperService.SINGLE_MAPPING_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyMjk4MA=="}, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzMzNDgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/ConstantFieldType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo0NjoyMFrOF06Pzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToxMTowNVrOF07YDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNDU5MA==", "bodyText": "Is this for backwards compatibility? Nested fields are defined using a different field in 8x", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391024590", "createdAt": "2020-03-11T14:46:20Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ConstantFieldType.java", "diffHunk": "@@ -79,6 +79,10 @@ private static String valueToString(Object value) {\n     public final Query termQuery(Object value, QueryShardContext context) {\n         String pattern = valueToString(value);\n         if (matches(pattern, context)) {\n+            if (context != null && context.getMapperService().hasNested()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTMyNg==", "bodyText": "Yes, I wasn't sure about this, there was a test failing without it here: https://github.com/elastic/elasticsearch/blob/master/server/src/test/java/org/elasticsearch/index/mapper/TypeFieldTypeTests.java#L70, so I assumed its still valid. If this is not the case I'm happy to remove this together with the test, but I wasn't sure about the implications.", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391031326", "createdAt": "2020-03-11T14:55:23Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ConstantFieldType.java", "diffHunk": "@@ -79,6 +79,10 @@ private static String valueToString(Object value) {\n     public final Query termQuery(Object value, QueryShardContext context) {\n         String pattern = valueToString(value);\n         if (matches(pattern, context)) {\n+            if (context != null && context.getMapperService().hasNested()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNDU5MA=="}, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MzA4Ng==", "bodyText": "Yes, I don't think this applies any more, as nested queries are always built via the NestedPathFieldMapper, so you should be able to remove this block and those few lines of the test.", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391043086", "createdAt": "2020-03-11T15:11:05Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ConstantFieldType.java", "diffHunk": "@@ -79,6 +79,10 @@ private static String valueToString(Object value) {\n     public final Query termQuery(Object value, QueryShardContext context) {\n         String pattern = valueToString(value);\n         if (matches(pattern, context)) {\n+            if (context != null && context.getMapperService().hasNested()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNDU5MA=="}, "originalCommit": {"oid": "ddf828c25f28854551edd45589339965924fc46f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc4MjkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NTozMlrOF1blwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NTozMlrOF1blwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDg4Mg==", "bodyText": "I don't think we need to handle wildcard and prefixes here ? We don't support prefix and wildcard queries on the _type field today and since _type are now a thing from the past I don't think we should add this ability. Just checking that the pattern exactly matches the internal type should be enough.", "url": "https://github.com/elastic/elasticsearch/pull/53127#discussion_r391570882", "createdAt": "2020-03-12T11:55:32Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java", "diffHunk": "@@ -121,61 +121,12 @@ public ValuesSourceType getValuesSourceType() {\n         }\n \n         @Override\n-        public boolean isSearchable() {\n-            return true;\n-        }\n-\n-        @Override\n-        public Query existsQuery(QueryShardContext context) {\n-            return new MatchAllDocsQuery();\n-        }\n-\n-        @Override\n-        public Query termQuery(Object value, QueryShardContext context) {\n-            return termsQuery(Arrays.asList(value), context);\n-        }\n-\n-        @Override\n-        public Query termsQuery(List<?> values, QueryShardContext context) {\n-            DocumentMapper mapper = context.getMapperService().documentMapper();\n-            if (mapper == null) {\n-                return new MatchNoDocsQuery(\"No types\");\n-            }\n-            BytesRef indexType = indexedValueForSearch(mapper.type());\n-            if (values.stream()\n-                    .map(this::indexedValueForSearch)\n-                    .anyMatch(indexType::equals)) {\n-                if (context.getMapperService().hasNested()) {\n-                    // type filters are expected not to match nested docs\n-                    return Queries.newNonNestedFilter();\n-                } else {\n-                    return new MatchAllDocsQuery();\n-                }\n-            } else {\n-                return new MatchNoDocsQuery(\"Type list does not contain the index type\");\n-            }\n-        }\n-\n-        @Override\n-        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {\n-            Query result = new MatchAllDocsQuery();\n-            String type = context.getMapperService().documentMapper().type();\n-            if (type != null) {\n-                BytesRef typeBytes = new BytesRef(type);\n-                if (lowerTerm != null) {\n-                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);\n-                    if (comp > 0 || (comp == 0 && includeLower == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically smaller than lower bound of range\");\n-                    }\n-                }\n-                if (upperTerm != null) {\n-                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);\n-                    if (comp < 0 || (comp == 0 && includeUpper == false)) {\n-                        result = new MatchNoDocsQuery(\"[_type] was lexicographically greater than upper bound of range\");\n-                    }\n-                }\n+        protected boolean matches(String pattern, QueryShardContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db5ea54bfed5867e1bf8e8bd3324ab36adf2473b"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3412, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}