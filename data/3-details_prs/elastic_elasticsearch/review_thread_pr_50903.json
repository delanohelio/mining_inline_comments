{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDQwNDE2", "number": 50903, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxMzozMVrODXoFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMTo0N1rODXoO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAwNDk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/checkpoint/RemoteClusterResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxMzozMVrOFdBiWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxMzozMVrOFdBiWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public int size() {\n          \n          \n            \n                    public int numClusters() {\n          \n      \n    \n    \n  \n\nOr something. I thought size() was meant to be the number of total resolved indices, but instead it is used to help allocate the grouped listener.", "url": "https://github.com/elastic/elasticsearch/pull/50903#discussion_r365978201", "createdAt": "2020-01-13T19:13:31Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/checkpoint/RemoteClusterResolver.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.transform.checkpoint;\n+\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.transport.RemoteClusterAware;\n+import org.elasticsearch.transport.RemoteConnectionStrategy;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+/**\n+ * Maintain a list of remote clusters (aliases) and provide the ability to resolve.\n+ */\n+class RemoteClusterResolver extends RemoteClusterAware {\n+\n+    private final CopyOnWriteArraySet<String> clusters;\n+\n+    class ResolvedIndices {\n+        private final Map<String, List<String>> remoteIndicesPerClusterAlias;\n+        private final List<String> localIndices;\n+\n+        ResolvedIndices(Map<String, List<String>> remoteIndicesPerClusterAlias, List<String> localIndices) {\n+            this.localIndices = localIndices;\n+            this.remoteIndicesPerClusterAlias = remoteIndicesPerClusterAlias;\n+        }\n+\n+        public Map<String, List<String>> getRemoteIndicesPerClusterAlias() {\n+            return remoteIndicesPerClusterAlias;\n+        }\n+\n+        public List<String> getLocalIndices() {\n+            return localIndices;\n+        }\n+\n+        public int size() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85140ab5c0162e697b910e9b76fa3c3ba525edbf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAzMDM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/checkpoint/DefaultCheckpointProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMTo0N1rOFdBx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMTo0N1rOFdBx-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MjIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"\",\n          \n          \n            \n                                LOCAL_CLUSTER_GROUP_KEY,", "url": "https://github.com/elastic/elasticsearch/pull/50903#discussion_r365982203", "createdAt": "2020-01-13T19:21:47Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/checkpoint/DefaultCheckpointProvider.java", "diffHunk": "@@ -84,13 +93,61 @@ public void createNextCheckpoint(final TransformCheckpoint lastCheckpoint, final\n     }\n \n     protected void getIndexCheckpoints(ActionListener<Map<String, long[]>> listener) {\n+        try {\n+            ResolvedIndices resolvedIndexes = remoteClusterResolver.resolve(transformConfig.getSource().getIndex());\n+            ActionListener<Map<String, long[]>> groupedListener = listener;\n+\n+            if (resolvedIndexes.size() > 1) {\n+                ActionListener<Collection<Map<String, long[]>>> mergeMapsListener = ActionListener.wrap(indexCheckpoints -> {\n+                    listener.onResponse(\n+                        indexCheckpoints.stream()\n+                            .flatMap(m -> m.entrySet().stream())\n+                            .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()))\n+                    );\n+                }, listener::onFailure);\n+\n+                groupedListener = new GroupedActionListener<>(mergeMapsListener, resolvedIndexes.size());\n+            }\n+\n+            if (resolvedIndexes.getLocalIndices().isEmpty() == false) {\n+                getCheckpointsFromOneCluster(\n+                    client,\n+                    transformConfig.getHeaders(),\n+                    resolvedIndexes.getLocalIndices().toArray(new String[0]),\n+                    \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85140ab5c0162e697b910e9b76fa3c3ba525edbf"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}